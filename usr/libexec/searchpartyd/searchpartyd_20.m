uint64_t sub_100B7C2AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2512);
  *(_QWORD *)(*v1 + 2520) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 888);
    swift_bridgeObjectRelease();
    v5 = sub_100B81560;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 888);
    v5 = sub_100B7C320;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100B7C320(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  __int128 *v38;
  uint64_t (__cdecl *v39)();
  uint64_t v40;

  v38 = (__int128 *)(v1 + 22);
  v2 = v1[315];
  v3 = v1[213];
  v4 = v1[189];
  v28 = v1[178];
  v30 = v1[247];
  v32 = v1[177];
  v34 = (void (*)(uint64_t, uint64_t, uint64_t))v1[248];
  v5 = v1[173];
  v36 = v1[172];
  v6 = v1[115];
  v7 = v1[114];
  v27 = v1[113];
  v8 = *(_QWORD *)(v1[111] + 392);
  static DispatchWorkItemFlags.barrier.getter(a1);
  v9 = (_QWORD *)swift_task_alloc(48);
  v9[2] = v8;
  v9[3] = v3;
  v9[4] = sub_100B838B8;
  v9[5] = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)(v6, sub_100151538);
  v1[316] = v2;
  swift_task_dealloc(v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v27);
  v34(v4, v30, v28);
  sub_10005972C(v32, v5, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v5, v36, type metadata accessor for MemberSharingCircle);
  v10 = sub_1000126B0(v5, type metadata accessor for MemberSharingCircle);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v31 = v1[178];
    v33 = v1[189];
    v13 = v1[172];
    v29 = v1[129];
    v35 = v1[116];
    v37 = (void (*)(uint64_t, uint64_t))v1[276];
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v40 = v15;
    *(_DWORD *)v14 = 141558275;
    v1[89] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 89, v1 + 90, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v29, v16);
    v1[90] = sub_100016940(v17, v18, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 90, v1 + 91, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v13, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Data update on handle circle trust. Create %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v37(v33, v31);
    v19 = v35;
  }
  else
  {
    v20 = (void (*)(uint64_t, uint64_t))v1[276];
    v21 = v1[189];
    v22 = v1[178];
    v23 = v1[172];
    v24 = v1[116];

    sub_1000126B0(v23, type metadata accessor for MemberSharingCircle);
    v20(v21, v22);
    v19 = v24;
  }
  sub_100004048(v19, &qword_1010EC870);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v1 + 52, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v38, &qword_1010EE220);
  if (v1[25])
  {
    sub_10000F9FC(v38, (uint64_t)(v1 + 17));
    sub_10001AA44(v1 + 17, v1[20]);
    v39 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v26 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    v1[317] = v26;
    *v26 = v1;
    v26[1] = sub_100B7C700;
    return v39();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B7C700(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2536);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 888);
  *(_QWORD *)(*(_QWORD *)v1 + 2544) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B7C760, v3, 0);
}

uint64_t sub_100B7C760()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[318];
  v2 = v0[158];
  v3 = v0[154];
  v4 = v0[153];
  v5 = v0[152];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 17);
  sub_10005972C(v2, v3, type metadata accessor for SharedBeaconRecord);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AF9F8, v7 + v4, v6 | 7);
  v0[319] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  sub_1000126EC(v3, v8 + v7, type metadata accessor for SharedBeaconRecord);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[320] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v10 = v0;
  v10[1] = sub_100B7C864;
  return unsafeBlocking<A>(_:)(v0 + 360, sub_1000D99D4, v8, v11);
}

uint64_t sub_100B7C864()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 888);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2560));
  swift_release();
  return swift_task_switch(sub_100B7C8C8, v1, 0);
}

uint64_t sub_100B7C8C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 1960);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 2568) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 1312);
    v4 = *(_QWORD *)(v0 + 1280);
    v5 = *(int *)(*(_QWORD *)(v0 + 1272) + 20);
    *(_DWORD *)(v0 + 2872) = v5;
    v6 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 2876) = v6;
    *(_QWORD *)(v0 + 2576) = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 2584) = 0;
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v8 = *(_QWORD *)(v0 + 1080);
    v9 = *(_QWORD *)(v0 + 1032);
    v10 = v3 + v5;
    v11 = *(_QWORD *)(v0 + 1824) + *(int *)(v0 + 2772);
    sub_10005972C(v1 + ((v6 + 32) & ~(unint64_t)v6), v3, type metadata accessor for MemberPeerTrust);
    v7(v8, v10, v9);
    sub_1000126B0(v3, type metadata accessor for MemberPeerTrust);
    v13 = *(_QWORD *)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    LOBYTE(v9) = *(_BYTE *)v11;
    v14 = (_QWORD *)swift_task_alloc(dword_10111208C);
    *(_QWORD *)(v0 + 2592) = v14;
    *v14 = v0;
    v14[1] = sub_100B7CA10;
    return sub_100AAE980(*(_QWORD *)(v0 + 1080), v9, v13, v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 2608) = *(_QWORD *)(v0 + 2528);
    return swift_task_switch(sub_100B7D3C0, *(_QWORD *)(v0 + 1848), 0);
  }
}

uint64_t sub_100B7CA10()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2592);
  *(_QWORD *)(*(_QWORD *)v1 + 2600) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = (void (*)(uint64_t, uint64_t))v2[230];
    v5 = v2[135];
    v6 = v2[129];
    v7 = v2[111];
    v4(v5, v6);
    swift_bridgeObjectRelease();
    v8 = sub_100B7CBEC;
    v9 = v7;
  }
  else
  {
    v10 = v2[111];
    ((void (*)(_QWORD, _QWORD))v2[230])(v2[135], v2[129]);
    v8 = sub_100B7CAAC;
    v9 = v10;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100B7CAAC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 2584) + 1;
  if (v1 == *(_QWORD *)(v0 + 2568))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 2608) = *(_QWORD *)(v0 + 2600);
    return swift_task_switch(sub_100B7D3C0, *(_QWORD *)(v0 + 1848), 0);
  }
  else
  {
    *(_QWORD *)(v0 + 2584) = v1;
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v4 = *(_QWORD *)(v0 + 1312);
    v5 = *(_QWORD *)(v0 + 1080);
    v6 = *(_QWORD *)(v0 + 1032);
    v7 = v4 + *(int *)(v0 + 2872);
    v8 = *(_QWORD *)(v0 + 1824) + *(int *)(v0 + 2772);
    sub_10005972C(*(_QWORD *)(v0 + 1960)+ ((*(unsigned __int8 *)(v0 + 2876) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2876))+ *(_QWORD *)(v0 + 2576) * v1, v4, type metadata accessor for MemberPeerTrust);
    v3(v5, v7, v6);
    sub_1000126B0(v4, type metadata accessor for MemberPeerTrust);
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    LOBYTE(v6) = *(_BYTE *)v8;
    v11 = (_QWORD *)swift_task_alloc(dword_10111208C);
    *(_QWORD *)(v0 + 2592) = v11;
    *v11 = v0;
    v11[1] = sub_100B7CA10;
    return sub_100AAE980(*(_QWORD *)(v0 + 1080), v6, v10, v9);
  }
}

uint64_t sub_100B7CBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v1 = *(_QWORD *)(v0 + 2600);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1504), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 2600);
    v108 = *(_QWORD *)(v0 + 1424);
    v110 = *(_QWORD *)(v0 + 1504);
    v114 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v116 = *(_QWORD *)(v0 + 1344);
    v112 = *(_QWORD *)(v0 + 1200);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v118 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_getErrorValue(v5, v0 + 600, v0 + 368);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
    *(_QWORD *)(v0 + 616) = sub_100016940(v8, v9, &v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on handleCircleTrust, sending PeerTrustAck message: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
    swift_release();
    v114(v110, v108);
    sub_100004048(v112, &qword_1010EC868);
    v10 = v116;
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 2600);
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v13 = *(_QWORD *)(v0 + 1504);
    v14 = *(_QWORD *)(v0 + 1424);
    v15 = *(_QWORD *)(v0 + 1344);
    v16 = *(_QWORD *)(v0 + 1200);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_release();
    v12(v13, v14);
    sub_100004048(v16, &qword_1010EC868);
    v10 = v15;
  }
  sub_1000126B0(v10, type metadata accessor for MemberPeerTrust);
  v17 = *(_QWORD *)(v0 + 1416);
  v18 = *(_QWORD *)(v0 + 1264);
  sub_100004048(*(_QWORD *)(v0 + 952), (uint64_t *)&unk_1010EE180);
  sub_1000126B0(v18, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v17, type metadata accessor for MemberSharingCircle);
  v19 = *(_QWORD *)(v0 + 1824);
  v20 = *(_QWORD *)(v0 + 1816);
  v21 = *(_QWORD *)(v0 + 1808);
  v22 = *(_QWORD *)(v0 + 1800);
  v23 = *(_QWORD *)(v0 + 1792);
  v24 = *(_QWORD *)(v0 + 1784);
  v25 = *(_QWORD *)(v0 + 1776);
  v26 = *(_QWORD *)(v0 + 1768);
  v29 = *(_QWORD *)(v0 + 1760);
  v30 = *(_QWORD *)(v0 + 1752);
  v31 = *(_QWORD *)(v0 + 1744);
  v32 = *(_QWORD *)(v0 + 1736);
  v33 = *(_QWORD *)(v0 + 1728);
  v34 = *(_QWORD *)(v0 + 1720);
  v27 = *(_QWORD *)(v0 + 1704);
  v35 = *(_QWORD *)(v0 + 1696);
  v36 = *(_QWORD *)(v0 + 1688);
  v37 = *(_QWORD *)(v0 + 1680);
  v38 = *(_QWORD *)(v0 + 1672);
  v39 = *(_QWORD *)(v0 + 1664);
  v40 = *(_QWORD *)(v0 + 1656);
  v41 = *(_QWORD *)(v0 + 1648);
  v42 = *(_QWORD *)(v0 + 1640);
  v43 = *(_QWORD *)(v0 + 1632);
  v44 = *(_QWORD *)(v0 + 1624);
  v45 = *(_QWORD *)(v0 + 1616);
  v46 = *(_QWORD *)(v0 + 1608);
  v47 = *(_QWORD *)(v0 + 1600);
  v48 = *(_QWORD *)(v0 + 1592);
  v49 = *(_QWORD *)(v0 + 1584);
  v50 = *(_QWORD *)(v0 + 1576);
  v51 = *(_QWORD *)(v0 + 1568);
  v52 = *(_QWORD *)(v0 + 1560);
  v53 = *(_QWORD *)(v0 + 1544);
  v54 = *(_QWORD *)(v0 + 1536);
  v55 = *(_QWORD *)(v0 + 1528);
  v56 = *(_QWORD *)(v0 + 1520);
  v57 = *(_QWORD *)(v0 + 1512);
  v58 = *(_QWORD *)(v0 + 1504);
  v59 = *(_QWORD *)(v0 + 1496);
  v60 = *(_QWORD *)(v0 + 1488);
  v61 = *(_QWORD *)(v0 + 1480);
  v62 = *(_QWORD *)(v0 + 1472);
  v63 = *(_QWORD *)(v0 + 1464);
  v64 = *(_QWORD *)(v0 + 1456);
  v65 = *(_QWORD *)(v0 + 1448);
  v66 = *(_QWORD *)(v0 + 1440);
  v67 = *(_QWORD *)(v0 + 1416);
  v68 = *(_QWORD *)(v0 + 1408);
  v69 = *(_QWORD *)(v0 + 1400);
  v70 = *(_QWORD *)(v0 + 1392);
  v71 = *(_QWORD *)(v0 + 1384);
  v72 = *(_QWORD *)(v0 + 1376);
  v73 = *(_QWORD *)(v0 + 1344);
  v74 = *(_QWORD *)(v0 + 1336);
  v75 = *(_QWORD *)(v0 + 1328);
  v76 = *(_QWORD *)(v0 + 1320);
  v77 = *(_QWORD *)(v0 + 1312);
  v78 = *(_QWORD *)(v0 + 1304);
  v79 = *(_QWORD *)(v0 + 1296);
  v80 = *(_QWORD *)(v0 + 1288);
  v81 = *(_QWORD *)(v0 + 1264);
  v82 = *(_QWORD *)(v0 + 1256);
  v83 = *(_QWORD *)(v0 + 1248);
  v84 = *(_QWORD *)(v0 + 1240);
  v85 = *(_QWORD *)(v0 + 1232);
  v86 = *(_QWORD *)(v0 + 1200);
  v87 = *(_QWORD *)(v0 + 1192);
  v88 = *(_QWORD *)(v0 + 1184);
  v89 = *(_QWORD *)(v0 + 1176);
  v90 = *(_QWORD *)(v0 + 1168);
  v91 = *(_QWORD *)(v0 + 1160);
  v92 = *(_QWORD *)(v0 + 1152);
  v93 = *(_QWORD *)(v0 + 1144);
  v94 = *(_QWORD *)(v0 + 1120);
  v95 = *(_QWORD *)(v0 + 1112);
  v96 = *(_QWORD *)(v0 + 1104);
  v97 = *(_QWORD *)(v0 + 1096);
  v98 = *(_QWORD *)(v0 + 1088);
  v99 = *(_QWORD *)(v0 + 1080);
  v100 = *(_QWORD *)(v0 + 1072);
  v101 = *(_QWORD *)(v0 + 1064);
  v102 = *(_QWORD *)(v0 + 1056);
  v103 = *(_QWORD *)(v0 + 1024);
  v104 = *(_QWORD *)(v0 + 1016);
  v105 = *(_QWORD *)(v0 + 1008);
  v106 = *(_QWORD *)(v0 + 1000);
  v107 = *(_QWORD *)(v0 + 976);
  v109 = *(_QWORD *)(v0 + 952);
  v111 = *(_QWORD *)(v0 + 944);
  v113 = *(_QWORD *)(v0 + 928);
  v115 = *(_QWORD *)(v0 + 920);
  v117 = *(_QWORD *)(v0 + 896);
  sub_100004048(v27, &qword_1010EE1E0);
  sub_100004048(v19, &qword_1010EE1E8);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v27);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B7D3C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 2616) = v2;
  *v2 = v0;
  v2[1] = sub_100B7D42C;
  return unsafeBlocking<A>(_:)(v2, sub_100142ACC, *(_QWORD *)(v0 + 1848), &type metadata for () + 1);
}

uint64_t sub_100B7D42C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2616));
  swift_release();
  return swift_task_switch(sub_100B7D48C, v1, 0);
}

uint64_t sub_100B7D48C()
{
  uint64_t v0;

  return swift_task_switch(sub_100B7D4A0, *(_QWORD *)(v0 + 1848), 0);
}

uint64_t sub_100B7D4A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[231];
  v2 = swift_allocObject(&unk_1010AFA20, 25, 7);
  v0[328] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 0;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[329] = v4;
  *v4 = v0;
  v4[1] = sub_100B7D53C;
  return unsafeBlocking<A>(_:)(v4, sub_1000D9274, v2, &type metadata for () + 1);
}

uint64_t sub_100B7D53C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2632));
  swift_release();
  return swift_task_switch(sub_100B7D5A0, v1, 0);
}

uint64_t sub_100B7D5A0()
{
  uint64_t v0;

  return swift_task_switch(sub_100B7D5B4, *(_QWORD *)(v0 + 888), 0);
}

uint64_t sub_100B7D5B4()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  __n128 v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, __n128);
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(void);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158[2];
  uint64_t v159;
  uint64_t v160;

  v1 = *(int **)(v0 + 856);
  if (v1)
  {
    v154 = (uint64_t (*)(void))((char *)v1 + *v1);
    v2 = (_QWORD *)swift_task_alloc(v1[1]);
    *(_QWORD *)(v0 + 2640) = v2;
    *v2 = v0;
    v2[1] = sub_100B7DFF0;
    return v154();
  }
  else
  {
    v151 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2080);
    v155 = *(_QWORD *)(v0 + 2608);
    v4 = *(int *)(v0 + 2780);
    v5 = *(int *)(v0 + 2768);
    v6 = *(_QWORD *)(v0 + 1824);
    v7 = *(_QWORD *)(v0 + 1816);
    v8 = *(_QWORD *)(v0 + 1032);
    v9 = (uint64_t *)(v6 + *(int *)(v0 + 2784));
    v10 = (uint64_t *)(v6 + *(int *)(v0 + 2776));
    v11 = (char *)(v6 + *(int *)(v0 + 2772));
    v12 = *(_QWORD *)(v0 + 896);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832))(v7, v6, v8);
    v144 = *(_BYTE *)(v6 + v5);
    v149 = *v11;
    v13 = *((_QWORD *)v11 + 2);
    v147 = *((_QWORD *)v11 + 1);
    v14 = *v10;
    v15 = v10[1];
    v142 = v14;
    v16 = *(_QWORD *)(v6 + v4);
    v17 = *v9;
    v18 = v9[1];
    v151(v12, v7, v8);
    sub_10038A244(2, 1, v12, (uint64_t)v158);
    if (v155)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
      swift_errorRetain(v155);
      v19 = swift_errorRetain(v155);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter(v20);
      v22 = os_log_type_enabled(v20, v21);
      v23 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
      v24 = *(_QWORD *)(v0 + 1440);
      v25 = *(_QWORD *)(v0 + 1424);
      v26 = *(_QWORD *)(v0 + 1344);
      v27 = *(_QWORD *)(v0 + 1200);
      if (v22)
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v145 = v23;
        v29 = swift_slowAlloc(32, -1);
        v158[0] = v29;
        *(_DWORD *)v28 = 136446210;
        swift_getErrorValue(v155, v0 + 624, v0 + 344);
        v30 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
        *(_QWORD *)(v0 + 640) = sub_100016940(v30, v31, v158);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v28 + 4, v28 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v155);
        swift_errorRelease(v155);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failure on handleCircleTrust, sending message: %{public}s", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        swift_errorRelease(v155);
        swift_release();
        v145(v24, v25);
      }
      else
      {

        swift_errorRelease(v155);
        swift_errorRelease(v155);
        swift_errorRelease(v155);
        swift_release();
        v23(v24, v25);
      }
      sub_100004048(v27, &qword_1010EC868);
      sub_1000126B0(v26, type metadata accessor for MemberPeerTrust);
      v44 = *(_QWORD *)(v0 + 1416);
      v45 = *(_QWORD *)(v0 + 1264);
      sub_100004048(*(_QWORD *)(v0 + 952), (uint64_t *)&unk_1010EE180);
      sub_1000126B0(v45, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(v44, type metadata accessor for MemberSharingCircle);
      v46 = *(_QWORD *)(v0 + 1824);
      v47 = *(_QWORD *)(v0 + 1816);
      v48 = *(_QWORD *)(v0 + 1808);
      v49 = *(_QWORD *)(v0 + 1800);
      v50 = *(_QWORD *)(v0 + 1792);
      v51 = *(_QWORD *)(v0 + 1784);
      v52 = *(_QWORD *)(v0 + 1776);
      v53 = *(_QWORD *)(v0 + 1768);
      v55 = *(_QWORD *)(v0 + 1760);
      v56 = *(_QWORD *)(v0 + 1752);
      v57 = *(_QWORD *)(v0 + 1744);
      v58 = *(_QWORD *)(v0 + 1736);
      v59 = *(_QWORD *)(v0 + 1728);
      v60 = *(_QWORD *)(v0 + 1720);
      v54 = *(_QWORD *)(v0 + 1704);
      v61 = *(_QWORD *)(v0 + 1696);
      v62 = *(_QWORD *)(v0 + 1688);
      v63 = *(_QWORD *)(v0 + 1680);
      v64 = *(_QWORD *)(v0 + 1672);
      v65 = *(_QWORD *)(v0 + 1664);
      v66 = *(_QWORD *)(v0 + 1656);
      v67 = *(_QWORD *)(v0 + 1648);
      v68 = *(_QWORD *)(v0 + 1640);
      v69 = *(_QWORD *)(v0 + 1632);
      v70 = *(_QWORD *)(v0 + 1624);
      v71 = *(_QWORD *)(v0 + 1616);
      v72 = *(_QWORD *)(v0 + 1608);
      v73 = *(_QWORD *)(v0 + 1600);
      v74 = *(_QWORD *)(v0 + 1592);
      v75 = *(_QWORD *)(v0 + 1584);
      v76 = *(_QWORD *)(v0 + 1576);
      v77 = *(_QWORD *)(v0 + 1568);
      v78 = *(_QWORD *)(v0 + 1560);
      v79 = *(_QWORD *)(v0 + 1544);
      v80 = *(_QWORD *)(v0 + 1536);
      v81 = *(_QWORD *)(v0 + 1528);
      v82 = *(_QWORD *)(v0 + 1520);
      v83 = *(_QWORD *)(v0 + 1512);
      v84 = *(_QWORD *)(v0 + 1504);
      v85 = *(_QWORD *)(v0 + 1496);
      v86 = *(_QWORD *)(v0 + 1488);
      v87 = *(_QWORD *)(v0 + 1480);
      v88 = *(_QWORD *)(v0 + 1472);
      v89 = *(_QWORD *)(v0 + 1464);
      v90 = *(_QWORD *)(v0 + 1456);
      v91 = *(_QWORD *)(v0 + 1448);
      v92 = *(_QWORD *)(v0 + 1440);
      v93 = *(_QWORD *)(v0 + 1416);
      v94 = *(_QWORD *)(v0 + 1408);
      v95 = *(_QWORD *)(v0 + 1400);
      v96 = *(_QWORD *)(v0 + 1392);
      v97 = *(_QWORD *)(v0 + 1384);
      v98 = *(_QWORD *)(v0 + 1376);
      v99 = *(_QWORD *)(v0 + 1344);
      v100 = *(_QWORD *)(v0 + 1336);
      v101 = *(_QWORD *)(v0 + 1328);
      v102 = *(_QWORD *)(v0 + 1320);
      v103 = *(_QWORD *)(v0 + 1312);
      v104 = *(_QWORD *)(v0 + 1304);
      v105 = *(_QWORD *)(v0 + 1296);
      v106 = *(_QWORD *)(v0 + 1288);
      v107 = *(_QWORD *)(v0 + 1264);
      v108 = *(_QWORD *)(v0 + 1256);
      v109 = *(_QWORD *)(v0 + 1248);
      v110 = *(_QWORD *)(v0 + 1240);
      v111 = *(_QWORD *)(v0 + 1232);
      v112 = *(_QWORD *)(v0 + 1200);
      v113 = *(_QWORD *)(v0 + 1192);
      v114 = *(_QWORD *)(v0 + 1184);
      v115 = *(_QWORD *)(v0 + 1176);
      v116 = *(_QWORD *)(v0 + 1168);
      v117 = *(_QWORD *)(v0 + 1160);
      v118 = *(_QWORD *)(v0 + 1152);
      v119 = *(_QWORD *)(v0 + 1144);
      v120 = *(_QWORD *)(v0 + 1120);
      v121 = *(_QWORD *)(v0 + 1112);
      v123 = *(_QWORD *)(v0 + 1104);
      v125 = *(_QWORD *)(v0 + 1096);
      v126 = *(_QWORD *)(v0 + 1088);
      v128 = *(_QWORD *)(v0 + 1080);
      v130 = *(_QWORD *)(v0 + 1072);
      v132 = *(_QWORD *)(v0 + 1064);
      v133 = *(_QWORD *)(v0 + 1056);
      v135 = *(_QWORD *)(v0 + 1024);
      v137 = *(_QWORD *)(v0 + 1016);
      v139 = *(_QWORD *)(v0 + 1008);
      v141 = *(_QWORD *)(v0 + 1000);
      v143 = *(_QWORD *)(v0 + 976);
      v146 = *(_QWORD *)(v0 + 952);
      v148 = *(_QWORD *)(v0 + 944);
      v150 = *(_QWORD *)(v0 + 928);
      v153 = *(_QWORD *)(v0 + 920);
      v157 = *(_QWORD *)(v0 + 896);
      sub_100004048(v54, &qword_1010EE1E0);
      sub_100004048(v46, &qword_1010EE1E8);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v54);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v105);
      swift_task_dealloc(v106);
      swift_task_dealloc(v107);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v110);
      swift_task_dealloc(v111);
      swift_task_dealloc(v112);
      swift_task_dealloc(v113);
      swift_task_dealloc(v114);
      swift_task_dealloc(v115);
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v132);
      swift_task_dealloc(v133);
      swift_task_dealloc(v135);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v143);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      swift_task_dealloc(v153);
      swift_task_dealloc(v157);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v134 = v18;
      v136 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 1840);
      v129 = *(_QWORD *)(v0 + 1824);
      v131 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
      v32 = *(_QWORD *)(v0 + 1816);
      v33 = *(int **)(v0 + 1712);
      v127 = *(_QWORD *)(v0 + 1032);
      v34 = *(_QWORD *)(v0 + 888);
      v152 = v159;
      v156 = v158[1];
      *(_QWORD *)(v0 + 2648) = v159;
      v140 = v160;
      *(_QWORD *)(v0 + 2656) = v160;
      v138 = v158[0];
      sub_10001AA44((_QWORD *)(v34 + 208), *(_QWORD *)(v34 + 232));
      v35 = sub_10001A9A8(&qword_1010EE2B0);
      v124 = v15;
      v36 = swift_allocObject(v35, 56, 7);
      *(_QWORD *)(v0 + 2664) = v36;
      *(_OWORD *)(v36 + 16) = xmmword_100E22B00;
      v122 = v17;
      v37 = v33[12];
      v38 = v32 + v33[16];
      v39 = (_QWORD *)(v32 + v33[20]);
      v40 = v33[24];
      v41 = (_QWORD *)(v32 + v33[28]);
      v131(v32, v129, v127);
      *(_BYTE *)(v32 + v37) = v144;
      *(_BYTE *)v38 = v149;
      *(_QWORD *)(v38 + 8) = v147;
      *(_QWORD *)(v38 + 16) = v13;
      *v39 = v142;
      v39[1] = v124;
      *(_QWORD *)(v32 + v40) = v16;
      *v41 = v122;
      v41[1] = v134;
      *(_BYTE *)(v36 + 32) = v149;
      *(_QWORD *)(v36 + 40) = v147;
      *(_QWORD *)(v36 + 48) = v13;
      v42 = swift_bridgeObjectRetain(v13);
      v136(v32, v127, v42);
      v43 = (_QWORD *)swift_task_alloc(dword_10110DA3C);
      *(_QWORD *)(v0 + 2672) = v43;
      *v43 = v0;
      v43[1] = sub_100B7EA28;
      return sub_10096B39C(*(_QWORD *)(v0 + 1072), v138, v156, v152, v140, v36);
    }
  }
}

uint64_t sub_100B7DFF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 888);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2640));
  return swift_task_switch(sub_100B7E048, v1, 0);
}

uint64_t sub_100B7E048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  __n128 v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, __n128);
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  void (*v149)(uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155[2];
  uint64_t v156;
  uint64_t v157;

  v149 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2080);
  v152 = *(_QWORD *)(v0 + 2608);
  v1 = *(int *)(v0 + 2780);
  v2 = *(int *)(v0 + 2768);
  v3 = *(_QWORD *)(v0 + 1824);
  v4 = *(_QWORD *)(v0 + 1816);
  v5 = *(_QWORD *)(v0 + 1032);
  v6 = *(_QWORD *)(v0 + 896);
  v7 = (uint64_t *)(v3 + *(int *)(v0 + 2784));
  v8 = (uint64_t *)(v3 + *(int *)(v0 + 2776));
  v9 = (char *)(v3 + *(int *)(v0 + 2772));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832))(v4, v3, v5);
  v142 = *(_BYTE *)(v3 + v2);
  v147 = *v9;
  v10 = *((_QWORD *)v9 + 2);
  v145 = *((_QWORD *)v9 + 1);
  v11 = *v8;
  v12 = v8[1];
  v140 = v11;
  v13 = *(_QWORD *)(v3 + v1);
  v14 = *v7;
  v15 = v7[1];
  v149(v6, v4, v5);
  sub_10038A244(2, 1, v6, (uint64_t)v155);
  if (v152)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
    swift_errorRetain(v152);
    v16 = swift_errorRetain(v152);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v21 = *(_QWORD *)(v0 + 1440);
    v22 = *(_QWORD *)(v0 + 1424);
    v23 = *(_QWORD *)(v0 + 1344);
    v24 = *(_QWORD *)(v0 + 1200);
    if (v19)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v143 = v20;
      v26 = swift_slowAlloc(32, -1);
      v155[0] = v26;
      *(_DWORD *)v25 = 136446210;
      swift_getErrorValue(v152, v0 + 624, v0 + 344);
      v27 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
      *(_QWORD *)(v0 + 640) = sub_100016940(v27, v28, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v152);
      swift_errorRelease(v152);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failure on handleCircleTrust, sending message: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(v152);
      swift_release();
      v143(v21, v22);
    }
    else
    {

      swift_errorRelease(v152);
      swift_errorRelease(v152);
      swift_errorRelease(v152);
      swift_release();
      v20(v21, v22);
    }
    sub_100004048(v24, &qword_1010EC868);
    sub_1000126B0(v23, type metadata accessor for MemberPeerTrust);
    v42 = *(_QWORD *)(v0 + 1416);
    v43 = *(_QWORD *)(v0 + 1264);
    sub_100004048(*(_QWORD *)(v0 + 952), (uint64_t *)&unk_1010EE180);
    sub_1000126B0(v43, type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v42, type metadata accessor for MemberSharingCircle);
    v44 = *(_QWORD *)(v0 + 1824);
    v45 = *(_QWORD *)(v0 + 1816);
    v46 = *(_QWORD *)(v0 + 1808);
    v47 = *(_QWORD *)(v0 + 1800);
    v48 = *(_QWORD *)(v0 + 1792);
    v49 = *(_QWORD *)(v0 + 1784);
    v50 = *(_QWORD *)(v0 + 1776);
    v51 = *(_QWORD *)(v0 + 1768);
    v53 = *(_QWORD *)(v0 + 1760);
    v54 = *(_QWORD *)(v0 + 1752);
    v55 = *(_QWORD *)(v0 + 1744);
    v56 = *(_QWORD *)(v0 + 1736);
    v57 = *(_QWORD *)(v0 + 1728);
    v58 = *(_QWORD *)(v0 + 1720);
    v52 = *(_QWORD *)(v0 + 1704);
    v59 = *(_QWORD *)(v0 + 1696);
    v60 = *(_QWORD *)(v0 + 1688);
    v61 = *(_QWORD *)(v0 + 1680);
    v62 = *(_QWORD *)(v0 + 1672);
    v63 = *(_QWORD *)(v0 + 1664);
    v64 = *(_QWORD *)(v0 + 1656);
    v65 = *(_QWORD *)(v0 + 1648);
    v66 = *(_QWORD *)(v0 + 1640);
    v67 = *(_QWORD *)(v0 + 1632);
    v68 = *(_QWORD *)(v0 + 1624);
    v69 = *(_QWORD *)(v0 + 1616);
    v70 = *(_QWORD *)(v0 + 1608);
    v71 = *(_QWORD *)(v0 + 1600);
    v72 = *(_QWORD *)(v0 + 1592);
    v73 = *(_QWORD *)(v0 + 1584);
    v74 = *(_QWORD *)(v0 + 1576);
    v75 = *(_QWORD *)(v0 + 1568);
    v76 = *(_QWORD *)(v0 + 1560);
    v77 = *(_QWORD *)(v0 + 1544);
    v78 = *(_QWORD *)(v0 + 1536);
    v79 = *(_QWORD *)(v0 + 1528);
    v80 = *(_QWORD *)(v0 + 1520);
    v81 = *(_QWORD *)(v0 + 1512);
    v82 = *(_QWORD *)(v0 + 1504);
    v83 = *(_QWORD *)(v0 + 1496);
    v84 = *(_QWORD *)(v0 + 1488);
    v85 = *(_QWORD *)(v0 + 1480);
    v86 = *(_QWORD *)(v0 + 1472);
    v87 = *(_QWORD *)(v0 + 1464);
    v88 = *(_QWORD *)(v0 + 1456);
    v89 = *(_QWORD *)(v0 + 1448);
    v90 = *(_QWORD *)(v0 + 1440);
    v91 = *(_QWORD *)(v0 + 1416);
    v92 = *(_QWORD *)(v0 + 1408);
    v93 = *(_QWORD *)(v0 + 1400);
    v94 = *(_QWORD *)(v0 + 1392);
    v95 = *(_QWORD *)(v0 + 1384);
    v96 = *(_QWORD *)(v0 + 1376);
    v97 = *(_QWORD *)(v0 + 1344);
    v98 = *(_QWORD *)(v0 + 1336);
    v99 = *(_QWORD *)(v0 + 1328);
    v100 = *(_QWORD *)(v0 + 1320);
    v101 = *(_QWORD *)(v0 + 1312);
    v102 = *(_QWORD *)(v0 + 1304);
    v103 = *(_QWORD *)(v0 + 1296);
    v104 = *(_QWORD *)(v0 + 1288);
    v105 = *(_QWORD *)(v0 + 1264);
    v106 = *(_QWORD *)(v0 + 1256);
    v107 = *(_QWORD *)(v0 + 1248);
    v108 = *(_QWORD *)(v0 + 1240);
    v109 = *(_QWORD *)(v0 + 1232);
    v110 = *(_QWORD *)(v0 + 1200);
    v111 = *(_QWORD *)(v0 + 1192);
    v112 = *(_QWORD *)(v0 + 1184);
    v113 = *(_QWORD *)(v0 + 1176);
    v114 = *(_QWORD *)(v0 + 1168);
    v115 = *(_QWORD *)(v0 + 1160);
    v116 = *(_QWORD *)(v0 + 1152);
    v117 = *(_QWORD *)(v0 + 1144);
    v118 = *(_QWORD *)(v0 + 1120);
    v119 = *(_QWORD *)(v0 + 1112);
    v121 = *(_QWORD *)(v0 + 1104);
    v123 = *(_QWORD *)(v0 + 1096);
    v124 = *(_QWORD *)(v0 + 1088);
    v126 = *(_QWORD *)(v0 + 1080);
    v128 = *(_QWORD *)(v0 + 1072);
    v130 = *(_QWORD *)(v0 + 1064);
    v131 = *(_QWORD *)(v0 + 1056);
    v133 = *(_QWORD *)(v0 + 1024);
    v135 = *(_QWORD *)(v0 + 1016);
    v137 = *(_QWORD *)(v0 + 1008);
    v139 = *(_QWORD *)(v0 + 1000);
    v141 = *(_QWORD *)(v0 + 976);
    v144 = *(_QWORD *)(v0 + 952);
    v146 = *(_QWORD *)(v0 + 944);
    v148 = *(_QWORD *)(v0 + 928);
    v151 = *(_QWORD *)(v0 + 920);
    v154 = *(_QWORD *)(v0 + 896);
    sub_100004048(v52, &qword_1010EE1E0);
    sub_100004048(v44, &qword_1010EE1E8);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v52);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    swift_task_dealloc(v135);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    swift_task_dealloc(v148);
    swift_task_dealloc(v151);
    swift_task_dealloc(v154);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v132 = v15;
    v134 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 1840);
    v127 = *(_QWORD *)(v0 + 1824);
    v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v29 = *(_QWORD *)(v0 + 1816);
    v30 = *(int **)(v0 + 1712);
    v125 = *(_QWORD *)(v0 + 1032);
    v31 = *(_QWORD *)(v0 + 888);
    v150 = v156;
    v153 = v155[1];
    *(_QWORD *)(v0 + 2648) = v156;
    v138 = v157;
    *(_QWORD *)(v0 + 2656) = v157;
    v136 = v155[0];
    sub_10001AA44((_QWORD *)(v31 + 208), *(_QWORD *)(v31 + 232));
    v32 = sub_10001A9A8(&qword_1010EE2B0);
    v122 = v12;
    v33 = swift_allocObject(v32, 56, 7);
    *(_QWORD *)(v0 + 2664) = v33;
    *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
    v120 = v14;
    v34 = v30[12];
    v35 = v29 + v30[16];
    v36 = (_QWORD *)(v29 + v30[20]);
    v37 = v30[24];
    v38 = (_QWORD *)(v29 + v30[28]);
    v129(v29, v127, v125);
    *(_BYTE *)(v29 + v34) = v142;
    *(_BYTE *)v35 = v147;
    *(_QWORD *)(v35 + 8) = v145;
    *(_QWORD *)(v35 + 16) = v10;
    *v36 = v140;
    v36[1] = v122;
    *(_QWORD *)(v29 + v37) = v13;
    *v38 = v120;
    v38[1] = v132;
    *(_BYTE *)(v33 + 32) = v147;
    *(_QWORD *)(v33 + 40) = v145;
    *(_QWORD *)(v33 + 48) = v10;
    v39 = swift_bridgeObjectRetain(v10);
    v134(v29, v125, v39);
    v40 = (_QWORD *)swift_task_alloc(dword_10110DA3C);
    *(_QWORD *)(v0 + 2672) = v40;
    *v40 = v0;
    v40[1] = sub_100B7EA28;
    return sub_10096B39C(*(_QWORD *)(v0 + 1072), v136, v153, v150, v138, v33);
  }
}

uint64_t sub_100B7EA28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2672);
  *(_QWORD *)(*v1 + 2680) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 888);
    v5 = sub_100B7F01C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 888);
    swift_bridgeObjectRelease();
    v5 = sub_100B7EA9C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B7EA9C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int *v26;
  _QWORD *v27;
  uint64_t result;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t (*v51)(_QWORD);
  uint64_t (__cdecl *v52)();
  uint64_t (*v53)(char, char);
  uint64_t v54;

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1840);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
  v3 = *(_QWORD *)(v0 + 1072);
  v4 = *(_QWORD *)(v0 + 1064);
  v5 = *(_QWORD *)(v0 + 1056);
  v6 = *(_QWORD *)(v0 + 1032);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1496), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
  v2(v4, v3, v6);
  v2(v5, v4, v6);
  v7 = v1(v4, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v45 = *(_QWORD *)(v0 + 2648);
    v46 = *(_QWORD *)(v0 + 2656);
    v44 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
    v47 = *(_QWORD *)(v0 + 1424);
    v48 = *(_QWORD *)(v0 + 1496);
    v49 = *(_QWORD *)(v0 + 1072);
    v50 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v10 = *(_QWORD *)(v0 + 1056);
    v11 = *(_QWORD *)(v0 + 1032);
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(32, -1);
    v54 = v13;
    *(_DWORD *)v12 = 141558275;
    *(_QWORD *)(v0 + 696) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 704) = sub_100016940(v15, v16, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 704, v0 + 712, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    v44(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Circle Trust Ack message identifier is %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
    sub_10001BC14(v45, v46);

    v50(v48, v47);
    v44(v49, v11);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
    v19 = *(_QWORD *)(v0 + 1496);
    v20 = *(_QWORD *)(v0 + 1424);
    v21 = *(_QWORD *)(v0 + 1072);
    v22 = *(_QWORD *)(v0 + 1056);
    v23 = *(_QWORD *)(v0 + 1032);
    sub_10001BC14(*(_QWORD *)(v0 + 2648), *(_QWORD *)(v0 + 2656));

    v18(v22, v23);
    v17(v19, v20);
    v18(v21, v23);
  }
  v24 = *(unsigned __int8 *)(v0 + 2882);
  v25 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 1824) + *(int *)(v0 + 2768));
  *(_BYTE *)(v0 + 2885) = v25;
  if (v24 == 1)
  {
    v26 = *(int **)(v0 + 872);
    if (v26)
    {
      v51 = (uint64_t (*)(_QWORD))((char *)v26 + *v26);
      v27 = (_QWORD *)swift_task_alloc(v26[1]);
      *(_QWORD *)(v0 + 2688) = v27;
      *v27 = v0;
      v27[1] = sub_100B7F7FC;
      return v51(*(_QWORD *)(v0 + 1704));
    }
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1968);
    v33 = *(_QWORD *)(v0 + 1272);
    v34 = *(_QWORD *)(v0 + 1176);
    sub_10000F9B8(*(_QWORD *)(v0 + 1200), v34, &qword_1010EC868);
    if (v32(v34, 1, v33) == 1)
    {
      v35 = sub_100004048(*(_QWORD *)(v0 + 1176), &qword_1010EC868);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failure on handleCircleTrust, accepting of already accepted share: no  owner peer trust record!", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

LABEL_17:
      v39 = *(unsigned __int8 *)(v0 + 2885);
      v53 = (uint64_t (*)(char, char))((char *)&dword_101113558 + dword_101113558);
      v40 = (_QWORD *)swift_task_alloc(unk_10111355C);
      *(_QWORD *)(v0 + 2760) = v40;
      *v40 = v0;
      v40[1] = sub_100B806E0;
      return v53(*(_BYTE *)(v0 + 2882), v39 == 4);
    }
    v41 = *(_QWORD *)(v0 + 888);
    sub_1000126EC(*(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1304), type metadata accessor for MemberPeerTrust);
    v42 = sub_10001AA44((_QWORD *)(v41 + 344), *(_QWORD *)(v41 + 368));
    v43 = *v42;
    *(_QWORD *)(v0 + 2696) = *v42;
    return swift_task_switch(sub_100B7F9CC, v43, 0);
  }
  else
  {
    if (v25 == 4)
    {
      sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 888) + 344), *(_QWORD *)(*(_QWORD *)(v0 + 888) + 368));
      v29 = (_QWORD *)swift_task_alloc(dword_1010EC74C);
      *(_QWORD *)(v0 + 2720) = v29;
      *v29 = v0;
      v29[1] = sub_100B7FC14;
      return sub_10005CD54(*(_QWORD *)(v0 + 1824));
    }
    v30 = *(unsigned __int8 *)(v0 + 2883);
    if (v30 != 5 && v30 == *(unsigned __int8 *)(v0 + 2884))
      goto LABEL_17;
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 256, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 280))
    {
      sub_10000F9FC((__int128 *)(v0 + 256), v0 + 216);
      sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
      v52 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBB8 + dword_1010EBBB8);
      v31 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
      *(_QWORD *)(v0 + 2736) = v31;
      *v31 = v0;
      v31[1] = sub_100B7FF28;
      return v52();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100B7F01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  sub_10001BC14(*(_QWORD *)(v0 + 2648), *(_QWORD *)(v0 + 2656));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 2680);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v106 = *(_QWORD *)(v0 + 1424);
    v108 = *(_QWORD *)(v0 + 1440);
    v112 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v114 = *(_QWORD *)(v0 + 1344);
    v110 = *(_QWORD *)(v0 + 1200);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v116 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_getErrorValue(v1, v0 + 624, v0 + 344);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
    *(_QWORD *)(v0 + 640) = sub_100016940(v7, v8, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on handleCircleTrust, sending message: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
    swift_release();
    v112(v108, v106);
    sub_100004048(v110, &qword_1010EC868);
    v9 = v114;
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v11 = *(_QWORD *)(v0 + 1440);
    v12 = *(_QWORD *)(v0 + 1424);
    v13 = *(_QWORD *)(v0 + 1344);
    v14 = *(_QWORD *)(v0 + 1200);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_release();
    v10(v11, v12);
    sub_100004048(v14, &qword_1010EC868);
    v9 = v13;
  }
  sub_1000126B0(v9, type metadata accessor for MemberPeerTrust);
  v15 = *(_QWORD *)(v0 + 1416);
  v16 = *(_QWORD *)(v0 + 1264);
  sub_100004048(*(_QWORD *)(v0 + 952), (uint64_t *)&unk_1010EE180);
  sub_1000126B0(v16, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v15, type metadata accessor for MemberSharingCircle);
  v17 = *(_QWORD *)(v0 + 1824);
  v18 = *(_QWORD *)(v0 + 1816);
  v19 = *(_QWORD *)(v0 + 1808);
  v20 = *(_QWORD *)(v0 + 1800);
  v21 = *(_QWORD *)(v0 + 1792);
  v22 = *(_QWORD *)(v0 + 1784);
  v23 = *(_QWORD *)(v0 + 1776);
  v24 = *(_QWORD *)(v0 + 1768);
  v27 = *(_QWORD *)(v0 + 1760);
  v28 = *(_QWORD *)(v0 + 1752);
  v29 = *(_QWORD *)(v0 + 1744);
  v30 = *(_QWORD *)(v0 + 1736);
  v31 = *(_QWORD *)(v0 + 1728);
  v32 = *(_QWORD *)(v0 + 1720);
  v25 = *(_QWORD *)(v0 + 1704);
  v33 = *(_QWORD *)(v0 + 1696);
  v34 = *(_QWORD *)(v0 + 1688);
  v35 = *(_QWORD *)(v0 + 1680);
  v36 = *(_QWORD *)(v0 + 1672);
  v37 = *(_QWORD *)(v0 + 1664);
  v38 = *(_QWORD *)(v0 + 1656);
  v39 = *(_QWORD *)(v0 + 1648);
  v40 = *(_QWORD *)(v0 + 1640);
  v41 = *(_QWORD *)(v0 + 1632);
  v42 = *(_QWORD *)(v0 + 1624);
  v43 = *(_QWORD *)(v0 + 1616);
  v44 = *(_QWORD *)(v0 + 1608);
  v45 = *(_QWORD *)(v0 + 1600);
  v46 = *(_QWORD *)(v0 + 1592);
  v47 = *(_QWORD *)(v0 + 1584);
  v48 = *(_QWORD *)(v0 + 1576);
  v49 = *(_QWORD *)(v0 + 1568);
  v50 = *(_QWORD *)(v0 + 1560);
  v51 = *(_QWORD *)(v0 + 1544);
  v52 = *(_QWORD *)(v0 + 1536);
  v53 = *(_QWORD *)(v0 + 1528);
  v54 = *(_QWORD *)(v0 + 1520);
  v55 = *(_QWORD *)(v0 + 1512);
  v56 = *(_QWORD *)(v0 + 1504);
  v57 = *(_QWORD *)(v0 + 1496);
  v58 = *(_QWORD *)(v0 + 1488);
  v59 = *(_QWORD *)(v0 + 1480);
  v60 = *(_QWORD *)(v0 + 1472);
  v61 = *(_QWORD *)(v0 + 1464);
  v62 = *(_QWORD *)(v0 + 1456);
  v63 = *(_QWORD *)(v0 + 1448);
  v64 = *(_QWORD *)(v0 + 1440);
  v65 = *(_QWORD *)(v0 + 1416);
  v66 = *(_QWORD *)(v0 + 1408);
  v67 = *(_QWORD *)(v0 + 1400);
  v68 = *(_QWORD *)(v0 + 1392);
  v69 = *(_QWORD *)(v0 + 1384);
  v70 = *(_QWORD *)(v0 + 1376);
  v71 = *(_QWORD *)(v0 + 1344);
  v72 = *(_QWORD *)(v0 + 1336);
  v73 = *(_QWORD *)(v0 + 1328);
  v74 = *(_QWORD *)(v0 + 1320);
  v75 = *(_QWORD *)(v0 + 1312);
  v76 = *(_QWORD *)(v0 + 1304);
  v77 = *(_QWORD *)(v0 + 1296);
  v78 = *(_QWORD *)(v0 + 1288);
  v79 = *(_QWORD *)(v0 + 1264);
  v80 = *(_QWORD *)(v0 + 1256);
  v81 = *(_QWORD *)(v0 + 1248);
  v82 = *(_QWORD *)(v0 + 1240);
  v83 = *(_QWORD *)(v0 + 1232);
  v84 = *(_QWORD *)(v0 + 1200);
  v85 = *(_QWORD *)(v0 + 1192);
  v86 = *(_QWORD *)(v0 + 1184);
  v87 = *(_QWORD *)(v0 + 1176);
  v88 = *(_QWORD *)(v0 + 1168);
  v89 = *(_QWORD *)(v0 + 1160);
  v90 = *(_QWORD *)(v0 + 1152);
  v91 = *(_QWORD *)(v0 + 1144);
  v92 = *(_QWORD *)(v0 + 1120);
  v93 = *(_QWORD *)(v0 + 1112);
  v94 = *(_QWORD *)(v0 + 1104);
  v95 = *(_QWORD *)(v0 + 1096);
  v96 = *(_QWORD *)(v0 + 1088);
  v97 = *(_QWORD *)(v0 + 1080);
  v98 = *(_QWORD *)(v0 + 1072);
  v99 = *(_QWORD *)(v0 + 1064);
  v100 = *(_QWORD *)(v0 + 1056);
  v101 = *(_QWORD *)(v0 + 1024);
  v102 = *(_QWORD *)(v0 + 1016);
  v103 = *(_QWORD *)(v0 + 1008);
  v104 = *(_QWORD *)(v0 + 1000);
  v105 = *(_QWORD *)(v0 + 976);
  v107 = *(_QWORD *)(v0 + 952);
  v109 = *(_QWORD *)(v0 + 944);
  v111 = *(_QWORD *)(v0 + 928);
  v113 = *(_QWORD *)(v0 + 920);
  v115 = *(_QWORD *)(v0 + 896);
  sub_100004048(v25, &qword_1010EE1E0);
  sub_100004048(v17, &qword_1010EE1E8);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v25);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B7F7FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 888);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2688));
  return swift_task_switch(sub_100B7F854, v1, 0);
}

uint64_t sub_100B7F854()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  int v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(char, char);

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1968);
  v2 = *(_QWORD *)(v0 + 1272);
  v3 = *(_QWORD *)(v0 + 1176);
  sub_10000F9B8(*(_QWORD *)(v0 + 1200), v3, &qword_1010EC868);
  v4 = v1(v3, 1, v2);
  v5 = *(_QWORD *)(v0 + 1176);
  if (v4 == 1)
  {
    v6 = sub_100004048(v5, &qword_1010EC868);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on handleCircleTrust, accepting of already accepted share: no  owner peer trust record!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = *(unsigned __int8 *)(v0 + 2885);
    v16 = (uint64_t (*)(char, char))((char *)&dword_101113558 + dword_101113558);
    v11 = (_QWORD *)swift_task_alloc(unk_10111355C);
    *(_QWORD *)(v0 + 2760) = v11;
    *v11 = v0;
    v11[1] = sub_100B806E0;
    return v16(*(_BYTE *)(v0 + 2882), v10 == 4);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 888);
    sub_1000126EC(v5, *(_QWORD *)(v0 + 1304), type metadata accessor for MemberPeerTrust);
    v14 = sub_10001AA44((_QWORD *)(v13 + 344), *(_QWORD *)(v13 + 368));
    v15 = *v14;
    *(_QWORD *)(v0 + 2696) = *v14;
    return swift_task_switch(sub_100B7F9CC, v15, 0);
  }
}

uint64_t sub_100B7F9CC()
{
  _QWORD *v0;
  void (*v1)(_QWORD *, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v11;

  v1 = (void (*)(_QWORD *, uint64_t, uint64_t))v0[229];
  v2 = v0[228];
  v3 = v0[163];
  v4 = v0[159];
  v5 = v0[129];
  v6 = v0[337] + 240;
  v0[14] = type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
  v0[15] = sub_100006204(&qword_1010EC888, type metadata accessor for CircleTrustAcceptEnvelopeV1, (uint64_t)&unk_100E38DE0);
  v0[16] = sub_100006204(&qword_1010EC890, type metadata accessor for CircleTrustAcceptEnvelopeV1, (uint64_t)&unk_100E38CC8);
  v7 = sub_100018F08(v0 + 11);
  v1(v7, v2, v5);
  v8 = v3 + *(int *)(v4 + 28);
  v11 = (char *)&dword_101120658 + dword_101120658;
  v9 = (_QWORD *)swift_task_alloc(unk_10112065C);
  v0[338] = v9;
  *v9 = v0;
  v9[1] = sub_100B7FAD8;
  return ((uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t))v11)(v6, v0 + 11, 3, v8);
}

uint64_t sub_100B7FAD8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2704);
  *(_QWORD *)(*(_QWORD *)v1 + 2712) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[337];
    v5 = sub_100B7FBC8;
  }
  else
  {
    v6 = v2[111];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 11);
    v5 = sub_100B7FB4C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B7FB4C()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  uint64_t (*v4)(char, char);

  sub_1000126B0(*(_QWORD *)(v0 + 1304), type metadata accessor for MemberPeerTrust);
  v1 = *(unsigned __int8 *)(v0 + 2885);
  v4 = (uint64_t (*)(char, char))((char *)&dword_101113558 + dword_101113558);
  v2 = (_QWORD *)swift_task_alloc(unk_10111355C);
  *(_QWORD *)(v0 + 2760) = v2;
  *v2 = v0;
  v2[1] = sub_100B806E0;
  return v4(*(_BYTE *)(v0 + 2882), v1 == 4);
}

uint64_t sub_100B7FBC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[339];
  v2 = v0[111];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 11);
  swift_errorRelease(v1);
  return swift_task_switch(sub_100B88580, v2, 0);
}

uint64_t sub_100B7FC14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2720);
  *(_QWORD *)(*v1 + 2728) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B7FCE4;
  else
    v4 = sub_100B7FC78;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 888), 0);
}

uint64_t sub_100B7FC78()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  uint64_t (*v4)(char, char);

  v1 = *(unsigned __int8 *)(v0 + 2885);
  v4 = (uint64_t (*)(char, char))((char *)&dword_101113558 + dword_101113558);
  v2 = (_QWORD *)swift_task_alloc(unk_10111355C);
  *(_QWORD *)(v0 + 2760) = v2;
  *v2 = v0;
  v2[1] = sub_100B806E0;
  return v4(*(_BYTE *)(v0 + 2882), v1 == 4);
}

uint64_t sub_100B7FCE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t (*v20)(char, char);
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 2728);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1488), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 2728);
    v18 = *(_QWORD *)(v0 + 1488);
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v17 = *(_QWORD *)(v0 + 1424);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_getErrorValue(v5, v0 + 664, v0 + 296);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
    *(_QWORD *)(v0 + 680) = sub_100016940(v8, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on handleCircleTrust, automatic share accepting: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
    v19(v18, v17);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 2728);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v12 = *(_QWORD *)(v0 + 1488);
    v13 = *(_QWORD *)(v0 + 1424);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

    v11(v12, v13);
  }
  v14 = *(unsigned __int8 *)(v0 + 2885);
  v20 = (uint64_t (*)(char, char))((char *)&dword_101113558 + dword_101113558);
  v15 = (_QWORD *)swift_task_alloc(unk_10111355C);
  *(_QWORD *)(v0 + 2760) = v15;
  *v15 = v0;
  v15[1] = sub_100B806E0;
  return v20(*(_BYTE *)(v0 + 2882), v14 == 4);
}

uint64_t sub_100B7FF28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2736);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 888);
  *(_QWORD *)(*(_QWORD *)v1 + 2744) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B7FF88, v3, 0);
}

uint64_t sub_100B7FF88()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v1 = (_QWORD *)(v0 + 216);
  if (*(_QWORD *)(v0 + 2744))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10110B65C);
    *(_QWORD *)(v0 + 2752) = v2;
    *v2 = v0;
    v2[1] = sub_100B80674;
    return sub_100898974(*(_QWORD *)(v0 + 1416));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v4 = sub_10001A9E8(*(_QWORD *)(v0 + 1424), (uint64_t)qword_1011B7860);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ItemSharingNotificationsService available!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 1416);
    v9 = *(_QWORD *)(v0 + 1344);
    v10 = *(_QWORD *)(v0 + 1264);
    v11 = *(_QWORD *)(v0 + 1200);
    v12 = *(_QWORD *)(v0 + 952);

    swift_release();
    sub_100004048(v11, &qword_1010EC868);
    sub_1000126B0(v9, type metadata accessor for MemberPeerTrust);
    sub_100004048(v12, (uint64_t *)&unk_1010EE180);
    sub_1000126B0(v10, type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    v13 = *(_QWORD *)(v0 + 1824);
    v14 = *(_QWORD *)(v0 + 1816);
    v15 = *(_QWORD *)(v0 + 1808);
    v16 = *(_QWORD *)(v0 + 1800);
    v17 = *(_QWORD *)(v0 + 1792);
    v18 = *(_QWORD *)(v0 + 1784);
    v19 = *(_QWORD *)(v0 + 1776);
    v20 = *(_QWORD *)(v0 + 1768);
    v22 = *(_QWORD *)(v0 + 1760);
    v23 = *(_QWORD *)(v0 + 1752);
    v24 = *(_QWORD *)(v0 + 1744);
    v25 = *(_QWORD *)(v0 + 1736);
    v26 = *(_QWORD *)(v0 + 1728);
    v27 = *(_QWORD *)(v0 + 1720);
    v21 = *(_QWORD *)(v0 + 1704);
    v28 = *(_QWORD *)(v0 + 1696);
    v29 = *(_QWORD *)(v0 + 1688);
    v30 = *(_QWORD *)(v0 + 1680);
    v31 = *(_QWORD *)(v0 + 1672);
    v32 = *(_QWORD *)(v0 + 1664);
    v33 = *(_QWORD *)(v0 + 1656);
    v34 = *(_QWORD *)(v0 + 1648);
    v35 = *(_QWORD *)(v0 + 1640);
    v36 = *(_QWORD *)(v0 + 1632);
    v37 = *(_QWORD *)(v0 + 1624);
    v38 = *(_QWORD *)(v0 + 1616);
    v39 = *(_QWORD *)(v0 + 1608);
    v40 = *(_QWORD *)(v0 + 1600);
    v41 = *(_QWORD *)(v0 + 1592);
    v42 = *(_QWORD *)(v0 + 1584);
    v43 = *(_QWORD *)(v0 + 1576);
    v44 = *(_QWORD *)(v0 + 1568);
    v45 = *(_QWORD *)(v0 + 1560);
    v46 = *(_QWORD *)(v0 + 1544);
    v47 = *(_QWORD *)(v0 + 1536);
    v48 = *(_QWORD *)(v0 + 1528);
    v49 = *(_QWORD *)(v0 + 1520);
    v50 = *(_QWORD *)(v0 + 1512);
    v51 = *(_QWORD *)(v0 + 1504);
    v52 = *(_QWORD *)(v0 + 1496);
    v53 = *(_QWORD *)(v0 + 1488);
    v54 = *(_QWORD *)(v0 + 1480);
    v55 = *(_QWORD *)(v0 + 1472);
    v56 = *(_QWORD *)(v0 + 1464);
    v57 = *(_QWORD *)(v0 + 1456);
    v58 = *(_QWORD *)(v0 + 1448);
    v59 = *(_QWORD *)(v0 + 1440);
    v60 = *(_QWORD *)(v0 + 1416);
    v61 = *(_QWORD *)(v0 + 1408);
    v62 = *(_QWORD *)(v0 + 1400);
    v63 = *(_QWORD *)(v0 + 1392);
    v64 = *(_QWORD *)(v0 + 1384);
    v65 = *(_QWORD *)(v0 + 1376);
    v66 = *(_QWORD *)(v0 + 1344);
    v67 = *(_QWORD *)(v0 + 1336);
    v68 = *(_QWORD *)(v0 + 1328);
    v69 = *(_QWORD *)(v0 + 1320);
    v70 = *(_QWORD *)(v0 + 1312);
    v71 = *(_QWORD *)(v0 + 1304);
    v72 = *(_QWORD *)(v0 + 1296);
    v73 = *(_QWORD *)(v0 + 1288);
    v74 = *(_QWORD *)(v0 + 1264);
    v75 = *(_QWORD *)(v0 + 1256);
    v76 = *(_QWORD *)(v0 + 1248);
    v77 = *(_QWORD *)(v0 + 1240);
    v78 = *(_QWORD *)(v0 + 1232);
    v79 = *(_QWORD *)(v0 + 1200);
    v80 = *(_QWORD *)(v0 + 1192);
    v81 = *(_QWORD *)(v0 + 1184);
    v82 = *(_QWORD *)(v0 + 1176);
    v83 = *(_QWORD *)(v0 + 1168);
    v84 = *(_QWORD *)(v0 + 1160);
    v85 = *(_QWORD *)(v0 + 1152);
    v86 = *(_QWORD *)(v0 + 1144);
    v87 = *(_QWORD *)(v0 + 1120);
    v88 = *(_QWORD *)(v0 + 1112);
    v89 = *(_QWORD *)(v0 + 1104);
    v90 = *(_QWORD *)(v0 + 1096);
    v91 = *(_QWORD *)(v0 + 1088);
    v92 = *(_QWORD *)(v0 + 1080);
    v93 = *(_QWORD *)(v0 + 1072);
    v94 = *(_QWORD *)(v0 + 1064);
    v95 = *(_QWORD *)(v0 + 1056);
    v96 = *(_QWORD *)(v0 + 1024);
    v97 = *(_QWORD *)(v0 + 1016);
    v98 = *(_QWORD *)(v0 + 1008);
    v99 = *(_QWORD *)(v0 + 1000);
    v100 = *(_QWORD *)(v0 + 976);
    v101 = *(_QWORD *)(v0 + 952);
    v102 = *(_QWORD *)(v0 + 944);
    v103 = *(_QWORD *)(v0 + 928);
    v104 = *(_QWORD *)(v0 + 920);
    v105 = *(_QWORD *)(v0 + 896);
    sub_100004048(v21, &qword_1010EE1E0);
    sub_100004048(v13, &qword_1010EE1E8);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v21);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B80674()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 2752));
  v3 = *(_QWORD *)(v2 + 888);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_100B81CAC;
  }
  else
  {
    v4 = sub_100B8857C;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100B806E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 888);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2760));
  return swift_task_switch(sub_100B80738, v1, 0);
}

uint64_t sub_100B80738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v1 = *(_QWORD *)(v0 + 1416);
  v2 = *(_QWORD *)(v0 + 1344);
  v3 = *(_QWORD *)(v0 + 1264);
  v4 = *(_QWORD *)(v0 + 1200);
  v5 = *(_QWORD *)(v0 + 952);
  swift_release();
  sub_100004048(v4, &qword_1010EC868);
  sub_1000126B0(v2, type metadata accessor for MemberPeerTrust);
  sub_100004048(v5, (uint64_t *)&unk_1010EE180);
  sub_1000126B0(v3, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  v6 = *(_QWORD *)(v0 + 1824);
  v7 = *(_QWORD *)(v0 + 1816);
  v8 = *(_QWORD *)(v0 + 1808);
  v9 = *(_QWORD *)(v0 + 1800);
  v10 = *(_QWORD *)(v0 + 1792);
  v11 = *(_QWORD *)(v0 + 1784);
  v12 = *(_QWORD *)(v0 + 1776);
  v13 = *(_QWORD *)(v0 + 1768);
  v16 = *(_QWORD *)(v0 + 1760);
  v17 = *(_QWORD *)(v0 + 1752);
  v18 = *(_QWORD *)(v0 + 1744);
  v19 = *(_QWORD *)(v0 + 1736);
  v20 = *(_QWORD *)(v0 + 1728);
  v21 = *(_QWORD *)(v0 + 1720);
  v14 = *(_QWORD *)(v0 + 1704);
  v22 = *(_QWORD *)(v0 + 1696);
  v23 = *(_QWORD *)(v0 + 1688);
  v24 = *(_QWORD *)(v0 + 1680);
  v25 = *(_QWORD *)(v0 + 1672);
  v26 = *(_QWORD *)(v0 + 1664);
  v27 = *(_QWORD *)(v0 + 1656);
  v28 = *(_QWORD *)(v0 + 1648);
  v29 = *(_QWORD *)(v0 + 1640);
  v30 = *(_QWORD *)(v0 + 1632);
  v31 = *(_QWORD *)(v0 + 1624);
  v32 = *(_QWORD *)(v0 + 1616);
  v33 = *(_QWORD *)(v0 + 1608);
  v34 = *(_QWORD *)(v0 + 1600);
  v35 = *(_QWORD *)(v0 + 1592);
  v36 = *(_QWORD *)(v0 + 1584);
  v37 = *(_QWORD *)(v0 + 1576);
  v38 = *(_QWORD *)(v0 + 1568);
  v39 = *(_QWORD *)(v0 + 1560);
  v40 = *(_QWORD *)(v0 + 1544);
  v41 = *(_QWORD *)(v0 + 1536);
  v42 = *(_QWORD *)(v0 + 1528);
  v43 = *(_QWORD *)(v0 + 1520);
  v44 = *(_QWORD *)(v0 + 1512);
  v45 = *(_QWORD *)(v0 + 1504);
  v46 = *(_QWORD *)(v0 + 1496);
  v47 = *(_QWORD *)(v0 + 1488);
  v48 = *(_QWORD *)(v0 + 1480);
  v49 = *(_QWORD *)(v0 + 1472);
  v50 = *(_QWORD *)(v0 + 1464);
  v51 = *(_QWORD *)(v0 + 1456);
  v52 = *(_QWORD *)(v0 + 1448);
  v53 = *(_QWORD *)(v0 + 1440);
  v54 = *(_QWORD *)(v0 + 1416);
  v55 = *(_QWORD *)(v0 + 1408);
  v56 = *(_QWORD *)(v0 + 1400);
  v57 = *(_QWORD *)(v0 + 1392);
  v58 = *(_QWORD *)(v0 + 1384);
  v59 = *(_QWORD *)(v0 + 1376);
  v60 = *(_QWORD *)(v0 + 1344);
  v61 = *(_QWORD *)(v0 + 1336);
  v62 = *(_QWORD *)(v0 + 1328);
  v63 = *(_QWORD *)(v0 + 1320);
  v64 = *(_QWORD *)(v0 + 1312);
  v65 = *(_QWORD *)(v0 + 1304);
  v66 = *(_QWORD *)(v0 + 1296);
  v67 = *(_QWORD *)(v0 + 1288);
  v68 = *(_QWORD *)(v0 + 1264);
  v69 = *(_QWORD *)(v0 + 1256);
  v70 = *(_QWORD *)(v0 + 1248);
  v71 = *(_QWORD *)(v0 + 1240);
  v72 = *(_QWORD *)(v0 + 1232);
  v73 = *(_QWORD *)(v0 + 1200);
  v74 = *(_QWORD *)(v0 + 1192);
  v75 = *(_QWORD *)(v0 + 1184);
  v76 = *(_QWORD *)(v0 + 1176);
  v77 = *(_QWORD *)(v0 + 1168);
  v78 = *(_QWORD *)(v0 + 1160);
  v79 = *(_QWORD *)(v0 + 1152);
  v80 = *(_QWORD *)(v0 + 1144);
  v81 = *(_QWORD *)(v0 + 1120);
  v82 = *(_QWORD *)(v0 + 1112);
  v83 = *(_QWORD *)(v0 + 1104);
  v84 = *(_QWORD *)(v0 + 1096);
  v85 = *(_QWORD *)(v0 + 1088);
  v86 = *(_QWORD *)(v0 + 1080);
  v87 = *(_QWORD *)(v0 + 1072);
  v88 = *(_QWORD *)(v0 + 1064);
  v89 = *(_QWORD *)(v0 + 1056);
  v90 = *(_QWORD *)(v0 + 1024);
  v91 = *(_QWORD *)(v0 + 1016);
  v92 = *(_QWORD *)(v0 + 1008);
  v93 = *(_QWORD *)(v0 + 1000);
  v94 = *(_QWORD *)(v0 + 976);
  v95 = *(_QWORD *)(v0 + 952);
  v96 = *(_QWORD *)(v0 + 944);
  v97 = *(_QWORD *)(v0 + 928);
  v98 = *(_QWORD *)(v0 + 920);
  v99 = *(_QWORD *)(v0 + 896);
  sub_100004048(v14, &qword_1010EE1E0);
  sub_100004048(v6, &qword_1010EE1E8);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v14);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B80D18()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  void (*v111)(uint64_t, uint64_t);
  void (*v112)(uint64_t, uint64_t, uint64_t);
  NSObject *v113;
  uint64_t v114[2];

  v109 = *(_QWORD *)(v0 + 2040);
  v85 = *(int *)(v0 + 2808);
  v87 = *(int *)(v0 + 2812);
  v82 = *(int *)(v0 + 2804);
  v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
  v103 = *(int *)(v0 + 2780);
  v101 = *(int *)(v0 + 2768);
  v1 = *(_QWORD *)(v0 + 1736);
  v105 = *(_QWORD *)(v0 + 1728);
  v107 = *(_QWORD *)(v0 + 1720);
  v2 = *(int **)(v0 + 1712);
  v3 = *(_QWORD *)(v0 + 1704);
  v4 = *(_QWORD *)(v0 + 1576);
  v79 = *(_QWORD *)(v0 + 1568);
  v80 = *(_QWORD *)(v0 + 1560);
  v78 = (_QWORD *)(v3 + *(int *)(v0 + 2816));
  v5 = *(int **)(v0 + 1552);
  v93 = (uint64_t *)(v3 + *(int *)(v0 + 2800));
  v96 = (uint64_t *)(v3 + *(int *)(v0 + 2796));
  v98 = (uint64_t *)(v3 + *(int *)(v0 + 2792));
  v72 = v3 + *(int *)(v0 + 2788);
  v83 = *(_QWORD *)(v0 + 1824);
  v92 = (uint64_t *)(v83 + *(int *)(v0 + 2784));
  v90 = (_QWORD *)(v83 + *(int *)(v0 + 2776));
  v88 = v83 + *(int *)(v0 + 2772);
  v6 = *(_QWORD *)(v0 + 1032);
  (*(void (**)(void))(v0 + 1984))();
  v68 = v4 + v5[12];
  v7 = (_QWORD *)(v4 + v5[16]);
  v8 = (_QWORD *)(v4 + v5[20]);
  v9 = (_QWORD *)(v4 + v5[24]);
  v70 = v5[28];
  v75 = v5[32];
  v77 = v5[36];
  v10 = (_QWORD *)(v4 + v5[40]);
  v112(v4, v3, v6);
  sub_10000F9B8(v72, v68, &qword_1010ED860);
  v11 = *v98;
  v99 = v98[1];
  *v7 = v11;
  v7[1] = v99;
  v12 = *v96;
  v97 = v96[1];
  *v8 = v12;
  v8[1] = v97;
  v13 = *v93;
  v94 = v93[1];
  *v9 = v13;
  v9[1] = v94;
  *(_DWORD *)(v4 + v70) = *(_DWORD *)(v3 + v82);
  *(_DWORD *)(v4 + v75) = *(_DWORD *)(v3 + v85);
  *(_QWORD *)(v4 + v77) = *(_QWORD *)(v3 + v87);
  v14 = v78[1];
  *v10 = *v78;
  v10[1] = v14;
  sub_10000F9B8(v4, v79, &qword_1010EE1E0);
  sub_100005CF0(v4, v80, &qword_1010EE1E0);
  v15 = v2[12];
  v16 = v1 + v2[16];
  v17 = (_QWORD *)(v1 + v2[20]);
  v18 = v2[24];
  v19 = (uint64_t *)(v1 + v2[28]);
  v112(v1, v83, v6);
  *(_BYTE *)(v1 + v15) = *(_BYTE *)(v83 + v101);
  v20 = *(_QWORD *)(v88 + 8);
  v21 = *(_QWORD *)(v88 + 16);
  *(_BYTE *)v16 = *(_BYTE *)v88;
  *(_QWORD *)(v16 + 8) = v20;
  *(_QWORD *)(v16 + 16) = v21;
  v22 = v90[1];
  *v17 = *v90;
  v17[1] = v22;
  v23 = *(_QWORD *)(v83 + v103);
  *(_QWORD *)(v1 + v18) = v23;
  v24 = *v92;
  v25 = v92[1];
  *v19 = *v92;
  v19[1] = v25;
  sub_10000F9B8(v1, v105, &qword_1010EE1E8);
  sub_100005CF0(v1, v107, &qword_1010EE1E8);
  swift_errorRetain(v109);
  swift_errorRetain(v109);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRetain(v94);
  v26 = sub_10001BBBC(v24, v25);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  v113 = v27;
  if (os_log_type_enabled(v27, v28))
  {
    v91 = *(_QWORD *)(v0 + 2040);
    v111 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
    v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v84 = *(_QWORD *)(v0 + 1816);
    v86 = *(_QWORD *)(v0 + 1728);
    v89 = *(_QWORD *)(v0 + 1720);
    v29 = *(_QWORD *)(v0 + 1672);
    v30 = *(_QWORD *)(v0 + 1568);
    v81 = *(_QWORD *)(v0 + 1560);
    v100 = v28;
    v31 = *(int **)(v0 + 1552);
    v102 = *(_QWORD *)(v0 + 1432);
    v104 = *(_QWORD *)(v0 + 1424);
    v106 = *(_QWORD *)(v0 + 1464);
    v73 = *(_QWORD *)(v0 + 1040);
    v76 = *(_QWORD *)(v0 + 1120);
    v108 = *(_QWORD *)(v0 + 1032);
    v32 = swift_slowAlloc(52, -1);
    v95 = swift_slowAlloc(96, -1);
    v114[0] = v95;
    *(_DWORD *)v32 = 141559043;
    *(_QWORD *)(v0 + 760) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v32 + 4, v32 + 12);
    *(_WORD *)(v32 + 12) = 2081;
    v33 = v31[12];
    v34 = v29 + v33;
    v35 = v31[16];
    v36 = (_QWORD *)(v29 + v35);
    v37 = v31[20];
    v64 = (_QWORD *)(v29 + v37);
    v38 = v31[24];
    v65 = (_QWORD *)(v29 + v38);
    v66 = v31[28];
    v67 = v31[32];
    v69 = v31[36];
    v71 = v31[40];
    v39 = v30 + v33;
    v40 = (_QWORD *)(v30 + v35);
    v41 = (_QWORD *)(v30 + v37);
    v42 = (_QWORD *)(v30 + v38);
    v110(v29, v30, v108);
    sub_10000F9B8(v39, v34, &qword_1010ED860);
    v43 = v40[1];
    *v36 = *v40;
    v36[1] = v43;
    v44 = v41[1];
    *v64 = *v41;
    v64[1] = v44;
    v45 = v42[1];
    *v65 = *v42;
    v65[1] = v45;
    *(_DWORD *)(v29 + v66) = *(_DWORD *)(v30 + v66);
    *(_DWORD *)(v29 + v67) = *(_DWORD *)(v30 + v67);
    *(_QWORD *)(v29 + v69) = *(_QWORD *)(v30 + v69);
    *(_OWORD *)(v29 + v71) = *(_OWORD *)(v30 + v71);
    v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32);
    v74(v76, v29, v108);
    sub_100004048(v34, &qword_1010ED860);
    v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v108, v46);
    v49 = v48;
    v111(v76, v108);
    *(_QWORD *)(v0 + 768) = sub_100016940(v47, v49, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v32 + 14, v32 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v81, &qword_1010EE1E0);
    sub_100004048(v30, &qword_1010EE1E0);
    *(_WORD *)(v32 + 22) = 2160;
    *(_QWORD *)(v0 + 776) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 784, v32 + 24, v32 + 32);
    *(_WORD *)(v32 + 32) = 2081;
    v110(v84, v86, v108);
    v74(v76, v84, v108);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v108, v46);
    v52 = v51;
    v111(v76, v108);
    *(_QWORD *)(v0 + 784) = sub_100016940(v50, v52, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 784, v0 + 792, v32 + 34, v32 + 42);
    swift_bridgeObjectRelease();
    sub_100004048(v89, &qword_1010EE1E8);
    sub_100004048(v86, &qword_1010EE1E8);
    *(_WORD *)(v32 + 42) = 2082;
    swift_getErrorValue(v91, v0 + 792, v0 + 440);
    v53 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456));
    *(_QWORD *)(v0 + 808) = sub_100016940(v53, v54, v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 816, v32 + 44, v32 + 52);
    swift_bridgeObjectRelease();
    swift_errorRelease(v91);
    swift_errorRelease(v91);
    _os_log_impl((void *)&_mh_execute_header, v113, v100, "Failure on updating beacon attributes, beaconIdentifier: %{private,mask.hash}s, shareIdentifier: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v32, 0x34u);
    swift_arrayDestroy(v95, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    swift_errorRelease(v91);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v106, v104);
  }
  else
  {
    v55 = *(_QWORD *)(v0 + 2040);
    v56 = *(_QWORD *)(v0 + 1728);
    v57 = *(_QWORD *)(v0 + 1720);
    v58 = *(_QWORD *)(v0 + 1568);
    v59 = *(_QWORD *)(v0 + 1560);
    v60 = *(_QWORD *)(v0 + 1464);
    v61 = *(_QWORD *)(v0 + 1432);
    v62 = *(_QWORD *)(v0 + 1424);
    swift_errorRelease(v55);
    sub_100004048(v59, &qword_1010EE1E0);
    sub_100004048(v58, &qword_1010EE1E0);
    sub_100004048(v57, &qword_1010EE1E8);
    sub_100004048(v56, &qword_1010EE1E8);
    swift_errorRelease(v55);
    swift_errorRelease(v55);

    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  }
  *(_QWORD *)(v0 + 2064) = 0;
  return swift_task_switch(sub_100B74C10, *(_QWORD *)(v0 + 1848), 0);
}

uint64_t sub_100B81560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  sub_100004048(*(_QWORD *)(v0 + 928), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 2520);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 560) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on handleCircleTrust, updating iCloud: %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
  v10 = *(_QWORD *)(v0 + 1448);
  v11 = *(_QWORD *)(v0 + 1424);
  v12 = *(_QWORD *)(v0 + 1416);
  v13 = *(_QWORD *)(v0 + 1344);
  v14 = *(_QWORD *)(v0 + 1264);
  v15 = *(_QWORD *)(v0 + 1200);
  v16 = *(_QWORD *)(v0 + 952);
  swift_errorRelease(v1);
  v9(v10, v11);
  sub_100004048(v15, &qword_1010EC868);
  sub_1000126B0(v13, type metadata accessor for MemberPeerTrust);
  sub_100004048(v16, (uint64_t *)&unk_1010EE180);
  sub_1000126B0(v14, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);
  v17 = *(_QWORD *)(v0 + 1824);
  v18 = *(_QWORD *)(v0 + 1816);
  v19 = *(_QWORD *)(v0 + 1808);
  v20 = *(_QWORD *)(v0 + 1800);
  v21 = *(_QWORD *)(v0 + 1792);
  v22 = *(_QWORD *)(v0 + 1784);
  v23 = *(_QWORD *)(v0 + 1776);
  v24 = *(_QWORD *)(v0 + 1768);
  v27 = *(_QWORD *)(v0 + 1760);
  v28 = *(_QWORD *)(v0 + 1752);
  v29 = *(_QWORD *)(v0 + 1744);
  v30 = *(_QWORD *)(v0 + 1736);
  v31 = *(_QWORD *)(v0 + 1728);
  v32 = *(_QWORD *)(v0 + 1720);
  v25 = *(_QWORD *)(v0 + 1704);
  v33 = *(_QWORD *)(v0 + 1696);
  v34 = *(_QWORD *)(v0 + 1688);
  v35 = *(_QWORD *)(v0 + 1680);
  v36 = *(_QWORD *)(v0 + 1672);
  v37 = *(_QWORD *)(v0 + 1664);
  v38 = *(_QWORD *)(v0 + 1656);
  v39 = *(_QWORD *)(v0 + 1648);
  v40 = *(_QWORD *)(v0 + 1640);
  v41 = *(_QWORD *)(v0 + 1632);
  v42 = *(_QWORD *)(v0 + 1624);
  v43 = *(_QWORD *)(v0 + 1616);
  v44 = *(_QWORD *)(v0 + 1608);
  v45 = *(_QWORD *)(v0 + 1600);
  v46 = *(_QWORD *)(v0 + 1592);
  v47 = *(_QWORD *)(v0 + 1584);
  v48 = *(_QWORD *)(v0 + 1576);
  v49 = *(_QWORD *)(v0 + 1568);
  v50 = *(_QWORD *)(v0 + 1560);
  v51 = *(_QWORD *)(v0 + 1544);
  v52 = *(_QWORD *)(v0 + 1536);
  v53 = *(_QWORD *)(v0 + 1528);
  v54 = *(_QWORD *)(v0 + 1520);
  v55 = *(_QWORD *)(v0 + 1512);
  v56 = *(_QWORD *)(v0 + 1504);
  v57 = *(_QWORD *)(v0 + 1496);
  v58 = *(_QWORD *)(v0 + 1488);
  v59 = *(_QWORD *)(v0 + 1480);
  v60 = *(_QWORD *)(v0 + 1472);
  v61 = *(_QWORD *)(v0 + 1464);
  v62 = *(_QWORD *)(v0 + 1456);
  v63 = *(_QWORD *)(v0 + 1448);
  v64 = *(_QWORD *)(v0 + 1440);
  v65 = *(_QWORD *)(v0 + 1416);
  v66 = *(_QWORD *)(v0 + 1408);
  v67 = *(_QWORD *)(v0 + 1400);
  v68 = *(_QWORD *)(v0 + 1392);
  v69 = *(_QWORD *)(v0 + 1384);
  v70 = *(_QWORD *)(v0 + 1376);
  v71 = *(_QWORD *)(v0 + 1344);
  v72 = *(_QWORD *)(v0 + 1336);
  v73 = *(_QWORD *)(v0 + 1328);
  v74 = *(_QWORD *)(v0 + 1320);
  v75 = *(_QWORD *)(v0 + 1312);
  v76 = *(_QWORD *)(v0 + 1304);
  v77 = *(_QWORD *)(v0 + 1296);
  v78 = *(_QWORD *)(v0 + 1288);
  v79 = *(_QWORD *)(v0 + 1264);
  v80 = *(_QWORD *)(v0 + 1256);
  v81 = *(_QWORD *)(v0 + 1248);
  v82 = *(_QWORD *)(v0 + 1240);
  v83 = *(_QWORD *)(v0 + 1232);
  v84 = *(_QWORD *)(v0 + 1200);
  v85 = *(_QWORD *)(v0 + 1192);
  v86 = *(_QWORD *)(v0 + 1184);
  v87 = *(_QWORD *)(v0 + 1176);
  v88 = *(_QWORD *)(v0 + 1168);
  v89 = *(_QWORD *)(v0 + 1160);
  v90 = *(_QWORD *)(v0 + 1152);
  v91 = *(_QWORD *)(v0 + 1144);
  v92 = *(_QWORD *)(v0 + 1120);
  v93 = *(_QWORD *)(v0 + 1112);
  v94 = *(_QWORD *)(v0 + 1104);
  v95 = *(_QWORD *)(v0 + 1096);
  v96 = *(_QWORD *)(v0 + 1088);
  v97 = *(_QWORD *)(v0 + 1080);
  v98 = *(_QWORD *)(v0 + 1072);
  v99 = *(_QWORD *)(v0 + 1064);
  v100 = *(_QWORD *)(v0 + 1056);
  v101 = *(_QWORD *)(v0 + 1024);
  v102 = *(_QWORD *)(v0 + 1016);
  v103 = *(_QWORD *)(v0 + 1008);
  v104 = *(_QWORD *)(v0 + 1000);
  v105 = *(_QWORD *)(v0 + 976);
  v106 = *(_QWORD *)(v0 + 952);
  v107 = *(_QWORD *)(v0 + 944);
  v108 = *(_QWORD *)(v0 + 928);
  v109 = *(_QWORD *)(v0 + 920);
  v110 = *(_QWORD *)(v0 + 896);
  sub_100004048(v25, &qword_1010EE1E0);
  sub_100004048(v17, &qword_1010EE1E8);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v25);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B81CAC()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  uint64_t (*v4)(char, char);

  swift_release();
  v1 = *(unsigned __int8 *)(v0 + 2885);
  v4 = (uint64_t (*)(char, char))((char *)&dword_101113558 + dword_101113558);
  v2 = (_QWORD *)swift_task_alloc(unk_10111355C);
  *(_QWORD *)(v0 + 2760) = v2;
  *v2 = v0;
  v2[1] = sub_100B806E0;
  return v4(*(_BYTE *)(v0 + 2882), v1 == 4);
}

uint64_t sub_100B81D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  void (*v22)(char *, uint64_t);
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  char *v36;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  v40 = a3;
  v41 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v41);
  v43 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v42 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v44 = (char *)&v38 - v13;
  __chkstk_darwin(v12);
  v45 = (uint64_t)&v38 - v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SharedBeaconRecord(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v20(v18, a1 + *(int *)(v19 + 20), v15);
  v39 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(v18, a2, v15, v39);
  v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v18, v15);
  if ((v21 & 1) != 0)
  {
    v23 = 0;
  }
  else
  {
    v38 = (void (*)(uint64_t, uint64_t))v22;
    sub_10000F9B8(a1 + *(int *)(v19 + 80), (uint64_t)v8, (uint64_t *)&unk_1010F47B0);
    v24 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v8, 1, v24) == 1)
    {
      sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F47B0);
      v25 = v45;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v45, 1, 1, v15);
    }
    else
    {
      v25 = v45;
      sub_10000F9B8((uint64_t)&v8[*(int *)(v24 + 20)], v45, &qword_1010ED860);
      sub_1000126B0((uint64_t)v8, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    }
    v26 = (uint64_t)v44;
    v20(v44, v40, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v26, 0, 1, v15);
    v27 = v43;
    v28 = v43 + *(int *)(v41 + 48);
    sub_10000F9B8(v25, v43, &qword_1010ED860);
    sub_10000F9B8(v26, v28, &qword_1010ED860);
    v29 = v25;
    v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (v30(v27, 1, v15) == 1)
    {
      sub_100004048(v26, &qword_1010ED860);
      sub_100004048(v29, &qword_1010ED860);
      v31 = v30(v28, 1, v15);
      if (v31 == 1)
        v32 = &qword_1010ED860;
      else
        v32 = (uint64_t *)&unk_10110EE90;
      if (v31 == 1)
        v23 = -1;
      else
        v23 = 0;
    }
    else
    {
      v33 = v42;
      sub_10000F9B8(v27, v42, &qword_1010ED860);
      if (v30(v28, 1, v15) == 1)
      {
        v23 = 0;
        v32 = (uint64_t *)&unk_10110EE90;
        v34 = (uint64_t)v44;
        v35 = v38;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v18, v28, v15);
        v23 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v18, v15, v39);
        v36 = v18;
        v35 = v38;
        v38((uint64_t)v36, v15);
        v32 = &qword_1010ED860;
        v34 = (uint64_t)v44;
      }
      sub_100004048(v34, &qword_1010ED860);
      sub_100004048(v45, &qword_1010ED860);
      v35(v33, v15);
    }
    sub_100004048(v27, v32);
  }
  return v23 & 1;
}

BOOL sub_100B82150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char v18;
  int v19;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v33 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  if (*(_QWORD *)(a2 + 16))
  {
    v17 = sub_100003FB0(a1 + *(int *)(v4 + 24));
    if ((v18 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v8 + 72) * v17, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      sub_1000126EC((uint64_t)v14, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      v19 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 40));
      if (v19 == 1 || v19 == 4)
      {
        sub_10005972C((uint64_t)v16, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        sub_10005972C((uint64_t)v16, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
        if (v19 != 2)
        {
          v21 = 0;
          goto LABEL_10;
        }
      }
      v21 = v11[*(int *)(v7 + 64)] == 2;
LABEL_10:
      sub_1000126B0((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0((uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      return v21;
    }
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v22 = type metadata accessor for Logger(0);
  sub_10001A9E8(v22, (uint64_t)qword_1011B6748);
  v23 = sub_10005972C(a1, (uint64_t)v6, type metadata accessor for MemberSharingCircle);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v36 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = type metadata accessor for UUID(0);
    v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    v34 = sub_100016940(v30, v31, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v6, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "No sharedBeaconRecord for existing sharing circle %s!", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v6, type metadata accessor for MemberSharingCircle);
  }

  return 0;
}

uint64_t sub_100B824B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B82540, 0, 0);
}

uint64_t sub_100B82540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 160);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(v2 + 24);
  return swift_task_switch(sub_100B82594, v1, 0);
}

uint64_t sub_100B82594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 16) + *(int *)(v0 + 112), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AFA98, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 96) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = sub_100B82674;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 72), sub_100142964, v8, *(_QWORD *)(v0 + 64));
}

uint64_t sub_100B82674()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_100B826D0, 0, 0);
}

uint64_t sub_100B826D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for SharedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  v3 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 64));
  sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  if (v3 != 2)
    goto LABEL_5;
  v4 = *(_BYTE *)(*(_QWORD *)(v0 + 16) + *(int *)(*(_QWORD *)(v0 + 88) + 40)) == 0;
LABEL_6:
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v4);
}

void sub_100B82798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;

  v67 = a4;
  v68 = a8;
  v64 = a6;
  v65 = a7;
  v66 = (int *)sub_10001A9A8(&qword_1010EE1E8);
  __chkstk_darwin(v66);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SharedBeaconRecord(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v69;
  sub_100ADCAE8(a3);
  if (!v21)
  {
    v59 = v18;
    v60 = (_QWORD *)v17;
    v69 = a1;
    v61 = (uint64_t)v16;
    v62 = v13;
    v22 = v66;
    v23 = v67;
    v63 = v20;
    v24 = v68;
    v25 = v67[2];
    if (v25)
    {
      v26 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101109120) - 8);
      v27 = (uint64_t)v23 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
      v28 = *(_QWORD *)(v26 + 72);
      swift_bridgeObjectRetain(v23);
      v29 = v69;
      do
      {
        sub_100B82B60(v27, v29, a2, a5);
        v27 += v28;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      v24 = v68;
    }
    v30 = v61;
    sub_10000F9B8(a5, v61, (uint64_t *)&unk_1010EE180);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v59 + 48))(v30, 1, v60);
    v32 = (uint64_t)v62;
    v33 = v65;
    if (v31 == 1)
    {
      sub_100004048(v30, (uint64_t *)&unk_1010EE180);
      sub_100ADCACC(v64);
      v34 = v24;
    }
    else
    {
      v35 = v22;
      sub_1000126EC(v30, (uint64_t)v63, type metadata accessor for SharedBeaconRecord);
      v36 = v22[12];
      v37 = v35[16];
      v38 = v32 + v37;
      v39 = v35[20];
      v60 = (_QWORD *)(v32 + v39);
      v61 = v35[24];
      v40 = v35[28];
      v66 = (int *)(v32 + v40);
      v41 = v33 + v37;
      v42 = (_QWORD *)(v33 + v39);
      v43 = v33;
      v44 = (uint64_t *)(v33 + v40);
      v45 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v32, v43, v45);
      v67 = &v59;
      *(_BYTE *)(v32 + v36) = *(_BYTE *)(v43 + v36);
      *(_BYTE *)v38 = *(_BYTE *)v41;
      v46 = *(_QWORD *)(v41 + 16);
      *(_QWORD *)(v38 + 8) = *(_QWORD *)(v41 + 8);
      *(_QWORD *)(v38 + 16) = v46;
      v47 = v42[1];
      v48 = v60;
      *v60 = *v42;
      v48[1] = v47;
      v49 = *(_QWORD *)(v43 + v61);
      *(_QWORD *)(v32 + v61) = v49;
      v50 = *v44;
      v51 = v44[1];
      v52 = v66;
      *(_QWORD *)v66 = *v44;
      *((_QWORD *)v52 + 1) = v51;
      v53 = __chkstk_darwin(v46);
      *(&v59 - 2) = v64;
      *(&v59 - 1) = v32;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v49);
      sub_10001BBBC(v50, v51);
      v54 = (uint64_t)v63;
      v34 = v68;
      sub_100984DC0((uint64_t)v63);
      sub_1000126B0(v54, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v32, &qword_1010EE1E8);
    }
    v55 = *(_QWORD *)(v34 + 16);
    if (v55)
    {
      v56 = *(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8);
      v57 = v34 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
      v58 = *(_QWORD *)(v56 + 72);
      swift_bridgeObjectRetain(v34);
      do
      {
        sub_100ADCB04(v57);
        v57 += v58;
        --v55;
      }
      while (v55);
      swift_bridgeObjectRelease();
    }
  }
}

void sub_100B82B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unsigned int (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  v131 = a4;
  v7 = type metadata accessor for BeaconNamingRecord(0);
  v129 = *(_QWORD *)(v7 - 8);
  v130 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v133 = *(_QWORD *)(v10 - 8);
  v134 = v10;
  __chkstk_darwin(v10);
  v119 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  v12 = __chkstk_darwin(v132);
  v121 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v124 = (char *)&v109 - v14;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v16 = __chkstk_darwin(v15);
  v122 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v125 = (uint64_t)&v109 - v18;
  v19 = sub_10001A9A8(&qword_1010ED860);
  v20 = __chkstk_darwin(v19);
  v118 = (uint64_t)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v126 = (char *)&v109 - v23;
  v24 = __chkstk_darwin(v22);
  v123 = (char *)&v109 - v25;
  v26 = __chkstk_darwin(v24);
  v120 = (uint64_t)&v109 - v27;
  v28 = __chkstk_darwin(v26);
  v127 = (uint64_t)&v109 - v29;
  __chkstk_darwin(v28);
  v136 = (uint64_t)&v109 - v30;
  v31 = (int *)sub_10001A9A8((uint64_t *)&unk_101109120);
  v32 = __chkstk_darwin(v31);
  v128 = (uint64_t)&v109 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v35 = (char *)&v109 - v34;
  v137 = type metadata accessor for SharedBeaconRecord(0);
  v36 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (uint64_t)&v109 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AE0164(a1);
  if (!v4)
  {
    v117 = v31[20];
    v38 = *(_QWORD *)(a1 + v117);
    sub_1000D7D58(v38);
    v115 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v38;
    v138 = a2;
    v113 = v9;
    v39 = v31[24];
    v40 = *(_QWORD *)(a1 + v39);
    v41 = *(_QWORD *)(v40 + 16);
    v116 = a1;
    v114 = v39;
    if (v41)
    {
      v42 = *(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8);
      v43 = v40 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      v44 = *(_QWORD *)(v42 + 72);
      v45 = v40;
      swift_bridgeObjectRetain(v40);
      do
      {
        sub_100ADF3E4(v43);
        v43 += v44;
        --v41;
      }
      while (v41);
      swift_bridgeObjectRelease();
      v112 = v31[24];
      v46 = v116;
    }
    else
    {
      v46 = a1;
      v112 = v39;
      v45 = v40;
    }
    v47 = v31[12];
    v48 = (uint64_t)&v35[v47];
    v49 = v31[16];
    v111 = v31;
    v50 = v31[20];
    v51 = (uint64_t)&v35[v49];
    v52 = v46 + v47;
    v53 = v46 + v49;
    sub_10005972C(v46, (uint64_t)v35, type metadata accessor for MemberSharingCircle);
    v109 = v52;
    sub_10000F9B8(v52, v48, (uint64_t *)&unk_1010EE180);
    v110 = v53;
    sub_10000F9B8(v53, v51, (uint64_t *)&unk_101105880);
    *(_QWORD *)&v35[v50] = v115;
    *(_QWORD *)&v35[v112] = v45;
    v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    v55 = v137;
    if (v54(v48, 1, v137) == 1)
    {
      sub_100004048(v51, (uint64_t *)&unk_101105880);
      sub_100004048(v48, (uint64_t *)&unk_1010EE180);
      v56 = type metadata accessor for MemberSharingCircle;
      v57 = (uint64_t)v35;
LABEL_22:
      sub_1000126B0(v57, v56);
      v77 = v116;
      v78 = v111;
      goto LABEL_23;
    }
    v58 = v135;
    sub_1000126EC(v48, v135, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v51, (uint64_t *)&unk_101105880);
    sub_1000126B0((uint64_t)v35, type metadata accessor for MemberSharingCircle);
    v59 = v58 + *(int *)(v55 + 20);
    v60 = v133;
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v133 + 16);
    v115 = v54;
    v62 = v136;
    v63 = v134;
    v61(v136, v59, v134);
    v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56);
    v64(v62, 0, 1, v63);
    v65 = v125;
    sub_10000F9B8(v131, v125, (uint64_t *)&unk_1010EE180);
    if (v115(v65, 1, v55) == 1)
    {
      sub_100004048(v65, (uint64_t *)&unk_1010EE180);
      v66 = 1;
      v67 = (uint64_t)v124;
      v68 = v136;
      v69 = v127;
    }
    else
    {
      v69 = v127;
      v61(v127, v65 + *(int *)(v55 + 20), v63);
      sub_1000126B0(v65, type metadata accessor for SharedBeaconRecord);
      v66 = 0;
      v67 = (uint64_t)v124;
      v68 = v136;
    }
    v64(v69, v66, 1, v63);
    v70 = v67 + *(int *)(v132 + 48);
    sub_10000F9B8(v68, v67, &qword_1010ED860);
    sub_10000F9B8(v69, v70, &qword_1010ED860);
    v71 = v68;
    v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
    if (v72(v67, 1, v63) == 1)
    {
      sub_100004048(v69, &qword_1010ED860);
      sub_100004048(v71, &qword_1010ED860);
      if (v72(v70, 1, v63) == 1)
      {
        sub_100004048(v67, &qword_1010ED860);
        v54 = v115;
LABEL_21:
        v56 = type metadata accessor for SharedBeaconRecord;
        v57 = v135;
        goto LABEL_22;
      }
    }
    else
    {
      v73 = v120;
      sub_10000F9B8(v67, v120, &qword_1010ED860);
      if (v72(v70, 1, v63) != 1)
      {
        v74 = v119;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v119, v70, v63);
        v75 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LODWORD(v125) = dispatch thunk of static Equatable.== infix(_:_:)(v73, v74, v63, v75);
        v76 = *(void (**)(char *, uint64_t))(v60 + 8);
        v76(v74, v63);
        sub_100004048(v127, &qword_1010ED860);
        sub_100004048(v136, &qword_1010ED860);
        v76((char *)v73, v63);
        sub_100004048(v67, &qword_1010ED860);
        v54 = v115;
        if ((v125 & 1) != 0)
          goto LABEL_21;
LABEL_27:
        v97 = v135;
        sub_100ADFDFC(v135);
        sub_1000126B0(v97, type metadata accessor for SharedBeaconRecord);
        v77 = v116;
        v78 = v111;
LABEL_23:
        v79 = v128;
        v80 = v128 + v78[12];
        v81 = v128 + v78[16];
        v82 = v78[20];
        v83 = v78[24];
        sub_10005972C(v77, v128, type metadata accessor for MemberSharingCircle);
        sub_10000F9B8(v109, v80, (uint64_t *)&unk_1010EE180);
        sub_10000F9B8(v110, v81, (uint64_t *)&unk_101105880);
        *(_QWORD *)(v79 + v82) = *(_QWORD *)(v77 + v117);
        *(_QWORD *)(v79 + v83) = *(_QWORD *)(v77 + v114);
        v84 = v130;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v81, 1, v130) == 1)
        {
          sub_100004048(v81, (uint64_t *)&unk_101105880);
          sub_100004048(v80, (uint64_t *)&unk_1010EE180);
          sub_1000126B0(v79, type metadata accessor for MemberSharingCircle);
          return;
        }
        v85 = (uint64_t)v113;
        sub_1000126EC(v81, (uint64_t)v113, type metadata accessor for BeaconNamingRecord);
        sub_100004048(v80, (uint64_t *)&unk_1010EE180);
        sub_1000126B0(v79, type metadata accessor for MemberSharingCircle);
        v86 = v85 + *(int *)(v84 + 24);
        v88 = v133;
        v87 = v134;
        v89 = *(void (**)(char *, uint64_t, uint64_t))(v133 + 16);
        v90 = (uint64_t)v123;
        v89(v123, v86, v134);
        v91 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
        v91(v90, 0, 1, v87);
        v92 = v122;
        sub_10000F9B8(v131, v122, (uint64_t *)&unk_1010EE180);
        v93 = v137;
        if (v54(v92, 1, v137) == 1)
        {
          sub_100004048(v92, (uint64_t *)&unk_1010EE180);
          v94 = 1;
          v95 = (uint64_t)v121;
          v96 = (uint64_t)v126;
        }
        else
        {
          v98 = v92 + *(int *)(v93 + 20);
          v99 = (uint64_t)v126;
          v89(v126, v98, v87);
          v96 = v99;
          sub_1000126B0(v92, type metadata accessor for SharedBeaconRecord);
          v94 = 0;
          v95 = (uint64_t)v121;
        }
        v91(v96, v94, 1, v87);
        v100 = v95 + *(int *)(v132 + 48);
        sub_10000F9B8(v90, v95, &qword_1010ED860);
        sub_10000F9B8(v96, v100, &qword_1010ED860);
        v101 = v96;
        v102 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
        if (v102(v95, 1, v87) == 1)
        {
          sub_100004048(v101, &qword_1010ED860);
          sub_100004048(v90, &qword_1010ED860);
          if (v102(v100, 1, v87) == 1)
          {
            sub_100004048(v95, &qword_1010ED860);
LABEL_36:
            sub_1000126B0((uint64_t)v113, type metadata accessor for BeaconNamingRecord);
            return;
          }
        }
        else
        {
          v103 = v118;
          sub_10000F9B8(v95, v118, &qword_1010ED860);
          if (v102(v100, 1, v87) != 1)
          {
            v104 = v90;
            v105 = v119;
            (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v119, v100, v87);
            v106 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            LODWORD(v137) = dispatch thunk of static Equatable.== infix(_:_:)(v103, v105, v87, v106);
            v107 = *(void (**)(char *, uint64_t))(v88 + 8);
            v107(v105, v87);
            sub_100004048((uint64_t)v126, &qword_1010ED860);
            sub_100004048(v104, &qword_1010ED860);
            v107((char *)v103, v87);
            sub_100004048(v95, &qword_1010ED860);
            if ((v137 & 1) != 0)
              goto LABEL_36;
            goto LABEL_37;
          }
          sub_100004048((uint64_t)v126, &qword_1010ED860);
          sub_100004048(v90, &qword_1010ED860);
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v103, v87);
        }
        sub_100004048(v95, (uint64_t *)&unk_10110EE90);
LABEL_37:
        v108 = (uint64_t)v113;
        sub_100ADFAB4((uint64_t)v113);
        sub_1000126B0(v108, type metadata accessor for BeaconNamingRecord);
        return;
      }
      sub_100004048(v127, &qword_1010ED860);
      sub_100004048(v136, &qword_1010ED860);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v73, v63);
    }
    sub_100004048(v67, (uint64_t *)&unk_10110EE90);
    v54 = v115;
    goto LABEL_27;
  }
}

uint64_t sub_100B83754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a1;
  v6 = (int *)sub_10001A9A8(&qword_1010EE1E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for SharedBeaconRecord(0);
  v9 = *(int *)(v33 + 28);
  v10 = *(_BYTE *)(a2 + v9);
  v12 = *(_QWORD *)(a2 + v9 + 8);
  v11 = *(_QWORD *)(a2 + v9 + 16);
  v13 = a1 + v9;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  *(_BYTE *)v13 = v10;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(v13 + 16) = v11;
  v14 = v6[12];
  v15 = v6[16];
  v16 = &v8[v15];
  v17 = v6[20];
  v18 = &v8[v17];
  v19 = v6[24];
  v31 = v6[28];
  v20 = a3 + v15;
  v21 = (_QWORD *)(a3 + v17);
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v8, a3, v22);
  v24 = *(_BYTE *)(a3 + v14);
  v8[v14] = v24;
  v25 = *(_QWORD *)(v20 + 8);
  v26 = *(_QWORD *)(v20 + 16);
  *v16 = *(_BYTE *)v20;
  *((_QWORD *)v16 + 1) = v25;
  *((_QWORD *)v16 + 2) = v26;
  v27 = v21[1];
  *(_QWORD *)v18 = *v21;
  *((_QWORD *)v18 + 1) = v27;
  *(_QWORD *)&v8[v19] = *(_QWORD *)(a3 + v19);
  v28 = v32;
  *(_OWORD *)&v8[v31] = *(_OWORD *)(a3 + v31);
  *(_BYTE *)(v28 + *(int *)(v33 + 64)) = v24;
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v22);
}

BOOL sub_100B838B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for BeaconObservation(0) + 24)) > 0x2Au;
}

_QWORD *sub_100B838EC()
{
  _QWORD *v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 14);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 31);
  swift_unknownObjectRelease(v0[36]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 43);
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100B83958()
{
  uint64_t v0;

  sub_100B838EC();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareCreateUseCase()
{
  return objc_opt_self(_TtC12searchpartyd18ShareCreateUseCase);
}

uint64_t sub_100B83990(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 72) = a5;
  *(_BYTE *)(v5 + 136) = a3;
  *(_QWORD *)(v5 + 56) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 80) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 88) = v8;
  v9 = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  *(_QWORD *)(v5 + 96) = v9;
  *(_QWORD *)(v5 + 104) = v10;
  return swift_task_switch(sub_100B83A00, 0, 0);
}

uint64_t sub_100B83A00()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  if (*(_BYTE *)(v0 + 136))
  {
    if (*(_BYTE *)(v0 + 136) == 1)
    {
      v1 = sub_100B86430();
      v2 = swift_allocError(&type metadata for ShareCreateUseCaseError, v1, 0, 0);
      swift_willThrow(v2);
      swift_task_dealloc(*(_QWORD *)(v0 + 96));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 160);
      v7 = (_QWORD *)swift_task_alloc(dword_10111207C);
      *(_QWORD *)(v0 + 128) = v7;
      *v7 = v0;
      v7[1] = sub_100B83F94;
      return sub_100AAD09C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 104), v6);
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 160);
    v5 = (_QWORD *)swift_task_alloc(dword_101112074);
    *(_QWORD *)(v0 + 112) = v5;
    *v5 = v0;
    v5[1] = sub_100B83B10;
    return sub_100AAC5B8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 104), v4);
  }
}

uint64_t sub_100B83B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B83BD0;
  else
    v3 = sub_100B83B74;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B83B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for OwnerPeerTrust(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B83BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  os_log_type_t type;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(void **)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v6, v4);
  v8 = v3;
  swift_errorRetain(v1);
  v9 = v8;
  v10 = swift_errorRetain(v1);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 96);
  v15 = *(void **)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 88);
  if (v13)
  {
    v32 = *(_QWORD *)(v0 + 96);
    v19 = swift_slowAlloc(52, -1);
    v20 = (_QWORD *)swift_slowAlloc(16, -1);
    v33 = swift_slowAlloc(32, -1);
    v34 = v33;
    *(_DWORD *)v19 = 141559043;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2113;
    v30 = v17;
    *(_QWORD *)(v0 + 24) = v15;
    type = v12;
    v21 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v19 + 14, v19 + 22);
    *v20 = v15;

    *(_WORD *)(v19 + 22) = 2114;
    swift_errorRetain(v14);
    v22 = _swift_stdlib_bridgeErrorToNSError(v14);
    *(_QWORD *)(v0 + 32) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 24, v19 + 32);
    v20[1] = v22;
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    *(_WORD *)(v19 + 32) = 2160;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 34, v19 + 42);
    *(_WORD *)(v19 + 42) = 2081;
    v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v30, v23);
    *(_QWORD *)(v0 + 48) = sub_100016940(v24, v25, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v19 + 44, v19 + 52);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v32, v30);
    _os_log_impl((void *)&_mh_execute_header, v11, type, "Cannot add family member to utfs circle %{private,mask.hash}@. error: %{public}@, BeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v19, 0x34u);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v20, 2, v26);
    swift_slowDealloc(v20, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    swift_errorRelease(v14);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));

    swift_errorRelease(v14);
    swift_errorRelease(v14);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);

  }
  v27 = *(_QWORD *)(v0 + 56);
  v28 = type metadata accessor for OwnerPeerTrust(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B83F94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_100B88560, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 96));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100B84004(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B84090, 0, 0);
}

uint64_t sub_100B84090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 160);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(v2 + 20);
  return swift_task_switch(sub_100B840E4, v1, 0);
}

uint64_t sub_100B840E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 16) + *(int *)(v0 + 112), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AFBD8, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 96) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = sub_100B841C4;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 72), sub_100B861D0, v8, *(_QWORD *)(v0 + 64));
}

uint64_t sub_100B841C4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_100B84220, 0, 0);
}

uint64_t sub_100B84220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 88) - 8) + 48))(v1, 1) == 1;
  sub_100004048(v1, (uint64_t *)&unk_1010EE160);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v3);
}

uint64_t sub_100B842A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[8] = v7;
  v3[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B8430C, a3, 0);
}

uint64_t sub_100B8430C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 160);
  *(_QWORD *)(v0 + 80) = v1;
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(type metadata accessor for OwnerSharingCircle(0) + 20);
  return swift_task_switch(sub_100B8435C, v1, 0);
}

uint64_t sub_100B8435C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, *(_QWORD *)(v0 + 32) + *(int *)(v0 + 112), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AFBB0, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 96) = v10;
  v11 = sub_10001A9A8(&qword_1010EC8C8);
  *v10 = v0;
  v10[1] = sub_100064CA4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10007CB00, v8, v11);
}

void sub_100B84458(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = v5;
  v10 = a3[2];
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v13 = v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain(v10);
    while (1)
    {
      sub_100ADF74C(v13);
      if (v5)
        goto LABEL_33;
      v13 += v14;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v15 = *a3;
  v16 = *(_QWORD *)(*a3 + 16);
  if (v16)
  {
    v17 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
    v18 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    v19 = *(_QWORD *)(v17 + 72);
    swift_bridgeObjectRetain(v15);
    while (1)
    {
      sub_100ADECF8(v18);
      if (v5)
        goto LABEL_33;
      v18 += v19;
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v20 = a3[4];
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
    v23 = v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v24 = *(_QWORD *)(v22 + 72);
    swift_bridgeObjectRetain(v20);
    while (1)
    {
      sub_100ADCB20(v23);
      if (v5)
        goto LABEL_33;
      v23 += v24;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v25 = a3[3];
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v27 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v28 = v25 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v29 = *(_QWORD *)(v27 + 72);
    swift_bridgeObjectRetain(v25);
    while (1)
    {
      sub_100ADC7E4(v28);
      if (v5)
        goto LABEL_33;
      v28 += v29;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v30 = a3[1];
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    v32 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
    v33 = v30 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
    v34 = *(_QWORD *)(v32 + 72);
    swift_bridgeObjectRetain(v30);
    while (1)
    {
      sub_100ADC800(v33);
      if (v5)
        break;
      v33 += v34;
      if (!--v31)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_26:
  v35 = *(_QWORD *)(a4 + 16);
  if (!v35)
  {
LABEL_31:
    v39 = *(_QWORD *)(a5 + 16);
    if (!v39)
      return;
    goto LABEL_36;
  }
  v36 = *(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8);
  v37 = a4 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  v38 = *(_QWORD *)(v36 + 72);
  swift_bridgeObjectRetain(a4);
  while (1)
  {
    sub_100ADF3E4(v37);
    if (v5)
      break;
    v37 += v38;
    if (!--v35)
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRelease();
  swift_errorRelease(v5);
  v6 = 0;
  v39 = *(_QWORD *)(a5 + 16);
  if (v39)
  {
LABEL_36:
    v40 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
    v41 = a5 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    v42 = *(_QWORD *)(v40 + 72);
    swift_bridgeObjectRetain(a5);
    while (1)
    {
      sub_100ADF07C(v41);
      if (v6)
        break;
      v41 += v42;
      if (!--v39)
        goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    swift_errorRelease(v6);
  }
}

uint64_t sub_100B84764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[8] = v7;
  v3[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B847D0, a3, 0);
}

uint64_t sub_100B847D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 160);
  *(_QWORD *)(v0 + 80) = v1;
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(type metadata accessor for OwnerSharingCircle(0) + 20);
  return swift_task_switch(sub_100B84820, v1, 0);
}

uint64_t sub_100B84820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, *(_QWORD *)(v0 + 32) + *(int *)(v0 + 112), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AFB10, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 96) = v10;
  v11 = sub_10001A9A8(&qword_1010EC8C8);
  *v10 = v0;
  v10[1] = sub_1000663C4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10007CB00, v8, v11);
}

void sub_100B8491C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v11 = *(_QWORD *)(a3 + 16);
  if (v11)
  {
    v13 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v14 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    swift_bridgeObjectRetain(a3);
    while (1)
    {
      sub_100ADC7E4(v14);
      if (v7)
        break;
      v14 += v15;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    v16 = *(_QWORD *)(a4 + 16);
    if (v16)
    {
      v17 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
      v18 = a4 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v19 = *(_QWORD *)(v17 + 72);
      swift_bridgeObjectRetain(a4);
      while (1)
      {
        sub_100ADC800(v18);
        if (v7)
          break;
        v18 += v19;
        if (!--v16)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      v20 = *(_QWORD *)(a5 + 16);
      if (v20)
      {
        v21 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
        v22 = a5 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
        v23 = *(_QWORD *)(v21 + 72);
        swift_bridgeObjectRetain(a5);
        while (1)
        {
          sub_100ADF07C(v22);
          if (v7)
            break;
          v22 += v23;
          if (!--v20)
          {
            swift_bridgeObjectRelease();
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        v24 = *(_QWORD *)(a6 + 16);
        if (v24)
        {
          v25 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
          v26 = a6 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
          v27 = *(_QWORD *)(v25 + 72);
          swift_bridgeObjectRetain(a6);
          while (1)
          {
            sub_100ADF74C(v26);
            if (v7)
              break;
            v26 += v27;
            if (!--v24)
            {
              swift_bridgeObjectRelease();
              goto LABEL_21;
            }
          }
        }
        else
        {
LABEL_21:
          v28 = *(_QWORD *)(a7 + 16);
          if (!v28)
            return;
          v29 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
          v30 = a7 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
          v31 = *(_QWORD *)(v29 + 72);
          swift_bridgeObjectRetain(a7);
          do
          {
            sub_100ADECF8(v30);
            if (v7)
              break;
            v30 += v31;
            --v28;
          }
          while (v28);
        }
      }
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100B84B4C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for MemberSharingCircle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v10(v7 + v1[7], v9);
  v10(v7 + v1[8], v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B84C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1011164DC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100AB48D4;
  return sub_100B824B4(a1, v1);
}

uint64_t sub_100B84C78(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(v2 + 232) = a2;
  *(_QWORD *)(v2 + 160) = a1;
  v3 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 168) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 176) = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 184) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 192) = swift_task_alloc(v5);
  return swift_task_switch(sub_100B84CEC, 0, 0);
}

uint64_t sub_100B84CEC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (__cdecl *v4)();

  if (*(_BYTE *)(v0 + 232) == 2)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCE8 + dword_1010EBCE8);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
      *(_QWORD *)(v0 + 200) = v2;
      *v2 = v0;
      v2[1] = sub_100B84E0C;
      return v4();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100B84E0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B84E68, 0, 0);
}

uint64_t sub_100B84E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = dword_10110181C;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 216) = v3;
    *v3 = v0;
    v3[1] = sub_100B85100;
    return sub_10061A894();
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v6 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 168);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B6748);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v15 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    if (v13)
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(32, -1);
      v23 = v18;
      *(_DWORD *)v17 = 141558275;
      *(_QWORD *)(v0 + 120) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2081;
      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      *(_QWORD *)(v0 + 128) = sub_100016940(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Done publishing initial location for beacon %{private,mask.hash}s.", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);

    }
    v22 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B85100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100B853A4;
  }
  else
  {
    swift_release();
    v3 = sub_100B8516C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B8516C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 168);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 141558275;
    *(_QWORD *)(v0 + 120) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 128) = sub_100016940(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Done publishing initial location for beacon %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);

  }
  v18 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B853A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  os_log_type_t type;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;

  swift_release();
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v1, v4);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 176);
  if (v10)
  {
    log = v8;
    type = v9;
    v15 = swift_slowAlloc(32, -1);
    v23 = (uint64_t *)swift_slowAlloc(8, -1);
    v26 = swift_slowAlloc(32, -1);
    v27 = v26;
    *(_DWORD *)v15 = 141558531;
    *(_QWORD *)(v0 + 136) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *(_QWORD *)(v0 + 144) = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    *(_WORD *)(v15 + 22) = 2112;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v0 + 152) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v15 + 24, v15 + 32);
    *v23 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Failure on initial location publish for beacon %{private,mask.hash}s, error: %@", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v23, 1, v20);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v11);
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease(v11);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B856D0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)(v2 + 232) = a2;
  *(_QWORD *)(v2 + 160) = a1;
  v3 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 168) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 176) = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 184) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 192) = swift_task_alloc(v5);
  return swift_task_switch(sub_100B85744, 0, 0);
}

uint64_t sub_100B85744()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (__cdecl *v4)();

  if (*(_BYTE *)(v0 + 232) == 2)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCE8 + dword_1010EBCE8);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
      *(_QWORD *)(v0 + 200) = v2;
      *v2 = v0;
      v2[1] = sub_100B85864;
      return v4();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100B85864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B858C0, 0, 0);
}

uint64_t sub_100B858C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = dword_10110181C;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 216) = v3;
    *v3 = v0;
    v3[1] = sub_100B85B58;
    return sub_10061A894();
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v6 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 168);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B6748);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v15 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    if (v13)
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(32, -1);
      v23 = v18;
      *(_DWORD *)v17 = 141558275;
      *(_QWORD *)(v0 + 120) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2081;
      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      *(_QWORD *)(v0 + 128) = sub_100016940(v20, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Done publishing initial location for beacon %{private,mask.hash}s.", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);

    }
    v22 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B85B58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100B88578;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 208));
    v4 = sub_100B8855C;
  }
  return swift_task_switch(v4, 0, 0);
}

_QWORD *sub_100B85BC4(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD), void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  char v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  void (*v35)(BOOL, uint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;

  v35 = a4;
  v8 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a3(0);
  v11 = __chkstk_darwin(v38);
  v37 = (uint64_t)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v44 = (uint64_t)v34 - v14;
  result = _swiftEmptyArrayStorage;
  v47 = _swiftEmptyArrayStorage;
  v41 = *(_QWORD *)(a1 + 16);
  if (v41)
  {
    v34[1] = v4;
    v16 = 0;
    v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v42 = *(_QWORD *)(v13 + 72);
    v36 = v17;
    v39 = a3;
    v40 = a1 + v17;
    v46 = a2 + 7;
    v18 = a2;
    do
    {
      v43 = v16;
      sub_10005972C(v40 + v42 * v16, v44, a3);
      if (!v18[2])
        goto LABEL_3;
      v19 = v44 + *(int *)(v38 + 20);
      v20 = v18;
      v21 = v18[5];
      v22 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v8, v22);
      v18 = v20;
      v24 = -1 << *((_BYTE *)v20 + 32);
      v25 = v23 & ~v24;
      if (((*(_QWORD *)((char *)v46 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
      {
        v26 = ~v24;
        v27 = *(_QWORD *)(v45 + 72);
        v28 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
        while (1)
        {
          v28(v10, v18[6] + v27 * v25, v8);
          v29 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v30 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v19, v8, v29);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
          if ((v30 & 1) != 0)
            break;
          v25 = (v25 + 1) & v26;
          v18 = v20;
          if (((*(_QWORD *)((char *)v46 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
            goto LABEL_3;
        }
        a3 = v39;
        sub_1000126EC(v44, v37, v39);
        v31 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          v35(0, v31[2] + 1, 1);
          v31 = v47;
        }
        v33 = v31[2];
        v32 = v31[3];
        if (v33 >= v32 >> 1)
        {
          v35(v32 > 1, v33 + 1, 1);
          v31 = v47;
        }
        v31[2] = v33 + 1;
        sub_1000126EC(v37, (uint64_t)v31 + v36 + v33 * v42, a3);
        v18 = v20;
      }
      else
      {
LABEL_3:
        a3 = v39;
        sub_1000126B0(v44, v39);
      }
      v16 = v43 + 1;
    }
    while (v43 + 1 != v41);
    return v47;
  }
  return result;
}

void sub_100B85F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100B82798(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_100B85F24()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100B860BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100B860E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100B81D20(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100B86100(uint64_t a1)
{
  uint64_t v1;

  return sub_100B83754(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100B8610C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B86154()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, uint64_t))sub_100A814F0);
}

uint64_t sub_100B86168(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1011164EC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_100B701C4(a1, a2, v2);
}

uint64_t sub_100B861D0()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, uint64_t))sub_100A80D08);
}

uint64_t type metadata accessor for ShareCreateUseCase.ShareCreationData(uint64_t a1)
{
  uint64_t result;

  result = qword_1011165E0;
  if (!qword_1011165E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareCreateUseCase.ShareCreationData);
  return result;
}

uint64_t sub_100B86220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10111651C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_100B84764(a1, a2, v2);
}

void sub_100B86288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100B84458(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100B862A8()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, uint64_t))sub_100A828D0);
}

uint64_t sub_100B862C0()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, sub_100A82924);
}

uint64_t sub_100B862D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_BYTE *)(v2 + 16);
  v9 = (_QWORD *)swift_task_alloc(dword_10111652C);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100004C28;
  return sub_100B83990(a1, a2, v8, v6, v7);
}

uint64_t sub_100B86350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10111654C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100067F58;
  return sub_100B84004(a1, v1);
}

uint64_t sub_100B863A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

unint64_t sub_100B86430()
{
  unint64_t result;

  result = qword_101116558;
  if (!qword_101116558)
  {
    result = swift_getWitnessTable(byte_100E621E0, &type metadata for ShareCreateUseCaseError);
    atomic_store(result, &qword_101116558);
  }
  return result;
}

uint64_t sub_100B86474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_101116564);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_100B842A0(a1, a2, v2);
}

BOOL sub_100B864E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100B67FEC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100B864FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_101116574);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_100B680BC(a1, a2, v2);
}

unint64_t sub_100B86560()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011100A0;
  if (!qword_1011100A0)
  {
    v1 = objc_opt_self(SPHandle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1011100A0);
  }
  return result;
}

uint64_t sub_100B865A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) == 0)
  {
    v6 = a2[1];
    v7 = a2[2];
    a1[1] = v6;
    a1[2] = v7;
    v8 = a2[3];
    v9 = a2[4];
    a1[3] = v8;
    a1[4] = v9;
    v10 = *(int *)(a3 + 36);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (char *)a2 + v10;
    v13 = *(uint64_t *)((char *)a2 + v10);
    v14 = *(uint64_t *)((char *)a2 + v10 + 8);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    sub_10001BBBC(v13, v14);
    *v11 = v13;
    v11[1] = v14;
    v15 = type metadata accessor for OwnedBeaconRecord(0);
    v16 = *(int *)(v15 + 20);
    v17 = (char *)v11 + v16;
    v18 = &v12[v16];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = &v12[*(int *)(v15 + 24)];
    v21 = type metadata accessor for StableIdentifier(0);
    v22 = (char *)&loc_100B866BC + 4 * byte_100E6204A[swift_getEnumCaseMultiPayload(v20, v21)];
    __asm { BR              X10 }
  }
  v23 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v23;
}

uint64_t sub_100B86AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  sub_10001BC14(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  v5 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v6 = v4 + v5[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = v4 + v5[6];
  v11 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v12 = v4 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = v4 + v5[8];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  sub_10001BC14(*(_QWORD *)(v4 + v5[9]), *(_QWORD *)(v4 + v5[9] + 8));
  v15 = (uint64_t *)(v4 + v5[10]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10001BC14(*v15, v16);
  v17 = (uint64_t *)(v4 + v5[11]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  sub_10001BC14(*(_QWORD *)(v4 + v5[12]), *(_QWORD *)(v4 + v5[12] + 8));
  sub_10001BC14(*(_QWORD *)(v4 + v5[13]), *(_QWORD *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = a1 + *(int *)(a2 + 40);
  sub_10001BC14(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
  v20 = type metadata accessor for BeaconNamingRecord(0);
  v9(v19 + *(int *)(v20 + 20), v7);
  v9(v19 + *(int *)(v20 + 24), v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_100B86DB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  a1[4] = v8;
  v9 = *(int *)(a3 + 36);
  v10 = (uint64_t *)((char *)a1 + v9);
  v11 = (char *)a2 + v9;
  v12 = *(uint64_t *)((char *)a2 + v9);
  v13 = *(uint64_t *)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  sub_10001BBBC(v12, v13);
  *v10 = v12;
  v10[1] = v13;
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  v15 = *(int *)(v14 + 20);
  v16 = (char *)v10 + v15;
  v17 = &v11[v15];
  v18 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = &v11[*(int *)(v14 + 24)];
  v20 = type metadata accessor for StableIdentifier(0);
  v21 = (char *)sub_100B86EC0 + 4 * byte_100E62054[swift_getEnumCaseMultiPayload(v19, v20)];
  __asm { BR              X10 }
}

uint64_t sub_100B86EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v8 = v7[1];
  *v4 = *v7;
  v4[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_storeEnumTagMultiPayload(v4, v5, v6);
  v9 = v3[7];
  v10 = (void *)(v0 + v9);
  v11 = (const void *)(v1 + v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v1 + v9, 1, v2))
  {
    v12 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    v13 = v67;
  }
  else
  {
    v13 = v67;
    v67((char *)v10, (uint64_t)v11, v2);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v10, 0, 1, v2);
  }
  v14 = v3[8];
  v15 = v0 + v14;
  v16 = v1 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = v3[9];
  v19 = (uint64_t *)(v0 + v18);
  v20 = (uint64_t *)(v1 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_10001BBBC(*v20, v22);
  *v19 = v21;
  v19[1] = v22;
  v23 = v3[10];
  v24 = v0 + v23;
  v25 = (uint64_t *)(v1 + v23);
  v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v27 = *v25;
    sub_10001BBBC(*v25, v25[1]);
    *(_QWORD *)v24 = v27;
    *(_QWORD *)(v24 + 8) = v26;
  }
  v28 = v3[11];
  v29 = v0 + v28;
  v30 = (uint64_t *)(v1 + v28);
  v31 = v30[1];
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)v29 = *(_OWORD *)v30;
  }
  else
  {
    v32 = *v30;
    sub_10001BBBC(*v30, v30[1]);
    *(_QWORD *)v29 = v32;
    *(_QWORD *)(v29 + 8) = v31;
  }
  v33 = v3[12];
  v34 = (uint64_t *)(v0 + v33);
  v35 = (uint64_t *)(v1 + v33);
  v36 = *v35;
  v37 = v35[1];
  sub_10001BBBC(*v35, v37);
  *v34 = v36;
  v34[1] = v37;
  v38 = v3[13];
  v39 = (uint64_t *)(v0 + v38);
  v40 = (uint64_t *)(v1 + v38);
  v41 = *v40;
  v42 = v40[1];
  sub_10001BBBC(*v40, v42);
  *v39 = v41;
  v39[1] = v42;
  v43 = v3[14];
  v44 = (_QWORD *)(v0 + v43);
  v45 = (_QWORD *)(v1 + v43);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  v47 = v3[15];
  v48 = (_QWORD *)(v0 + v47);
  v49 = (_QWORD *)(v1 + v47);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  *(_QWORD *)(v0 + v3[16]) = *(_QWORD *)(v1 + v3[16]);
  *(_QWORD *)(v0 + v3[17]) = *(_QWORD *)(v1 + v3[17]);
  *(_BYTE *)(v0 + v3[18]) = *(_BYTE *)(v1 + v3[18]);
  *(_BYTE *)(v0 + v3[19]) = *(_BYTE *)(v1 + v3[19]);
  *(_BYTE *)(v0 + v3[20]) = *(_BYTE *)(v1 + v3[20]);
  v51 = *(int *)(v68 + 40);
  v52 = (uint64_t *)(v70 + v51);
  v53 = v69 + v51;
  v54 = *(_QWORD *)(v69 + v51);
  v55 = *(_QWORD *)(v69 + v51 + 8);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v50);
  sub_10001BBBC(v54, v55);
  *v52 = v54;
  v52[1] = v55;
  v56 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v13((char *)v52 + v56[5], v53 + v56[5], v2);
  v13((char *)v52 + v56[6], v53 + v56[6], v2);
  *(uint64_t *)((char *)v52 + v56[7]) = *(_QWORD *)(v53 + v56[7]);
  v57 = v56[8];
  v58 = (uint64_t *)((char *)v52 + v57);
  v59 = (_QWORD *)(v53 + v57);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = v56[9];
  v62 = (uint64_t *)((char *)v52 + v61);
  v63 = (_QWORD *)(v53 + v61);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v64);
  return v70;
}

uint64_t *sub_100B872B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int *v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  void (*v102)(char *, char *);
  uint64_t v103;
  uint64_t v104;

  v6 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a2[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = a2[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v103 = a3;
  v11 = *(int *)(a3 + 36);
  v12 = (uint64_t *)((char *)a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = *(uint64_t *)((char *)a2 + v11);
  v15 = *(uint64_t *)((char *)a2 + v11 + 8);
  sub_10001BBBC(v14, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_10001BC14(v16, v17);
  v18 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v19 = v18[5];
  v20 = (char *)v12 + v19;
  v21 = &v13[v19];
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v104 = v22;
  v102 = *(void (**)(char *, char *))(v23 + 24);
  v102(v20, v21);
  if (a1 != a2)
  {
    v24 = v18[6];
    v25 = &v13[v24];
    sub_1000126B0((uint64_t)v12 + v24, type metadata accessor for StableIdentifier);
    v26 = type metadata accessor for StableIdentifier(0);
    v27 = (char *)&loc_100B87424 + 4 * byte_100E62059[swift_getEnumCaseMultiPayload(v25, v26)];
    __asm { BR              X10 }
  }
  v28 = v18[7];
  v29 = (char *)v12 + v28;
  v30 = &v13[v28];
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v32 = v31((char *)v12 + v28, 1, v104);
  v33 = v31(v30, 1, v104);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v29, v30, v104);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v104);
LABEL_9:
      v35 = (void (*)(char *, char *, uint64_t))v102;
      goto LABEL_10;
    }
LABEL_8:
    v34 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_9;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v104);
    goto LABEL_8;
  }
  v35 = (void (*)(char *, char *, uint64_t))v102;
  ((void (*)(char *, char *, uint64_t))v102)(v29, v30, v104);
LABEL_10:
  v36 = v18[8];
  v37 = (char *)v12 + v36;
  v38 = &v13[v36];
  v39 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
  v40 = v18[9];
  v41 = (uint64_t *)((char *)v12 + v40);
  v42 = (uint64_t *)&v13[v40];
  v43 = *v42;
  v44 = v42[1];
  sub_10001BBBC(*v42, v44);
  v45 = *v41;
  v46 = v41[1];
  *v41 = v43;
  v41[1] = v44;
  sub_10001BC14(v45, v46);
  v47 = v18[10];
  v48 = (uint64_t *)((char *)v12 + v47);
  v49 = (uint64_t *)&v13[v47];
  v50 = *(_QWORD *)&v13[v47 + 8];
  if (*(unint64_t *)((char *)v12 + v47 + 8) >> 60 == 15)
  {
    if (v50 >> 60 != 15)
    {
      v51 = *v49;
      sub_10001BBBC(v51, v50);
      *v48 = v51;
      v48[1] = v50;
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (v50 >> 60 == 15)
  {
    sub_1001FD268((uint64_t)v48);
LABEL_15:
    *(_OWORD *)v48 = *(_OWORD *)v49;
    goto LABEL_17;
  }
  v52 = *v49;
  sub_10001BBBC(v52, v50);
  v53 = *v48;
  v54 = v48[1];
  *v48 = v52;
  v48[1] = v50;
  sub_10001BC14(v53, v54);
LABEL_17:
  v55 = v18[11];
  v56 = (uint64_t *)((char *)v12 + v55);
  v57 = (uint64_t *)&v13[v55];
  v58 = *(_QWORD *)&v13[v55 + 8];
  if (*(unint64_t *)((char *)v12 + v55 + 8) >> 60 != 15)
  {
    if (v58 >> 60 != 15)
    {
      v60 = *v57;
      sub_10001BBBC(v60, v58);
      v61 = *v56;
      v62 = v56[1];
      *v56 = v60;
      v56[1] = v58;
      sub_10001BC14(v61, v62);
      goto LABEL_24;
    }
    sub_1001FD268((uint64_t)v56);
    goto LABEL_22;
  }
  if (v58 >> 60 == 15)
  {
LABEL_22:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    goto LABEL_24;
  }
  v59 = *v57;
  sub_10001BBBC(v59, v58);
  *v56 = v59;
  v56[1] = v58;
LABEL_24:
  v63 = v18[12];
  v64 = (uint64_t *)((char *)v12 + v63);
  v65 = (uint64_t *)&v13[v63];
  v66 = *v65;
  v67 = v65[1];
  sub_10001BBBC(*v65, v67);
  v68 = *v64;
  v69 = v64[1];
  *v64 = v66;
  v64[1] = v67;
  sub_10001BC14(v68, v69);
  v70 = v18[13];
  v71 = (uint64_t *)((char *)v12 + v70);
  v72 = (uint64_t *)&v13[v70];
  v73 = *v72;
  v74 = v72[1];
  sub_10001BBBC(*v72, v74);
  v75 = *v71;
  v76 = v71[1];
  *v71 = v73;
  v71[1] = v74;
  sub_10001BC14(v75, v76);
  v77 = v18[14];
  v78 = (uint64_t *)((char *)v12 + v77);
  v79 = &v13[v77];
  *v78 = *(_QWORD *)v79;
  v80 = *((_QWORD *)v79 + 1);
  v78[1] = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease();
  v81 = v18[15];
  v82 = (uint64_t *)((char *)v12 + v81);
  v83 = &v13[v81];
  *v82 = *(_QWORD *)v83;
  v84 = *((_QWORD *)v83 + 1);
  v82[1] = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v12 + v18[16]) = *(_QWORD *)&v13[v18[16]];
  *(uint64_t *)((char *)v12 + v18[17]) = *(_QWORD *)&v13[v18[17]];
  *((_BYTE *)v12 + v18[18]) = v13[v18[18]];
  *((_BYTE *)v12 + v18[19]) = v13[v18[19]];
  *((_BYTE *)v12 + v18[20]) = v13[v18[20]];
  v85 = *(int *)(v103 + 40);
  v86 = (uint64_t *)((char *)a1 + v85);
  v87 = (char *)a2 + v85;
  v88 = *(uint64_t *)((char *)a2 + v85);
  v89 = *(uint64_t *)((char *)a2 + v85 + 8);
  sub_10001BBBC(v88, v89);
  v90 = *v86;
  v91 = v86[1];
  *v86 = v88;
  v86[1] = v89;
  sub_10001BC14(v90, v91);
  v92 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v35((char *)v86 + v92[5], &v87[v92[5]], v104);
  v35((char *)v86 + v92[6], &v87[v92[6]], v104);
  *(uint64_t *)((char *)v86 + v92[7]) = *(_QWORD *)&v87[v92[7]];
  v93 = v92[8];
  v94 = (uint64_t *)((char *)v86 + v93);
  v95 = &v87[v93];
  *v94 = *(_QWORD *)v95;
  v96 = *((_QWORD *)v95 + 1);
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease();
  v97 = v92[9];
  v98 = (uint64_t *)((char *)v86 + v97);
  v99 = &v87[v97];
  *v98 = *(_QWORD *)v99;
  v100 = *((_QWORD *)v99 + 1);
  v98[1] = v100;
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B879B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  int *v20;
  int *v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  void (*v37)(uint64_t, uint64_t, uint64_t);

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  v9 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v10 = v9[5];
  v11 = v7 + v10;
  v12 = v8 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  v37(v11, v12, v13);
  v15 = v9[6];
  v16 = (_BYTE *)(v7 + v15);
  v17 = (_BYTE *)(v8 + v15);
  v18 = type metadata accessor for StableIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v18);
  if (EnumCaseMultiPayload == 3)
  {
    v37((uint64_t)v16, (uint64_t)v17, v13);
    v21 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    *(_OWORD *)&v16[v21[12]] = *(_OWORD *)&v17[v21[12]];
    *(_OWORD *)&v16[v21[16]] = *(_OWORD *)&v17[v21[16]];
    *(_OWORD *)&v16[v21[20]] = *(_OWORD *)&v17[v21[20]];
    v16[v21[24]] = v17[v21[24]];
    swift_storeEnumTagMultiPayload(v16, v18, 3);
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v37((uint64_t)v16, (uint64_t)v17, v13);
    v20 = (int *)sub_10001A9A8(&qword_101106F40);
    *(_OWORD *)&v16[v20[12]] = *(_OWORD *)&v17[v20[12]];
    *(_OWORD *)&v16[v20[16]] = *(_OWORD *)&v17[v20[16]];
    *(_OWORD *)&v16[v20[20]] = *(_OWORD *)&v17[v20[20]];
    *(_WORD *)&v16[v20[24]] = *(_WORD *)&v17[v20[24]];
    *(_OWORD *)&v16[v20[28]] = *(_OWORD *)&v17[v20[28]];
    swift_storeEnumTagMultiPayload(v16, v18, 2);
  }
  else
  {
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  v22 = v9[7];
  v23 = (void *)(v7 + v22);
  v24 = (const void *)(v8 + v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v8 + v22, 1, v13))
  {
    v25 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    v26 = v37;
  }
  else
  {
    v26 = v37;
    v37((uint64_t)v23, (uint64_t)v24, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v23, 0, 1, v13);
  }
  v27 = v9[8];
  v28 = v7 + v27;
  v29 = v8 + v27;
  v30 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  *(_OWORD *)(v7 + v9[9]) = *(_OWORD *)(v8 + v9[9]);
  *(_OWORD *)(v7 + v9[10]) = *(_OWORD *)(v8 + v9[10]);
  *(_OWORD *)(v7 + v9[11]) = *(_OWORD *)(v8 + v9[11]);
  *(_OWORD *)(v7 + v9[12]) = *(_OWORD *)(v8 + v9[12]);
  *(_OWORD *)(v7 + v9[13]) = *(_OWORD *)(v8 + v9[13]);
  *(_OWORD *)(v7 + v9[14]) = *(_OWORD *)(v8 + v9[14]);
  *(_OWORD *)(v7 + v9[15]) = *(_OWORD *)(v8 + v9[15]);
  *(_QWORD *)(v7 + v9[16]) = *(_QWORD *)(v8 + v9[16]);
  *(_QWORD *)(v7 + v9[17]) = *(_QWORD *)(v8 + v9[17]);
  *(_BYTE *)(v7 + v9[18]) = *(_BYTE *)(v8 + v9[18]);
  *(_BYTE *)(v7 + v9[19]) = *(_BYTE *)(v8 + v9[19]);
  *(_BYTE *)(v7 + v9[20]) = *(_BYTE *)(v8 + v9[20]);
  v31 = *(int *)(a3 + 40);
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_OWORD *)(a1 + v31) = *(_OWORD *)(a2 + v31);
  v34 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v26(v32 + v34[5], v33 + v34[5], v13);
  v26(v32 + v34[6], v33 + v34[6], v13);
  *(_QWORD *)(v32 + v34[7]) = *(_QWORD *)(v33 + v34[7]);
  *(_OWORD *)(v32 + v34[8]) = *(_OWORD *)(v33 + v34[8]);
  *(_OWORD *)(v32 + v34[9]) = *(_OWORD *)(v33 + v34[9]);
  return a1;
}

_QWORD *sub_100B87D2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  int *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v92)(char *, char *, uint64_t);
  _QWORD *v93;
  uint64_t v94;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v94 = a3;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_QWORD *)((char *)a1 + v6);
  v10 = *(_QWORD *)((char *)a1 + v6 + 8);
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  sub_10001BC14(v9, v10);
  v11 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v12 = v11[5];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v92 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
  v92(v13, v14, v15);
  v93 = a2;
  if (a1 != a2)
  {
    v17 = v15;
    v18 = v11[6];
    v19 = &v7[v18];
    v20 = &v8[v18];
    sub_1000126B0((uint64_t)&v7[v18], type metadata accessor for StableIdentifier);
    v21 = type metadata accessor for StableIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v17);
      v25 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v19[v25[12]] = *(_OWORD *)&v20[v25[12]];
      *(_OWORD *)&v19[v25[16]] = *(_OWORD *)&v20[v25[16]];
      *(_OWORD *)&v19[v25[20]] = *(_OWORD *)&v20[v25[20]];
      v19[v25[24]] = v20[v25[24]];
      v26 = v21;
      v15 = v17;
      swift_storeEnumTagMultiPayload(v19, v26, 3);
    }
    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v17);
      v23 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v19[v23[12]] = *(_OWORD *)&v20[v23[12]];
      *(_OWORD *)&v19[v23[16]] = *(_OWORD *)&v20[v23[16]];
      *(_OWORD *)&v19[v23[20]] = *(_OWORD *)&v20[v23[20]];
      *(_WORD *)&v19[v23[24]] = *(_WORD *)&v20[v23[24]];
      *(_OWORD *)&v19[v23[28]] = *(_OWORD *)&v20[v23[28]];
      v24 = v21;
      v15 = v17;
      swift_storeEnumTagMultiPayload(v19, v24, 2);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      v15 = v17;
    }
  }
  v27 = v11[7];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v31 = v30(&v7[v27], 1, v15);
  v32 = v15;
  v33 = v31;
  v34 = v32;
  v35 = ((uint64_t (*)(char *, uint64_t))v30)(v29, 1);
  if (v33)
  {
    if (v35)
    {
      v36 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      v37 = v34;
    }
    else
    {
      v37 = v34;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v28, v29, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v28, 0, 1, v34);
    }
    goto LABEL_13;
  }
  if (v35)
  {
    v37 = v34;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v34);
    v38 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_13:
    v39 = v92;
    goto LABEL_14;
  }
  v37 = v34;
  v39 = v92;
  v92(v28, v29, v34);
LABEL_14:
  v40 = v11[8];
  v41 = &v7[v40];
  v42 = &v8[v40];
  v43 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v41, v42, v43);
  v44 = v11[9];
  v45 = *(_QWORD *)&v7[v44];
  v46 = *(_QWORD *)&v7[v44 + 8];
  *(_OWORD *)&v7[v44] = *(_OWORD *)&v8[v44];
  sub_10001BC14(v45, v46);
  v47 = v11[10];
  v48 = (uint64_t)&v7[v47];
  v49 = &v8[v47];
  v50 = *(_QWORD *)&v7[v47 + 8];
  if (v50 >> 60 == 15)
  {
LABEL_17:
    *(_OWORD *)v48 = *(_OWORD *)v49;
    goto LABEL_19;
  }
  v51 = *((_QWORD *)v49 + 1);
  if (v51 >> 60 == 15)
  {
    sub_1001FD268(v48);
    goto LABEL_17;
  }
  v52 = *(_QWORD *)v48;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_QWORD *)(v48 + 8) = v51;
  sub_10001BC14(v52, v50);
LABEL_19:
  v53 = v11[11];
  v54 = (uint64_t *)&v7[v53];
  v55 = (uint64_t *)&v8[v53];
  v56 = *(_QWORD *)&v7[v53 + 8];
  if (v56 >> 60 != 15)
  {
    v57 = v55[1];
    if (v57 >> 60 != 15)
    {
      v58 = *v54;
      *v54 = *v55;
      v54[1] = v57;
      sub_10001BC14(v58, v56);
      goto LABEL_24;
    }
    sub_1001FD268((uint64_t)v54);
  }
  *(_OWORD *)v54 = *(_OWORD *)v55;
LABEL_24:
  v59 = v11[12];
  v60 = *(_QWORD *)&v7[v59];
  v61 = *(_QWORD *)&v7[v59 + 8];
  *(_OWORD *)&v7[v59] = *(_OWORD *)&v8[v59];
  sub_10001BC14(v60, v61);
  v62 = v11[13];
  v63 = *(_QWORD *)&v7[v62];
  v64 = *(_QWORD *)&v7[v62 + 8];
  *(_OWORD *)&v7[v62] = *(_OWORD *)&v8[v62];
  sub_10001BC14(v63, v64);
  v65 = v11[14];
  v66 = &v7[v65];
  v67 = &v8[v65];
  v69 = *(_QWORD *)v67;
  v68 = *((_QWORD *)v67 + 1);
  *(_QWORD *)v66 = v69;
  *((_QWORD *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  v70 = v11[15];
  v71 = &v7[v70];
  v72 = &v8[v70];
  v74 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  *(_QWORD *)v71 = v74;
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v7[v11[16]] = *(_QWORD *)&v8[v11[16]];
  *(_QWORD *)&v7[v11[17]] = *(_QWORD *)&v8[v11[17]];
  v7[v11[18]] = v8[v11[18]];
  v7[v11[19]] = v8[v11[19]];
  v7[v11[20]] = v8[v11[20]];
  v75 = *(int *)(v94 + 40);
  v76 = (char *)a1 + v75;
  v77 = (char *)v93 + v75;
  v78 = *(_QWORD *)((char *)a1 + v75);
  v79 = *(_QWORD *)((char *)a1 + v75 + 8);
  *(_OWORD *)((char *)a1 + v75) = *(_OWORD *)((char *)v93 + v75);
  sub_10001BC14(v78, v79);
  v80 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v39(&v76[v80[5]], &v77[v80[5]], v37);
  v39(&v76[v80[6]], &v77[v80[6]], v37);
  *(_QWORD *)&v76[v80[7]] = *(_QWORD *)&v77[v80[7]];
  v81 = v80[8];
  v82 = &v76[v81];
  v83 = &v77[v81];
  v85 = *(_QWORD *)v83;
  v84 = *((_QWORD *)v83 + 1);
  *(_QWORD *)v82 = v85;
  *((_QWORD *)v82 + 1) = v84;
  swift_bridgeObjectRelease();
  v86 = v80[9];
  v87 = &v76[v86];
  v88 = &v77[v86];
  v90 = *(_QWORD *)v88;
  v89 = *((_QWORD *)v88 + 1);
  *(_QWORD *)v87 = v90;
  *((_QWORD *)v87 + 1) = v89;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B88288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B88294);
}

uint64_t sub_100B88294(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for OwnedBeaconRecord(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 36);
    }
    else
    {
      v10 = type metadata accessor for BeaconNamingRecord(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100B88334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B88340);
}

char *sub_100B88340(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for OwnedBeaconRecord(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 36);
    }
    else
    {
      v10 = type metadata accessor for BeaconNamingRecord(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_100B883DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for OwnedBeaconRecord(319);
  if (v3 <= 0x3F)
  {
    v5[5] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for BeaconNamingRecord(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ShareCreateUseCaseError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100B884B8 + 4 * byte_100E6205E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100B884D8 + 4 * byte_100E62063[v4]))();
}

_BYTE *sub_100B884B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100B884D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B884E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B884E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B884F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B884F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ShareCreateUseCaseError()
{
  return &type metadata for ShareCreateUseCaseError;
}

unint64_t sub_100B88518()
{
  unint64_t result;

  result = qword_101116630;
  if (!qword_101116630)
  {
    result = swift_getWitnessTable(aA_57, &type metadata for ShareCreateUseCaseError);
    atomic_store(result, (unint64_t *)&qword_101116630);
  }
  return result;
}

_QWORD *sub_100B88588(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  NSString v21;
  unsigned __int8 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  const char *v80;
  uint64_t i;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;

  v90 = type metadata accessor for TimeBasedKey(0);
  v2 = *(_QWORD *)(v90 - 8);
  v3 = __chkstk_darwin(v90);
  v87 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v85 - v5;
  v7 = type metadata accessor for Date(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v92 - 8);
  v11 = __chkstk_darwin(v92);
  v88 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v89 = (char *)&v85 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v85 - v15;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v17 = 0xD000000000000021;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v93 = 0;
  v18 = sub_100C1AE2C(v96);
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)v9);
  DateInterval.init(start:duration:)(v9, (double)v18 * 60.0);
  v19 = sub_100B8978C((uint64_t)v16);
  v20 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v20, "BOOLForKey:", v21);

  v91 = v10;
  v23 = v16;
  if ((v22 & 1) == 0 && a1)
  {
    if (a1 != 1)
      goto LABEL_23;
    v38 = v19[2];
    v40 = (uint64_t)v87;
    v39 = v88;
    if (v38)
    {
      v86 = v23;
      v95 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v38);
      v41 = *(unsigned __int8 *)(v2 + 80);
      v85 = v19;
      v89 = *(char **)(v2 + 72);
      v42 = v91;
      v43 = v92;
      sub_10005972C((uint64_t)v19 + ((v41 + 32) & ~v41), v40, type metadata accessor for TimeBasedKey);
      v44 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v40 + *(int *)(v90 + 20), v43);
      v45 = v40 + *(int *)(v44 + 24);
      v47 = *(_QWORD *)(v45 + 16);
      v46 = *(_QWORD *)(v45 + 24);
      sub_10001BBBC(v47, v46);
      v48 = v93;
      sub_1007E7118(v47, v46);
      if (!v48)
      {
        v50 = v49;
        sub_1007E3D28(v49, 0);
        v52 = v51;
        CCECCryptorRelease(v50);
        sub_10001BC14(v47, v46);
        __asm { BR              X9 }
      }
      a1 = v48;
      v66 = static os_log_type_t.error.getter(v49);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v67 = qword_1011B77E0;
      v68 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v69 = swift_allocObject(v68, 72, 7);
      *(_OWORD *)(v69 + 16) = xmmword_100E22B00;
      v96 = a1;
      swift_errorRetain(a1);
      v70 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v71 = String.init<A>(describing:)(&v96, v70);
      v17 = v72;
      *(_QWORD *)(v69 + 56) = &type metadata for String;
      *(_QWORD *)(v69 + 64) = sub_10001AA00();
      *(_QWORD *)(v69 + 32) = v71;
      *(_QWORD *)(v69 + 40) = v17;
      os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, v67, "Error deriving advertisementKey: %@", 35, 2, v69, v85);
      swift_bridgeObjectRelease();
      v73 = sub_1000D95A8();
      v74 = swift_allocError(&type metadata for CryptoTokenError, v73, 0, 0);
      *v75 = 0;
      swift_willThrow(v74);
      swift_errorRelease(a1);
      sub_10001BC14(v47, v46);
      v96 = 0;
      v97 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      v76._object = (void *)0x8000000100EC7AC0;
      v76._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v76);
      v94 = v74;
      goto LABEL_21;
    }
    v10 = v91;
    v37 = v92;
  }
  else
  {
    v17 = v19[2];
    if (v17)
    {
      v86 = v16;
      v95 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v17);
      v24 = *(unsigned __int8 *)(v2 + 80);
      v85 = v19;
      v25 = (uint64_t)v19 + ((v24 + 32) & ~v24);
      v88 = *(char **)(v2 + 72);
      v26 = v92;
      v27 = v89;
      sub_10005972C(v25, (uint64_t)v6, type metadata accessor for TimeBasedKey);
      v28 = v90;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, &v6[*(int *)(v90 + 20)], v26);
      v29 = &v6[*(int *)(v28 + 24)];
      v30 = *((_QWORD *)v29 + 2);
      v31 = *((_QWORD *)v29 + 3);
      sub_10001BBBC(v30, v31);
      v32 = v93;
      sub_1007E7118(v30, v31);
      if (!v32)
      {
        v34 = v33;
        sub_1007E3D28(v33, 0);
        v36 = v35;
        CCECCryptorRelease(v34);
        sub_10001BC14(v30, v31);
        __asm { BR              X9 }
      }
      a1 = v32;
      v54 = static os_log_type_t.error.getter(v33);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v55 = qword_1011B77E0;
      v56 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v57 = swift_allocObject(v56, 72, 7);
      *(_OWORD *)(v57 + 16) = xmmword_100E22B00;
      v96 = a1;
      swift_errorRetain(a1);
      v58 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v59 = String.init<A>(describing:)(&v96, v58);
      v61 = v60;
      *(_QWORD *)(v57 + 56) = &type metadata for String;
      *(_QWORD *)(v57 + 64) = sub_10001AA00();
      *(_QWORD *)(v57 + 32) = v59;
      *(_QWORD *)(v57 + 40) = v61;
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v55, "Error deriving advertisementKey: %@", 35, 2, v57, v85);
      swift_bridgeObjectRelease();
      v62 = sub_1000D95A8();
      v63 = swift_allocError(&type metadata for CryptoTokenError, v62, 0, 0);
      *v64 = 0;
      swift_willThrow(v63);
      swift_errorRelease(a1);
      sub_10001BC14(v30, v31);
      v96 = 0;
      v97 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      v65._object = (void *)0x8000000100EC7AC0;
      v65._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v65);
      v94 = v63;
LABEL_21:
      v77 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      _print_unlocked<A, B>(_:_:)(&v94, &v96, v77, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v78 = v96;
      v79 = v97;
      v84 = 256;
      v80 = "searchpartyd/KeyRepresentable.swift";
      for (i = 35; ; i = 40)
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v78, v79, v80, i, 2, v84, 0);
        __break(1u);
LABEL_23:
        if (a1 == -1)
        {
          v78 = v17 + 13;
          v84 = 72;
          v79 = 0x8000000100EEFBD0;
        }
        else
        {
          v96 = 0;
          v97 = 0xE000000000000000;
          _StringGuts.grow(_:)(21);
          v82._countAndFlagsBits = v17 - 14;
          v82._object = (void *)0x8000000100EEFBB0;
          String.append(_:)(v82);
          v95 = (_QWORD *)a1;
          type metadata accessor for BeaconingKeyType(0);
          _print_unlocked<A, B>(_:_:)(&v95, &v96, v83, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v78 = v96;
          v79 = v97;
          v84 = 85;
        }
        v80 = "searchpartyd/LocalBeaconingManager.swift";
      }
    }
    v37 = v92;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v37);
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100B89140@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100005CF0((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_1010F6390);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F6390);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_100B89294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v23 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_runningMacOSDaemon) = 0;
  sub_10000F9B8(a1, v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, (uint64_t *)&unk_1010F47C0);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconKeyManager) = a2;
  sub_10000F9B8(a1, (uint64_t)v7, (uint64_t *)&unk_1010F47C0);
  v18 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v7, 1, v18) == 1)
  {
    swift_retain();
    sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F47C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  else
  {
    v19 = &v7[*(int *)(v18 + 32)];
    v20 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v20(v13, v19, v14);
    swift_retain();
    sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
    v21(v13, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
      v20(v11, v17, v14);
      v21(v11, 0, 1, v14);
      sub_100B8A52C((uint64_t)v11);
      swift_release();
      sub_100004048(a1, (uint64_t *)&unk_1010F47C0);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return v2;
    }
  }
  swift_release();
  sub_100004048(a1, (uint64_t *)&unk_1010F47C0);
  sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010EA690);
  return v2;
}

uint64_t sub_100B8953C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t KeyPath;
  _QWORD v18[2];

  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(v1 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, (uint64_t)v5, (uint64_t *)&unk_1010F47C0);
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F47C0);
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  }
  else
  {
    v11 = &v5[*(int *)(v9 + 20)];
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v11, v12);
    sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
    v14(v8, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
    {
      (*(void (**)(_QWORD *, char *, uint64_t))(v13 + 32))(a1, v8, v12);
      return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v14)(a1, 0, 1, v12);
    }
  }
  sub_100004048((uint64_t)v8, &qword_1010ED860);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v15 = v18[1];
  KeyPath = swift_getKeyPath(&unk_100E62260);
  sub_100C1C4BC(KeyPath, v15, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *sub_100B8978C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, char *);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*v46)(char *, char *);
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  void (*v68)(char *, char *);
  void (*v69)(char *, uint64_t);
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD v84[6];

  v74 = a1;
  v2 = type metadata accessor for DateInterval(0);
  v76 = *(_QWORD *)(v2 - 8);
  v77 = v2;
  __chkstk_darwin(v2);
  v75 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v5 = __chkstk_darwin(v4);
  v79 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v80 = (char *)&v68 - v7;
  v81 = type metadata accessor for OwnedBeaconRecord(0);
  v78 = *(_QWORD *)(v81 - 8);
  v8 = __chkstk_darwin(v81);
  v73 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v82 = (uint64_t)&v68 - v10;
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (void (**)(char *, char *))((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v83 = (char *)&v68 - v19;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v20);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (char *)type metadata accessor for Date(0);
  v24 = *((_QWORD *)v23 - 1);
  v25 = __chkstk_darwin(v23);
  v72 = (char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v68 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v68 - v30;
  sub_100B89140((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v24 + 48))(v22, 1, v23) == 1)
  {
    v32 = (uint64_t *)&unk_1010EA690;
    v33 = (uint64_t)v22;
  }
  else
  {
    (*(void (**)(char *, char *, char *))(v24 + 32))(v31, v22, v23);
    sub_100B8953C(v13);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      v34 = v83;
      (*(void (**)(char *, _QWORD *, uint64_t))(v15 + 32))(v83, v13, v14);
      v35 = v79;
      sub_10000F9B8(v1 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, v79, (uint64_t *)&unk_1010F47C0);
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v34, v14);
      v36 = *(void (**)(char *, char *, char *))(v24 + 16);
      v71 = v31;
      v37 = v31;
      v38 = v35;
      v36(v29, v37, v23);
      v39 = v78;
      v40 = v81;
      v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
      v41 = v70(v38, 1, v81);
      v42 = v23;
      if (v41 == 1)
      {
        v43 = v38;
        v44 = v80;
        v45 = v42;
        sub_100B89FF8((uint64_t)v18, (uint64_t)v29, v80);
        v46 = *(void (**)(char *, char *))(v24 + 8);
        v46(v29, v45);
        v47 = *(void (**)(char *, uint64_t))(v15 + 8);
        v47(v18, v14);
        sub_100004048(v43, (uint64_t *)&unk_1010F47C0);
        if (v70((uint64_t)v44, 1, v40) == 1)
        {
          v47(v83, v14);
          v46(v71, v45);
          v32 = (uint64_t *)&unk_1010F47C0;
          v33 = (uint64_t)v44;
          goto LABEL_8;
        }
        v54 = v40;
        v69 = v47;
        v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
        v68 = v46;
        v23 = v45;
      }
      else
      {
        v68 = *(void (**)(char *, char *))(v24 + 8);
        v68(v29, v23);
        v69 = *(void (**)(char *, uint64_t))(v15 + 8);
        v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
        v69(v18, v14);
        v53 = v38;
        v44 = v80;
        sub_1000126EC(v53, (uint64_t)v80, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v44, 0, 1, v40);
        v54 = v40;
      }
      v55 = v82;
      sub_1000126EC((uint64_t)v44, v82, type metadata accessor for OwnedBeaconRecord);
      v56 = *(_QWORD **)(v1 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconKeyManager);
      v57 = v73;
      sub_10005972C(v55, v73, type metadata accessor for OwnedBeaconRecord);
      v84[3] = v54;
      v84[4] = sub_100B8A4E0();
      v58 = sub_100018F08(v84);
      sub_10005972C(v57, (uint64_t)v58, type metadata accessor for OwnedBeaconRecord);
      v59 = v72;
      v60 = sub_1004DF310(v72, v84, 0);
      sub_100C6F9A8();
      v62 = (uint64_t)v75;
      v61 = v76;
      v63 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v74, v77);
      v64 = sub_1003B7B50((uint64_t)v58, v62, v60, (uint64_t)v59, 0, v56);
      v66 = v65;
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v62, v63);
      v80 = v23;
      v68(v59, v23);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
      sub_1003B359C(v57, v64, v66, 0, 0, 0, v56);
      LOBYTE(v64) = v67;
      sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
      __asm { BR              X10 }
    }
    (*(void (**)(char *, char *))(v24 + 8))(v31, v23);
    v32 = &qword_1010ED860;
    v33 = (uint64_t)v13;
  }
LABEL_8:
  v48 = sub_100004048(v33, v32);
  v49 = static os_log_type_t.error.getter(v48);
  v50 = sub_100253E58();
  v51 = (void *)static OS_os_log.default.getter(v50);
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v51, "LocalBeaconingManager - No beacon - unable to self-beacon.", 58, 2, _swiftEmptyArrayStorage);

  return _swiftEmptyArrayStorage;
}

void sub_100B89DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRetain(v1);
  v6 = static os_log_type_t.default.getter(v5);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v7 = qword_1011B7D28;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = *(_QWORD *)(v4 - 144);
  v11 = UUID.uuidString.getter(v9);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  swift_bridgeObjectRelease();
  sub_100217264(v1, v0, 0);
  sub_1000126B0(v10, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(_QWORD, _QWORD))(v4 - 248))(*(_QWORD *)(v4 - 136), *(_QWORD *)(v4 - 240));
  v3(v2, *(_QWORD *)(v4 - 160));
  JUMPOUT(0x100B89BE4);
}

uint64_t sub_100B89FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a2;
  v35 = a1;
  v4 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v4 - 8);
  v5 = v37;
  v38 = v4;
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v14;
  v15 = type metadata accessor for StableIdentifier(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (uint64_t *)((char *)&v34 - v19);
  *v20 = 0x4944552D454B4146;
  v20[1] = 0xE900000000000044;
  swift_storeEnumTagMultiPayload((char *)&v34 - v19, v21, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v35, v11);
  sub_10005972C((uint64_t)v20, (uint64_t)v18, type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  v22 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v39, v4);
  v23 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v39 = __DataStorage.init(length:)(32) | 0x4000000000000000;
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = __DataStorage.init(length:)(85) | 0x4000000000000000;
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v25 = __DataStorage.init(length:)(57) | 0x4000000000000000;
  sub_1000126B0((uint64_t)v20, type metadata accessor for StableIdentifier);
  *(_OWORD *)a3 = xmmword_100E22FC0;
  v26 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&a3[v26[5]], v36, v11);
  sub_1000126EC((uint64_t)v18, (uint64_t)&a3[v26[6]], type metadata accessor for StableIdentifier);
  sub_100005CF0((uint64_t)v10, (uint64_t)&a3[v26[7]], &qword_1010ED860);
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&a3[v26[8]], v22, v38);
  v27 = &a3[v26[9]];
  v28 = v39;
  *(_QWORD *)v27 = 0x2000000000;
  *((_QWORD *)v27 + 1) = v28;
  *(_OWORD *)&a3[v26[10]] = xmmword_100E22B20;
  *(_OWORD *)&a3[v26[11]] = xmmword_100E22B20;
  v29 = &a3[v26[12]];
  *(_QWORD *)v29 = 0x5500000000;
  *((_QWORD *)v29 + 1) = v24;
  v30 = &a3[v26[13]];
  *(_QWORD *)v30 = 0x3900000000;
  *((_QWORD *)v30 + 1) = v25;
  v31 = &a3[v26[14]];
  *(_QWORD *)v31 = 65;
  *((_QWORD *)v31 + 1) = 0xE100000000000000;
  v32 = &a3[v26[15]];
  *(_QWORD *)v32 = 16706;
  *((_QWORD *)v32 + 1) = 0xE200000000000000;
  *(_QWORD *)&a3[v26[16]] = -1;
  *(_QWORD *)&a3[v26[17]] = -1;
  a3[v26[18]] = 3;
  a3[v26[19]] = 0;
  a3[v26[20]] = 0;
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v26 - 1) + 56))(a3, 0, 1, v26);
}

uint64_t sub_100B8A37C()
{
  uint64_t v0;

  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, (uint64_t *)&unk_1010F47C0);
  swift_release();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100B8A3C4()
{
  return type metadata accessor for LocalBeaconingManager(0);
}

uint64_t type metadata accessor for LocalBeaconingManager(uint64_t a1)
{
  uint64_t result;

  result = qword_101116678;
  if (!qword_101116678)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalBeaconingManager);
  return result;
}

void sub_100B8A408(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100B8A48C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_100E62248;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100B8A48C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101116688)
  {
    v2 = type metadata accessor for OwnedBeaconRecord(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101116688);
  }
}

unint64_t sub_100B8A4E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ECCB8;
  if (!qword_1010ECCB8)
  {
    v1 = type metadata accessor for OwnedBeaconRecord(255);
    result = swift_getWitnessTable(asc_100E57B60, v1);
    atomic_store(result, &qword_1010ECCB8);
  }
  return result;
}

uint64_t sub_100B8A52C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  NSString v9;
  uint64_t v11;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10000F9B8(a1, (uint64_t)v4, (uint64_t *)&unk_1010EA690);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v9);

  swift_unknownObjectRelease(isa);
  return sub_100004048(a1, (uint64_t *)&unk_1010EA690);
}

ValueMetadata *type metadata accessor for StandaloneBeaconStore()
{
  return &type metadata for StandaloneBeaconStore;
}

uint64_t sub_100B8A67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008ECD4C, a2, v8, (char *)&type metadata for () + 8, v9);
  v10 = v23;
  if (v23)
  {
    v11 = *(_QWORD *)(v23 + 24);
    swift_retain();
    v12 = swift_release(v10);
    v13 = __chkstk_darwin(v12);
    *(&v22 - 4) = a2;
    *(&v22 - 3) = a1;
    *(&v22 - 2) = v11;
    v14 = UUID.init()(v13);
    v15 = UUID.uuidString.getter(v14);
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    Connection.savepoint(_:block:)(v15, v17, sub_100B8C75C, &v22 - 6);
    swift_release(v11);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v19 = sub_10012C434();
    v20 = swift_allocError(&type metadata for DatabaseError, v19, 0, 0);
    *(_DWORD *)v21 = 2;
    *(_BYTE *)(v21 + 4) = 1;
    return swift_willThrow(v20);
  }
}

uint64_t sub_100B8A81C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a1;
  v4 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF358);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Table(0);
  v32 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008ECD4C, a2, v14, &type metadata for () + 1, v15);
  if (v35)
  {
    v30[1] = v2;
    v16 = *(_QWORD *)(v35 + 24);
    swift_retain();
    swift_release();
    if (qword_1010E9D78 != -1)
      swift_once(&qword_1010E9D78, sub_1006163A0);
    v17 = sub_10001A9A8(&qword_1010EF3B8);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7278);
    v19 = v34;
    == infix<A>(_:_:)(v18, v31, v34, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v10, v11, &protocol witness table for Table);
    v20 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v31 = v30;
    v21 = __chkstk_darwin(v20);
    v30[-2] = v16;
    v30[-1] = v13;
    v22 = UUID.init()(v21);
    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v19);
    Connection.savepoint(_:block:)(v23, v25, sub_10047A994, &v30[-4]);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v27 = sub_10012C434();
    v28 = swift_allocError(&type metadata for DatabaseError, v27, 0, 0);
    *(_DWORD *)v29 = 2;
    *(_BYTE *)(v29 + 4) = 1;
    return swift_willThrow(v28);
  }
}

uint64_t sub_100B8AAF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[7];

  v20[1] = a3;
  v21 = a1;
  v4 = sub_10001A9A8(&qword_1010EF358);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Table(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D78 != -1)
    swift_once(&qword_1010E9D78, sub_1006163A0);
  v12 = sub_10001A9A8(&qword_1010EF3B8);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7278);
  v14 = type metadata accessor for UUID(0);
  == infix<A>(_:_:)(v13, v21, v14, &protocol witness table for UUID, &protocol witness table for String);
  QueryType.filter(_:)(v7, v8, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v22[3] = v8;
  v22[4] = &protocol witness table for Table;
  v15 = sub_100018F08(v22);
  (*(void (**)(_QWORD *, char *, uint64_t))(v9 + 16))(v15, v11, v8);
  v16 = v22[6];
  sub_100B8B834((uint64_t)v22, a2);
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  }
  else
  {
    v18 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
    dispatch thunk of _AnySequenceBox._makeIterator()(v18);
    v19 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v19);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

_QWORD *sub_100B8ACF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD v19[5];

  v18 = a2;
  v5 = sub_10001A9A8(&qword_1010EF358);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Table(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D90 != -1)
    swift_once(&qword_1010E9D90, sub_10061655C);
  v13 = sub_10001A9A8(&qword_1010F2E50);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B72C0);
  v19[0] = a1;
  v19[1] = v18;
  == infix<A>(_:_:)(v14, v19, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  QueryType.filter(_:)(v8, v9, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19[3] = v9;
  v19[4] = &protocol witness table for Table;
  v15 = sub_100018F08(v19);
  (*(void (**)(_QWORD *, char *, uint64_t))(v10 + 16))(v15, v12, v9);
  v16 = sub_100B8B834((uint64_t)v19, a3);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  return v16;
}

_QWORD *sub_100B8AEB4(uint64_t a1, uint64_t a2)
{
  return sub_100B8AF0C(a1, a2, &qword_1010E9D80, (uint64_t)qword_1011B7290, (uint64_t)sub_100616434);
}

_QWORD *sub_100B8AEE0(uint64_t a1, uint64_t a2)
{
  return sub_100B8AF0C(a1, a2, &qword_1010E9D88, (uint64_t)qword_1011B72A8, (uint64_t)sub_1006164C8);
}

_QWORD *sub_100B8AF0C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v26 = a5;
  v28 = a1;
  v8 = sub_10001A9A8(&qword_1010EF358);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Table(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  v27 = a2 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon;
  if (*a3 != -1)
    swift_once(a3, v26);
  v16 = sub_10001A9A8(&qword_1010EF408);
  v17 = sub_10001A9E8(v16, a4);
  v18 = MACAddress.data.getter(v17);
  v20 = v19;
  v30[0] = v18;
  v30[1] = v19;
  v21 = sub_100B8C714();
  == infix<A>(_:_:)(v17, v30, &type metadata for Data, &protocol witness table for Data, v21);
  sub_10001BC14(v18, v20);
  QueryType.filter(_:)(v11, v12, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v30[3] = v12;
  v30[4] = &protocol witness table for Table;
  v22 = sub_100018F08(v30);
  (*(void (**)(_QWORD *, char *, uint64_t))(v13 + 16))(v22, v15, v12);
  v23 = sub_100B8B834((uint64_t)v30, v29);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return v23;
}

uint64_t sub_100B8B0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;

  v75 = a3;
  v68 = a1;
  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v65 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF4D0);
  v66 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v63 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for Setter(0);
  v8 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Insert(0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v70 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D78 != -1)
    swift_once(&qword_1010E9D78, sub_1006163A0);
  v12 = sub_10001A9A8(&qword_1010EF3B8);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7278);
  v14 = type metadata accessor for UUID(0);
  v69 = v10;
  <- infix<A>(_:_:)(v13, a2, v14, &protocol witness table for UUID);
  v15 = sub_10001A9A8(&qword_1010EF388);
  v16 = *(_QWORD *)(v8 + 72);
  v71 = v8;
  v17 = swift_allocObject(v15, ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + 9 * v16, *(unsigned __int8 *)(v8 + 80) | 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E3BD80;
  v67 = v17;
  if (qword_1010E9D80 != -1)
    swift_once(&qword_1010E9D80, sub_100616434);
  v18 = sub_10001A9A8(&qword_1010EF408);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7290);
  v20 = (int *)type metadata accessor for StandaloneBeacon(0);
  v21 = MACAddress.data.getter(v20);
  v23 = v22;
  *(_QWORD *)&v76 = v21;
  *((_QWORD *)&v76 + 1) = v22;
  <- infix<A>(_:_:)(v19, &v76, &type metadata for Data, &protocol witness table for Data);
  sub_10001BC14(v21, v23);
  if (qword_1010E9D88 != -1)
    swift_once(&qword_1010E9D88, sub_1006164C8);
  v64 = v18;
  v24 = sub_10001A9E8(v18, (uint64_t)qword_1011B72A8);
  v25 = MACAddress.data.getter(v24);
  v27 = v26;
  *(_QWORD *)&v76 = v25;
  *((_QWORD *)&v76 + 1) = v26;
  <- infix<A>(_:_:)(v24, &v76, &type metadata for Data, &protocol witness table for Data);
  sub_10001BC14(v25, v27);
  if (qword_1010E9D90 != -1)
    swift_once(&qword_1010E9D90, sub_10061655C);
  v28 = sub_10001A9A8(&qword_1010F2E50);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B72C0);
  v30 = (uint64_t *)(a2 + v20[7]);
  v32 = *v30;
  v31 = v30[1];
  *(_QWORD *)&v76 = v32;
  *((_QWORD *)&v76 + 1) = v31;
  <- infix<A>(_:_:)(v29, &v76, &type metadata for String, &protocol witness table for String);
  if (qword_1010E9D98 != -1)
    swift_once(&qword_1010E9D98, sub_1006165F4);
  v33 = sub_10001A9A8(&qword_1010EF3B0);
  v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B72D8);
  v35 = a2 + v20[8];
  v36 = type metadata accessor for Date(0);
  <- infix<A>(_:_:)(v34, v35, v36, &protocol witness table for Date);
  if (qword_1010E9DA0 != -1)
    swift_once(&qword_1010E9DA0, sub_100616684);
  v37 = sub_10001A9E8(v6, (uint64_t)qword_1011B72F0);
  v62 = v20;
  v38 = (uint64_t *)(a2 + v20[9]);
  sub_1001EDA78(*v38, v38[1]);
  if (v39 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v39 <= 0x7FFFFFFF)
  {
    v61 = a2;
    LODWORD(v76) = v39;
    v35 = sub_10012C6D4();
    <- infix<A>(_:_:)(v37, &v76, &type metadata for UInt32, v35);
    if (qword_1010E9DA8 == -1)
      goto LABEL_16;
    goto LABEL_28;
  }
  __break(1u);
LABEL_28:
  swift_once(&qword_1010E9DA8, sub_100616714);
LABEL_16:
  v40 = sub_10001A9E8(v6, (uint64_t)qword_1011B7308);
  v41 = v6;
  v42 = v66;
  v43 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v63, v40, v41);
  v44 = sub_1001EDBAC(*v38, v38[1]);
  v46 = v45;
  v47 = v65;
  static Endianness.current.getter(v44);
  sub_10007D5A4();
  FixedWidthInteger.init(data:ofEndianness:)(&v76, v44, v46, v47);
  if (BYTE4(v76))
    v48 = 0;
  else
    v48 = v76;
  LODWORD(v76) = v48;
  <- infix<A>(_:_:)(v43, &v76, &type metadata for UInt32, v35);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  if (qword_1010E9DB0 != -1)
    swift_once(&qword_1010E9DB0, sub_1006167A8);
  v49 = v64;
  v50 = sub_10001A9E8(v64, (uint64_t)qword_1011B7320);
  v51 = v61;
  v52 = v62;
  v53 = v61 + v62[10];
  v76 = *(_OWORD *)(v53 + 16);
  <- infix<A>(_:_:)(v50, &v76, &type metadata for Data, &protocol witness table for Data);
  v54 = v69;
  if (qword_1010E9DB8 != -1)
    swift_once(&qword_1010E9DB8, sub_10061683C);
  v55 = sub_10001A9E8(v49, (uint64_t)qword_1011B7338);
  v76 = *(_OWORD *)(v53 + 32);
  <- infix<A>(_:_:)(v55, &v76, &type metadata for Data, &protocol witness table for Data);
  if (qword_1010E9DC0 != -1)
    swift_once(&qword_1010E9DC0, sub_1006168D4);
  v56 = sub_10001A9E8(v49, (uint64_t)qword_1011B7350);
  v76 = *(_OWORD *)(v51 + v52[11]);
  <- infix<A>(_:_:)(v56, &v76, &type metadata for Data, &protocol witness table for Data);
  v57 = type metadata accessor for Table(0);
  v58 = v70;
  QueryType.insert(_:_:)(v54, v67, v57, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v54, v73);
  Connection.run(_:)(v58);
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v58, v74);
}

_QWORD *sub_100B8B834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1008ECD4C, a2, v5, (char *)&type metadata for () + 8, v6);
  if (v13)
  {
    swift_retain();
    swift_release();
    v7 = Connection.prepare(_:)(a1);
    result = (_QWORD *)swift_release();
    if (!v2)
    {
      v9 = sub_10001A9A8(&qword_101116718);
      result = (_QWORD *)swift_allocObject(v9, 40, 7);
      result[2] = v7;
      result[3] = sub_100B8B950;
      result[4] = 0;
    }
  }
  else
  {
    v10 = sub_10012C434();
    v11 = swift_allocError(&type metadata for DatabaseError, v10, 0, 0);
    *(_DWORD *)v12 = 2;
    *(_BYTE *)(v12 + 4) = 1;
    return (_QWORD *)swift_willThrow(v11);
  }
  return result;
}

void sub_100B8B950(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for Row(0);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_100B8B9D0(a2);
}

void sub_100B8B9D0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[13];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a1;
  v1 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v2 = __chkstk_darwin(v1);
  v13[4] = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v5 = __chkstk_darwin(v4);
  v13[1] = (char *)v13 - v6;
  __chkstk_darwin(v5);
  v7 = type metadata accessor for MACAddress(0);
  v8 = __chkstk_darwin(v7);
  v13[3] = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  if (qword_1010E9DB0 != -1)
    swift_once(&qword_1010E9DB0, sub_1006167A8);
  v14 = sub_10001A9A8(&qword_1010EF408);
  v12 = sub_10001A9E8(v14, (uint64_t)qword_1011B7320);
  Row.subscript.getter(&v16, v12, &type metadata for Data, &protocol witness table for Data);
  v13[10] = v17;
  v13[12] = v16;
  __asm { BR              X10 }
}

unint64_t sub_100B8C714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EF410;
  if (!qword_1010EF410)
  {
    v1 = type metadata accessor for Blob(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Blob, v1);
    atomic_store(result, (unint64_t *)&qword_1010EF410);
  }
  return result;
}

uint64_t sub_100B8C75C()
{
  uint64_t *v0;

  return sub_100B8B0F0(v0[2], v0[3], v0[4]);
}

uint64_t sub_100B8C778()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v1 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v2 = objc_msgSend(v1, "isInternalBuild");

  if (v2)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "BOOLForKey:", v4);

    if (v5)
    {
      v7 = static os_log_type_t.default.getter(v6);
      v8 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v9 = (id)static OS_os_log.default.getter(v8);
      os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);
      v10 = 1;
LABEL_12:

      return v10;
    }
  }
  objc_msgSend(v0, "latitude");
  v12 = v11;
  objc_msgSend(v0, "longitude");
  v14 = v13;
  if (qword_1010E9AD8 != -1)
    swift_once(&qword_1010E9AD8, sub_100264FD8);
  if (objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v12, v14))
  {
    v15 = (void *)qword_1010F46B0;
    if (qword_1010F46B0)
    {
      v9 = (id)qword_1010F46B0;
    }
    else
    {
      v16 = (void *)sub_100265274();
      v17 = (void *)qword_1010F46B0;
      qword_1010F46B0 = (uint64_t)v16;
      v9 = v16;

      v15 = 0;
    }
    v18 = v15;
    v10 = (uint64_t)objc_msgSend(v9, "containsCoordinate:", v12, v14);
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_100B8C970()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  id v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;

  v1 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v2 = objc_msgSend(v1, "isInternalBuild");

  if (v2)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "BOOLForKey:", v4);

    if (v5)
    {
      v7 = static os_log_type_t.default.getter(v6);
      v8 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v9 = (id)static OS_os_log.default.getter(v8);
      os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);
      v10 = 1;
LABEL_12:

      return v10;
    }
  }
  v11 = type metadata accessor for BeaconEstimatedLocation(0);
  v12 = *(double *)(v0 + *(int *)(v11 + 28));
  v13 = *(double *)(v0 + *(int *)(v11 + 32));
  if (qword_1010E9AD8 != -1)
    swift_once(&qword_1010E9AD8, sub_100264FD8);
  if (objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v12, v13))
  {
    v14 = (void *)qword_1010F46B0;
    if (qword_1010F46B0)
    {
      v9 = (id)qword_1010F46B0;
    }
    else
    {
      v15 = (void *)sub_100265274();
      v16 = (void *)qword_1010F46B0;
      qword_1010F46B0 = (uint64_t)v15;
      v9 = v15;

      v14 = 0;
    }
    v17 = v14;
    v10 = (uint64_t)objc_msgSend(v9, "containsCoordinate:", v12, v13);
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_100B8CB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_101116720);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101116720);
  if (qword_1010EA340 != -1)
    swift_once(&qword_1010EA340, sub_100B8EEC4);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_101116738);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_100B8CBE4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  NSString v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  NSString v23;
  id v24;

  v4 = v2;
  *(_BYTE *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  v6 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 40) = v6;
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 48) = v8;
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 56) = v11;
  swift_defaultActor_initialize(v4);
  *(_QWORD *)(v4 + 112) = _swiftEmptyDictionarySingleton;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  static DispatchQoS.unspecified.getter(v12);
  *(_QWORD *)(v3 + 16) = _swiftEmptyArrayStorage;
  v13 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_10001F738();
  dispatch thunk of SetAlgebra.init<A>(_:)(v3 + 16, v14, v15, v5, v13);
  *(_QWORD *)(v4 + 136) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x8000000100E62300, v8, v6, v11, 0);
  *(_DWORD *)(v4 + 144) = 0;
  v16 = (void *)objc_opt_self(CLLocationManager);
  v17 = String._bridgeToObjectiveC()();
  LODWORD(v16) = objc_msgSend(v16, "authorizationStatusForBundlePath:", v17);

  *(_DWORD *)(v4 + 144) = (_DWORD)v16;
  v18 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocationManagerDelegateTrampoline()), "init");
  *(_QWORD *)(v4 + 128) = v18;
  v19 = *(void **)(v4 + 136);
  v20 = objc_allocWithZone((Class)CLLocationManager);
  v21 = v18;
  v22 = v19;
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v20, "initWithEffectiveBundlePath:delegate:onQueue:", v23, v21, v22);

  if (v24)
  {
    *(_QWORD *)(v4 + 120) = v24;
    swift_task_switch(sub_100B8CE90, v4, 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100B8CE90()
{
  uint64_t v0;
  double v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(v0 + 64) & 1) == 0)
  {
    v1 = *(double *)(v0 + 24);
    v2 = *(void **)(*(_QWORD *)(v0 + 32) + 120);
    objc_msgSend(v2, "setDesiredAccuracy:", v1);
    objc_msgSend(v2, "setDistanceFilter:", v1 * 0.5);
  }
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  swift_weakAssign(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 128)+ OBJC_IVAR____TtC12searchpartydP33_59DB3DB2CFFD0A5DD2F04F14E73C8D1533LocationManagerDelegateTrampoline_target, *(_QWORD *)(v0 + 32));
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100B8CF38()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[8] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  v5 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v1[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[14] = v6;
  v1[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v1[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[17] = v8;
  v1[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContinuousClock.Instant(0);
  v1[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[20] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v11);
  v1[22] = swift_task_alloc(v11);
  v1[23] = swift_task_alloc(v11);
  v1[24] = swift_task_alloc(v11);
  v1[25] = swift_task_alloc(v11);
  v1[26] = swift_task_alloc(v11);
  v1[27] = swift_task_alloc(v11);
  v1[28] = swift_task_alloc(v11);
  v1[29] = swift_task_alloc(v11);
  v12 = type metadata accessor for ContinuousClock(0);
  v1[30] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[31] = v13;
  v1[32] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B8D0AC, v0, 0);
}

uint64_t sub_100B8D0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t type[8];
  os_log_type_t typea;
  os_log_type_t typeb[8];
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v2 = static SystemInfo.underTest.getter(a1);
  v3 = *(_QWORD *)(v1 + 232);
  if ((v2 & 1) != 0)
  {
    v5 = *(_QWORD *)(v1 + 216);
    v4 = *(_QWORD *)(v1 + 224);
    v7 = *(_QWORD *)(v1 + 200);
    v6 = *(_QWORD *)(v1 + 208);
    v9 = *(_QWORD *)(v1 + 184);
    v8 = *(_QWORD *)(v1 + 192);
    v10 = *(_QWORD *)(v1 + 176);
    *(_QWORD *)type = *(_QWORD *)(v1 + 168);
    v70 = *(_QWORD *)(v1 + 144);
    v73 = *(_QWORD *)(v1 + 120);
    v76 = *(_QWORD *)(v1 + 96);
    v79 = *(_QWORD *)(v1 + 88);
    swift_task_dealloc(*(_QWORD *)(v1 + 256));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(*(_QWORD *)type);
    swift_task_dealloc(v70);
    swift_task_dealloc(v73);
    swift_task_dealloc(v76);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 64);
    v13 = ContinuousClock.init()(v2);
    v14 = ContinuousClock.now.getter(v13);
    if ((*(_DWORD *)(v12 + 144) - 3) > 1)
    {
      ContinuousClock.now.getter(v14);
      if (qword_1010EA338 != -1)
        swift_once(&qword_1010EA338, sub_100B8CB54);
      v20 = *(_QWORD *)(v1 + 232);
      v22 = *(_QWORD *)(v1 + 176);
      v21 = *(_QWORD *)(v1 + 184);
      v24 = *(_QWORD *)(v1 + 160);
      v23 = *(_QWORD *)(v1 + 168);
      v25 = *(_QWORD *)(v1 + 152);
      v27 = *(_QWORD *)(v1 + 80);
      v26 = *(_QWORD *)(v1 + 88);
      v28 = *(_QWORD *)(v1 + 72);
      v29 = sub_10001A9E8(v28, (uint64_t)qword_101116720);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v29, v28);
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
      v30(v22, v20, v25);
      v31 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v30)(v23, v21, v25);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      v34 = os_log_type_enabled(v32, v33);
      v35 = *(_QWORD *)(v1 + 168);
      v36 = *(_QWORD *)(v1 + 176);
      v37 = *(_QWORD *)(v1 + 152);
      if (v34)
      {
        v38 = *(_QWORD *)(v1 + 120);
        v64 = *(_QWORD *)(v1 + 112);
        v65 = *(_QWORD *)(v1 + 104);
        v66 = *(_QWORD *)(v1 + 160);
        v74 = *(_QWORD *)(v1 + 80);
        v77 = *(_QWORD *)(v1 + 72);
        v80 = *(_QWORD *)(v1 + 88);
        typea = v33;
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = swift_slowAlloc(32, -1);
        v82 = v71;
        *(_DWORD *)v39 = 136446210;
        static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v71);
        v40 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
        v41 = static Duration.description<A>(_:_:units:)(v36, v35, v38, v37, v40);
        v43 = v42;
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v38, v65);
        *(_QWORD *)(v1 + 16) = sub_100016940(v41, v43, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease();
        v44 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
        v44(v36, v37);
        v44(v35, v37);
        _os_log_impl((void *)&_mh_execute_header, v32, typea, "No location (unauthorized) in: %{public}s", v39, 0xCu);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v80, v77);
      }
      else
      {
        v46 = *(_QWORD *)(v1 + 80);
        v45 = *(_QWORD *)(v1 + 88);
        v47 = *(_QWORD *)(v1 + 72);
        v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 160) + 8);
        v44(*(_QWORD *)(v1 + 176), *(_QWORD *)(v1 + 152));
        v44(v35, v37);

        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
      }
      v49 = *(_QWORD *)(v1 + 248);
      v48 = *(_QWORD *)(v1 + 256);
      v51 = *(_QWORD *)(v1 + 232);
      v50 = *(_QWORD *)(v1 + 240);
      v52 = *(_QWORD *)(v1 + 184);
      v53 = *(_QWORD *)(v1 + 152);
      v54 = sub_100B8F08C();
      v81 = swift_allocError(&type metadata for OneShotLocationWrapper.Error, v54, 0, 0);
      swift_willThrow(v81);
      v44(v52, v53);
      v44(v51, v53);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
      v56 = *(_QWORD *)(v1 + 224);
      v55 = *(_QWORD *)(v1 + 232);
      v58 = *(_QWORD *)(v1 + 208);
      v57 = *(_QWORD *)(v1 + 216);
      v60 = *(_QWORD *)(v1 + 192);
      v59 = *(_QWORD *)(v1 + 200);
      v62 = *(_QWORD *)(v1 + 176);
      v61 = *(_QWORD *)(v1 + 184);
      v63 = *(_QWORD *)(v1 + 168);
      *(_QWORD *)typeb = *(_QWORD *)(v1 + 144);
      v72 = *(_QWORD *)(v1 + 120);
      v75 = *(_QWORD *)(v1 + 96);
      v78 = *(_QWORD *)(v1 + 88);
      swift_task_dealloc(*(_QWORD *)(v1 + 256));
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(*(_QWORD *)typeb);
      swift_task_dealloc(v72);
      swift_task_dealloc(v75);
      swift_task_dealloc(v78);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    else
    {
      v16 = *(_QWORD *)(v1 + 64);
      v17 = sub_100006C64((unint64_t *)&unk_1011168F0, v15, (uint64_t (*)(uint64_t))type metadata accessor for OneShotLocationWrapper, (uint64_t)&unk_100E62354);
      v18 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v1 + 264) = v18;
      v19 = sub_10001A9A8(&qword_101102158);
      *v18 = v1;
      v18[1] = sub_100B8D628;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v1 + 24, v16, v17, 0xD000000000000011, 0x8000000100EEFDC0, sub_100B8F0D0, *(_QWORD *)(v1 + 64), v19);
    }
  }
}

uint64_t sub_100B8D628()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B8DE5C;
  else
    v4 = sub_100B8D68C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_100B8D68C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*isa)(uint64_t, uint64_t);
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t v81[8];
  os_log_type_t v82;
  uint64_t v83;
  os_log_t log;
  uint64_t v85;
  uint64_t v86;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;

  v2 = *(void **)(v1 + 24);
  ContinuousClock.now.getter(a1);
  v107 = v2;
  if (v2)
  {
    v3 = qword_1010EA338;
    v4 = v2;
    if (v3 != -1)
      swift_once(&qword_1010EA338, sub_100B8CB54);
    v6 = *(_QWORD *)(v1 + 224);
    v5 = *(_QWORD *)(v1 + 232);
    v8 = *(_QWORD *)(v1 + 208);
    v7 = *(_QWORD *)(v1 + 216);
    v9 = *(_QWORD *)(v1 + 152);
    v10 = *(_QWORD *)(v1 + 160);
    sub_10001A9E8(*(_QWORD *)(v1 + 72), (uint64_t)qword_101116720);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v11(v7, v5, v9);
    v11(v8, v6, v9);
    v12 = v4;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v17 = *(_QWORD *)(v1 + 248);
    v16 = *(_QWORD *)(v1 + 256);
    v18 = *(_QWORD *)(v1 + 232);
    v94 = *(_QWORD *)(v1 + 240);
    v104 = *(_QWORD *)(v1 + 224);
    v98 = *(_QWORD *)(v1 + 216);
    v101 = *(_QWORD *)(v1 + 208);
    v19 = *(_QWORD *)(v1 + 152);
    v95 = *(_QWORD *)(v1 + 160);
    if (v15)
    {
      type = v14;
      v20 = *(_QWORD *)(v1 + 144);
      v77 = *(_QWORD *)(v1 + 136);
      v92 = *(_QWORD *)(v1 + 232);
      v21 = *(_QWORD *)(v1 + 128);
      v79 = *(_QWORD *)(v1 + 120);
      *(_QWORD *)v81 = *(_QWORD *)(v1 + 112);
      v83 = *(_QWORD *)(v1 + 104);
      v90 = *(_QWORD *)(v1 + 256);
      v22 = swift_slowAlloc(32, -1);
      v85 = swift_slowAlloc(64, -1);
      v108 = v85;
      *(_DWORD *)v22 = 134218498;
      objc_msgSend(v12, "horizontalAccuracy");
      *(_QWORD *)(v1 + 40) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v22 + 4, v22 + 12);

      *(_WORD *)(v22 + 12) = 2082;
      v24 = objc_msgSend(v12, "timestamp");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

      v25 = sub_100006C64(&qword_1010EE0F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v21, v25);
      v28 = v27;
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v20, v21);
      *(_QWORD *)(v1 + 48) = sub_100016940(v26, v28, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();

      *(_WORD *)(v22 + 22) = 2082;
      static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v29);
      v30 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
      v31 = static Duration.description<A>(_:_:units:)(v98, v101, v79, v19, v30);
      v33 = v32;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v81 + 8))(v79, v83);
      *(_QWORD *)(v1 + 56) = sub_100016940(v31, v33, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64, v22 + 24, v22 + 32);
      swift_bridgeObjectRelease();
      v34 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
      v34(v98, v19);
      v34(v101, v19);
      _os_log_impl((void *)&_mh_execute_header, v13, type, "Obtained %fm / %{public}s location in: %{public}s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      v34(v104, v19);
      v34(v92, v19);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v90, v94);
    }
    else
    {

      v62 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
      v62(v98, v19);
      v62(v101, v19);

      v62(v104, v19);
      v62(v18, v19);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v94);
    }
  }
  else
  {
    if (qword_1010EA338 != -1)
      swift_once(&qword_1010EA338, sub_100B8CB54);
    v35 = *(_QWORD *)(v1 + 224);
    v36 = *(_QWORD *)(v1 + 232);
    v38 = *(_QWORD *)(v1 + 192);
    v37 = *(_QWORD *)(v1 + 200);
    v39 = *(_QWORD *)(v1 + 152);
    v40 = *(_QWORD *)(v1 + 160);
    v41 = *(_QWORD *)(v1 + 96);
    v42 = *(_QWORD *)(v1 + 72);
    v43 = *(_QWORD *)(v1 + 80);
    v44 = sub_10001A9E8(v42, (uint64_t)qword_101116720);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v44, v42);
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
    v45(v37, v36, v39);
    v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v45)(v38, v35, v39);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    v49 = os_log_type_enabled(v47, v48);
    v50 = *(_QWORD *)(v1 + 256);
    v102 = *(_QWORD *)(v1 + 248);
    v105 = *(_QWORD *)(v1 + 240);
    v96 = *(_QWORD *)(v1 + 224);
    v99 = *(_QWORD *)(v1 + 232);
    v51 = *(_QWORD *)(v1 + 192);
    v52 = *(_QWORD *)(v1 + 200);
    v53 = *(_QWORD *)(v1 + 152);
    v54 = *(_QWORD *)(v1 + 160);
    if (v49)
    {
      log = *(os_log_t *)(v1 + 160);
      v55 = *(_QWORD *)(v1 + 120);
      v78 = *(_QWORD *)(v1 + 112);
      v80 = *(_QWORD *)(v1 + 104);
      v89 = *(_QWORD *)(v1 + 80);
      v91 = *(_QWORD *)(v1 + 72);
      v93 = *(_QWORD *)(v1 + 96);
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = swift_slowAlloc(32, -1);
      v108 = v86;
      v82 = v48;
      *(_DWORD *)v56 = 136446210;
      static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v86);
      v57 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
      *(_QWORD *)typea = v50;
      v58 = static Duration.description<A>(_:_:units:)(v52, v51, v55, v53, v57);
      v60 = v59;
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v55, v80);
      *(_QWORD *)(v1 + 32) = sub_100016940(v58, v60, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease();
      isa = (void (*)(uint64_t, uint64_t))log[1].isa;
      isa(v52, v53);
      isa(v51, v53);
      _os_log_impl((void *)&_mh_execute_header, v47, v82, "No location in: %{public}s", v56, 0xCu);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v93, v91);
      isa(v96, v53);
      isa(v99, v53);
      (*(void (**)(os_log_type_t *, uint64_t))(v102 + 8))(*(os_log_type_t **)typea, v105);
    }
    else
    {
      v63 = *(_QWORD *)(v1 + 96);
      v64 = *(_QWORD *)(v1 + 72);
      v65 = *(_QWORD *)(v1 + 80);

      v66 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v66(v52, v53);
      v66(v51, v53);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
      v66(v96, v53);
      v66(v99, v53);
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v50, v105);
    }
  }
  v67 = *(_QWORD *)(v1 + 224);
  v68 = *(_QWORD *)(v1 + 232);
  v70 = *(_QWORD *)(v1 + 208);
  v69 = *(_QWORD *)(v1 + 216);
  v72 = *(_QWORD *)(v1 + 192);
  v71 = *(_QWORD *)(v1 + 200);
  v74 = *(_QWORD *)(v1 + 176);
  v73 = *(_QWORD *)(v1 + 184);
  v75 = *(_QWORD *)(v1 + 168);
  v97 = *(_QWORD *)(v1 + 144);
  v100 = *(_QWORD *)(v1 + 120);
  v103 = *(_QWORD *)(v1 + 96);
  v106 = *(_QWORD *)(v1 + 88);
  swift_task_dealloc(*(_QWORD *)(v1 + 256));
  swift_task_dealloc(v68);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v97);
  swift_task_dealloc(v100);
  swift_task_dealloc(v103);
  swift_task_dealloc(v106);
  return (*(uint64_t (**)(void *))(v1 + 8))(v107);
}

uint64_t sub_100B8DE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100B8DF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id result;
  _BYTE v15[24];
  _BYTE v16[24];

  v4 = sub_10001A9A8(&qword_1010EF1A0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(a2 + 112, v16, 0, 0);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 16);
  UUID.init()(v11);
  v12 = sub_10001A9A8(&qword_101111900);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v6, a1, v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v6, 0, 1, v12);
  swift_beginAccess(a2 + 112, v15, 33, 0);
  sub_1001009B0((uint64_t)v6, (uint64_t)v9);
  result = (id)swift_endAccess(v15);
  if (!v10)
    return objc_msgSend(*(id *)(a2 + 120), "requestLocation");
  return result;
}

uint64_t sub_100B8E0C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for OneShotLocationWrapper()
{
  return objc_opt_self(_TtC12searchpartyd22OneShotLocationWrapper);
}

uint64_t sub_100B8E120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1011168D4);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_100004A74;
  return sub_100B8E174(a5);
}

uint64_t sub_100B8E174(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[6] = a1;
  v2[7] = v1;
  v3 = sub_10001A9A8(&qword_101111900);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B8E1D8, v1, 0);
}

void sub_100B8E1D8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 48);
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(id *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
    if (v2)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 56);
    swift_beginAccess(v7 + 112, v0 + 16, 1, 0);
    v8 = *(_QWORD *)(v7 + 112);
    *(_QWORD *)(v7 + 112) = _swiftEmptyDictionarySingleton;
    v23 = v8 + 64;
    v9 = -1;
    v10 = -1 << *(_BYTE *)(v8 + 32);
    if (-v10 < 64)
      v9 = ~(-1 << -(char)v10);
    v11 = v9 & *(_QWORD *)(v8 + 64);
    v12 = (unint64_t)(63 - v10) >> 6;
    swift_bridgeObjectRetain(v8);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        if (v19 >= v12)
          goto LABEL_35;
        v20 = *(_QWORD *)(v23 + 8 * v19);
        ++v13;
        if (!v20)
        {
          v13 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_35;
          v20 = *(_QWORD *)(v23 + 8 * v13);
          if (!v20)
          {
            v13 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_35;
            v20 = *(_QWORD *)(v23 + 8 * v13);
            if (!v20)
            {
              v13 = v19 + 3;
              if (v19 + 3 >= v12)
                goto LABEL_35;
              v20 = *(_QWORD *)(v23 + 8 * v13);
              if (!v20)
              {
                v21 = v19 + 4;
                if (v21 >= v12)
                {
LABEL_35:
                  v22 = *(_QWORD *)(v0 + 80);

                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_task_dealloc(v22);
                  (*(void (**)(void))(v0 + 8))();
                  return;
                }
                v20 = *(_QWORD *)(v23 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    v13 = v21 + 1;
                    if (__OFADD__(v21, 1))
                      goto LABEL_37;
                    if (v13 >= v12)
                      goto LABEL_35;
                    v20 = *(_QWORD *)(v23 + 8 * v13);
                    ++v21;
                    if (v20)
                      goto LABEL_34;
                  }
                }
                v13 = v21;
              }
            }
          }
        }
LABEL_34:
        v11 = (v20 - 1) & v20;
        v15 = __clz(__rbit64(v20)) + (v13 << 6);
      }
      v16 = *(_QWORD *)(v0 + 80);
      v17 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v16, *(_QWORD *)(v8 + 56) + *(_QWORD *)(v6 + 72) * v15, v17);
      *(_QWORD *)(v0 + 40) = v2;
      v18 = v2;
      CheckedContinuation.resume(returning:)(v0 + 40, v17);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v17);
    }
  }
  if (v1 < 0)
    v5 = *(_QWORD *)(v0 + 48);
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  v2 = (id)_CocoaArrayWrapper.endIndex.getter(v5);
  if (!v2)
    goto LABEL_12;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_38:
    v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 48));
LABEL_6:
    swift_bridgeObjectRelease();
    v3 = v2;
    v4 = sub_10000CC48();

    if ((v4 & 1) != 0)
    {

      v2 = 0;
    }
    goto LABEL_13;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(id *)(*(_QWORD *)(v0 + 48) + 32);
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_100B8E5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1011168B4);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_100004A74;
  return sub_100B8E63C(a5);
}

uint64_t sub_100B8E63C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_10001A9A8(&qword_101111900);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[10] = v4;
  v2[11] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B8E6A0, v1, 0);
}

uint64_t sub_100B8E6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v30;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess(v1 + 112, v0 + 16, 1, 0);
  v2 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = _swiftEmptyDictionarySingleton;
  if (qword_1010EA338 != -1)
LABEL_30:
    swift_once(&qword_1010EA338, sub_100B8CB54);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_101116720);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 56);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    swift_errorRetain(v9);
    v11 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 48) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v10 + 4, v10 + 12);
    *v30 = v11;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CLLocationManager error: %{public}@", v10, 0xCu);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v30, 1, v12);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_errorRelease(v9);
  }
  v13 = *(_QWORD *)(v0 + 80);

  v14 = v2 + 64;
  v15 = -1;
  v16 = -1 << *(_BYTE *)(v2 + 32);
  if (-v16 < 64)
    v15 = ~(-1 << -(char)v16);
  v17 = v15 & *(_QWORD *)(v2 + 64);
  v18 = (unint64_t)(63 - v16) >> 6;
  swift_bridgeObjectRetain(v2);
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_9;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v18)
      goto LABEL_27;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v19;
    if (!v26)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v18)
        goto LABEL_27;
      v26 = *(_QWORD *)(v14 + 8 * v19);
      if (!v26)
      {
        v19 = v25 + 2;
        if (v25 + 2 >= v18)
          goto LABEL_27;
        v26 = *(_QWORD *)(v14 + 8 * v19);
        if (!v26)
        {
          v19 = v25 + 3;
          if (v25 + 3 >= v18)
            goto LABEL_27;
          v26 = *(_QWORD *)(v14 + 8 * v19);
          if (!v26)
            break;
        }
      }
    }
LABEL_26:
    v17 = (v26 - 1) & v26;
    v21 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))(v22, *(_QWORD *)(v2 + 56) + *(_QWORD *)(v13 + 72) * v21, v23);
    *(_QWORD *)(v0 + 40) = v24;
    swift_errorRetain(v24);
    CheckedContinuation.resume(throwing:)(v0 + 40, v23);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v22, v23);
  }
  v27 = v25 + 4;
  if (v27 < v18)
  {
    v26 = *(_QWORD *)(v14 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        v19 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_29;
        if (v19 >= v18)
          goto LABEL_27;
        v26 = *(_QWORD *)(v14 + 8 * v19);
        ++v27;
        if (v26)
          goto LABEL_26;
      }
    }
    v19 = v27;
    goto LABEL_26;
  }
LABEL_27:
  v28 = *(_QWORD *)(v0 + 88);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B8EB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100B8EB3C, a4, 0);
}

uint64_t sub_100B8EB3C()
{
  uint64_t v0;

  sub_100B8EB6C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100B8EB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  int v7;
  uint64_t v8;

  v1 = v0;
  *(_DWORD *)(v0 + 144) = objc_msgSend(*(id *)(v0 + 120), "authorizationStatus");
  if (qword_1010EA338 != -1)
    swift_once(&qword_1010EA338, sub_100B8CB54);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_101116720);
  v3 = swift_retain();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    v7 = *(_DWORD *)(v1 + 144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v6 + 4, v6 + 8);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Authorization status: %d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release();
  }
}

uint64_t type metadata accessor for LocationManagerDelegateTrampoline()
{
  return objc_opt_self(_TtC12searchpartydP33_59DB3DB2CFFD0A5DD2F04F14E73C8D1533LocationManagerDelegateTrampoline);
}

uint64_t sub_100B8EE38()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100B8EE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_101116894);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[2] = v2;
  return swift_task_switch(sub_100B8EB3C, v2, 0);
}

uint64_t sub_100B8EEC4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_101116738);
  sub_10001A9E8(v0, (uint64_t)qword_101116738);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x4C746F6853656E4FLL, 0xEF6E6F697461636FLL);
}

uint64_t sub_100B8EF44()
{
  return sub_100B8EFD4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100B8EF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1011168A4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004C28;
  v4 = (_QWORD *)swift_task_alloc(dword_1011168B4);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004A74;
  return sub_100B8E63C(v2);
}

uint64_t sub_100B8EFC8()
{
  return sub_100B8EFD4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100B8EFD4(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_unknownObjectRelease(v1[2]);
  swift_release(v1[4]);
  a1(v1[5]);
  return swift_deallocObject(v1, 48, 7);
}

uint64_t sub_100B8F014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1011168C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v4 = (_QWORD *)swift_task_alloc(dword_1011168D4);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004A74;
  return sub_100B8E174(v2);
}

unint64_t sub_100B8F08C()
{
  unint64_t result;

  result = qword_1011168E0;
  if (!qword_1011168E0)
  {
    result = swift_getWitnessTable(byte_100E623EC, &type metadata for OneShotLocationWrapper.Error);
    atomic_store(result, (unint64_t *)&qword_1011168E0);
  }
  return result;
}

id sub_100B8F0D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100B8DF70(a1, v1);
}

uint64_t storeEnumTagSinglePayload for OneShotLocationWrapper.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100B8F118 + 4 * asc_100E622B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100B8F138 + 4 * byte_100E622B5[v4]))();
}

_BYTE *sub_100B8F118(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100B8F138(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B8F140(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B8F148(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B8F150(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B8F158(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OneShotLocationWrapper.Error()
{
  return &type metadata for OneShotLocationWrapper.Error;
}

unint64_t sub_100B8F178()
{
  unint64_t result;

  result = qword_101116908;
  if (!qword_101116908)
  {
    result = swift_getWitnessTable(byte_100E623C4, &type metadata for OneShotLocationWrapper.Error);
    atomic_store(result, (unint64_t *)&qword_101116908);
  }
  return result;
}

uint64_t sub_100B8F1BC(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1 & 1);
}

void sub_100B8F1D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  Class isa;
  Class v5;

  if (a2 >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

void sub_100B8F224(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
  sub_100336ACC();
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t sub_100B8F36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t ObjectType;

  v24 = a1;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.default.getter(v5);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v9 = qword_1011B7D88;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v2);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD000000000000023;
  *(_QWORD *)(v11 + 80) = 0x8000000100EF0210;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22, 2, v11);
  swift_bridgeObjectRelease();
  v17 = sub_10001AA44((_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v18 = *v17;
  v19 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1011B7D88, "removeLocalAccountData", 22, 2, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject(&unk_1010B0210, 56, 7);
  v21[2] = 0;
  v21[3] = 0;
  v22 = v24;
  v21[4] = v18;
  v21[5] = v22;
  v21[6] = a2;
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v7, (uint64_t)&unk_1011169D8, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_100B8F5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;

  v3 = v2;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v7 = qword_1011B7D28;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v10 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v11 = String.init<A>(describing:)(&ObjectType, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v14;
  *(_QWORD *)(v9 + 64) = v14;
  *(_QWORD *)(v9 + 72) = 0xD00000000000001BLL;
  *(_QWORD *)(v9 + 80) = 0x8000000100EF01F0;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22, 2, v9);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v15 = swift_allocObject(&unk_1010B01E8, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain();
  sub_1004815B8((uint64_t)sub_100B97E08, v15);
  return swift_release();
}

uint64_t sub_100B8F820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t inited;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t ObjectType;

  v3 = v2;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v7 = qword_1011B7D28;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v2);
  v10 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v11 = String.init<A>(describing:)(&ObjectType, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v14;
  *(_QWORD *)(v9 + 64) = v14;
  *(_QWORD *)(v9 + 72) = 0xD000000000000017;
  *(_QWORD *)(v9 + 80) = 0x8000000100EF01D0;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22, 2, v9);
  swift_bridgeObjectRelease();
  v15 = sub_10001A9A8(&qword_1011002F0);
  inited = swift_initStackObject(v15, &v30);
  *(_OWORD *)(inited + 16) = xmmword_100E27910;
  v17 = (void *)SPBeaconTypeSelfBeaconing;
  *(_QWORD *)(inited + 32) = SPBeaconTypeSelfBeaconing;
  v18 = (void *)SPBeaconTypeDurian;
  v19 = (void *)SPBeaconTypeAccessory;
  *(_QWORD *)(inited + 40) = SPBeaconTypeDurian;
  *(_QWORD *)(inited + 48) = v19;
  v20 = (void *)SPBeaconTypeHele;
  v21 = (void *)SPBeaconTypeLocalFindable;
  *(_QWORD *)(inited + 56) = SPBeaconTypeHele;
  *(_QWORD *)(inited + 64) = v21;
  v22 = v17;
  v23 = v18;
  v24 = v19;
  v25 = v20;
  v26 = v21;
  v27 = sub_1003D76AC(inited);
  swift_setDeallocating(inited);
  type metadata accessor for SPBeaconType(0);
  swift_arrayDestroy(inited + 32, 5, v28);
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_100489EAC((uint64_t)v27, 0, 0, a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B8FA64(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t ObjectType;

  v9 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v10 = qword_1011B7D28;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v5);
  v13 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v14 = String.init<A>(describing:)(&ObjectType, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 72) = 0xD00000000000003ALL;
  *(_QWORD *)(v12 + 80) = 0x8000000100EF0190;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22, 2, v12);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_100489EAC(a1, a2 & 1, a3 & 1, a4, a5);
}

uint64_t sub_100B8FCAC(uint64_t a1, uint64_t a2)
{
  return sub_100B90AB8(a1, a2, 0xD00000000000001ELL, 0x8000000100EF0170, sub_10048AA40);
}

uint64_t sub_100B8FCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100B90410(a1, a2, a3, 0xD000000000000026, 0x8000000100EF0140, sub_10047E8E0);
}

void sub_100B90250(char *a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  void *v6;
  uint64_t v7;
  char *v8;

  v6 = _Block_copy(aBlock);
  v7 = *sub_10001AA44(&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  _Block_copy(v6);
  v8 = a1;
  a4(v7, v6);
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t sub_100B902F8(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v20;

  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  _Block_copy(v17);
  v18 = a1;
  sub_100B958FC((uint64_t)v16, (uint64_t)v18, (uint64_t)v17, a5, a6, a7);
  _Block_release(v17);
  _Block_release(v17);

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_100B903EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100B90410(a1, a2, a3, 0xD00000000000001CLL, 0x8000000100ED7480, sub_10048DE2C);
}

uint64_t sub_100B90410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t ObjectType;

  v9 = v6;
  v11 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v12 = qword_1011B7D28;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v6);
  v15 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v16 = String.init<A>(describing:)(&ObjectType, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 72) = a4;
  *(_QWORD *)(v14 + 80) = a5;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%{public}@: %{public}s", 22, 2, v14);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v9 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v9 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a6(a1, a2, a3);
}

void sub_100B90600(uint64_t a1, uint64_t a2)
{
  Class isa;

  type metadata accessor for UUID(0);
  sub_10001A9A8(&qword_1010FE6C0);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t sub_100B906A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t ObjectType;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v9 = qword_1011B7D28;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v4);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD000000000000029;
  *(_QWORD *)(v11 + 80) = 0x8000000100ED7370;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22, 2, v11);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_10048D3CC(a1, a2, a3, a4);
}

uint64_t sub_100B90A94(uint64_t a1, uint64_t a2)
{
  return sub_100B90AB8(a1, a2, 0xD000000000000017, 0x8000000100ED72A0, sub_100496E08);
}

uint64_t sub_100B90AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t ObjectType;

  v9 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v10 = qword_1011B7D28;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v5);
  v13 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v14 = String.init<A>(describing:)(&ObjectType, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 72) = a3;
  *(_QWORD *)(v12 + 80) = a4;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22, 2, v12);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a5(a1, a2);
}

void sub_100B90C4C(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t))
{
  void *v10;
  id v11;

  v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  v11 = a1;
  sub_100B962B8((uint64_t)v11, (uint64_t)v10, a4, a5, a6);
  _Block_release(v10);
  _Block_release(v10);

}

uint64_t sub_100B90CFC(void *a1, uint64_t a2, uint64_t a3, void *a4, const void *a5, void (*a6)(char *, id, id, void *))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v19;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  _Block_copy(v15);
  v16 = a4;
  v17 = a1;
  a6(v14, v16, v17, v15);
  _Block_release(v15);
  _Block_release(v15);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100B91130(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  uint64_t v22;

  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
  _Block_copy(v19);
  v20 = a1;
  sub_100B96B94(a3, (uint64_t)v18, (uint64_t)v20, (uint64_t)v19, a6, a7, a8);
  _Block_release(v19);
  _Block_release(v19);

  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_100B91308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v8 = qword_1011B7D28;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v12 = String.init<A>(describing:)(&ObjectType, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = 0xD000000000000025;
  *(_QWORD *)(v10 + 80) = 0x8000000100EF0110;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%{public}@: %{public}s", 22, 2, v10);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v16 = swift_allocObject(&unk_1010B0170, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  swift_retain();
  sub_100668604(a1);
  v17 = swift_allocObject(&unk_1010B0198, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100B97D94;
  *(_QWORD *)(v17 + 24) = v16;
  swift_retain();
  Future.addSuccess(block:)(sub_100B97D9C, v17);
  swift_release();
  swift_release();
  v18 = swift_allocObject(&unk_1010B01C0, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100B97D94;
  *(_QWORD *)(v18 + 24) = v16;
  swift_retain();
  Future.addFailure(block:)(sub_100B97DA4, v18);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100B91548(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD);
  id v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[9];
  _BYTE v21[8];
  unint64_t v22;
  unsigned __int8 v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned __int8 v32;

  sub_100005CF0(a1, (uint64_t)v20, &qword_1011169D0);
  v4 = v20[0];
  v5 = v20[1];
  sub_100005CF0(a1, (uint64_t)v21, &qword_1011169D0);
  if (v22 >> 60 == 11)
  {
    v6 = 0;
  }
  else
  {
    v7 = v23;
    v8 = v24;
    v10 = v25;
    v9 = v26;
    v14 = v27;
    v15 = v28;
    v16 = v29;
    v17 = v30;
    v18 = v31;
    v19 = v32;
    v11 = a2;
    v12 = objc_allocWithZone((Class)SPTagUserStats);
    sub_10001BD08(v4, v5);
    v13 = v12;
    a2 = v11;
    v6 = objc_msgSend(v13, "init");
    objc_msgSend(v6, "setOverflowFlag:", v7);
    objc_msgSend(v6, "setCrashCount:", v8);
    objc_msgSend(v6, "setMultiTime:", v10);
    objc_msgSend(v6, "setNearOwnerTime:", v9);
    objc_msgSend(v6, "setWildTime:", v14);
    objc_msgSend(v6, "setOwnerPlaySoundCount:", v15);
    objc_msgSend(v6, "setOwnerPlaySoundTime:", v16);
    objc_msgSend(v6, "setRangingCount:", v17);
    objc_msgSend(v6, "setRangingTime:", v18);
    objc_msgSend(v6, "setVersion:", v19);

    sub_100B97DAC(a1);
  }
  a2(v6);

}

uint64_t sub_100B91740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t ObjectType;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v8 = qword_1011B7D28;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v12 = String.init<A>(describing:)(&ObjectType, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = 0xD00000000000002BLL;
  *(_QWORD *)(v10 + 80) = 0x8000000100EF00E0;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%{public}@: %{public}s", 22, 2, v10);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1004818A4(a1, a2, a3);
}

uint64_t sub_100B918C8(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v21;

  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v18 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v18 + 16) = v17;
  v19 = a1;
  a7(v16, a6, v18);

  swift_release(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_100B919BC(uint64_t a1, uint64_t a2)
{
  return sub_100B90AB8(a1, a2, 0xD000000000000021, 0x8000000100EF00B0, sub_10049B1BC);
}

uint64_t sub_100B91C84(uint64_t a1, char a2, void (*a3)(__n128))
{
  __n128 v5;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v8 = a1;
    swift_errorRetain(a1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v8, v7, &protocol self-conformance witness table for Error);
    swift_errorRetain(a1);
    ((void (*)(_QWORD, uint64_t))a3)(0, a1);
    sub_1000FE214(a1, 1);
    return sub_1000FE214(a1, 1);
  }
  else
  {
    v5 = swift_bridgeObjectRetain(a1);
    a3(v5);
    return sub_1000FE214(a1, 0);
  }
}

void sub_100B91E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSArray v5;
  uint64_t v6;
  id v7;

  if (!a1)
  {
    v5.super.isa = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

uint64_t sub_100B92290(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;

  v3 = v2;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v7 = qword_1011B7D88;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v10 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v11 = String.init<A>(describing:)(&ObjectType, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v14;
  *(_QWORD *)(v9 + 64) = v14;
  *(_QWORD *)(v9 + 72) = 0xD000000000000023;
  *(_QWORD *)(v9 + 80) = 0x8000000100ECE710;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22, 2, v9);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v15 = swift_allocObject(&unk_1010B0148, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain();
  sub_100265A20((uint64_t)sub_100B98380, v15);
  return swift_release();
}

uint64_t sub_100B92444(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v8 = qword_1011B7D88;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v12 = String.init<A>(describing:)(&ObjectType, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = 0xD000000000000026;
  *(_QWORD *)(v10 + 80) = 0x8000000100ECE660;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%{public}@: %{public}s", 22, 2, v10);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v16 = swift_allocObject(&unk_1010B0120, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  swift_retain();
  sub_100265DF8(a1, (uint64_t)sub_100B97D88, v16);
  return swift_release();
}

void sub_100B925E4(void *a1, char a2, void (*a3)(void *))
{
  id v5;

  if ((a2 & 1) != 0)
  {
    v5 = a1;
    a3(a1);
    sub_100294B28(a1, 1);
  }
  else
  {
    a3(0);
  }
}

uint64_t sub_100B9265C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v8 = qword_1011B7D88;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v12 = String.init<A>(describing:)(&ObjectType, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = 0xD000000000000022;
  *(_QWORD *)(v10 + 80) = 0x8000000100ECDFF0;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%{public}@: %{public}s", 22, 2, v10);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v16 = swift_allocObject(&unk_1010B00F8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  swift_retain();
  sub_10026687C(a1, (uint64_t)sub_100B97D6C, v16);
  return swift_release();
}

uint64_t sub_100B92818(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v8 = qword_1011B7D88;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v12 = String.init<A>(describing:)(&ObjectType, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = 0xD000000000000024;
  *(_QWORD *)(v10 + 80) = 0x8000000100ECD610;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%{public}@: %{public}s", 22, 2, v10);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v16 = swift_allocObject(&unk_1010B00D0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  swift_retain();
  sub_100269AEC(a1, (uint64_t)sub_100B98380, v16);
  return swift_release();
}

void sub_100B929B8(void *a1, char a2, void (*a3)(void *, void *))
{
  void *v6;
  void *v7;
  id v8;

  v8 = a1;
  if ((a2 & 1) != 0)
  {
    v6 = 0;
    v7 = a1;
  }
  else
  {
    v6 = a1;
    v7 = 0;
  }
  a3(v6, v7);

}

uint64_t sub_100B92A34(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  void *v12;
  uint64_t v13;
  id v14;
  id v15;

  v12 = _Block_copy(aBlock);
  v13 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  v14 = a3;
  v15 = a1;
  a7(v14, a6, v13);

  return swift_release(v13);
}

id sub_100B92F2C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BeaconManagerTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BeaconManagerTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd23BeaconManagerTrampoline);
}

uint64_t sub_100B92FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return swift_task_switch(sub_100B92FD0, 0, 0);
}

uint64_t sub_100B92FD0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)(v0[4] + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  v2 = v1[3];
  v3 = v1[6];
  sub_10001AA44(v1, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_100B93060;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[5], v2, v3);
}

uint64_t sub_100B93060(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 64);
  *(_QWORD *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B93128;
  }
  else
  {
    *(_QWORD *)(v4 + 80) = a1;
    v6 = sub_100B930D4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B930D4()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, _QWORD);
  id v3;

  v1 = *(void **)(v0 + 80);
  v2 = *(void (**)(void *, _QWORD))(v0 + 48);
  v3 = v1;
  v2(v1, 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B93128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD, uint64_t);
  uint64_t v16;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7660);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 72);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    *(_QWORD *)(v0 + 24) = sub_100016940(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "bluetoothConnectionKeys error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 72));
    swift_errorRelease(v7);
  }

  v13 = *(_QWORD *)(v0 + 72);
  v14 = *(void (**)(_QWORD, uint64_t))(v0 + 48);
  swift_errorRetain(v13);
  v14(0, v13);
  swift_errorRelease(v13);
  swift_errorRelease(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B93418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 104) = v11;
  *(_OWORD *)(v8 + 88) = v10;
  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = a8;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 48) = a4;
  *(_QWORD *)(v8 + 24) = a1;
  *(_QWORD *)(v8 + 32) = a2;
  return swift_task_switch(sub_100B93450, 0, 0);
}

void sub_100B93450()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  char *v5;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  v2 = v1[6];
  sub_10001AA44(v1, v1[3]);
  v3 = *(int **)(v2 + 16);
  v5 = (char *)v3 + *v3;
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = sub_100B934EC;
  __asm { BR              X8 }
}

uint64_t sub_100B934EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B93584;
  else
    v3 = sub_100B93550;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B93550()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 96))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B93584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7660);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 120);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error from successfulConnection: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B93A50(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  *(_DWORD *)(v5 + 64) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_100B93A70, 0, 0);
}

uint64_t sub_100B93A70()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  int *v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  v3 = v2[3];
  v4 = v2[6];
  sub_10001AA44(v2, v3);
  v5 = sub_100B975F0(v1);
  *(_QWORD *)(v0 + 48) = v5;
  v6 = *(int **)(v4 + 24);
  v9 = (int *)((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v0 + 56) = v7;
  *v7 = v0;
  v7[1] = sub_100B93B18;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v9)(v5, *(unsigned int *)(v0 + 64), v3, v4);
}

uint64_t sub_100B93B18()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1007DD630, 0, 0);
}

uint64_t sub_100B93C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v7);
  v4[11] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v4[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[13] = v9;
  v4[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B93D28, 0, 0);
}

uint64_t sub_100B93D28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  int *v13;

  v1 = v0[11];
  v2 = v0[8];
  v3 = v0[9];
  v4 = v0[5];
  v5 = (_QWORD *)(v0[4] + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  v6 = v5[3];
  v7 = v5[6];
  sub_10001AA44(v5, v6);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[15] = v8;
  v8(v1, v4, v2);
  v9 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v9);
  v10 = *(int **)(v7 + 32);
  v13 = (int *)((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v0[16] = v11;
  *v11 = v0;
  v11[1] = sub_100B93E0C;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v13)(v0[14], v6, v7);
}

uint64_t sub_100B93E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_100B940A8;
  else
    v6 = sub_100B93E90;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B93E90()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7AE0);
  v6 = v1(v2, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 64);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 24) = sub_100016940(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully paired pencil: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }

  (*(void (**)(_QWORD))(v0 + 48))(0);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B940A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7AE0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 136);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error pairing pencil: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 136));
    swift_errorRelease(v7);
  }

  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(void (**)(uint64_t))(v0 + 48);
  swift_errorRetain(v12);
  v13(v12);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  v14 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B94448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v7);
  v4[11] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v4[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[13] = v9;
  v4[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B944E8, 0, 0);
}

uint64_t sub_100B944E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  int *v13;

  v1 = v0[11];
  v2 = v0[8];
  v3 = v0[9];
  v4 = v0[5];
  v5 = (_QWORD *)(v0[4] + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  v6 = v5[3];
  v7 = v5[6];
  sub_10001AA44(v5, v6);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[15] = v8;
  v8(v1, v4, v2);
  v9 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v9);
  v10 = *(int **)(v7 + 40);
  v13 = (int *)((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v0[16] = v11;
  *v11 = v0;
  v11[1] = sub_100B945CC;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v13)(v0[14], v6, v7);
}

uint64_t sub_100B945CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_100B94868;
  else
    v6 = sub_100B94650;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B94650()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7AE0);
  v6 = v1(v2, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 64);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 24) = sub_100016940(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully unpaired pencil: %{public}s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }

  (*(void (**)(_QWORD))(v0 + 48))(0);
  v18 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B94868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;

  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7AE0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 136);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error unpairing pencil: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 136));
    swift_errorRelease(v7);
  }

  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(void (**)(uint64_t))(v0 + 48);
  swift_errorRetain(v12);
  v13(v12);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  v14 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100B94C08(char a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_1010E9F18 != -1)
    swift_once(&qword_1010E9F18, sub_100791C18);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7630);
  v8 = v3;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v17 = v12;
    *(_DWORD *)v11 = 136446466;
    ObjectType = swift_getObjectType(v8);
    v14 = _typeName(_:qualified:)(ObjectType, 0);
    v16 = sub_100016940(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    v16 = sub_100016940(0xD000000000000038, 0x8000000100EEFF60, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 14, v11 + 22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  sub_10001AA44(&v8[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v8[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  sub_10079E2CC(a1 & 1, a2, a3);
}

uint64_t sub_100B94EAC(uint64_t (*a1)(_QWORD))
{
  void *v1;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_1010E9F18 != -1)
    swift_once(&qword_1010E9F18, sub_100791C18);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7630);
  v4 = v1;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136446466;
    ObjectType = swift_getObjectType(v4);
    v10 = _typeName(_:qualified:)(ObjectType, 0);
    v13 = sub_100016940(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    v13 = sub_100016940(0xD000000000000019, 0x8000000100EEFF40, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 14, v7 + 22);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  return a1(0);
}

uint64_t sub_100B950C0(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v10;
  uint64_t v11;
  id v12;

  v10 = _Block_copy(aBlock);
  v11 = swift_allocObject(a4, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v12 = a1;
  a6(a5, v11);

  return swift_release(v11);
}

uint64_t sub_100B9513C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[6];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  _QWORD v41[5];
  _OWORD v42[3];
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v6 = type metadata accessor for DefaultConfigurationLayer(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101116A08);
  __chkstk_darwin(v10);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)&v27 - v12;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14)
  {
    v28 = (char *)&v27 - v12;
    v29 = v7;
    v15 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v16 = *(_QWORD *)(v7 + 72);
    v30 = a2;
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_100018E88(v15, (uint64_t)v9);
      v40[3] = v6;
      v40[4] = &off_1010886B8;
      v17 = sub_100018F08(v40);
      sub_100018E88((uint64_t)v9, (uint64_t)v17);
      swift_getAtKeyPath(v31, v40, a1);
      v18 = v32;
      sub_1006C9720(v31[0], v31[1], v31[2], v31[3], v31[4], v31[5], v32, v33, v34, v35, v36, v37, v38, v39);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
      if (v18)
        break;
      sub_1000126B0((uint64_t)v9, type metadata accessor for DefaultConfigurationLayer);
      v15 += v16;
      if (!--v14)
      {
        v19 = 1;
        v7 = v29;
        a2 = v30;
        v13 = v28;
        goto LABEL_8;
      }
    }
    v13 = v28;
    sub_1000126EC((uint64_t)v9, (uint64_t)v28, type metadata accessor for DefaultConfigurationLayer);
    v19 = 0;
    v7 = v29;
    a2 = v30;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v19 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, v19, 1, v6);
  swift_bridgeObjectRelease(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    sub_100004048((uint64_t)v13, &qword_101116A08);
  }
  else
  {
    v41[3] = v6;
    v41[4] = &off_1010886B8;
    v20 = sub_100018F08(v41);
    sub_1000126EC((uint64_t)v13, (uint64_t)v20, type metadata accessor for DefaultConfigurationLayer);
    swift_getAtKeyPath(v42, v41, a1);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
    v22 = v43;
    if (v43)
    {
      v23 = v47;
      v24 = v42[1];
      *(_OWORD *)a3 = v42[0];
      *(_OWORD *)(a3 + 16) = v24;
      *(_OWORD *)(a3 + 32) = v42[2];
      *(_QWORD *)(a3 + 48) = v22;
      *(_OWORD *)(a3 + 56) = v44;
      *(_OWORD *)(a3 + 72) = v45;
      *(_OWORD *)(a3 + 88) = v46;
      *(_QWORD *)(a3 + 104) = v23;
      return result;
    }
  }
  *(_QWORD *)&v42[0] = 0;
  *((_QWORD *)&v42[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v25._object = (void *)0x8000000100ED5FD0;
  v25._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v25);
  v31[0] = a1;
  v26 = sub_10001A9A8((uint64_t *)&unk_101116A10);
  _print_unlocked<A, B>(_:_:)(v31, v42, v26, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)&v42[0], *((_QWORD *)&v42[0] + 1), "searchpartyd/Configuration.swift", 32, 2, 24, 0);
  __break(1u);
  return result;
}

uint64_t sub_100B95478@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 528))(v6, v3, v4);
  return sub_100005CF0((uint64_t)v6, a2, &qword_1011041E0);
}

id sub_100B954DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  double v17;
  id v18;
  double v19;
  Class isa;
  id v21;
  uint64_t v23;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, a1, a3);
  v16 = (*(double (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v17 = (*(double (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(a2));
  v19 = (*(double (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v21 = objc_msgSend(v18, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", isa, v16, v17, -1.0, v19, -1.0);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a3);
  return v21;
}

uint64_t sub_100B95674()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B9569C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc(dword_10111694C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_100B94448(v4, v5, v7, v8);
}

uint64_t sub_100B95734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100B957C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc(dword_101116964);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_100B93C88(v4, v5, v7, v8);
}

uint64_t sub_100B9585C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100B95890()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_DWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_101116974);
  v4 = *(_OWORD *)(v0 + 16);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_DWORD *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v5;
  return swift_task_switch(sub_100B93A70, 0, 0);
}

uint64_t sub_100B958FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t ObjectType;

  v10 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v11 = qword_1011B7D28;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v14 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v15 = String.init<A>(describing:)(&ObjectType, v14);
  v17 = v16;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v18 = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  *(_QWORD *)(v13 + 96) = &type metadata for String;
  *(_QWORD *)(v13 + 104) = v18;
  *(_QWORD *)(v13 + 64) = v18;
  *(_QWORD *)(v13 + 72) = a4;
  *(_QWORD *)(v13 + 80) = a5;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "%{public}@: %{public}s", 22, 2, v13);
  swift_bridgeObjectRelease();
  v19 = sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a6(a1, *v19, a3);
}

void sub_100B95A50(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t ObjectType;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v9 = qword_1011B7D28;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD00000000000002BLL;
  *(_QWORD *)(v11 + 80) = 0x8000000100EF04C0;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22, 2, v11);
  swift_bridgeObjectRelease();
  v17 = sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004C70D4(a1, a2, 0, (_QWORD *)*v17, a4);
}

void sub_100B95BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  id v15;
  __int128 v16;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v5 = qword_1011B7D28;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  *(_QWORD *)&v16 = swift_getObjectType(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v9 = String.init<A>(describing:)(&v16, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD00000000000001FLL;
  *(_QWORD *)(v7 + 80) = 0x8000000100EF04A0;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@: %{public}s", 22, 2, v7);
  swift_bridgeObjectRelease();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v13 = v16;
  KeyPath = swift_getKeyPath(&unk_100E62458);
  sub_100B9513C(KeyPath, v13, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v15 = MacBeaconConfig.xpcObject()();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, id, _QWORD))(a2 + 16))(a2, v15, 0);

}

void sub_100B95DC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t ObjectType;

  v9 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v10 = qword_1011B7D28;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a4);
  v13 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v14 = String.init<A>(describing:)(&ObjectType, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 72) = 0xD00000000000003CLL;
  *(_QWORD *)(v12 + 80) = 0x8000000100ED8390;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22, 2, v12);
  swift_bridgeObjectRelease();
  v18 = sub_10001AA44((_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1004C70D4(a1, a2, a3 & 1, (_QWORD *)*v18, a5);
}

void sub_100B95F34(uint64_t a1, void *a2, uint64_t a3, void (**a4)(const void *, Class))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)(const void *, Class);
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t ObjectType;

  v39 = a2;
  v36 = a1;
  v6 = sub_10001A9A8(&qword_1011169F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for TimeBasedKeysCriteria(0);
  v9 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v35 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = swift_allocObject(&unk_1010B04E0, 24, 7);
  *(_QWORD *)(v40 + 16) = a4;
  v37 = a4;
  v11 = _Block_copy(a4);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v13 = qword_1011B7D28;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v16 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v17 = String.init<A>(describing:)(&ObjectType, v16);
  v34 = a3;
  v18 = v17;
  v20 = v19;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v18;
  *(_QWORD *)(v15 + 40) = v20;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v21;
  *(_QWORD *)(v15 + 64) = v21;
  *(_QWORD *)(v15 + 72) = 0xD000000000000021;
  *(_QWORD *)(v15 + 80) = 0x8000000100EF0410;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%{public}@: %{public}s", 22, 2, v15);
  swift_bridgeObjectRelease();
  v22 = v39;
  sub_10064DB9C(v22, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v38) == 1)
  {
    v23 = sub_100004048((uint64_t)v8, &qword_1011169F8);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = qword_1011B7D28;
    v26 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    v27 = v22;
    v28 = objc_msgSend(v27, "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = v21;
    *(_QWORD *)(v26 + 32) = v29;
    *(_QWORD *)(v26 + 40) = v31;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Failed to init criteria %@", 26, 2, v26);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, &qword_101116A00, SPCommandKey_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v37[2](v37, isa);
    swift_release();

  }
  else
  {
    v33 = v35;
    sub_1000126EC((uint64_t)v8, v35, type metadata accessor for TimeBasedKeysCriteria);
    sub_10001AA44((_QWORD *)(v34 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v34 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_100494E60(v36, v33, (uint64_t)sub_100B98170, v40);
    sub_1000126B0(v33, type metadata accessor for TimeBasedKeysCriteria);
    swift_release();
  }
}

uint64_t sub_100B962B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t ObjectType;

  v9 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v10 = qword_1011B7D28;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a1);
  v13 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v14 = String.init<A>(describing:)(&ObjectType, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 72) = a3;
  *(_QWORD *)(v12 + 80) = a4;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22, 2, v12);
  swift_bridgeObjectRelease();
  v18 = sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a5(*v18, a2);
}

void sub_100B9640C(void (*a1)(_QWORD, _QWORD, _QWORD), void *a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, uint64_t);
  uint64_t ObjectType;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v9 = qword_1011B7D28;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD000000000000023;
  *(_QWORD *)(v11 + 80) = 0x8000000100ED7FA0;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22, 2, v11);
  swift_bridgeObjectRelease();
  v17 = (void (**)(char *, uint64_t))sub_10001AA44((_QWORD *)(a3+ OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3+ OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation+ 24));
  sub_1004C91B0(a1, a2, *v17, a4);
}

void sub_100B96578(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *aBlock)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t ObjectType;

  v11 = _Block_copy(aBlock);
  v22 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v12 = qword_1011B7D28;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a5);
  v15 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v16 = String.init<A>(describing:)(&ObjectType, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 72) = 0xD000000000000039;
  *(_QWORD *)(v14 + 80) = 0x8000000100EF03D0;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v12, "%{public}@: %{public}s", 22, 2, v14);
  swift_bridgeObjectRelease();
  v20 = (uint64_t **)sub_10001AA44((_QWORD *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a1 < 0 || a2 < 0 || (a3 & 0x8000000000000000) != 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v21 = *v20;
    _Block_copy(aBlock);
    sub_1004CBDBC(a1, a2, a3, a4, v21, aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }
}

void sub_100B967A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *aBlock, double a6)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t ObjectType;

  v11 = _Block_copy(aBlock);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v13 = qword_1011B7D28;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a4);
  v16 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v17 = String.init<A>(describing:)(&ObjectType, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = 0xD000000000000038;
  *(_QWORD *)(v15 + 80) = 0x8000000100ED7A90;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%{public}@: %{public}s", 22, 2, v15);
  swift_bridgeObjectRelease();
  v21 = (uint64_t **)sub_10001AA44((_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a1 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v22 = *v21;
    _Block_copy(aBlock);
    sub_1004CAA28(a1, a2, a3, v22, aBlock, a6);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }
}

void sub_100B969A8(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t ObjectType;

  v8 = _Block_copy(aBlock);
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v10 = qword_1011B7D28;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v13 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v14 = String.init<A>(describing:)(&ObjectType, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 72) = 0xD00000000000002BLL;
  *(_QWORD *)(v12 + 80) = 0x8000000100ED7A00;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22, 2, v12);
  swift_bridgeObjectRelease();
  v18 = (uint64_t **)sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a1 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v19 = *v18;
    _Block_copy(aBlock);
    sub_1004CB5E4(a1, a2, v19, aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }
}

uint64_t sub_100B96B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t ObjectType;

  v11 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v12 = qword_1011B7D28;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v15 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v16 = String.init<A>(describing:)(&ObjectType, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 72) = a5;
  *(_QWORD *)(v14 + 80) = a6;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%{public}@: %{public}s", 22, 2, v14);
  swift_bridgeObjectRelease();
  v20 = sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a7(a1, a2, *v20, a4);
}

void sub_100B96CF0(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t ObjectType;

  v8 = _Block_copy(aBlock);
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v10 = qword_1011B7D28;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v13 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v14 = String.init<A>(describing:)(&ObjectType, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 72) = 0xD000000000000024;
  *(_QWORD *)(v12 + 80) = 0x8000000100EF03A0;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}s", 22, 2, v12);
  swift_bridgeObjectRelease();
  v18 = sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a2 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v19 = (_QWORD *)*v18;
    _Block_copy(aBlock);
    sub_1004CCF54(a1, a2, v19, aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }
}

uint64_t sub_100B96EDC(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t ObjectType;

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v7 = qword_1011B7D28;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v10 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v11 = String.init<A>(describing:)(&ObjectType, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v14;
  *(_QWORD *)(v9 + 64) = v14;
  *(_QWORD *)(v9 + 72) = 0xD000000000000038;
  *(_QWORD *)(v9 + 80) = 0x8000000100EF0360;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22, 2, v9);
  swift_bridgeObjectRelease();
  v15 = sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1004D0CB8(a1, *v15, a3);
}

void sub_100B97040(uint64_t a1, char a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t ObjectType;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v9 = qword_1011B7D88;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD00000000000001ELL;
  *(_QWORD *)(v11 + 80) = 0x8000000100EF0320;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}s", 22, 2, v11);
  swift_bridgeObjectRelease();
  v17 = sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_100295B2C(a1, a2 & 1, *v17, a4);
}

uint64_t sub_100B971AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t ObjectType;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v5 = qword_1011B7D88;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v9 = String.init<A>(describing:)(&ObjectType, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD000000000000020;
  *(_QWORD *)(v7 + 80) = 0x8000000100EF02F0;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@: %s", 6, 2, v7);
  swift_bridgeObjectRelease();
  v13 = sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_100294D98(*v13, a2);
}

uint64_t sub_100B97300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t ObjectType;

  v5 = a1;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v7 = qword_1011B7D88;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v10 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v11 = String.init<A>(describing:)(&ObjectType, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v14;
  *(_QWORD *)(v9 + 64) = v14;
  *(_QWORD *)(v9 + 72) = 0xD000000000000027;
  *(_QWORD *)(v9 + 80) = 0x8000000100EF02C0;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: %{public}s", 22, 2, v9);
  swift_bridgeObjectRelease();
  return sub_10029654C(v5 & 1, a3);
}

uint64_t sub_100B97444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t ObjectType;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v5 = qword_1011B7D88;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v9 = String.init<A>(describing:)(&ObjectType, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD000000000000022;
  *(_QWORD *)(v7 + 80) = 0x8000000100EF0290;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@: %{public}s", 22, 2, v7);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "BOOLForKey:", v14);

  return (*(uint64_t (**)(uint64_t, id))(a2 + 16))(a2, v15);
}

uint64_t sub_100B975F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  Class isa;
  id v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  id v43;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  _OWORD v54[2];
  __int128 v55;
  __int128 v56;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  if (!*(_QWORD *)(a1 + 16) || (v49 = a1, v4 = sub_100518DA0(v2, v3), (v5 & 1) == 0))
  {
    v55 = 0u;
    v56 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v55);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v56 + 1))
  {
LABEL_42:
    sub_100004048((uint64_t)&v55, (uint64_t *)&unk_1010F6390);
LABEL_43:
    swift_bridgeObjectRetain(a1);
    return a1;
  }
  v6 = sub_10001A9A8(&qword_101116988);
  if ((swift_dynamicCast(v54, &v55, (char *)&type metadata for Any + 8, v6, 6) & 1) == 0)
    goto LABEL_43;
  v7 = *(_QWORD *)&v54[0];
  v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  v48 = v8;
  *((_QWORD *)&v56 + 1) = sub_10001A9A8((uint64_t *)&unk_101116990);
  v50 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v7 + 64);
  v51 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v52 = v7;
  swift_bridgeObjectRetain(v7);
  v12 = 0;
  v13 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v53 = v12;
      v16 = v15 | (v12 << 6);
    }
    else
    {
      v17 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_48;
      if (v17 >= v51)
      {
LABEL_45:
        swift_release();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v55 = v13;
        sub_10010F90C(&v55, v54);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
        sub_10010A7E4(v54, v47, v48, isUniquelyReferenced_nonNull_native);
        a1 = v49;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a1;
      }
      v18 = *(_QWORD *)(v50 + 8 * v17);
      v19 = v12 + 1;
      if (!v18)
      {
        v19 = v12 + 2;
        if (v12 + 2 >= v51)
          goto LABEL_45;
        v18 = *(_QWORD *)(v50 + 8 * v19);
        if (!v18)
        {
          v19 = v12 + 3;
          if (v12 + 3 >= v51)
            goto LABEL_45;
          v18 = *(_QWORD *)(v50 + 8 * v19);
          if (!v18)
          {
            v19 = v12 + 4;
            if (v12 + 4 >= v51)
              goto LABEL_45;
            v18 = *(_QWORD *)(v50 + 8 * v19);
            if (!v18)
            {
              v19 = v12 + 5;
              if (v12 + 5 >= v51)
                goto LABEL_45;
              v18 = *(_QWORD *)(v50 + 8 * v19);
              if (!v18)
              {
                v20 = v12 + 6;
                if (v12 + 6 >= v51)
                  goto LABEL_45;
                v18 = *(_QWORD *)(v50 + 8 * v20);
                if (!v18)
                {
                  while (1)
                  {
                    v19 = v20 + 1;
                    if (__OFADD__(v20, 1))
                      goto LABEL_49;
                    if (v19 >= v51)
                      goto LABEL_45;
                    v18 = *(_QWORD *)(v50 + 8 * v19);
                    ++v20;
                    if (v18)
                      goto LABEL_29;
                  }
                }
                v19 = v12 + 6;
              }
            }
          }
        }
      }
LABEL_29:
      v11 = (v18 - 1) & v18;
      v53 = v19;
      v16 = __clz(__rbit64(v18)) + (v19 << 6);
    }
    v21 = 16 * v16;
    v22 = (uint64_t *)(*(_QWORD *)(v52 + 48) + v21);
    v24 = *v22;
    v23 = v22[1];
    v25 = (uint64_t *)(*(_QWORD *)(v52 + 56) + v21);
    v27 = *v25;
    v26 = v25[1];
    sub_10001BBBC(*v22, v23);
    sub_10001BBBC(v27, v26);
    sub_10001BBBC(v24, v23);
    sub_10001BBBC(v27, v26);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v29 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithData:", isa);

    sub_10001BBBC(v27, v26);
    v30 = swift_isUniquelyReferenced_nonNull_native(v13);
    *(_QWORD *)&v54[0] = v13;
    v32 = sub_100519CD8((uint64_t)v29);
    v33 = v13[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v13[3] >= v35)
    {
      if ((v30 & 1) != 0)
      {
        v13 = *(_QWORD **)&v54[0];
        if ((v31 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_100AA2424();
        v13 = *(_QWORD **)&v54[0];
        if ((v36 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_100A954D0(v35, v30);
      v37 = sub_100519CD8((uint64_t)v29);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_50;
      v32 = v37;
      v13 = *(_QWORD **)&v54[0];
      if ((v36 & 1) != 0)
      {
LABEL_8:
        v14 = v13[7] + 16 * v32;
        sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
        *(_QWORD *)v14 = v27;
        *(_QWORD *)(v14 + 8) = v26;
        goto LABEL_9;
      }
    }
    v13[(v32 >> 6) + 8] |= 1 << v32;
    *(_QWORD *)(v13[6] + 8 * v32) = v29;
    v39 = (uint64_t *)(v13[7] + 16 * v32);
    *v39 = v27;
    v39[1] = v26;
    v40 = v13[2];
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
      goto LABEL_47;
    v13[2] = v42;
    v43 = v29;
LABEL_9:

    swift_bridgeObjectRelease();
    sub_10001BC14(v24, v23);
    sub_10001BC14(v27, v26);
    sub_10001BC14(v24, v23);
    sub_10001BC14(v27, v26);
    v12 = v53;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  v46 = sub_10000F4A0(0, (unint64_t *)&qword_1011074C0, CBUUID_ptr);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v46);
  __break(1u);
  return result;
}

uint64_t sub_100B97AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  v10(v0 + v7, v1);
  sub_10001BC14(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8));
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  swift_release();
  return swift_deallocObject(v0, ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v6);
}

uint64_t sub_100B97BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 23) & 0xFFFFFFFFFFFFF8;
  v22 = v0 + v4;
  v23 = *(_QWORD *)(v0 + 16);
  v12 = v0 + v6;
  v13 = *(_QWORD *)(v0 + v7);
  v14 = *(_QWORD *)(v0 + v9);
  v15 = *(_QWORD *)(v0 + v8);
  v16 = *(_QWORD *)(v0 + v8 + 8);
  v17 = *(_QWORD *)(v0 + v10);
  v18 = *(_QWORD *)(v0 + v10 + 8);
  v19 = swift_task_alloc(dword_1011169A4);
  v20 = *(_OWORD *)(v0 + v11);
  *(_QWORD *)(v1 + 16) = v19;
  *(_QWORD *)v19 = v1;
  *(_QWORD *)(v19 + 8) = sub_100004A74;
  *(_OWORD *)(v19 + 96) = v20;
  *(_QWORD *)(v19 + 80) = v17;
  *(_QWORD *)(v19 + 88) = v18;
  *(_QWORD *)(v19 + 64) = v16;
  *(_QWORD *)(v19 + 72) = v14;
  *(_QWORD *)(v19 + 48) = v13;
  *(_QWORD *)(v19 + 56) = v15;
  *(_QWORD *)(v19 + 32) = v22;
  *(_QWORD *)(v19 + 40) = v12;
  *(_QWORD *)(v19 + 24) = v23;
  return swift_task_switch(sub_100B93450, 0, 0);
}

uint64_t sub_100B97CD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B97D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc(dword_1011169B4);
  v3 = *(_OWORD *)(v0 + 16);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  return swift_task_switch(sub_100B92FD0, 0, 0);
}

void sub_100B97D6C(void *a1, char a2)
{
  uint64_t v2;

  sub_100B929B8(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16));
}

void sub_100B97D88(void *a1, char a2)
{
  uint64_t v2;

  sub_100B925E4(a1, a2 & 1, *(void (**)(void *))(v2 + 16));
}

void sub_100B97D94(uint64_t a1)
{
  uint64_t v1;

  sub_100B91548(a1, *(void (**)(_QWORD))(v1 + 16));
}

uint64_t sub_100B97D9C(__int128 *a1)
{
  uint64_t v1;

  return sub_10049C45C(a1, *(uint64_t (**)(__int128 *))(v1 + 16));
}

uint64_t sub_100B97DA4(uint64_t a1)
{
  uint64_t v1;

  return sub_10049C4C0(a1, *(uint64_t (**)(_OWORD *))(v1 + 16));
}

uint64_t sub_100B97DAC(uint64_t a1)
{
  sub_100B97DF4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100B97DF4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_10001EF3C(result, a2);
  return result;
}

uint64_t sub_100B97E08(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(a1 & 1);
}

uint64_t sub_100B97E2C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100B97E60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1010F4A94);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_1002709D4(a1, v4, v5, v6, v7, v8);
}

void sub_100B97EE0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100D47440(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_100B97EE8(uint64_t a1)
{
  uint64_t v1;

  sub_1002731D0(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_100B97EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 41) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1))
    v10(v0 + v8, v1);
  swift_release();
  return swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

uint64_t sub_100B97FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + 32);
  v12 = v1 + v5;
  v13 = v1 + v8;
  v14 = *(_QWORD *)(v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v15 = *(_BYTE *)(v1 + 40);
  v16 = (_QWORD *)swift_task_alloc(dword_1010FD0AC);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_100004C28;
  return sub_1004A06EC(a1, v9, v10, v11, v15, v12, v13, v14);
}

void sub_100B980DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100B91E5C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100B980E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B98108(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100B91C84(a1, a2 & 1, *(void (**)(__n128))(v2 + 16));
}

uint64_t sub_100B98114(uint64_t a1)
{
  uint64_t v1;

  return sub_10049EC04(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

void sub_100B98138(uint64_t a1)
{
  uint64_t v1;

  sub_10001D244(a1, *(_QWORD *)(v1 + 16), &qword_1011169F0, SPCommandKeys_ptr);
}

void sub_100B98160(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_100B8F1D0(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100B98168(uint64_t a1)
{
  uint64_t v1;

  sub_100B8F224(a1, *(_QWORD *)(v1 + 16));
}

void sub_100B98170(uint64_t a1)
{
  uint64_t v1;

  sub_10001D244(a1, *(_QWORD *)(v1 + 16), &qword_101116A00, SPCommandKey_ptr);
}

void sub_100B98198(uint64_t a1)
{
  uint64_t v1;

  sub_100B90600(a1, *(_QWORD *)(v1 + 16));
}

void sub_100B981A4(uint64_t a1)
{
  uint64_t v1;

  sub_1004A4FDC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100B981AC(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t storeEnumTagSinglePayload for BeaconManagerTrampoline.BeaconManagerTrampolineError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B9820C + 4 * byte_100E62435[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B98240 + 4 * byte_100E62430[v4]))();
}

uint64_t sub_100B98240(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B98248(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B98250);
  return result;
}

uint64_t sub_100B9825C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B98264);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B98268(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B98270(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerTrampoline.BeaconManagerTrampolineError()
{
  return &type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError;
}

unint64_t sub_100B98290()
{
  unint64_t result;

  result = qword_101116A30;
  if (!qword_101116A30)
  {
    result = swift_getWitnessTable(aI_55, &type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError);
    atomic_store(result, (unint64_t *)&qword_101116A30);
  }
  return result;
}

unint64_t TimeBasedKey.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String v4;

  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000100ED6170;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  type metadata accessor for TimeBasedKey(0);
  v2 = type metadata accessor for DateInterval(0);
  v3 = sub_1002EEB24();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t type metadata accessor for TimeBasedKey(uint64_t a1)
{
  uint64_t result;

  result = qword_101116A98;
  if (!qword_101116A98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeBasedKey);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DateInterval(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)v4 + v11;
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = *(uint64_t *)((char *)a2 + v11 + 8);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
    else
    {
      v16 = *v13;
      sub_10001BBBC(*v13, v14);
      *(_QWORD *)v12 = v16;
      *((_QWORD *)v12 + 1) = v14;
    }
    v17 = v13[2];
    v18 = v13[3];
    sub_10001BBBC(v17, v18);
    *((_QWORD *)v12 + 2) = v17;
    *((_QWORD *)v12 + 3) = v18;
    v19 = v13 + 4;
    v20 = v13[5];
    if (v20 >> 60 == 15)
    {
      *((_OWORD *)v12 + 2) = *(_OWORD *)v19;
    }
    else
    {
      v21 = *v19;
      sub_10001BBBC(*v19, v13[5]);
      *((_QWORD *)v12 + 4) = v21;
      *((_QWORD *)v12 + 5) = v20;
    }
  }
  return v4;
}

uint64_t destroy for TimeBasedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_10001BC14(*v6, v7);
  result = sub_10001BC14(v6[2], v6[3]);
  v9 = v6[5];
  if (v9 >> 60 != 15)
    return sub_10001BC14(v6[4], v9);
  return result;
}

_QWORD *initializeWithCopy for TimeBasedKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 8);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_10001BBBC(*v12, v13);
    *(_QWORD *)v11 = v14;
    *((_QWORD *)v11 + 1) = v13;
  }
  v15 = v12[2];
  v16 = v12[3];
  sub_10001BBBC(v15, v16);
  *((_QWORD *)v11 + 2) = v15;
  *((_QWORD *)v11 + 3) = v16;
  v17 = v12 + 4;
  v18 = v12[5];
  if (v18 >> 60 == 15)
  {
    *((_OWORD *)v11 + 2) = *(_OWORD *)v17;
  }
  else
  {
    v19 = *v17;
    sub_10001BBBC(*v17, v12[5]);
    *((_QWORD *)v11 + 4) = v19;
    *((_QWORD *)v11 + 5) = v18;
  }
  return a1;
}

_QWORD *assignWithCopy for TimeBasedKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 8);
  if (*(_QWORD *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_10001BBBC(*v12, v13);
      *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1007EAC70((uint64_t)v11);
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_10001BBBC(*v12, v13);
  v16 = *v11;
  v17 = v11[1];
  *v11 = v15;
  v11[1] = v13;
  sub_10001BC14(v16, v17);
LABEL_8:
  v18 = v12[2];
  v19 = v12[3];
  sub_10001BBBC(v18, v19);
  v20 = v11[2];
  v21 = v11[3];
  v11[2] = v18;
  v11[3] = v19;
  sub_10001BC14(v20, v21);
  v22 = v12 + 4;
  v23 = v12[5];
  if ((unint64_t)v11[5] >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      v25 = *v22;
      sub_10001BBBC(*v22, v12[5]);
      v26 = v11[4];
      v27 = v11[5];
      v11[4] = v25;
      v11[5] = v23;
      sub_10001BC14(v26, v27);
      return a1;
    }
    sub_1002EEEE0((uint64_t)(v11 + 4));
    goto LABEL_13;
  }
  if (v23 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)v11 + 2) = *(_OWORD *)v22;
    return a1;
  }
  v24 = *v22;
  sub_10001BBBC(*v22, v12[5]);
  v11[4] = v24;
  v11[5] = v23;
  return a1;
}

_QWORD *initializeWithTake for TimeBasedKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_OWORD *)((char *)a1 + v10);
  v12 = (_OWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v11[2] = v12[2];
  return a1;
}

_QWORD *assignWithTake for TimeBasedKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a1 + v10 + 8);
  if (v13 >> 60 == 15)
    goto LABEL_4;
  v14 = *((_QWORD *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    sub_1007EAC70(v11);
LABEL_4:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)v11;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = v14;
  sub_10001BC14(v15, v13);
LABEL_6:
  v16 = *(_QWORD *)(v11 + 16);
  v17 = *(_QWORD *)(v11 + 24);
  *(_OWORD *)(v11 + 16) = *((_OWORD *)v12 + 1);
  sub_10001BC14(v16, v17);
  v18 = v12 + 32;
  v19 = *(_QWORD *)(v11 + 40);
  if (v19 >> 60 != 15)
  {
    v20 = *((_QWORD *)v12 + 5);
    if (v20 >> 60 != 15)
    {
      v21 = *(_QWORD *)(v11 + 32);
      *(_QWORD *)(v11 + 32) = *v18;
      *(_QWORD *)(v11 + 40) = v20;
      sub_10001BC14(v21, v19);
      return a1;
    }
    sub_1002EEEE0(v11 + 32);
  }
  *(_OWORD *)(v11 + 32) = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B98AA4);
}

uint64_t sub_100B98AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 24) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimeBasedKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B98B44);
}

uint64_t sub_100B98B44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  v10 = a1 + *(int *)(a4 + 24);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_100B98BD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "0";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100B98C50()
{
  return 0;
}

uint64_t sub_100B98C5C@<X0>(uint64_t a1@<X8>)
{
  return sub_100B98C74((uint64_t (*)(_QWORD))&type metadata accessor for UUID, a1);
}

uint64_t sub_100B98C68@<X0>(uint64_t a1@<X8>)
{
  return sub_100B98C74((uint64_t (*)(_QWORD))&type metadata accessor for Date, a1);
}

uint64_t sub_100B98C74@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

double sub_100B98CB0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100B98CC8()
{
  return 0x100000000;
}

uint64_t sub_100B98CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EAC58, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&unk_100E1DB38);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100B98D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EAC58, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&unk_100E1DB38);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100B98DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EAC70, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DC90);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100B98E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EAC70, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DC90);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100B98E94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v6 = sub_10001A9A8(&qword_1010EC648);
  v3[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[16] = v7;
  v3[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    ObjectType = swift_getObjectType(a1);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a2);
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v3[18] = v9;
  v3[19] = v11;
  return swift_task_switch(sub_100B98F38, v9, v11);
}

uint64_t sub_100B98F38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v0[20] = AsyncCompactMapSequence.Iterator.baseIterator.modify(v0 + 2, v0[15]);
  v1 = sub_10001A9A8(&qword_101115FB0);
  v2 = sub_1000193A4((unint64_t *)&unk_101117060, &qword_101115FB0, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[21] = v3;
  *v3 = v0;
  v3[1] = sub_100B98FF4;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 8, v0[12], v0[13], v0 + 10, v1, v2);
}

uint64_t sub_100B98FF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 168));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 144);
    v4 = *(_QWORD *)(v2 + 152);
    v5 = sub_100B992BC;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v2 + 160))(v2 + 16, 0);
    v3 = *(_QWORD *)(v2 + 144);
    v4 = *(_QWORD *)(v2 + 152);
    v5 = sub_100B99064;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_100B99064()
{
  uint64_t v0;
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 255)
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 64);
    *(_BYTE *)(v0 + 56) = v1 & 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v5, v6);
    v7 = (int *)AsyncCompactMapSequence.Iterator.transform.getter(v6);
    *(_QWORD *)(v0 + 176) = v8;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
    v9 = (_QWORD *)swift_task_alloc(v7[1]);
    *(_QWORD *)(v0 + 184) = v9;
    *v9 = v0;
    v9[1] = sub_100B9916C;
    return v10(v0 + 88, v0 + 48);
  }
}

uint64_t sub_100B9916C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  swift_release();
  swift_release();
  return swift_task_switch(sub_100B991C8, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_100B991C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 88);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {
    *(_QWORD *)(v0 + 160) = AsyncCompactMapSequence.Iterator.baseIterator.modify(v0 + 16, *(_QWORD *)(v0 + 120));
    v3 = sub_10001A9A8(&qword_101115FB0);
    v4 = sub_1000193A4((unint64_t *)&unk_101117060, &qword_101115FB0, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>.Iterator);
    v5 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 168) = v5;
    *v5 = v0;
    v5[1] = sub_100B98FF4;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 64, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v0 + 80, v3, v4);
  }
}

uint64_t sub_100B992BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, uint64_t))(v0 + 160))(v0 + 16, 1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B99304()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7E40);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7E40);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x646E694654427073, 0xEB00000000676E69);
}

uint64_t type metadata accessor for BTFindingTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd19BTFindingTrampoline);
}

Swift::Int sub_100B99860()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000002ELL, 0x8000000100EC3A70);
  return Hasher._finalize()();
}

uint64_t sub_100B998B4(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000002ELL, 0x8000000100EC3A70);
}

Swift::Int sub_100B998D0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000002ELL, 0x8000000100EC3A70);
  return Hasher._finalize()();
}

uint64_t sub_100B99920@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104BF30, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100B99970(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x8000000100EC3A70;
}

void sub_100B99990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7E40);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "All sessions went away.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void (**)(uint64_t))(v1 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(v1 + 48);
    v9 = swift_retain();
    v7(v9);
    sub_10001D8A8((uint64_t)v7, v8);
  }
}

uint64_t sub_100B99A90()
{
  uint64_t v0;

  return sub_10001D8A8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100B99A98()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_10001D8A8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for BTFindingServiceConnections(uint64_t a1)
{
  uint64_t result;

  result = qword_101116BD0;
  if (!qword_101116BD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTFindingServiceConnections);
  return result;
}

uint64_t sub_100B99B10(uint64_t a1)
{
  void *v2;

  v2 = &unk_100E62738;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 216);
}

uint64_t sub_100B99B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_101116AE0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101116AE0);
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7E40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

BOOL sub_100B99BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18[2];
  _BYTE v19[24];

  v1 = *(_QWORD *)(v0 + 160);
  swift_beginAccess(v1 + 32, v19, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
  v3 = sub_1000FC7A4(v2);
  v4 = swift_bridgeObjectRelease();
  if (v3)
  {
    v5 = (void *)XPCSession.connection.getter(v4);
    v6 = NSXPCConnection.codeSigningIdentity.getter();
    v8 = v7;

    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_101116AE0);
    swift_bridgeObjectRetain_n(v8, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v18[0] = v14;
      *(_DWORD *)v13 = 136446210;
      swift_bridgeObjectRetain(v8);
      v17 = sub_100016940(v6, v8, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease_n(v8, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Client: %{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v8, 2);
    }
    if (v6 == 0xD000000000000017 && v8 == 0x8000000100EDC5B0
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, 0xD000000000000017, 0x8000000100EDC5B0, 0) & 1) != 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v15 = sub_100C93200(v6, v8);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

unint64_t sub_100B99EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  _QWORD v16[2];
  unint64_t v17;
  unint64_t v18;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)0xE000000000000000;
  v17 = 0;
  v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(v18);
  v17 = 0xD000000000000013;
  v18 = 0x8000000100EF0730;
  v16[1] = a2;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x7469206B726F5720;
  v11._object = (void *)0xEC000000203A6D65;
  String.append(_:)(v11);
  if (a1)
  {
    v12 = WorkItemQueue.WorkItem.id.getter();
    a1 = UUID.uuidString.getter(v12);
    v8 = v13;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v14._countAndFlagsBits = a1;
  v14._object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v8);
  return v17;
}

unint64_t sub_100B99FFC()
{
  uint64_t *v0;

  return sub_100B99EB0(*v0, v0[1]);
}

uint64_t sub_100B9A004(unint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  unint64_t v6;
  _QWORD v7[2];

  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      strcpy((char *)v7, ".response(");
      BYTE3(v7[1]) = 0;
      HIDWORD(v7[1]) = -369098752;
      __asm { BR              X10 }
    }
    __asm { BR              X10 }
  }
  strcpy((char *)v7, ".underlying(");
  BYTE5(v7[1]) = 0;
  HIWORD(v7[1]) = -5120;
  v6 = a1;
  sub_10005856C(a1);
  swift_errorRetain(a1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v3._countAndFlagsBits = String.init<A>(describing:)(&v6, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  sub_100058554(a1);
  return v7[0];
}

void sub_100B9A204()
{
  JUMPOUT(0x100B9A1F0);
}

void sub_100B9A228()
{
  JUMPOUT(0x100B9A1F0);
}

void sub_100B9A2E8()
{
  JUMPOUT(0x100B9A1F0);
}

void sub_100B9A300()
{
  JUMPOUT(0x100B9A314);
}

void sub_100B9A320()
{
  JUMPOUT(0x100B9A1F0);
}

uint64_t sub_100B9A344()
{
  unint64_t *v0;

  return sub_100B9A004(*v0);
}

uint64_t sub_100B9A34C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v2[3] = a1;
  v2[4] = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v5 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[5] = v5;
  v6 = type metadata accessor for UUID(0);
  v7 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[6] = v7;
  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = 0xD000000000000010;
  *(_QWORD *)(v1 + 120) = 0x8000000100E627B0;
  v8 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v1 + 144) = XPCSessionManager.init(name:)(0xD000000000000010, 0x8000000100E627B0);
  *(_QWORD *)(v1 + 152) = 0;
  v9 = type metadata accessor for BTFindingServiceConnections(0);
  v10 = swift_allocObject(v9, 56, 7);
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v1 + 160) = sub_100B1AC90(v10);
  v11 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v11);
  *(_QWORD *)(v1 + 168) = WorkItemQueue.__allocating_init(identifier:)(v7);
  *(_QWORD *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 183) = 0;
  *(_QWORD *)(v1 + 192) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v1 + 200) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v1 + 208) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v1 + 216) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v1 + 128) = a1;
  type metadata accessor for CentralManager(0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101117280);
  v13 = type metadata accessor for CentralManager.Options(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = swift_allocObject(v12, ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ 3 * *(_QWORD *)(v14 + 72), *(unsigned __int8 *)(v14 + 80) | 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E221E0;
  v16 = swift_retain();
  v17 = static CentralManager.Options.allowDuplicates.getter(v16);
  v18 = static CentralManager.Options.enableFindMy.getter(v17);
  static CentralManager.Options.needsRestrictedStateOperation.getter(v18);
  v2[2] = v15;
  v19 = sub_100006C64((unint64_t *)&unk_101116070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options, (uint64_t)&protocol conformance descriptor for CentralManager.Options);
  v20 = sub_10001A9A8((uint64_t *)&unk_101117290);
  v21 = sub_1000193A4((unint64_t *)&unk_101116080, (uint64_t *)&unk_101117290, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v2 + 2, v20, v21, v13, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  v22 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v2[7] = v22;
  *v22 = v2;
  v22[1] = sub_100B9A5E0;
  return CentralManager.__allocating_init(options:)(v5);
}

uint64_t sub_100B9A5E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 56));
  *(_QWORD *)(v3 + 136) = a1;
  return swift_task_switch(sub_100B9A640, v3, 0);
}

uint64_t sub_100B9A640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  swift_release();
  v4 = *(_QWORD *)(v3 + 160);
  v5 = swift_allocObject(&unk_1010B0CA0, 24, 7);
  swift_weakInit(v5 + 16, v3);
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 40) = sub_100BB25DC;
  *(_QWORD *)(v4 + 48) = v5;
  sub_10001D8A8(v6, v7);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100B9A6D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v3);
    static Transaction.asyncTask(name:block:)("StopProcessingBTFindingService", 30, 2, &unk_1011172A8, v3);
    return swift_release_n(v3, 2);
  }
  return result;
}

uint64_t sub_100B9A75C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101116D24);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100B9EAC8();
}

uint64_t sub_100B9A7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  objc_super v40;
  _QWORD v41[5];
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v1 = type metadata accessor for XPCServiceDescription(0);
  v38 = *(_QWORD *)(v1 - 8);
  v39 = v1;
  __chkstk_darwin(v1);
  v36 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MachServiceName(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  MachServiceName.init(_:)(0xD000000000000026, 0x8000000100EF0860);
  v10 = type metadata accessor for BTFindingService();
  v43 = v10;
  v44 = &off_1010B0830;
  v42[0] = v0;
  v11 = (objc_class *)type metadata accessor for BTFindingTrampoline();
  v12 = objc_allocWithZone(v11);
  v13 = sub_10009F5D0((uint64_t)v42, v43);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = v3;
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v18 = *v15;
  v41[3] = v10;
  v41[4] = &off_1010B0830;
  v41[0] = v18;
  sub_100030784((uint64_t)v41, (uint64_t)v12 + OBJC_IVAR____TtC12searchpartyd19BTFindingTrampoline_implementation);
  v40.receiver = v12;
  v40.super_class = v11;
  swift_retain();
  v19 = objc_msgSendSuper2(&v40, "init");
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  v20 = *(void **)(v0 + 152);
  *(_QWORD *)(v0 + 152) = v19;
  v21 = v19;

  v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v37 = v9;
  v22(v7, v9, v17);
  v23 = qword_1010EA358;
  v24 = v21;
  if (v23 != -1)
    swift_once(&qword_1010EA358, sub_100B9AB30);
  v25 = (void *)qword_101116AF8;
  v26 = (void *)objc_opt_self(NSXPCInterface);
  v27 = v25;
  v28 = objc_msgSend(v26, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPBTFindingXPCClientProtocol);
  swift_retain();
  v29 = v36;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v7, 0, v24, v27, v28, sub_100BB0E3C, v0, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v29);
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B7E40);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "BTFindingService: Successfully registered XPC services.", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v38 + 8))(v29, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v37, v17);
}

id sub_100B9AB30()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPBTFindingXPCProtocol);
  qword_101116AF8 = (uint64_t)result;
  return result;
}

uint64_t sub_100B9AB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B9ABE0, v2, 0);
}

uint64_t sub_100B9ABE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  v3 = *(_QWORD *)(v1 + 72);
  v2 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 64);
  v6 = *(void **)(v1 + 40);
  XPCSession.identifier.getter(a1);
  swift_beginAccess(v5 + 208, v1 + 16, 33, 0);
  v7 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + 208));
  v10 = *(_QWORD *)(v5 + 208);
  *(_QWORD *)(v5 + 208) = 0x8000000000000000;
  sub_10010EA10((uint64_t)v7, v2, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v5 + 208) = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_endAccess(v1 + 16);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100B9ACB0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _BYTE v34[24];
  _QWORD v35[5];

  if (a1)
  {
    v3 = *(_QWORD *)(v1 + 160);
    swift_beginAccess(v3 + 32, v34, 0, 0);
    v4 = *(_QWORD *)(v3 + 32);
    if ((v4 & 0xC000000000000001) != 0)
    {
      if (v4 < 0)
        v5 = *(_QWORD *)(v3 + 32);
      else
        v5 = v4 & 0xFFFFFFFFFFFFFF8;
      v6 = a1;
      swift_bridgeObjectRetain(v4);
      v7 = __CocoaSet.makeIterator()(v5);
      v8 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
      v9 = sub_1000193A4(&qword_101117070, (uint64_t *)&unk_1010F49A0, (const char *)&protocol conformance descriptor for XPCSession<A>);
      v10 = Set.Iterator.init(_cocoa:)(v35, v7, v8, v9);
      v4 = v35[0];
      v31 = v35[1];
      v11 = v35[2];
      v12 = v35[3];
      v13 = v35[4];
    }
    else
    {
      v14 = -1 << *(_BYTE *)(v4 + 32);
      v31 = v4 + 56;
      v11 = ~v14;
      v15 = -v14;
      if (v15 < 64)
        v16 = ~(-1 << v15);
      else
        v16 = -1;
      v13 = v16 & *(_QWORD *)(v4 + 56);
      v17 = a1;
      swift_bridgeObjectRetain(v4);
      v12 = 0;
    }
    v18 = (unint64_t)(v11 + 64) >> 6;
    while (1)
    {
      if (v4 < 0)
      {
        v22 = __CocoaSet.Iterator.next()(v10);
        if (!v22)
          goto LABEL_37;
        v23 = v22;
        v32 = v22;
        swift_unknownObjectRetain(v22);
        v24 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
        swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
        v25 = v33;
        swift_unknownObjectRelease(v23);
        v21 = v12;
        v19 = v13;
        if (!v25)
          goto LABEL_37;
      }
      else
      {
        if (v13)
        {
          v19 = (v13 - 1) & v13;
          v20 = __clz(__rbit64(v13)) | (v12 << 6);
          v21 = v12;
        }
        else
        {
          v26 = v12 + 1;
          if (__OFADD__(v12, 1))
          {
            __break(1u);
            return;
          }
          if (v26 >= v18)
            goto LABEL_37;
          v27 = *(_QWORD *)(v31 + 8 * v26);
          v21 = v12 + 1;
          if (!v27)
          {
            v21 = v12 + 2;
            if (v12 + 2 >= v18)
              goto LABEL_37;
            v27 = *(_QWORD *)(v31 + 8 * v21);
            if (!v27)
            {
              v21 = v12 + 3;
              if (v12 + 3 >= v18)
                goto LABEL_37;
              v27 = *(_QWORD *)(v31 + 8 * v21);
              if (!v27)
              {
                v21 = v12 + 4;
                if (v12 + 4 >= v18)
                  goto LABEL_37;
                v27 = *(_QWORD *)(v31 + 8 * v21);
                if (!v27)
                {
                  v28 = v12 + 5;
                  while (v18 != v28)
                  {
                    v27 = *(_QWORD *)(v31 + 8 * v28++);
                    if (v27)
                    {
                      v21 = v28 - 1;
                      goto LABEL_33;
                    }
                  }
LABEL_37:
                  sub_10007CC38(v4);

                  return;
                }
              }
            }
          }
LABEL_33:
          v19 = (v27 - 1) & v27;
          v20 = __clz(__rbit64(v27)) + (v21 << 6);
        }
        v29 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v20);
        swift_retain();
        if (!v29)
          goto LABEL_37;
      }
      XPCSession.proxy.getter(&v33);
      v30 = v33;
      if (v33)
      {
        objc_msgSend(v33, "updatedBTRSSIResult:", a1);
        swift_release();
        v10 = (_QWORD *)swift_unknownObjectRelease(v30);
      }
      else
      {
        v10 = (_QWORD *)swift_release();
      }
      v12 = v21;
      v13 = v19;
    }
  }
}

void sub_100B9AF8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  id v35;
  id v36;
  _QWORD v37[2];
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  _BYTE v46[24];
  _BYTE v47[24];
  _QWORD v48[6];

  v38 = a1;
  v2 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 160);
  swift_beginAccess(v5 + 32, v47, 0, 0);
  v6 = *(_QWORD *)(v5 + 32);
  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *(_QWORD *)(v5 + 32);
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
    v10 = sub_1000193A4(&qword_101117070, (uint64_t *)&unk_1010F49A0, (const char *)&protocol conformance descriptor for XPCSession<A>);
    v11 = Set.Iterator.init(_cocoa:)(v48, v8, v9, v10);
    v6 = v48[0];
    v42 = v48[1];
    v13 = v48[2];
    v12 = v48[3];
    v14 = v48[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(v6 + 32);
    v16 = *(_QWORD *)(v6 + 56);
    v42 = v6 + 56;
    v13 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & v16;
    swift_bridgeObjectRetain(v6);
    v12 = 0;
  }
  v37[1] = v13;
  v40 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  v41 = (unint64_t)(v13 + 64) >> 6;
  v19 = (_QWORD *)(v1 + 208);
  v39 = (char *)&type metadata for Swift.AnyObject + 8;
  while (v6 < 0)
  {
    v23 = __CocoaSet.Iterator.next()(v11);
    if (!v23)
      goto LABEL_43;
    v24 = v23;
    v44 = v23;
    swift_unknownObjectRetain(v23);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
    swift_dynamicCast(&v45, &v44, v39, v25, 7);
    v26 = v45;
    v27 = swift_unknownObjectRelease(v24);
    v22 = v12;
    v20 = v14;
    if (!v26)
      goto LABEL_43;
LABEL_36:
    XPCSession.identifier.getter(v27);
    swift_beginAccess(v19, v46, 0, 0);
    v32 = *v19;
    if (!*(_QWORD *)(*v19 + 16))
      goto LABEL_12;
    swift_bridgeObjectRetain(*v19);
    v33 = sub_100003FB0((uint64_t)v4);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v2);
LABEL_13:
      v11 = (_QWORD *)swift_release();
      goto LABEL_14;
    }
    v35 = *(id *)(*(_QWORD *)(v32 + 56) + 8 * v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v2);
    if ((objc_msgSend(v35, "optInRawRSSIMeasurement") & 1) == 0)
    {

      goto LABEL_13;
    }
    XPCSession.proxy.getter(&v45);
    v36 = v45;
    if (v45)
    {
      objc_msgSend(v45, "updatedBTRSSIMeasurement:", v38);
      swift_release();

      v11 = (_QWORD *)swift_unknownObjectRelease(v36);
    }
    else
    {
      swift_release();

    }
LABEL_14:
    v12 = v22;
    v14 = v20;
  }
  if (v14)
  {
    v20 = (v14 - 1) & v14;
    v21 = __clz(__rbit64(v14)) | (v12 << 6);
    v22 = v12;
LABEL_35:
    v31 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v21);
    v27 = swift_retain();
    if (!v31)
      goto LABEL_43;
    goto LABEL_36;
  }
  v28 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v28 >= v41)
      goto LABEL_43;
    v29 = *(_QWORD *)(v42 + 8 * v28);
    v22 = v12 + 1;
    if (!v29)
    {
      v22 = v12 + 2;
      if (v12 + 2 >= v41)
        goto LABEL_43;
      v29 = *(_QWORD *)(v42 + 8 * v22);
      if (!v29)
      {
        v22 = v12 + 3;
        if (v12 + 3 >= v41)
          goto LABEL_43;
        v29 = *(_QWORD *)(v42 + 8 * v22);
        if (!v29)
        {
          v22 = v12 + 4;
          if (v12 + 4 >= v41)
            goto LABEL_43;
          v29 = *(_QWORD *)(v42 + 8 * v22);
          if (!v29)
          {
            v30 = v12 + 5;
            while (v41 != v30)
            {
              v29 = *(_QWORD *)(v42 + 8 * v30++);
              if (v29)
              {
                v22 = v30 - 1;
                goto LABEL_34;
              }
            }
LABEL_43:
            sub_10007CC38(v6);
            return;
          }
        }
      }
    }
LABEL_34:
    v20 = (v29 - 1) & v29;
    v21 = __clz(__rbit64(v29)) + (v22 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_100B9B370(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[27] = a1;
  v2[28] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[29] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[30] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[31] = swift_task_alloc(v5);
  v2[32] = swift_task_alloc(v5);
  v2[33] = swift_task_alloc(v5);
  return swift_task_switch(sub_100B9B3EC, v1, 0);
}

uint64_t sub_100B9B3EC()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (__cdecl *v25)();
  uint64_t v26;

  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0[27];
  v3 = v0[33];
  v5 = v0[29];
  v4 = v0[30];
  v6 = type metadata accessor for Logger(0);
  v0[34] = sub_10001A9E8(v6, (uint64_t)qword_1011B7E40);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[35] = v7;
  v8 = v7(v3, v2, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[33];
  v13 = v0[29];
  v14 = v0[30];
  if (v11)
  {
    v15 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v26 = v24;
    *(_DWORD *)v15 = 141558275;
    v0[25] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v0[26] = sub_100016940(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Read TX Power for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v20 = v15;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v0[33], v0[29]);
  }

  v0[36] = v19;
  v21 = qword_1010EA5B0;
  swift_retain();
  if (v21 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 12, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v25 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCB8 + dword_1010EBCB8);
    v23 = (_QWORD *)swift_task_alloc(unk_1010EBCBC);
    v0[37] = v23;
    *v23 = v0;
    v23[1] = sub_100B9B6F4;
    return v25();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B9B6F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B9B754, v3, 0);
}

uint64_t sub_100B9B754()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t, uint64_t, __n128);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 304))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1010FC6CC);
    *(_QWORD *)(v0 + 312) = v2;
    *v2 = v0;
    v2[1] = sub_100B9BB78;
    return sub_100451F10(*(_QWORD *)(v0 + 216));
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing OwnerCommandManager to read TX Power!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v9 = v8;
    *(_QWORD *)(v0 + 168) = 4;
    v10 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v11 = sub_100006C64(&qword_101116FB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
    v12 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 176), v0 + 168, v10, v9, v11);
    v13 = *(_QWORD *)(v0 + 176);
    swift_willThrow(v12);
    swift_errorRetain(v13);
    v14 = swift_errorRetain(v13);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v37 = v18;
      *(_DWORD *)v17 = 136446210;
      *(_QWORD *)(v0 + 184) = v13;
      swift_errorRetain(v13);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v20 = String.init<A>(describing:)(v0 + 184, v19);
      *(_QWORD *)(v0 + 192) = sub_100016940(v20, v21, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to fetch TX Power due to %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      swift_errorRelease(v13);

    }
    v22 = (_QWORD *)(*(_QWORD *)(v0 + 224) + 200);
    v23 = swift_beginAccess(v22, v0 + 144, 0, 0);
    if (!*(_QWORD *)(*v22 + 16)
      || (v24 = *(_QWORD *)(v0 + 216),
          swift_bridgeObjectRetain(*v22),
          sub_100003FB0(v24),
          LOBYTE(v24) = v25,
          swift_bridgeObjectRelease(),
          (v24 & 1) == 0))
    {
      v27 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 280);
      v26 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v28 = *(char **)(v0 + 248);
      v29 = *(_QWORD *)(v0 + 256);
      v30 = *(_QWORD *)(v0 + 232);
      v31 = *(_QWORD *)(v0 + 216);
      v27(v29, v31, v30, v23);
      ((void (*)(char *, uint64_t, uint64_t))v27)(v28, v31, v30);
      v32 = type metadata accessor for BTRSSIFilter(0);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      v33 = sub_1003D9C30(v28, 0, 0);
      swift_beginAccess(v22, v0 + 120, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v22);
      v37 = *v22;
      *v22 = 0x8000000000000000;
      sub_10010EA2C(v33, v29, isUniquelyReferenced_nonNull_native);
      *v22 = v37;
      swift_bridgeObjectRelease();
      v26(v29, v30);
      swift_endAccess(v0 + 120);
    }
    v35 = *(_QWORD *)(v0 + 256);
    v36 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B9BB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 312);
  *(_QWORD *)(*v2 + 320) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 224);
  if (v1)
  {
    v7 = sub_100B9BD78;
  }
  else
  {
    *(_QWORD *)(v4 + 328) = a1;
    v7 = sub_100B9BBEC;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100B9BBEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  __n128 v3;
  uint64_t v4;
  char v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t, uint64_t, __n128);
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  swift_release();
  v1 = *(_QWORD *)(v0 + 328);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 224) + 200);
  v3 = swift_beginAccess(v2, v0 + 144, 0, 0);
  if (!*(_QWORD *)(*v2 + 16)
    || (v4 = *(_QWORD *)(v0 + 216),
        swift_bridgeObjectRetain(*v2),
        sub_100003FB0(v4),
        LOBYTE(v4) = v5,
        swift_bridgeObjectRelease(),
        (v4 & 1) == 0))
  {
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 280);
    v6 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v8 = *(char **)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 216);
    v7(v9, v11, v10, v3);
    ((void (*)(char *, uint64_t, uint64_t))v7)(v8, v11, v10);
    v12 = type metadata accessor for BTRSSIFilter(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v13 = sub_1003D9C30(v8, v1, 0);
    swift_beginAccess(v2, v0 + 120, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v18 = *v2;
    *v2 = 0x8000000000000000;
    sub_10010EA2C(v13, v9, isUniquelyReferenced_nonNull_native);
    *v2 = v18;
    swift_bridgeObjectRelease();
    v6(v9, v10);
    swift_endAccess(v0 + 120);
  }
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B9BD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  __n128 v11;
  uint64_t v12;
  char v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t, __n128);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  swift_release();
  v1 = *(_QWORD *)(v0 + 320);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v26 = v6;
    *(_QWORD *)(v0 + 184) = v1;
    swift_errorRetain(v1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(v0 + 184, v7);
    *(_QWORD *)(v0 + 192) = sub_100016940(v8, v9, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch TX Power due to %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = (_QWORD *)(*(_QWORD *)(v0 + 224) + 200);
  v11 = swift_beginAccess(v10, v0 + 144, 0, 0);
  if (!*(_QWORD *)(*v10 + 16)
    || (v12 = *(_QWORD *)(v0 + 216),
        swift_bridgeObjectRetain(*v10),
        sub_100003FB0(v12),
        LOBYTE(v12) = v13,
        swift_bridgeObjectRelease(),
        (v12 & 1) == 0))
  {
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 280);
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    v16 = *(char **)(v0 + 248);
    v17 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 216);
    v15(v17, v19, v18, v11);
    ((void (*)(char *, uint64_t, uint64_t))v15)(v16, v19, v18);
    v20 = type metadata accessor for BTRSSIFilter(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v21 = sub_1003D9C30(v16, 0, 0);
    swift_beginAccess(v10, v0 + 120, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    v26 = *v10;
    *v10 = 0x8000000000000000;
    sub_10010EA2C(v21, v17, isUniquelyReferenced_nonNull_native);
    *v10 = v26;
    swift_bridgeObjectRelease();
    v14(v17, v18);
    swift_endAccess(v0 + 120);
  }
  v23 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B9C064(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[11] = v5;
  v2[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B9C0E8, v1, 0);
}

uint64_t sub_100B9C0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  v1 = v0 + 16;
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7E40);
  v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v41(v4, v2, v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 80);
  if (v10)
  {
    v40 = *(_QWORD *)(v0 + 88);
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v42 = v14;
    *(_DWORD *)v13 = 141558275;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 48) = sub_100016940(v16, v17, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "startScanning for beacon %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v18 = v13;
    v1 = v0 + 16;
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  }

  v19 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 56);
  v22 = *(_QWORD *)(v0 + 64);
  v23 = sub_10001A9A8(&qword_1011003C0);
  v24 = *(unsigned __int8 *)(v20 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = swift_allocObject(v23, v25 + *(_QWORD *)(v20 + 72), v24 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
  v27 = v26 + v25;
  v41(v27, v21, v19);
  swift_beginAccess(v22 + 192, v1, 33, 0);
  sub_100BD1FDC(v26);
  swift_setDeallocating(v26);
  swift_arrayDestroy(v27, 1, v19);
  swift_deallocClassInstance(v26, 32, 7);
  v28 = swift_endAccess(v1);
  if (*(_QWORD *)(v22 + 176))
  {
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Existing scan in progress. Not starting a new one.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

  }
  else
  {
    v32 = *(_QWORD *)(v0 + 64);
    v33 = *(_QWORD *)(v0 + 72);
    v34 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
    v36 = sub_100006C64((unint64_t *)&unk_101116FA0, v35, (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService, (uint64_t)&unk_100E62870);
    v37 = (_QWORD *)swift_allocObject(&unk_1010B0980, 40, 7);
    v37[2] = v32;
    v37[3] = v36;
    v37[4] = v32;
    swift_retain_n(v32, 2);
    *(_QWORD *)(v22 + 176) = sub_100626BC4(v33, (uint64_t)&unk_101117018, (uint64_t)v37);
    swift_release();
  }
  v38 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B9C4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4[21] = a4;
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v4[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[23] = v7;
  v4[24] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v4[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[28] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v12);
  v4[30] = swift_task_alloc(v12);
  v4[31] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101115FA0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[32] = swift_task_alloc(v13);
  v4[33] = swift_task_alloc(v13);
  v14 = sub_10001A9A8(&qword_1010EF330);
  v4[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DiscoveredObject(0);
  v4[35] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[36] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v17);
  v4[38] = swift_task_alloc(v17);
  v4[39] = swift_task_alloc(v17);
  v18 = sub_10001A9A8(&qword_101115FB0);
  v4[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010EC648);
  v4[41] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[42] = v20;
  v4[43] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_101117020);
  v4[44] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[45] = v22;
  v4[46] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ScanMode(0);
  v4[47] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v4[48] = v24;
  v4[49] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_101115F40);
  v4[50] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v4[51] = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[52] = swift_task_alloc(v27);
  v4[53] = swift_task_alloc(v27);
  return swift_task_switch(sub_100B9C764, a4, 0);
}

uint64_t sub_100B9C764()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v0[54] = *(_QWORD *)(v0[21] + 136);
  v1 = sub_10001A9A8((uint64_t *)&unk_101117030);
  v2 = type metadata accessor for CentralManager.State(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  v0[55] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  v8 = v7 + v6;
  v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104);
  v9(v8, enum case for CentralManager.State.poweredOn(_:), v2);
  v9(v8 + v4, enum case for CentralManager.State.restricted(_:), v2);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(states:)[1]);
  v0[56] = v10;
  v11 = type metadata accessor for CentralManager(0);
  v12 = sub_100006C64(&qword_1010EC468, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v10 = v0;
  v10[1] = sub_100B9C890;
  return CentralManagerProtocol.await(states:)(v7, v11, v12);
}

uint64_t sub_100B9C890()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 168);
    v5 = sub_100B9E0FC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 168);
    swift_bridgeObjectRelease();
    v5 = sub_100B9C904;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B9C904()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;

  v2 = v0[48];
  v1 = v0[49];
  v3 = v0[47];
  v4 = enum case for ScanUseCase.btFinding(_:);
  v5 = type metadata accessor for ScanUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v1, v4, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ScanMode.useCase(_:), v3);
  v8 = (char *)&async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:)
     + async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:);
  v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:)
                                  + 1));
  v0[58] = v6;
  *v6 = v0;
  v6[1] = sub_100B9C9D4;
  return ((uint64_t (*)(_QWORD, _QWORD, unint64_t, _QWORD))v8)(v0[53], v0[49], 0xD02AB486CEDC0000, 0);
}

uint64_t sub_100B9C9D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 464);
  v5 = *(_QWORD *)(*v1 + 384);
  v4 = *(_QWORD *)(*v1 + 392);
  v6 = *(_QWORD *)(*v1 + 376);
  *(_QWORD *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_100B9E22C;
  else
    v7 = sub_100B9CA60;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 168), 0);
}

uint64_t sub_100B9CA60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t);

  v1 = v0[52];
  v2 = v0[50];
  v3 = v0[44];
  v4 = v0[40];
  v5 = v0[21];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[51] + 16))(v1, v0[53], v2);
  v6 = type metadata accessor for Peripheral(0);
  v0[60] = v6;
  v7 = sub_1000193A4(&qword_1010EC668, &qword_101115F40, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  AsyncCompactMapSequence.init(_:transform:)(v1, &unk_101117040, 0, v2, v6, v7);
  AsyncCompactMapSequence.base.getter(v3);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v2, v7);
  v8 = AsyncCompactMapSequence.transform.getter(v3);
  AsyncCompactMapSequence.Iterator.init(_:transform:)(v4, v8, v9, v2, v6, v7);
  v11 = sub_100006C64((unint64_t *)&unk_101116FA0, v10, (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService, (uint64_t)&unk_100E62870);
  v0[61] = v11;
  swift_beginAccess(v5 + 192, v0 + 2, 0, 0);
  swift_beginAccess(v5 + 200, v0 + 5, 0, 0);
  v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v12 = (_QWORD *)swift_task_alloc(unk_101117054);
  v0[62] = v12;
  *v12 = v0;
  v12[1] = sub_100B9CC18;
  return v14(v5, v11);
}

uint64_t sub_100B9CC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v2;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v2 + 496));
  if (v1)
  {
    v4[81] = v1;
    v5 = v4[21];
    v6 = sub_100B9E354;
  }
  else
  {
    v5 = v4[21];
    v4[63] = a1;
    v6 = sub_100B9CC90;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100B9CC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (*(_QWORD *)(v0 + 504))
  {
    v1 = *(_QWORD *)(v0 + 480);
    v2 = sub_100006C64(&qword_10110F938, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
    *(_QWORD *)(v0 + 512) = v3;
    *(_QWORD *)(v0 + 520) = v4;
    return swift_task_switch(sub_100B9CF14, v3, v4);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
    if (qword_1010EA348 != -1)
      swift_once(&qword_1010EA348, sub_100B99304);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7E40);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done scanning", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 400);
    v14 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 392);
    v16 = *(_QWORD *)(v0 + 368);
    v17 = *(_QWORD *)(v0 + 344);
    v19 = *(_QWORD *)(v0 + 312);
    v18 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 296);
    v22 = *(_QWORD *)(v0 + 272);
    v23 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 248);
    v26 = *(_QWORD *)(v0 + 240);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 200);
    v30 = *(_QWORD *)(v0 + 192);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 360) + 8))(v16, *(_QWORD *)(v0 + 352));
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B9CF14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 528) = dispatch thunk of Peripheral.advertisementData.getter();
  return swift_task_switch(sub_100B9CF58, v1, 0);
}

uint64_t sub_100B9CF58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;

  v1 = v0[66];
  if (v1)
  {
    sub_10047C2A8(v1);
    v0[67] = v2;
    return swift_task_switch(sub_100B9D1FC, v0[64], v0[65]);
  }
  else
  {
    if (qword_1010EA348 != -1)
      swift_once(&qword_1010EA348, sub_100B99304);
    v4 = v0[63];
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7E40);
    v6 = swift_retain_n(v4, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = v0[63];
    if (v9)
    {
      v11 = v0[24];
      v21 = v0[23];
      v12 = v0[22];
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v24 = v22;
      *(_DWORD *)v13 = 136446210;
      Peripheral.id.getter(v22);
      v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v11, v12);
      v0[15] = sub_100016940(v15, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v13 + 4, v13 + 12);
      swift_release_n(v10, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing advertisementData for %{public}s!", v13, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v13, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n(v10, 3);
    }
    v18 = v0[61];
    v19 = v0[21];
    v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
    v20 = (_QWORD *)swift_task_alloc(unk_101117054);
    v0[80] = v20;
    *v20 = v0;
    v20[1] = sub_100B9E084;
    return v23(v19, v18);
  }
}

uint64_t sub_100B9D1FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 544) = dispatch thunk of Peripheral.rssi.getter();
  *(_BYTE *)(v0 + 660) = v2;
  return swift_task_switch(sub_100B9D244, v1, 0);
}

uint64_t sub_100B9D244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;

  if ((*(_BYTE *)(v0 + 660) & 1) != 0)
    v1 = 0;
  else
    v1 = *(_QWORD *)(v0 + 544);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once(&qword_1010EA348, sub_100B99304);
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 272);
  sub_1001B28B0(*(_QWORD *)(v0 + 536), v1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
  {
    v25 = *(_QWORD *)(v0 + 312);
    v26 = *(_QWORD *)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease();
    sub_1000126EC(v26, v25, type metadata accessor for DiscoveredObject);
    v28 = (uint64_t *)(v25 + *(int *)(v27 + 36));
    v29 = *v28;
    *(_QWORD *)(v0 + 552) = *v28;
    v30 = v28[1];
    *(_QWORD *)(v0 + 560) = v30;
    sub_10012C644(v29, v30);
    v31 = (_QWORD *)swift_task_alloc(dword_101116D34);
    *(_QWORD *)(v0 + 568) = v31;
    *v31 = v0;
    v31[1] = sub_100B9D65C;
    return sub_100BA18F0(*(_QWORD *)(v0 + 264), v29, v30);
  }
  sub_100004048(*(_QWORD *)(v0 + 272), &qword_1010EF330);
  if (qword_1010EA348 != -1)
    goto LABEL_15;
LABEL_8:
  v5 = *(_QWORD *)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 504);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7E40);
  swift_retain_n(v6, 2);
  swift_bridgeObjectRetain(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 528);
  v13 = *(_QWORD *)(v0 + 504);
  if (v11)
  {
    v14 = *(_QWORD *)(v0 + 192);
    v36 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 176);
    v16 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v40 = v38;
    *(_DWORD *)v16 = 136446466;
    type = v10;
    Peripheral.id.getter(v38);
    v17 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v15);
    *(_QWORD *)(v0 + 128) = sub_100016940(v18, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 4, v16 + 12);
    swift_release_n(v13, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain(v12);
    v21 = sub_10001A9A8(&qword_101103A80);
    v22 = Dictionary.description.getter(v12, &type metadata for String, v21, &protocol witness table for String);
    v24 = v23;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 136) = sub_100016940(v22, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Could not parse advertisementData for %{public}s: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v16, -1, -1);
    swift_release();

  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 2);
    swift_release_n(v13, 3);
  }
  v33 = *(_QWORD *)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 168);
  v39 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v35 = (_QWORD *)swift_task_alloc(unk_101117054);
  *(_QWORD *)(v0 + 640) = v35;
  *v35 = v0;
  v35[1] = sub_100B9E084;
  return v39(v34, v33);
}

uint64_t sub_100B9D65C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 568);
  *(_QWORD *)(*(_QWORD *)v1 + 576) = v0;
  swift_task_dealloc(v3);
  v4 = v2[70];
  v5 = v2[69];
  v6 = v2[21];
  sub_10012C494(v5, v4);
  if (v0)
    v7 = sub_100B9E624;
  else
    v7 = sub_100B9D6D0;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100B9D6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  Class isa;
  Class v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *log;
  uint64_t (*type)(uint64_t, uint64_t);
  os_log_type_t typea;
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 256);
  sub_10000F9B8(*(_QWORD *)(v0 + 264), v1, (uint64_t *)&unk_101115FA0);
  v2 = type metadata accessor for BeaconDetails(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 208);
  if (v3 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 256), (uint64_t *)&unk_101115FA0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v5);
LABEL_4:
    v10 = *(_QWORD *)(v0 + 312);
    v11 = *(_QWORD *)(v0 + 264);
    v12 = *(_QWORD *)(v0 + 208);
    swift_release();
    sub_100004048(v11, (uint64_t *)&unk_101115FA0);
    sub_1000126B0(v10, type metadata accessor for DiscoveredObject);
    sub_100004048(v12, &qword_1010ED860);
LABEL_5:
    v13 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 168);
    type = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
    v15 = (_QWORD *)swift_task_alloc(unk_101117054);
    *(_QWORD *)(v0 + 640) = v15;
    *v15 = v0;
    v15[1] = sub_100B9E084;
    return type(v14, v13);
  }
  v8 = *(_QWORD *)(v0 + 200);
  sub_10005972C(*(_QWORD *)(v0 + 256), v8, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_1000126B0(v4, type metadata accessor for BeaconDetails);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 584) = v9;
  v9(v7, v8, v5);
  sub_1000126B0(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
    goto LABEL_4;
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 32))(v18, *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  v19 = *(_QWORD *)(v17 + 192);
  swift_bridgeObjectRetain(v19);
  LOBYTE(v18) = sub_100A07660(v18, v19);
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    v40 = *(_QWORD *)(v0 + 224);
    swift_release();
    v41 = *(void (**)(_QWORD, _QWORD))(v40 + 8);
    v42 = *(_QWORD *)(v0 + 312);
    v43 = *(_QWORD *)(v0 + 264);
    v41(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
    sub_100004048(v43, (uint64_t *)&unk_101115FA0);
    sub_1000126B0(v42, type metadata accessor for DiscoveredObject);
    goto LABEL_5;
  }
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v21 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 240);
  v23 = *(_QWORD *)(v0 + 248);
  v25 = *(_QWORD *)(v0 + 216);
  v26 = type metadata accessor for Logger(0);
  sub_10001A9E8(v26, (uint64_t)qword_1011B7E40);
  v9(v24, v23, v25);
  sub_10005972C(v20, v21, type metadata accessor for DiscoveredObject);
  v27 = sub_10005972C(v20, v22, type metadata accessor for DiscoveredObject);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter(v28);
  v30 = os_log_type_enabled(v28, v29);
  v31 = *(_QWORD *)(v0 + 304);
  if (v30)
  {
    v66 = *(_QWORD *)(v0 + 296);
    v65 = *(_QWORD *)(v0 + 280);
    typea = v29;
    v32 = *(_QWORD *)(v0 + 240);
    v64 = *(_QWORD *)(v0 + 224);
    log = v28;
    v33 = *(_QWORD *)(v0 + 216);
    v34 = swift_slowAlloc(28, -1);
    v67 = swift_slowAlloc(32, -1);
    v71 = v67;
    *(_DWORD *)v34 = 136315650;
    v35 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v33, v35);
    *(_QWORD *)(v0 + 152) = sub_100016940(v36, v37, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease();
    v38 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
    v38(v32, v33);
    *(_WORD *)(v34 + 12) = 1024;
    LODWORD(v33) = *(_DWORD *)(v31 + *(int *)(v65 + 60));
    sub_1000126B0(v31, type metadata accessor for DiscoveredObject);
    *(_DWORD *)(v0 + 656) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 660, v34 + 14, v34 + 18);
    *(_WORD *)(v34 + 18) = 2048;
    v39 = *(_QWORD *)(v66 + *(int *)(v65 + 40));
    sub_1000126B0(v66, type metadata accessor for DiscoveredObject);
    *(_QWORD *)(v0 + 160) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v34 + 20, v34 + 28);
    _os_log_impl((void *)&_mh_execute_header, log, typea, "Found matching beacon %s. RSSI: %d. Channel: %ld", (uint8_t *)v34, 0x1Cu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {
    v44 = *(_QWORD *)(v0 + 240);
    v45 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 224);
    sub_1000126B0(*(_QWORD *)(v0 + 296), type metadata accessor for DiscoveredObject);
    sub_1000126B0(v31, type metadata accessor for DiscoveredObject);
    v38 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v38(v44, v45);

  }
  *(_QWORD *)(v0 + 592) = v38;
  v47 = *(_QWORD *)(v0 + 312);
  v48 = *(_QWORD *)(v0 + 280);
  v49 = *(_QWORD *)(v0 + 168);
  v50 = *(_QWORD *)(v47 + *(int *)(v48 + 40));
  v51 = *(int *)(v47 + *(int *)(v48 + 60));
  v52 = objc_allocWithZone((Class)SPBTRSSIMeasurement);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v54 = Date._bridgeToObjectiveC()().super.isa;
  v55 = objc_msgSend(v52, "initWithBeaconIdentifier:timestamp:channel:rssi:", isa, v54, v50, v51);
  *(_QWORD *)(v0 + 600) = v55;

  v56 = *(_QWORD *)(v49 + 200);
  if (*(_QWORD *)(v56 + 16))
  {
    v57 = *(_QWORD *)(v0 + 248);
    swift_bridgeObjectRetain(*(_QWORD *)(v49 + 200));
    v58 = sub_100003FB0(v57);
    if ((v59 & 1) != 0)
    {
      *(_QWORD *)(v0 + 608) = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v58);
      swift_retain();
      swift_bridgeObjectRelease();
      v60 = (_QWORD *)swift_task_alloc(dword_1010FA6A4);
      *(_QWORD *)(v0 + 616) = v60;
      *v60 = v0;
      v60[1] = sub_100B9DD54;
      return sub_1003D9F74((uint64_t)v55);
    }
    swift_bridgeObjectRelease();
  }
  v61 = *(char **)(v0 + 232);
  v9((uint64_t)v61, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
  v62 = type metadata accessor for BTRSSIFilter(0);
  swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  *(_QWORD *)(v0 + 624) = sub_1003D9C30(v61, 0, 0);
  v63 = (_QWORD *)swift_task_alloc(dword_1010FA6A4);
  *(_QWORD *)(v0 + 632) = v63;
  *v63 = v0;
  v63[1] = sub_100B9DE98;
  return sub_1003D9F74((uint64_t)v55);
}

uint64_t sub_100B9DD54(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*v1;
  v2[11] = v1;
  v2[12] = a1;
  v3 = v2[21];
  swift_task_dealloc(v2[77]);
  return swift_task_switch(sub_100B9DDB0, v3, 0);
}

uint64_t sub_100B9DDB0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 96);
  v2 = *(void **)(v0 + 600);
  swift_release();
  sub_100B9AF8C((uint64_t)v2);
  sub_100B9ACB0(v1);
  swift_release();

  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 264);
  (*(void (**)(_QWORD, _QWORD))(v0 + 592))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
  sub_100004048(v4, (uint64_t *)&unk_101115FA0);
  sub_1000126B0(v3, type metadata accessor for DiscoveredObject);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 168);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v7 = (_QWORD *)swift_task_alloc(unk_101117054);
  *(_QWORD *)(v0 + 640) = v7;
  *v7 = v0;
  v7[1] = sub_100B9E084;
  return v9(v6, v5);
}

uint64_t sub_100B9DE98(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*v1;
  v2[13] = v1;
  v2[14] = a1;
  v3 = v2[21];
  swift_task_dealloc(v2[79]);
  return swift_task_switch(sub_100B9DEF4, v3, 0);
}

uint64_t sub_100B9DEF4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 592);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 168);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 584))(v3, *(_QWORD *)(v0 + 248), v4);
  swift_beginAccess(v5 + 200, v0 + 64, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + 200));
  v16 = *(_QWORD *)(v5 + 200);
  *(_QWORD *)(v5 + 200) = 0x8000000000000000;
  sub_10010EA2C(v1, v3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v5 + 200) = v16;
  swift_bridgeObjectRelease();
  v2(v3, v4);
  swift_endAccess(v0 + 64);
  v7 = *(void **)(v0 + 112);
  v8 = *(void **)(v0 + 600);
  swift_release();
  sub_100B9AF8C((uint64_t)v8);
  sub_100B9ACB0(v7);
  swift_release();

  v9 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 264);
  (*(void (**)(_QWORD, _QWORD))(v0 + 592))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 216));
  sub_100004048(v10, (uint64_t *)&unk_101115FA0);
  sub_1000126B0(v9, type metadata accessor for DiscoveredObject);
  v11 = *(_QWORD *)(v0 + 488);
  v12 = *(_QWORD *)(v0 + 168);
  v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v13 = (_QWORD *)swift_task_alloc(unk_101117054);
  *(_QWORD *)(v0 + 640) = v13;
  *v13 = v0;
  v13[1] = sub_100B9E084;
  return v15(v12, v11);
}

uint64_t sub_100B9E084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v2;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v2 + 640));
  if (v1)
  {
    v4[81] = v1;
    v5 = v4[21];
    v6 = sub_100B9E354;
  }
  else
  {
    v5 = v4[21];
    v4[63] = a1;
    v6 = sub_100B9CC90;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100B9E0FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 440));
  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B9E22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B9E354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 648);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7E40);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 144) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during scan: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  swift_errorRelease(v1);
  v10 = *(_QWORD *)(v0 + 416);
  v11 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 248);
  v26 = *(_QWORD *)(v0 + 240);
  v27 = *(_QWORD *)(v0 + 232);
  v28 = *(_QWORD *)(v0 + 208);
  v29 = *(_QWORD *)(v0 + 200);
  v30 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 360) + 8))(v15, *(_QWORD *)(v0 + 352));
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B9E624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 312);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for DiscoveredObject);
  v2 = *(_QWORD *)(v0 + 576);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 328));
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7E40);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    v9 = _convertErrorToNSError(_:)(v2);
    *(_QWORD *)(v0 + 144) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error during scan: %{public}@", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  swift_errorRelease(v2);
  v11 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 368);
  v17 = *(_QWORD *)(v0 + 344);
  v19 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 296);
  v23 = *(_QWORD *)(v0 + 272);
  v24 = *(_QWORD *)(v0 + 264);
  v25 = *(_QWORD *)(v0 + 256);
  v26 = *(_QWORD *)(v0 + 248);
  v27 = *(_QWORD *)(v0 + 240);
  v28 = *(_QWORD *)(v0 + 232);
  v29 = *(_QWORD *)(v0 + 208);
  v30 = *(_QWORD *)(v0 + 200);
  v31 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 360) + 8))(v16, *(_QWORD *)(v0 + 352));
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B9E910(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = v1;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B9E96C, v1, 0);
}

uint64_t sub_100B9E96C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  swift_beginAccess(v2 + 192, v0 + 16, 33, 0);
  sub_100C81CDC(v3, v1);
  sub_100004048(v1, &qword_1010ED860);
  swift_endAccess(v0 + 16);
  swift_beginAccess(v2 + 200, v0 + 40, 33, 0);
  sub_1001047AC(v3);
  swift_endAccess(v0 + 40);
  swift_release();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 192) + 16))
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_101116D24);
    *(_QWORD *)(v0 + 88) = v5;
    *v5 = v0;
    v5[1] = sub_100B9EA78;
    return sub_100B9EAC8();
  }
}

uint64_t sub_100B9EA78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_task_dealloc(*(_QWORD *)(v1 + 80));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100B9EAC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[17] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[18] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[19] = v3;
  v1[20] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_101116FC8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v4);
  v1[22] = swift_task_alloc(v4);
  return swift_task_switch(sub_100B9EB5C, v0, 0);
}

uint64_t sub_100B9EB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = v0 + 40;
  v2 = v0 + 64;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v3 = v0 + 88;
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_101116AE0);
  *(_QWORD *)(v0 + 184) = v5;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v42 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 128) = sub_100016940(0x6164696C61766E69, 0xEC00000029286574, &v42);
    v3 = v0 + 88;
    v2 = v0 + 64;
    v1 = v0 + 40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = *(_QWORD **)(v0 + 136);
  swift_beginAccess(v10 + 24, v0 + 16, 1, 0);
  v10[24] = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess(v10 + 25, v1, 1, 0);
  v10[25] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess(v10 + 26, v2, 1, 0);
  v10[26] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  if (v10[22])
  {
    swift_retain();
    sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    Task.cancel()();
    swift_release();
  }
  v11 = *(_QWORD *)(v0 + 136);
  v10[22] = 0;
  swift_release();
  swift_beginAccess(v11 + 216, v3, 0, 0);
  v12 = *(_QWORD *)(v11 + 216);
  *(_QWORD *)(v0 + 192) = v12;
  v13 = *(_BYTE *)(v12 + 32);
  *(_BYTE *)(v0 + 264) = v13;
  v14 = -1;
  v15 = -1 << v13;
  if (-(-1 << v13) < 64)
    v14 = ~(-1 << -(char)v15);
  v16 = v14 & *(_QWORD *)(v12 + 64);
  v17 = swift_bridgeObjectRetain(v12);
  if (v16)
  {
    v18 = 0;
    v19 = __clz(__rbit64(v16));
    v20 = (v16 - 1) & v16;
LABEL_11:
    v21 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 152) + 16))(v21, *(_QWORD *)(v12 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v19, *(_QWORD *)(v0 + 144), v17);
    v22 = *(_QWORD *)(v12 + 56);
    v23 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
    *(_OWORD *)(v21 + *(int *)(v23 + 48)) = *(_OWORD *)(v22 + 16 * v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 0, 1, v23);
    swift_retain();
    goto LABEL_18;
  }
  v24 = 63 - v15;
  if ((unint64_t)(63 - v15) <= 0x7F)
  {
    v18 = 0;
  }
  else
  {
    v25 = *(_QWORD *)(v12 + 72);
    if (v25)
    {
      v18 = 1;
LABEL_15:
      v20 = (v25 - 1) & v25;
      v19 = __clz(__rbit64(v25)) + (v18 << 6);
      goto LABEL_11;
    }
    if (v24 < 0xC0)
    {
      v18 = 1;
    }
    else
    {
      v25 = *(_QWORD *)(v12 + 80);
      if (v25)
      {
        v18 = 2;
        goto LABEL_15;
      }
      if (v24 < 0x100)
      {
        v18 = 2;
      }
      else
      {
        v25 = *(_QWORD *)(v12 + 88);
        if (v25)
        {
          v18 = 3;
          goto LABEL_15;
        }
        if (v24 < 0x140)
        {
          v18 = 3;
        }
        else
        {
          v25 = *(_QWORD *)(v12 + 96);
          if (v25)
          {
            v18 = 4;
            goto LABEL_15;
          }
          v38 = 0;
          v39 = v24 >> 6;
          v40 = 5;
          if (v39 > 5)
            v40 = v39;
          v41 = v40 - 5;
          while (v41 != v38)
          {
            v25 = *(_QWORD *)(v12 + 104 + 8 * v38++);
            if (v25)
            {
              v18 = v38 + 4;
              goto LABEL_15;
            }
          }
          v18 = v39 - 1;
        }
      }
    }
  }
  v26 = *(_QWORD *)(v0 + 168);
  v27 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v20 = 0;
LABEL_18:
  *(_QWORD *)(v0 + 200) = v18;
  *(_QWORD *)(v0 + 208) = v20;
  v28 = *(_QWORD *)(v0 + 176);
  sub_100005CF0(*(_QWORD *)(v0 + 168), v28, &qword_101116FC8);
  v29 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29) == 1)
  {
    swift_release();
    v30 = (_QWORD *)swift_task_alloc(dword_101116FE4);
    *(_QWORD *)(v0 + 232) = v30;
    *v30 = v0;
    v30[1] = sub_100B9F448;
    v31 = *(_QWORD *)(v0 + 136);
    v30[2] = v31;
    return swift_task_switch(sub_100BA0390, v31, 0);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 152);
    v34 = *(_QWORD *)(v0 + 160);
    v36 = *(_QWORD *)(v0 + 144);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v34, v33, v36);
    v37 = (_QWORD *)swift_task_alloc(dword_101116FFC);
    *(_QWORD *)(v0 + 216) = v37;
    *v37 = v0;
    v37[1] = sub_100B9F0AC;
    return sub_100B9F7E8(*(_QWORD *)(v0 + 160));
  }
}

uint64_t sub_100B9F0AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    swift_errorRelease(v0);
  v5 = (_QWORD *)swift_task_alloc(dword_101117004);
  *(_QWORD *)(v2 + 224) = v5;
  *v5 = v4;
  v5[1] = sub_100B9F124;
  return sub_100B9FB98(*(_QWORD *)(v2 + 160));
}

uint64_t sub_100B9F124()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_100B9F17C, v1, 0);
}

uint64_t sub_100B9F17C()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  if (v2)
  {
    v4 = (v2 - 1) & v2;
    v5 = __clz(__rbit64(v2)) | (v3 << 6);
    v6 = *(_QWORD *)(v0 + 192);
LABEL_3:
    v7 = *(_QWORD *)(v0 + 168);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 16))(v7, *(_QWORD *)(v6 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 152) + 72) * v5, *(_QWORD *)(v0 + 144));
    v8 = *(_QWORD *)(v6 + 56);
    v9 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
    *(_OWORD *)(v7 + *(int *)(v9 + 48)) = *(_OWORD *)(v8 + 16 * v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
    swift_retain();
    goto LABEL_22;
  }
  v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  v11 = (unint64_t)((1 << *(_BYTE *)(v0 + 264)) + 63) >> 6;
  if (v10 < v11)
  {
    v6 = *(_QWORD *)(v0 + 192);
    v12 = v6 + 64;
    v13 = *(_QWORD *)(v6 + 64 + 8 * v10);
    if (v13)
    {
LABEL_7:
      v4 = (v13 - 1) & v13;
      v5 = __clz(__rbit64(v13)) + (v10 << 6);
      v3 = v10;
      goto LABEL_3;
    }
    v14 = v3 + 2;
    ++v3;
    if (v10 + 1 < v11)
    {
      v13 = *(_QWORD *)(v12 + 8 * v14);
      if (v13)
      {
LABEL_10:
        v10 = v14;
        goto LABEL_7;
      }
      v3 = v10 + 1;
      if (v10 + 2 < v11)
      {
        v13 = *(_QWORD *)(v12 + 8 * (v10 + 2));
        if (v13)
        {
          v10 += 2;
          goto LABEL_7;
        }
        v14 = v10 + 3;
        v3 = v10 + 2;
        if (v10 + 3 < v11)
        {
          v13 = *(_QWORD *)(v12 + 8 * v14);
          if (v13)
            goto LABEL_10;
          while (1)
          {
            v10 = v14 + 1;
            if (__OFADD__(v14, 1))
              break;
            if (v10 >= v11)
            {
              v3 = v11 - 1;
              goto LABEL_21;
            }
            v13 = *(_QWORD *)(v12 + 8 * v10);
            ++v14;
            if (v13)
              goto LABEL_7;
          }
LABEL_26:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_21:
  v15 = *(_QWORD *)(v0 + 168);
  v16 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v4 = 0;
LABEL_22:
  *(_QWORD *)(v0 + 200) = v3;
  *(_QWORD *)(v0 + 208) = v4;
  v17 = *(_QWORD *)(v0 + 176);
  sub_100005CF0(*(_QWORD *)(v0 + 168), v17, &qword_101116FC8);
  v18 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18) == 1)
  {
    swift_release();
    v19 = (_QWORD *)swift_task_alloc(dword_101116FE4);
    *(_QWORD *)(v0 + 232) = v19;
    *v19 = v0;
    v19[1] = sub_100B9F448;
    v20 = *(_QWORD *)(v0 + 136);
    v19[2] = v20;
    return swift_task_switch(sub_100BA0390, v20, 0);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 144);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v21, v24);
    v25 = (_QWORD *)swift_task_alloc(dword_101116FFC);
    *(_QWORD *)(v0 + 216) = v25;
    *v25 = v0;
    v25[1] = sub_100B9F0AC;
    return sub_100B9F7E8(*(_QWORD *)(v0 + 160));
  }
}

uint64_t sub_100B9F448()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 232));
  v2 = (_QWORD *)swift_task_alloc(dword_101116FEC);
  *(_QWORD *)(v1 + 240) = v2;
  *v2 = v5;
  v2[1] = sub_100B9F4C0;
  v3 = *(_QWORD *)(v1 + 136);
  v2[19] = v3;
  return swift_task_switch(sub_100BA06C4, v3, 0);
}

uint64_t sub_100B9F4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v3 = *(_QWORD **)v1;
  v3[31] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100B9F5BC, v3[17], 0);
  v5 = (_QWORD *)swift_task_alloc(dword_101116D2C);
  v3[32] = v5;
  *v5 = v3;
  v5[1] = sub_100B9F54C;
  return sub_100BA0BE0();
}

uint64_t sub_100B9F54C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 168);
  v2 = *(_QWORD *)(*v0 + 176);
  v3 = *(_QWORD *)(*v0 + 160);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100B9F5BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[31];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[31];
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v13 = swift_slowAlloc(32, -1);
    v14 = v13;
    *(_DWORD *)v6 = 136446466;
    v0[14] = sub_100016940(0x6164696C61766E69, 0xEC00000029286574, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[15] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v6 + 14, v6 + 22);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Failed to stopLocalFindableScanning %{public}@", (uint8_t *)v6, 0x16u);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = v0[31];
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v11 = (_QWORD *)swift_task_alloc(dword_101116D2C);
  v0[32] = v11;
  *v11 = v0;
  v11[1] = sub_100B9F54C;
  return sub_100BA0BE0();
}

uint64_t sub_100B9F7E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B9F848, v1, 0);
}

uint64_t sub_100B9F848()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = v0[5];
  v3 = v0[8];
  v2 = v0[9];
  v4 = v0[7];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[9];
  v11 = v0[7];
  if (v9)
  {
    v18 = v0[8];
    v12 = swift_slowAlloc(32, -1);
    v19 = swift_slowAlloc(64, -1);
    v20 = v19;
    *(_DWORD *)v12 = 136446723;
    v0[2] = sub_100016940(0xD000000000000019, 0x8000000100EF0820, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[4] = sub_100016940(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  }

  *(_BYTE *)(v0[6] + 185) = 0;
  v16 = (_QWORD *)swift_task_alloc(dword_101116D2C);
  v0[10] = v16;
  *v16 = v0;
  v16[1] = sub_100B9FADC;
  return sub_100BA0BE0();
}

uint64_t sub_100B9FADC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  v3 = (_QWORD *)swift_task_alloc(dword_101116D44);
  *(_QWORD *)(v1 + 88) = v3;
  *v3 = v2;
  v3[1] = sub_100B9FB44;
  return sub_100BA32C4(*(_QWORD *)(v1 + 40));
}

uint64_t sub_100B9FB44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 72);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100B9FB98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[17] = a1;
  v2[18] = v1;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[20] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[21] = v5;
  v2[22] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v2[23] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[24] = v7;
  v2[25] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B9FC48, v1, 0);
}

uint64_t sub_100B9FC48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (__cdecl *v17)();
  uint64_t v18;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 144) + 186) == 1)
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_101116AE0);
    *(_QWORD *)(v0 + 208) = v2;
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Saving .disappeared event", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v6 = qword_1010EA5B0;
    swift_retain();
    if (v6 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v17 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
      v8 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
      *(_QWORD *)(v0 + 216) = v8;
      *v8 = v0;
      v8[1] = sub_100B9FF8C;
      return v17();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_101116AE0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v18 = v14;
      *(_DWORD *)v13 = 136315138;
      *(_QWORD *)(v0 + 120) = sub_100016940(0xD00000000000001CLL, 0x8000000100EF07E0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 4, v13 + 12);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s Never detected nearby. NOT saving .disappeared event", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100B9FF8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B9FFEC, v3, 0);
}

uint64_t sub_100B9FFEC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 224))
  {
    v3 = *(_QWORD *)(v0 + 168);
    v2 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
    v7 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v2, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_10110F8EC);
    *(_QWORD *)(v0 + 232) = v8;
    *v8 = v0;
    v8[1] = sub_100BA0298;
    return sub_1009B2BB4(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v10 = sub_100033220();
    v11 = swift_allocError(&type metadata for DaemonError, v10, 0, 0);
    *v12 = 0xD000000000000014;
    v12[1] = 0x8000000100EF0800;
    swift_willThrow(v11);
    swift_errorRetain(v11);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138543362;
      swift_errorRetain(v11);
      v18 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(_QWORD *)(v0 + 128) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 4, v16 + 12);
      *v17 = v18;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to save .disappeared event %{public}@", v16, 0xCu);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v11);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);

    }
    swift_errorRelease(v11);
    v20 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BA0298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  sub_100004048(v4, &qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100BA0328, v5, 0);
}

uint64_t sub_100BA0328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 224));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA0378()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100BA0390, v0, 0);
}

uint64_t sub_100BA0390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD *);

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101116AE0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Clearing throttles", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_1010EA370 != -1)
    swift_once(&qword_1010EA370, sub_100BA44BC);
  v8 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                        + async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:));
  v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                  + 1));
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = sub_100BA04D8;
  return v8(_swiftEmptyArrayStorage);
}

uint64_t sub_100BA04D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_100BA052C, v1, 0);
}

uint64_t sub_100BA052C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD *);

  if (qword_1010EA360 != -1)
    swift_once(&qword_1010EA360, sub_100BA444C);
  v3 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                        + async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                  + 1));
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_100BA05C0;
  return v3(_swiftEmptyArrayStorage);
}

uint64_t sub_100BA05C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return swift_task_switch(sub_100BA0618, v1, 0);
}

uint64_t sub_100BA0618()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD *);

  if (qword_1010EA368 != -1)
    swift_once(&qword_1010EA368, sub_100BA4484);
  v3 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                        + async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                  + 1));
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_10048699C;
  return v3(_swiftEmptyArrayStorage);
}

uint64_t sub_100BA06AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = v0;
  return swift_task_switch(sub_100BA06C4, v0, 0);
}

uint64_t sub_100BA06C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();
  uint64_t v11;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101116AE0);
  *(_QWORD *)(v0 + 160) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v11 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 144) = sub_100016940(0xD00000000000001BLL, 0x8000000100EF0840, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = qword_1010EA5B0;
  swift_retain();
  if (v7 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v10 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v9 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 168) = v9;
    *v9 = v0;
    v9[1] = sub_100BA0918;
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BA0918(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BA0978, v3, 0);
}

uint64_t sub_100BA0978()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 176))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_100BA0B6C, *(_QWORD *)(v0 + 176), 0);
  }
  else
  {
    v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v13 = v7;
      *(_DWORD *)v6 = 136446210;
      *(_QWORD *)(v0 + 136) = sub_100016940(0xD00000000000001BLL, 0x8000000100EF0840, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Missing OwnerCommandService!", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v9 = v8;
    *(_QWORD *)(v0 + 128) = 4;
    v10 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v11 = sub_100006C64(&qword_101116FB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
    v12 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v10, v9, v11);
    swift_willThrow(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BA0B6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  sub_100D4ECC4();
  return swift_task_switch(sub_100BA0BAC, v1, 0);
}

uint64_t sub_100BA0BAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA0BE0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1[6] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_101116FC8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[12] = swift_task_alloc(v5);
  v1[13] = swift_task_alloc(v5);
  return swift_task_switch(sub_100BA0C90, v0, 0);
}

uint64_t sub_100BA0C90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  os_log_type_t type;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t v60;

  v1 = (uint64_t *)(v0 + 16);
  if (qword_1010EA350 == -1)
    goto LABEL_2;
LABEL_39:
  swift_once(&qword_1010EA350, sub_100B99B50);
LABEL_2:
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_101116AE0);
  *(_QWORD *)(v0 + 112) = v3;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v60 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 40) = sub_100016940(0xD000000000000020, 0x8000000100EF07B0, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 48);
  *(_WORD *)(v8 + 184) = 0;
  swift_beginAccess(v8 + 216, v1, 1, 0);
  v9 = *(_QWORD *)(v8 + 216);
  *(_QWORD *)(v0 + 120) = v9;
  v10 = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v0 + 176) = v10;
  v11 = 1 << v10;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v9 + 64);
  v14 = swift_bridgeObjectRetain(v9);
  v15 = 0;
  v1 = &qword_101116FC8;
  if (v13)
  {
LABEL_8:
    v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v17 = v16 | (v15 << 6);
    v18 = *(_QWORD *)(v0 + 120);
LABEL_9:
    v19 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, unint64_t, _QWORD, __n128))(*(_QWORD *)(v0 + 64) + 16))(v19, *(_QWORD *)(v18 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 64) + 72) * v17, *(_QWORD *)(v0 + 56), v14);
    v20 = *(_QWORD *)(v18 + 56);
    v21 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
    *(_OWORD *)(v19 + *(int *)(v21 + 48)) = *(_OWORD *)(v20 + 16 * v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 0, 1, v21);
    swift_retain();
    goto LABEL_16;
  }
  while (1)
  {
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    v23 = (unint64_t)((1 << *(_BYTE *)(v0 + 176)) + 63) >> 6;
    if (v22 >= v23)
    {
      v26 = v15;
    }
    else
    {
      v18 = *(_QWORD *)(v0 + 120);
      v24 = v18 + 64;
      v25 = *(_QWORD *)(v18 + 64 + 8 * v22);
      if (v25)
        goto LABEL_13;
      v26 = v15 + 1;
      if (v15 + 2 < v23)
      {
        v25 = *(_QWORD *)(v24 + 8 * (v15 + 2));
        if (v25)
        {
          v22 = v15 + 2;
LABEL_13:
          v13 = (v25 - 1) & v25;
          v17 = __clz(__rbit64(v25)) + (v22 << 6);
          v15 = v22;
          goto LABEL_9;
        }
        v26 = v15 + 2;
        if (v15 + 3 < v23)
        {
          v25 = *(_QWORD *)(v24 + 8 * (v15 + 3));
          if (v25)
          {
            v22 = v15 + 3;
            goto LABEL_13;
          }
          v22 = v15 + 4;
          v26 = v15 + 3;
          if (v15 + 4 < v23)
          {
            v25 = *(_QWORD *)(v24 + 8 * v22);
            if (v25)
              goto LABEL_13;
            v26 = v23 - 1;
            v34 = v23 - 5;
            while (v34 != v15)
            {
              v25 = *(_QWORD *)(v18 + 104 + 8 * v15++);
              if (v25)
              {
                v22 = v15 + 4;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    v27 = *(_QWORD *)(v0 + 96);
    v28 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
    v13 = 0;
    v15 = v26;
LABEL_16:
    *(_QWORD *)(v0 + 128) = v15;
    *(_QWORD *)(v0 + 136) = v13;
    v29 = *(_QWORD *)(v0 + 104);
    sub_100005CF0(*(_QWORD *)(v0 + 96), v29, &qword_101116FC8);
    v30 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30) == 1)
    {
      swift_release();
      v58 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                              + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
      v35 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                       + 1));
      *(_QWORD *)(v0 + 168) = v35;
      *v35 = v0;
      v35[1] = sub_100BA1814;
      return v58();
    }
    v31 = *(_QWORD *)(v0 + 88);
    v32 = *(_QWORD *)(v0 + 64);
    v33 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + *(int *)(v30 + 48));
    *(_QWORD *)(v0 + 144) = v33;
    (*(void (**)(uint64_t))(v32 + 32))(v31);
    if (v33)
      break;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
    if (v13)
      goto LABEL_8;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
  v36 = swift_retain_n(v33, 3);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v0 + 80);
  if (v39)
  {
    v41 = *(_QWORD *)(v0 + 64);
    v42 = *(_QWORD *)(v0 + 72);
    v43 = *(_QWORD *)(v0 + 56);
    v56 = *(_QWORD *)(v0 + 80);
    v44 = swift_slowAlloc(32, -1);
    v59 = swift_slowAlloc(64, -1);
    v60 = v59;
    *(_DWORD *)v44 = 136315651;
    type = v38;
    WorkItemQueue.WorkItem.id.getter();
    v45 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v43, v45);
    v48 = v47;
    v49 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v49(v42, v43);
    *(_QWORD *)(v44 + 4) = sub_100016940(v46, v48, &v60);
    swift_release_n(v33, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2160;
    *(_QWORD *)(v44 + 14) = 1752392040;
    *(_WORD *)(v44 + 22) = 2081;
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v43, v45);
    *(_QWORD *)(v44 + 24) = sub_100016940(v50, v51, &v60);
    swift_bridgeObjectRelease();
    v49(v56, v43);
    _os_log_impl((void *)&_mh_execute_header, v37, type, "Canceling %s for %{private,mask.hash}s.", (uint8_t *)v44, 0x20u);
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    v52 = *(_QWORD *)(v0 + 56);
    v53 = *(_QWORD *)(v0 + 64);
    swift_release_n(v33, 2);
    v49 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v49(v40, v52);
  }

  *(_QWORD *)(v0 + 152) = v49;
  v58 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                          + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
  v54 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                                   + 1));
  *(_QWORD *)(v0 + 160) = v54;
  *v54 = v0;
  v54[1] = sub_100BA12DC;
  return v58();
}

uint64_t sub_100BA12DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_100BA1334, v1, 0);
}

uint64_t sub_100BA1334()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  os_log_type_t type;
  uint64_t (*v48)(void);
  uint64_t v49;
  uint64_t v50;

  v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 152);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release_n(*(_QWORD *)(v0 + 144), 2);
  result = v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  if (!v6)
    goto LABEL_4;
LABEL_2:
  v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v8 = v7 | (v5 << 6);
  v9 = *(_QWORD *)(v0 + 120);
LABEL_3:
  v10 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(v10, *(_QWORD *)(v9 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 64) + 72) * v8, *(_QWORD *)(v0 + 56));
  v11 = *(_QWORD *)(v9 + 56);
  v12 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
  *(_OWORD *)(v10 + *(int *)(v12 + 48)) = *(_OWORD *)(v11 + 16 * v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 0, 1, v12);
  swift_retain();
  while (1)
  {
    *(_QWORD *)(v0 + 128) = v5;
    *(_QWORD *)(v0 + 136) = v6;
    v20 = *(_QWORD *)(v0 + 104);
    sub_100005CF0(*(_QWORD *)(v0 + 96), v20, &qword_101116FC8);
    v21 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21) == 1)
    {
      swift_release();
      v48 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                              + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
      v26 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                                       + 1));
      *(_QWORD *)(v0 + 168) = v26;
      *v26 = v0;
      v26[1] = sub_100BA1814;
      return v48();
    }
    v22 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 64);
    v24 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + *(int *)(v21 + 48));
    *(_QWORD *)(v0 + 144) = v24;
    (*(void (**)(uint64_t))(v23 + 32))(v22);
    if (v24)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
      v27 = swift_retain_n(v24, 3);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter(v28);
      v30 = os_log_type_enabled(v28, v29);
      v31 = *(_QWORD *)(v0 + 80);
      if (v30)
      {
        v32 = *(_QWORD *)(v0 + 64);
        v33 = *(_QWORD *)(v0 + 72);
        v34 = *(_QWORD *)(v0 + 56);
        v46 = *(_QWORD *)(v0 + 80);
        v35 = swift_slowAlloc(32, -1);
        v49 = swift_slowAlloc(64, -1);
        v50 = v49;
        *(_DWORD *)v35 = 136315651;
        type = v29;
        WorkItemQueue.WorkItem.id.getter();
        v36 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v37 = dispatch thunk of CustomStringConvertible.description.getter(v34, v36);
        v39 = v38;
        v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v40(v33, v34);
        *(_QWORD *)(v35 + 4) = sub_100016940(v37, v39, &v50);
        swift_release_n(v24, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2160;
        *(_QWORD *)(v35 + 14) = 1752392040;
        *(_WORD *)(v35 + 22) = 2081;
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v34, v36);
        *(_QWORD *)(v35 + 24) = sub_100016940(v41, v42, &v50);
        swift_bridgeObjectRelease();
        v40(v46, v34);
        _os_log_impl((void *)&_mh_execute_header, v28, type, "Canceling %s for %{private,mask.hash}s.", (uint8_t *)v35, 0x20u);
        swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {
        v43 = *(_QWORD *)(v0 + 56);
        v44 = *(_QWORD *)(v0 + 64);
        swift_release_n(v24, 2);
        v40 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v40(v31, v43);
      }

      *(_QWORD *)(v0 + 152) = v40;
      v48 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                              + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
      v45 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                                       + 1));
      *(_QWORD *)(v0 + 160) = v45;
      *v45 = v0;
      v45[1] = sub_100BA12DC;
      return v48();
    }
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
    if (v6)
      goto LABEL_2;
LABEL_4:
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v14 = (unint64_t)((1 << *(_BYTE *)(v0 + 176)) + 63) >> 6;
    if (v13 >= v14)
    {
      v17 = v5;
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 120);
      v15 = v9 + 64;
      v16 = *(_QWORD *)(v9 + 64 + 8 * v13);
      if (v16)
        goto LABEL_7;
      v17 = v5 + 1;
      if (v5 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * (v5 + 2));
        if (v16)
        {
          v13 = v5 + 2;
LABEL_7:
          v6 = (v16 - 1) & v16;
          v8 = __clz(__rbit64(v16)) + (v13 << 6);
          v5 = v13;
          goto LABEL_3;
        }
        v17 = v5 + 2;
        if (v5 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v5 + 3));
          if (v16)
          {
            v13 = v5 + 3;
            goto LABEL_7;
          }
          v13 = v5 + 4;
          v17 = v5 + 3;
          if (v5 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v13);
            if (v16)
              goto LABEL_7;
            v17 = v14 - 1;
            v25 = v14 - 5;
            while (v25 != v5)
            {
              v16 = *(_QWORD *)(v9 + 104 + 8 * v5++);
              if (v16)
              {
                v13 = v5 + 4;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
    v18 = *(_QWORD *)(v0 + 96);
    v19 = sub_10001A9A8((uint64_t *)&unk_101116FD0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    v6 = 0;
    v5 = v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100BA1814()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_100BA186C, v1, 0);
}

uint64_t sub_100BA186C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v6 + 216);
  *(_QWORD *)(v6 + 216) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v7);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA18F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  v5 = sub_10001A9A8(&qword_1011091A0);
  v4[21] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  v4[24] = swift_task_alloc(v6);
  v4[25] = swift_task_alloc(v6);
  v4[26] = swift_task_alloc(v6);
  v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[27] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[28] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v9);
  v4[30] = swift_task_alloc(v9);
  v4[31] = swift_task_alloc(v9);
  return swift_task_switch(sub_100BA19CC, v3, 0);
}

uint64_t sub_100BA19CC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 256) = v2;
    *v2 = v0;
    v2[1] = sub_100BA1AB8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BA1AB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BA1B18, v3, 0);
}

uint64_t sub_100BA1B18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 264))
  {
    v2 = *(_QWORD *)(v0 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v0 + 272) = v3;
    return swift_task_switch(sub_100BA1CE0, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA348 != -1)
      swift_once(&qword_1010EA348, sub_100B99304);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7E40);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing BeaconKeyService to reconcile!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 208);
    v16 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 176);

    v17 = sub_100BB0D24();
    v18 = swift_allocError(&type metadata for BTFindingService.Error, v17, 0, 0);
    *v19 = 0x8000000000000000;
    swift_willThrow(v18);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BA1CE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 280) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100BA1D58;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10007C6FC, *(_QWORD *)(v0 + 272), v3);
}

uint64_t sub_100BA1D58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_100BA1DB4, v1, 0);
}

uint64_t sub_100BA1DB4()
{
  _QWORD *v0;

  v0[36] = v0[15];
  return swift_task_switch(sub_100BA1DD0, v0[33], 0);
}

uint64_t sub_100BA1DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 136);
  *(_QWORD *)(v0 + 296) = v1;
  if (v1)
    return swift_task_switch(sub_100BA1DF4, v1, 0);
  __break(1u);
  return result;
}

uint64_t sub_100BA1DF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[37];
  v3 = v0[18];
  v2 = v0[19];
  v4 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  v5 = sub_100006C64(&qword_101103E00, 255, type metadata accessor for BeaconKeyServiceBuilder, (uint64_t)&unk_100E46668);
  v6 = (_QWORD *)swift_task_alloc(48);
  v0[38] = v6;
  v6[2] = v1;
  v6[3] = v3;
  v6[4] = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[39] = v7;
  *v7 = v0;
  v7[1] = sub_100BA1ED8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v0[21], v4, v0[37], v5, &unk_101115F30, v6, v0[21]);
}

uint64_t sub_100BA1ED8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BA1F30, *(_QWORD *)(v1 + 296), 0);
}

uint64_t sub_100BA1F30()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[20];
  v0[40] = v0[16];
  return swift_task_switch(sub_100BA1F4C, v1, 0);
}

uint64_t sub_100BA1F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)@<X0>(uint64_t@<X8>);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;

  v1 = *(_QWORD *)(v0 + 320);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 224) + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 208), type metadata accessor for BeaconKeyManager.IndexInformation);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(_QWORD *)(v0 + 328) = v7;
  if (v7(v6, 1, v4) == 1)
  {
    v8 = *(_QWORD *)(v0 + 152);
    sub_100004048(*(_QWORD *)(v0 + 208), &qword_1011091A0);
    v9 = *(_QWORD *)(v0 + 288);
    v11 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 152);
    if ((v8 & 0x2000000000000000) != 0)
    {
      v12 = (_QWORD *)swift_allocObject(&unk_1010B0930, 40, 7);
      *(_QWORD *)(v0 + 336) = v12;
      v12[2] = v9;
      v12[3] = v11;
      v12[4] = v10 & 0xDFFFFFFFFFFFFFFFLL;
      sub_10012C644(v11, v10);
      sub_10012C644(v11, v10);
      v32 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v33 = (_QWORD *)swift_task_alloc(v32);
      *(_QWORD *)(v0 + 344) = v33;
      *v33 = v0;
      v33[1] = sub_100BA2228;
      v15 = *(_QWORD *)(v0 + 184);
      v16 = *(_QWORD *)(v0 + 168);
      v17 = sub_100BB0D6C;
    }
    else
    {
      v12 = (_QWORD *)swift_allocObject(&unk_1010B0958, 40, 7);
      *(_QWORD *)(v0 + 352) = v12;
      v12[2] = v9;
      v12[3] = v11;
      v12[4] = v10;
      sub_10012C644(v11, v10);
      sub_10012C644(v11, v10);
      v13 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v14 = (_QWORD *)swift_task_alloc(v13);
      *(_QWORD *)(v0 + 360) = v14;
      *v14 = v0;
      v14[1] = sub_100BA23FC;
      v15 = *(_QWORD *)(v0 + 200);
      v16 = *(_QWORD *)(v0 + 168);
      v17 = sub_100BB0D7C;
    }
    return unsafeBlocking<A>(_:)(v15, v17, v12, v16);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 136);
    swift_release();
    swift_release();
    sub_1000126EC(v19, v18, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v18, v20, type metadata accessor for BeaconKeyManager.IndexInformation);
    v21 = *(_QWORD *)(v0 + 240);
    v22 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 232);
    v25 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 192);
    v28 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 136);
    v30 = type metadata accessor for BeaconDetails(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
    swift_task_dealloc(v22);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BA2228()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  swift_release();
  return swift_task_switch(sub_100BA2288, v1, 0);
}

uint64_t sub_100BA2288()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release();
  swift_release();
  sub_10012C494(v6, v5);
  sub_100005CF0(v3, v4, &qword_1011091A0);
  if (v1(v4, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 176), &qword_1011091A0);
    v7 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 136);
    sub_1000126EC(*(_QWORD *)(v0 + 176), v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v8, v9, type metadata accessor for BeaconKeyManager.IndexInformation);
    v7 = 0;
  }
  v11 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, v7, 1, v18);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA23FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_release();
  return swift_task_switch(sub_100BA245C, v1, 0);
}

uint64_t sub_100BA245C()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release();
  swift_release();
  sub_10012C494(v6, v5);
  sub_100005CF0(v3, v4, &qword_1011091A0);
  if (v1(v4, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 192), &qword_1011091A0);
    v7 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 240);
    v9 = *(_QWORD *)(v0 + 136);
    sub_1000126EC(*(_QWORD *)(v0 + 192), v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v8, v9, type metadata accessor for BeaconKeyManager.IndexInformation);
    v7 = 0;
  }
  v11 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, v7, 1, v18);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA25D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  uint64_t v13;

  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  OS_dispatch_queue.sync<A>(execute:)(sub_1006ADC3C, v12, v5);
  v6 = v13;
  v7 = *(_QWORD *)(v13 + 16);
  v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (v7)
  {
    sub_10005972C(v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a4, type metadata accessor for BeaconKeyManager.IndexInformation);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100BA269C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[20] = a1;
  v2[21] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v3);
  v2[23] = swift_task_alloc(v3);
  v4 = type metadata accessor for AccessoryCommand(0);
  v2[24] = v4;
  v2[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v2[26] = v5;
  v2[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[28] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[29] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[30] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  v2[33] = swift_task_alloc(v9);
  v2[34] = swift_task_alloc(v9);
  return swift_task_switch(sub_100BA27A8, v1, 0);
}

uint64_t sub_100BA27A8()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (__cdecl *v25)();
  uint64_t v26;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0 + 12;
  v3 = v0[20];
  v4 = v0[34];
  v6 = v0[28];
  v5 = v0[29];
  v7 = type metadata accessor for Logger(0);
  v0[35] = v7;
  sub_10001A9E8(v7, (uint64_t)qword_101116AE0);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[36] = v8;
  v9 = v8(v4, v3, v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[34];
  v14 = v0[28];
  if (v12)
  {
    v23 = v0[29];
    v15 = swift_slowAlloc(32, -1);
    v24 = swift_slowAlloc(64, -1);
    v26 = v24;
    *(_DWORD *)v15 = 136446723;
    v0[17] = sub_100016940(0xD000000000000027, 0x8000000100EF0780, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2160;
    v0[18] = 1752392040;
    v2 = v0 + 12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v0[19] = sub_100016940(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s for %{private,mask.hash}s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v19 = v15;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[29] + 8))(v0[34], v0[28]);
  }

  v20 = qword_1010EA5B0;
  swift_retain();
  if (v20 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v25 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v22 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    v0[37] = v22;
    *v22 = v0;
    v22[1] = sub_100BA2B00;
    return v25();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BA2B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BA2B60, v3, 0);
}

uint64_t sub_100BA2B60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 304))
  {
    v2 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v0 + 312) = v3;
    return swift_task_switch(sub_100BA2D64, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA348 != -1)
      swift_once(&qword_1010EA348, sub_100B99304);
    v5 = sub_10001A9E8(*(_QWORD *)(v0 + 280), (uint64_t)qword_1011B7E40);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startAggressiveAdvertisement!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v10 = v9;
    *(_QWORD *)(v0 + 128) = 4;
    v11 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100006C64(&qword_101116FB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
    v13 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v11, v10, v12);
    swift_willThrow(v13);
    v14 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 256);
    v17 = *(_QWORD *)(v0 + 216);
    v18 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 176);
    v19 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BA2D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 224);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 288))(v2, *(_QWORD *)(v0 + 160), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010B0908, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 320) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 328) = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 336) = v11;
  *v11 = v0;
  v11[1] = sub_100BA2E44;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 216), sub_100336654, v8, *(_QWORD *)(v0 + 208));
}

uint64_t sub_100BA2E44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  swift_release();
  return swift_task_switch(sub_100BA2EA8, v1, 0);
}

uint64_t sub_100BA2EA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = v0[27];
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    v3 = 0;
  }
  else
  {
    sub_1009A2CF8();
    v5 = v4;
    v6 = SPBeaconTypeHele;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11)
      v3 = 1;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    v13 = v0[27];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000126B0(v13, type metadata accessor for OwnedBeaconRecord);
  }
  v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
  v15 = v0[32];
  v16 = v0[28];
  v17 = v0[29];
  v19 = v0[22];
  v18 = v0[23];
  v20 = v0[20];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1, 1, v16);
  v14(v15, v20, v16);
  sub_10000F9B8(v18, v19, &qword_1010ED860);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16);
  if ((_DWORD)v21 == 1)
  {
    v23 = v0[22];
    v22 = v0[23];
    UUID.init()(v21);
    sub_100004048(v22, &qword_1010ED860);
    sub_100004048(v23, &qword_1010ED860);
  }
  else
  {
    v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[41];
    v25 = v0[31];
    v26 = v0[28];
    v27 = v0[22];
    sub_100004048(v0[23], &qword_1010ED860);
    v24(v25, v27, v26);
  }
  v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[41];
  v29 = v0[32];
  v30 = v0[28];
  v32 = (int *)v0[24];
  v31 = v0[25];
  v28(v31, v0[31], v30);
  v28(v31 + v32[5], v29, v30);
  v33 = v31 + v32[6];
  *(_QWORD *)v33 = 120;
  *(_BYTE *)(v33 + 8) = 2;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  v34 = (_QWORD *)swift_task_alloc(dword_10111F17C);
  v0[43] = v34;
  *v34 = v0;
  v34[1] = sub_100BA3100;
  return sub_100D4F944(v0[25]);
}

uint64_t sub_100BA3100()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  *(_QWORD *)(*v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BA3214;
  else
    v4 = sub_100BA3164;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), 0);
}

uint64_t sub_100BA3164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  swift_release();
  sub_1000126B0(v6, type metadata accessor for AccessoryCommand);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA3214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for AccessoryCommand);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA32C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[22] = a1;
  v2[23] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[24] = swift_task_alloc(v3);
  v2[25] = swift_task_alloc(v3);
  v4 = type metadata accessor for AccessoryCommand(0);
  v2[26] = v4;
  v2[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v2[28] = v5;
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[30] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[31] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[32] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[33] = swift_task_alloc(v9);
  v2[34] = swift_task_alloc(v9);
  v2[35] = swift_task_alloc(v9);
  v2[36] = swift_task_alloc(v9);
  v2[37] = swift_task_alloc(v9);
  return swift_task_switch(sub_100BA33DC, v1, 0);
}

uint64_t sub_100BA33DC()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t type;
  uint64_t (__cdecl *v27)();
  uint64_t v28;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0 + 12;
  v3 = v0[22];
  v4 = v0[37];
  v6 = v0[30];
  v5 = v0[31];
  v7 = type metadata accessor for Logger(0);
  v0[38] = v7;
  v0[39] = sub_10001A9E8(v7, (uint64_t)qword_101116AE0);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[40] = v8;
  v9 = v8(v4, v3, v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[37];
  v14 = v0[30];
  if (v12)
  {
    type = v11;
    v24 = v0[31];
    v15 = swift_slowAlloc(32, -1);
    v25 = swift_slowAlloc(64, -1);
    v28 = v25;
    *(_DWORD *)v15 = 136446723;
    v0[19] = sub_100016940(0xD000000000000026, 0x8000000100EF0750, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2160;
    v0[20] = 1752392040;
    v2 = v0 + 12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v0[21] = sub_100016940(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v19(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v20 = v15;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v0[31] + 8);
    v19(v0[37], v0[30]);
  }

  v0[41] = v19;
  v21 = qword_1010EA5B0;
  swift_retain();
  if (v21 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v27 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v23 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    v0[42] = v23;
    *v23 = v0;
    v23[1] = sub_100BA373C;
    return v27();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BA373C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BA379C, v3, 0);
}

uint64_t sub_100BA379C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 344))
  {
    v2 = *(_QWORD *)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v0 + 352) = v3;
    return swift_task_switch(sub_100BA39AC, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA348 != -1)
      swift_once(&qword_1010EA348, sub_100B99304);
    v5 = sub_10001A9E8(*(_QWORD *)(v0 + 304), (uint64_t)qword_1011B7E40);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startAggressiveAdvertisement!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v10 = v9;
    *(_QWORD *)(v0 + 128) = 4;
    v11 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100006C64(&qword_101116FB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
    v13 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v11, v10, v12);
    swift_willThrow(v13);
    v14 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 216);
    v21 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BA39AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 320))(v2, *(_QWORD *)(v0 + 176), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010B08E0, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 360) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 368) = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 376) = v11;
  *v11 = v0;
  v11[1] = sub_100BA3A8C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 232), sub_100336654, v8, *(_QWORD *)(v0 + 224));
}

uint64_t sub_100BA3A8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  swift_release();
  return swift_task_switch(sub_100BA3AF0, v1, 0);
}

uint64_t sub_100BA3AF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = v0[29];
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    v3 = 0;
  }
  else
  {
    sub_1009A2CF8();
    v5 = v4;
    v6 = SPBeaconTypeHele;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11)
      v3 = 1;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    v13 = v0[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000126B0(v13, type metadata accessor for OwnedBeaconRecord);
  }
  v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[40];
  v15 = v0[35];
  v16 = v0[30];
  v17 = v0[31];
  v19 = v0[24];
  v18 = v0[25];
  v20 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1, 1, v16);
  v14(v15, v20, v16);
  sub_10000F9B8(v18, v19, &qword_1010ED860);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16);
  if ((_DWORD)v21 == 1)
  {
    v23 = v0[24];
    v22 = v0[25];
    UUID.init()(v21);
    sub_100004048(v22, &qword_1010ED860);
    sub_100004048(v23, &qword_1010ED860);
  }
  else
  {
    v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
    v25 = v0[34];
    v26 = v0[30];
    v27 = v0[24];
    sub_100004048(v0[25], &qword_1010ED860);
    v24(v25, v27, v26);
  }
  v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  v29 = v0[35];
  v30 = v0[30];
  v32 = (int *)v0[26];
  v31 = v0[27];
  v28(v31, v0[34], v30);
  v28(v31 + v32[5], v29, v30);
  v33 = v31 + v32[6];
  *(_QWORD *)v33 = 2;
  *(_BYTE *)(v33 + 8) = 3;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  v34 = (_QWORD *)swift_task_alloc(dword_10111F17C);
  v0[48] = v34;
  *v34 = v0;
  v34[1] = sub_100BA3D48;
  return sub_100D4F944(v0[27]);
}

uint64_t sub_100BA3D48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 384);
  *(_QWORD *)(*v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BA402C;
  else
    v4 = sub_100BA3DAC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 184), 0);
}

uint64_t sub_100BA3DAC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 320))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 240));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    v4 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 240);
    v26 = *(_QWORD *)(v0 + 216);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 136) = 1752392040;
    v27 = v7;
    *(_DWORD *)v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v8 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 144) = sub_100016940(v9, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    v25(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully stopped fast advertising for %{private,mask.hash}s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_release();

    v11 = v26;
  }
  else
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    v13 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 240);
    v15 = *(_QWORD *)(v0 + 216);

    swift_release();
    v12(v13, v14);
    v11 = v15;
  }
  sub_1000126B0(v11, type metadata accessor for AccessoryCommand);
  v16 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 232);
  v21 = *(_QWORD *)(v0 + 216);
  v23 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA402C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for AccessoryCommand);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA40F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));

  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_release(*(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100BA416C()
{
  uint64_t v0;

  sub_100BA40F0();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BTFindingService()
{
  return objc_opt_self(_TtC12searchpartyd16BTFindingService);
}

uint64_t *initializeBufferWithCopyOfBuffer for BTFindingService.FastAdvertisementTracker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for BTFindingService.FastAdvertisementTracker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for BTFindingService.FastAdvertisementTracker(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for BTFindingService.FastAdvertisementTracker(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BTFindingService.FastAdvertisementTracker(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BTFindingService.FastAdvertisementTracker()
{
  return &type metadata for BTFindingService.FastAdvertisementTracker;
}

uint64_t sub_100BA4314()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100BA432C, v0, 0);
}

uint64_t sub_100BA432C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7E40);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BTFindingService: Starting up.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  sub_100B9A7A4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA4410(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64((unint64_t *)&unk_101116FA0, a2, (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService, (uint64_t)&unk_100E62870);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100BA444C()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_1010FA2E0);
  result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v0, 2.0);
  qword_101116B00 = result;
  return result;
}

uint64_t sub_100BA4484()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_1010FA2E0);
  result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v0, 6.0);
  qword_101116B08 = result;
  return result;
}

uint64_t sub_100BA44BC()
{
  uint64_t result;

  result = sub_100BA44D8();
  qword_101116B10 = result;
  return result;
}

uint64_t sub_100BA44D8()
{
  double v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1BD78(v9);
  v1 = v0;
  swift_bridgeObjectRelease();
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7E40);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v9 = *(_QWORD *)&v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Throttling every %f seconds for .detectedNearby", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = sub_10001A9A8(&qword_1010FA2E0);
  return AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v7, v1);
}

uint64_t sub_100BA465C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[8] = a1;
  v2[9] = v1;
  v2[10] = *v1;
  v3 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[12] = v4;
  v2[13] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F46C0);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[16] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[17] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v9);
  v2[19] = swift_task_alloc(v9);
  v2[20] = swift_task_alloc(v9);
  v2[21] = swift_task_alloc(v9);
  return swift_task_switch(sub_100BA473C, v1, 0);
}

uint64_t sub_100BA473C()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70[2];

  v67 = v0 + 5;
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0[16] + 16);
  v1(v0[21], v0[8], v0[15]);
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v2 = v0[20];
  v3 = v0[21];
  v4 = v0[15];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = v1(v2, v3, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[20];
  v11 = v0[15];
  if (v9)
  {
    type = v8;
    v59 = v0[16];
    v12 = swift_slowAlloc(32, -1);
    v61 = swift_slowAlloc(64, -1);
    v70[0] = v61;
    *(_DWORD *)v12 = 136446723;
    *v67 = sub_100016940(0xD000000000000017, 0x8000000100EF0AD0, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, v0 + 6, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2160;
    v0[6] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[7] = sub_100016940(v14, v15, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0[16] + 8);
    v16(v0[20], v0[15]);
  }

  v17 = v0[9];
  v18 = v0[21];
  v69 = v16;
  if (*(_QWORD *)(v17 + 176))
  {
    v19 = v1(v0[18], v18, v0[15]);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = v0[18];
    v24 = v0[15];
    if (v22)
    {
      v25 = swift_slowAlloc(32, -1);
      v65 = swift_slowAlloc(64, -1);
      v70[0] = v65;
      *(_DWORD *)v25 = 136446723;
      v0[2] = sub_100016940(0xD000000000000017, 0x8000000100EF0AD0, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2160;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v25 + 14, v25 + 22);
      *(_WORD *)(v25 + 22) = 2081;
      v26 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v24, v26);
      v0[4] = sub_100016940(v27, v28, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v67, v25 + 24, v25 + 32);
      swift_bridgeObjectRelease();
      v16(v23, v24);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s Found existing scan task for %{private,mask.hash}s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      v16(v0[18], v0[15]);
    }

    v45 = v0[20];
    v46 = v0[21];
    v48 = v0[18];
    v47 = v0[19];
    v50 = v0[14];
    v49 = v0[15];
    v51 = v0[13];
    v52 = sub_100BB0D24();
    v53 = swift_allocError(&type metadata for BTFindingService.Error, v52, 0, 0);
    *v54 = 0x800000000000000DLL;
    swift_willThrow(v53);
    v69(v46, v49);
    swift_task_dealloc(v46);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    v44 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v29 = v0[19];
    v66 = v0[20];
    v68 = v0[18];
    v58 = v0[17];
    v30 = v0[15];
    v31 = v0[13];
    v32 = v0[14];
    v33 = v0[11];
    v56 = v0[12];
    v57 = v0[16];
    v62 = v32;
    *(_QWORD *)typea = v0[10];
    v34 = v0[8];
    v35 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v32, 1, 1, v35);
    v36 = v31;
    v60 = v31;
    sub_10005972C(v34, v31, type metadata accessor for LocalFindableAccessoryRecord);
    v1(v29, v18, v30);
    v37 = *(unsigned __int8 *)(v33 + 80);
    v38 = (v37 + 40) & ~v37;
    v39 = *(unsigned __int8 *)(v57 + 80);
    v40 = (v56 + v39 + v38) & ~v39;
    v41 = (v58 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (char *)swift_allocObject(&unk_1010B0C28, v41 + 8, v37 | v39 | 7);
    *((_QWORD *)v42 + 2) = 0;
    *((_QWORD *)v42 + 3) = 0;
    *((_QWORD *)v42 + 4) = v17;
    sub_1000126EC(v36, (uint64_t)&v42[v38], type metadata accessor for LocalFindableAccessoryRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(&v42[v40], v29, v30);
    *(_QWORD *)&v42[v41] = *(_QWORD *)typea;
    swift_retain();
    v43 = sub_100791A98(v62, (uint64_t)&unk_101117190, (uint64_t)v42);
    sub_100004048(v62, &qword_1010F46C0);
    v69(v18, v30);
    *(_QWORD *)(v17 + 176) = v43;
    swift_release();
    swift_task_dealloc(v18);
    swift_task_dealloc(v66);
    swift_task_dealloc(v29);
    swift_task_dealloc(v68);
    swift_task_dealloc(v62);
    swift_task_dealloc(v60);
    v44 = (uint64_t (*)(void))v0[1];
  }
  return v44();
}

uint64_t sub_100BA4DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[191] = a6;
  v6[185] = a5;
  v6[179] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[197] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[198] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[199] = v9;
  v6[200] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
  v6[201] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v6[202] = v11;
  v6[203] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BA4E58, 0, 0);
}

uint64_t sub_100BA4E58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[203];
  v2 = v0[202];
  v3 = v0[201];
  v4 = v0[200];
  v5 = v0[198];
  v6 = v0[197];
  v18 = v0[191];
  v19 = v0[199];
  v7 = v0[179];
  sub_10005972C(v0[185], v1, type metadata accessor for LocalFindableAccessoryRecord);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010B0C50, v9 + v2, v8 | 7);
  v0[204] = v10;
  *(_QWORD *)(v10 + 16) = v7;
  sub_1000126EC(v1, v10 + v9, type metadata accessor for LocalFindableAccessoryRecord);
  swift_retain();
  swift_retain();
  swift_asyncLet_begin(v0 + 2, 0, &type metadata for () + 1, &unk_1011171A0, v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v18, v6);
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_1010B0C78, v13 + v19, v12 | 7);
  v0[205] = v14;
  *(_QWORD *)(v14 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v13, v4, v6);
  swift_retain();
  swift_asyncLet_begin(v0 + 82, 0, &type metadata for () + 1, &unk_1011171B0, v14, v15);
  return swift_asyncLet_get_throwing(v0 + 2, v16, sub_100BA4FEC, v0 + 162);
}

uint64_t sub_100BA4FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3 + 656;
  *(_QWORD *)(v3 + 1648) = v2;
  if (v2)
    return swift_asyncLet_finish(v4, a2, sub_100BA50C0, v3 + 1344);
  else
    return swift_asyncLet_get(v4, a2, sub_100BA5018, v3 + 1536);
}

uint64_t sub_100BA5018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 656, a2, sub_100BA502C, v2 + 1488);
}

uint64_t sub_100BA502C()
{
  return swift_task_switch(sub_100BA5040, 0, 0);
}

uint64_t sub_100BA5040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 16, a2, sub_100BA5054, v2 + 1440);
}

uint64_t sub_100BA5054()
{
  return swift_task_switch(sub_100BA5068, 0, 0);
}

uint64_t sub_100BA5068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 1640);
  swift_release_n(*(_QWORD *)(v0 + 1632), 2);
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 1600);
  swift_task_dealloc(*(_QWORD *)(v0 + 1624));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA50C0()
{
  return swift_task_switch(sub_100BA50D4, 0, 0);
}

uint64_t sub_100BA50D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_asyncLet_finish(v2 + 16, a2, sub_100BA50E8, v2 + 1392);
}

uint64_t sub_100BA50E8()
{
  return swift_task_switch(sub_100BA50FC, 0, 0);
}

uint64_t sub_100BA50FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_release();
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = *(_QWORD *)(v0 + 1648);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_101116AE0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 1648);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 1384) = sub_100016940(0xD000000000000017, 0x8000000100EF0AD0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1384, v0 + 1392, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 1336) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1336, v0 + 1344, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s scanTask error: %{public}@", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
    swift_release();
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 1648));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

    swift_release();
  }
  swift_release();
  v13 = *(_QWORD *)(v0 + 1600);
  swift_task_dealloc(*(_QWORD *)(v0 + 1624));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA538C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_101117204);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_100004C28;
  return sub_100BA53E0(a3);
}

uint64_t sub_100BA53E0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v2[22] = a1;
  v2[23] = v1;
  v2[24] = *v1;
  v3 = sub_10001A9A8(&qword_101117208);
  v2[25] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[26] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v5);
  v2[28] = swift_task_alloc(v5);
  v2[29] = swift_task_alloc(v5);
  v6 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
  v2[30] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[31] = v7;
  v2[32] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Device(0);
  v2[33] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[34] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v2[35] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[36] = swift_task_alloc(v11);
  v2[37] = swift_task_alloc(v11);
  v12 = type metadata accessor for DeviceChange(0);
  v2[38] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[39] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v14);
  v2[41] = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_101117210);
  v2[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_101117218);
  v2[43] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[44] = v17;
  v2[45] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_101117220);
  v2[46] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[47] = v19;
  v2[48] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v2[49] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v2[50] = v21;
  v22 = *(_QWORD *)(v21 + 64);
  v2[51] = v22;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[52] = swift_task_alloc(v23);
  v2[53] = swift_task_alloc(v23);
  v2[54] = swift_task_alloc(v23);
  return swift_task_switch(sub_100BA55C8, v1, 0);
}

uint64_t sub_100BA55C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  __int128 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t type;
  uint64_t (__cdecl *v29)();
  uint64_t v30;

  v1 = v0[22];
  v2 = v0[54];
  v3 = v0[49];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[50] + 16);
  v0[55] = v4;
  v4(v2, v1, v3);
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v5 = (__int128 *)(v0 + 7);
  v6 = v0 + 12;
  v8 = v0[53];
  v7 = v0[54];
  v9 = v0[49];
  v10 = type metadata accessor for Logger(0);
  v0[56] = sub_10001A9E8(v10, (uint64_t)qword_101116AE0);
  v11 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v4)(v8, v7, v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v15 = v0[53];
  v16 = v0[49];
  if (v14)
  {
    type = v13;
    v26 = v0[50];
    v17 = swift_slowAlloc(32, -1);
    v27 = swift_slowAlloc(64, -1);
    v30 = v27;
    *(_DWORD *)v17 = 136446723;
    v0[19] = sub_100016940(0xD000000000000023, 0x8000000100EF0B50, &v30);
    v6 = v0 + 12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    v0[20] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v18 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v16, v18);
    v0[21] = sub_100016940(v19, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v21(v15, v16);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v22 = v17;
    v5 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(v0[50] + 8);
    v21(v0[53], v0[49]);
  }

  v0[57] = v21;
  v23 = qword_1010EA5B0;
  swift_retain();
  if (v23 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v6, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v5, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v5, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v29 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v25 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    v0[58] = v25;
    *v25 = v0;
    v25[1] = sub_100BA5930;
    return v29();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BA5930(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 464);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 472) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BA5990, v3, 0);
}

uint64_t sub_100BA5990()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 472))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111F4BC);
    *(_QWORD *)(v0 + 480) = v2;
    *v2 = v0;
    v2[1] = sub_100BA5C68;
    return sub_100D4E700(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 176));
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v30 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 136) = sub_100016940(0xD000000000000023, 0x8000000100EF0B50, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s Missing OwnerCommandService!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(_QWORD *)(v0 + 392);
    type metadata accessor for SPBTFindingSessionError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 128) = 4;
    v14 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_100006C64(&qword_101116FB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
    v16 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v14, v13, v15);
    swift_willThrow(v16);
    v9(v10, v11);
    v17 = *(_QWORD *)(v0 + 424);
    v18 = *(_QWORD *)(v0 + 416);
    v19 = *(_QWORD *)(v0 + 384);
    v20 = *(_QWORD *)(v0 + 360);
    v22 = *(_QWORD *)(v0 + 328);
    v21 = *(_QWORD *)(v0 + 336);
    v23 = *(_QWORD *)(v0 + 320);
    v24 = *(_QWORD *)(v0 + 288);
    v25 = *(_QWORD *)(v0 + 296);
    v26 = *(_QWORD *)(v0 + 256);
    v27 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BA5C68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BA6C00;
  else
    v4 = sub_100BA5CCC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 184), 0);
}

uint64_t sub_100BA5CCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[44];
  v1 = v0[45];
  v3 = v0[43];
  v4 = v0[23];
  AsyncThrowingStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v6 = sub_100006C64((unint64_t *)&unk_101116FA0, v5, (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService, (uint64_t)&unk_100E62870);
  v0[62] = v6;
  v7 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[63] = v7;
  *v7 = v0;
  v7[1] = sub_100BA5D90;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[42], v4, v6, v0[46], v0 + 18);
}

uint64_t sub_100BA5D90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 504));
  if (v0)
  {
    v3 = v2[23];
    v4 = sub_100BA6D14;
  }
  else
  {
    v2[65] = v2[57];
    v2[64] = 0;
    v3 = v2[23];
    v4 = sub_100BA5E00;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100BA5E00()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v1 = *(_QWORD *)(v0 + 336);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 312) + 48))(v1, 1, *(_QWORD *)(v0 + 304)) == 1)
  {
    v2 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v4 = *(_QWORD *)(v0 + 424);
    v3 = *(_QWORD *)(v0 + 432);
    v5 = *(_QWORD *)(v0 + 416);
    v6 = *(_QWORD *)(v0 + 384);
    v7 = *(_QWORD *)(v0 + 392);
    v8 = *(_QWORD *)(v0 + 368);
    v9 = *(_QWORD *)(v0 + 376);
    v77 = *(_QWORD *)(v0 + 360);
    v78 = *(_QWORD *)(v0 + 328);
    v79 = *(_QWORD *)(v0 + 320);
    v80 = *(_QWORD *)(v0 + 296);
    v81 = *(_QWORD *)(v0 + 288);
    v83 = *(_QWORD *)(v0 + 256);
    v85 = *(_QWORD *)(v0 + 232);
    v87 = *(_QWORD *)(v0 + 224);
    v89 = *(_QWORD *)(v0 + 216);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v6, v8);
    v2(v3, v7);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v77);
    swift_task_dealloc(v1);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v11 = *(_QWORD *)(v0 + 512);
  v12 = sub_1000126EC(v1, *(_QWORD *)(v0 + 328), (uint64_t (*)(_QWORD))&type metadata accessor for DeviceChange);
  static Task<>.checkCancellation()(v12);
  *(_QWORD *)(v0 + 528) = v11;
  if (v11)
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
    v14 = *(_QWORD *)(v0 + 432);
    v16 = *(_QWORD *)(v0 + 384);
    v15 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 376);
    v19 = *(_QWORD *)(v0 + 328);
    swift_release();
    sub_1000126B0(v19, (uint64_t (*)(_QWORD))&type metadata accessor for DeviceChange);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    v13(v14, v15);
    v20 = *(_QWORD *)(v0 + 424);
    v21 = *(_QWORD *)(v0 + 416);
    v22 = *(_QWORD *)(v0 + 384);
    v23 = *(_QWORD *)(v0 + 360);
    v25 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 320);
    v27 = *(_QWORD *)(v0 + 296);
    v82 = *(_QWORD *)(v0 + 288);
    v84 = *(_QWORD *)(v0 + 256);
    v86 = *(_QWORD *)(v0 + 232);
    v88 = *(_QWORD *)(v0 + 224);
    v90 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v29 = *(_QWORD *)(v0 + 320);
  v30 = *(_QWORD *)(v0 + 304);
  sub_10005972C(*(_QWORD *)(v0 + 328), v29, (uint64_t (*)(_QWORD))&type metadata accessor for DeviceChange);
  if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
  {
    v32 = *(_QWORD *)(v0 + 216);
    v31 = *(_QWORD *)(v0 + 224);
    v33 = *(_QWORD *)(v0 + 200);
    v34 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 32))(v31, *(_QWORD *)(v0 + 320), v33);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v32, v31, v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD *)(v0 + 328);
    v40 = *(_QWORD *)(v0 + 216);
    v41 = *(_QWORD *)(v0 + 224);
    v43 = *(_QWORD *)(v0 + 200);
    v42 = *(_QWORD *)(v0 + 208);
    if (v38)
    {
      v91 = *(_QWORD *)(v0 + 328);
      v44 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(32, -1);
      v93 = v45;
      *(_DWORD *)v44 = 141558275;
      *(_QWORD *)(v44 + 4) = 1752392040;
      *(_WORD *)(v44 + 12) = 2081;
      v46 = sub_1000193A4(&qword_101117228, &qword_101117208, (const char *)&protocol conformance descriptor for Identifier<A>);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v43, v46);
      *(_QWORD *)(v44 + 14) = sub_100016940(v47, v48, &v93);
      swift_bridgeObjectRelease();
      v49 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v49(v40, v43);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Lost %{private,mask.hash}s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      v49(v41, v43);
      v50 = v91;
    }
    else
    {

      v73 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v73(v40, v43);
      v73(v41, v43);
      v50 = v39;
    }
    sub_1000126B0(v50, (uint64_t (*)(_QWORD))&type metadata accessor for DeviceChange);
    *(_BYTE *)(*(_QWORD *)(v0 + 184) + 184) = 1;
    *(_QWORD *)(v0 + 632) = *(_QWORD *)(v0 + 520);
    v74 = *(_QWORD *)(v0 + 496);
    v75 = *(_QWORD *)(v0 + 184);
    v76 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 640) = v76;
    *v76 = v0;
    v76[1] = sub_100BA6B90;
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 336), v75, v74, *(_QWORD *)(v0 + 368), v0 + 144);
  }
  else
  {
    v51 = *(_QWORD *)(v0 + 320);
    v52 = *(_QWORD *)(v0 + 296);
    v53 = *(_QWORD *)(v0 + 264);
    v54 = *(_QWORD *)(v0 + 184);
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 272) + 32);
    *(_QWORD *)(v0 + 536) = v55;
    v55(v52, v51, v53);
    *(_BYTE *)(v54 + 186) = 1;
    if (qword_1010EA370 != -1)
      swift_once(&qword_1010EA370, sub_100BA44BC);
    v56 = *(_QWORD *)(v0 + 432);
    v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v59 = *(_QWORD *)(v0 + 408);
    v58 = *(_QWORD *)(v0 + 416);
    v60 = *(_QWORD *)(v0 + 392);
    v61 = *(_QWORD *)(v0 + 400);
    v62 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)(v0 + 544) = qword_101116B10;
    v63 = swift_allocObject(&unk_1010B0CA0, 24, 7);
    *(_QWORD *)(v0 + 552) = v63;
    swift_weakInit(v63 + 16, v62);
    v57(v58, v56, v60);
    v64 = *(_DWORD *)(v61 + 80);
    v65 = (v64 + 24) & ~v64;
    *(_DWORD *)(v0 + 648) = *(_DWORD *)(v61 + 80);
    v66 = (v59 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = swift_allocObject(&unk_1010B0CC8, v66 + 8, v64 | 7);
    *(_QWORD *)(v0 + 560) = v67;
    *(_QWORD *)(v67 + 16) = v63;
    v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32);
    *(_QWORD *)(v0 + 568) = v68;
    v68(v67 + v65, v58, v60);
    *(_QWORD *)(v67 + v66) = v92;
    swift_retain();
    v69 = sub_10001A9A8(&qword_1010FA2E0);
    *(_QWORD *)(v0 + 576) = v69;
    v70 = sub_1000193A4(&qword_101117240, &qword_1010FA2E0, (const char *)&protocol conformance descriptor for AsyncKeyedThrottle<A>);
    *(_QWORD *)(v0 + 584) = v70;
    v71 = dispatch thunk of Actor.unownedExecutor.getter(v69, v70);
    return swift_task_switch(sub_100BA643C, v71, v72);
  }
}

uint64_t sub_100BA643C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[23];
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)(v0[54], &unk_101117238, v0[70]);
  swift_release();
  swift_release();
  return swift_task_switch(sub_100BA64AC, v1, 0);
}

uint64_t sub_100BA64AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = sub_100D746E8();
  if (v1)
  {
    swift_errorRetain(v1);
    v3 = swift_errorRetain(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138543362;
      swift_errorRetain(v1);
      v8 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v6 + 4) = v8;
      *v7 = v8;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Fast advertising check error %{public}@", (uint8_t *)v6, 0xCu);
      v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v7, 1, v9);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

    }
    else
    {

      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }
    swift_errorRelease(v1);
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
  {
    if (qword_1010EA360 != -1)
      swift_once(&qword_1010EA360, sub_100BA444C);
    v54 = *(_QWORD *)(v0 + 576);
    v56 = *(_QWORD *)(v0 + 584);
    v10 = *(_QWORD *)(v0 + 296);
    v11 = *(_QWORD *)(v0 + 272);
    v47 = *(_QWORD *)(v0 + 288);
    v49 = *(_QWORD *)(v0 + 280);
    v12 = *(_QWORD *)(v0 + 264);
    v13 = *(_QWORD *)(v0 + 232);
    v15 = *(_QWORD *)(v0 + 200);
    v14 = *(_QWORD *)(v0 + 208);
    v51 = *(_QWORD *)(v0 + 192);
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 536);
    *(_QWORD *)(v0 + 616) = qword_101116B00;
    Device.id.getter();
    Identifier.id.getter(v15);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v47, v10, v12);
    v16 = *(unsigned __int8 *)(v11 + 80);
    v17 = (v16 + 17) & ~v16;
    v18 = (v49 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = swift_allocObject(&unk_1010B0D18, v18 + 8, v16 | 7);
    *(_QWORD *)(v0 + 624) = v19;
    *(_BYTE *)(v19 + 16) = 1;
    v52(v19 + v17, v47, v12);
    *(_QWORD *)(v19 + v18) = v51;
    v20 = dispatch thunk of Actor.unownedExecutor.getter(v54, v56);
    v22 = v21;
    v23 = sub_100BA6A68;
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 184);
    if (*(_BYTE *)(v29 + 185) != 1)
    {
LABEL_10:
      v24 = *(_QWORD *)(v0 + 328);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 264));
      sub_1000126B0(v24, (uint64_t (*)(_QWORD))&type metadata accessor for DeviceChange);
      *(_QWORD *)(v0 + 632) = *(_QWORD *)(v0 + 520);
      v25 = *(_QWORD *)(v0 + 496);
      v26 = *(_QWORD *)(v0 + 184);
      v27 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(_QWORD *)(v0 + 640) = v27;
      *v27 = v0;
      v27[1] = sub_100BA6B90;
      return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 336), v26, v25, *(_QWORD *)(v0 + 368), v0 + 144);
    }
    if (qword_1010EA368 != -1)
    {
      swift_once(&qword_1010EA368, sub_100BA4484);
      v29 = *(_QWORD *)(v0 + 184);
    }
    v55 = *(_QWORD *)(v0 + 576);
    v57 = *(_QWORD *)(v0 + 584);
    v30 = *(unsigned __int8 *)(v0 + 648);
    v31 = *(_QWORD *)(v0 + 432);
    v32 = *(_QWORD *)(v0 + 416);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v48 = *(_QWORD *)(v0 + 408);
    v33 = *(_QWORD *)(v0 + 392);
    v34 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 248);
    v35 = *(_QWORD *)(v0 + 240);
    v50 = *(_QWORD *)(v0 + 192);
    v36 = *(_QWORD *)(v0 + 176);
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 568);
    *(_QWORD *)(v0 + 592) = qword_101116B08;
    v37 = swift_allocObject(&unk_1010B0CA0, 24, 7);
    *(_QWORD *)(v0 + 600) = v37;
    swift_weakInit(v37 + 16, v29);
    sub_10005972C(v36, v34, type metadata accessor for LocalFindableAccessoryRecord);
    v46(v32, v31, v33);
    v38 = *(unsigned __int8 *)(v35 + 80);
    v39 = (v38 + 24) & ~v38;
    v40 = (v45 + v30 + v39) & ~v30;
    v41 = v30 | v38 | 7;
    v42 = (v48 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_1010B0CF0, v42 + 8, v41);
    *(_QWORD *)(v0 + 608) = v43;
    *(_QWORD *)(v43 + 16) = v37;
    sub_1000126EC(v34, v43 + v39, type metadata accessor for LocalFindableAccessoryRecord);
    v53(v43 + v40, v32, v33);
    *(_QWORD *)(v43 + v42) = v50;
    swift_retain();
    v20 = dispatch thunk of Actor.unownedExecutor.getter(v55, v57);
    v22 = v44;
    v23 = sub_100BA6954;
  }
  return swift_task_switch(v23, v20, v22);
}

uint64_t sub_100BA6954()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[23];
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)(v0[54], &unk_101117250, v0[76]);
  swift_release();
  swift_release();
  return swift_task_switch(sub_100BA69C4, v1, 0);
}

uint64_t sub_100BA69C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[41];
  (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[37], v0[33]);
  sub_1000126B0(v1, (uint64_t (*)(_QWORD))&type metadata accessor for DeviceChange);
  v0[79] = v0[65];
  v2 = v0[62];
  v3 = v0[23];
  v4 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[80] = v4;
  *v4 = v0;
  v4[1] = sub_100BA6B90;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[42], v3, v2, v0[46], v0 + 18);
}

uint64_t sub_100BA6A68()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void (*)(uint64_t, uint64_t))v0[57];
  v2 = v0[52];
  v3 = v0[49];
  v4 = v0[23];
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)(v2, &unk_101117260, v0[78]);
  swift_release();
  v1(v2, v3);
  return swift_task_switch(sub_100BA6AEC, v4, 0);
}

uint64_t sub_100BA6AEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[41];
  (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[37], v0[33]);
  sub_1000126B0(v1, (uint64_t (*)(_QWORD))&type metadata accessor for DeviceChange);
  v0[79] = v0[57];
  v2 = v0[62];
  v3 = v0[23];
  v4 = (_QWORD *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v0[80] = v4;
  *v4 = v0;
  v4[1] = sub_100BA6B90;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[42], v3, v2, v0[46], v0 + 18);
}

uint64_t sub_100BA6B90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 640));
  if (v0)
  {
    v3 = v2[23];
    v4 = sub_100BA6D14;
  }
  else
  {
    v2[65] = v2[79];
    v2[64] = 0;
    v3 = v2[23];
    v4 = sub_100BA5E00;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100BA6C00()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 472));
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 384);
  v7 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 224);
  v17 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA6D14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 472));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v1(v2, v3);
  v7 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 232);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA6E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1011171BC);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_100030654;
  return sub_100BA6E90(a3);
}

uint64_t sub_100BA6E90(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2[7] = a1;
  v2[8] = v1;
  v2[9] = *v1;
  v3 = type metadata accessor for CentralManager.ConnectedState(0);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1011171C0);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_10110F948);
  v2[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[13] = v6;
  v2[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1011171D0);
  v2[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[16] = v8;
  v2[17] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v2[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[19] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v11);
  v2[21] = swift_task_alloc(v11);
  return swift_task_switch(sub_100BA6FA4, v1, 0);
}

uint64_t sub_100BA6FA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = v0[7];
  v2 = v0[21];
  v3 = v0[18];
  v4 = v0[19];
  v5 = type metadata accessor for Logger(0);
  v0[22] = sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[23] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[21];
  v12 = v0[18];
  if (v10)
  {
    v30 = v0[19];
    v13 = swift_slowAlloc(32, -1);
    v31 = swift_slowAlloc(64, -1);
    v32 = v31;
    *(_DWORD *)v13 = 136446723;
    v0[4] = sub_100016940(0xD000000000000021, 0x8000000100EF0B20, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[6] = sub_100016940(v15, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[19] + 8))(v0[21], v0[18]);
  }

  v0[24] = *(_QWORD *)(v0[8] + 136);
  v17 = sub_10001A9A8((uint64_t *)&unk_101117030);
  v18 = type metadata accessor for CentralManager.State(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v17, v22 + 2 * v20, v21 | 7);
  v0[25] = v23;
  *(_OWORD *)(v23 + 16) = xmmword_100E22B10;
  v24 = v23 + v22;
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104);
  v25(v24, enum case for CentralManager.State.poweredOn(_:), v18);
  v25(v24 + v20, enum case for CentralManager.State.restricted(_:), v18);
  v26 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(states:)[1]);
  v0[26] = v26;
  v27 = type metadata accessor for CentralManager(0);
  v0[27] = v27;
  v28 = sub_100006C64(&qword_1010EC468, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v26 = v0;
  v26[1] = sub_100BA7310;
  return CentralManagerProtocol.await(states:)(v23, v27, v28);
}

uint64_t sub_100BA7310()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 64);
    v5 = sub_100BA7AEC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 64);
    swift_bridgeObjectRelease();
    v5 = sub_100BA7384;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100BA7384()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[27];
  v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[23];
  v3 = v0[20];
  v4 = v0[18];
  v5 = v0[7];
  v6 = sub_10001A9A8(&qword_10110F778);
  v7 = sub_10001A9A8(&qword_1010EF7C0);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) | 7);
  v0[29] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v2(v3, v5, v4);
  v9 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v3, v9);
  v10 = sub_100006C64((unint64_t *)&unk_1011171E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v1, v10);
  return swift_task_switch(sub_100BA7494, v11, v12);
}

uint64_t sub_100BA7494()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;

  v1 = v0[28];
  dispatch thunk of CentralManager.connectionEvents(peripheralIdentifiers:)(v0[29]);
  v0[30] = v1;
  if (v1)
  {
    v2 = v0[8];
    v3 = sub_100BA7CAC;
  }
  else
  {
    v4 = v0[8];
    swift_bridgeObjectRelease();
    v3 = sub_100BA7504;
    v2 = v4;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_100BA7504()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  AsyncStream.makeAsyncIterator()(v0[15]);
  v2 = sub_100006C64((unint64_t *)&unk_101116FA0, v1, (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService, (uint64_t)&unk_100E62870);
  v3 = v0[30];
  v0[31] = v2;
  v0[32] = v3;
  v4 = v0[8];
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[33] = v5;
  *v5 = v0;
  v5[1] = sub_100BA75A0;
  return AsyncStream.Iterator.next(isolation:)(v0[11], v4, v2, v0[12]);
}

uint64_t sub_100BA75A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  return swift_task_switch(sub_100BA75F8, v1, 0);
}

uint64_t sub_100BA75F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(uint64_t **)(v0 + 88);
  v2 = sub_10001A9A8(&qword_10110F950);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "centralManager.connectionEvents() terminated", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 80);
    v12 = *v1;
    *(_QWORD *)(v0 + 272) = *v1;
    v13 = sub_1000126EC((uint64_t)v1 + *(int *)(v2 + 48), v11, (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
    static Task<>.checkCancellation()(v13);
    if (!v10)
    {
      v28 = *(_QWORD *)(v0 + 248);
      v30 = *(_QWORD *)(v0 + 72);
      v29 = *(_QWORD *)(v0 + 80);
      v32 = *(_QWORD *)(v0 + 56);
      v31 = *(_QWORD *)(v0 + 64);
      type metadata accessor for Transaction(0);
      *(_QWORD *)(v0 + 280) = static Transaction.$current.getter();
      *(_QWORD *)(v0 + 24) = v12;
      v33 = (_QWORD *)swift_task_alloc(48);
      *(_QWORD *)(v0 + 288) = v33;
      v33[2] = v29;
      v33[3] = v31;
      v33[4] = v32;
      v33[5] = v30;
      v34 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
      swift_retain();
      v35 = (_QWORD *)swift_task_alloc(v34);
      *(_QWORD *)(v0 + 296) = v35;
      *v35 = v0;
      v35[1] = sub_100BA79D4;
      return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v35, v0 + 24, &unk_1011171F8, v33, v31, v28, 0xD000000000000023, 0x8000000100EF0AF0);
    }
    v15 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 80);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    sub_1000126B0(v20, (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
    swift_errorRetain(v10);
    v21 = swift_errorRetain(v10);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138543362;
      swift_errorRetain(v10);
      v26 = _swift_stdlib_bridgeErrorToNSError(v10);
      *(_QWORD *)(v0 + 16) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v24 + 4, v24 + 12);
      *v25 = v26;
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v24, 0xCu);
      v27 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v25, 1, v27);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      swift_errorRelease(v10);
    }
    else
    {
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      swift_errorRelease(v10);

    }
  }
  v37 = *(_QWORD *)(v0 + 160);
  v38 = *(_QWORD *)(v0 + 136);
  v39 = *(_QWORD *)(v0 + 112);
  v41 = *(_QWORD *)(v0 + 80);
  v40 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA79D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 296);
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  v2 += 24;
  v4 = *(_QWORD *)(v2 + 264);
  v5 = *(_QWORD *)(v2 + 40);
  swift_release();
  swift_release();
  swift_task_dealloc(v4);
  if (v0)
    v6 = sub_100BA7E6C;
  else
    v6 = sub_100BA7A60;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100BA7A60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  swift_release();
  v1 = v0[38];
  sub_1000126B0(v0[10], (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
  v0[32] = v1;
  v2 = v0[31];
  v3 = v0[8];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[33] = v4;
  *v4 = v0;
  v4[1] = sub_100BA75A0;
  return AsyncStream.Iterator.next(isolation:)(v0[11], v3, v2, v0[12]);
}

uint64_t sub_100BA7AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 224);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA7CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 240);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA7E6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[38];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[38];
  if (v5)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error processing monitorBluetoothConnections event: %{public}@", (uint8_t *)v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    swift_errorRelease(v6);

  }
  sub_1000126B0(v0[10], (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
  v0[32] = 0;
  v11 = v0[31];
  v12 = v0[8];
  v13 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[33] = v13;
  *v13 = v0;
  v13[1] = sub_100BA75A0;
  return AsyncStream.Iterator.next(isolation:)(v0[11], v12, v11, v0[12]);
}

uint64_t sub_100BA8024(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[17] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v5);
  v2[19] = swift_task_alloc(v5);
  v2[20] = swift_task_alloc(v5);
  return swift_task_switch(sub_100BA80A0, v1, 0);
}

uint64_t sub_100BA80A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  __n128 v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;

  v1 = v0 + 2;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v2 = v0[14];
  v3 = v0[20];
  v4 = v0[16];
  v5 = v0[17];
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_101116AE0);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v7 = v45(v3, v2, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[20];
  v12 = v0[16];
  if (v10)
  {
    v41 = v0[17];
    v13 = swift_slowAlloc(32, -1);
    v43 = swift_slowAlloc(64, -1);
    v46 = v43;
    *(_DWORD *)v13 = 136446723;
    v0[11] = sub_100016940(0xD00000000000001ALL, 0x8000000100EF09C0, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2160;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[13] = sub_100016940(v15, v16, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    v17 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v17(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    v18 = v13;
    v1 = v0 + 2;
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0[17] + 8);
    v17(v11, v12);
  }

  v19 = (_QWORD *)(v0[15] + 216);
  v20 = swift_beginAccess(v19, v1, 0, 0);
  if (!*(_QWORD *)(*v19 + 16)
    || (v21 = v0[14],
        swift_bridgeObjectRetain(*v19),
        sub_100003FB0(v21),
        LOBYTE(v21) = v22,
        swift_bridgeObjectRelease(),
        (v21 & 1) == 0))
  {
    v23 = v0 + 5;
    v24 = v45;
    v25 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, __n128))v45)(v0[19], v0[14], v0[16], v20);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    v28 = os_log_type_enabled(v26, v27);
    v29 = v0[19];
    v30 = v0[16];
    if (v28)
    {
      v44 = v17;
      v31 = swift_slowAlloc(32, -1);
      v42 = swift_slowAlloc(64, -1);
      v46 = v42;
      *(_DWORD *)v31 = 136446723;
      v0[8] = sub_100016940(0xD00000000000001ALL, 0x8000000100EF09C0, &v46);
      v24 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2160;
      v0[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v31 + 14, v31 + 22);
      *(_WORD *)(v31 + 22) = 2081;
      v32 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v30, v32);
      v0[10] = sub_100016940(v33, v34, &v46);
      v23 = v0 + 5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease();
      v44(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s Adding new tracker %{private,mask.hash}s", (uint8_t *)v31, 0x20u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      v35 = v31;
      v17 = v44;
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      v17(v0[19], v0[16]);
    }

    v36 = v0[18];
    v37 = v0[16];
    v24(v36, v0[14], v37);
    swift_beginAccess(v19, v23, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    v46 = *v19;
    *v19 = 0x8000000000000000;
    sub_10010EA48(0, 0, v36, isUniquelyReferenced_nonNull_native);
    *v19 = v46;
    swift_bridgeObjectRelease();
    v17(v36, v37);
    swift_endAccess(v23);
  }
  *(_BYTE *)(v0[15] + 185) = 1;
  v39 = (_QWORD *)swift_task_alloc(dword_1011170EC);
  v0[21] = v39;
  *v39 = v0;
  v39[1] = sub_100BA860C;
  return sub_100BA8678(v0[14]);
}

uint64_t sub_100BA860C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 160);
  v3 = *(_QWORD *)(*v0 + 144);
  v2 = *(_QWORD *)(*v0 + 152);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100BA8678(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[12] = a1;
  v2[13] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[15] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  v2[18] = swift_task_alloc(v5);
  return swift_task_switch(sub_100BA86F4, v1, 0);
}

uint64_t sub_100BA86F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = v0[12];
  v2 = v0[18];
  v3 = v0[14];
  v4 = v0[15];
  v5 = type metadata accessor for Logger(0);
  v0[19] = sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[20] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[18];
  v12 = v0[14];
  if (v10)
  {
    v20 = v0[15];
    v13 = swift_slowAlloc(32, -1);
    v21 = swift_slowAlloc(64, -1);
    v22 = v21;
    *(_DWORD *)v13 = 136446723;
    v0[9] = sub_100016940(0xD00000000000001FLL, 0x8000000100EF09E0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2160;
    v0[10] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[11] = sub_100016940(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0[15] + 8);
    v17(v11, v12);
  }

  v0[21] = v17;
  v18 = (_QWORD *)swift_task_alloc(dword_101116D3C);
  v0[22] = v18;
  *v18 = v0;
  v18[1] = sub_100BA8990;
  return sub_100BA269C(v0[12]);
}

uint64_t sub_100BA8990()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BA8CA4;
  else
    v4 = sub_100BA89F4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 104), 0);
}

uint64_t sub_100BA89F4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 112));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v4 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = swift_slowAlloc(32, -1);
    v12 = swift_slowAlloc(64, -1);
    v14 = v12;
    *(_DWORD *)v6 = 136446723;
    *(_QWORD *)(v0 + 48) = sub_100016940(0xD00000000000001FLL, 0x8000000100EF09E0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2160;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 14, v6 + 22);
    *(_WORD *)(v6 + 22) = 2081;
    v7 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    *(_QWORD *)(v0 + 64) = sub_100016940(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v6 + 24, v6 + 32);
    swift_bridgeObjectRelease();
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Successfully started FAM for %{private,mask.hash}s.", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
  }

  v10 = (_QWORD *)swift_task_alloc(dword_1011170F4);
  *(_QWORD *)(v0 + 192) = v10;
  *v10 = v0;
  v10[1] = sub_100BA8C30;
  return sub_100BAABB4(*(_QWORD *)(v0 + 96));
}

uint64_t sub_100BA8C30()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 136);
  v2 = *(_QWORD *)(*v0 + 144);
  v3 = *(_QWORD *)(*v0 + 128);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 192));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100BA8CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *log;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 112));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v20 = *(_QWORD *)(v0 + 184);
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v5 = *(_QWORD *)(v0 + 128);
    log = v3;
    v6 = *(_QWORD *)(v0 + 112);
    v7 = swift_slowAlloc(42, -1);
    v22 = (uint64_t *)swift_slowAlloc(8, -1);
    v23 = swift_slowAlloc(64, -1);
    v24 = v23;
    *(_DWORD *)v7 = 136446979;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001FLL, 0x8000000100EF09E0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14, v7 + 22);
    *(_WORD *)(v7 + 22) = 2081;
    v8 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    *(_QWORD *)(v0 + 32) = sub_100016940(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease();
    v21(v5, v6);
    *(_WORD *)(v7 + 32) = 2114;
    swift_errorRetain(v20);
    v11 = _swift_stdlib_bridgeErrorToNSError(v20);
    *(_QWORD *)(v0 + 40) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 34, v7 + 42);
    *v22 = v11;
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, log, v4, "%{public}s Failed to start FAM for %{private,mask.hash}s %{public}@", (uint8_t *)v7, 0x2Au);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v22, 1, v12);
    swift_slowDealloc(v22, -1, -1);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v20);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 184);
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    v15 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 112);
    swift_errorRelease(v13);
    v14(v15, v16);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  v17 = (_QWORD *)swift_task_alloc(dword_1011170F4);
  *(_QWORD *)(v0 + 192) = v17;
  *v17 = v0;
  v17[1] = sub_100BA8C30;
  return sub_100BAABB4(*(_QWORD *)(v0 + 96));
}

uint64_t sub_100BA8FC0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BA9020, v1, 0);
}

uint64_t sub_100BA9020()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = v0[5];
  v3 = v0[8];
  v2 = v0[9];
  v4 = v0[7];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[9];
  v11 = v0[7];
  if (v9)
  {
    v18 = v0[8];
    v12 = swift_slowAlloc(32, -1);
    v19 = swift_slowAlloc(64, -1);
    v20 = v19;
    *(_DWORD *)v12 = 136446723;
    v0[2] = sub_100016940(0xD000000000000013, 0x8000000100EF08E0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2081;
    v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[4] = sub_100016940(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  }

  v16 = (_QWORD *)swift_task_alloc(dword_101116D24);
  v0[10] = v16;
  *v16 = v0;
  v16[1] = sub_100BA92AC;
  return sub_100B9EAC8();
}

uint64_t sub_100BA92AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  v3 = (_QWORD *)swift_task_alloc(dword_101117004);
  *(_QWORD *)(v1 + 88) = v3;
  *v3 = v2;
  v3[1] = sub_100BA9314;
  return sub_100B9FB98(*(_QWORD *)(v1 + 40));
}

uint64_t sub_100BA9314()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  v2 = (_QWORD *)swift_task_alloc(dword_101116FE4);
  *(_QWORD *)(v1 + 96) = v2;
  *v2 = v5;
  v2[1] = sub_100BA938C;
  v3 = *(_QWORD *)(v1 + 48);
  v2[2] = v3;
  return swift_task_switch(sub_100BA0390, v3, 0);
}

uint64_t sub_100BA938C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 72);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100BA93E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v4[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v8);
  v4[12] = swift_task_alloc(v8);
  v4[13] = swift_task_alloc(v8);
  v4[14] = swift_task_alloc(v8);
  v9 = type metadata accessor for CentralManager.ConnectedState(0);
  v4[15] = v9;
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BA9498, a3, 0);
}

uint64_t sub_100BA9498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  void (*v5)(_QWORD, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  v57 = (_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 80);
  sub_10005972C(*(_QWORD *)(v0 + 48), v2, (uint64_t (*)(_QWORD))&type metadata accessor for CentralManager.ConnectedState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v1);
  v5 = *(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 72);
  if (EnumCaseMultiPayload != 1)
  {
    v5(*(_QWORD *)(v0 + 112), v6, v7);
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v24 = *(_QWORD *)(v0 + 104);
    v25 = *(_QWORD *)(v0 + 112);
    v26 = *(_QWORD *)(v0 + 72);
    v27 = *(_QWORD *)(v0 + 80);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_101116AE0);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v24, v25, v26);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 112);
    v36 = *(_QWORD *)(v0 + 72);
    v35 = *(_QWORD *)(v0 + 80);
    if (v32)
    {
      v56 = *(_QWORD *)(v0 + 80);
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(32, -1);
      v58 = v38;
      *(_DWORD *)v37 = 141558275;
      *v57 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v0 + 40, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      v39 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v36, v39);
      *(_QWORD *)(v0 + 40) = sub_100016940(v40, v41, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      v42 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v42(v33, v36);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Disconnected from %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      v42 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v42(v33, v36);
    }
    v42(v34, v36);
    *(_BYTE *)(*(_QWORD *)(v0 + 56) + 184) = 1;
    goto LABEL_18;
  }
  v5(*(_QWORD *)(v0 + 96), v6, v7);
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_101116AE0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v9, v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 72);
  if (v16)
  {
    v54 = *(_QWORD *)(v0 + 80);
    v19 = swift_slowAlloc(22, -1);
    v55 = swift_slowAlloc(32, -1);
    v58 = v55;
    *(_DWORD *)v19 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v20 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v18, v20);
    *(_QWORD *)(v0 + 24) = sub_100016940(v21, v22, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v57, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    v23 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v23(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Connected to %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 8);
    v23(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  *(_QWORD *)(v0 + 136) = v23;
  v44 = *(_QWORD *)(v0 + 56);
  if (*(_BYTE *)(v44 + 184) != 1)
  {
    v23(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
LABEL_18:
    v50 = *(_QWORD *)(v0 + 104);
    v51 = *(_QWORD *)(v0 + 112);
    v53 = *(_QWORD *)(v0 + 88);
    v52 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v51);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v45 = Logger.logObject.getter(v43);
  v46 = static os_log_type_t.default.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Restarting FAM uppon reconnection", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  *(_BYTE *)(v44 + 184) = 0;
  v48 = (_QWORD *)swift_task_alloc(dword_101116D3C);
  *(_QWORD *)(v0 + 144) = v48;
  *v48 = v0;
  v48[1] = sub_100BA9A10;
  return sub_100BA269C(*(_QWORD *)(v0 + 64));
}

uint64_t sub_100BA9A10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BA9AE8;
  else
    v4 = sub_100BA9A74;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_100BA9A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, _QWORD))(v0 + 136))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA9AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD))(v0 + 136))(v4, *(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BA9B64(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 24) = a2;
  *(_BYTE *)(v2 + 60) = a1;
  v3 = type metadata accessor for Device(0);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BA9BC8, 0, 0);
}

uint64_t sub_100BA9BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 32);
  if (v9)
  {
    v19 = *(_QWORD *)(v0 + 40);
    v12 = *(unsigned __int8 *)(v0 + 60);
    v13 = swift_slowAlloc(18, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 67109378;
    *(_DWORD *)(v0 + 56) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 60, v13 + 4, v13 + 8);
    *(_WORD *)(v13 + 8) = 2080;
    v15 = sub_100006C64(&qword_101117268, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Device, (uint64_t)&protocol conformance descriptor for Device);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
    *(_QWORD *)(v0 + 16) = sub_100016940(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 10, v13 + 18);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[Throttled every 2 seconds] isFastAdvertising:%{BOOL}d device:%s", (uint8_t *)v13, 0x12u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_100BA9DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;

  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[13] = swift_task_alloc(v4);
  v3[14] = swift_task_alloc(v4);
  return swift_task_switch(sub_100BA9E64, 0, 0);
}

uint64_t sub_100BA9E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 80) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 120) = Strong;
  if (Strong)
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v3 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 128) = sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
    v6 = sub_10005972C(v4, v3, type metadata accessor for LocalFindableAccessoryRecord);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 112);
    if (v9)
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(32, -1);
      v20 = v12;
      *(_DWORD *)v11 = 141558275;
      *(_QWORD *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2081;
      v13 = type metadata accessor for UUID(0);
      v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      *(_QWORD *)(v0 + 72) = sub_100016940(v15, v16, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Putting beacon %{private,mask.hash}s back into FAM", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for LocalFindableAccessoryRecord);
    }

    v19 = (_QWORD *)swift_task_alloc(dword_101116D3C);
    *(_QWORD *)(v0 + 136) = v19;
    *v19 = v0;
    v19[1] = sub_100BAA120;
    return sub_100BA269C(*(_QWORD *)(v0 + 96));
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 120) != 0);
  }
}

uint64_t sub_100BAA120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BAA1D0;
  else
    v3 = sub_100BAA184;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BAA184()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 120) != 0);
}

uint64_t sub_100BAA1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 144);
  sub_10005972C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 104), type metadata accessor for LocalFindableAccessoryRecord);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = swift_slowAlloc(32, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 40) = 1752392040;
    v20 = v19;
    *(_DWORD *)v7 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v8 = type metadata accessor for UUID(0);
    v9 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    *(_QWORD *)(v0 + 48) = sub_100016940(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v6, type metadata accessor for LocalFindableAccessoryRecord);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 56) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 24, v7 + 32);
    *v18 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to put beacon %{private,mask.hash}s back into FAM %{public}@", (uint8_t *)v7, 0x20u);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v18, 1, v13);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    swift_release();

    swift_errorRelease(v5);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 104);
    swift_release();
    swift_errorRelease(v14);
    sub_1000126B0(v15, type metadata accessor for LocalFindableAccessoryRecord);
    swift_errorRelease(v14);
    swift_errorRelease(v14);

  }
  v16 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 120) != 0);
}

uint64_t sub_100BAA4B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[19] = a1;
  v2[20] = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v2[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[23] = v5;
  v2[24] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v2[25] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[26] = v7;
  v2[27] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BAA564, 0, 0);
}

uint64_t sub_100BAA564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);

  v1 = *(_QWORD *)(v0 + 152) + 16;
  swift_beginAccess(v1, v0 + 96, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 224) = Strong;
  if (Strong)
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_101116AE0);
    *(_QWORD *)(v0 + 232) = v4;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Saving detected-nearby event with throttle", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = qword_1010EA5B0;
    swift_retain();
    if (v8 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 120, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v13 = (uint64_t (*)(void))((char *)&dword_1010EBC18 + dword_1010EBC18);
      v10 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
      *(_QWORD *)(v0 + 240) = v10;
      *v10 = v0;
      v10[1] = sub_100BAA798;
      return v13();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 224) != 0);
  }
  return result;
}

uint64_t sub_100BAA798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BAA7F4, 0, 0);
}

uint64_t sub_100BAA7F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 248))
  {
    v3 = *(_QWORD *)(v0 + 184);
    v2 = *(_QWORD *)(v0 + 192);
    v5 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 176);
    v6 = *(_QWORD *)(v0 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
    v7 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v2, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_10110F8E4);
    *(_QWORD *)(v0 + 256) = v8;
    *v8 = v0;
    v8[1] = sub_100BAAAC4;
    return sub_1009B1A14(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 168));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v10 = sub_100033220();
    v11 = swift_allocError(&type metadata for DaemonError, v10, 0, 0);
    *v12 = 0xD000000000000014;
    v12[1] = 0x8000000100EF0800;
    swift_willThrow(v11);
    swift_errorRetain(v11);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138543362;
      swift_errorRetain(v11);
      v18 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(_QWORD *)(v0 + 144) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v16 + 4, v16 + 12);
      *v17 = v18;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to save detected-nearby event %{public}@", v16, 0xCu);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v11);
      swift_release();
    }
    else
    {
      swift_release();
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);

    }
    swift_errorRelease(v11);
    v20 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 224) != 0);
  }
}

uint64_t sub_100BAAAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 216);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  sub_100004048(v4, &qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100BAAB4C, 0, 0);
}

uint64_t sub_100BAAB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 224));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 224) != 0);
}

uint64_t sub_100BAABB4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  v2[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[11] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v7);
  v2[13] = swift_task_alloc(v7);
  return swift_task_switch(sub_100BAAC54, v1, 0);
}

uint64_t sub_100BAAC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 72);
  if (v10)
  {
    v32 = *(_QWORD *)(v0 + 80);
    v13 = swift_slowAlloc(32, -1);
    v33 = swift_slowAlloc(64, -1);
    v36 = v33;
    *(_DWORD *)v13 = 136446723;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001DLL, 0x8000000100EF0A00, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    *(_QWORD *)(v0 + 32) = sub_100016940(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72));
  }

  v17 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 72);
  v22 = *(_QWORD *)(v0 + 48);
  v34 = *(_QWORD *)(v0 + 56);
  v35 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 40);
  v24 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v20, 1, 1, v24);
  v6(v17, v23, v21);
  v26 = sub_100006C64((unint64_t *)&unk_101116FA0, v25, (uint64_t (*)(uint64_t))type metadata accessor for BTFindingService, (uint64_t)&unk_100E62870);
  v27 = *(unsigned __int8 *)(v19 + 80);
  v28 = (v27 + 40) & ~v27;
  v29 = (v18 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (char *)swift_allocObject(&unk_1010B0B10, v29 + 8, v27 | 7);
  *((_QWORD *)v30 + 2) = v22;
  *((_QWORD *)v30 + 3) = v26;
  *((_QWORD *)v30 + 4) = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(&v30[v28], v17, v21);
  *(_QWORD *)&v30[v29] = v34;
  swift_retain_n(v22, 2);
  sub_100691AC0(v20, (uint64_t)&unk_101117100, (uint64_t)v30);
  swift_release();
  swift_task_dealloc(v35);
  swift_task_dealloc(v17);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAAFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v8 = type metadata accessor for UUID(0);
  v6[5] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[6] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[7] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[8] = swift_task_alloc(v11);
  v6[9] = swift_task_alloc(v11);
  v6[10] = swift_task_alloc(v11);
  v12 = (_QWORD *)swift_task_alloc(dword_10111710C);
  v6[11] = v12;
  *v12 = v6;
  v12[1] = sub_100BAB074;
  return sub_100BAB3E4(a5);
}

uint64_t sub_100BAB074(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *(_BYTE *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BAB0D4, v3, 0);
}

uint64_t sub_100BAB0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);

  if (*(_BYTE *)(v0 + 104) == 1)
  {
    v1 = *(_QWORD *)(v0 + 80);
    v2 = *(_QWORD *)(v0 + 56);
    v30 = *(_QWORD *)(v0 + 64);
    v31 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 24);
    v32 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 16);
    v26 = v5;
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v33(v1, v5, v3);
    v7 = *(unsigned __int8 *)(v4 + 80);
    v8 = (v7 + 24) & ~v7;
    v25 = v7 | 7;
    v2 += 7;
    v28 = ((v8 + v2) & 0xFFFFFFFFFFFFFFF8) + 8;
    v29 = v8;
    v9 = (v8 + v2) & 0xFFFFFFFFFFFFFFF8;
    v27 = v9;
    v10 = swift_allocObject(&unk_1010B0B38, v28, v7 | 7);
    *(_QWORD *)(v10 + 16) = v6;
    v11 = v10 + v8;
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v12(v11, v1, v3);
    *(_QWORD *)(v10 + v9) = v32;
    v33(v31, v26, v3);
    v13 = (v7 + 16) & ~v7;
    v14 = (v13 + v2) & 0xFFFFFFFFFFFFFFF8;
    v15 = swift_allocObject(&unk_1010B0B60, v14 + 8, v25);
    v12(v15 + v13, v31, v3);
    *(_QWORD *)(v15 + v14) = v32;
    v16 = swift_retain();
    UUID.init()(v16);
    v17 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v30, &unk_101117118, v10, &unk_101117128, v15);
    v33(v1, v26, v3);
    v18 = swift_allocObject(&unk_1010B0B88, v28, v25);
    *(_QWORD *)(v18 + 16) = v6;
    v12(v18 + v29, v1, v3);
    *(_QWORD *)(v18 + v27) = v17;
    swift_retain();
    v19 = swift_retain();
    UUID.init()(v19);
    v20 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v31, &unk_101117138, v18, &unk_101117140, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v20);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v17);
    swift_release();
    swift_release();
    v21 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v24 = (_QWORD *)swift_task_alloc(dword_101116D2C);
    *(_QWORD *)(v0 + 96) = v24;
    *v24 = v0;
    v24[1] = sub_100BAB384;
    return sub_100BA0BE0();
  }
}

uint64_t sub_100BAB384()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = *(_QWORD **)v0;
  v6 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  v3 = v1[9];
  v2 = v1[10];
  v4 = v1[8];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_100BAB3E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[13] = a1;
  v2[14] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[16] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v5);
  v2[18] = swift_task_alloc(v5);
  return swift_task_switch(sub_100BAB454, v1, 0);
}

uint64_t sub_100BAB454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (sub_100B99BE0())
  {
    v1 = *(_QWORD *)(v0 + 112);
    swift_beginAccess(v1 + 216, v0 + 16, 0, 0);
    v2 = *(_QWORD *)(v1 + 216);
    if (*(_QWORD *)(v2 + 16))
    {
      v3 = *(_QWORD *)(v0 + 104);
      swift_bridgeObjectRetain(v2);
      v4 = sub_100003FB0(v3);
      if ((v5 & 1) != 0)
      {
        v6 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v4);
        *(_QWORD *)(v0 + 152) = *v6;
        *(_QWORD *)(v0 + 160) = v6[1];
        swift_retain();
        swift_bridgeObjectRelease();
        return swift_task_switch(sub_100BAB860, 0, 0);
      }
      swift_bridgeObjectRelease();
    }
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v15 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 104);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_101116AE0);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v24 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 120);
    if (v22)
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v32 = v27;
      *(_DWORD *)v26 = 141558275;
      *(_QWORD *)(v0 + 48) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      v28 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v25, v28);
      *(_QWORD *)(v0 + 56) = sub_100016940(v29, v30, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing tracker for %{private,mask.hash}s. Not extending FAM", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v24 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    }

  }
  else
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_101116AE0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v32 = v13;
      *(_DWORD *)v12 = 136446210;
      *(_QWORD *)(v0 + 40) = sub_100016940(0xD000000000000023, 0x8000000100EF0A60, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s No active client. Not extending FAM", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  v31 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100BAB860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 168) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 176) = v3;
  *v3 = v0;
  v3[1] = sub_100BAB910;
  return unsafeBlocking<A>(_:)(v0 + 64, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BAB910()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release();
  return swift_task_switch(sub_100BAB96C, 0, 0);
}

uint64_t sub_100BAB96C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[14];
  v0[23] = v0[8];
  return swift_task_switch(sub_100BAB988, v1, 0);
}

uint64_t sub_100BAB988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = sub_100C1BC60(*(_QWORD *)(v0 + 184));
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_101116AE0);
    v20 = swift_retain();
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = *(_QWORD *)(v0 + 160);
      v24 = swift_slowAlloc(22, -1);
      *(_DWORD *)v24 = 134218240;
      *(_QWORD *)(v0 + 72) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2048;
      *(_QWORD *)(v0 + 80) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v24 + 14, v24 + 22);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Exceeded max number of extensions allowed! Limit: %ld Current: %ld.", (uint8_t *)v24, 0x16u);
      swift_slowDealloc(v24, -1, -1);

      swift_release();
LABEL_20:
      v33 = 0;
      goto LABEL_21;
    }
    v25 = *(_QWORD *)(v0 + 152);

    v18 = v25;
    goto LABEL_12;
  }
  v3 = *(_QWORD *)(v0 + 152);
  v4 = qword_1010EA350;
  if (v3)
  {
    swift_retain();
    if (v4 != -1)
    {
      swift_once(&qword_1010EA350, sub_100B99B50);
      v3 = *(_QWORD *)(v0 + 152);
    }
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
    v6 = swift_retain_n(v3, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 152);
    if (!v9)
    {

      v18 = v10;
      v26 = 4;
      goto LABEL_19;
    }
    v11 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 120);
    v36 = *(_QWORD *)(v0 + 128);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v38 = v37;
    *(_DWORD *)v13 = 136446210;
    WorkItemQueue.WorkItem.id.getter();
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v11, v12);
    *(_QWORD *)(v0 + 96) = sub_100016940(v15, v17, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v10, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found existing task %{public}s. Not scheduling extension.", v13, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v18 = v10;
LABEL_12:
    v26 = 2;
LABEL_19:
    swift_release_n(v18, v26);
    goto LABEL_20;
  }
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_101116AE0);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = *(_QWORD *)(v0 + 160);
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v32 = 134217984;
    *(_QWORD *)(v0 + 88) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v32 + 4, v32 + 12);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Extending FAM with current counter: %ld", v32, 0xCu);
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = 1;
LABEL_21:
  v34 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v33);
}

uint64_t sub_100BABE04(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for ContinuousClock(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v7);
  v2[16] = swift_task_alloc(v7);
  return swift_task_switch(sub_100BABE9C, 0, 0);
}

uint64_t sub_100BABE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 136) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 144) = v3;
  *v3 = v0;
  v3[1] = sub_100BABF4C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BABF4C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_release();
  return swift_task_switch(sub_100BABFA8, 0, 0);
}

uint64_t sub_100BABFA8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[19] = v0[2];
  return swift_task_switch(sub_100BABFC4, v1, 0);
}

uint64_t sub_100BABFC4()
{
  uint64_t *v0;
  double v1;
  double v2;
  uint64_t v3;

  sub_100C1BD6C(v0[19]);
  v2 = v1;
  swift_bridgeObjectRelease();
  v0[20] = static Duration.seconds(_:)(v2);
  v0[21] = v3;
  return swift_task_switch(sub_100BAC01C, 0, 0);
}

uint64_t sub_100BAC01C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v27;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = v0[16];
  v2 = v0[13];
  v3 = v0[14];
  v4 = v0[9];
  v5 = type metadata accessor for Logger(0);
  v0[22] = sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[23] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v23 = v0[20];
    v24 = v0[21];
    v10 = v0[16];
    v11 = v0[13];
    v22 = v0[14];
    v12 = swift_slowAlloc(32, -1);
    v25 = swift_slowAlloc(64, -1);
    v27 = v25;
    *(_DWORD *)v12 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[6] = sub_100016940(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    v16 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v16(v10, v11);
    *(_WORD *)(v12 + 22) = 2080;
    v17 = Duration.description.getter(v23, v24);
    v0[7] = sub_100016940(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Will extend FAM for %{private,mask.hash}s after %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v0[14] + 8);
    v16(v0[16], v0[13]);
  }

  v0[24] = v16;
  ContinuousClock.init()(v19);
  v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_101117148 + dword_101117148);
  v20 = (_QWORD *)swift_task_alloc(unk_10111714C);
  v0[25] = v20;
  *v20 = v0;
  v20[1] = sub_100BAC2E4;
  return v26(v0[20], v0[21], 0, 0, 1);
}

uint64_t sub_100BAC2E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v5 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 96);
  v6 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    v7 = sub_100BAC374;
    v8 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 64);
    v7 = sub_100BAC3C4;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100BAC374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAC3C4()
{
  uint64_t v0;

  sub_100BAC660(*(_QWORD *)(v0 + 72));
  return swift_task_switch(sub_100BAC400, 0, 0);
}

uint64_t sub_100BAC400()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 104));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
    v4 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 24) = 1752392040;
    v14 = v7;
    *(_DWORD *)v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v8 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 32) = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    v13(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Extending FAM for %{private,mask.hash}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  }

  v11 = (_QWORD *)swift_task_alloc(dword_1011170EC);
  *(_QWORD *)(v0 + 216) = v11;
  *v11 = v0;
  v11[1] = sub_100BAC5F8;
  return sub_100BA8678(*(_QWORD *)(v0 + 72));
}

uint64_t sub_100BAC5F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = *(_QWORD **)v0;
  v6 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  v3 = v1[15];
  v2 = v1[16];
  v4 = v1[12];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

void sub_100BAC660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  _BYTE v57[16];
  uint64_t v58;
  uint64_t v59[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v49 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v49 - v12;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_101116AE0);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16 = v55(v13, a1, v4);
  v54 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(32, -1);
    v53 = v8;
    v20 = v19;
    v50 = swift_slowAlloc(64, -1);
    v59[0] = v50;
    *(_DWORD *)v20 = 136446723;
    v56 = sub_100016940(0xD000000000000012, 0x8000000100EF0A40, v59);
    v52 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2160;
    v56 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    v51 = v2;
    v21 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v4, v21);
    v56 = sub_100016940(v22, v23, v59);
    v2 = v51;
    a1 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    v24 = v13;
    v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26 = v4;
    v25(v24, v4);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s for %{private,mask.hash}s", (uint8_t *)v20, 0x20u);
    v27 = v50;
    swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v28 = v20;
    v8 = v53;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v29 = v13;
    v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26 = v4;
    v25(v29, v4);
  }

  v30 = v2;
  v31 = (uint64_t *)(v2 + 216);
  v32 = swift_beginAccess(v31, v59, 0, 0);
  v33 = *(_QWORD *)(v30 + 216);
  v34 = v26;
  if (*(_QWORD *)(v33 + 16))
  {
    swift_bridgeObjectRetain(v33);
    v35 = sub_100003FB0(a1);
    if ((v36 & 1) != 0)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 16 * v35 + 8);
      swift_bridgeObjectRelease();
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        v55(v11, a1, v26);
        swift_beginAccess(v31, &v56, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
        v58 = *v31;
        *v31 = 0x8000000000000000;
        sub_10010EA48(0, v39, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
        *v31 = v58;
        swift_bridgeObjectRelease();
        v25(v11, v26);
        swift_endAccess(&v56);
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  v41 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v55)(v8, a1, v26, v32);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = swift_slowAlloc(22, -1);
    v45 = swift_slowAlloc(32, -1);
    v56 = v45;
    *(_DWORD *)v44 = 141558275;
    v58 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2081;
    v46 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v34, v46);
    v58 = sub_100016940(v47, v48, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease();
    v25(v8, v34);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "clearTracker: no tracker for %{private,mask.hash}s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    v25(v8, v34);
  }

}

uint64_t sub_100BACBA8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_BYTE *)(v3 + 160) = a2;
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = a3;
  v4 = type metadata accessor for CancellationError(0);
  *(_QWORD *)(v3 + 96) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 104) = v5;
  *(_QWORD *)(v3 + 112) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 120) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 128) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 144) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v8);
  return swift_task_switch(sub_100BACC50, 0, 0);
}

uint64_t sub_100BACC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v64;
  os_log_type_t type;
  os_log_t log;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if ((*(_BYTE *)(v0 + 160) & 1) != 0)
  {
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 16) = v20;
    swift_errorRetain(v20);
    swift_errorRetain(v20);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if ((swift_dynamicCast(v18, v0 + 16, v21, v19, 6) & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
      if (qword_1010EA350 != -1)
        swift_once(&qword_1010EA350, sub_100B99B50);
      v22 = *(_QWORD *)(v0 + 144);
      v23 = *(_QWORD *)(v0 + 120);
      v24 = *(_QWORD *)(v0 + 128);
      v25 = *(_QWORD *)(v0 + 88);
      v26 = type metadata accessor for Logger(0);
      sub_10001A9E8(v26, (uint64_t)qword_101116AE0);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v25, v23);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter(v28);
      v30 = os_log_type_enabled(v28, v29);
      v31 = *(_QWORD *)(v0 + 144);
      v33 = *(_QWORD *)(v0 + 120);
      v32 = *(_QWORD *)(v0 + 128);
      if (!v30)
      {
        sub_10010F948(*(_QWORD *)(v0 + 80), 1);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);

        goto LABEL_19;
      }
      log = *(os_log_t *)(v0 + 128);
      v67 = *(_QWORD *)(v0 + 80);
      v34 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(32, -1);
      v69 = v35;
      *(_DWORD *)v34 = 141558275;
      *(_QWORD *)(v0 + 48) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      v36 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v33, v36);
      *(_QWORD *)(v0 + 56) = sub_100016940(v37, v38, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))log[1].isa)(v31, v33);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "FAM extension cancelled for %{private,mask.hash}s.", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      v39 = v67;
    }
    else
    {
      if (qword_1010EA350 != -1)
        swift_once(&qword_1010EA350, sub_100B99B50);
      v41 = *(_QWORD *)(v0 + 128);
      v40 = *(_QWORD *)(v0 + 136);
      v42 = *(_QWORD *)(v0 + 120);
      v44 = *(_QWORD *)(v0 + 80);
      v43 = *(_QWORD *)(v0 + 88);
      v45 = type metadata accessor for Logger(0);
      sub_10001A9E8(v45, (uint64_t)qword_101116AE0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v43, v42);
      sub_1002437C4(v44, 1);
      v46 = swift_errorRetain(v20);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      v49 = os_log_type_enabled(v47, v48);
      v51 = *(_QWORD *)(v0 + 128);
      v50 = *(_QWORD *)(v0 + 136);
      v52 = *(_QWORD *)(v0 + 120);
      v53 = *(_QWORD *)(v0 + 80);
      if (!v49)
      {
        sub_10010F948(*(_QWORD *)(v0 + 80), 1);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
        sub_10010F948(v53, 1);
        sub_10010F948(v53, 1);

        goto LABEL_19;
      }
      type = v48;
      v54 = swift_slowAlloc(32, -1);
      v64 = (uint64_t *)swift_slowAlloc(8, -1);
      v68 = swift_slowAlloc(32, -1);
      v69 = v68;
      *(_DWORD *)v54 = 141558531;
      *(_QWORD *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2081;
      v55 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v52, v55);
      *(_QWORD *)(v0 + 32) = sub_100016940(v56, v57, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
      *(_WORD *)(v54 + 22) = 2114;
      swift_errorRetain(v20);
      v58 = _swift_stdlib_bridgeErrorToNSError(v20);
      *(_QWORD *)(v0 + 40) = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v54 + 24, v54 + 32);
      *v64 = v58;
      sub_10010F948(v53, 1);
      sub_10010F948(v53, 1);
      _os_log_impl((void *)&_mh_execute_header, v47, type, "FAM extension failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v54, 0x20u);
      v59 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v64, 1, v59);
      swift_slowDealloc(v64, -1, -1);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v54, -1, -1);

      v39 = v53;
    }
    sub_10010F948(v39, 1);
  }
  else
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v1 = *(_QWORD *)(v0 + 152);
    v2 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_101116AE0);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    if (v9)
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(32, -1);
      v69 = v14;
      *(_DWORD *)v13 = 141558275;
      *(_QWORD *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
      *(_QWORD *)(v0 + 72) = sub_100016940(v16, v17, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "FAM extension succeeded for %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));

    }
  }
LABEL_19:
  v60 = *(_QWORD *)(v0 + 144);
  v61 = *(_QWORD *)(v0 + 136);
  v62 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAD3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100BAD3E0, a1, 0);
}

uint64_t sub_100BAD3E0()
{
  uint64_t v0;

  sub_100BAD418(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100BAD418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];
  uint64_t v55;
  uint64_t v56[3];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v49 = (char *)&v46 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - v11;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_101116AE0);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15 = v51(v12, a1, v4);
  v50 = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(32, -1);
    v47 = a1;
    v19 = v18;
    v46 = swift_slowAlloc(64, -1);
    v56[0] = v46;
    *(_DWORD *)v19 = 136446723;
    v53 = sub_100016940(0xD000000000000019, 0x8000000100EF0A20, v56);
    v48 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2160;
    v53 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v19 + 14, v19 + 22);
    *(_WORD *)(v19 + 22) = 2081;
    v20 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v4, v20);
    v53 = sub_100016940(v21, v22, v56);
    a2 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v19 + 24, v19 + 32);
    swift_bridgeObjectRelease();
    v23 = v12;
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v23, v4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s for %{private,mask.hash}s", (uint8_t *)v19, 0x20u);
    v25 = v46;
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v26 = v19;
    a1 = v47;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    v27 = v12;
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v27, v4);
  }

  v28 = v52;
  v29 = (uint64_t *)(v52 + 216);
  v30 = swift_beginAccess(v52 + 216, v56, 0, 0);
  v31 = *(_QWORD *)(v28 + 216);
  if (*(_QWORD *)(v31 + 16))
  {
    swift_bridgeObjectRetain(v31);
    v32 = sub_100003FB0(a1);
    if ((v33 & 1) != 0)
    {
      v34 = a1;
      v35 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 16 * v32 + 8);
      swift_bridgeObjectRelease();
      v36 = (uint64_t)v49;
      v51(v49, v34, v4);
      swift_beginAccess(v29, &v53, 33, 0);
      swift_retain_n(a2, 2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
      v55 = *v29;
      *v29 = 0x8000000000000000;
      sub_10010EA48(a2, v35, v36, isUniquelyReferenced_nonNull_native);
      *v29 = v55;
      swift_bridgeObjectRelease();
      v24((char *)v36, v4);
      swift_endAccess(&v53);
      swift_release();
      return;
    }
    swift_bridgeObjectRelease();
  }
  v38 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v51)(v8, a1, v4, v30);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(32, -1);
    v53 = v42;
    *(_DWORD *)v41 = 141558275;
    v55 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v41 + 4, v41 + 12);
    *(_WORD *)(v41 + 12) = 2081;
    v43 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v4, v43);
    v55 = sub_100016940(v44, v45, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    v24(v8, v4);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "addTracker: missing tracker for %{private,mask.hash}s!", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    v24(v8, v4);
  }

}

uint64_t sub_100BAD96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v8;

  v5[2] = a4;
  v5[3] = a5;
  v8 = (_QWORD *)swift_task_alloc(dword_101116D04);
  v5[4] = v8;
  *v8 = v5;
  v8[1] = sub_100BAD9D4;
  return sub_100B9AB7C(a2, a3);
}

uint64_t sub_100BAD9D4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return swift_task_switch(sub_100BADA28, 0, 0);
}

uint64_t sub_100BADA28()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BADA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v36 = *v3;
  v37 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - v9;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_101116AE0);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13 = v12(v10, a1, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v33 = v12;
    v17 = v16;
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 141558275;
    v40 = 1752392040;
    v41 = v18;
    v34 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    v32 = v17 + 14;
    v19 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    v40 = sub_100016940(v20, v21, &v41);
    a1 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v32, v17 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Start BT Finding for beacon %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    v12 = v33;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction(0);
  v23 = v35;
  v12(v35, a1, v5);
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_1010B0BD8, v27 + 8, v24 | 7);
  *(_QWORD *)(v28 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v28 + v25, v23, v5);
  v29 = (_QWORD *)(v28 + v26);
  v30 = v39;
  *v29 = v37;
  v29[1] = v30;
  *(_QWORD *)(v28 + v27) = v36;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BTFindingService.startBTFinding", 31, 2, &unk_101117168, v28);
  return swift_release();
}

uint64_t sub_100BADD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v4[28] = v5;
  v4[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v4[30] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[31] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[32] = swift_task_alloc(v8);
  v4[33] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v4[34] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[35] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[36] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v12);
  v4[38] = swift_task_alloc(v12);
  v4[39] = swift_task_alloc(v12);
  v4[40] = swift_task_alloc(v12);
  return swift_task_switch(sub_100BADE80, 0, 0);
}

uint64_t sub_100BADE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 328) = v3;
    *v3 = v0;
    v3[1] = sub_100BADF80;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BADF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BADFDC, 0, 0);
}

uint64_t sub_100BADFDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0[42];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v2 = v0[40];
    v3 = v0[34];
    v4 = v0[35];
    v5 = v0[25];
    v6 = type metadata accessor for Logger(0);
    v0[43] = sub_10001A9E8(v6, (uint64_t)qword_101116AE0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v0[44] = v7;
    v8 = v7(v2, v5, v3);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = v0[40];
    v13 = v0[34];
    if (v11)
    {
      v30 = v0[35];
      v14 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(32, -1);
      v32 = v31;
      *(_DWORD *)v14 = 141558275;
      v0[22] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
      v0[23] = sub_100016940(v16, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      v18 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v18(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking if we have LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v18 = *(void (**)(uint64_t, uint64_t))(v0[35] + 8);
      v18(v0[40], v0[34]);
    }

    v0[45] = v18;
    v21 = v0[39];
    v23 = v0[35];
    v22 = v0[36];
    v24 = v0[34];
    v7(v21, v0[25], v24);
    v25 = *(unsigned __int8 *)(v23 + 80);
    v26 = (v25 + 24) & ~v25;
    v27 = swift_allocObject(&unk_1010B0C00, v26 + v22, v25 | 7);
    v0[46] = v27;
    *(_QWORD *)(v27 + 16) = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v27 + v26, v21, v24);
    v28 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v29 = (_QWORD *)swift_task_alloc(v28);
    v0[47] = v29;
    *v29 = v0;
    v29[1] = sub_100BAE308;
    return withTimeout<A>(_:block:)(v0[29], 0x8AC7230489E80000, 0, &unk_101117178, v27, v0[28]);
  }
  else
  {
    v19 = (_QWORD *)swift_task_alloc(dword_101116D0C);
    v0[51] = v19;
    *v19 = v0;
    v19[1] = sub_100BAE6B4;
    return sub_100B9B370(v0[25]);
  }
}

uint64_t sub_100BAE308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100BAE994;
  }
  else
  {
    swift_release();
    v3 = sub_100BAE374;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BAE374()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = v0[29];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[31] + 48))(v1, 1, v0[30]) == 1)
  {
    swift_release();
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v2 = (_QWORD *)swift_task_alloc(dword_101116D0C);
    v0[51] = v2;
    *v2 = v0;
    v2[1] = sub_100BAE6B4;
    return sub_100B9B370(v0[25]);
  }
  else
  {
    v5 = v0[32];
    v4 = v0[33];
    sub_1000126EC(v1, v4, type metadata accessor for LocalFindableAccessoryRecord);
    v6 = sub_10005972C(v4, v5, type metadata accessor for LocalFindableAccessoryRecord);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = v0[32];
    if (v9)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v16 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = sub_1000A8F4C();
      v0[21] = sub_100016940(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found LocalFindableRecord: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_1000126B0(v0[32], type metadata accessor for LocalFindableAccessoryRecord);
    }

    v15 = (_QWORD *)swift_task_alloc(dword_101117184);
    v0[49] = v15;
    *v15 = v0;
    v15[1] = sub_100BAE5AC;
    return sub_100BA465C(v0[33]);
  }
}

uint64_t sub_100BAE5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BAEBD8;
  else
    v3 = sub_100BAE610;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BAE610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(_QWORD))(v0 + 208))(0);
  v1 = *(_QWORD *)(v0 + 264);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAE6B4()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[51];
  v3 = *v1;
  v3[52] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100BAEF38, 0, 0);
  v5 = (uint64_t **)swift_task_alloc(dword_101116D3C);
  v3[53] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_100BAE744;
  return sub_100BA269C(v3[25]);
}

uint64_t sub_100BAE744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BAEFDC;
  else
    v3 = sub_100BAE7A8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BAE7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101116AE0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully started aggressive advertising.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_101116D14);
  *(_QWORD *)(v0 + 440) = v6;
  *v6 = v0;
  v6[1] = sub_100BAE8A8;
  return sub_100B9C064(*(_QWORD *)(v0 + 200));
}

uint64_t sub_100BAE8A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BAF080;
  else
    v3 = sub_100BAE90C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BAE90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD))(v0 + 208))(0);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAE994()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[44];
  v2 = v0[38];
  v3 = v0[34];
  v4 = v0[25];
  swift_release();
  v5 = v1(v2, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v21 = (void (*)(uint64_t, uint64_t))v0[45];
    v22 = v0[48];
    v8 = v0[38];
    v9 = v0[34];
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v0[15] = 1752392040;
    v23 = v11;
    *(_DWORD *)v10 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
    v0[16] = sub_100016940(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    v21(v8, v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Timed out looking up LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    swift_errorRelease(v22);
    swift_release();
  }
  else
  {
    v15 = v0[48];
    v16 = (void (*)(uint64_t, uint64_t))v0[45];
    v17 = v0[38];
    v18 = v0[34];
    swift_release();
    swift_errorRelease(v15);
    v16(v17, v18);
  }

  v19 = (_QWORD *)swift_task_alloc(dword_101116D0C);
  v0[51] = v19;
  *v19 = v0;
  v19[1] = sub_100BAE6B4;
  return sub_100B9B370(v0[25]);
}

uint64_t sub_100BAEBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *log;
  void (*v26)(uint64_t, uint64_t);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 400);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 352))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 272));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 400);
    log = v3;
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    v6 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 272);
    v8 = swift_slowAlloc(42, -1);
    v27 = (uint64_t *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(64, -1);
    v29 = v28;
    *(_DWORD *)v8 = 136446979;
    *(_QWORD *)(v0 + 136) = sub_100016940(0xD000000000000019, 0x8000000100EF0AB0, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2160;
    *(_QWORD *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2081;
    v9 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    *(_QWORD *)(v0 + 152) = sub_100016940(v10, v11, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    v26(v6, v7);
    *(_WORD *)(v8 + 32) = 2114;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 160) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v8 + 34, v8 + 42);
    *v27 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    v3 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v4, "%{public}s failed for beacon: %{private,mask.hash}s Error: %{public}@", (uint8_t *)v8, 0x2Au);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v27, 1, v13);
    swift_slowDealloc(v27, -1, -1);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 400);
    (*(void (**)(_QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  v15 = *(_QWORD *)(v0 + 400);
  v16 = *(void (**)(uint64_t))(v0 + 208);
  swift_errorRetain(v15);
  v16(v15);
  swift_errorRelease(v15);
  swift_errorRelease(v15);
  v17 = *(_QWORD *)(v0 + 264);
  swift_release();
  sub_1000126B0(v17, type metadata accessor for LocalFindableAccessoryRecord);
  v18 = *(_QWORD *)(v0 + 312);
  v20 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 264);
  v23 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAEF38()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(void (**)(uint64_t))(v0 + 208);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAEFDC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(void (**)(uint64_t))(v0 + 208);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAF080()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(void (**)(uint64_t))(v0 + 208);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAF124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100BAF13C, a2, 0);
}

uint64_t sub_100BAF13C()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[5] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100BB2784;
  return sub_1008FBBC8(v0[2], v0[4]);
}

uint64_t sub_100BAF194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v35 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - v9;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_101116AE0);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13 = v12(v10, a1, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(32, -1);
    v33 = a1;
    v17 = v16;
    v31 = swift_slowAlloc(64, -1);
    v39 = v31;
    *(_DWORD *)v17 = 136446723;
    v38 = sub_100016940(0xD000000000000028, 0x8000000100EF0990, &v39);
    v34 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v32 = v12;
    v18 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v5, v18);
    v38 = sub_100016940(v19, v20, &v39);
    a3 = v34;
    v12 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    v21 = v31;
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v17;
    a1 = v33;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction(0);
  v23 = v35;
  v12(v35, a1, v5);
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_1010B0AE8, v26 + 16, v24 | 7);
  *(_QWORD *)(v27 + 16) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v27 + v25, v23, v5);
  v28 = (_QWORD *)(v27 + v26);
  *v28 = v36;
  v28[1] = a3;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BTFindingService.startFastAdvertising", 37, 2, &unk_1011170D8, v27);
  return swift_release();
}

uint64_t sub_100BAF500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;

  v4[2] = a3;
  v4[3] = a4;
  v6 = (_QWORD *)swift_task_alloc(dword_1011170E4);
  v4[4] = v6;
  *v6 = v4;
  v6[1] = sub_100BAF558;
  return sub_100BA8024(a2);
}

uint64_t sub_100BAF558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BB2788;
  else
    v3 = sub_100BB278C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BAF5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v35 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - v9;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_101116AE0);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13 = v12(v10, a1, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(32, -1);
    v33 = a1;
    v17 = v16;
    v31 = swift_slowAlloc(64, -1);
    v39 = v31;
    *(_DWORD *)v17 = 136446723;
    v38 = sub_100016940(0xD000000000000027, 0x8000000100EF0930, &v39);
    v34 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v32 = v12;
    v18 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v5, v18);
    v38 = sub_100016940(v19, v20, &v39);
    a3 = v34;
    v12 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    v21 = v31;
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v22 = v17;
    a1 = v33;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction(0);
  v23 = v35;
  v12(v35, a1, v5);
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_1010B0A98, v26 + 16, v24 | 7);
  *(_QWORD *)(v27 + 16) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v27 + v25, v23, v5);
  v28 = (_QWORD *)(v27 + v26);
  *v28 = v36;
  v28[1] = a3;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BTFindingService.stopFastAdvertising", 36, 2, &unk_1011170C8, v27);
  return swift_release();
}

uint64_t sub_100BAF928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;

  v4[2] = a3;
  v4[3] = a4;
  v6 = (_QWORD *)swift_task_alloc(dword_101116FFC);
  v4[4] = v6;
  *v6 = v4;
  v6[1] = sub_100BAF980;
  return sub_100B9F7E8(a2);
}

uint64_t sub_100BAF980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BAF9E4;
  else
    v3 = sub_100BADA28;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BAF9E4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(void (**)(uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BAFA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v36 = *v3;
  v37 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - v9;
  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_101116AE0);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v13 = v12(v10, a1, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v33 = v12;
    v17 = v16;
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 141558275;
    v40 = 1752392040;
    v41 = v18;
    v34 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    v32 = v17 + 14;
    v19 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    v40 = sub_100016940(v20, v21, &v41);
    a1 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v32, v17 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Stop BT Finding for beacon %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    v12 = v33;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction(0);
  v23 = v35;
  v12(v35, a1, v5);
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = (v7 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_1010B0A20, v27 + 8, v24 | 7);
  *(_QWORD *)(v28 + 16) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v28 + v25, v23, v5);
  v29 = (_QWORD *)(v28 + v26);
  v30 = v39;
  *v29 = v37;
  v29[1] = v30;
  *(_QWORD *)(v28 + v27) = v36;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.stopBTFinding", 34, 2, &unk_101117098, v28);
  return swift_release();
}

uint64_t sub_100BAFD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4[22] = a3;
  v4[23] = a4;
  v4[20] = a1;
  v4[21] = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v4[24] = v5;
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v4[26] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[27] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v8);
  v4[29] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v4[30] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[31] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[32] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[33] = swift_task_alloc(v12);
  v4[34] = swift_task_alloc(v12);
  v4[35] = swift_task_alloc(v12);
  return swift_task_switch(sub_100BAFE54, 0, 0);
}

uint64_t sub_100BAFE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 288) = v3;
    *v3 = v0;
    v3[1] = sub_100BAFF54;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BAFF54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BAFFB0, 0, 0);
}

uint64_t sub_100BAFFB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0[37];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
  {
    if (qword_1010EA350 != -1)
      swift_once(&qword_1010EA350, sub_100B99B50);
    v2 = v0[35];
    v3 = v0[30];
    v4 = v0[31];
    v5 = v0[21];
    v6 = type metadata accessor for Logger(0);
    v0[38] = sub_10001A9E8(v6, (uint64_t)qword_101116AE0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v0[39] = v7;
    v8 = v7(v2, v5, v3);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = v0[35];
    v13 = v0[30];
    if (v11)
    {
      v30 = v0[31];
      v14 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(32, -1);
      v32 = v31;
      *(_DWORD *)v14 = 141558275;
      v0[18] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
      v0[19] = sub_100016940(v16, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      v18 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v18(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking if we have LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v18 = *(void (**)(uint64_t, uint64_t))(v0[31] + 8);
      v18(v0[35], v0[30]);
    }

    v0[40] = v18;
    v21 = v0[34];
    v23 = v0[31];
    v22 = v0[32];
    v24 = v0[30];
    v7(v21, v0[21], v24);
    v25 = *(unsigned __int8 *)(v23 + 80);
    v26 = (v25 + 24) & ~v25;
    v27 = swift_allocObject(&unk_1010B0A48, v26 + v22, v25 | 7);
    v0[41] = v27;
    *(_QWORD *)(v27 + 16) = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v27 + v26, v21, v24);
    v28 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v29 = (_QWORD *)swift_task_alloc(v28);
    v0[42] = v29;
    *v29 = v0;
    v29[1] = sub_100BB02DC;
    return withTimeout<A>(_:block:)(v0[25], 0x8AC7230489E80000, 0, &unk_1011170B0, v27, v0[24]);
  }
  else
  {
    v19 = (_QWORD *)swift_task_alloc(dword_101116D44);
    v0[45] = v19;
    *v19 = v0;
    v19[1] = sub_100BB0670;
    return sub_100BA32C4(v0[21]);
  }
}

uint64_t sub_100BB02DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100BB08B8;
  }
  else
  {
    swift_release();
    v3 = sub_100BB0348;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BB0348()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = v0[25];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[27] + 48))(v1, 1, v0[26]) == 1)
  {
    swift_release();
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v2 = (_QWORD *)swift_task_alloc(dword_101116D44);
    v0[45] = v2;
    *v2 = v0;
    v2[1] = sub_100BB0670;
    return sub_100BA32C4(v0[21]);
  }
  else
  {
    v5 = v0[28];
    v4 = v0[29];
    sub_1000126EC(v1, v4, type metadata accessor for LocalFindableAccessoryRecord);
    v6 = sub_10005972C(v4, v5, type metadata accessor for LocalFindableAccessoryRecord);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = v0[28];
    if (v9)
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v16 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = sub_1000A8F4C();
      v0[17] = sub_100016940(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found LocalFindableRecord: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_1000126B0(v0[28], type metadata accessor for LocalFindableAccessoryRecord);
    }

    v15 = (_QWORD *)swift_task_alloc(dword_1011170BC);
    v0[44] = v15;
    *v15 = v0;
    v15[1] = sub_100BB057C;
    return sub_100BA8FC0(v0[21]);
  }
}

uint64_t sub_100BB057C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  return swift_task_switch(sub_100BB05D0, 0, 0);
}

uint64_t sub_100BB05D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 232);
  (*(void (**)(_QWORD))(v0 + 176))(0);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB0670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BB0AFC;
  else
    v3 = sub_100BB06D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BB06D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_1010EA350 != -1)
    swift_once(&qword_1010EA350, sub_100B99B50);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101116AE0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully stopped aggressive advertising.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_101116D1C);
  *(_QWORD *)(v0 + 376) = v6;
  *v6 = v0;
  v6[1] = sub_100BB07D4;
  return sub_100B9E910(*(_QWORD *)(v0 + 168));
}

uint64_t sub_100BB07D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BB0B98;
  else
    v3 = sub_100BB0838;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BB0838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD))(v0 + 176))(0);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB08B8()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[39];
  v2 = v0[33];
  v3 = v0[30];
  v4 = v0[21];
  swift_release();
  v5 = v1(v2, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v21 = (void (*)(uint64_t, uint64_t))v0[40];
    v22 = v0[43];
    v8 = v0[33];
    v9 = v0[30];
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v0[15] = 1752392040;
    v23 = v11;
    *(_DWORD *)v10 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
    v0[16] = sub_100016940(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    v21(v8, v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Timed out looking up LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    swift_errorRelease(v22);
    swift_release();
  }
  else
  {
    v15 = v0[43];
    v16 = (void (*)(uint64_t, uint64_t))v0[40];
    v17 = v0[33];
    v18 = v0[30];
    swift_release();
    swift_errorRelease(v15);
    v16(v17, v18);
  }

  v19 = (_QWORD *)swift_task_alloc(dword_101116D44);
  v0[45] = v19;
  *v19 = v0;
  v19[1] = sub_100BB0670;
  return sub_100BA32C4(v0[21]);
}

uint64_t sub_100BB0AFC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(void (**)(uint64_t))(v0 + 176);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB0B98()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(void (**)(uint64_t))(v0 + 176);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB0C38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_100BB0CE4, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100BB0CE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100BB0D24()
{
  unint64_t result;

  result = qword_101116FB8;
  if (!qword_101116FB8)
  {
    result = swift_getWitnessTable(byte_100E629AC, &type metadata for BTFindingService.Error);
    atomic_store(result, (unint64_t *)&qword_101116FB8);
  }
  return result;
}

uint64_t sub_100BB0D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100BA25D0(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100BB0D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100DCF760(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100BB0DA4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BB0DD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101117014);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100B9C4F8(a1, v4, v5, v6);
}

uint64_t sub_100BB0E40(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;

  v6 = swift_allocObject(&unk_1010B09A8, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = (void *)objc_opt_self(NSXPCConnection);
  _Block_copy(a3);
  v8 = objc_msgSend(v7, "currentConnection");
  if (v8)
  {
    v9 = v8;
    v10 = sub_1003084BC(v8);
    if (v10)
    {
      v11 = v10;
      type metadata accessor for Transaction(0);
      v12 = (_QWORD *)swift_allocObject(&unk_1010B09D0, 56, 7);
      v12[2] = a2;
      v12[3] = a1;
      v12[4] = v11;
      v12[5] = sub_10001D1F0;
      v12[6] = v6;
      swift_retain();
      v13 = a1;
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)("BTFindingService.updateConfig", 29, 2, &unk_101117088, v12);
      swift_release();
      swift_release();

      return swift_release();
    }

  }
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7E40);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to add current XPC connection to the pool!", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  type metadata accessor for SPBTFindingSessionError(0);
  v21 = v20;
  v26 = 3;
  v22 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v23 = sub_100006C64(&qword_101116FB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
  _BridgedStoredNSError.init(_:userInfo:)(&v27, &v26, v22, v21, v23);
  v24 = v27;
  v25 = (void *)_convertErrorToNSError(_:)(v27);
  ((void (**)(_QWORD, void *))a3)[2](a3, v25);

  return swift_release();
}

uint64_t sub_100BB10D0()
{
  unint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  int v8;
  uint64_t v9;

  v0 = sub_100BB11F8();
  v1 = NSXPCConnection.hasEntitlement<A>(_:)(v0, &type metadata for BTFindingEntitlement, v0);
  if (qword_1010EA348 != -1)
    swift_once(&qword_1010EA348, sub_100B99304);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7E40);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    v8 = v1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "BTFindingService: Received new XPC connection (has entitlement: %{BOOL}d).", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  return v1 & 1;
}

unint64_t sub_100BB11F8()
{
  unint64_t result;

  result = qword_101117078;
  if (!qword_101117078)
  {
    result = swift_getWitnessTable(asc_100E62984, &type metadata for BTFindingEntitlement);
    atomic_store(result, &qword_101117078);
  }
  return result;
}

uint64_t sub_100BB123C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100BB1278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_task_alloc(dword_101117084);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100004A74;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = (uint64_t *)swift_task_alloc(dword_101116D04);
  *(_QWORD *)(v4 + 32) = v6;
  *v6 = v4;
  v6[1] = (uint64_t)sub_100BAD9D4;
  return sub_100B9AB7C(v2, v3);
}

uint64_t sub_100BB130C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc(dword_101117094);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_100BAFD70(v4, v5, v7, v8);
}

uint64_t sub_100BB13BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1011170AC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_100486944, v5, 0);
}

uint64_t sub_100BB144C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = swift_task_alloc(dword_1011170C4);
  v7 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = (uint64_t *)swift_task_alloc(dword_101116FFC);
  *(_QWORD *)(v6 + 32) = v8;
  *v8 = v6;
  v8[1] = (uint64_t)sub_100BAF980;
  return sub_100B9F7E8(v5);
}

uint64_t sub_100BB1500()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BB1528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = swift_task_alloc(dword_1011170D4);
  v7 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = (uint64_t *)swift_task_alloc(dword_1011170E4);
  *(_QWORD *)(v6 + 32) = v8;
  *v8 = v6;
  v8[1] = (uint64_t)sub_100BAF558;
  return sub_100BA8024(v5);
}

uint64_t sub_100BB15DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100BB1664(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_1011170FC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004A74;
  return sub_100BAAFC8(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100BB1714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5 = (_QWORD *)swift_task_alloc(dword_101117114);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_100BABE04(v3, v4);
}

uint64_t sub_100BB17A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100BB180C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = (_QWORD *)swift_task_alloc(dword_101117124);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_100BACBA8(a1, v5, v7);
}

uint64_t sub_100BB18A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100BB1930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc(dword_101117134);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = v4;
  return swift_task_switch(sub_100BAD3E0, v4, 0);
}

uint64_t sub_100BB19D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100BB1A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc(dword_101117164);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_100BADD90(v4, v5, v7, v8);
}

uint64_t sub_100BB1B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_101117174);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_100BAF13C, v5, 0);
}

uint64_t sub_100BB1BA8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v10 = v0 + v4;
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v10 + v1[7]), *(_QWORD *)(v10 + v1[7] + 8));
  v12 = (uint64_t *)(v0 + v4 + v1[8]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_10001BC14(*v12, v13);
  v14 = (v4 + v5 + v8) & ~v8;
  v15 = ((v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v11(v10 + v1[9], v6);
  v16 = v10 + v1[13];
  v17 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001BC14(*(_QWORD *)(v16 + *(int *)(v18 + 20)), *(_QWORD *)(v16 + *(int *)(v18 + 20) + 8));
  v19 = v10 + v1[14];
  v20 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v10 + v1[15];
  v22 = type metadata accessor for SymmetricKey256(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v11(v0 + v14, v6);
  return swift_deallocObject(v0, v15, v3 | v8 | 7);
}

uint64_t sub_100BB1D5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v8;
  v13 = (_QWORD *)swift_task_alloc(dword_10111718C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004C28;
  return sub_100BA4DC4(a1, v9, v10, v11, (uint64_t)v1 + v5, v12);
}

uint64_t sub_100BB1E38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9 = (uint64_t *)(v0 + v4 + v1[8]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10001BC14(*v9, v10);
  v8(v6 + v1[9], v7);
  v11 = v6 + v1[13];
  v12 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001BC14(*(_QWORD *)(v11 + *(int *)(v13 + 20)), *(_QWORD *)(v11 + *(int *)(v13 + 20) + 8));
  v14 = v6 + v1[14];
  v15 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = v6 + v1[15];
  v17 = type metadata accessor for SymmetricKey256(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100BB1FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10111719C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v5 = (_QWORD *)swift_task_alloc(dword_101117204);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004C28;
  return sub_100BA53E0(v3);
}

uint64_t sub_100BB2044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1011171AC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v5 = (_QWORD *)swift_task_alloc(dword_1011171BC);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100030654;
  return sub_100BA6E90(v3);
}

uint64_t sub_100BB20D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1011171F4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100BA93E0(a1, v4, v5, v6);
}

uint64_t sub_100BB2150()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BB2178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100BB21F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5 = (_QWORD *)swift_task_alloc(dword_101117234);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1003D9734;
  return sub_100BAA4B4(v3, v4);
}

uint64_t sub_100BB2284()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  swift_release();
  v10 = v0 + v4;
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v10 + v1[7]), *(_QWORD *)(v10 + v1[7] + 8));
  v12 = (uint64_t *)(v0 + v4 + v1[8]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_10001BC14(*v12, v13);
  v14 = (v4 + v5 + v8) & ~v8;
  v15 = ((v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v11(v10 + v1[9], v6);
  v16 = v10 + v1[13];
  v17 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001BC14(*(_QWORD *)(v16 + *(int *)(v18 + 20)), *(_QWORD *)(v16 + *(int *)(v18 + 20) + 8));
  v19 = v10 + v1[14];
  v20 = type metadata accessor for P256PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v10 + v1[15];
  v22 = type metadata accessor for SymmetricKey256(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v11(v0 + v14, v6);
  return swift_deallocObject(v0, v15, v3 | v8 | 7);
}

uint64_t sub_100BB2430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v6;
  v9 = (_QWORD *)swift_task_alloc(dword_10111724C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_1000D9CC0;
  return sub_100BA9DF8(v7, v0 + v3, v8);
}

uint64_t sub_100BB24E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Device(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100BB2550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(type metadata accessor for Device(0) - 8);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5 = (_QWORD *)swift_task_alloc(dword_10111725C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1003D9734;
  return sub_100BA9B64(v3, v4);
}

uint64_t sub_100BB25DC()
{
  uint64_t v0;

  return sub_100B9A6D4(v0);
}

uint64_t sub_100BB25E4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1011172A4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  v2 = (_QWORD *)swift_task_alloc(dword_101116D24);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100B9EAC8();
}

uint64_t storeEnumTagSinglePayload for BTFindingEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BB2688 + 4 * aCl[v4 + 4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BB26A8 + 4 * byte_100E626C9[v4]))();
}

_BYTE *sub_100BB2688(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BB26A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BB26B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BB26B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BB26C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BB26C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BTFindingEntitlement()
{
  return &type metadata for BTFindingEntitlement;
}

ValueMetadata *type metadata accessor for BTFindingService.Error()
{
  return &type metadata for BTFindingService.Error;
}

unint64_t sub_100BB26F8()
{
  unint64_t result;

  result = qword_1011172B0;
  if (!qword_1011172B0)
  {
    result = swift_getWitnessTable(byte_100E6295C, &type metadata for BTFindingEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011172B0);
  }
  return result;
}

unint64_t sub_100BB2740()
{
  unint64_t result;

  result = qword_1011172B8;
  if (!qword_1011172B8)
  {
    result = swift_getWitnessTable(byte_100E628E4, &type metadata for BTFindingEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011172B8);
  }
  return result;
}

uint64_t sub_100BB27A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BB27B0);
}

uint64_t sub_100BB27B0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100BB282C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BB2838);
}

char *sub_100BB2838(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for RoleCategoriesEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_101117318;
  if (!qword_101117318)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RoleCategoriesEndpoint);
  return result;
}

uint64_t sub_100BB28E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x73656C6F722FLL;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

uint64_t *sub_100BB29C0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_10001BBBC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_10001BBBC(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = a2[6];
    v14 = a2[7];
    sub_10001BBBC(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    v15 = a2[8];
    v16 = a2[9];
    sub_10001BBBC(v15, v16);
    a1[8] = v15;
    a1[9] = v16;
    v17 = a3[9];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[10];
    v22 = a3[11];
    v23 = (uint64_t *)((char *)a1 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (char *)a1 + v22;
    v27 = (_OWORD *)((char *)a2 + v22);
    v28 = *(uint64_t *)((char *)a2 + v22 + 8);
    swift_bridgeObjectRetain(v25);
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)v26 = *v27;
    }
    else
    {
      v30 = *(_QWORD *)v27;
      sub_10001BBBC(v30, v28);
      *(_QWORD *)v26 = v30;
      *((_QWORD *)v26 + 1) = v28;
    }
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  }
  return a1;
}

uint64_t sub_100BB2B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = swift_bridgeObjectRelease();
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 44));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return sub_10001BC14(*v7, v8);
  return result;
}

uint64_t *sub_100BB2BC4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  unint64_t v27;
  uint64_t v28;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_10001BBBC(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = a2[6];
  v13 = a2[7];
  sub_10001BBBC(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  v14 = a2[8];
  v15 = a2[9];
  sub_10001BBBC(v14, v15);
  a1[8] = v14;
  a1[9] = v15;
  v16 = a3[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[10];
  v21 = a3[11];
  v22 = (uint64_t *)((char *)a1 + v20);
  v23 = (uint64_t *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (char *)a1 + v21;
  v26 = (_OWORD *)((char *)a2 + v21);
  v27 = *(uint64_t *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain(v24);
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)v25 = *v26;
  }
  else
  {
    v28 = *(_QWORD *)v26;
    sub_10001BBBC(v28, v27);
    *(_QWORD *)v25 = v28;
    *((_QWORD *)v25 + 1) = v27;
  }
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t *sub_100BB2CE8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10001BBBC(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001BC14(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_10001BBBC(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001BC14(v16, v17);
  v18 = a2[6];
  v19 = a2[7];
  sub_10001BBBC(v18, v19);
  v20 = a1[6];
  v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10001BC14(v20, v21);
  v22 = a2[8];
  v23 = a2[9];
  sub_10001BBBC(v22, v23);
  v24 = a1[8];
  v25 = a1[9];
  a1[8] = v22;
  a1[9] = v23;
  sub_10001BC14(v24, v25);
  v26 = a3[9];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[10];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  *v31 = *v32;
  v33 = v32[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease();
  v34 = a3[11];
  v35 = (uint64_t *)((char *)a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = *(uint64_t *)((char *)a2 + v34 + 8);
  if (*(unint64_t *)((char *)a1 + v34 + 8) >> 60 != 15)
  {
    if (v37 >> 60 != 15)
    {
      v39 = *v36;
      sub_10001BBBC(v39, v37);
      v40 = *v35;
      v41 = v35[1];
      *v35 = v39;
      v35[1] = v37;
      sub_10001BC14(v40, v41);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)v35);
    goto LABEL_6;
  }
  if (v37 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_8;
  }
  v38 = *v36;
  sub_10001BBBC(v38, v37);
  *v35 = v38;
  v35[1] = v37;
LABEL_8:
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_100BB2E90(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = a3[9];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t *sub_100BB2F2C(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001BC14(v12, v13);
  v14 = a1[8];
  v15 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001BC14(v14, v15);
  v16 = a3[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[10];
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[11];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  v28 = *(uint64_t *)((char *)a1 + v25 + 8);
  if (v28 >> 60 != 15)
  {
    v29 = v27[1];
    if (v29 >> 60 != 15)
    {
      v30 = *v26;
      *v26 = *v27;
      v26[1] = v29;
      sub_10001BC14(v30, v28);
      goto LABEL_6;
    }
    sub_1000DC964((uint64_t)v26);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_6:
  *(uint64_t *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_100BB305C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BB3068);
}

uint64_t sub_100BB3068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100BB30EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BB30F8);
}

uint64_t sub_100BB30F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 36), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockCheckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1011173A8;
  if (!qword_1011173A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsPairingLockCheckResponse);
  return result;
}

uint64_t sub_100BB31B4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_100E62A80;
  v4[1] = &unk_100E62A80;
  v4[2] = &unk_100E62A80;
  v4[3] = &unk_100E62A80;
  v4[4] = &unk_100E62A80;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100E62A98;
    v4[7] = &unk_100E62AB0;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100BB3250(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100BB327C + 4 * byte_100E62A40[a1]))(1684628325, 0xE400000000000000);
}

uint64_t sub_100BB327C()
{
  return 0x644970696863;
}

uint64_t sub_100BB3290()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100BB32B0()
{
  return 0x5364656573;
}

uint64_t sub_100BB32C4()
{
  return 0x6953726576726573;
}

uint64_t sub_100BB32E0()
{
  return 0x6449616E6D66;
}

uint64_t sub_100BB32F4()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_100BB3318()
{
  return 0xD000000000000013;
}

uint64_t sub_100BB3334(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100BB3360 + 4 * byte_100E62A48[a1]))(1684628325, 0xE400000000000000);
}

uint64_t sub_100BB3360()
{
  return 0x644970696863;
}

uint64_t sub_100BB3374()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100BB3394()
{
  return 0x5364656573;
}

uint64_t sub_100BB33A8()
{
  return 0x6953726576726573;
}

uint64_t sub_100BB33C4()
{
  return 0x6449616E6D66;
}

uint64_t sub_100BB33D8()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_100BB33FC()
{
  return 0xD000000000000013;
}

uint64_t sub_100BB3418@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  char v41;

  v34 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = sub_10001A9A8(&qword_101117400);
  v7 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirPodsPairingLockCheckResponse(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(v11 + 48);
  v37 = v13;
  v38 = a1;
  *(_QWORD *)&v13[v14] = 0;
  v15 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v15);
  v17 = sub_100BB3A5C();
  v36 = v9;
  v18 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirPodsPairingLockCheckResponse.CodingKeys, &type metadata for AirPodsPairingLockCheckResponse.CodingKeys, v17, v15, v16);
  if (v18)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  v19 = v7;
  v39 = v10;
  v33 = v4;
  v41 = 0;
  v20 = sub_100036994();
  v21 = v35;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Data, &v41, v35, &type metadata for Data, v20);
  v22 = v37;
  *(_OWORD *)v37 = v40;
  v41 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Data, &v41, v21, &type metadata for Data, v20);
  v23 = v38;
  *((_OWORD *)v22 + 1) = v40;
  v41 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Data, &v41, v21, &type metadata for Data, v20);
  *((_OWORD *)v22 + 2) = v40;
  v41 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Data, &v41, v21, &type metadata for Data, v20);
  *((_OWORD *)v22 + 3) = v40;
  v41 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Data, &v41, v21, &type metadata for Data, v20);
  v31 = v20;
  *((_OWORD *)v22 + 4) = v40;
  LOBYTE(v40) = 5;
  v24 = sub_100252A08();
  v32 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v3, &v40, v21, v3, v24);
  v25 = v39;
  (*(void (**)(char *, _QWORD *, uint64_t))(v33 + 32))(&v22[*(int *)(v39 + 36)], v6, v3);
  LOBYTE(v40) = 6;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v21);
  v27 = (uint64_t *)&v22[*(int *)(v25 + 40)];
  *v27 = v26;
  v27[1] = v28;
  v41 = 7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v41, v21, &type metadata for Data, v31);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v36, v21);
  *(_OWORD *)&v22[*(int *)(v25 + 44)] = v40;
  sub_100BB3AA0((uint64_t)v22, v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  return sub_100BB3AE4((uint64_t)v22);
}

void sub_100BB3950(char *a1)
{
  sub_1005114C4(*a1);
}

void sub_100BB395C()
{
  char *v0;

  sub_100516370(0, *v0);
}

void sub_100BB3968(uint64_t a1)
{
  char *v1;

  sub_10051513C(a1, *v1);
}

void sub_100BB3970(uint64_t a1)
{
  char *v1;

  sub_100516370(a1, *v1);
}

unint64_t sub_100BB3978@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100BB3CC4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100BB39A4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100BB3250(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100BB39CC()
{
  unsigned __int8 *v0;

  return sub_100BB3334(*v0);
}

unint64_t sub_100BB39D4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100BB3CC4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100BB39F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BB3A5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BB3A20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BB3A5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BB3A48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100BB3418(a1, a2);
}

unint64_t sub_100BB3A5C()
{
  unint64_t result;

  result = qword_101117408;
  if (!qword_101117408)
  {
    result = swift_getWitnessTable(byte_100E62BFC, &type metadata for AirPodsPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117408);
  }
  return result;
}

uint64_t sub_100BB3AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirPodsPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BB3AE4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirPodsPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingLockCheckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100BB3B6C + 4 * byte_100E62A55[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100BB3BA0 + 4 * byte_100E62A50[v4]))();
}

uint64_t sub_100BB3BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BB3BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BB3BB0);
  return result;
}

uint64_t sub_100BB3BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BB3BC4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100BB3BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BB3BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AirPodsPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100BB3BF0()
{
  unint64_t result;

  result = qword_101117410;
  if (!qword_101117410)
  {
    result = swift_getWitnessTable(byte_100E62BD4, &type metadata for AirPodsPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117410);
  }
  return result;
}

unint64_t sub_100BB3C38()
{
  unint64_t result;

  result = qword_101117418;
  if (!qword_101117418)
  {
    result = swift_getWitnessTable(asc_100E62B0C, &type metadata for AirPodsPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117418);
  }
  return result;
}

unint64_t sub_100BB3C80()
{
  unint64_t result;

  result = qword_101117420;
  if (!qword_101117420)
  {
    result = swift_getWitnessTable(byte_100E62B34, &type metadata for AirPodsPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117420);
  }
  return result;
}

unint64_t sub_100BB3CC4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D450, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_100BB3D0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100BB7D44();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100BB3D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100BB7D44();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100BB3DB4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[7];

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v14[1] = *(_QWORD *)(v8 - 8);
  v14[2] = v8;
  __chkstk_darwin(v8);
  v14[0] = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 40) = xmmword_100E28DE0;
  *(_QWORD *)(v4 + 56) = 0xF000000000000000;
  *(_WORD *)(v4 + 64) = 0;
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  OSSignpostID.init(log:)((id)qword_1011B7D88);
  v10 = v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost;
  *(_QWORD *)v10 = "ackPairingLock";
  *(_QWORD *)(v10 + 8) = 14;
  *(_BYTE *)(v10 + 16) = 2;
  v11 = (_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  *v11 = 0;
  v11[1] = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_locationMonitor) = a1;
  v12 = type metadata accessor for SPAnalyticsItemPairEvent(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14[5] = a1;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics) = sub_100CD6CA8(1);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue) = a3;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_validator) = a2;
  v14[4] = a3;
  swift_retain();
  static Data.random(bytes:)(32);
  __asm { BR              X10 }
}

void sub_100BB42A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = static os_log_type_t.debug.getter(a1);
  v2 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v3 = (void *)static OS_os_log.default.getter(v2);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v3, "Clearing up pairing coordinator.", 32, 2, _swiftEmptyArrayStorage);

  Transaction.capture()();
}

uint64_t sub_100BB4330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  v3 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  if (v3)
  {
    v4 = v2[1];
    v5 = swift_retain();
    v3(v5);
    sub_10001D8A8((uint64_t)v3, v4);
  }

  swift_release();
  sub_10001EF3C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  sub_10001EF3C(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  v6 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID;
  v7 = type metadata accessor for OSSignpostID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  swift_release();
  sub_10001D8A8(*v2, v2[1]);
  return v1;
}

uint64_t sub_100BB4418()
{
  uint64_t v0;

  sub_100BB4330();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100BB443C()
{
  return type metadata accessor for ItemPairingCoordinator(0);
}

uint64_t type metadata accessor for ItemPairingCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_101117470;
  if (!qword_101117470)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ItemPairingCoordinator);
  return result;
}

uint64_t sub_100BB4480(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = &unk_100E62CC0;
  v4[3] = &unk_100E62CC0;
  v4[4] = &unk_100E62CD8;
  v4[5] = &unk_100E62CF0;
  result = type metadata accessor for OSSignpostID(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    v4[7] = &unk_100E62D08;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = &unk_100E62D20;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_100BB4548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  double v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  uint64_t v19[2];
  uint64_t v20;

  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v19[-1] - v10;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v19[0] = 0x7365547265646E75;
  v19[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v20, v19, sub_10001F628, 0, &type metadata for Bool);
  v12 = swift_bridgeObjectRelease();
  v13 = 2.0;
  if ((v20 & 1) == 0)
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B5EC(v19[0]);
    v13 = v14;
    v12 = swift_bridgeObjectRelease();
  }
  static DispatchTime.now()(v12);
  + infix(_:_:)(v9, v13);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v16 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v16);
  *(&v18 - 4) = v2;
  *(&v18 - 3) = (uint64_t)v11;
  *(&v18 - 2) = a1;
  *(&v18 - 1) = a2;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.ItemPairingCoordinator.cleanUpIfTimedOut", 70, 2, sub_100BB8324, &v18 - 6, &type metadata for () + 1);
  return ((uint64_t (*)(char *, uint64_t))v15)(v11, v5);
}

uint64_t sub_100BB4774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];
  _QWORD *v27;

  v25 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  v15 = (_QWORD *)swift_allocObject(&unk_1010B14B0, 48, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a4;
  v15[5] = a5;
  aBlock[4] = sub_100BB837C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B14C8;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v17 = sub_10001D898(a4, a5);
  static DispatchQoS.unspecified.getter(v17);
  v27 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_10001371C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v19, v20, v9, v18);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v25, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v23);
  return swift_release();
}

uint64_t sub_100BB4980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void **aBlock;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  void *v82;
  uint64_t (*v83)();
  uint64_t v84;

  v69 = a3;
  v70 = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v76 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v75 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v73 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v64 - v16;
  Transaction.capture()();
  v18 = objc_msgSend(*(id *)(a2 + 16), "identifier");
  v71 = v17;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  LODWORD(v18) = *(unsigned __int8 *)(a2 + 64);
  v67 = static os_log_type_t.default.getter(v19);
  v72 = v12;
  if (v18 > 1)
  {
    v66 = v5;
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v65 = qword_1011B7D88;
    v40 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v41 = swift_allocObject(v40, 112, 7);
    *(_OWORD *)(v41 + 16) = xmmword_100E22B10;
    v42 = objc_msgSend(*(id *)(a2 + 16), "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

    v44 = UUID.uuidString.getter(v43);
    v46 = v45;
    v47 = *(void (**)(char *, uint64_t))(v68 + 8);
    v47(v15, v12);
    *(_QWORD *)(v41 + 56) = &type metadata for String;
    v48 = sub_10001AA00();
    *(_QWORD *)(v41 + 64) = v48;
    *(_QWORD *)(v41 + 32) = v44;
    *(_QWORD *)(v41 + 40) = v46;
    LOBYTE(aBlock) = *(_BYTE *)(a2 + 64);
    v49 = String.init<A>(describing:)(&aBlock, &type metadata for ItemPairingCoordinator.PairingState);
    *(_QWORD *)(v41 + 96) = &type metadata for String;
    *(_QWORD *)(v41 + 104) = v48;
    *(_QWORD *)(v41 + 72) = v49;
    *(_QWORD *)(v41 + 80) = v50;
    os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v65, "Pairing session %@ state %@. Ignore timeout.", 44, 2, v41);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    v51 = (void *)static OS_dispatch_queue.global(qos:)(v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v52 = swift_allocObject(&unk_1010B1500, 32, 7);
    v54 = v69;
    v53 = v70;
    *(_QWORD *)(v52 + 16) = v69;
    *(_QWORD *)(v52 + 24) = v53;
    v83 = sub_100BB838C;
    v84 = v52;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_100016FB8;
    v82 = &unk_1010B1518;
    v55 = _Block_copy(&aBlock);
    v56 = sub_10001D898(v54, v53);
    v57 = v73;
    static DispatchQoS.unspecified.getter(v56);
    v78 = _swiftEmptyArrayStorage;
    v58 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v59 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v60 = sub_10001371C();
    v61 = v75;
    v62 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v59, v60, v66, v58);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v61, v55);
    _Block_release(v55);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v61, v62);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v57, v77);
    v47(v71, v72);
  }
  else
  {
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v20 = qword_1011B7D88;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    v23 = v71;
    v24 = UUID.uuidString.getter(v22);
    v26 = v25;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v26;
    os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v20, "#Durian: Pairing session %@ should have completed by now. Bailing...", 68, 2, v22);
    swift_bridgeObjectRelease();
    v27 = (void *)sub_100BB5018();
    sub_100294B28(v27, v28 & 1);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    v29 = (void *)static OS_dispatch_queue.global(qos:)(v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v30 = swift_allocObject(&unk_1010B1550, 32, 7);
    v32 = v69;
    v31 = v70;
    *(_QWORD *)(v30 + 16) = v69;
    *(_QWORD *)(v30 + 24) = v31;
    v83 = sub_100BB8398;
    v84 = v30;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_100016FB8;
    v82 = &unk_1010B1568;
    v33 = _Block_copy(&aBlock);
    v34 = sub_10001D898(v32, v31);
    v35 = v73;
    static DispatchQoS.unspecified.getter(v34);
    v78 = _swiftEmptyArrayStorage;
    v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v38 = sub_10001371C();
    v39 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v37, v38, v5, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v39, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v39, v5);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v35, v77);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v23, v72);
  }
  return swift_release();
}

uint64_t sub_100BB5018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66[8];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    v9 = static os_log_type_t.default.getter(v15);
    if (qword_1010EA2A8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA2A8, sub_100B5DDB4);
LABEL_3:
  v16 = qword_1011B7D88;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  v19 = objc_msgSend(*(id *)(v1 + 16), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v21 = UUID.uuidString.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v21;
  *(_QWORD *)(v18 + 40) = v23;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v16, "invalidatePairingSync session %@.", 33, 2, v18);
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(*(id *)(v1 + 16), "ecid");
  if (!v24)
  {
LABEL_9:
    v54 = static os_log_type_t.error.getter(v24);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D88, "#Durian: Insufficient info for remove pairing lock.", 51, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPPairingSessionError(0);
    v56 = v55;
    v64[0] = 6;
    v57 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(v66, v64, v57, v56, v58);
    return v66[0];
  }
  v25 = v24;
  v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v28 = v27;

  v29 = objc_msgSend(*(id *)(v1 + 16), "chipId");
  if (!v29)
  {
LABEL_8:
    v24 = (id)sub_10001BC14(v26, v28);
    goto LABEL_9;
  }
  v30 = v29;
  v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v33 = v32;

  v34 = objc_msgSend(*(id *)(v1 + 16), "serialNumber");
  if (!v34)
  {
    sub_10001BC14(v31, v33);
    goto LABEL_8;
  }
  v35 = v34;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v62 = v36;
  v37 = v36;

  v38 = *(void **)(v1 + 16);
  sub_10001BBBC(v26, v28);
  v63 = v31;
  sub_10001BBBC(v31, v33);
  v39 = objc_msgSend(v38, "productId");
  v40 = objc_msgSend(*(id *)(v1 + 16), "vendorId");
  v66[0] = v26;
  v66[1] = v28;
  v66[2] = v31;
  v66[3] = v33;
  v66[4] = v61;
  v66[5] = v37;
  v66[6] = (uint64_t)v39;
  v66[7] = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  sub_100652BD0((uint64_t)v4, v66);
  sub_1001C0844((uint64_t)v4);
  v41 = swift_allocObject(&unk_1010B1438, 25, 7);
  type metadata accessor for SPPairingSessionError(0);
  v43 = v42;
  v65 = 1;
  v44 = v33;
  v45 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v46 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(v64, &v65, v45, v43, v46);
  *(_QWORD *)(v41 + 16) = v64[0];
  *(_BYTE *)(v41 + 24) = 1;
  v47 = dispatch_group_create();
  dispatch_group_enter(v47);
  v48 = swift_allocObject(&unk_1010B1460, 32, 7);
  *(_QWORD *)(v48 + 16) = v47;
  *(_QWORD *)(v48 + 24) = v41;
  v49 = v47;
  swift_retain();
  Future.addFailure(block:)(sub_100BB8310, v48);
  swift_release();
  swift_release();
  v50 = swift_allocObject(&unk_1010B1488, 32, 7);
  *(_QWORD *)(v50 + 16) = v49;
  *(_QWORD *)(v50 + 24) = v41;
  v51 = v49;
  swift_retain();
  Future.addSuccess(block:)(sub_100BB831C, v50);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  sub_10001BC14(v26, v28);
  v52 = v63;
  sub_10001BC14(v63, v44);
  swift_release();

  sub_10001BC14(v26, v28);
  sub_10001BC14(v52, v44);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + 64) = 3;
  swift_beginAccess(v41 + 16, v64, 0, 0);
  v53 = *(void **)(v41 + 16);
  sub_100294B60(v53, *(_BYTE *)(v41 + 24));
  swift_release();
  return (uint64_t)v53;
}

void sub_100BB55C4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  _QWORD v27[3];
  uint64_t v28;
  _BYTE v29[64];

  v6 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v7 = qword_1011B7D88;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v27[0] = a1;
  swift_errorRetain(a1);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v11 = String.init<A>(describing:)(v27, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Durian: Failed to remove pairing lock due to %@.", 49, 2, v9);
  swift_bridgeObjectRelease();
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
  inited = swift_initStackObject(v14, v29);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v16;
  v27[0] = a1;
  swift_errorRetain(a1);
  *(_QWORD *)(inited + 48) = String.init<A>(describing:)(v27, v10);
  *(_QWORD *)(inited + 56) = v17;
  v18 = sub_1006B8DC4(inited);
  type metadata accessor for SPPairingSessionError(0);
  v20 = v19;
  v27[0] = 18;
  sub_10047B41C(v18);
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v28, v27, v22, v20, v23);
  v24 = v28;
  swift_beginAccess(a3 + 16, v27, 1, 0);
  v25 = *(void **)(a3 + 16);
  v26 = *(_BYTE *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v24;
  *(_BYTE *)(a3 + 24) = 1;
  sub_100294B28(v25, v26);
  dispatch_group_leave(a2);
}

void sub_100BB57E8(unsigned __int8 *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  _BYTE v9[24];

  v5 = *a1;
  v6 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1011B7D88, "#Durian: Pairing failed. Successfully removed pairing lock.", 59, 2, _swiftEmptyArrayStorage);
  swift_beginAccess(a3 + 16, v9, 1, 0);
  v7 = *(void **)(a3 + 16);
  v8 = *(_BYTE *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v5;
  *(_BYTE *)(a3 + 24) = 0;
  sub_100294B28(v7, v8);
  dispatch_group_leave(a2);
}

uint64_t sub_100BB58B8(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  int v75;
  _QWORD *v76;
  _QWORD aBlock[7];

  v5 = v4;
  v67 = a3;
  v68 = a4;
  v75 = a2;
  v74 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v73 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v72 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8);
  v69 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  __chkstk_darwin(v10);
  v64 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v5 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  v22 = _dispatchPreconditionTest(_:)(v19);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) != 0)
  {
    v62 = v6;
    v22 = static os_log_type_t.default.getter(v23);
    if (qword_1010EA2A8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA2A8, sub_100B5DDB4);
LABEL_3:
  v24 = qword_1011B7D88;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v26 = swift_allocObject(v25, 72, 7);
  v63 = xmmword_100E22B00;
  *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
  v27 = objc_msgSend(*(id *)(v5 + 16), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

  v29 = UUID.uuidString.getter(v28);
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_10001AA00();
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v24, "completeVerifyPairing for session %@.", 37, 2, v26);
  swift_bridgeObjectRelease();
  v32 = v74;
  v33 = static os_log_type_t.default.getter(v32);
  if ((v75 & 1) != 0)
  {
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v34 = qword_1011B7DB8;
    v35 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v35 + 16) = v63;
    v36 = v32;
    v37 = _convertErrorToNSError(_:)(v36);

    *(_QWORD *)(v35 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
    *(_QWORD *)(v35 + 64) = sub_100172EE0((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr);
    *(_QWORD *)(v35 + 32) = v37;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "#Durian: Beacon - Verify Pairing failed with error: %@", 54, 2, v35);
    swift_bridgeObjectRelease();
    v38 = objc_msgSend(*(id *)(v5 + 16), "pairingUsingTool");
    if ((_DWORD)v38)
    {
      v39 = static os_log_type_t.default.getter(v38);
      os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, qword_1011B7DB8, "#Durian: Not submitting analytics for tool based pairing", 56, 2, _swiftEmptyArrayStorage);
    }
    else
    {
      type metadata accessor for Transaction(0);
      v44 = swift_allocObject(&unk_1010B1398, 32, 7);
      *(_QWORD *)(v44 + 16) = v5;
      *(_QWORD *)(v44 + 24) = v36;
      v45 = v36;
      swift_retain();
      static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1011176D8, v44);
      swift_release();
    }
    v40 = v62;
  }
  else
  {
    v40 = v62;
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v41 = qword_1011B7DB8;
    v42 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v42 + 16) = v63;
    *(_QWORD *)(v42 + 56) = sub_10000F4A0(0, &qword_1011176B8, SPPairingSession_ptr);
    *(_QWORD *)(v42 + 64) = sub_100172EE0(&qword_1011176C0, &qword_1011176B8, SPPairingSession_ptr);
    *(_QWORD *)(v42 + 32) = v32;
    v43 = v32;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v41, "#Durian: Beacon - Verify Pairing completed with session: %@", 59, 2, v42);
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction(0);
    swift_retain();
    static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1011176E8, v5);
    swift_release();
    *(_BYTE *)(v5 + 64) = 1;
    sub_100BB4548(0, 0);
  }

  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v47 = v64;
  v46 = v65;
  v48 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, enum case for DispatchQoS.QoSClass.default(_:), v66);
  v49 = (void *)static OS_dispatch_queue.global(qos:)(v47);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
  v50 = swift_allocObject(&unk_1010B13C0, 41, 7);
  v51 = v68;
  *(_QWORD *)(v50 + 16) = v67;
  *(_QWORD *)(v50 + 24) = v51;
  *(_QWORD *)(v50 + 32) = v74;
  *(_BYTE *)(v50 + 40) = v75 & 1;
  aBlock[4] = sub_100BB81C4;
  aBlock[5] = v50;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B13D8;
  v52 = _Block_copy(aBlock);
  v53 = v32;
  v54 = swift_retain();
  v55 = v69;
  static DispatchQoS.unspecified.getter(v54);
  v76 = _swiftEmptyArrayStorage;
  v56 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v57 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v58 = sub_10001371C();
  v59 = v72;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v57, v58, v40, v56);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v52);
  _Block_release(v52);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v59, v40);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v55, v71);
  return swift_release();
}

uint64_t sub_100BB5FCC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100BB5FE4, 0, 0);
}

uint64_t sub_100BB5FE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch(sub_100BB6008, v1, 0);
}

uint64_t sub_100BB6008()
{
  uint64_t v0;

  sub_100CD79F0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB6038(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100BB6050, 0, 0);
}

uint64_t sub_100BB6050()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(_QWORD *)(v0 + 32) = v1;
  return swift_task_switch(sub_100BB6074, v1, 0);
}

uint64_t sub_100BB6074()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_100CD79F0();
  return swift_task_switch(sub_100BB60B0, v1, 0);
}

uint64_t sub_100BB60B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_1010B1410, 49, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  swift_retain(v1);
  v4 = v2;
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1011176F0, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB614C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t result;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  id v93;
  int v94;
  uint64_t v95;
  uint64_t v96[19];
  _BYTE v97[152];
  _OWORD v98[9];
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  _BYTE v110[168];

  v6 = v5;
  v84 = a4;
  v85 = a5;
  v94 = a2;
  v93 = a1;
  sub_100BB80B8(a3, (uint64_t)v97);
  sub_100BB80B8((uint64_t)v97, (uint64_t)v110);
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v90 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v89 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  __chkstk_darwin(v10);
  v86 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v82 = *(_QWORD *)(v12 - 8);
  v83 = v12;
  __chkstk_darwin(v12);
  v81 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v6 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    v79 = a3;
    v80 = v8;
    v20 = (_QWORD *)static os_log_type_t.default.getter(v23);
    if (qword_1010EA2A8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA2A8, sub_100B5DDB4);
LABEL_3:
  v24 = qword_1011B7D88;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v26 = swift_allocObject(v25, 72, 7);
  v91 = xmmword_100E22B00;
  *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
  v27 = objc_msgSend(*(id *)(v6 + 16), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

  v29 = UUID.uuidString.getter(v28);
  v95 = v6;
  v31 = v30;
  v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v16, v92);
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  v77 = sub_10001AA00();
  *(_QWORD *)(v26 + 64) = v77;
  *(_QWORD *)(v26 + 32) = v29;
  *(_QWORD *)(v26 + 40) = v31;
  v33 = v95;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v24, "completeFinalizePairing for session %@.", 39, 2, v26);
  swift_bridgeObjectRelease();
  v34 = type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1011176A0, v33);
  swift_release();
  v35 = v93;
  v36 = static os_log_type_t.default.getter(v35);
  v78 = v34;
  if ((v94 & 1) != 0)
  {
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v37 = qword_1011B7DB8;
    v38 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v38 + 16) = v91;
    v39 = v35;
    v40 = _convertErrorToNSError(_:)(v39);

    *(_QWORD *)(v38 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
    *(_QWORD *)(v38 + 64) = sub_100172EE0((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr);
    *(_QWORD *)(v38 + 32) = v40;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "#Durian: Beacon - Finalize Pairing failed with error: %@", 56, 2, v38);
    swift_bridgeObjectRelease();
    v41 = v95;
    v42 = objc_msgSend(*(id *)(v95 + 16), "pairingUsingTool");
    v43 = v80;
    if ((_DWORD)v42)
    {
      v44 = static os_log_type_t.default.getter(v42);
      os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_1011B7DB8, "#Durian: Not submitting analytics for tool based pairing", 56, 2, _swiftEmptyArrayStorage);
    }
    else
    {
      v59 = swift_allocObject(&unk_1010B12F8, 32, 7);
      *(_QWORD *)(v59 + 16) = v41;
      *(_QWORD *)(v59 + 24) = v39;
      swift_retain();
      v39 = v39;
      static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1011176B0, v59);
      swift_release();
    }

    v58 = v79;
  }
  else
  {
    v76 = v32;
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v45 = qword_1011B7DB8;
    v46 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v46 + 16) = v91;
    *(_QWORD *)(v46 + 56) = sub_10000F4A0(0, &qword_1011176B8, SPPairingSession_ptr);
    *(_QWORD *)(v46 + 64) = sub_100172EE0(&qword_1011176C0, &qword_1011176B8, SPPairingSession_ptr);
    *(_QWORD *)(v46 + 32) = v35;
    v47 = v35;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v45, "#Durian: Beacon - Finalize Pairing completed with session: %@", 61, 2, v46);
    v48 = swift_bridgeObjectRelease();
    v49 = static os_log_type_t.default.getter(v48);
    v50 = qword_1011B7D88;
    v51 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v51 + 16) = v91;
    v52 = objc_msgSend(v47, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v52);

    v54 = UUID.uuidString.getter(v53);
    v56 = v55;
    v76(v16, v92);
    v57 = v77;
    *(_QWORD *)(v51 + 56) = &type metadata for String;
    *(_QWORD *)(v51 + 64) = v57;
    *(_QWORD *)(v51 + 32) = v54;
    *(_QWORD *)(v51 + 40) = v56;
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "Setting session %@ state to finalized to ignore timeout.", 56, 2, v51);
    swift_bridgeObjectRelease();

    *(_BYTE *)(v95 + 64) = 2;
    v58 = v79;
    v43 = v80;
  }
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v61 = v81;
  v60 = v82;
  v62 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, enum case for DispatchQoS.QoSClass.default(_:), v83);
  v63 = (void *)static OS_dispatch_queue.global(qos:)(v61);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
  v64 = swift_allocObject(&unk_1010B1320, 41, 7);
  v65 = v85;
  *(_QWORD *)(v64 + 16) = v84;
  *(_QWORD *)(v64 + 24) = v65;
  *(_QWORD *)(v64 + 32) = v93;
  *(_BYTE *)(v64 + 40) = v94 & 1;
  *(_QWORD *)&v102 = sub_100BB81C4;
  *((_QWORD *)&v102 + 1) = v64;
  *(_QWORD *)&v100 = _NSConcreteStackBlock;
  *((_QWORD *)&v100 + 1) = 1107296256;
  *(_QWORD *)&v101 = sub_100016FB8;
  *((_QWORD *)&v101 + 1) = &unk_1010B1338;
  v66 = _Block_copy(&v100);
  v67 = v35;
  v68 = swift_retain();
  v69 = v86;
  static DispatchQoS.unspecified.getter(v68);
  *(_QWORD *)&v98[0] = _swiftEmptyArrayStorage;
  v70 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v71 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v72 = sub_10001371C();
  v73 = v89;
  dispatch thunk of SetAlgebra.init<A>(_:)(v98, v71, v72, v43, v70);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v69, v73, v66);
  _Block_release(v66);

  (*(void (**)(char *, uint64_t))(v90 + 8))(v73, v43);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v69, v88);
  swift_release();
  sub_100BB80B8(v58, (uint64_t)v98);
  result = sub_100293A64((uint64_t)v98);
  if ((_DWORD)result != 1)
  {
    v109 = v99;
    v106 = v98[6];
    v107 = v98[7];
    v108 = v98[8];
    v102 = v98[2];
    v103 = v98[3];
    v104 = v98[4];
    v105 = v98[5];
    v100 = v98[0];
    v101 = v98[1];
    __chkstk_darwin(result);
    *(&v75 - 2) = v95;
    *(&v75 - 1) = (uint64_t)&v100;
    sub_100BB80B8((uint64_t)v110, (uint64_t)v96);
    sub_100293AD8(v96);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-ackRegister", 41, 2, sub_100BB81C8, &v75 - 4, &type metadata for () + 1);
    return sub_100293BA8(v58);
  }
  return result;
}

uint64_t sub_100BB6A2C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100BB6A44, 0, 0);
}

uint64_t sub_100BB6A44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(_QWORD *)(v0 + 24) = v1;
  return swift_task_switch(sub_100BB6A68, v1, 0);
}

uint64_t sub_100BB6A68()
{
  uint64_t v0;

  sub_100CD7B80();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB6A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100BB6AB0, 0, 0);
}

uint64_t sub_100BB6AB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(_QWORD *)(v0 + 32) = v1;
  return swift_task_switch(sub_100BB6AD4, v1, 0);
}

uint64_t sub_100BB6AD4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_1010B1370, 49, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  swift_retain(v1);
  v4 = v2;
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1011176C8, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB6B70(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;

  v6 = objc_msgSend(*(id *)(a2 + 16), "pairingUsingTool");
  if ((_DWORD)v6)
  {
    v7 = static os_log_type_t.default.getter(v6);
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DB8, "#Durian: Not submitting analytics for tool based pairing", 56, 2, _swiftEmptyArrayStorage);
    v8 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
    swift_retain();
  }
  swift_retain();
  sub_100BB6E54(a3, v8, (uint64_t)sub_100BB81E0, a1);
  swift_release();
  return swift_release();
}

void sub_100BB6C6C(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;

  Transaction.capture()();
  if ((a2 & 1) != 0)
  {
    v9 = a1;
    v10 = static os_log_type_t.error.getter(v9);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v11 = qword_1011B7D88;
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    v21 = v9;
    type metadata accessor for SPPairingSessionError(0);
    v15 = v14;
    v16 = v9;
    v17 = String.init<A>(describing:)(&v21, v15);
    v19 = v18;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_10001AA00();
    *(_QWORD *)(v13 + 32) = v17;
    *(_QWORD *)(v13 + 40) = v19;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "#Durian: Ack register failed with error - %@", 44, 2, v13);
    swift_bridgeObjectRelease();
    sub_100294B28(a1, 1);
  }
  else
  {
    v5 = static os_log_type_t.default.getter(v4);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v6 = qword_1011B7D88;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v8 + 56) = &type metadata for Bool;
    *(_QWORD *)(v8 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v8 + 32) = a1 & 1;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "#Durian: Ack register was success? - %i", v20);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100BB6E54(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = v4;
  v41 = a3;
  v42 = a4;
  v43 = a1;
  v7 = type metadata accessor for OSSignpostID(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  v8 = *(_QWORD *)(v44 + 64);
  v9 = __chkstk_darwin(v7);
  v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v14 = qword_1011B7D88;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  v46 = *v5;
  v17 = sub_10001A9A8(&qword_101117640);
  v18 = String.init<A>(describing:)(&v46, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v21;
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 72) = 0xD000000000000037;
  *(_QWORD *)(v16 + 80) = 0x8000000100EF0C90;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: %{public}@", 22, 2, v16);
  swift_bridgeObjectRelease();
  v22 = (id)qword_1011B7D88;
  v23 = OSSignpostID.init(log:)(v22);
  v24 = static os_signpost_type_t.begin.getter(v23);
  os_signpost(_:dso:log:name:signpostID:)(v24, &_mh_execute_header, v22, *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost), *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost + 8), *((unsigned __int8 *)v5 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost + 16), v12);
  type metadata accessor for Transaction(0);
  v25 = swift_allocObject(&unk_1010B1168, 24, 7);
  *(_QWORD *)(v25 + 16) = a2;
  swift_retain();
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_101117650, v25);
  swift_release();
  v27 = v44;
  v26 = v45;
  v28 = v40;
  (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v40, v12, v45);
  v29 = *(unsigned __int8 *)(v27 + 80);
  v30 = (v29 + 24) & ~v29;
  v31 = (v8 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject(&unk_1010B1190, v32 + 16, v29 | 7);
  *(_QWORD *)(v33 + 16) = v5;
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v33 + v30, v28, v26);
  *(_QWORD *)(v33 + v31) = a2;
  v34 = (_QWORD *)(v33 + v32);
  v35 = v42;
  *v34 = v41;
  v34[1] = v35;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100652FE8(v43);
  v36 = swift_allocObject(&unk_1010B11B8, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_100BB7E9C;
  *(_QWORD *)(v36 + 24) = v33;
  swift_retain();
  Future.addFailure(block:)(sub_100BB7F34, v36);
  swift_release();
  swift_release();
  v37 = swift_allocObject(&unk_1010B11E0, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_100BB7E9C;
  *(_QWORD *)(v37 + 24) = v33;
  swift_retain();
  Future.addSuccess(block:)(sub_100BB7F3C, v37);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v26);
}

uint64_t storeEnumTagSinglePayload for ItemPairingCoordinator.PairingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100BB7224 + 4 * byte_100E62C55[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100BB7258 + 4 * byte_100E62C50[v4]))();
}

uint64_t sub_100BB7258(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BB7260(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BB7268);
  return result;
}

uint64_t sub_100BB7274(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BB727CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100BB7280(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BB7288(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ItemPairingCoordinator.PairingState()
{
  return &type metadata for ItemPairingCoordinator.PairingState;
}

unint64_t sub_100BB72A8()
{
  unint64_t result;

  result = qword_101117630;
  if (!qword_101117630)
  {
    result = swift_getWitnessTable(byte_100E62E58, &type metadata for ItemPairingCoordinator.PairingState);
    atomic_store(result, (unint64_t *)&qword_101117630);
  }
  return result;
}

uint64_t sub_100BB72EC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  if (a1)
    return swift_task_switch(sub_100BB7310, a1, 0);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100BB7310()
{
  uint64_t v0;

  sub_100CD7C48();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB7340(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void *, _QWORD))
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;

  v11 = a2 & 1;
  v12 = static os_signpost_type_t.end.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_signpost(_:dso:log:name:signpostID:)(v12, &_mh_execute_header, qword_1011B7D88, *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost + 8), *(unsigned __int8 *)(a3 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost + 16), a4);
  type metadata accessor for Transaction(0);
  v13 = swift_allocObject(&unk_1010B1208, 24, 7);
  *(_QWORD *)(v13 + 16) = a5;
  swift_retain();
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_101117660, v13);
  v14 = swift_release();
  v32 = v11;
  if (v11)
  {
    v23 = a1;
    v24 = static os_log_type_t.default.getter(v23);
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v25 = qword_1011B7DB8;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v27 = swift_allocObject(v26, 72, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
    v28 = v23;
    v29 = _convertErrorToNSError(_:)(v28);
    sub_100294B28(a1, 1);
    *(_QWORD *)(v27 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
    *(_QWORD *)(v27 + 64) = sub_100172EE0((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr);
    *(_QWORD *)(v27 + 32) = v29;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "#Durian: Beacon - Finalize Pairing failed with error: %@", 56, 2, v27);
    swift_bridgeObjectRelease();
    v30 = swift_allocObject(&unk_1010B1230, 32, 7);
    *(_QWORD *)(v30 + 16) = a5;
    *(_QWORD *)(v30 + 24) = v28;
    swift_retain();
    sub_100294B60(a1, 1);
    static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_101117670, v30);
    swift_release();
    sub_100294B28(a1, 1);
  }
  else
  {
    v15 = static os_log_type_t.default.getter(v14);
    if (qword_1010EA2D8 != -1)
      swift_once(&qword_1010EA2D8, sub_100B5E00C);
    v16 = qword_1011B7DB8;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    v19 = v18;
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    if ((a1 & 1) != 0)
      v20 = 1702195828;
    else
      v20 = 0x65736C6166;
    if ((a1 & 1) != 0)
      v21 = 0xE400000000000000;
    else
      v21 = 0xE500000000000000;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v21;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "#Durian: Beacon - Finalize Pairing completed with success: %@", 61, 2, v19);
    swift_bridgeObjectRelease();
    v22 = swift_allocObject(&unk_1010B1258, 24, 7);
    *(_QWORD *)(v22 + 16) = a5;
    swift_retain();
    static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_101117680, v22);
    swift_release();
  }
  return a6(a1, v32);
}

uint64_t sub_100BB76EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 40) = a1;
  v3 = type metadata accessor for DispatchTime(0);
  *(_QWORD *)(v1 + 48) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 56) = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = swift_task_alloc(v5);
  *(_QWORD *)(v1 + 64) = v6;
  v7 = swift_task_alloc(v5);
  *(_QWORD *)(v1 + 72) = v7;
  if (a1)
    return swift_task_switch(sub_100BB7794, a1, 0);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100BB7794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = static DispatchTime.now()();
  v6 = DispatchTime.uptimeNanoseconds.getter(v5);
  v7 = v4 + OBJC_IVAR____TtC12searchpartyd24SPAnalyticsItemPairEvent_beginAck;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd24SPAnalyticsItemPairEvent_beginAck, v0 + 16, 0, 0);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v7, v2);
  v9 = DispatchTime.uptimeNanoseconds.getter(v8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  result = v10(v1, v2);
  v12 = v6 - v9;
  if (v6 < v9)
  {
    __break(1u);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 48);
    v16 = (double)v12 / 1000000000.0;
    type metadata accessor for Transaction(0);
    v17 = swift_allocObject(&unk_1010B12D0, 32, 7);
    *(_QWORD *)(v17 + 16) = v14;
    *(double *)(v17 + 24) = v16;
    swift_retain(v14);
    static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_101117690, v17);
    swift_release(v17);
    v10(v13, v15);
    v18 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100BB78EC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  if (a1)
    return swift_task_switch(sub_100BB7910, a1, 0);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100BB7910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_1010B1280, 49, 7);
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 1;
  swift_retain(v1);
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F4770, v2);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BB79AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  if (a1)
    return swift_task_switch(sub_100BB79D4, a1, 0);
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100BB79D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_1010B12A8, 49, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  swift_retain(v1);
  v4 = v2;
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_101117688, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100BB7A70(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23[64];
  uint64_t v24;
  void *v25;

  v4 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v5 = qword_1011B7D88;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v25 = a1;
  swift_errorRetain(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v9 = String.init<A>(describing:)(&v25, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "#Durian: Error acking pairing lock. Error - %@", 46, 2, v7);
  swift_bridgeObjectRelease();
  v25 = a1;
  swift_errorRetain(a1);
  type metadata accessor for SPPairingSessionError(0);
  v13 = v12;
  if ((swift_dynamicCast(&v24, &v25, v8, v12, 6) & 1) != 0)
  {
    v14 = v24;
    v15 = (id)v24;
    a2(v14, 1);

  }
  else
  {
    v16 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v16, v23);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v18;
    *(_QWORD *)(inited + 48) = 0xD000000000000032;
    *(_QWORD *)(inited + 56) = 0x8000000100EF0D30;
    v19 = sub_1006B8DC4(inited);
    v24 = 1;
    sub_10047B41C(v19);
    v21 = v20;
    swift_bridgeObjectRelease();
    v22 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v25, &v24, v21, v13, v22);
    v15 = v25;
    a2((uint64_t)v25, 1);
  }

}

uint64_t sub_100BB7CB0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD))
{
  uint64_t v3;

  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D88, "#Durian: Ack pairing lock was successful.", 41, 2, _swiftEmptyArrayStorage);
  return a2(1, 0);
}

unint64_t sub_100BB7D44()
{
  unint64_t result;

  result = qword_101117638;
  if (!qword_101117638)
  {
    result = swift_getWitnessTable(byte_100E62DE0, &type metadata for ItemPairingCoordinator.PairingState);
    atomic_store(result, (unint64_t *)&qword_101117638);
  }
  return result;
}

uint64_t sub_100BB7D88()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BB7DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10111764C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return sub_100BB72EC(v2);
}

uint64_t sub_100BB7DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100BB7E9C(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for OSSignpostID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100BB7340(a1, v4, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(uint64_t (**)(void *, _QWORD))(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100BB7F10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100BB7F34(void *a1)
{
  uint64_t v1;

  sub_100BB7A70(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100BB7F3C(uint64_t a1)
{
  uint64_t v1;

  return sub_100BB7CB0(a1, *(uint64_t (**)(uint64_t, _QWORD))(v1 + 16));
}

uint64_t sub_100BB7F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10111765C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return sub_100BB76EC(v2);
}

uint64_t sub_100BB7F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10111766C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_100BB79AC(v2, v3);
}

uint64_t sub_100BB7FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10111767C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return sub_100BB78EC(v2);
}

uint64_t sub_100BB8038()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BB805C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(double *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10111D57C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_100CD7EE4(v2, v3);
}

uint64_t sub_100BB80B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F49D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BB8100()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10111769C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_100BB6A44, 0, 0);
}

uint64_t sub_100BB8160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1011176AC);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_100BB6AB0, 0, 0);
}

uint64_t sub_100BB81C8(uint64_t a1)
{
  uint64_t v1;

  return sub_100BB6B70(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24));
}

void sub_100BB81E0(void *a1, char a2)
{
  sub_100BB6C6C(a1, a2 & 1);
}

uint64_t sub_100BB81F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1011176D4);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004C28;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_100BB6050, 0, 0);
}

uint64_t sub_100BB8258()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100BB8284()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1011176E4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_100BB5FE4, 0, 0);
}

uint64_t sub_100BB82E4()
{
  uint64_t v0;

  sub_100294B28(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100BB8310(uint64_t a1)
{
  uint64_t v1;

  sub_100BB55C4(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100BB831C(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_100BB57E8(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100BB8324(uint64_t a1)
{
  uint64_t *v1;

  return sub_100BB4774(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100BB8340()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100BB837C()
{
  uint64_t *v0;

  return sub_100BB4980(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100BB838C()
{
  return sub_100BB83A0(0);
}

uint64_t sub_100BB8398()
{
  return sub_100BB83A0(1);
}

uint64_t sub_100BB83A0(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  if (v2)
    return v2(result & 1);
  return result;
}

uint64_t sub_100BB83CC(void (*a1)())
{
  uint64_t v1;
  void (**v2)();
  uint64_t v3;
  uint64_t v4;

  v2 = (void (**)())(v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock + 8);
  *v2 = sub_100BB8418;
  v2[1] = a1;
  swift_retain();
  return sub_10001D8A8(v4, v3);
}

void sub_100BB8418()
{
  uint64_t v0;

  sub_100BB42A8(v0);
}

uint64_t sub_100BB844C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  int64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v40 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v46 = sub_10001A9A8(&qword_1010EBFF8);
  v7 = __chkstk_darwin(v46);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v39 = (_QWORD **)((char *)&v34 - v10);
  v11 = __chkstk_darwin(v9);
  v13 = (_QWORD **)((char *)&v34 - v12);
  __chkstk_darwin(v11);
  v38 = (char *)&v34 - v14;
  v15 = *(_QWORD *)(a2 + 64);
  v34 = (_QWORD *)(a2 + 64);
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v35 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v41 = a2;
  swift_bridgeObjectRetain(a2);
  v36 = v13;
  v49 = a1;
  if (v18)
  {
    v45 = v3;
    v19 = __clz(__rbit64(v18));
    v42 = (v18 - 1) & v18;
    v43 = 0;
    goto LABEL_17;
  }
  v20 = 1;
  if (v35 > 1)
  {
    v21 = v34[1];
    if (v21)
    {
LABEL_16:
      v45 = v3;
      v42 = (v21 - 1) & v21;
      v43 = v20;
      v19 = __clz(__rbit64(v21)) + (v20 << 6);
LABEL_17:
      v23 = *(_QWORD *)(v41 + 56);
      v24 = (uint64_t *)(*(_QWORD *)(v41 + 48) + 16 * v19);
      v25 = *v24;
      v26 = v24[1];
      v44 = *(_QWORD *)(v40 + 72);
      v27 = v46;
      v28 = v38;
      sub_100035420(v23 + v44 * v19, (uint64_t)&v38[*(int *)(v46 + 48)]);
      *v28 = v25;
      v28[1] = v26;
      sub_100005CF0((uint64_t)v28, (uint64_t)v13, &qword_1010EBFF8);
      v29 = *(int *)(v27 + 48);
      v30 = v39;
      v31 = *v13;
      v32 = v13[1];
      *v39 = *v13;
      v30[1] = v32;
      sub_100035420((uint64_t)v13 + v29, (uint64_t)v30 + v29);
      v47 = v31;
      v48 = v32;
      __asm { BR              X9 }
    }
    v22 = 2;
    if (v35 > 2)
    {
      v21 = v34[2];
      if (v21)
        goto LABEL_15;
      v22 = 3;
      if (v35 <= 3)
        goto LABEL_22;
      v21 = v34[3];
      if (v21)
        goto LABEL_15;
      v22 = 4;
      if (v35 <= 4)
        goto LABEL_22;
      v21 = v34[4];
      if (v21)
      {
LABEL_15:
        v20 = v22;
        goto LABEL_16;
      }
      v22 = 5;
      if (v35 > 5)
      {
        v21 = v34[5];
        if (v21)
          goto LABEL_15;
        while (1)
        {
          v20 = v22 + 1;
          if (__OFADD__(v22, 1))
          {
            __break(1u);
            JUMPOUT(0x100BB8A6CLL);
          }
          if (v20 >= v35)
            break;
          v21 = v34[v20];
          ++v22;
          if (v21)
            goto LABEL_16;
        }
      }
    }
  }
LABEL_22:
  swift_release();
  return a1;
}

uint64_t sub_100BB8A8C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100BB8AC8 + 4 * byte_100E62E80[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_100BB8AC8()
{
  return 12645;
}

unint64_t sub_100BB8AD4()
{
  return 0xD000000000000013;
}

uint64_t sub_100BB8D64(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  __int128 v42;
  _BYTE v43[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101117708);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BBBD70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys, &type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys, v11, v9, v10);
  v42 = *v3;
  v41 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v42 = v3[1];
    v41 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    sub_100005CF0((uint64_t)(v3 + 2), (uint64_t)v43, &qword_1011194A0);
    sub_100005CF0((uint64_t)v43, (uint64_t)&v42, &qword_1011194A0);
    v41 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v13 = *((_QWORD *)v3 + 6);
    LOBYTE(v42) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v42, v5);
    v42 = *(__int128 *)((char *)v3 + 56);
    v41 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = *(__int128 *)((char *)v3 + 72);
    v41 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v14 = *((_QWORD *)v3 + 11);
    LOBYTE(v42) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v42, v5);
    v15 = *((_QWORD *)v3 + 12);
    v16 = *((unsigned __int8 *)v3 + 104);
    LOBYTE(v42) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v42, v5);
    *(_QWORD *)&v42 = *((_QWORD *)v3 + 14);
    v41 = 8;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v18 = sub_1001B1324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, v17, v18);
    *(_QWORD *)&v42 = *((_QWORD *)v3 + 15);
    v41 = 9;
    v19 = sub_10001A9A8(&qword_101100BE0);
    v20 = sub_100600CF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, v19, v20);
    v21 = *((_QWORD *)v3 + 16);
    v22 = *((unsigned __int8 *)v3 + 136);
    LOBYTE(v42) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v42, v5);
    v42 = v3[9];
    v41 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[10];
    v41 = 12;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[11];
    v41 = 13;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[12];
    v41 = 14;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[13];
    v41 = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[14];
    v41 = 16;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[15];
    v41 = 17;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v23 = *((_QWORD *)v3 + 32);
    v24 = *((_QWORD *)v3 + 33);
    LOBYTE(v42) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v42, v5);
    v25 = *((_QWORD *)v3 + 34);
    v26 = *((_QWORD *)v3 + 35);
    LOBYTE(v42) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v42, v5);
    v27 = *((_QWORD *)v3 + 36);
    v28 = *((_QWORD *)v3 + 37);
    LOBYTE(v42) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v42, v5);
    v29 = *((_QWORD *)v3 + 38);
    v30 = *((_QWORD *)v3 + 39);
    LOBYTE(v42) = 21;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v42, v5);
    v31 = *((_QWORD *)v3 + 40);
    v32 = *((_QWORD *)v3 + 41);
    LOBYTE(v42) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v42, v5);
    v33 = *((_QWORD *)v3 + 42);
    v34 = *((_QWORD *)v3 + 43);
    LOBYTE(v42) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v42, v5);
    v35 = *((_QWORD *)v3 + 44);
    v36 = *((_QWORD *)v3 + 45);
    LOBYTE(v42) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v42, v5);
    v37 = *((_QWORD *)v3 + 46);
    v38 = *((_QWORD *)v3 + 47);
    LOBYTE(v42) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, &v42, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100BB93A0()
{
  unsigned __int8 *v0;

  return sub_100BB8A8C(*v0);
}

uint64_t sub_100BB93A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100BBBFE8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100BB93CC(_BYTE *a1@<X8>)
{
  *a1 = 26;
}

uint64_t sub_100BB93D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BBBD70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BB9400(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BBBD70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BB9428(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[384];

  memcpy(v4, v1, sizeof(v4));
  return sub_100BB8D64(a1);
}

uint64_t *sub_100BB9478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *result;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;

  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 296);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 136);
  v13 = *(_QWORD *)(a1 + 144);
  v47 = *(_QWORD *)(a1 + 280);
  v48 = *(_QWORD *)(a1 + 272);
  sub_10001BBBC(v48, v47);
  v45 = v7;
  v46 = v6;
  sub_10001BBBC(v6, v7);
  v43 = v9;
  v44 = v8;
  sub_10001BD08(v8, v9);
  v49 = v10;
  v42 = v11;
  sub_10001BBBC(v10, v11);
  v40 = v13;
  v41 = v12;
  sub_10001BBBC(v12, v13);
  v14 = sub_100035530();
  v32 = DataProtocol.intValue.getter(&type metadata for Data, v14);
  v15 = *(_QWORD *)(a1 + 176);
  v33 = *(_QWORD *)(a1 + 168);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v15);
  v16 = sub_1006BABB8((uint64_t)_swiftEmptyArrayStorage);
  v31 = sub_100BB844C(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a1 + 208);
  v52 = *(_QWORD *)(a1 + 216);
  v18 = *(_QWORD *)(a1 + 224);
  v19 = *(_QWORD *)(a1 + 232);
  v21 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 240);
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 24);
  v54 = *(_QWORD *)a1;
  v55 = *(_QWORD *)(a1 + 248);
  v60 = *(_QWORD *)(a1 + 8);
  v36 = *(_QWORD *)(a1 + 88);
  v59 = *(_QWORD *)(a1 + 96);
  v35 = *(_QWORD *)(a1 + 56);
  v56 = *(_QWORD *)(a1 + 64);
  v34 = *(_QWORD *)(a1 + 72);
  v58 = *(_QWORD *)(a1 + 80);
  v39 = *(_QWORD *)(a1 + 304);
  v57 = *(_QWORD *)(a1 + 312);
  v30 = *(_QWORD *)(a1 + 320);
  v53 = *(_QWORD *)(a1 + 328);
  v37 = *(_QWORD *)(a1 + 200);
  v38 = *(_QWORD *)(a1 + 192);
  sub_10001BBBC(v38, v37);
  sub_10001BBBC(v17, v52);
  sub_10001BBBC(v18, v19);
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v22, v55);
  sub_10001BBBC(v23, v24);
  sub_10001BBBC(v54, v60);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v58);
  if (v53 >> 60 != 15)
  {
    v26 = sub_1001EDBAC(v30, v53);
    v28 = v27;
    Data.hexString.getter(v26, v27);
    sub_10001BC14(v26, v28);
    __asm { BR              X11 }
  }
  result = sub_1007060F4((uint64_t *)a1);
  *(_QWORD *)a4 = v48;
  *(_QWORD *)(a4 + 8) = v47;
  *(_QWORD *)(a4 + 16) = v46;
  *(_QWORD *)(a4 + 24) = v45;
  *(_QWORD *)(a4 + 32) = v44;
  *(_QWORD *)(a4 + 40) = v43;
  *(_QWORD *)(a4 + 64) = v42;
  *(_QWORD *)(a4 + 72) = v41;
  *(_QWORD *)(a4 + 80) = v40;
  *(_QWORD *)(a4 + 88) = v32;
  *(_QWORD *)(a4 + 112) = v33;
  *(_QWORD *)(a4 + 120) = v31;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = v49;
  *(_QWORD *)(a4 + 96) = *(_QWORD *)(a1 + 152);
  v29 = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a4 + 104) = *(_BYTE *)(a1 + 160);
  *(_QWORD *)(a4 + 128) = v29;
  *(_BYTE *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 144) = v38;
  *(_QWORD *)(a4 + 152) = v37;
  *(_QWORD *)(a4 + 160) = v17;
  *(_QWORD *)(a4 + 168) = v52;
  *(_QWORD *)(a4 + 176) = v18;
  *(_QWORD *)(a4 + 184) = v19;
  *(_QWORD *)(a4 + 192) = v21;
  *(_QWORD *)(a4 + 200) = v20;
  *(_QWORD *)(a4 + 208) = v23;
  *(_QWORD *)(a4 + 216) = v24;
  *(_QWORD *)(a4 + 224) = v22;
  *(_QWORD *)(a4 + 232) = v55;
  *(_QWORD *)(a4 + 240) = v54;
  *(_QWORD *)(a4 + 248) = v60;
  *(_QWORD *)(a4 + 256) = v36;
  *(_QWORD *)(a4 + 264) = v59;
  *(_QWORD *)(a4 + 272) = v35;
  *(_QWORD *)(a4 + 280) = v56;
  *(_QWORD *)(a4 + 288) = v34;
  *(_QWORD *)(a4 + 296) = v58;
  *(_QWORD *)(a4 + 304) = 0x302E302E33;
  *(_QWORD *)(a4 + 312) = 0xE500000000000000;
  *(_QWORD *)(a4 + 320) = v39;
  *(_QWORD *)(a4 + 328) = v57;
  *(_QWORD *)(a4 + 336) = 0;
  *(_QWORD *)(a4 + 344) = 0;
  *(_QWORD *)(a4 + 352) = 0;
  *(_QWORD *)(a4 + 360) = 0;
  *(_QWORD *)(a4 + 368) = a2;
  *(_QWORD *)(a4 + 376) = a3;
  return result;
}

uint64_t sub_100BB98C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[204] = a4;
  v4[203] = a3;
  v4[202] = a2;
  v4[201] = a1;
  v5 = type metadata accessor for HashAlgorithm(0);
  v4[205] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[206] = v6;
  v4[207] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v4[208] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[209] = v8;
  v4[210] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v4[211] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[212] = v10;
  v4[213] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BB9984, 0, 0);
}

void sub_100BB9984()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  NSString v40;
  unsigned int v41;
  const void *v42;
  void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __n128 v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (__cdecl *v59)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v6 = v0[213];
  v7 = v0[212];
  v8 = v0[211];
  v56 = v0[210];
  v57 = v0[209];
  v58 = v0[208];
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v11 = v10;

  v12 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
  v13 = v1;
  v14 = swift_bridgeObjectRelease();
  v15 = Date.init()(v14);
  v16 = Date.epoch.getter(v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[198] = v16;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v19 = v18;
  v20 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v17, v19, 0xD000000000000015, 0x8000000100ECA2E0, v20);
  swift_bridgeObjectRelease();
  v0[197] = 1;
  v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v23 = v22;
  v24 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v21, v23, 0xD000000000000013, 0x8000000100ECA300, v24);
  v25 = v13;
  swift_bridgeObjectRelease();
  v26 = sub_100AC2EB8();
  v28 = v27;
  v29 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28((uint64_t)v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  v30 = swift_bridgeObjectRelease();
  v31 = static Locale.current.getter(v30);
  v32 = Locale.acceptLanguageCode.getter(v31);
  v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
  v35 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28(v32, v34, 0x4C2D747065636341, 0xEF65676175676E61, v35);
  v36 = v25;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  if (v39)
  {
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v37, "BOOLForKey:", v40);

    v43 = v0 + 98;
    v42 = v0 + 2;
    if (v41)
    {
      v44 = swift_isUniquelyReferenced_nonNull_native(v36);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v44);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v43 = v0 + 98;
    v42 = v0 + 2;
  }
  v0[214] = v36;
  v45 = v0[203];
  v46 = v0[202];
  v47 = (uint64_t *)v0[201];
  sub_100705F38(v47);
  sub_100BB9478((uint64_t)v47, v46, v45, (uint64_t)v42);
  v48 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  JSONEncoder.init()(v49);
  memcpy(v43, v42, 0x180uLL);
  v50 = sub_100BBB0A4();
  v51 = dispatch thunk of JSONEncoder.encode<A>(_:)(v43, &type metadata for AirPodsSWPairingLockCheckRequestContent, v50);
  v0[215] = v51;
  v0[216] = v52;
  v53 = v51;
  v54 = v52;
  swift_release();
  sub_10001BBBC(v53, v54);
  v59 = (void (__cdecl *)())((char *)&dword_1011153A0 + dword_1011153A0);
  v55 = (_QWORD *)swift_task_alloc(unk_1011153A4);
  v0[217] = v55;
  *v55 = v0;
  v55[1] = sub_100BBA0E0;
  v59();
}

uint64_t sub_100BBA0E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1736);
  *(_QWORD *)(v3 + 1744) = a1;
  *(_QWORD *)(v3 + 1752) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100BBA140, 0, 0);
}

uint64_t sub_100BBA140()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[219];
  v2 = v0[218];
  v3 = v0[216];
  v4 = v0[215];
  v5 = v0[207];
  v6 = v0[206];
  v7 = v0[205];
  v0[194] = v2;
  v0[195] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[194];
  v0[220] = v8;
  v9 = v0[195];
  v0[221] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[222] = v10;
  v0[223] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115398 + dword_101115398;
  v13 = (_QWORD *)swift_task_alloc(unk_10111539C);
  v0[224] = v13;
  *v13 = v0;
  v13[1] = sub_100BBA280;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[204]);
}

uint64_t sub_100BBA280(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1792);
  *(_QWORD *)(*(_QWORD *)v2 + 1800) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100BBA92C;
  }
  else
  {
    v7 = v4[223];
    v8 = v4[222];
    v4[226] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_100BBA300;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100BBA300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t i;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *__dst;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int64_t v58;
  uint64_t v59[2];

  v1 = *(_QWORD *)(v0 + 1808);
  v2 = *(_QWORD *)(v0 + 1800);
  v3 = *(_QWORD *)(v0 + 1712);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v59[0] = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, v59);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 1768);
  v7 = *(_QWORD *)(v0 + 1760);
  v8 = v59[0];
  swift_bridgeObjectRelease();
  sub_10001BC14(v7, v6);
  if (qword_1010EA328 != -1)
LABEL_35:
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v52 = (uint64_t *)(v0 + 16);
  v53 = (_QWORD *)v0;
  __dst = (void *)(v0 + 400);
  v51 = v0 + 1592;
  v9 = type metadata accessor for Logger(0);
  v56 = sub_10001A9E8(v9, (uint64_t)qword_1011B7E28);
  v0 = Logger.logObject.getter(v56);
  v10 = static os_log_type_t.debug.getter(v0);
  if (os_log_type_enabled((os_log_t)v0, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v10, "Pairing lock header:", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v54 = v8 + 64;
  v12 = -1;
  v13 = -1 << *(_BYTE *)(v8 + 32);
  if (-v13 < 64)
    v12 = ~(-1 << -(char)v13);
  v14 = v12 & *(_QWORD *)(v8 + 64);
  v55 = (unint64_t)(63 - v13) >> 6;
  swift_bridgeObjectRetain(v8);
  for (i = 0; ; i = v58)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v58 = i;
      v17 = v16 | (i << 6);
      goto LABEL_27;
    }
    v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v0 = (uint64_t)v53;
    if (v18 >= v55)
      goto LABEL_29;
    v19 = *(_QWORD *)(v54 + 8 * v18);
    v20 = i + 1;
    if (!v19)
    {
      v20 = i + 2;
      if (i + 2 >= v55)
        goto LABEL_29;
      v19 = *(_QWORD *)(v54 + 8 * v20);
      if (!v19)
      {
        v20 = i + 3;
        if (i + 3 >= v55)
          goto LABEL_29;
        v19 = *(_QWORD *)(v54 + 8 * v20);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v14 = (v19 - 1) & v19;
    v58 = v20;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_27:
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v8 + 48) + v22);
    v25 = *v23;
    v24 = v23[1];
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 56) + v22);
    v27 = *v26;
    v28 = v26[1];
    swift_bridgeObjectRetain_n(v24, 2);
    swift_bridgeObjectRetain_n(v28, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = v8;
      v33 = swift_slowAlloc(22, -1);
      v0 = swift_slowAlloc(64, -1);
      v59[0] = v0;
      *(_DWORD *)v33 = 136315394;
      swift_bridgeObjectRetain(v24);
      *(_QWORD *)(v33 + 4) = sub_100016940(v25, v24, v59);
      swift_bridgeObjectRelease_n(v24, 3);
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)(v33 + 14) = sub_100016940(v27, v28, v59);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v0, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v0, -1, -1);
      v34 = v33;
      v8 = v32;
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v24, 2);
      swift_bridgeObjectRelease_n(v28, 2);
    }

  }
  v21 = i + 4;
  if (i + 4 < v55)
  {
    v19 = *(_QWORD *)(v54 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        v20 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_34;
        if (v20 >= v55)
          goto LABEL_29;
        v19 = *(_QWORD *)(v54 + 8 * v20);
        ++v21;
        if (v19)
          goto LABEL_26;
      }
    }
    v20 = i + 4;
    goto LABEL_26;
  }
LABEL_29:
  swift_release();
  sub_100BBB0E8(v52);
  v35 = sub_100BBB0E8(v52);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  v38 = os_log_type_enabled(v36, v37);
  v39 = v53[216];
  v40 = v53[215];
  v41 = (uint64_t *)v53[201];
  if (v38)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = v41;
    v43 = swift_slowAlloc(32, -1);
    v59[0] = v43;
    *(_DWORD *)v42 = 136315138;
    v0 = (uint64_t)v53;
    memcpy(__dst, v52, 0x180uLL);
    sub_100BBB0E8(v52);
    v44 = String.init<A>(describing:)(__dst, &type metadata for AirPodsSWPairingLockCheckRequestContent);
    v53[199] = sub_100016940(v44, v45, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v53 + 200, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_100BBB294(v52);
    sub_100BBB294(v52);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Pairing lock body %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
    swift_release();
    sub_1007060F4(v57);

    sub_10001BC14(v40, v39);
    sub_100BBB294(v52);
  }
  else
  {
    sub_100BBB294(v52);
    sub_10001BC14(v40, v39);
    sub_100BBB294(v52);
    sub_100BBB294(v52);
    swift_release();
    sub_1007060F4(v41);

  }
  v46 = *(_QWORD *)(v0 + 1728);
  v47 = *(_QWORD *)(v0 + 1720);
  v48 = *(_QWORD *)(v0 + 1680);
  v49 = *(_QWORD *)(v0 + 1656);
  swift_task_dealloc(*(_QWORD *)(v0 + 1704));
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v47, v46);
}

uint64_t sub_100BBA92C()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  NSObject *v46;
  os_log_type_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v62;
  void *__dst;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;

  v1 = v0;
  v64 = v0 + 200;
  v2 = v0[223];
  v3 = v0[222];
  v4 = v0[221];
  v5 = v0[220];
  sub_10001BC14(v3, v2);
  sub_10001BC14(v5, v4);
  v6 = (unint64_t)&qword_1010EA000;
  if (qword_1010EA328 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_2:
    v7 = v1[225];
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
    swift_errorRetain(v7);
    v9 = swift_errorRetain(v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = v1[225];
    if (v12)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      swift_errorRetain(v13);
      v16 = _swift_stdlib_bridgeErrorToNSError(v13);
      v1[200] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v1 + 201, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to generate attestation header: %{public}@.", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      v18 = v14;
      v6 = 0x1010EA000;
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      swift_errorRelease(v1[225]);
      swift_errorRelease(v13);
      swift_errorRelease(v13);

    }
    v67 = v1[214];
    if (*(_QWORD *)(v6 + 808) != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v65 = v1;
    v66 = v1 + 2;
    __dst = v1 + 50;
    v71 = sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
    v19 = Logger.logObject.getter(v71);
    v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Pairing lock header:", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
    v62 = v1 + 199;

    v22 = v67;
    v68 = v67 + 64;
    v23 = -1;
    v24 = -1 << *(_BYTE *)(v67 + 32);
    if (-v24 < 64)
      v23 = ~(-1 << -(char)v24);
    v6 = v23 & *(_QWORD *)(v67 + 64);
    v69 = (unint64_t)(63 - v24) >> 6;
    swift_bridgeObjectRetain(v67);
    v1 = 0;
    while (v6)
    {
      while (1)
      {
        v25 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v26 = v25 | ((_QWORD)v1 << 6);
LABEL_29:
        v30 = 16 * v26;
        v31 = (uint64_t *)(*(_QWORD *)(v22 + 48) + v30);
        v33 = *v31;
        v32 = v31[1];
        v34 = (uint64_t *)(*(_QWORD *)(v22 + 56) + v30);
        v35 = *v34;
        v36 = v34[1];
        swift_bridgeObjectRetain_n(v32, 2);
        swift_bridgeObjectRetain_n(v36, 2);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.debug.getter(v38);
        if (os_log_type_enabled(v38, v39))
          break;
        swift_bridgeObjectRelease_n(v32, 2);
        swift_bridgeObjectRelease_n(v36, 2);

        if (!v6)
          goto LABEL_15;
      }
      v40 = swift_slowAlloc(22, -1);
      v41 = v1;
      v42 = swift_slowAlloc(64, -1);
      v73 = v42;
      *(_DWORD *)v40 = 136315394;
      swift_bridgeObjectRetain(v32);
      *(_QWORD *)(v40 + 4) = sub_100016940(v33, v32, &v73);
      swift_bridgeObjectRelease_n(v32, 3);
      *(_WORD *)(v40 + 12) = 2080;
      swift_bridgeObjectRetain(v36);
      *(_QWORD *)(v40 + 14) = sub_100016940(v35, v36, &v73);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s: %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      v43 = v42;
      v1 = v41;
      swift_slowDealloc(v43, -1, -1);
      v44 = v40;
      v22 = v67;
      swift_slowDealloc(v44, -1, -1);

    }
LABEL_15:
    v27 = (int64_t)v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v27 >= v69)
      break;
    v28 = *(_QWORD *)(v68 + 8 * v27);
    v1 = (uint64_t *)((char *)v1 + 1);
    if (v28)
      goto LABEL_28;
    v1 = (uint64_t *)(v27 + 1);
    if (v27 + 1 >= v69)
      break;
    v28 = *(_QWORD *)(v68 + 8 * (_QWORD)v1);
    if (v28)
      goto LABEL_28;
    v1 = (uint64_t *)(v27 + 2);
    if (v27 + 2 >= v69)
      break;
    v28 = *(_QWORD *)(v68 + 8 * (_QWORD)v1);
    if (v28)
      goto LABEL_28;
    v29 = v27 + 3;
    if (v29 >= v69)
      break;
    v28 = *(_QWORD *)(v68 + 8 * v29);
    if (v28)
    {
      v1 = (uint64_t *)v29;
LABEL_28:
      v6 = (v28 - 1) & v28;
      v26 = __clz(__rbit64(v28)) + ((_QWORD)v1 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      v1 = (uint64_t *)(v29 + 1);
      if (__OFADD__(v29, 1))
        break;
      if ((uint64_t)v1 >= v69)
        goto LABEL_32;
      v28 = *(_QWORD *)(v68 + 8 * (_QWORD)v1);
      ++v29;
      if (v28)
        goto LABEL_28;
    }
LABEL_37:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_100BBB0E8(v66);
  v45 = sub_100BBB0E8(v66);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter(v46);
  v48 = os_log_type_enabled(v46, v47);
  v49 = v65[216];
  v50 = v65[215];
  v51 = (uint64_t *)v65[201];
  if (v48)
  {
    v72 = (uint64_t *)v65[201];
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = v49;
    v53 = swift_slowAlloc(32, -1);
    v73 = v53;
    *(_DWORD *)v52 = 136315138;
    memcpy(__dst, v66, 0x180uLL);
    sub_100BBB0E8(v66);
    v54 = String.init<A>(describing:)(__dst, &type metadata for AirPodsSWPairingLockCheckRequestContent);
    *v62 = sub_100016940(v54, v55, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, v64, v52 + 4, v52 + 12);
    swift_bridgeObjectRelease();
    sub_100BBB294(v66);
    sub_100BBB294(v66);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Pairing lock body %s", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    v56 = v52;
    v22 = v67;
    swift_slowDealloc(v56, -1, -1);
    swift_release();
    sub_1007060F4(v72);

    sub_10001BC14(v50, v70);
    sub_100BBB294(v66);
  }
  else
  {
    sub_100BBB294(v66);
    sub_10001BC14(v50, v49);
    sub_100BBB294(v66);
    sub_100BBB294(v66);
    swift_release();
    sub_1007060F4(v51);

  }
  v57 = v65[216];
  v58 = v65[215];
  v59 = v65[210];
  v60 = v65[207];
  swift_task_dealloc(v65[213]);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v65[1])(v22, v58, v57);
}

unint64_t sub_100BBB0A4()
{
  unint64_t result;

  result = qword_101117700;
  if (!qword_101117700)
  {
    result = swift_getWitnessTable(asc_100E62F14, &type metadata for AirPodsSWPairingLockCheckRequestContent);
    atomic_store(result, (unint64_t *)&qword_101117700);
  }
  return result;
}

uint64_t *sub_100BBB0E8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v7 = a1[8];
  v9 = a1[9];
  v8 = a1[10];
  v10 = a1[14];
  v12 = a1[15];
  v13 = a1[19];
  v14 = a1[18];
  v15 = a1[21];
  v16 = a1[20];
  v17 = a1[23];
  v18 = a1[22];
  v19 = a1[25];
  v22 = a1[26];
  v20 = a1[24];
  v21 = a1[27];
  v24 = a1[29];
  v25 = a1[28];
  v26 = a1[31];
  v27 = a1[30];
  v28 = a1[33];
  v29 = a1[35];
  v30 = a1[37];
  v31 = a1[39];
  v32 = a1[41];
  v33 = a1[43];
  v34 = a1[45];
  v23 = a1[47];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BD08(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v9, v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v22, v21);
  sub_10001BBBC(v25, v24);
  sub_10001BBBC(v27, v26);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  return a1;
}

uint64_t *sub_100BBB294(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v7 = a1[7];
  v6 = a1[8];
  v9 = a1[9];
  v8 = a1[10];
  v11 = a1[19];
  v12 = a1[18];
  v13 = a1[21];
  v14 = a1[20];
  v15 = a1[23];
  v16 = a1[22];
  v17 = a1[25];
  v18 = a1[24];
  v19 = a1[27];
  v22 = a1[28];
  v20 = a1[26];
  v21 = a1[29];
  v23 = a1[31];
  v24 = a1[30];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001EF3C(v4, v5);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v9, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v12, v11);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  sub_10001BC14(v22, v21);
  sub_10001BC14(v24, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for AirPodsSWPairingLockCheckRequestContent(uint64_t *a1)
{
  unint64_t v2;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[4], v2);
  sub_10001BC14(a1[7], a1[8]);
  sub_10001BC14(a1[9], a1[10]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[18], a1[19]);
  sub_10001BC14(a1[20], a1[21]);
  sub_10001BC14(a1[22], a1[23]);
  sub_10001BC14(a1[24], a1[25]);
  sub_10001BC14(a1[26], a1[27]);
  sub_10001BC14(a1[28], a1[29]);
  sub_10001BC14(a1[30], a1[31]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (uint64_t *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, *(_QWORD *)(a2 + 40));
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  v15 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v15;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v18 = *(_QWORD *)(a2 + 144);
  v19 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 144) = v18;
  *(_QWORD *)(a1 + 152) = v19;
  v20 = *(_QWORD *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = v21;
  v22 = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 176) = v22;
  *(_QWORD *)(a1 + 184) = v23;
  v24 = *(_QWORD *)(a2 + 192);
  v25 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 192) = v24;
  *(_QWORD *)(a1 + 200) = v25;
  v26 = *(_QWORD *)(a2 + 208);
  v27 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 208) = v26;
  *(_QWORD *)(a1 + 216) = v27;
  v28 = *(_QWORD *)(a2 + 224);
  v29 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v28, v29);
  *(_QWORD *)(a1 + 224) = v28;
  *(_QWORD *)(a1 + 232) = v29;
  v30 = *(_QWORD *)(a2 + 240);
  v31 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 240) = v30;
  *(_QWORD *)(a1 + 248) = v31;
  v32 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v32;
  v33 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v33;
  v34 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v34;
  v35 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v35;
  v36 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v36;
  v37 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v37;
  v38 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v38;
  v39 = *(_QWORD *)(a2 + 368);
  v40 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = v39;
  *(_QWORD *)(a1 + 376) = v40;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v40);
  return a1;
}

uint64_t assignWithCopy for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = (uint64_t *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      v15 = *v12;
      sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v13;
      sub_10001BC14(v16, v17);
      goto LABEL_8;
    }
    sub_1000DC964(a1 + 32);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v14 = *v12;
  sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v13;
LABEL_8:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  sub_10001BBBC(v18, v19);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a2 + 72);
  v23 = *(_QWORD *)(a2 + 80);
  sub_10001BBBC(v22, v23);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v22;
  *(_QWORD *)(a1 + 80) = v23;
  sub_10001BC14(v24, v25);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v26 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v26;
  v27 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v29;
  v30 = *(_QWORD *)(a2 + 144);
  v31 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v30, v31);
  v32 = *(_QWORD *)(a1 + 144);
  v33 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v30;
  *(_QWORD *)(a1 + 152) = v31;
  sub_10001BC14(v32, v33);
  v34 = *(_QWORD *)(a2 + 160);
  v35 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v34, v35);
  v36 = *(_QWORD *)(a1 + 160);
  v37 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v34;
  *(_QWORD *)(a1 + 168) = v35;
  sub_10001BC14(v36, v37);
  v38 = *(_QWORD *)(a2 + 176);
  v39 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v38, v39);
  v40 = *(_QWORD *)(a1 + 176);
  v41 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v38;
  *(_QWORD *)(a1 + 184) = v39;
  sub_10001BC14(v40, v41);
  v42 = *(_QWORD *)(a2 + 192);
  v43 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v42, v43);
  v44 = *(_QWORD *)(a1 + 192);
  v45 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v42;
  *(_QWORD *)(a1 + 200) = v43;
  sub_10001BC14(v44, v45);
  v46 = *(_QWORD *)(a2 + 208);
  v47 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v46, v47);
  v48 = *(_QWORD *)(a1 + 208);
  v49 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v46;
  *(_QWORD *)(a1 + 216) = v47;
  sub_10001BC14(v48, v49);
  v50 = *(_QWORD *)(a2 + 224);
  v51 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v50, v51);
  v52 = *(_QWORD *)(a1 + 224);
  v53 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v50;
  *(_QWORD *)(a1 + 232) = v51;
  sub_10001BC14(v52, v53);
  v54 = *(_QWORD *)(a2 + 240);
  v55 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v54, v55);
  v56 = *(_QWORD *)(a1 + 240);
  v57 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v54;
  *(_QWORD *)(a1 + 248) = v55;
  sub_10001BC14(v56, v57);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v58 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v59 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v60 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v61 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v62 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 328) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  v63 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 344) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  v64 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 360) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  v65 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 376) = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AirPodsSWPairingLockCheckRequestContent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x180uLL);
}

uint64_t assignWithTake for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = (_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)(a2 + 40);
    if (v10 >> 60 != 15)
    {
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = *v8;
      *(_QWORD *)(a1 + 40) = v10;
      sub_10001BC14(v11, v9);
      goto LABEL_6;
    }
    sub_1000DC964(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
LABEL_6:
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  sub_10001BC14(v13, v14);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001BC14(v15, v16);
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v17;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v18 = *(_QWORD *)(a1 + 144);
  v19 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a1 + 192);
  v25 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a1 + 208);
  v27 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a1 + 224);
  v29 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  sub_10001BC14(v28, v29);
  v30 = *(_QWORD *)(a1 + 240);
  v31 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001BC14(v30, v31);
  v32 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v32;
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v33;
  swift_bridgeObjectRelease();
  v34 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v34;
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v35;
  swift_bridgeObjectRelease();
  v36 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v36;
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v37;
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v38;
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v39;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 384))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 376) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 384) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 384) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckRequestContent()
{
  return &type metadata for AirPodsSWPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckRequest()
{
  return &type metadata for AirPodsSWPairingLockCheckRequest;
}

unint64_t sub_100BBBD70()
{
  unint64_t result;

  result = qword_101117710;
  if (!qword_101117710)
  {
    result = swift_getWitnessTable(byte_100E63058, &type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117710);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockCheckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_100BBBE90 + 4 * byte_100E62E9F[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_100BBBEC4 + 4 * byte_100E62E9A[v4]))();
}

uint64_t sub_100BBBEC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BBBECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BBBED4);
  return result;
}

uint64_t sub_100BBBEE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BBBEE8);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_100BBBEEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BBBEF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_100BBBF14()
{
  unint64_t result;

  result = qword_101117718;
  if (!qword_101117718)
  {
    result = swift_getWitnessTable(byte_100E63030, &type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117718);
  }
  return result;
}

unint64_t sub_100BBBF5C()
{
  unint64_t result;

  result = qword_101117720;
  if (!qword_101117720)
  {
    result = swift_getWitnessTable(byte_100E62FA0, &type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117720);
  }
  return result;
}

unint64_t sub_100BBBFA4()
{
  unint64_t result;

  result = qword_101117728;
  if (!qword_101117728)
  {
    result = swift_getWitnessTable(byte_100E62FC8, &type metadata for AirPodsSWPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117728);
  }
  return result;
}

uint64_t sub_100BBBFE8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12645 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12645, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x8000000100EC3110;
    if (a2 == 0x8000000100EC3110)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC3110, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x74617453636E7973 && a2 == 0xEA00000000007375)
  {
    v9 = 0xEA00000000007375;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617453636E7973, 0xEA00000000007375, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v10 = 0xEC0000007265626DLL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL)
  {
    v11 = 0xEF7265626D754E6CLL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169726553746C61, 0xEF7265626D754E6CLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    v12 = 0xE600000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x6F636165426D756ELL && a2 == 0xEA0000000000736ELL)
  {
    v13 = 0xEA0000000000736ELL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F636165426D756ELL, 0xEA0000000000736ELL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EC8A80)
  {
    v14 = 0x8000000100EC8A80;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC8A80, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100EDCCE0)
  {
    v15 = 0x8000000100EDCCE0;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100EDCCE0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x6E55646572616873 && a2 == 0xEA00000000007469)
  {
    v16 = 0xEA00000000007469;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E55646572616873, 0xEA00000000007469, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x314B64656573 && a2 == 0xE600000000000000)
  {
    v17 = 0xE600000000000000;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x314B64656573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    v18 = 0xE500000000000000;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374726563, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 7500643 && a2 == 0xE300000000000000)
  {
    v19 = 0xE300000000000000;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7500643, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065)
  {
    v20 = 0xE900000000000065;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E6F4E68747561, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v21 = 0xED00006E67695379;
LABEL_97:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_97;
  }
  if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69)
  {
    v22 = 0xEB000000006E6F69;
LABEL_103:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461747365747461, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_103;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100EDCD00)
  {
    v23 = 0x8000000100EDCD00;
LABEL_109:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EDCD00, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_109;
  }
  if (a1 == 0xD000000000000011)
  {
    v24 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_114;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_114:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v25 = 0xE900000000000064;
LABEL_120:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_120;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v26 = 0xEB00000000644970;
LABEL_126:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_126;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v27 = 0xEB000000006E6F69;
LABEL_132:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_132;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v28 = 0xEF6E6F6973726556;
LABEL_138:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_138;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v29 = 0xE900000000000064;
LABEL_144:
    swift_bridgeObjectRelease(v29);
    return 23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
    goto LABEL_144;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v30 = 0xE800000000000000;
LABEL_150:
    swift_bridgeObjectRelease(v30);
    return 24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
    goto LABEL_150;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EDCD20)
  {
    swift_bridgeObjectRelease(0x8000000100EDCD20);
    return 25;
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EDCD20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v31 & 1) != 0)
      return 25;
    else
      return 26;
  }
}

void sub_100BBCAAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;
  int64_t v22;
  void *v23;
  _QWORD v24[5];
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  _OWORD v32[2];
  uint64_t v33;
  char *v34;

  v21 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v3 + 63) >> 6;
  v6 = (char *)&v28 + 8;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v34 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_24;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v22)
      goto LABEL_27;
    v11 = *(_QWORD *)(v21 + 8 * v10);
    ++v7;
    if (!v11)
    {
      v7 = v10 + 1;
      if (v10 + 1 >= v22)
        goto LABEL_27;
      v11 = *(_QWORD *)(v21 + 8 * v7);
      if (!v11)
      {
        v7 = v10 + 2;
        if (v10 + 2 >= v22)
          goto LABEL_27;
        v11 = *(_QWORD *)(v21 + 8 * v7);
        if (!v11)
        {
          v7 = v10 + 3;
          if (v10 + 3 >= v22)
            goto LABEL_27;
          v11 = *(_QWORD *)(v21 + 8 * v7);
          if (!v11)
            break;
        }
      }
    }
LABEL_23:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_24:
    sub_10010F9DC(*(_QWORD *)(a1 + 48) + 40 * v9, (uint64_t)v31);
    sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)v32 + 8);
    v28 = v32[0];
    v29 = v32[1];
    v30 = v33;
    v26 = v31[0];
    v27 = v31[1];
    sub_10010F9DC((uint64_t)&v26, (uint64_t)v24);
    sub_100016A30((uint64_t)v6, (uint64_t)v25);
    type metadata accessor for CKError(0);
    v14 = v13;
    if (swift_dynamicCast(&v23, v25, v34, v13, 6))
    {
      v15 = v6;
      v16 = v23;
      sub_1002EAB4C((uint64_t)v24);
      v23 = v16;
      v17 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
      _BridgedStoredNSError.code.getter(v24, v14, v17);

      v6 = v15;
      if (v24[0] == 26)
      {
        swift_release(a1);
        v18 = v29;
        *(_OWORD *)(a2 + 32) = v28;
        *(_OWORD *)(a2 + 48) = v18;
        *(_QWORD *)(a2 + 64) = v30;
        v19 = v27;
        *(_OWORD *)a2 = v26;
        *(_OWORD *)(a2 + 16) = v19;
        return;
      }
    }
    else
    {
      sub_1002EAB4C((uint64_t)v24);
    }
    sub_100004048((uint64_t)&v26, (uint64_t *)&unk_101103AB0);
  }
  v12 = v10 + 4;
  if (v12 >= v22)
  {
LABEL_27:
    swift_release(a1);
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  v11 = *(_QWORD *)(v21 + 8 * v12);
  if (v11)
  {
    v7 = v12;
    goto LABEL_23;
  }
  while (1)
  {
    v7 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v7 >= v22)
      goto LABEL_27;
    v11 = *(_QWORD *)(v21 + 8 * v7);
    ++v12;
    if (v11)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_100BBCD9C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = result;
  v3 = 0;
  v5 = result + 56;
  v4 = *(_QWORD *)(result + 56);
  v20 = a2;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }
    v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9)
      goto LABEL_23;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    ++v3;
    if (!v17)
    {
      v3 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_23;
      v17 = *(_QWORD *)(v5 + 8 * v3);
      if (!v17)
      {
        v3 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_23;
        v17 = *(_QWORD *)(v5 + 8 * v3);
        if (!v17)
        {
          v3 = v16 + 3;
          if (v16 + 3 >= v9)
            goto LABEL_23;
          v17 = *(_QWORD *)(v5 + 8 * v3);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_5:
    v12 = *(_QWORD *)(v2 + 48) + 24 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 16);
    swift_bridgeObjectRetain(v14);
    sub_100A0AE78((uint64_t)&v19, v13, v14, v15);
    result = swift_bridgeObjectRelease();
  }
  v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    return v20;
  }
  v17 = *(_QWORD *)(v5 + 8 * v18);
  if (v17)
  {
    v3 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v3 >= v9)
      goto LABEL_23;
    v17 = *(_QWORD *)(v5 + 8 * v3);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100BBCF2C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_100A0A194(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100BBD084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = sub_10001A9A8(&qword_1010ED860);
  result = __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  v16 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v17 + 63) >> 6;
  v26 = a2;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v20 | (v15 << 6); ; i = __clz(__rbit64(v23)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * i, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v14, v4);
    sub_100A09F38((uint64_t)v10, v8);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v22);
    ++v15;
    if (!v23)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v25)
        goto LABEL_24;
      v23 = *(_QWORD *)(v16 + 8 * v15);
      if (!v23)
      {
        v15 = v22 + 2;
        if (v22 + 2 >= v25)
          goto LABEL_24;
        v23 = *(_QWORD *)(v16 + 8 * v15);
        if (!v23)
        {
          v15 = v22 + 3;
          if (v22 + 3 >= v25)
            goto LABEL_24;
          v23 = *(_QWORD *)(v16 + 8 * v15);
          if (!v23)
            break;
        }
      }
    }
LABEL_20:
    v19 = (v23 - 1) & v23;
  }
  v24 = v22 + 4;
  if (v24 >= v25)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, 1, 1, v4);
LABEL_25:
    swift_release();
    return v26;
  }
  v23 = *(_QWORD *)(v16 + 8 * v24);
  if (v23)
  {
    v15 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v15);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100BBD320(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = result;
  v3 = 0;
  v5 = result + 56;
  v4 = *(_QWORD *)(result + 56);
  v20 = a2;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v4;
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }
    v16 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9)
      goto LABEL_23;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    ++v3;
    if (!v17)
    {
      v3 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_23;
      v17 = *(_QWORD *)(v5 + 8 * v3);
      if (!v17)
      {
        v3 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_23;
        v17 = *(_QWORD *)(v5 + 8 * v3);
        if (!v17)
        {
          v3 = v16 + 3;
          if (v16 + 3 >= v9)
            goto LABEL_23;
          v17 = *(_QWORD *)(v5 + 8 * v3);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v3 << 6);
LABEL_5:
    v12 = *(_QWORD *)(v2 + 48) + 24 * v11;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v15 = *(_BYTE *)v12;
    swift_bridgeObjectRetain(v14);
    sub_100A0C018((uint64_t)&v19, v15, v13, v14);
    result = swift_bridgeObjectRelease();
  }
  v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    return v20;
  }
  v17 = *(_QWORD *)(v5 + 8 * v18);
  if (v17)
  {
    v3 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v3 >= v9)
      goto LABEL_23;
    v17 = *(_QWORD *)(v5 + 8 * v3);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100BBD4B0(uint64_t a1, void *a2)
{
  sub_100BBD4D4(a1, a2, &qword_101110020, SPCBPeripheralManagerSessionKey_ptr, &qword_1010FE6B8, (void (*)(id *, id))sub_100A11D90);
}

void sub_100BBD4D4(uint64_t a1, void *a2, unint64_t *a3, _QWORD *a4, unint64_t *a5, void (*a6)(id *, id))
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v33;
  uint64_t v34;
  id v35[2];
  _QWORD v36[5];

  v7 = a1;
  v35[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = sub_10000F4A0(0, a3, a4);
    v13 = sub_10001AC90(a5, a3, a4, (const char *)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v36, v11, v12, v13);
    v7 = v36[0];
    v33 = v36[1];
    v14 = v36[2];
    v15 = v36[3];
    v16 = v36[4];
  }
  else
  {
    v15 = 0;
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v14 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(a1 + 56);
  }
  v20 = (unint64_t)(v14 + 64) >> 6;
  if (v7 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v16)
    {
      v21 = (v16 - 1) & v16;
      v22 = __clz(__rbit64(v16)) | (v15 << 6);
      v23 = v15;
      goto LABEL_31;
    }
    v28 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v28 >= v20)
      goto LABEL_34;
    v29 = *(_QWORD *)(v33 + 8 * v28);
    v23 = v15 + 1;
    if (!v29)
    {
      v23 = v15 + 2;
      if (v15 + 2 >= v20)
        goto LABEL_34;
      v29 = *(_QWORD *)(v33 + 8 * v23);
      if (!v29)
      {
        v23 = v15 + 3;
        if (v15 + 3 >= v20)
          goto LABEL_34;
        v29 = *(_QWORD *)(v33 + 8 * v23);
        if (!v29)
        {
          v23 = v15 + 4;
          if (v15 + 4 >= v20)
            goto LABEL_34;
          v29 = *(_QWORD *)(v33 + 8 * v23);
          if (!v29)
          {
            v23 = v15 + 5;
            if (v15 + 5 >= v20)
              goto LABEL_34;
            v29 = *(_QWORD *)(v33 + 8 * v23);
            if (!v29)
            {
              v30 = v15 + 6;
              while (v20 != v30)
              {
                v29 = *(_QWORD *)(v33 + 8 * v30++);
                if (v29)
                {
                  v23 = v30 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_10007CC38(v7);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v21 = (v29 - 1) & v29;
    v22 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_31:
    v27 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v22);
    if (!v27)
      goto LABEL_34;
    while (1)
    {
      a6(v35, v27);

      v15 = v23;
      v16 = v21;
      if ((v7 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v24 = __CocoaSet.Iterator.next()(a1);
      if (v24)
      {
        v25 = v24;
        v34 = v24;
        v26 = sub_10000F4A0(0, a3, a4);
        swift_unknownObjectRetain(v25);
        swift_dynamicCast(v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
        v27 = v35[0];
        swift_unknownObjectRelease(v25);
        v23 = v15;
        v21 = v16;
        if (v27)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

uint64_t sub_100BBD78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v23 - v7;
  v9 = sub_10001A9A8(&qword_1010ED860);
  result = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v14 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a1 + 56);
  v24 = (unint64_t)(v15 + 63) >> 6;
  if (!v17)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v18 | (v13 << 6); ; i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1)
      return swift_release(a1);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    sub_100A09F38((uint64_t)v8, v6);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    if (v17)
      goto LABEL_4;
LABEL_5:
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v24)
      goto LABEL_24;
    v21 = *(_QWORD *)(v14 + 8 * v20);
    ++v13;
    if (!v21)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v24)
        goto LABEL_24;
      v21 = *(_QWORD *)(v14 + 8 * v13);
      if (!v21)
      {
        v13 = v20 + 2;
        if (v20 + 2 >= v24)
          goto LABEL_24;
        v21 = *(_QWORD *)(v14 + 8 * v13);
        if (!v21)
        {
          v13 = v20 + 3;
          if (v20 + 3 >= v24)
            goto LABEL_24;
          v21 = *(_QWORD *)(v14 + 8 * v13);
          if (!v21)
            break;
        }
      }
    }
LABEL_20:
    v17 = (v21 - 1) & v21;
  }
  v22 = v20 + 4;
  if (v22 >= v24)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, 1, 1, v2);
    return swift_release(a1);
  }
  v21 = *(_QWORD *)(v14 + 8 * v22);
  if (v21)
  {
    v13 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v13 >= v24)
      goto LABEL_24;
    v21 = *(_QWORD *)(v14 + 8 * v13);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100BBDA1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for RawSearchResult(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v24 - v8;
  result = __chkstk_darwin(v7);
  v12 = (char *)&v24 - v11;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_5;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v18)
      return swift_release();
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        return swift_release();
      v22 = *(_QWORD *)(v25 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          return swift_release();
        v22 = *(_QWORD *)(v25 + 8 * v13);
        if (!v22)
        {
          v13 = v21 + 3;
          if (v21 + 3 >= v18)
            return swift_release();
          v22 = *(_QWORD *)(v25 + 8 * v13);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    sub_10005972C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v20, (uint64_t)v12, type metadata accessor for RawSearchResult);
    sub_1000126EC((uint64_t)v12, (uint64_t)v6, type metadata accessor for RawSearchResult);
    sub_100A0C1EC((uint64_t)v9, (uint64_t)v6);
    result = sub_1000126B0((uint64_t)v9, type metadata accessor for RawSearchResult);
  }
  v23 = v21 + 4;
  if (v23 >= v18)
    return swift_release();
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      return swift_release();
    v22 = *(_QWORD *)(v25 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100BBDC38(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];

  v1 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.makeIterator()(result);
    v3 = type metadata accessor for Characteristic();
    v4 = sub_100006204(&qword_1011074B0, (uint64_t (*)(uint64_t))type metadata accessor for Characteristic, (uint64_t)&unk_100E50578);
    result = (uint64_t)Set.Iterator.init(_cocoa:)(v25, v2, v3, v4);
    v1 = v25[0];
    v22 = v25[1];
    v5 = v25[2];
    v6 = v25[3];
    v7 = v25[4];
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(result + 32);
    v22 = result + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(result + 56);
  }
  v11 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v7)
    {
      v12 = (v7 - 1) & v7;
      v13 = __clz(__rbit64(v7)) | (v6 << 6);
      v14 = v6;
      goto LABEL_31;
    }
    v19 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v19 >= v11)
      return sub_10007CC38(v1);
    v20 = *(_QWORD *)(v22 + 8 * v19);
    v14 = v6 + 1;
    if (!v20)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v11)
        return sub_10007CC38(v1);
      v20 = *(_QWORD *)(v22 + 8 * v14);
      if (!v20)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v11)
          return sub_10007CC38(v1);
        v20 = *(_QWORD *)(v22 + 8 * v14);
        if (!v20)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v11)
            return sub_10007CC38(v1);
          v20 = *(_QWORD *)(v22 + 8 * v14);
          if (!v20)
          {
            v14 = v6 + 5;
            if (v6 + 5 >= v11)
              return sub_10007CC38(v1);
            v20 = *(_QWORD *)(v22 + 8 * v14);
            if (!v20)
            {
              v21 = v6 + 6;
              while (v11 != v21)
              {
                v20 = *(_QWORD *)(v22 + 8 * v21++);
                if (v20)
                {
                  v14 = v21 - 1;
                  goto LABEL_30;
                }
              }
              return sub_10007CC38(v1);
            }
          }
        }
      }
    }
LABEL_30:
    v12 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_31:
    v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v13);
    swift_retain();
    if (!v18)
      return sub_10007CC38(v1);
    while (1)
    {
      sub_100A123B8(&v24, v18);
      result = swift_release();
      v6 = v14;
      v7 = v12;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v15 = __CocoaSet.Iterator.next()(result);
      if (v15)
      {
        v16 = v15;
        v23 = v15;
        v17 = type metadata accessor for Characteristic();
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
        v18 = v24;
        swift_unknownObjectRelease(v16);
        v14 = v6;
        v12 = v7;
        if (v18)
          continue;
      }
      return sub_10007CC38(v1);
    }
  }
  __break(1u);
  return result;
}

void sub_100BBDEC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _QWORD v25[5];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.makeIterator()(a1);
    v3 = sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
    v4 = sub_10001AC90(&qword_1010FE6A0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr, (const char *)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v25, v2, v3, v4);
    v1 = v25[0];
    v22 = v25[1];
    v5 = v25[2];
    v6 = v25[3];
    v7 = v25[4];
  }
  else
  {
    v6 = 0;
    v8 = -1 << *(_BYTE *)(a1 + 32);
    v22 = a1 + 56;
    v5 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(a1 + 56);
  }
  v11 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v7)
    {
      v12 = (v7 - 1) & v7;
      v13 = __clz(__rbit64(v7)) | (v6 << 6);
      v14 = v6;
      goto LABEL_31;
    }
    v19 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v19 >= v11)
      goto LABEL_34;
    v20 = *(_QWORD *)(v22 + 8 * v19);
    v14 = v6 + 1;
    if (!v20)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_34;
      v20 = *(_QWORD *)(v22 + 8 * v14);
      if (!v20)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_34;
        v20 = *(_QWORD *)(v22 + 8 * v14);
        if (!v20)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_34;
          v20 = *(_QWORD *)(v22 + 8 * v14);
          if (!v20)
          {
            v14 = v6 + 5;
            if (v6 + 5 >= v11)
              goto LABEL_34;
            v20 = *(_QWORD *)(v22 + 8 * v14);
            if (!v20)
            {
              v21 = v6 + 6;
              while (v11 != v21)
              {
                v20 = *(_QWORD *)(v22 + 8 * v21++);
                if (v20)
                {
                  v14 = v21 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_10007CC38(v1);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v12 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_31:
    v18 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v13);
    if (!v18)
      goto LABEL_34;
    while (1)
    {
      sub_100A135EC((Swift::Int *)&v24, v18);

      v6 = v14;
      v7 = v12;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v15 = __CocoaSet.Iterator.next()(a1);
      if (v15)
      {
        v16 = v15;
        v23 = v15;
        v17 = sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
        swift_unknownObjectRetain(v16);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
        v18 = v24;
        swift_unknownObjectRelease(v16);
        v14 = v6;
        v12 = v7;
        if (v18)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

uint64_t sub_100BBE184@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_100518E4C(a1, a2), (v7 & 1) != 0))
  {
    v8 = v6;
    v9 = *(_QWORD *)(a3 + 56);
    v10 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    v11 = *(_QWORD *)(v10 - 8);
    sub_10005972C(v9 + *(_QWORD *)(v11 + 72) * v8, a4, type metadata accessor for OwnedBeaconGroup.PairingState);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v13 = a4;
    v14 = 0;
    v15 = v10;
  }
  else
  {
    v15 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v13 = a4;
    v14 = 1;
  }
  return v12(v13, v14, 1, v15);
}

double sub_100BBE22C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = sub_100518DA0(a1, a2), (v7 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_100BBE27C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_100518EE0(a1), (v6 & 1) != 0))
  {
    v7 = v5;
    v8 = *(_QWORD *)(a2 + 56);
    v9 = type metadata accessor for BookmarkMetaData(0);
    v10 = *(_QWORD *)(v9 - 8);
    sub_10005972C(v8 + *(_QWORD *)(v10 + 72) * v7, a3, type metadata accessor for BookmarkMetaData);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v12 = a3;
    v13 = 0;
    v14 = v9;
  }
  else
  {
    v14 = type metadata accessor for BookmarkMetaData(0);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
    v12 = a3;
    v13 = 1;
  }
  return v11(v12, v13, 1, v14);
}

double sub_100BBE324@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_100518EE0(a1), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v5);
    v8 = *v7;
    v9 = v7[1];
    *a3 = *v7;
    a3[1] = v9;
    sub_10001BBBC(v8, v9);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = xmmword_100E22B20;
  }
  return result;
}

void *sub_100BBE37C(void *a1, uint64_t a2)
{
  return sub_100BBE3F4(a1, a2, (uint64_t (*)(void))sub_100518FA4, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
}

void sub_100BBE398(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16))
  {
    v3 = sub_100003FB0(a1);
    if ((v4 & 1) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3));
  }
}

void *sub_100BBE3D8(void *a1, uint64_t a2)
{
  return sub_100BBE3F4(a1, a2, (uint64_t (*)(void))sub_1005198D8, &qword_101111D28, NRDeviceMonitor_ptr);
}

void *sub_100BBE3F4(void *a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, _QWORD *a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v16;
  void *v17;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = a3();
      if ((v13 & 1) != 0)
      {
        v11 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v12);
        v14 = v11;
        return v11;
      }
    }
    return 0;
  }
  v8 = a1;
  v9 = __CocoaDictionary.lookup(_:)();

  if (!v9)
    return 0;
  v16 = v9;
  v10 = sub_10000F4A0(0, a4, a5);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v17, &v16, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  v11 = v17;
  swift_unknownObjectRelease(v9);
  return v11;
}

void sub_100BBE4D4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[7];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D40, "triggerFetch()", 14, 2, _swiftEmptyArrayStorage);
  swift_retain_n(v1, 2);
  v10 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4D5C);
  v11 = LOBYTE(aBlock[0]);
  v12 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v13 = qword_1011B7D48;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 56) = &type metadata for Bool;
  *(_QWORD *)(v15 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v15 + 32) = v11;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "localAvailable: %d", v29);
  v16 = swift_bridgeObjectRelease();
  v17 = static os_log_type_t.default.getter(v16);
  v18 = qword_1011B7D48;
  if (v11)
  {
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    swift_retain();
    v19 = sub_100BBF0A8();
    v20 = objc_msgSend(v19, "privateCloudDatabase");

    sub_100BCC634(v20, 0, 0, (uint64_t)sub_100BD3684, v1);
    swift_release_n(v1, 3);

  }
  else
  {
    v21 = os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v22 = static os_log_type_t.default.getter(v21);
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v18, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v23 = (_QWORD *)swift_allocObject(&unk_1010B1DE0, 40, 7);
    v23[2] = v1;
    v23[3] = sub_100BD3674;
    v23[4] = v1;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010B1DF8;
    v24 = _Block_copy(aBlock);
    v25 = swift_retain_n(v1, 2);
    static DispatchQoS.unspecified.getter(v25);
    v33 = _swiftEmptyArrayStorage;
    v26 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v28 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v27, v28, v2, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v24);
    _Block_release(v24);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    swift_release_n(v1, 2);
    swift_release();
  }
}

uint64_t sub_100BBE8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t aBlock;
  unint64_t v78;
  uint64_t (*v79)(uint64_t);
  void *v80;
  uint64_t (*v81)();
  _QWORD *v82;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8);
  v69 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for DispatchQoS(0);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CloudKitChangeSet(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v72 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v64 = (uint64_t)&v61 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v61 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v61 - v20;
  sub_10005972C(a1, (uint64_t)&v61 - v20, type metadata accessor for CloudKitChangeSet);
  v74 = v19;
  sub_10005972C((uint64_t)v21, (uint64_t)v19, type metadata accessor for CloudKitChangeSet);
  v22 = *(unsigned __int8 *)(v12 + 80);
  v23 = (v22 + 24) & ~v22;
  v62 = v13 + 7;
  v24 = (v13 + 7 + v23) & 0xFFFFFFFFFFFFFFF8;
  v63 = v22 | 7;
  v25 = swift_allocObject(&unk_1010B2088, v24 + 16, v22 | 7);
  *(_QWORD *)(v25 + 16) = v4;
  sub_1000126EC((uint64_t)v21, v25 + v23, type metadata accessor for CloudKitChangeSet);
  v73 = v25;
  v26 = (uint64_t *)(v25 + v24);
  v67 = a2;
  *v26 = a2;
  v26[1] = a3;
  swift_retain_n(v4, 2);
  v75 = a3;
  swift_retain_n(a3, 2);
  v27 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4D5C);
  v28 = aBlock;
  v29 = static os_log_type_t.default.getter(v27);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v30 = qword_1011B7D48;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v32 + 56) = &type metadata for Bool;
  *(_QWORD *)(v32 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v32 + 32) = v28;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "localAvailable: %d", v61);
  v33 = swift_bridgeObjectRelease();
  v34 = static os_log_type_t.default.getter(v33);
  v35 = qword_1011B7D48;
  if (v28)
  {
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v36 = (uint64_t)v74;
    v37 = v64;
    sub_10005972C((uint64_t)v74, v64, type metadata accessor for CloudKitChangeSet);
    sub_10005972C(v37, v72, type metadata accessor for CloudKitChangeSet);
    v38 = (v22 + 16) & ~v22;
    v39 = (v62 + v38) & 0xFFFFFFFFFFFFFFF8;
    v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
    v41 = swift_allocObject(&unk_1010B2100, v40 + 8, v63);
    sub_1000126EC(v37, v41 + v38, type metadata accessor for CloudKitChangeSet);
    v42 = (uint64_t *)(v41 + v39);
    v43 = v67;
    v44 = v75;
    *v42 = v67;
    v42[1] = v44;
    *(_QWORD *)(v41 + v40) = v4;
    v45 = qword_1010EA1D0;
    swift_retain_n(v4, 2);
    swift_retain_n(v44, 2);
    if (v45 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 0x7365547265646E75;
    v78 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v76, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    if (v76 == 1)
    {
      v46 = v72;
      sub_100BD0DF0(v72, v43, v44);
      swift_release();
    }
    else
    {
      v59 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v59);
      *((_QWORD *)&v61 - 4) = v4;
      *((_QWORD *)&v61 - 3) = sub_100BD4360;
      *((_QWORD *)&v61 - 2) = v41;
      static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, &v61 - 12, (char *)&type metadata for () + 8);
      swift_release();
      v46 = v72;
    }
    sub_1000126B0(v46, type metadata accessor for CloudKitChangeSet);
    swift_release();
    swift_release_n(v4, 2);
    swift_release();
  }
  else
  {
    v47 = os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v48 = static os_log_type_t.default.getter(v47);
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v35, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v49 = (_QWORD *)swift_allocObject(&unk_1010B20B0, 40, 7);
    v49[2] = v4;
    v49[3] = sub_100BD42FC;
    v49[4] = v73;
    v81 = sub_100882D68;
    v82 = v49;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = sub_100016FB8;
    v80 = &unk_1010B20C8;
    v50 = _Block_copy(&aBlock);
    swift_retain();
    v51 = swift_retain();
    v52 = v65;
    static DispatchQoS.unspecified.getter(v51);
    v76 = _swiftEmptyArrayStorage;
    v53 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v54 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v55 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v56 = v69;
    v57 = v54;
    v58 = v71;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v57, v55, v71, v53);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v52, v56, v50);
    _Block_release(v50);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v56, v58);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v52, v68);
    swift_release();
    swift_release();
    swift_release();
    v36 = (uint64_t)v74;
  }
  sub_1000126B0(v36, type metadata accessor for CloudKitChangeSet);
  return swift_release();
}

uint64_t sub_100BBEFC8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7E70);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7E70);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x74694B64756F6C63, 0xE800000000000000);
}

uint64_t sub_100BBF03C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 72);
  return result;
}

uint64_t sub_100BBF048()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  sub_1000234D8(v0, qword_101117730);
  *(_QWORD *)sub_10001A9E8(v0, (uint64_t)qword_101117730) = 120;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

id sub_100BBF0A8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 192);
  if (v1)
  {
    v2 = *(id *)(v0 + 192);
  }
  else
  {
    v3 = sub_100BBF0FC();
    v4 = *(void **)(v0 + 192);
    *(_QWORD *)(v0 + 192) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

id sub_100BBF0FC()
{
  id v0;
  id v1;
  unsigned int v2;
  NSString v3;
  unsigned __int8 v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v2 = objc_msgSend(v1, "isInternalBuild");

  if (v2)
  {
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v0, "BOOLForKey:", v3);

    if ((v4 & 1) != 0)
    {
      v5 = 2;
      goto LABEL_6;
    }
  }
  else
  {

  }
  v5 = 1;
LABEL_6:
  v6 = objc_allocWithZone((Class)CKContainerID);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithContainerIdentifier:environment:", v7, v5);

  v10 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v11 = qword_1011B7D40;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v13 + 56) = sub_10000F4A0(0, &qword_101117D40, CKContainerID_ptr);
  *(_QWORD *)(v13 + 64) = sub_10001AC90(&qword_101117D48, &qword_101117D40, CKContainerID_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v13 + 32) = v8;
  v14 = v8;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Created CloudKit container named: %{public}@", 44, 2, v13);
  swift_bridgeObjectRelease(v13);
  v15 = objc_msgSend(objc_allocWithZone((Class)CKContainer), "initWithContainerID:", v14);

  return v15;
}

uint64_t sub_100BBF334()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  _QWORD *v88;
  _QWORD v89[2];
  __int128 v90;
  uint64_t v91;

  v1 = v0;
  v71 = *v0;
  v2 = sub_10001A9A8(&qword_1010F2078);
  v85 = *(_QWORD *)(v2 - 8);
  v86 = v2;
  __chkstk_darwin(v2);
  v84 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v83 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_10001A9A8(&qword_101117D08);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v80);
  v79 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v78 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v76 = *(_QWORD *)(v10 - 8);
  v77 = v10;
  __chkstk_darwin(v10);
  v75 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101117D10);
  v74 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89[0] = v0[19];
  v17 = swift_retain();
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v17, 1.0);
  v88 = (_QWORD *)v0[4];
  v18 = sub_10001A9A8(&qword_1010F6870);
  v19 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v20 = sub_1000193A4(&qword_10110E888, &qword_1010F6870, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v21 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
  v81 = v20;
  v82 = v18;
  Publisher.throttle<A>(for:scheduler:latest:)(v13, &v88, 1, v18, v19, v20, v21);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v13, v73);
  swift_release(v89[0]);
  v22 = swift_allocObject(&unk_1010B28D0, 24, 7);
  swift_weakInit(v22 + 16, v0);
  v23 = sub_1000193A4(&qword_101117D18, &qword_101117D10, (const char *)&protocol conformance descriptor for Publishers.Throttle<A, B>);
  v24 = Publisher<>.sink(receiveValue:)(sub_100BD4ABC, v22, v14, v23);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v16, v14);
  v25 = v1[20];
  v1[20] = v24;
  swift_release(v25);
  v89[0] = 0;
  v89[1] = 0;
  v90 = xmmword_100E630B0;
  v91 = 704;
  v26 = v1[15];
  v27 = type metadata accessor for CloudKitCoalescer();
  swift_allocObject(v27, 112, 7);
  swift_retain();
  v28 = sub_100353E98((uint64_t)v89, (uint64_t)sub_100BD4AC4, v26);
  v29 = v1[17];
  v1[17] = v28;
  swift_release(v29);
  v30 = v75;
  v31 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v77);
  v32 = v78;
  static DispatchQoS.unspecified.getter(v31);
  v88 = _swiftEmptyArrayStorage;
  v33 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v34 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v35 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v36 = v79;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v34, v35, v80, v33);
  v37 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100EF2E60, v32, v36, v30, 0);
  v38 = v1[17];
  if (v38)
  {
    v88 = *(_QWORD **)(v38 + 24);
    v39 = sub_10001A9A8(&qword_1010F87D8);
    v40 = sub_1000193A4(&qword_1010F87E0, &qword_1010F87D8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v41 = Publisher.eraseToAnyPublisher()(v39, v40);
    v87 = v37;
    v88 = (_QWORD *)v41;
    v42 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v43 = (uint64_t)v83;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v83, 1, 1, v42);
    v44 = sub_10001A9A8(&qword_101117D20);
    v45 = sub_1000193A4(&qword_101117D28, &qword_101117D20, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v46 = v68;
    Publisher.receive<A>(on:options:)(&v87, v43, v44, v19, v45, v21);
    sub_100004048(v43, &qword_1010EECC8);
    swift_release(v88);
    v47 = swift_allocObject(&unk_1010B28D0, 24, 7);
    swift_weakInit(v47 + 16, v1);
    v48 = swift_allocObject(&unk_1010B2A60, 32, 7);
    v49 = v71;
    *(_QWORD *)(v48 + 16) = v47;
    *(_QWORD *)(v48 + 24) = v49;
    v50 = sub_1000193A4(&qword_101117D30, &qword_101117D08, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v51 = v70;
    v52 = Publisher<>.sink(receiveValue:)(sub_100BD4ACC, v48, v70, v50);
    swift_release(v48);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v51);
  }
  else
  {
    v52 = 0;
    v43 = (uint64_t)v83;
  }
  v53 = v1[18];
  v1[18] = v52;
  swift_release(v53);
  v88 = *(_QWORD **)(v26 + 32);
  v54 = Publisher.eraseToAnyPublisher()(v82, v81);
  v87 = (id)v1[6];
  v55 = v87;
  v88 = (_QWORD *)v54;
  v56 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v43, 1, 1, v56);
  v57 = v55;
  v58 = sub_10001A9A8(&qword_1010F2080);
  v59 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v60 = v84;
  Publisher.receive<A>(on:options:)(&v87, v43, v58, v19, v59, v21);
  sub_100004048(v43, &qword_1010EECC8);

  swift_release(v88);
  v61 = swift_allocObject(&unk_1010B28D0, 24, 7);
  swift_weakInit(v61 + 16, v1);
  v62 = sub_1000193A4(&qword_1010F2090, &qword_1010F2078, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v63 = v86;
  v64 = Publisher<>.sink(receiveValue:)(sub_10001CB08, v61, v86, v62);

  swift_release(v61);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v60, v63);
  v65 = v1[16];
  v1[16] = v64;
  return swift_release(v65);
}

uint64_t sub_100BBFB14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_100BC2014();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100BBFB68(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 16);
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BD4B14, a1, v2, (char *)&type metadata for () + 8, &type metadata for Bool);
  swift_release(v2);
  return v4;
}

uint64_t sub_100BBFBDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  NSObject *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[24];

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v28[-v9 - 8];
  v11 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v13 = result;
    v14 = static os_log_type_t.default.getter(result);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7D40, "Coalesced database update started.", 34, 2, _swiftEmptyArrayStorage);
    v15 = dispatch_group_create();
    dispatch_group_enter(v15);
    v16 = (_QWORD *)swift_allocObject(&unk_1010B2A88, 32, 7);
    v16[2] = v15;
    v16[3] = v11;
    v17 = v15;
    swift_retain();
    v18 = sub_100BBF0A8();
    v19 = objc_msgSend(v18, "privateCloudDatabase");

    sub_100BCC634(v19, 0, 0, (uint64_t)sub_100BD4B00, v16);
    swift_release(v16);

    static DispatchTime.now()(v20);
    if (qword_1010EA380 != -1)
      swift_once(&qword_1010EA380, sub_100BBF048);
    v21 = type metadata accessor for DispatchTimeInterval(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_101117730);
    + infix(_:_:)(v8, v22);
    v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v4);
    OS_dispatch_group.wait(timeout:)(v10);
    v24 = *(_QWORD *)(v13 + 40);
    swift_retain();
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4B0C);
    swift_release(v24);
    sub_1007B742C();
    v25 = sub_10001A9A8(&qword_1010FAB00);
    v26 = sub_1000193A4(&qword_101117D38, &qword_1010FAB00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v25, v26);

    v23(v10, v4);
    return swift_release(v13);
  }
  return result;
}

void sub_100BBFE8C(uint64_t a1, char a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[8];

  Transaction.capture()();
  if ((a2 & 1) != 0)
  {
    v8 = swift_errorRetain(a1);
    v9 = static os_log_type_t.error.getter(v8);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v10 = qword_1011B7D40;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v17, v16);
    v13 = Error.localizedDescription.getter(v16[1], v16[2]);
    v15 = v14;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    *(_QWORD *)(v12 + 64) = sub_10001AA00();
    *(_QWORD *)(v12 + 32) = v13;
    *(_QWORD *)(v12 + 40) = v15;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Coalesced fetchChanges error: %@", 32, 2, v12);
    swift_bridgeObjectRelease();
    sub_10010F948(a1, 1);
  }
  else
  {
    v7 = static os_log_type_t.default.getter(v6);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D40, "Coalesced fetchChanges completed.", 33, 2, _swiftEmptyArrayStorage);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_100BC0028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  return swift_release(Strong);
}

uint64_t sub_100BC006C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  result = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(a1 + 184) = 1;
  v6 = *(_QWORD *)(a1 + 136);
  if (v6)
  {
    swift_retain();
    static Date.trustedNow.getter((uint64_t)v5);
    v7 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 0, 1, v7);
    v8 = sub_100354F1C((uint64_t)v5);
    v9 = static os_log_type_t.default.getter(v8);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D40, "CloudKitCoalescer task execution requested.", 43, 2, _swiftEmptyArrayStorage);
    v10 = sub_100354CD4();
    sub_10010F948(v10, v11 & 1);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_100BC0194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  void (*v14)(void *, char);
  uint64_t v15;

  v4 = sub_10001A9A8(&qword_101117CD0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_1010B21C8, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v10 + v9, v7, v4);
  type metadata accessor for Transaction(0);
  v13 = a2;
  v14 = sub_100BD454C;
  v15 = v10;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.CloudKitCoordinator.AccountInfo", 61, 2, sub_100BD459C, v12, &type metadata for () + 1);
  return swift_release();
}

void sub_100BC02A8(void *a1, char a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  int v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_1010EA378 != -1)
      swift_once(&qword_1010EA378, sub_100BBEFC8);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7E70);
    swift_errorRetain(a1);
    v15 = swift_errorRetain(a1);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v33 = (uint64_t)a1;
      v34 = v19;
      *(_DWORD *)v18 = 136446210;
      swift_errorRetain(a1);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v21 = String.init<A>(describing:)(&v33, v20);
      v33 = sub_100016940(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_10010F93C(a1, 1);
      sub_10010F93C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "accountInfo error: %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_10010F93C(a1, 1);
      sub_10010F93C(a1, 1);
    }

    LOBYTE(v34) = 0;
    v31 = sub_10001A9A8(&qword_101117CD0);
    CheckedContinuation.resume(returning:)(&v34, v31);
    v29 = a1;
    v30 = 1;
  }
  else
  {
    v3 = qword_1010EA378;
    v4 = a1;
    if (v3 != -1)
      swift_once(&qword_1010EA378, sub_100BBEFC8);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7E70);
    v6 = v4;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v34 = v32;
      *(_DWORD *)v9 = 136315138;
      v10 = objc_msgSend(v6, "description");
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      sub_10010F93C(a1, 0);
      v33 = sub_100016940(v11, v13, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      sub_10010F93C(a1, 0);
      sub_10010F93C(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "accountInfo: %s", v9, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_10010F93C(a1, 0);
      sub_10010F93C(a1, 0);
    }

    v23 = objc_msgSend(v6, "supportsDeviceToDeviceEncryption");
    v24 = (int)v23;
    v25 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 67109120;
      LODWORD(v34) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4, v27 + 4, v27 + 8);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "isManateeAvailable: %{BOOL}d", v27, 8u);
      swift_slowDealloc(v27, -1, -1);
    }

    LOBYTE(v34) = v24;
    v28 = sub_10001A9A8(&qword_101117CD0);
    CheckedContinuation.resume(returning:)(&v34, v28);
    v29 = a1;
    v30 = 0;
  }
  sub_10010F93C(v29, v30);
}

uint64_t sub_100BC074C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v10 = (void *)static OS_dispatch_queue.main.getter();
  v11 = swift_allocObject(&unk_1010B2AB0, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_100BD4B38;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B2AC8;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v13 = swift_release();
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v18);
}

void sub_100BC0974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  void *v31;
  objc_class *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  NSString v40;
  NSString v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  Class isa;
  void *v50;
  id v51;
  NSString v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  objc_super v59;
  _QWORD *v60;
  unint64_t v61;

  v1 = v0;
  v56 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v56);
  v57 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v14 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (!*(_QWORD *)(v1 + 240))
  {
    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v16 = objc_msgSend(v15, "bundleIdentifier");

    if (v16)
    {
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v58 = v1;
      v20 = v19;

      v60 = 0;
      v61 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      v60 = (_QWORD *)0xD00000000000001BLL;
      v61 = 0x8000000100EF2FD0;
      v21._countAndFlagsBits = v18;
      v21._object = v20;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v23 = v60;
      v22 = v61;
      v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
      static DispatchQoS.unspecified.getter(v24);
      v60 = _swiftEmptyArrayStorage;
      v25 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
      v27 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
      v28 = v57;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v26, v27, v56, v25);
      v29 = v5;
      v30 = v23;
      v31 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x8000000100EF3010, v29, v28, v9, 0);
      v32 = (objc_class *)type metadata accessor for ContainerAPSBridge();
      v33 = (char *)objc_allocWithZone(v32);
      v34 = &v33[OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate];
      *((_QWORD *)v34 + 1) = 0;
      v35 = swift_unknownObjectWeakInit(v34, 0);
      *(_QWORD *)(v35 + 8) = &off_10105B8B8;
      swift_unknownObjectWeakAssign(v35, v58);
      v59.receiver = v33;
      v59.super_class = v32;
      v36 = objc_msgSendSuper2(&v59, "init");
      v37 = *(void **)(v58 + 248);
      *(_QWORD *)(v58 + 248) = v36;

      v38 = *(_QWORD *)(v58 + 232);
      v39 = objc_allocWithZone((Class)APSConnection);
      swift_bridgeObjectRetain(v38);
      v14 = v31;
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v41 = String._bridgeToObjectiveC()();
      v42 = objc_msgSend(v39, "initWithEnvironmentName:namedDelegatePort:queue:", v40, v41, v14);

      v43 = v58;
      v44 = *(void **)(v43 + 240);
      *(_QWORD *)(v43 + 240) = v42;

      v45 = *(void **)(v43 + 240);
      if (!v45)
        goto LABEL_8;
      v46 = sub_10001A9A8(&qword_101106C20);
      v47 = swift_allocObject(v46, 48, 7);
      *(_OWORD *)(v47 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v47 + 32) = v30;
      *(_QWORD *)(v47 + 40) = v22;
      v48 = v45;
      swift_bridgeObjectRetain(v22);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v43 = v58;
      swift_bridgeObjectRelease();
      objc_msgSend(v48, "_setEnabledTopics:", isa);

      v50 = *(void **)(v43 + 240);
      if (v50)
      {
        v51 = v50;
        v52 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        objc_msgSend(v51, "requestTokenForTopic:identifier:", v52, 0);

        v43 = v58;
        v53 = *(id *)(v43 + 240);
        if (!v53)
        {
LABEL_10:
          v7 = static os_log_type_t.default.getter(v53);
          if (qword_1010EA260 == -1)
          {
LABEL_11:
            os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D40, "Set up APS connection", 21, 2, _swiftEmptyArrayStorage);

            return;
          }
LABEL_17:
          swift_once(&qword_1010EA260, sub_100B5DA30);
          goto LABEL_11;
        }
      }
      else
      {
LABEL_8:
        swift_bridgeObjectRelease();
        v53 = *(id *)(v43 + 240);
        if (!v53)
          goto LABEL_10;
      }
      v53 = objc_msgSend(v53, "setDelegate:", *(_QWORD *)(v43 + 248));
      goto LABEL_10;
    }
    v54 = static os_log_type_t.error.getter(v17);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D40, "Unable to get bundleIdentifier!", 31, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_100BC0F58(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  result = os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D48, "available set to true", 21, 2, _swiftEmptyArrayStorage);
  *(_BYTE *)(a1 + 72) = 1;
  return result;
}

uint64_t sub_100BC0FEC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v3 = static os_log_type_t.default.getter(v2);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v4 = qword_1011B7D40;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D40, "Add listener for CKAccountChanged", 33, 2, _swiftEmptyArrayStorage);
  v5 = static os_log_type_t.default.getter(objc_msgSend(v2, "addObserver:selector:name:object:", v1, "accountDidChange:", CKAccountChangedNotification, 0));
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v4, "Add listener for CKIdentityUpdateNotification", 45, 2, _swiftEmptyArrayStorage);
  v6 = swift_allocObject(&unk_1010B28D0, 24, 7);
  swift_weakInit(v6 + 16, v1);
  v7 = sub_10001A9A8(&qword_1010F0E48);
  inited = swift_initStackObject(v7, &v14);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v9 = swift_allocObject(&unk_1010B2A38, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100BD4AB4;
  *(_QWORD *)(v9 + 24) = v6;
  *(_QWORD *)(inited + 32) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 40) = 0x8000000100EF2E40;
  *(_QWORD *)(inited + 48) = sub_10015A05C;
  *(_QWORD *)(inited + 56) = v9;
  swift_retain();
  v10 = sub_1006B9680(inited);
  v11 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = DarwinNotificationHelper.init(notificationHandlers:)(v10);

  swift_release();
  *(_QWORD *)(v1 + 256) = v12;
  return swift_release();
}

uint64_t sub_100BC11E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_100BBE4D4();
    return swift_release();
  }
  return result;
}

uint64_t sub_100BC1238(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t result;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  void **aBlock;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;

  v2 = v1;
  v33 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = (char *)&type metadata for () + 8;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD49D0);
  v9 = *(_QWORD *)(v1 + 64);
  v40 = sub_100BD49E8;
  v41 = v1;
  aBlock = _NSConcreteStackBlock;
  v37 = 1107296256;
  v38 = sub_100016FB8;
  v39 = &unk_1010B28E8;
  v10 = _Block_copy(&aBlock);
  v11 = swift_retain();
  static DispatchQoS.unspecified.getter(v11);
  v35 = _swiftEmptyArrayStorage;
  v12 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v28 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v13, v28, v3, v12);
  v27 = v9;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v10);
  _Block_release(v10);
  v14 = *(void (**)(char *, uint64_t))(v31 + 8);
  v14(v5, v3);
  v15 = v30;
  v31 = *(_QWORD *)(v29 + 8);
  ((void (*)(char *, uint64_t))v31)(v8, v30);
  swift_release(v41);
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.CloudKitCoordinator.AccountDidChange", 66, 2, sub_100BD49F0, v1, v32);
  v32 = *(char **)(v1 + 48);
  v16 = swift_allocObject(&unk_1010B28D0, 24, 7);
  swift_weakInit(v16 + 16, v1);
  v40 = sub_100BD4A08;
  v41 = v16;
  aBlock = _NSConcreteStackBlock;
  v37 = 1107296256;
  v38 = sub_100016FB8;
  v39 = &unk_1010B2910;
  v17 = _Block_copy(&aBlock);
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v35 = _swiftEmptyArrayStorage;
  v29 = v13;
  v19 = v13;
  v20 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v19, v28, v3, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v17);
  v21 = v17;
  v22 = (void (*)(char *, uint64_t))v31;
  _Block_release(v21);
  v14(v5, v3);
  v22(v8, v15);
  v23 = v41;
  swift_release(v16);
  result = swift_release(v23);
  if ((v33 & 1) == 0)
  {
    v40 = sub_100BD4A10;
    v41 = v2;
    aBlock = _NSConcreteStackBlock;
    v37 = 1107296256;
    v38 = sub_100016FB8;
    v39 = &unk_1010B2938;
    v25 = _Block_copy(&aBlock);
    v26 = swift_retain();
    static DispatchQoS.unspecified.getter(v26);
    v35 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v29, v20, v3, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v25);
    _Block_release(v25);
    v14(v5, v3);
    v22(v8, v15);
    return swift_release(v41);
  }
  return result;
}

void sub_100BC1644(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  id v5;
  dispatch_semaphore_t v6;
  void *v7;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D40, "Resetting CloudKitCoordinator available flags", 45, 2, _swiftEmptyArrayStorage);
  v3 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 80) = xmmword_100E630C0;
  sub_100BD3364(v3);
  v4 = *(_QWORD *)(a1 + 80);
  sub_100BD3374(v4);
  sub_100BD2AE8(v4);
  sub_100BD3364(v4);
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v5 = *(id *)(a1 + 56);
  OS_dispatch_semaphore.signal()();

  v6 = dispatch_semaphore_create(0);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;

}

uint64_t sub_100BC1730(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D48, "Waiting for CloudKit to become available", 40, 2, _swiftEmptyArrayStorage);
  v3 = *(id *)(a1 + 56);
  OS_dispatch_semaphore.wait()();

  v5 = static os_log_type_t.default.getter(v4);
  return os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7D48, "Done waiting for CloudKit to become available", 45, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_100BC17F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = (_QWORD *)result;
    Strong = swift_unknownObjectWeakLoadStrong(result + 16);
    if (Strong)
    {
      v5 = Strong;
      sub_1000828B8(v3);
      swift_release(v3);
      return swift_unknownObjectRelease(v5);
    }
    else
    {
      return swift_release(v3);
    }
  }
  return result;
}

uint64_t sub_100BC1874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS(0);
  v3 = __chkstk_darwin(v2);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = static os_log_type_t.default.getter(v3);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v7 = os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1011B7D40, "checkinRetryFetch", 17, 2, _swiftEmptyArrayStorage);
  static DispatchQoS.background.getter(v7);
  v8 = swift_allocObject(&unk_1010B28D0, 24, 7);
  swift_weakInit(v8 + 16, v1);
  v9 = swift_allocObject(&unk_1010B28D0, 24, 7);
  swift_weakInit(v9 + 16, v1);
  v10 = type metadata accessor for XPCActivity();
  swift_allocObject(v10, 112, 7);
  v11 = sub_100734F68(0xD000000000000028, (void *)0x8000000100EF2B50, (uint64_t)v5, (uint64_t)sub_100BD4960, v8, (uint64_t)sub_100BD4968, v9);
  swift_release();
  v12 = swift_release();
  __chkstk_darwin(v12);
  *(_QWORD *)&v14[-16] = v1;
  *(_QWORD *)&v14[-8] = v11;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4970);
  return swift_release();
}

uint64_t sub_100BC1A44@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _BYTE v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    swift_retain();
    sub_10001A9A8(&qword_101106350);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD49A8);
    swift_release();
    result = swift_release();
    v5 = v8;
    v6 = v9;
    v7 = v10;
  }
  else
  {
    v7 = 0;
    v5 = xmmword_100E2E3C0;
    v6 = 0uLL;
  }
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_100BC1B00(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];

  v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v18, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v9 = static os_log_type_t.default.getter(v8);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      v10 = qword_1011B7D40;
      v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
      v17 = a1;
      v13 = type metadata accessor for XPCActivity();
      swift_retain();
      v14 = String.init<A>(describing:)(&v17, v13);
      v16 = v15;
      *(_QWORD *)(v12 + 56) = &type metadata for String;
      *(_QWORD *)(v12 + 64) = sub_10001AA00();
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v16;
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "scheduleRetryFetch timer fired: %@", 34, 2, v12, v17);
      swift_bridgeObjectRelease();
      sub_100BC1238(0);
      LOBYTE(v17) = 1;
      PassthroughSubject.send(_:)(&v17);
      sub_100732A0C();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100BC1C94(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[4];

  *(_BYTE *)(a1 + 112) = 1;
  v1 = *(_QWORD *)(a1 + 104);
  type metadata accessor for Transaction(0);
  v3[2] = v1;
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.CloudKitCoordinator.scheduleRetryFetch", 68, 2, sub_100BD41F0, v3, (char *)&type metadata for () + 8);
  return swift_release(v1);
}

uint64_t sub_100BC1D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  uint64_t v27;
  _QWORD *v28;

  v22 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v13 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v14 = swift_allocObject(&unk_1010B1FE8, 32, 7);
  *(_QWORD *)(v14 + 16) = v22;
  *(_QWORD *)(v14 + 24) = a2;
  aBlock[4] = sub_100BD4214;
  v27 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B2000;
  v15 = _Block_copy(aBlock);
  swift_retain();
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v28 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  return swift_release(v27);
}

void sub_100BC1FB4(uint64_t a1, uint64_t a2)
{
  Transaction.capture()();
  if (a2)
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, a2, *(_QWORD *)(a2 + 40), (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
}

uint64_t sub_100BC2014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[2];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 32);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_1010E9D08 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D08, sub_10059A6E0);
LABEL_3:
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B488(v15[1]);
  v9 = v8;
  v10 = swift_bridgeObjectRelease();
  v11 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7D40, "iCloud Account available", 24, 2, _swiftEmptyArrayStorage);
  v12 = swift_allocObject(&unk_1010B2880, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v13);
  v15[-4] = v1;
  v15[-3] = (uint64_t)sub_100BD48E0;
  v15[-2] = v12;
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.CloudKitCoordinator.AccountInfo", 61, 2, sub_100BD4EFC, &v15[-6], (char *)&type metadata for () + 8);
  return swift_release(v12);
}

void sub_100BC2238(void *a1, char a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char v59;
  _QWORD *v60;
  uint64_t Strong;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, id);
  id v67;
  uint64_t v68;
  Swift::String v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  Swift::String v74;
  id v75;
  uint64_t v76;
  void *v77;
  void *v78;
  Swift::String v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t v102;
  double v103;
  Class v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  void (*v121)(char *, uint64_t);
  char *v122;
  uint64_t v123;
  id v124;
  id v125;
  double v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  id v137;
  char *v138;
  id v139;
  __int128 v140;
  void *v141;
  _QWORD *v142;
  Swift::String aBlock;
  uint64_t (*v144)(uint64_t);
  void *v145;
  void (*v146)();
  uint64_t v147;

  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v126 - v13;
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL(0);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  v21 = (void *)__chkstk_darwin(v20);
  if ((a2 & 1) != 0)
  {
    v49 = swift_errorRetain(a1);
    v50 = static os_log_type_t.error.getter(v49);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v51 = qword_1011B7D40;
    v52 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v53 = swift_allocObject(v52, 72, 7);
    *(_OWORD *)(v53 + 16) = xmmword_100E22B00;
    aBlock._countAndFlagsBits = (uint64_t)a1;
    swift_errorRetain(a1);
    v54 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v55 = String.init<A>(describing:)(&aBlock, v54);
    v57 = v56;
    *(_QWORD *)(v53 + 56) = &type metadata for String;
    *(_QWORD *)(v53 + 64) = sub_10001AA00();
    *(_QWORD *)(v53 + 32) = v55;
    *(_QWORD *)(v53 + 40) = v57;
    os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "accountInfo error: %{public}@", 29, 2, v53);
    swift_bridgeObjectRelease();
    v58 = a1;
    v59 = 1;
    goto LABEL_12;
  }
  v135 = v25;
  v136 = v24;
  v137 = v23;
  v138 = (char *)&v126 - v22;
  v139 = v21;
  v127 = v15;
  v128 = v17;
  v129 = v12;
  v130 = v9;
  v131 = v14;
  v132 = v8;
  v26 = a3;
  v27 = a1;
  v28 = static os_log_type_t.default.getter(v27);
  v29 = a1;
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v30 = qword_1011B7D40;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v31, 72, 7);
  v140 = xmmword_100E22B00;
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  v33 = v27;
  v34 = objc_msgSend(v33, "description");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v141 = v29;
  sub_10010F93C(v29, 0);
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  v133 = sub_10001AA00();
  *(_QWORD *)(v32 + 64) = v133;
  *(_QWORD *)(v32 + 32) = v35;
  *(_QWORD *)(v32 + 40) = v37;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v30, "accountInfo: %@", 15, 2, v32);
  v38 = swift_bridgeObjectRelease();
  v39 = v26;
  LOBYTE(v30) = *(_BYTE *)(v26 + 96);
  v40 = static os_log_type_t.default.getter(v38);
  v41 = qword_1011B7D40;
  v134 = v31;
  v42 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v42 + 16) = v140;
  v43 = objc_msgSend(v33, "supportsDeviceToDeviceEncryption");
  *(_QWORD *)(v42 + 56) = &type metadata for Bool;
  *(_QWORD *)(v42 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v42 + 32) = v43;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Setting manateeAvailable to %d", LODWORD(v126));
  swift_bridgeObjectRelease();
  *(_BYTE *)(v26 + 96) = objc_msgSend(v33, "supportsDeviceToDeviceEncryption");
  v44 = objc_msgSend(v33, "supportsDeviceToDeviceEncryption");
  if ((v30 & 1) == 0)
  {
    if (!(_DWORD)v44)
      goto LABEL_22;
    v47 = v141;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v60 = sub_100013B60();
    sub_100B04D40(1, 1);
    swift_release(v60);
    Strong = swift_unknownObjectWeakLoadStrong(v26 + 16);
    if (!Strong)
    {
      v95 = static os_log_type_t.error.getter(0);
      os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, qword_1011B7D40, "Delegate does not define a zone!", 32, 2, _swiftEmptyArrayStorage);
LABEL_24:
      v94 = v47;
      goto LABEL_25;
    }
    v62 = Strong;
    v63 = *(id *)(Strong + 152);
    swift_unknownObjectRelease(v62);
    type metadata accessor for BeaconStore(0);
    v64 = v135;
    sub_1007EC9B8(v135);
    v65 = (uint64_t)v137;
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100ED0480, 1);
    v66 = (void (*)(uint64_t, id))v136[1];
    v67 = v139;
    v66(v64, v139);
    v68 = (uint64_t)v138;
    URL.appendingPathComponent(_:)(0x2E65746176697250, 0xED00006E656B6F74);
    v66(v65, v67);
    v136 = (_QWORD *)sub_100656674(v68);
    v66(v68, v67);
    sub_1007EC9B8(v65);
    URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
    v66(v65, v67);
    v69._countAndFlagsBits = 0x65746176697250;
    v69._object = (void *)0xE700000000000000;
    URL.appendPathComponent(_:)(v69);
    v70 = objc_msgSend(v63, "ownerName");
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    v74._countAndFlagsBits = v71;
    v74._object = v73;
    URL.appendPathComponent(_:)(v74);
    swift_bridgeObjectRelease();
    v137 = v63;
    v75 = objc_msgSend(v63, "zoneName");
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
    v78 = v77;

    aBlock._countAndFlagsBits = v76;
    aBlock._object = v78;
    v79._countAndFlagsBits = 0x6E656B6F742ELL;
    v79._object = (void *)0xE600000000000000;
    String.append(_:)(v79);
    URL.appendPathComponent(_:)(aBlock);
    swift_bridgeObjectRelease();
    v80 = (void *)sub_100656674(v68);
    v81 = ((uint64_t (*)(uint64_t, id))v66)(v68, v67);
    v82 = static os_log_type_t.default.getter(v81);
    v83 = qword_1011B7D40;
    v84 = v136;
    v85 = os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, qword_1011B7D40, "Manatee PCS keys are now available", 34, 2, _swiftEmptyArrayStorage);
    v86 = static os_log_type_t.default.getter(v85);
    if (v84 && v80)
    {
      v87 = os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v83, "finishSetup()", 13, 2, _swiftEmptyArrayStorage);
      v88 = static os_log_type_t.default.getter(v87);
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v83, "Initial fetch complete", 22, 2, _swiftEmptyArrayStorage);
      v89 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD34FC);
      v90 = static os_log_type_t.default.getter(v89);
      if (qword_1010EA268 != -1)
        swift_once(&qword_1010EA268, sub_100B5DA8C);
      os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, qword_1011B7D48, "Signaling availableSemaphore", 28, 2, _swiftEmptyArrayStorage);
      v91 = *(id *)(v39 + 56);
      OS_dispatch_semaphore.signal()();

      v93 = static os_log_type_t.default.getter(v92);
      os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, qword_1011B7D48, "Signaled availableSemaphore", 27, 2, _swiftEmptyArrayStorage);
      sub_1007B742C();

    }
    else
    {
      v139 = v80;
      v96 = os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v83, "Fetching from CloudKit since no data has ever been fetched from this device", 75, 2, _swiftEmptyArrayStorage);
      v97 = static os_log_type_t.default.getter(v96);
      v98 = v134;
      v99 = swift_allocObject(v134, 72, 7);
      *(_OWORD *)(v99 + 16) = v140;
      v100 = *(_QWORD *)(v39 + 208);
      v101 = *(void **)(v39 + 216);
      v102 = v133;
      *(_QWORD *)(v99 + 56) = &type metadata for String;
      *(_QWORD *)(v99 + 64) = v102;
      *(_QWORD *)(v99 + 32) = v100;
      *(_QWORD *)(v99 + 40) = v101;
      *(_QWORD *)&v103 = swift_bridgeObjectRetain(v101).n128_u64[0];
      os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v83, "Subscribing to %{public}@", 25, 2, v99, v103);
      swift_bridgeObjectRelease();
      v104 = sub_100BD2FCC(v100, v101);
      swift_retain();
      v105 = CKModifySubscriptionsOperation.undeprecated_modifySubscriptionsCompletionBlock.setter(sub_100BD48F0, v39);
      __chkstk_darwin(v105);
      *((_QWORD *)&v126 - 2) = v39;
      *((_QWORD *)&v126 - 1) = v104;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD48F8);
      if (a4 > 0.0)
      {
        v146 = sub_100BD491C;
        v147 = v39;
        aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        v144 = sub_100016FB8;
        v145 = &unk_1010B2898;
        v106 = _Block_copy(&aBlock);
        v142 = _swiftEmptyArrayStorage;
        v107 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        swift_retain();
        v108 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v109 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v110 = v128;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v142, v108, v109, v127, v107);
        v111 = type metadata accessor for DispatchWorkItem(0);
        swift_allocObject(v111, *(unsigned int *)(v111 + 48), *(unsigned __int16 *)(v111 + 52));
        v112 = DispatchWorkItem.init(flags:block:)(v110, v106);
        v113 = swift_release(v147);
        v114 = static os_log_type_t.default.getter(v113);
        v115 = qword_1011B7D40;
        v116 = swift_allocObject(v98, 72, 7);
        *(_OWORD *)(v116 + 16) = v140;
        *(_QWORD *)(v116 + 56) = &type metadata for Double;
        *(_QWORD *)(v116 + 64) = &protocol witness table for Double;
        *(double *)(v116 + 32) = a4;
        os_log(_:dso:log:_:_:)(v114, &_mh_execute_header, v115, "Created %.0f second watchdog time to work around CloudKit bug", v126);
        swift_bridgeObjectRelease();
        v117 = *(_QWORD *)(v39 + 264);
        *(_QWORD *)(v39 + 264) = v112;
        swift_retain();
        v118 = swift_release(v117);
        v119 = v129;
        static DispatchTime.now()(v118);
        v120 = v131;
        + infix(_:_:)(v119, a4);
        v121 = *(void (**)(char *, uint64_t))(v130 + 8);
        v122 = v119;
        v123 = v132;
        v121(v122, v132);
        OS_dispatch_queue.asyncAfter(deadline:execute:)(v120, v112);
        swift_release(v112);
        v121(v120, v123);
      }
      swift_retain();
      v124 = sub_100BBF0A8();
      v125 = objc_msgSend(v124, "privateCloudDatabase");

      sub_100BCC634(v125, 0, 0, (uint64_t)sub_100BD4910, (id)v39);
      swift_release(v39);

    }
    v58 = v141;
    v59 = 0;
LABEL_12:
    sub_10010F93C(v58, v59);
    return;
  }
  if (!(_DWORD)v44)
  {
    v45 = static os_log_type_t.error.getter(v44);
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_1011B7D40, "Manatee PCS keys are no longer available (keychain reset from another device?)", 78, 2, _swiftEmptyArrayStorage);
    v46 = swift_unknownObjectWeakLoadStrong(v26 + 16);
    v47 = v141;
    if (v46)
    {
      v48 = v46;
      sub_100082AB0(v26);
      swift_unknownObjectRelease(v48);
    }
    sub_100BC1238(0);
    goto LABEL_24;
  }
LABEL_22:
  v94 = v141;
LABEL_25:
  sub_10010F93C(v94, 0);
}

uint64_t sub_100BC2E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;

  if (a3)
  {
    v5 = swift_errorRetain(a3);
    v6 = static os_log_type_t.error.getter(v5);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v7 = qword_1011B7D40;
    v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    v23 = a3;
    swift_errorRetain(a3);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(&v23, v10);
    v13 = v12;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10001AA00();
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Subscription error: %{public}@", 30, 2, v9);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a3);
  }
  else
  {
    v16 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v17 = qword_1011B7D40;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    v21 = *(_QWORD *)(a4 + 208);
    v20 = *(_QWORD *)(a4 + 216);
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v20;
    *(_QWORD *)&v22 = swift_bridgeObjectRetain(v20).n128_u64[0];
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Successfully subscribed to %@", 29, 2, v19, v22);
    return swift_bridgeObjectRelease();
  }
}

void sub_100BC3060(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(a1 + 32);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  v8 = _dispatchPreconditionTest(_:)(v5);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) != 0)
  {
    v8 = static os_log_type_t.error.getter(v9);
    if (qword_1010EA260 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA260, sub_100B5DA30);
LABEL_3:
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7D40, "Watchdog triggered! Work around for <rdar://problem/33067546>", 61, 2, _swiftEmptyArrayStorage);
  exit(0);
}

void sub_100BC3160(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  void *v36;
  _QWORD v37[2];

  v6 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4924);
  if ((a2 & 1) != 0)
  {
    v18 = swift_errorRetain(a1);
    v19 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v20 = qword_1011B7D40;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    v37[0] = a1;
    swift_errorRetain(a1);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v24 = String.init<A>(describing:)(v37, v23);
    v26 = v25;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v26;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error from fetchChanges: %{public}@", 35, 2, v22);
    swift_bridgeObjectRelease();
    v37[0] = a1;
    swift_errorRetain(a1);
    type metadata accessor for CKError(0);
    v28 = v27;
    if ((swift_dynamicCast(&v36, v37, v23, v27, 6) & 1) != 0)
    {
      v29 = v36;
      v30 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
      v31 = _BridgedStoredNSError.code.getter(v37, v28, v30);
      if (v37[0] == 111)
      {
        v32 = static os_log_type_t.default.getter(v31);
        os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7D40, "scheduleRetryFetch", 18, 2, _swiftEmptyArrayStorage);
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD41D8);
      }
      v36 = v29;
      v33 = _BridgedStoredNSError.code.getter(v37, v28, v30);
      if ((unint64_t)(v37[0] - 3) > 1)
      {
        v35 = v29;
        sub_100BC3690((uint64_t)v35);
        sub_10010F948(a1, 1);

      }
      else
      {
        v34 = static os_log_type_t.default.getter(v33);
        os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_1011B7D40, "scheduleRetryFetch", 18, 2, _swiftEmptyArrayStorage);
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD41D8);
        sub_10010F948(a1, 1);

      }
    }
    else
    {
      sub_10010F948(a1, 1);
    }
  }
  else
  {
    v7 = static os_log_type_t.default.getter(v6);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v8 = qword_1011B7D40;
    v9 = os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D40, "fetchChanges succeeded", 22, 2, _swiftEmptyArrayStorage);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v8, "finishSetup()", 13, 2, _swiftEmptyArrayStorage);
    v12 = static os_log_type_t.default.getter(v11);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v8, "Initial fetch complete", 22, 2, _swiftEmptyArrayStorage);
    v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD34FC);
    v14 = static os_log_type_t.default.getter(v13);
    if (qword_1010EA268 != -1)
      swift_once(&qword_1010EA268, sub_100B5DA8C);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7D48, "Signaling availableSemaphore", 28, 2, _swiftEmptyArrayStorage);
    v15 = *(id *)(a3 + 56);
    OS_dispatch_semaphore.signal()();

    v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D48, "Signaled availableSemaphore", 27, 2, _swiftEmptyArrayStorage);
    sub_1007B742C();
  }
}

uint64_t sub_100BC35D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D40, "Cancelling watchdog because CloudKit responded", 46, 2, _swiftEmptyArrayStorage);
  v3 = *(_QWORD *)(a1 + 264);
  if (v3)
  {
    v4 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v4);
    swift_release(v3);
    v5 = *(_QWORD *)(a1 + 264);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(a1 + 264) = 0;
  return swift_release(v5);
}

void sub_100BC3690(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t Strong;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  id v78;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v3 + 32);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v5);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)&v76 = a1;
  swift_errorRetain(a1);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  type metadata accessor for CKError(0);
  v8 = v13;
  if (!swift_dynamicCast(&v78, &v76, v12, v13, 6))
    return;
  v2 = v78;
  v11 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  v14 = _BridgedStoredNSError.userInfo.getter(v8, v11);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
  v17 = v16;
  if (*(_QWORD *)(v14 + 16) && (v18 = sub_100518DA0(v15, v16), (v19 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v18, (uint64_t)&v76);
  }
  else
  {
    v76 = 0u;
    v77 = 0u;
  }
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v77 + 1))
  {
    sub_100004048((uint64_t)&v76, (uint64_t *)&unk_1010F6390);
    goto LABEL_12;
  }
  v20 = sub_10001A9A8(&qword_101117C00);
  v21 = swift_dynamicCast(&v78, &v76, (char *)&type metadata for Any + 8, v20, 6);
  if ((v21 & 1) != 0)
  {
    a1 = (uint64_t)v78;
    v5 = static os_log_type_t.error.getter(v21);
    if (qword_1010EA260 == -1)
    {
LABEL_10:
      v22 = qword_1011B7D40;
      v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v24 = swift_allocObject(v23, 72, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
      v25 = swift_bridgeObjectRetain(a1);
      v26 = Dictionary.description.getter(v25, &type metadata for AnyHashable, v8, &protocol witness table for AnyHashable);
      v28 = v27;
      swift_bridgeObjectRelease(a1);
      *(_QWORD *)(v24 + 56) = &type metadata for String;
      *(_QWORD *)(v24 + 64) = sub_10001AA00();
      *(_QWORD *)(v24 + 32) = v26;
      *(_QWORD *)(v24 + 40) = v28;
      os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v22, "Handling partial internal errors - %{public}@", 45, 2, v24);
      swift_bridgeObjectRelease(v24);
      sub_100BD1C9C(a1, (void (*)(_BYTE *, id))sub_100BD3384);
      swift_bridgeObjectRelease(a1);
      goto LABEL_12;
    }
LABEL_35:
    swift_once(&qword_1010EA260, sub_100B5DA30);
    goto LABEL_10;
  }
LABEL_12:
  v78 = v2;
  v29 = _BridgedStoredNSError.code.getter(&v76, v8, v11);
  if ((_QWORD)v76 == 21)
  {
    v42 = static os_log_type_t.error.getter(v29);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v43 = qword_1011B7D40;
    v44 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v45 = swift_allocObject(v44, 72, 7);
    *(_OWORD *)(v45 + 16) = xmmword_100E22B00;
    v34 = v2;
    v46 = related decl 'e' for CKErrorCode.description.getter();
    v48 = v47;

    *(_QWORD *)(v45 + 56) = &type metadata for String;
    *(_QWORD *)(v45 + 64) = sub_10001AA00();
    *(_QWORD *)(v45 + 32) = v46;
    *(_QWORD *)(v45 + 40) = v48;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Change token expired: %@", 24, 2, v45);
    swift_bridgeObjectRelease(v45);
    Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
    if (Strong)
    {
      v50 = Strong;
      sub_100082AB0(v3);
      swift_unknownObjectRelease(v50);
    }
    sub_100BC1238(0);
  }
  else if ((_QWORD)v76 == 26)
  {
    v30 = static os_log_type_t.error.getter(v29);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v31 = qword_1011B7D40;
    v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v33 = swift_allocObject(v32, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
    v34 = v2;
    v35 = related decl 'e' for CKErrorCode.description.getter();
    v37 = v36;

    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = sub_10001AA00();
    *(_QWORD *)(v33 + 32) = v35;
    *(_QWORD *)(v33 + 40) = v37;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Zone not found: %@", 18, 2, v33);
    swift_bridgeObjectRelease(v33);
    v38 = *(_QWORD *)(v3 + 80);
    *(_QWORD *)(v3 + 80) = 0;
    sub_100BD3364(v38);
    v39 = *(_QWORD *)(v3 + 80);
    sub_100BD3374(v39);
    sub_100BD2AE8(v39);
    v40 = sub_100BD3364(v39);
    v41 = static os_log_type_t.default.getter(v40);
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, qword_1011B7D40, "Setting zoneState to .unknown", 29, 2, _swiftEmptyArrayStorage);
    sub_100BC66B8(0);
  }
  else
  {
    v51 = static os_log_type_t.error.getter(v29);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v52 = qword_1011B7D40;
    v75 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v53 = swift_allocObject(v75, 72, 7);
    v74 = xmmword_100E22B00;
    *(_OWORD *)(v53 + 16) = xmmword_100E22B00;
    v34 = v2;
    v54 = related decl 'e' for CKErrorCode.description.getter();
    v56 = v55;

    *(_QWORD *)(v53 + 56) = &type metadata for String;
    v57 = sub_10001AA00();
    *(_QWORD *)(v53 + 64) = v57;
    *(_QWORD *)(v53 + 32) = v54;
    *(_QWORD *)(v53 + 40) = v56;
    os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "Uncaught public ckError, will try private handling: %@", 54, 2, v53);
    swift_bridgeObjectRelease(v53);
    v78 = v34;
    v58 = _BridgedStoredNSError.code.getter(&v76, v8, v11);
    switch((_QWORD)v76)
    {
      case 'n':
        v60 = static os_log_type_t.error.getter(v58);
        v61 = qword_1011B7D40;
        v62 = os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, qword_1011B7D40, "Attempting to use Manatee from a non-HSA2 account!", 50, 2, _swiftEmptyArrayStorage);
        if (*(_BYTE *)(v3 + 96) == 1)
        {
          *(_BYTE *)(v3 + 96) = 0;
          v63 = static os_log_type_t.error.getter(v62);
          os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v61, "Manatee was available, but is not available now.", 48, 2, _swiftEmptyArrayStorage);
        }
        break;
      case 'p':
        v64 = *(_QWORD *)(v3 + 80);
        *(_QWORD *)(v3 + 80) = 0;
        sub_100BD3364(v64);
        v65 = *(_QWORD *)(v3 + 80);
        sub_100BD3374(v65);
        sub_100BD2AE8(v65);
        v66 = sub_100BD3364(v65);
        v67 = static os_log_type_t.default.getter(v66);
        os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, qword_1011B7D40, "Setting zoneState to .unknown", 29, 2, _swiftEmptyArrayStorage);
        sub_100BCB5A0();
        sub_100BC66B8(4);
        sub_100BC1238(0);
        break;
      case 'o':
        v59 = static os_log_type_t.error.getter(v58);
        os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, qword_1011B7D40, "PCS Keys for com.apple.icloud.searchparty are not yet synced.", 61, 2, _swiftEmptyArrayStorage);
        break;
      default:
        v68 = static os_log_type_t.error.getter(v58);
        v69 = qword_1011B7D40;
        v70 = swift_allocObject(v75, 72, 7);
        *(_OWORD *)(v70 + 16) = v74;
        v34 = v34;
        v71 = related decl 'e' for CKErrorCode.description.getter();
        v73 = v72;

        *(_QWORD *)(v70 + 56) = &type metadata for String;
        *(_QWORD *)(v70 + 64) = v57;
        *(_QWORD *)(v70 + 32) = v71;
        *(_QWORD *)(v70 + 40) = v73;
        os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Uncaught private error: %{public}@", 34, 2, v70);
        swift_bridgeObjectRelease(v70);
        break;
    }
  }

}

uint64_t sub_100BC3F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v4 = swift_allocObject(&unk_1010B28D0, 24, 7);
  swift_weakInit(v4 + 16, a2);
  v5 = swift_allocObject(&unk_1010B2970, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = a1;
  type metadata accessor for Transaction(0);
  v7[2] = a2;
  v7[3] = sub_100BD4A68;
  v7[4] = v5;
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.CloudKitCoordinator.AccountStatus", 63, 2, sub_100BD4F10, v7, (char *)&type metadata for () + 8);
  swift_release(v4);
  return swift_release(v5);
}

uint64_t sub_100BC4080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    __chkstk_darwin(result);
    swift_retain();
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4A70);
    swift_release(v5);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100BC414C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **aBlock;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  void *v66;
  uint64_t (*v67)();
  uint64_t v68;
  _QWORD *v69;

  v61 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v58 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v55 = a1;
  v56 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v10 = qword_1011B7D40;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  v13 = a2;
  v14 = (id)CKStringFromAccountStatus(*(_QWORD *)(a2 + 88));
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v18 = sub_10001AA00();
  *(_QWORD *)(v12 + 64) = v18;
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v17;
  v19 = (id)CKStringFromAccountStatus(a3);
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v62 = a3;
  v22 = v21;

  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v18;
  *(_QWORD *)(v12 + 72) = v20;
  *(_QWORD *)(v12 + 80) = v22;
  v23 = v62;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "iCloud accountDidChange %{public}@ -> %{public}@", 48, 2, v12);
  v24 = swift_bridgeObjectRelease(v12);
  switch(v23)
  {
    case 0:
      v25 = static os_log_type_t.error.getter(v24);
      result = os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D40, "Could not determine account status!", 35, 2, _swiftEmptyArrayStorage);
      goto LABEL_6;
    case 1:
      v28 = v13;
      LOBYTE(aBlock) = 1;
      result = PassthroughSubject.send(_:)(&aBlock);
      break;
    case 2:
      v29 = static os_log_type_t.error.getter(v24);
      result = os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B7D40, "iCloud Account not available due to restrictions!", 49, 2, _swiftEmptyArrayStorage);
      v28 = v13;
      if (*(_QWORD *)(v13 + 88) != 2)
      {
        v30 = swift_allocObject(&unk_1010B29E8, 32, 7);
        *(_QWORD *)(v30 + 16) = v55;
        *(_QWORD *)(v30 + 24) = v13;
        v67 = sub_100BD4AAC;
        v68 = v30;
        aBlock = _NSConcreteStackBlock;
        v64 = 1107296256;
        v65 = sub_100016FB8;
        v66 = &unk_1010B2A00;
        v31 = _Block_copy(&aBlock);
        swift_retain();
        v32 = swift_retain();
        v33 = v56;
        static DispatchQoS.unspecified.getter(v32);
        v69 = _swiftEmptyArrayStorage;
        v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v37 = v58;
        v38 = v35;
        v23 = v62;
        v39 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v38, v36, v61, v34);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v31);
        _Block_release(v31);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v37, v39);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v60);
        swift_release(v68);
        result = sub_100BC1238(0);
      }
      break;
    case 3:
      v40 = static os_log_type_t.error.getter(v24);
      v41 = qword_1011B7D40;
      v42 = os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_1011B7D40, "iCloud Account not available!", 29, 2, _swiftEmptyArrayStorage);
      v28 = v13;
      if (*(_QWORD *)(v13 + 88) == 3)
      {
        v43 = static os_log_type_t.default.getter(v42);
        result = os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v41, "Account was already in .noAccount state", 39, 2, _swiftEmptyArrayStorage);
      }
      else
      {
        v44 = swift_allocObject(&unk_1010B2998, 32, 7);
        *(_QWORD *)(v44 + 16) = v55;
        *(_QWORD *)(v44 + 24) = v13;
        v67 = sub_100BD4A98;
        v68 = v44;
        aBlock = _NSConcreteStackBlock;
        v64 = 1107296256;
        v65 = sub_100016FB8;
        v66 = &unk_1010B29B0;
        v45 = _Block_copy(&aBlock);
        swift_retain();
        v46 = swift_retain();
        v47 = v56;
        static DispatchQoS.unspecified.getter(v46);
        v69 = _swiftEmptyArrayStorage;
        v48 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v49 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v50 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v51 = v58;
        v52 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v49, v50, v61, v48);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v47, v51, v45);
        _Block_release(v45);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v51, v52);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v47, v60);
        swift_release(v68);
        if (qword_1010E9D08 != -1)
          swift_once(&qword_1010E9D08, sub_10059A6E0);
        v53 = sub_100013B60();
        sub_100B04D40(0, 0);
        swift_release(v53);
        result = sub_100BC1238(0);
        v23 = v62;
      }
      break;
    default:
      v27 = static os_log_type_t.error.getter(v24);
      result = os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D40, "Unknown CKAccountStatus!", 24, 2, _swiftEmptyArrayStorage);
LABEL_6:
      v28 = v13;
      break;
  }
  *(_QWORD *)(v28 + 88) = v23;
  return result;
}

uint64_t sub_100BC479C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  Transaction.capture()();
  result = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (result)
  {
    v4 = result;
    sub_100086328(a2, 0);
    return swift_unknownObjectRelease(v4);
  }
  return result;
}

uint64_t sub_100BC47EC(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  uint64_t v4;
  uint64_t result;

  Transaction.capture()();
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (Strong)
  {
    v4 = Strong;
    sub_100086328(a2, 0);
    swift_unknownObjectRelease(v4);
  }
  result = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (result)
    return swift_unknownObjectRelease(result);
  return result;
}

uint64_t sub_100BC485C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v14 = qword_1011B7D48;
  v15 = os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7D48, "Done waiting for availableWaitQueue", 35, 2, _swiftEmptyArrayStorage);
  v16 = static os_log_type_t.default.getter(v15);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v14, "Call completion on non-head-of-queue job", 40, 2, _swiftEmptyArrayStorage);
  v17 = (_QWORD *)swift_allocObject(&unk_1010B2038, 40, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a1;
  aBlock[4] = sub_100016FE4;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B2050;
  v18 = _Block_copy(aBlock);
  swift_retain();
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release(v29);
}

uint64_t sub_100BC4AE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52[3];
  uint64_t (*v53)(uint64_t);

  v53 = a3;
  v51 = a1;
  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101117C38);
  v48 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101117C40);
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 136);
  if (v16 && (swift_retain(), v17 = sub_1003542D4(), v13 = swift_release(v16), (v17 & 1) != 0))
  {
    v47 = a4;
    v18 = static os_log_type_t.default.getter(v13);
    if (qword_1010EA268 != -1)
      swift_once(&qword_1010EA268, sub_100B5DA8C);
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1011B7D48, "Database updates pending. Will proceed after updates.", 53, 2, _swiftEmptyArrayStorage);
    v19 = swift_allocObject(&unk_1010B1CF0, 24, 7);
    v44 = v19;
    *(_QWORD *)(v19 + 16) = 0;
    v46 = (uint64_t *)(v19 + 16);
    v52[0] = *(id *)(a2 + 168);
    v20 = sub_10001A9A8(&qword_1010FAB00);
    v21 = a2;
    v45 = a2;
    v22 = v20;
    v23 = sub_1000193A4(&qword_1010EEDC0, &qword_1010FAB00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Publisher.first()(v22, v23);
    v52[0] = *(id *)(v21 + 48);
    v24 = v52[0];
    v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 1, 1, v25);
    v26 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v27 = sub_1000193A4(&qword_101117C48, &qword_101117C38, (const char *)&protocol conformance descriptor for Publishers.First<A>);
    v28 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v29 = v24;
    Publisher.receive<A>(on:options:)(v52, v8, v9, v26, v27, v28);
    sub_100004048((uint64_t)v8, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v9);
    v30 = (_QWORD *)swift_allocObject(&unk_1010B1D18, 48, 7);
    v31 = v47;
    v30[2] = v53;
    v30[3] = v31;
    v32 = v44;
    v33 = v51;
    v30[4] = v44;
    v30[5] = v33;
    v34 = sub_1000193A4(&qword_101117C50, &qword_101117C40, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain();
    swift_retain();
    swift_retain();
    v35 = v50;
    v36 = Publisher<>.sink(receiveValue:)(sub_100BD365C, v30, v50, v34);
    swift_release(v30);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v35);
    v37 = v46;
    swift_beginAccess(v46, v52, 1, 0);
    v38 = *v37;
    *v37 = v36;
    swift_release(v38);
    v39 = *(_QWORD *)(v45 + 120);
    v40 = *(_QWORD *)(v39 + 16);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100880470, v39, v40, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
    swift_release(v32);
    return swift_release(v40);
  }
  else
  {
    v42 = static os_log_type_t.default.getter(v13);
    if (qword_1010EA268 != -1)
      swift_once(&qword_1010EA268, sub_100B5DA8C);
    v43 = os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1011B7D48, "No pending updates. Can proceed now.", 36, 2, _swiftEmptyArrayStorage);
    return v53(v43);
  }
}

void sub_100BC4F60(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v4 = os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D48, "Database updates complete. Can proceed now.", 43, 2, _swiftEmptyArrayStorage);
  a2(v4);
  Transaction.capture()();
}

uint64_t sub_100BC4FF8(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  _QWORD *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  id v66;
  _QWORD *v67;
  uint64_t aBlock;
  unint64_t v69;
  uint64_t (*v70)(uint64_t);
  void *v71;
  uint64_t (*v72)();
  _QWORD *v73;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  __chkstk_darwin(v4);
  v62 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  v7 = __chkstk_darwin(v6);
  v59 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v10 = qword_1011B7D40;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  v65 = xmmword_100E22B00;
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v13 = a1;
  v14 = objc_msgSend(v13, "description");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v17;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Attempting to create the record: %{public}@", 43, 2, v12);
  swift_bridgeObjectRelease();
  v18 = sub_10001A9A8(&qword_101117BE8);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = Future.init()();
  v20 = (_QWORD *)swift_allocObject(&unk_1010B2538, 40, 7);
  v20[2] = v2;
  v20[3] = v13;
  v20[4] = v19;
  v21 = v13;
  swift_retain_n(v2, 2);
  swift_retain_n(v19, 2);
  v66 = v21;
  v22 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4D5C);
  v23 = aBlock;
  v24 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v25 = qword_1011B7D48;
  v26 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v26 + 16) = v65;
  *(_QWORD *)(v26 + 56) = &type metadata for Bool;
  *(_QWORD *)(v26 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v26 + 32) = v23;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "localAvailable: %d", (_DWORD)v59);
  v27 = swift_bridgeObjectRelease();
  v28 = static os_log_type_t.default.getter(v27);
  v29 = qword_1011B7D48;
  if (v23)
  {
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v30 = (char *)swift_allocObject(&unk_1010B25B0, 40, 7);
    v31 = v66;
    *((_QWORD *)v30 + 2) = v66;
    *((_QWORD *)v30 + 3) = v2;
    *((_QWORD *)v30 + 4) = v19;
    v32 = qword_1010EA1D0;
    v33 = v31;
    swift_retain_n(v2, 2);
    swift_retain_n(v19, 2);
    v34 = v33;
    if (v32 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 0x7365547265646E75;
    v69 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v67, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    if (v67 == 1)
    {
      v35 = (_QWORD *)swift_allocObject(&unk_1010B25D8, 40, 7);
      v35[2] = v34;
      v35[3] = v2;
      v35[4] = v19;
      v36 = v34;
      swift_retain();
      swift_retain();
      v37 = sub_100BC71D4(v36);
      v38 = swift_allocObject(&unk_1010B2600, 32, 7);
      *(_QWORD *)(v38 + 16) = sub_100BD46FC;
      *(_QWORD *)(v38 + 24) = v35;
      swift_retain();
      v39 = Future.addSuccess(block:)(sub_100BD472C, v38);
      swift_release(v39);
      swift_release(v38);
      v40 = (_QWORD *)swift_allocObject(&unk_1010B2628, 48, 7);
      v40[2] = v2;
      v40[3] = v36;
      v40[4] = sub_100BD46FC;
      v40[5] = v35;
      v41 = v36;
      swift_retain();
      swift_retain();
      v42 = Future.addFailure(block:)(sub_100BD4754, v40);
      swift_release(v20);
      swift_release(v19);
      swift_release_n(v2, 2);

      swift_release(v30);
      swift_release(v35);
      swift_release(v37);
      swift_release(v42);
      swift_release(v40);
    }
    else
    {
      v57 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v57);
      *(&v59 - 4) = v2;
      *(&v59 - 3) = (char *)sub_100BD46EC;
      *(&v59 - 2) = v30;
      static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, &v59 - 6, (char *)&type metadata for () + 8);
      swift_release(v20);
      swift_release(v19);
      swift_release_n(v2, 2);

      swift_release(v30);
    }
    v56 = v19;
  }
  else
  {
    v43 = os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v44 = static os_log_type_t.default.getter(v43);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v29, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v45 = (_QWORD *)swift_allocObject(&unk_1010B2560, 40, 7);
    v45[2] = v2;
    v45[3] = sub_100BD46D4;
    v45[4] = v20;
    v72 = sub_100882D68;
    v73 = v45;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v69 = 1107296256;
    v70 = sub_100016FB8;
    v71 = &unk_1010B2578;
    v46 = _Block_copy(&aBlock);
    swift_retain();
    v47 = swift_retain();
    v48 = v59;
    static DispatchQoS.unspecified.getter(v47);
    v67 = _swiftEmptyArrayStorage;
    v49 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v50 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v51 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v52 = v62;
    v53 = v50;
    v54 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v53, v51, v64, v49);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v52, v46);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v54);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v48, v61);
    v55 = v73;
    swift_release(v19);

    swift_release(v2);
    swift_release(v20);
    v56 = (uint64_t)v55;
  }
  swift_release(v56);
  return v19;
}

uint64_t sub_100BC5758(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[7];
  _QWORD v22[2];
  uint64_t v23;

  v7 = (_QWORD *)swift_allocObject(&unk_1010B2768, 40, 7);
  v7[2] = a3;
  v7[3] = a2;
  v7[4] = a4;
  v8 = qword_1010EA1D0;
  v9 = a3;
  swift_retain_n(a2, 2);
  swift_retain_n(a4, 2);
  v10 = v9;
  if (v8 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v22[0] = 0x7365547265646E75;
  v22[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v23, v22, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v23 == 1)
  {
    v11 = (_QWORD *)swift_allocObject(&unk_1010B2790, 40, 7);
    v11[2] = v10;
    v11[3] = a2;
    v11[4] = a4;
    v12 = v10;
    swift_retain();
    swift_retain();
    v13 = sub_100BC71D4(v12);
    v14 = swift_allocObject(&unk_1010B27B8, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_100BD4F24;
    *(_QWORD *)(v14 + 24) = v11;
    swift_retain();
    v15 = Future.addSuccess(block:)(sub_100BD4F28, v14);
    swift_release(v15);
    swift_release(v14);
    v16 = (_QWORD *)swift_allocObject(&unk_1010B27E0, 48, 7);
    v16[2] = a2;
    v16[3] = v12;
    v16[4] = sub_100BD4F24;
    v16[5] = v11;
    v17 = v12;
    swift_retain();
    swift_retain();
    v18 = Future.addFailure(block:)(sub_100BD4D70, v16);
    swift_release(a4);
    swift_release(a2);

    swift_release(v7);
    swift_release(v11);
    swift_release(v13);
    swift_release(v18);
    return swift_release(v16);
  }
  else
  {
    v20 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v20);
    v21[2] = a2;
    v21[3] = sub_100BD4EE0;
    v21[4] = v7;
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, v21, (char *)&type metadata for () + 8);
    swift_release(a4);
    swift_release(a2);

    return swift_release(v7);
  }
}

uint64_t sub_100BC5A08(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;

  v6 = (_QWORD *)swift_allocObject(&unk_1010B2808, 40, 7);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v7 = a1;
  swift_retain();
  swift_retain();
  v8 = sub_100BC71D4(v7);
  v9 = swift_allocObject(&unk_1010B2830, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100BD4F24;
  *(_QWORD *)(v9 + 24) = v6;
  swift_retain();
  v10 = Future.addSuccess(block:)(sub_100BD4F28, v9);
  swift_release(v10);
  swift_release(v9);
  v11 = (_QWORD *)swift_allocObject(&unk_1010B2858, 48, 7);
  v11[2] = a2;
  v11[3] = v7;
  v11[4] = sub_100BD4F24;
  v11[5] = v6;
  v12 = v7;
  swift_retain();
  swift_retain();
  v13 = Future.addFailure(block:)(sub_100BD4D70, v11);
  swift_release(v6);
  swift_release(v8);
  swift_release(v13);
  return swift_release(v11);
}

uint64_t sub_100BC5B30(void *a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void **aBlock;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  void *v74;
  uint64_t (*v75)();
  _QWORD *v76;

  v64 = a4;
  v65 = a5;
  v69 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for DispatchQoS(0);
  v66 = *(_QWORD *)(v68 - 8);
  v10 = __chkstk_darwin(v68);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v13 = a1;
    v14 = static os_log_type_t.default.getter(v13);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v15 = qword_1011B7D40;
    v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
    v18 = a3;
    v19 = objc_msgSend(v18, "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    *(_QWORD *)(v17 + 56) = &type metadata for String;
    *(_QWORD *)(v17 + 64) = sub_10001AA00();
    *(_QWORD *)(v17 + 32) = v20;
    *(_QWORD *)(v17 + 40) = v22;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Successfully saved the record: %{public}@", 41, 2, v17);
    swift_bridgeObjectRelease();
    v23 = swift_allocObject(&unk_1010B2718, 32, 7);
    *(_QWORD *)(v23 + 16) = v65;
    *(_QWORD *)(v23 + 24) = v13;
    v75 = sub_100BD13F4;
    v76 = (_QWORD *)v23;
    aBlock = _NSConcreteStackBlock;
    v72 = 1107296256;
    v73 = sub_100016FB8;
    v74 = &unk_1010B2730;
    v24 = _Block_copy(&aBlock);
    v25 = v13;
    v26 = swift_retain();
    static DispatchQoS.unspecified.getter(v26);
    v70 = _swiftEmptyArrayStorage;
    v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v30 = v28;
    v31 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v30, v29, v69, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v24);
    _Block_release(v24);

  }
  else
  {
    v32 = static os_log_type_t.error.getter(v10);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v33 = qword_1011B7D40;
    v34 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v34, 112, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B10;
    v36 = a3;
    v37 = objc_msgSend(v36, "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    *(_QWORD *)(v35 + 56) = &type metadata for String;
    v41 = sub_10001AA00();
    *(_QWORD *)(v35 + 64) = v41;
    *(_QWORD *)(v35 + 32) = v38;
    *(_QWORD *)(v35 + 40) = v40;
    aBlock = (void **)a2;
    swift_errorRetain(a2);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v43 = String.init<A>(describing:)(&aBlock, v42);
    *(_QWORD *)(v35 + 96) = &type metadata for String;
    *(_QWORD *)(v35 + 104) = v41;
    *(_QWORD *)(v35 + 72) = v43;
    *(_QWORD *)(v35 + 80) = v44;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "error saving the record: %{public}@: %{public}@", 47, 2, v35);
    v45 = swift_bridgeObjectRelease();
    if (!a2)
    {
      v55 = static os_log_type_t.fault.getter(v45);
      os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, qword_1011B7D40, "No error message found", 22, 2, _swiftEmptyArrayStorage);
      v75 = (uint64_t (*)())sub_100BD478C;
      v76 = v65;
      aBlock = _NSConcreteStackBlock;
      v72 = 1107296256;
      v73 = sub_100016FB8;
      v74 = &unk_1010B2690;
      v56 = _Block_copy(&aBlock);
      v57 = swift_retain();
      static DispatchQoS.unspecified.getter(v57);
      v70 = _swiftEmptyArrayStorage;
      v58 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v59 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v60 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v61 = v59;
      v62 = v69;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v61, v60, v69, v58);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v56);
      _Block_release(v56);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v9, v62);
      goto LABEL_10;
    }
    swift_errorRetain(a2);
    v46 = v64;
    sub_100BC3690(a2);
    v47 = (_QWORD *)swift_allocObject(&unk_1010B26C8, 40, 7);
    v47[2] = v65;
    v47[3] = v46;
    v47[4] = a2;
    v75 = sub_100BD15A8;
    v76 = v47;
    aBlock = _NSConcreteStackBlock;
    v72 = 1107296256;
    v73 = sub_100016FB8;
    v74 = &unk_1010B26E0;
    v48 = _Block_copy(&aBlock);
    swift_retain();
    swift_errorRetain(a2);
    v49 = swift_retain();
    static DispatchQoS.unspecified.getter(v49);
    v70 = _swiftEmptyArrayStorage;
    v50 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v51 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v52 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v53 = v51;
    v31 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v53, v52, v69, v50);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v48);
    _Block_release(v48);
    swift_errorRelease(a2);
  }
  (*(void (**)(char *, uint64_t))(v67 + 8))(v9, v31);
LABEL_10:
  (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v68);
  return swift_release(v76);
}

void sub_100BC61BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  type metadata accessor for CKError(0);
  v1 = v0;
  v5 = 1;
  v2 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v3 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  _BridgedStoredNSError.init(_:userInfo:)(&v6, &v5, v2, v1, v3);
  v4 = v6;
  Future.finish(error:)(v6);

}

uint64_t sub_100BC6258(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[3];
  _BYTE v45[8];
  void *v46;

  *(_QWORD *)&v42 = a1;
  swift_errorRetain(a1);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  type metadata accessor for CKError(0);
  v11 = v10;
  v12 = swift_dynamicCast(&v46, &v42, v9, v10, 6);
  if ((v12 & 1) == 0)
    goto LABEL_21;
  v13 = v46;
  v14 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  _BridgedStoredNSError.code.getter(&v42, v11, v14);
  if ((_QWORD)v42 == 26)
  {

LABEL_4:
    v16 = static os_log_type_t.error.getter(v15);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v17 = qword_1011B7D40;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7D40, "Setting up zone after zoneNotFound error", 40, 2, _swiftEmptyArrayStorage);
    sub_100BC66B8(0);
    v19 = static os_log_type_t.default.getter(v18);
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v17, "Re-attempting created record after creating zone", 48, 2, _swiftEmptyArrayStorage);
    v20 = sub_100BC71D4(a3);
    v21 = swift_allocObject(&unk_1010B2650, 32, 7);
    *(_QWORD *)(v21 + 16) = a4;
    *(_QWORD *)(v21 + 24) = a5;
    swift_retain();
    v22 = Future.addSuccess(block:)(sub_100BD4760, v21);
    swift_release(v22);
    swift_release(v21);
    v23 = swift_allocObject(&unk_1010B2678, 32, 7);
    *(_QWORD *)(v23 + 16) = a4;
    *(_QWORD *)(v23 + 24) = a5;
    swift_retain();
    v24 = Future.addFailure(block:)(sub_100BD4784, v23);
    swift_release(v20);
    swift_release(v24);
    return swift_release(v23);
  }
  v46 = v13;
  v26 = _BridgedStoredNSError.userInfo.getter(v11, v14);
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
  if (*(_QWORD *)(v26 + 16) && (v29 = sub_100518DA0(v27, v28), (v30 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v26 + 56) + 32 * v29, (uint64_t)&v42);
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v43 + 1))
  {

    v34 = (uint64_t *)&unk_1010F6390;
LABEL_20:
    v12 = sub_100004048((uint64_t)&v42, v34);
    goto LABEL_21;
  }
  v31 = sub_10001A9A8(&qword_101117CE8);
  if ((swift_dynamicCast(&v46, &v42, (char *)&type metadata for Any + 8, v31, 6) & 1) != 0)
  {
    sub_100BBCAAC((uint64_t)v46, (uint64_t)&v42);
    v32 = swift_bridgeObjectRelease();
    if (*((_QWORD *)&v43 + 1))
    {
      v33 = static os_log_type_t.error.getter(v32);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, qword_1011B7D40, "zoneNotFound error in partial errors.", 37, 2, _swiftEmptyArrayStorage);

      v15 = sub_100004048((uint64_t)&v42, &qword_101117CF0);
      goto LABEL_4;
    }

    v34 = &qword_101117CF0;
    goto LABEL_20;
  }

LABEL_21:
  v35 = static os_log_type_t.error.getter(v12);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v36 = qword_1011B7D40;
  v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v38 = swift_allocObject(v37, 72, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
  swift_getErrorValue(a1, v45, v44);
  v39 = Error.localizedDescription.getter(v44[1], v44[2]);
  v41 = v40;
  *(_QWORD *)(v38 + 56) = &type metadata for String;
  *(_QWORD *)(v38 + 64) = sub_10001AA00();
  *(_QWORD *)(v38 + 32) = v39;
  *(_QWORD *)(v38 + 40) = v41;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Error creating record to CK. Error - %{public}@", 47, 2, v38);
  swift_bridgeObjectRelease();
  return a4(0, a1);
}

void sub_100BC66B8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  dispatch_group_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 32);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v10 = dispatch_group_create();
    static os_log_type_t.default.getter(v10);
    if (qword_1010EA260 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA260, sub_100B5DA30);
LABEL_3:
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v14, 72, 7);
  v13 = xmmword_100E22B00;
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  __asm { BR              X10 }
}

uint64_t sub_100BC7010(uint64_t *a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *a1;
  v9 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D40, a4, a5, 2, _swiftEmptyArrayStorage);
  return a2(v8, 0);
}

uint64_t sub_100BC70B4(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  _BYTE v13[8];

  v4 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v5 = qword_1011B7D40;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  swift_getErrorValue(a1, v13, v12);
  v8 = Error.localizedDescription.getter(v12[1], v12[2]);
  v10 = v9;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Error creating record to CK. Error - %{public}@", 47, 2, v7);
  swift_bridgeObjectRelease();
  return a2(0, a1);
}

id sub_100BC71D4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  CKModifyRecordsOperation v10;
  id result;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t v21;
  void *v22;
  Swift::OpaquePointer_optional v23;
  Swift::OpaquePointer_optional v24;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_101117BE8);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = Future.init()();
  v6 = sub_10000F4A0(0, &qword_101117BF0, CKModifyRecordsOperation_ptr);
  v7 = sub_10001A9A8(&qword_10111BE20);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v8 + 32) = a1;
  v22 = (void *)v8;
  specialized Array._endMutation()(v8);
  v9 = a1;
  v23.value._rawValue = v22;
  v23.is_nil = 0;
  v10.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v23, v24).super.super.super.super.isa;
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
    -[objc_class setQualityOfService:](v10.super.super.super.super.isa, "setQualityOfService:", 25);
  result = -[objc_class configuration](v10.super.super.super.super.isa, "configuration");
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = result;
  objc_msgSend(result, "setAutomaticallyRetryNetworkFailures:", 0);

  result = -[objc_class configuration](v10.super.super.super.super.isa, "configuration");
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v13 = result;
  objc_msgSend(result, "setDiscretionaryNetworkBehavior:", 0);

  v14 = swift_allocObject(&unk_1010B2470, 32, 7);
  *(_QWORD *)(v14 + 16) = v2;
  *(_QWORD *)(v14 + 24) = v5;
  swift_retain();
  swift_retain();
  v15 = CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter(sub_100BD4684, v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v17 = qword_1011B7D40;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v19 + 56) = v6;
  *(_QWORD *)(v19 + 64) = sub_10001AC90(&qword_101117BF8, &qword_101117BF0, CKModifyRecordsOperation_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(CKModifyRecordsOperation *)(v19 + 32) = v10;
  v20 = v10.super.super.super.super.isa;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Adding CloudKit operation for create record %@", 46, 2, v19);
  v21 = swift_bridgeObjectRelease();
  __chkstk_darwin(v21);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4EC8);

  return (id)v5;
}

uint64_t sub_100BC747C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  char v50[8];
  _QWORD *v51;
  void **aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v45 = v8;
    v46 = v12;
    v47 = v13;
    v48 = v9;
    v17 = swift_errorRetain(a3);
    v18 = static os_log_type_t.error.getter(v17);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v19 = qword_1011B7D40;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a3, v50, v49);
    v22 = Error.localizedDescription.getter(v49[1], v49[2]);
    v24 = v23;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 40) = v24;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Error creating record. Error - %{public}@", 41, 2, v21);
    swift_bridgeObjectRelease();
    v25 = swift_allocObject(&unk_1010B24E8, 32, 7);
    *(_QWORD *)(v25 + 16) = a5;
    *(_QWORD *)(v25 + 24) = a3;
    v56 = sub_1003D18C4;
    v57 = v25;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_100016FB8;
    v55 = &unk_1010B2500;
    v26 = _Block_copy(&aBlock);
    swift_errorRetain(a3);
    v27 = swift_retain();
    static DispatchQoS.unspecified.getter(v27);
    v51 = _swiftEmptyArrayStorage;
    v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v31 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v29, v30, v45, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v26);
    _Block_release(v26);
    swift_errorRelease(a3);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v31);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v46);
    return swift_release(v57);
  }
  if (a1)
  {
    v46 = a5;
    if ((unint64_t)a1 >> 62)
    {
      v41 = v13;
      if (a1 >= 0)
        v42 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v42 = a1;
      swift_bridgeObjectRetain(a1);
      v43 = v42;
      v13 = v41;
      v32 = (void *)_CocoaArrayWrapper.endIndex.getter(v43);
      if (v32)
      {
LABEL_10:
        v48 = v9;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          v33 = *(id *)(a1 + 32);
        }
        v32 = v33;
        v47 = v13;
        v34 = swift_bridgeObjectRelease();
        v9 = static os_log_type_t.default.getter(v34);
        if (qword_1010EA260 == -1)
        {
LABEL_14:
          os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D40, "Record saved successfully.", 26, 2, _swiftEmptyArrayStorage);
          v35 = swift_allocObject(&unk_1010B2498, 32, 7);
          *(_QWORD *)(v35 + 16) = v46;
          *(_QWORD *)(v35 + 24) = v32;
          v56 = sub_100BD13F4;
          v57 = v35;
          aBlock = _NSConcreteStackBlock;
          v53 = 1107296256;
          v54 = sub_100016FB8;
          v55 = &unk_1010B24B0;
          v36 = _Block_copy(&aBlock);
          swift_retain();
          v37 = v32;
          static DispatchQoS.unspecified.getter(v37);
          v51 = _swiftEmptyArrayStorage;
          v38 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v40 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v39, v40, v8, v38);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v36);
          _Block_release(v36);

          (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v8);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v12);
          return swift_release(v57);
        }
LABEL_22:
        swift_once(&qword_1010EA260, sub_100B5DA30);
        goto LABEL_14;
      }
    }
    else
    {
      v32 = *(void **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v32)
        goto LABEL_10;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100BC79BC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  id v53;
  _QWORD *v54;
  uint64_t aBlock;
  unint64_t v56;
  uint64_t (*v57)(uint64_t);
  void *v58;
  uint64_t (*v59)();
  _QWORD *v60;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v49 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  v7 = __chkstk_darwin(v6);
  v46 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v10 = qword_1011B7D40;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  v52 = xmmword_100E22B00;
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v12 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
  *(_QWORD *)(v12 + 64) = sub_10001AC90(&qword_101117CC0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v12 + 32) = a1;
  v13 = a1;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Attempting to delete the record with ID: %{private}@", 52, 2, v12);
  swift_bridgeObjectRelease(v12);
  v14 = sub_10001A9A8(&qword_101117CD8);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = Future.init()();
  v16 = (_QWORD *)swift_allocObject(&unk_1010B22E0, 40, 7);
  v16[2] = v2;
  v16[3] = v13;
  v16[4] = v15;
  v17 = v13;
  swift_retain_n(v2, 2);
  swift_retain_n(v15, 2);
  v53 = v17;
  v18 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4D5C);
  v19 = aBlock;
  v20 = static os_log_type_t.default.getter(v18);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v21 = qword_1011B7D48;
  v22 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v22 + 16) = v52;
  *(_QWORD *)(v22 + 56) = &type metadata for Bool;
  *(_QWORD *)(v22 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v22 + 32) = v19;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "localAvailable: %d", (_DWORD)v46);
  v23 = swift_bridgeObjectRelease(v22);
  v24 = static os_log_type_t.default.getter(v23);
  v25 = qword_1011B7D48;
  if (v19)
  {
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v26 = (char *)swift_allocObject(&unk_1010B2358, 40, 7);
    v27 = v53;
    *((_QWORD *)v26 + 2) = v53;
    *((_QWORD *)v26 + 3) = v2;
    *((_QWORD *)v26 + 4) = v15;
    v28 = qword_1010EA1D0;
    v29 = v27;
    swift_retain_n(v2, 2);
    swift_retain_n(v15, 2);
    v30 = v29;
    if (v28 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 0x7365547265646E75;
    v56 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v54, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease(v56);
    if (v54 == 1)
    {
      sub_100BC81FC(v30, v2, v15);
    }
    else
    {
      v44 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v44);
      *(&v46 - 4) = (char *)v2;
      *(&v46 - 3) = (char *)sub_100BD4644;
      *(&v46 - 2) = v26;
      static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, &v46 - 6, (char *)&type metadata for () + 8);
    }
    swift_release(v16);
    swift_release(v15);
    swift_release_n(v2, 2);

    swift_release(v26);
    v43 = v15;
  }
  else
  {
    v31 = os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v32 = static os_log_type_t.default.getter(v31);
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v25, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    *(_QWORD *)&v52 = *(_QWORD *)(v2 + 64);
    v33 = (_QWORD *)swift_allocObject(&unk_1010B2308, 40, 7);
    v33[2] = v2;
    v33[3] = sub_100BD462C;
    v33[4] = v16;
    v59 = sub_100882D68;
    v60 = v33;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v56 = 1107296256;
    v57 = sub_100016FB8;
    v58 = &unk_1010B2320;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    v35 = swift_retain();
    v36 = v46;
    static DispatchQoS.unspecified.getter(v35);
    v54 = _swiftEmptyArrayStorage;
    v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v40 = v49;
    v41 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v38, v39, v51, v37);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v34);
    _Block_release(v34);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v48);
    v42 = v60;
    swift_release(v15);

    swift_release(v2);
    swift_release(v16);
    v43 = (uint64_t)v42;
  }
  swift_release(v43);
  return v15;
}

uint64_t sub_100BC8038(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v12;
  _QWORD v13[7];
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v7 = (_QWORD *)swift_allocObject(&unk_1010B2448, 40, 7);
  v7[2] = a3;
  v7[3] = a2;
  v7[4] = a4;
  v8 = qword_1010EA1D0;
  v9 = a3;
  swift_retain_n(a2, 2);
  swift_retain_n(a4, 2);
  v10 = v9;
  if (v8 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v14 = 0x7365547265646E75;
  v15 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v16, &v14, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease(v15);
  if (v16 == 1)
  {
    sub_100BC81FC(v10, a2, a4);
    swift_release(a4);
    swift_release(a2);

    return swift_release(v7);
  }
  else
  {
    v12 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v12);
    v13[2] = a2;
    v13[3] = sub_100BD4EDC;
    v13[4] = v7;
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, v13, (char *)&type metadata for () + 8);
    swift_release(a4);
    swift_release(a2);

    return swift_release(v7);
  }
}

void sub_100BC81FC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  CKModifyRecordsOperation v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Bool v21;
  Swift::OpaquePointer_optional v22;
  Swift::OpaquePointer_optional v23;

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v7 = qword_1011B7D40;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v9 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
  *(_QWORD *)(v9 + 64) = sub_10001AC90(&qword_101117CC0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v9 + 32) = a1;
  v10 = a1;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Deleting record: %{private}@", 28, 2, v9);
  swift_bridgeObjectRelease(v9);
  sub_10000F4A0(0, &qword_101117BF0, CKModifyRecordsOperation_ptr);
  v11 = sub_10001A9A8(&qword_10111BE20);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v12 + 32) = v10;
  v21 = v12;
  specialized Array._endMutation()(v12);
  v13 = v10;
  v22.value._rawValue = 0;
  v22.is_nil = v21;
  v14.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v22, v23).super.super.super.super.isa;
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
    -[objc_class setQualityOfService:](v14.super.super.super.super.isa, "setQualityOfService:", 25);
  v15 = -[objc_class configuration](v14.super.super.super.super.isa, "configuration");
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, "setAutomaticallyRetryNetworkFailures:", 0);

    v17 = -[objc_class configuration](v14.super.super.super.super.isa, "configuration");
    if (v17)
    {
      v18 = v17;
      objc_msgSend(v17, "setDiscretionaryNetworkBehavior:", 0);

      v19 = swift_allocObject(&unk_1010B2380, 32, 7);
      *(_QWORD *)(v19 + 16) = a2;
      *(_QWORD *)(v19 + 24) = a3;
      swift_retain();
      swift_retain();
      v20 = CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter(sub_100BD465C, v19);
      __chkstk_darwin(v20);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4EC8);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100BC849C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void **aBlock;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  uint64_t (*v71)();
  uint64_t v72;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = v17;
  v65 = v10;
  v63 = a5;
  if (a3)
  {
    v60 = v12;
    v61 = v13;
    v62 = v9;
    v18 = swift_errorRetain(a3);
    v19 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v20 = qword_1011B7D40;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 112, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B10;
    aBlock = (void **)a2;
    swift_bridgeObjectRetain(a2);
    v23 = sub_10001A9A8(&qword_101117CE0);
    v24 = String.init<A>(describing:)(&aBlock, v23);
    v26 = v25;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    v27 = sub_10001AA00();
    *(_QWORD *)(v22 + 64) = v27;
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v26;
    aBlock = (void **)a3;
    swift_errorRetain(a3);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v29 = String.init<A>(describing:)(&aBlock, v28);
    *(_QWORD *)(v22 + 96) = &type metadata for String;
    *(_QWORD *)(v22 + 104) = v27;
    *(_QWORD *)(v22 + 72) = v29;
    *(_QWORD *)(v22 + 80) = v30;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "error deleting the recordId: %@: %@", 35, 2, v22);
    swift_bridgeObjectRelease(v22);
    sub_100BC3690(a3);
    v31 = swift_allocObject(&unk_1010B23F8, 32, 7);
    *(_QWORD *)(v31 + 16) = v63;
    *(_QWORD *)(v31 + 24) = a3;
    v71 = sub_1003D9B8C;
    v72 = v31;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v69 = sub_100016FB8;
    v70 = &unk_1010B2410;
    v32 = _Block_copy(&aBlock);
    swift_errorRetain(a3);
    v33 = swift_retain();
    static DispatchQoS.unspecified.getter(v33);
    v66 = _swiftEmptyArrayStorage;
    v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v37 = v60;
    v38 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v35, v36, v62, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v37, v32);
    _Block_release(v32);
    swift_errorRelease(a3);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v16, v61);
    return swift_release(v72);
  }
  v62 = a4;
  v40 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v41 = qword_1011B7D40;
  v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v43 = swift_allocObject(v42, 72, 7);
  *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
  aBlock = (void **)a2;
  swift_bridgeObjectRetain(a2);
  v44 = sub_10001A9A8(&qword_101117CE0);
  v45 = String.init<A>(describing:)(&aBlock, v44);
  v47 = v46;
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  *(_QWORD *)(v43 + 64) = sub_10001AA00();
  *(_QWORD *)(v43 + 32) = v45;
  *(_QWORD *)(v43 + 40) = v47;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Successfully deleted the recordId: %@", 37, 2, v43);
  result = swift_bridgeObjectRelease(v43);
  if (a2)
  {
    if ((unint64_t)a2 >> 62)
    {
      if (a2 >= 0)
        v58 = a2 & 0xFFFFFFFFFFFFFF8;
      else
        v58 = a2;
      swift_bridgeObjectRetain(a2);
      result = _CocoaArrayWrapper.endIndex.getter(v58);
      if (result)
        goto LABEL_12;
    }
    else
    {
      v48 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(a2);
      if (v48)
      {
LABEL_12:
        if ((a2 & 0xC000000000000001) != 0)
        {
          v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
        }
        else
        {
          if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          v49 = *(id *)(a2 + 32);
        }
        v50 = v49;
        v51 = v63;
        swift_bridgeObjectRelease(a2);
        v52 = swift_allocObject(&unk_1010B23A8, 32, 7);
        *(_QWORD *)(v52 + 16) = v51;
        *(_QWORD *)(v52 + 24) = v50;
        v71 = sub_100BD13F4;
        v72 = v52;
        aBlock = _NSConcreteStackBlock;
        v68 = 1107296256;
        v69 = sub_100016FB8;
        v70 = &unk_1010B23C0;
        v53 = _Block_copy(&aBlock);
        swift_retain();
        v54 = v50;
        static DispatchQoS.unspecified.getter(v54);
        v66 = _swiftEmptyArrayStorage;
        v55 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v56 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v57 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v56, v57, v9, v55);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v53);
        _Block_release(v53);

        (*(void (**)(char *, uint64_t))(v65 + 8))(v12, v9);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v16, v13);
        return swift_release(v72);
      }
    }
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void *sub_100BC8A7C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  id v52;
  _QWORD *v53;
  uint64_t aBlock;
  unint64_t v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t (*v58)();
  _QWORD *v59;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  v7 = __chkstk_darwin(v6);
  v45 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v10 = qword_1011B7D40;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  v51 = xmmword_100E22B00;
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v12 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
  *(_QWORD *)(v12 + 64) = sub_10001AC90((unint64_t *)&qword_1010ED720, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v12 + 32) = a1;
  v13 = a1;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Updating Cloud's CKRecord data for %{private}@", 46, 2, v12);
  swift_bridgeObjectRelease(v12);
  v14 = sub_10001A9A8(&qword_101117BE8);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = (void *)Future.init()();
  v16 = (_QWORD *)swift_allocObject(&unk_1010B19D0, 56, 7);
  v16[2] = a2;
  v16[3] = v13;
  v16[4] = SharingCircleWildAdvertisementKey.init(key:);
  v16[5] = 0;
  v16[6] = v15;
  v17 = v13;
  swift_retain_n(a2, 2);
  swift_retain_n(v15, 2);
  v52 = v17;
  v18 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD13BC);
  v19 = aBlock;
  v20 = static os_log_type_t.default.getter(v18);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v21 = qword_1011B7D48;
  v22 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v22 + 16) = v51;
  *(_QWORD *)(v22 + 56) = &type metadata for Bool;
  *(_QWORD *)(v22 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v22 + 32) = v19;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "localAvailable: %d", (_DWORD)v45);
  v23 = swift_bridgeObjectRelease(v22);
  v24 = static os_log_type_t.default.getter(v23);
  v25 = qword_1011B7D48;
  if (v19)
  {
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v26 = (char *)swift_allocObject(&unk_1010B1A48, 56, 7);
    v27 = v52;
    *((_QWORD *)v26 + 2) = v52;
    *((_QWORD *)v26 + 3) = SharingCircleWildAdvertisementKey.init(key:);
    *((_QWORD *)v26 + 4) = 0;
    *((_QWORD *)v26 + 5) = a2;
    *((_QWORD *)v26 + 6) = v15;
    v28 = qword_1010EA1D0;
    v29 = v27;
    swift_retain_n(a2, 2);
    swift_retain_n(v15, 2);
    v30 = v29;
    if (v28 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 0x7365547265646E75;
    v55 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v53, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease(v55);
    if ((v53 & 1) != 0)
    {
      sub_100BC99D8(v30, a2, v15);
    }
    else
    {
      v43 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v43);
      *(&v45 - 4) = (char *)a2;
      *(&v45 - 3) = (char *)sub_100BD13D4;
      *(&v45 - 2) = v26;
      static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_10077CB50, &v45 - 6, (char *)&type metadata for () + 8);
    }
    swift_release(v16);
    swift_release(v15);
    swift_release_n(a2, 2);

    swift_release(v26);
    swift_release(v15);

  }
  else
  {
    v31 = os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v32 = static os_log_type_t.default.getter(v31);
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v25, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    *(_QWORD *)&v51 = *(_QWORD *)(a2 + 64);
    v33 = (_QWORD *)swift_allocObject(&unk_1010B19F8, 40, 7);
    v33[2] = a2;
    v33[3] = sub_100BD13B8;
    v33[4] = v16;
    v58 = sub_1008764B4;
    v59 = v33;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v55 = 1107296256;
    v56 = sub_100016FB8;
    v57 = &unk_1010B1A10;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    v35 = swift_retain();
    v36 = v45;
    static DispatchQoS.unspecified.getter(v35);
    v53 = _swiftEmptyArrayStorage;
    v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v40 = v48;
    v41 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v38, v39, v50, v37);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v34);
    _Block_release(v34);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
    v42 = v59;
    swift_release(v15);

    swift_release(a2);
    swift_release(v16);
    swift_release(v42);
  }
  return v15;
}

uint64_t sub_100BC910C(void *a1, void (*a2)(id *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  void (*v33)(id *);
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v51;
  void (*v52)(id *);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  id v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t aBlock;
  unint64_t v64;
  uint64_t (*v65)(uint64_t);
  void *v66;
  uint64_t (*v67)();
  _QWORD *v68;

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  __chkstk_darwin(v8);
  v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v54 = *(_QWORD *)(v10 - 8);
  v55 = v10;
  v11 = __chkstk_darwin(v10);
  v53 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v14 = qword_1011B7D40;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  v59 = xmmword_100E22B00;
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v16 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
  *(_QWORD *)(v16 + 64) = sub_10001AC90((unint64_t *)&qword_1010ED720, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v16 + 32) = a1;
  v17 = a1;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Updating Cloud's CKRecord data for %{private}@", 46, 2, v16);
  swift_bridgeObjectRelease(v16);
  v18 = sub_10001A9A8(&qword_101117BE8);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = Future.init()();
  v20 = (_QWORD *)swift_allocObject(&unk_1010B2240, 56, 7);
  v20[2] = v4;
  v20[3] = v17;
  v52 = a2;
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = v19;
  v21 = v17;
  swift_retain_n(v4, 2);
  v61 = a3;
  swift_retain_n(a3, 2);
  swift_retain_n(v19, 2);
  v60 = v21;
  v22 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4D5C);
  v23 = aBlock;
  v24 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v25 = qword_1011B7D48;
  v26 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v26 + 16) = v59;
  *(_QWORD *)(v26 + 56) = &type metadata for Bool;
  *(_QWORD *)(v26 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v26 + 32) = v23;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "localAvailable: %d", v51);
  v27 = swift_bridgeObjectRelease(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = qword_1011B7D48;
  if (v23)
  {
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v30 = (_QWORD *)swift_allocObject(&unk_1010B22B8, 56, 7);
    v31 = v60;
    v32 = v61;
    v33 = v52;
    v30[2] = v60;
    v30[3] = v33;
    v30[4] = v32;
    v30[5] = v4;
    v30[6] = v19;
    v34 = qword_1010EA1D0;
    v35 = v31;
    swift_retain_n(v4, 2);
    swift_retain_n(v32, 2);
    swift_retain_n(v19, 2);
    v36 = v35;
    if (v34 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 0x7365547265646E75;
    v64 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v62, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease(v64);
    if (v62 == 1)
    {
      sub_100BCA0DC(v36, v33, v32, v4, v19);
    }
    else
    {
      v49 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v49);
      *((_QWORD *)&v51 - 4) = v4;
      *((_QWORD *)&v51 - 3) = sub_100BD13D4;
      *((_QWORD *)&v51 - 2) = v30;
      static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, &v51 - 12, (char *)&type metadata for () + 8);
    }
    swift_release(v20);
    swift_release(v19);
    swift_release_n(v4, 2);
    swift_release(v32);

    swift_release(v30);
    swift_release(v19);
    swift_release(v32);

  }
  else
  {
    v37 = os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v38 = static os_log_type_t.default.getter(v37);
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v29, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    *(_QWORD *)&v59 = *(_QWORD *)(v4 + 64);
    v39 = (_QWORD *)swift_allocObject(&unk_1010B2268, 40, 7);
    v39[2] = v4;
    v39[3] = sub_100BD13B8;
    v39[4] = v20;
    v67 = sub_100882D68;
    v68 = v39;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v64 = 1107296256;
    v65 = sub_100016FB8;
    v66 = &unk_1010B2280;
    v40 = _Block_copy(&aBlock);
    swift_retain();
    v41 = swift_retain();
    v42 = v53;
    static DispatchQoS.unspecified.getter(v41);
    v62 = _swiftEmptyArrayStorage;
    v43 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v45 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v46 = v56;
    v47 = v58;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v44, v45, v58, v43);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v42, v46, v40);
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v47);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v55);
    v48 = v68;
    swift_release(v19);
    swift_release(v61);

    swift_release(v4);
    swift_release(v20);
    swift_release(v48);
  }
  return v19;
}

uint64_t sub_100BC97E4(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id *), uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v16;
  _QWORD v17[7];
  _QWORD v18[2];
  uint64_t v19;

  v11 = (_QWORD *)swift_allocObject(&unk_1010B1DB8, 56, 7);
  v11[2] = a3;
  v11[3] = a4;
  v11[4] = a5;
  v11[5] = a2;
  v11[6] = a6;
  v12 = qword_1010EA1D0;
  v13 = a3;
  swift_retain_n(a5, 2);
  swift_retain_n(a2, 2);
  swift_retain_n(a6, 2);
  v14 = v13;
  if (v12 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v18[0] = 0x7365547265646E75;
  v18[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v19, v18, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v19 == 1)
  {
    sub_100BCA0DC(v14, a4, a5, a2, a6);
    swift_release();
    swift_release();
    swift_release();

    return swift_release();
  }
  else
  {
    v16 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v16);
    v17[2] = a2;
    v17[3] = sub_100BD13D4;
    v17[4] = v11;
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, v17, &type metadata for () + 1);
    swift_release();
    swift_release();
    swift_release();

    return swift_release();
  }
}

void sub_100BC99D8(void *a1, uint64_t a2, id a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  CKModifyRecordsOperation v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  uint64_t v40;
  NSObject *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[4];
  int v64;
  uint64_t v65;
  id v66;
  uint64_t *v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t aBlock[5];
  uint64_t v76;
  Swift::OpaquePointer_optional v77;
  Swift::OpaquePointer_optional v78;

  v73 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a1;
  v14 = CKRecord.changedKeys()();
  v15 = *(_QWORD *)(v14 + 16);
  v16 = swift_bridgeObjectRelease(v14);
  v17 = static os_log_type_t.default.getter(v16);
  if (v15)
  {
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v18 = qword_1011B7D40;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 72, 7);
    v72 = xmmword_100E22B00;
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v20 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v20 + 64) = sub_10001AC90((unint64_t *)&qword_1010ED720, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr, (const char *)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v20 + 32) = v13;
    v21 = v13;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Update modified record: %{private}@", 35, 2, v20);
    swift_bridgeObjectRelease(v20);
    v22 = sub_10000F4A0(0, &qword_101117BF0, CKModifyRecordsOperation_ptr);
    v23 = sub_10001A9A8(&qword_10111BE20);
    v24 = swift_allocObject(v23, 40, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v24 + 32) = v21;
    aBlock[0] = v24;
    specialized Array._endMutation()(v24);
    v25 = (void *)aBlock[0];
    v26 = v21;
    v77.value._rawValue = v25;
    v77.is_nil = 0;
    v27.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v77, v78).super.super.super.super.isa;
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
      -[objc_class setQualityOfService:](v27.super.super.super.super.isa, "setQualityOfService:", 25);
    v28 = -[objc_class configuration](v27.super.super.super.super.isa, "configuration");
    if (v28)
    {
      v29 = v28;
      objc_msgSend(v28, "setAutomaticallyRetryNetworkFailures:", 0);

      v30 = -[objc_class configuration](v27.super.super.super.super.isa, "configuration");
      if (v30)
      {
        v31 = v30;
        objc_msgSend(v30, "setDiscretionaryNetworkBehavior:", 0);

        v32 = (_QWORD *)swift_allocObject(&unk_1010B1A70, 40, 7);
        v33 = v73;
        v32[2] = v73;
        v32[3] = a3;
        v32[4] = v26;
        v34 = v26;
        swift_retain();
        swift_retain();
        v35 = CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter(sub_100BD13E4, v32);
        v36 = static os_log_type_t.default.getter(v35);
        v37 = qword_1011B7D40;
        v38 = swift_allocObject(v19, 72, 7);
        *(_OWORD *)(v38 + 16) = v72;
        *(_QWORD *)(v38 + 56) = v22;
        *(_QWORD *)(v38 + 64) = sub_10001AC90(&qword_101117BF8, &qword_101117BF0, CKModifyRecordsOperation_ptr, (const char *)&protocol conformance descriptor for NSObject);
        *(CKModifyRecordsOperation *)(v38 + 32) = v27;
        v39 = v27.super.super.super.super.isa;
        os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Adding CloudKit operation %@", 28, 2, v38);
        v40 = swift_bridgeObjectRelease(v38);
        __chkstk_darwin(v40);
        *(_QWORD *)&v63[-16] = v33;
        *(_QWORD *)&v63[-8] = v39;
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4EC8);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v72 = v12;
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v41 = qword_1011B7D40;
    if (os_log_type_enabled((os_log_t)qword_1011B7D40, (os_log_type_t)v17))
    {
      v42 = v13;
      v66 = v42;
      v43 = swift_slowAlloc(22, -1);
      v71 = a3;
      v44 = v43;
      v45 = swift_slowAlloc(32, -1);
      v69 = v45;
      *(_DWORD *)v44 = 141558275;
      v74 = 1752392040;
      aBlock[0] = v45;
      v67 = aBlock;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, aBlock, v44 + 4, v44 + 12);
      *(_WORD *)(v44 + 12) = 2081;
      v65 = v44 + 14;
      v46 = objc_msgSend(v42, "recordID");
      v68 = v41;
      v47 = v46;
      v48 = objc_msgSend(v46, "recordName");
      v70 = v10;
      v49 = v48;

      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v64 = v17;
      v52 = v51;

      v10 = v70;
      v74 = sub_100016940(v50, v52, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v67, v65, v44 + 22);
      v53 = v66;

      swift_bridgeObjectRelease(v52);
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v64, "No updates in the record %{private,mask.hash}s. Skipping.", (uint8_t *)v44, 0x16u);
      v54 = v69;
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      v55 = v44;
      a3 = v71;
      swift_slowDealloc(v55, -1, -1);
    }
    v73 = *(_QWORD *)(v73 + 48);
    v56 = swift_allocObject(&unk_1010B1A98, 32, 7);
    *(_QWORD *)(v56 + 16) = a3;
    *(_QWORD *)(v56 + 24) = v13;
    aBlock[4] = (uint64_t)sub_100BD13F4;
    v76 = v56;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_1010B1AB0;
    v57 = _Block_copy(aBlock);
    v71 = v13;
    v58 = swift_retain();
    v59 = v72;
    static DispatchQoS.unspecified.getter(v58);
    v74 = (uint64_t)_swiftEmptyArrayStorage;
    v60 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v62 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v61, v62, v5, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v59, v8, v57);
    _Block_release(v57);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v59, v9);

    swift_release(v76);
  }
}

void sub_100BCA0DC(void *a1, void (*a2)(id *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  CKModifyRecordsOperation v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  objc_class *v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t aBlock[5];
  uint64_t v77;
  id v78[2];
  Swift::OpaquePointer_optional v79;
  Swift::OpaquePointer_optional v80;

  v73 = a4;
  v74 = a5;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78[0] = a1;
  v15 = a1;
  a2(v78);
  v16 = v78[0];
  v17 = CKRecord.changedKeys()();

  v18 = *(_QWORD *)(v17 + 16);
  v19 = swift_bridgeObjectRelease(v17);
  v20 = static os_log_type_t.default.getter(v19);
  if (v18)
  {
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v21 = qword_1011B7D40;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 72, 7);
    v72 = xmmword_100E22B00;
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v23 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v23 + 64) = sub_10001AC90((unint64_t *)&qword_1010ED720, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr, (const char *)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v23 + 32) = v16;
    v24 = v16;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Update modified record: %{private}@", 35, 2, v23);
    swift_bridgeObjectRelease(v23);
    v25 = sub_10000F4A0(0, &qword_101117BF0, CKModifyRecordsOperation_ptr);
    v26 = sub_10001A9A8(&qword_10111BE20);
    v27 = swift_allocObject(v26, 40, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v27 + 32) = v24;
    aBlock[0] = v27;
    specialized Array._endMutation()(v27);
    v28 = (void *)aBlock[0];
    v29 = v24;
    v79.value._rawValue = v28;
    v79.is_nil = 0;
    v30.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v79, v80).super.super.super.super.isa;
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
      -[objc_class setQualityOfService:](v30.super.super.super.super.isa, "setQualityOfService:", 25);
    v31 = -[objc_class configuration](v30.super.super.super.super.isa, "configuration");
    if (v31)
    {
      v32 = v31;
      objc_msgSend(v31, "setAutomaticallyRetryNetworkFailures:", 0);

      v33 = -[objc_class configuration](v30.super.super.super.super.isa, "configuration");
      if (v33)
      {
        v34 = v33;
        objc_msgSend(v33, "setDiscretionaryNetworkBehavior:", 0);

        v35 = (_QWORD *)swift_allocObject(&unk_1010B1D40, 40, 7);
        v36 = v73;
        v37 = v74;
        v35[2] = v73;
        v35[3] = v37;
        v35[4] = v15;
        v38 = v15;
        swift_retain();
        swift_retain();
        v39 = CKModifyRecordsOperation.undeprecated_modifyRecordsCompletionBlock.setter(sub_100BD4EE4, v35);
        v40 = static os_log_type_t.default.getter(v39);
        v41 = qword_1011B7D40;
        v42 = swift_allocObject(v22, 72, 7);
        *(_OWORD *)(v42 + 16) = v72;
        *(_QWORD *)(v42 + 56) = v25;
        *(_QWORD *)(v42 + 64) = sub_10001AC90(&qword_101117BF8, &qword_101117BF0, CKModifyRecordsOperation_ptr, (const char *)&protocol conformance descriptor for NSObject);
        *(CKModifyRecordsOperation *)(v42 + 32) = v30;
        v43 = v30.super.super.super.super.isa;
        os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Adding CloudKit operation %@", 28, 2, v42);
        v44 = swift_bridgeObjectRelease(v42);
        __chkstk_darwin(v44);
        *(&v66 - 2) = v36;
        *(&v66 - 1) = (uint64_t)v43;
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4EC8);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v71 = v11;
    *(_QWORD *)&v72 = v8;
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v45 = qword_1011B7D40;
    if (os_log_type_enabled((os_log_t)qword_1011B7D40, (os_log_type_t)v20))
    {
      v46 = v15;
      v47 = swift_slowAlloc(22, -1);
      v70 = v12;
      v48 = v47;
      v49 = swift_slowAlloc(32, -1);
      v69 = v49;
      *(_DWORD *)v48 = 141558275;
      v75 = 1752392040;
      aBlock[0] = v49;
      v67 = aBlock;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, aBlock, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      v66 = v48 + 14;
      v50 = objc_msgSend(v46, "recordID");
      v68 = v20;
      v51 = v50;
      v52 = v15;
      v53 = objc_msgSend(v50, "recordName");

      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v56 = v55;

      v15 = v52;
      v75 = sub_100016940(v54, v56, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v67, v66, v48 + 22);

      swift_bridgeObjectRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v68, "No updates in the record %{private,mask.hash}s. Skipping.", (uint8_t *)v48, 0x16u);
      v57 = v69;
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      v58 = v48;
      v12 = v70;
      swift_slowDealloc(v58, -1, -1);
    }
    v59 = swift_allocObject(&unk_1010B1D68, 32, 7);
    *(_QWORD *)(v59 + 16) = v74;
    *(_QWORD *)(v59 + 24) = v15;
    aBlock[4] = (uint64_t)sub_100BD13F4;
    v77 = v59;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_1010B1D80;
    v60 = _Block_copy(aBlock);
    v61 = v15;
    v62 = swift_retain();
    static DispatchQoS.unspecified.getter(v62);
    v75 = (uint64_t)_swiftEmptyArrayStorage;
    v63 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v64 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v65 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v64, v65, v7, v63);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v60);
    _Block_release(v60);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v71);

    swift_release(v77);
  }
}

uint64_t sub_100BCA7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void **aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  _QWORD *v46;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin(v15);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v38 = v17;
    v39 = result;
    swift_errorRetain(a3);
    sub_100BC3690(a3);
    v20 = (_QWORD *)swift_allocObject(&unk_1010B1B38, 40, 7);
    v20[2] = a5;
    v20[3] = a4;
    v20[4] = a3;
    v45 = sub_100BD15A8;
    v46 = v20;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_100016FB8;
    v44 = &unk_1010B1B50;
    v21 = _Block_copy(&aBlock);
    swift_errorRetain(a3);
    swift_retain();
    v22 = swift_retain();
    static DispatchQoS.unspecified.getter(v22);
    v40 = _swiftEmptyArrayStorage;
    v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v24, v25, v11, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v14, v21);
    _Block_release(v21);
    swift_errorRelease(a3);
LABEL_3:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v19, v39);
    return swift_release(v46);
  }
  if (a1)
  {
    v38 = v17;
    v39 = result;
    if ((unint64_t)a1 >> 62)
    {
      if (a1 >= 0)
        v36 = a1 & 0xFFFFFFFFFFFFFF8;
      else
        v36 = a1;
      swift_bridgeObjectRetain(a1);
      result = _CocoaArrayWrapper.endIndex.getter(v36);
      if (result)
        goto LABEL_8;
    }
    else
    {
      v26 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(a1);
      if (v26)
      {
LABEL_8:
        if ((a1 & 0xC000000000000001) != 0)
        {
          v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
        }
        else
        {
          if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          v27 = *(id *)(a1 + 32);
        }
        v28 = v27;
        swift_bridgeObjectRelease(a1);
        v29 = (_QWORD *)swift_allocObject(&unk_1010B1AE8, 40, 7);
        v29[2] = a6;
        v29[3] = a5;
        v29[4] = v28;
        v45 = sub_100BD1598;
        v46 = v29;
        aBlock = _NSConcreteStackBlock;
        v42 = 1107296256;
        v43 = sub_100016FB8;
        v44 = &unk_1010B1B00;
        v30 = _Block_copy(&aBlock);
        swift_retain();
        v31 = a6;
        v32 = v28;
        static DispatchQoS.unspecified.getter(v32);
        v40 = _swiftEmptyArrayStorage;
        v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v34, v35, v11, v33);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v14, v30);
        _Block_release(v30);

        goto LABEL_3;
      }
    }
    return swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_100BCABBC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;

  v5 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v6 = qword_1011B7D40;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v8 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
  *(_QWORD *)(v8 + 64) = sub_10001AC90((unint64_t *)&qword_1010ED720, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v8 + 32) = a1;
  v9 = a1;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Saving record %{private}@", 25, 2, v8);
  swift_bridgeObjectRelease(v8);
  v11 = a3;
  return Future.finish(result:)(&v11);
}

uint64_t sub_100BCACE8()
{
  uint64_t v0;

  sub_1002EB2D8(v0 + 16);

  swift_release();
  sub_100BD3364(*(_QWORD *)(v0 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_100BCADC4()
{
  uint64_t v0;

  sub_100BCACE8();
  return swift_deallocClassInstance(v0, 288, 7);
}

void sub_100BCADE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD v12[5];
  _QWORD *v13;

  v8 = sub_100BBF0A8();
  v9 = (_QWORD *)swift_allocObject(&unk_1010B1BB0, 48, 7);
  v9[2] = a2;
  v9[3] = a1;
  v9[4] = a3;
  v9[5] = a4;
  v12[4] = sub_100BD3548;
  v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10002683C;
  v12[3] = &unk_1010B1BC8;
  v10 = _Block_copy(v12);
  v11 = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release(v11);
  objc_msgSend(v8, "accountStatusWithCompletionHandler:", v10);
  _Block_release(v10);

}

uint64_t sub_100BCAEDC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v48[4];
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void **aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  uint64_t (*v61)();
  _QWORD *v62;

  v51 = a5;
  v52 = a6;
  v50 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = &v48[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v55 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v55 - 8);
  v12 = __chkstk_darwin(v55);
  v14 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    v15 = swift_errorRetain(a2);
    v16 = static os_log_type_t.error.getter(v15);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v17 = qword_1011B7D40;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    aBlock = a2;
    swift_errorRetain(a2);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v21 = String.init<A>(describing:)(&aBlock, v20);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "error fetching account status: %{public}@", 41, 2, v19);
    swift_bridgeObjectRelease(v19);
    v24 = (_QWORD *)swift_allocObject(&unk_1010B1C50, 40, 7);
    v25 = v51;
    v26 = v52;
    v24[2] = a4;
    v24[3] = v25;
    v24[4] = v26;
    v61 = sub_100BD35A0;
    v62 = v24;
    aBlock = _NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_100016FB8;
    v60 = &unk_1010B1C68;
    v27 = _Block_copy(&aBlock);
    swift_retain();
    v28 = swift_retain();
    static DispatchQoS.unspecified.getter(v28);
    v56 = _swiftEmptyArrayStorage;
    v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v30, v31, v9, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v27);
    _Block_release(v27);
    swift_errorRelease(a2);
  }
  else
  {
    v49 = static os_log_type_t.default.getter(v12);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v32 = qword_1011B7D40;
    v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
    v35 = (id)CKStringFromAccountStatus(a1);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_10001AA00();
    *(_QWORD *)(v34 + 32) = v36;
    *(_QWORD *)(v34 + 40) = v38;
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v32, "Fetched CK account status: %{public}@", 37, 2, v34);
    swift_bridgeObjectRelease(v34);
    v39 = (_QWORD *)swift_allocObject(&unk_1010B1C00, 48, 7);
    v40 = v51;
    v41 = v52;
    v39[2] = a4;
    v39[3] = v40;
    v39[4] = v41;
    v39[5] = a1;
    v61 = sub_100BD355C;
    v62 = v39;
    aBlock = _NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_100016FB8;
    v60 = &unk_1010B1C18;
    v42 = _Block_copy(&aBlock);
    swift_retain();
    v43 = swift_retain();
    static DispatchQoS.unspecified.getter(v43);
    v56 = _swiftEmptyArrayStorage;
    v44 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v45 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v46 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v45, v46, v9, v44);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v42);
    _Block_release(v42);
  }
  (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v11, v9);
  (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v14, v55);
  return swift_release(v62);
}

void sub_100BCB3C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD v11[5];
  _QWORD *v12;

  v7 = sub_100BBF0A8();
  v8 = (_QWORD *)swift_allocObject(&unk_1010B21F0, 40, 7);
  v8[2] = a1;
  v8[3] = a3;
  v8[4] = a4;
  v11[4] = sub_100BD45C0;
  v12 = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000270FC;
  v11[3] = &unk_1010B2208;
  v9 = _Block_copy(v11);
  v10 = v12;
  swift_retain();
  swift_retain();
  swift_release(v10);
  objc_msgSend(v7, "accountInfoWithCompletionHandler:", v9);
  _Block_release(v9);

}

void sub_100BCB4B4(void *a1, void *a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  id v7;

  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain(a2);
    a4(a2, 1);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v7 = a1;
    a4(a1, 0);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x8000000100EF25A0, "searchpartyd/CloudKitCoordinator.swift", 38, 2, 1132, 0);
    __break(1u);
  }
}

void sub_100BCB5A0()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  Class isa;
  uint64_t Strong;
  _BOOL8 v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::OpaquePointer_optional v27;
  Swift::OpaquePointer_optional v28;

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(id *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v2 + 32);
  *v6 = v7;
  (*((void (**)(_QWORD *, _QWORD, uint64_t))v4 + 13))(v6, enum case for DispatchPredicate.notOnQueue(_:), v3);
  v8 = v7;
  isa = (Class)_dispatchPreconditionTest(_:)(v6);
  (*((void (**)(_QWORD *, uint64_t))v4 + 1))(v6, v3);
  if ((isa & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(id *)(Strong + 152);
    swift_unknownObjectRelease(v11);
    v13 = dispatch_group_create();
    dispatch_group_enter(v13);
    sub_10000F4A0(0, &qword_101117C18, CKModifyRecordZonesOperation_ptr);
    v14 = sub_10001A9A8(&qword_10111BE20);
    v15 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v15 + 32) = v12;
    v26 = v15;
    specialized Array._endMutation()(v15);
    LOBYTE(v11) = v26;
    v16 = v12;
    v27.value._rawValue = _swiftEmptyArrayStorage;
    v27.is_nil = v11;
    isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v27, v28).super.super.super.super.isa;
    v17 = swift_allocObject(&unk_1010B1CC8, 32, 7);
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = v13;
    v4 = v16;
    v1 = v13;
    CKModifyRecordZonesOperation.undeprecated_modifyRecordZonesCompletionBlock.setter(sub_100BD3610, v17);
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
      -[objc_class setQualityOfService:](isa, "setQualityOfService:", 25);
    v18 = -[objc_class configuration](isa, "configuration");
    if (v18)
    {
      v19 = v18;
      objc_msgSend(v18, "setAutomaticallyRetryNetworkFailures:", 0);

      v20 = -[objc_class configuration](isa, "configuration");
      if (v20)
      {
        v21 = v20;
        objc_msgSend(v20, "setDiscretionaryNetworkBehavior:", 0);

        __chkstk_darwin(v22);
        *(&v25 - 4) = (uint64_t)v4;
        *(&v25 - 3) = v2;
        *(&v25 - 2) = (uint64_t)isa;
        v23 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD3618);
        v2 = static os_log_type_t.default.getter(v23);
        if (qword_1010EA260 == -1)
        {
LABEL_8:
          os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D40, "Waiting for all zone delete tasks to complete.", 46, 2, _swiftEmptyArrayStorage);
          OS_dispatch_group.wait()();

          return;
        }
LABEL_13:
        swift_once(&qword_1010EA260, sub_100B5DA30);
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v24 = static os_log_type_t.error.getter(0);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D40, "Delegate does not define a zone!", 32, 2, _swiftEmptyArrayStorage);
  }
}

void sub_100BCB8F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, NSObject *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  if (a3)
  {
    v7 = swift_errorRetain(a3);
    v8 = static os_log_type_t.error.getter(v7);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v9 = qword_1011B7D40;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
    v22 = a3;
    swift_errorRetain(a3);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v13 = String.init<A>(describing:)(&v22, v12);
    v15 = v14;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10001AA00();
    *(_QWORD *)(v11 + 32) = v13;
    *(_QWORD *)(v11 + 40) = v15;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Error deleting zone: %{public}@", 31, 2, v11);
    swift_bridgeObjectRelease(v11);
    swift_errorRelease(a3);
  }
  else
  {
    v17 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v18 = qword_1011B7D40;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v20 + 56) = sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
    *(_QWORD *)(v20 + 64) = sub_10001AC90(&qword_101117C10, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr, (const char *)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v20 + 32) = a4;
    v21 = a4;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Deleted Zone: %@", 16, 2, v20);
    swift_bridgeObjectRelease(v20);
  }
  dispatch_group_leave(a5);
}

void sub_100BCBB08(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  v5 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v6 = qword_1011B7D40;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v8 + 56) = sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
  *(_QWORD *)(v8 + 64) = sub_10001AC90(&qword_101117C10, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v8 + 32) = a1;
  v9 = a1;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Queuing operation to deleting zone: %@", 38, 2, v8);
  swift_bridgeObjectRelease(v8);
  v10 = sub_100BBF0A8();
  v11 = objc_msgSend(v10, "privateCloudDatabase");

  objc_msgSend(v11, "addOperation:", a3);
}

uint64_t sub_100BCBC6C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = sub_100BD349C();
  v3 = swift_allocError(&type metadata for CloudKitCoordinator.CloudKitCoordinatorError, v2, 0, 0);
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  swift_errorRetain(v3);
  sub_100BD3364(v4);
  v5 = *(_QWORD *)(a1 + 80);
  sub_100BD3374(v5);
  sub_100BD2AE8(v5);
  sub_100BD3364(v5);
  return swift_errorRelease(v3);
}

unint64_t sub_100BCBCF0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 1;
  sub_100BD3364(v2);
  v3 = *(_QWORD *)(a1 + 80);
  sub_100BD3374(v3);
  sub_100BD2AE8(v3);
  return sub_100BD3364(v3);
}

void sub_100BCBD40(void *a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v8 = qword_1011B7D40;
  v41 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = sub_10000F4A0(0, &qword_101117C28, CKRecordZone_ptr);
  *(_QWORD *)(v9 + 56) = v10;
  v11 = sub_10001AC90(&qword_101117C30, &qword_101117C28, CKRecordZone_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v9 + 64) = v11;
  *(_QWORD *)(v9 + 32) = a1;
  v12 = a1;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Creating Zone: %@", 17, 2, v9);
  swift_bridgeObjectRelease(v9);
  if (a2)
  {
    v13 = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 80) = a2;
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    sub_100BD3364(v13);
    v14 = *(_QWORD *)(a3 + 80);
    sub_100BD3374(v14);
    sub_100BD2AE8(v14);
    sub_100BD3364(v14);
    v15 = swift_errorRelease(a2);
    v16 = static os_log_type_t.default.getter(v15);
    v17 = qword_1011B7D40;
    v18 = os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7D40, "Setting zoneState to .failure", 29, 2, _swiftEmptyArrayStorage);
    v19 = static os_log_type_t.error.getter(v18);
    v20 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    v43 = a2;
    swift_errorRetain(a2);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v22 = String.init<A>(describing:)(&v43, v21);
    v24 = v23;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10001AA00();
    *(_QWORD *)(v20 + 32) = v22;
    *(_QWORD *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v17, "Error creating zone: %{public}@", 31, 2, v20);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(a2);
  }
  else
  {
    v25 = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 80) = 2;
    sub_100BD3364(v25);
    v26 = *(_QWORD *)(a3 + 80);
    sub_100BD3374(v26);
    sub_100BD2AE8(v26);
    v27 = sub_100BD3364(v26);
    v28 = static os_log_type_t.default.getter(v27);
    v29 = qword_1011B7D40;
    v30 = os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D40, "Setting zoneState to .created", 29, 2, _swiftEmptyArrayStorage);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v32 + 56) = v10;
    *(_QWORD *)(v32 + 64) = v11;
    *(_QWORD *)(v32 + 32) = v12;
    v33 = v12;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v29, "Created Zone: %@", 16, 2, v32);
    v34 = swift_bridgeObjectRelease(v32);
    v35 = static os_log_type_t.default.getter(v34);
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, qword_1011B7D40, "Initial fetch complete", 22, 2, _swiftEmptyArrayStorage);
    v36 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD34FC);
    v37 = static os_log_type_t.default.getter(v36);
    if (qword_1010EA268 != -1)
      swift_once(&qword_1010EA268, sub_100B5DA8C);
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7D48, "Signaling availableSemaphore", 28, 2, _swiftEmptyArrayStorage, 1, 2);
    v38 = *(id *)(a3 + 56);
    OS_dispatch_semaphore.signal()();

    v40 = static os_log_type_t.default.getter(v39);
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_1011B7D48, "Signaled availableSemaphore", 27, 2, _swiftEmptyArrayStorage);
    sub_1007B742C();
  }
  dispatch_group_leave(a4);
}

void sub_100BCC16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD aBlock[5];
  uint64_t v49;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v44 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v41 - 8);
  v10 = __chkstk_darwin(v41);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v39 - v13;
  v15 = type metadata accessor for DispatchQoS.QoSClass(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(a2 + 200) = a1;
  v20 = static os_log_type_t.error.getter(v17);
  if (a1 == 3)
  {
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v21 = qword_1011B7D40;
    v22 = os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D40, "No account found, move on finish setup", 38, 2, _swiftEmptyArrayStorage);
    v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v21, "Initial fetch complete", 22, 2, _swiftEmptyArrayStorage);
    v24 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD34FC);
    v25 = static os_log_type_t.default.getter(v24);
    if (qword_1010EA268 != -1)
      swift_once(&qword_1010EA268, sub_100B5DA8C);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D48, "Signaling availableSemaphore", 28, 2, _swiftEmptyArrayStorage);
    v26 = *(id *)(a2 + 56);
    OS_dispatch_semaphore.signal()();

    v28 = static os_log_type_t.default.getter(v27);
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D48, "Signaled availableSemaphore", 27, 2, _swiftEmptyArrayStorage);
    sub_1007B742C();
  }
  else
  {
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D40, "Failure creating Zone. retrying...", 34, 2, _swiftEmptyArrayStorage);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for DispatchQoS.QoSClass.default(_:), v15);
    v29 = (void *)static OS_dispatch_queue.global(qos:)(v19);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    static DispatchTime.now()(v30);
    + infix(_:_:)(v12, 15.0);
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v31 = v41;
    v40(v12, v41);
    aBlock[4] = sub_100BD35DC;
    v49 = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010B1C90;
    v32 = _Block_copy(aBlock);
    v33 = swift_retain();
    static DispatchQoS.unspecified.getter(v33);
    v47 = _swiftEmptyArrayStorage;
    v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v37 = v44;
    v38 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v35, v36, v46, v34);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v14, v8, v37, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v43);
    v40(v14, v31);
    swift_release(v49);
  }
}

void sub_100BCC634(void *a1, uint64_t a2, id a3, uint64_t a4, id a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  void **v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint8_t *v39;
  void **v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8_t *v46;
  void *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  void *v57;
  id v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  char v105;
  void *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  id v113;
  id v114;
  uint64_t DatabaseChangesCompletion;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  void **aBlock;
  uint64_t v135;
  void (*v136)(uint64_t, void *);
  void *v137;
  uint64_t (*v138)(void *);
  uint64_t v139;

  v6 = v5;
  v131 = a1;
  v11 = (_QWORD *)type metadata accessor for URL(0);
  v128 = *(v11 - 1);
  v129 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v6 + 32);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.notOnQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  v124 = a2;
  v20 = swift_allocObject(&unk_1010B1E30, 24, 7);
  *(_QWORD *)(v20 + 16) = _swiftEmptyArrayStorage;
  v21 = swift_allocObject(&unk_1010B1E30, 24, 7);
  a2 = v21;
  *(_QWORD *)(v21 + 16) = _swiftEmptyArrayStorage;
  v126 = a5;
  v127 = v20;
  v125 = a4;
  if ((a3 & 1) != 0)
  {
    v22 = static os_log_type_t.debug.getter(v21);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v23 = qword_1011B7D40;
    v24 = v22;
    if (os_log_type_enabled((os_log_t)qword_1011B7D40, v22))
    {
      swift_retain_n(v6, 2);
      v25 = swift_slowAlloc(12, -1);
      v130 = v6;
      v26 = (uint8_t *)v25;
      v27 = (void **)swift_slowAlloc(32, -1);
      *(_DWORD *)v26 = 136315138;
      aBlock = v27;
      v123 = (uint64_t)(v26 + 4);
      v28 = a2;
      v29 = objc_msgSend(*(id *)(v130 + 280), "debugDescription");
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      a2 = v28;
      v132 = sub_100016940(v30, v32, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v123, v26 + 12);
      swift_release_n(v130, 2);
      swift_bridgeObjectRelease();
      v33 = "fetchDatabaseChanges exclusiveAccessSemaphore -- caller claims to already have access %s";
      v34 = v23;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v34, v24, v33, v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v56 = v26;
      v6 = v130;
      swift_slowDealloc(v56, -1, -1);
    }
  }
  else
  {
    v35 = static os_log_type_t.info.getter(v21);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v36 = qword_1011B7D40;
    v37 = v35;
    v38 = os_log_type_enabled((os_log_t)qword_1011B7D40, v35);
    v130 = v6;
    if (v38)
    {
      swift_retain_n(v6, 2);
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (void **)swift_slowAlloc(32, -1);
      aBlock = v40;
      *(_DWORD *)v39 = 136315138;
      v123 = (uint64_t)(v39 + 4);
      v41 = objc_msgSend(*(id *)(v130 + 280), "debugDescription");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v43 = a2;
      v45 = v44;

      v132 = sub_100016940(v42, v45, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v123, v39 + 12);
      swift_release_n(v130, 2);
      a2 = v43;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, ">>> fetchDatabaseChanges exclusiveAccessSemaphore.wait() %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      v46 = v39;
      v6 = v130;
      swift_slowDealloc(v46, -1, -1);
    }
    v47 = *(void **)(v6 + 280);
    OS_dispatch_semaphore.wait()();
    v49 = static os_log_type_t.info.getter(v48);
    v50 = qword_1011B7D40;
    v24 = v49;
    if (os_log_type_enabled((os_log_t)qword_1011B7D40, v49))
    {
      swift_retain_n(v6, 2);
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (void **)swift_slowAlloc(32, -1);
      aBlock = v27;
      *(_DWORD *)v26 = 136315138;
      v123 = (uint64_t)(v26 + 4);
      v51 = objc_msgSend(v47, "debugDescription");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v53 = a2;
      v55 = v54;

      v132 = sub_100016940(v52, v55, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v123, v26 + 12);
      swift_release_n(v130, 2);
      a2 = v53;
      swift_bridgeObjectRelease();
      v33 = "<<< fetchDatabaseChanges exclusiveAccessSemaphore.wait() %s";
      v34 = v50;
      goto LABEL_13;
    }
  }
  sub_100655F48((uint64_t)objc_msgSend(v131, "scope"));
  v57 = (void *)sub_100656674((uint64_t)v13);
  (*(void (**)(char *, id))(v128 + 8))(v13, v129);
  a3 = objc_msgSend(objc_allocWithZone((Class)CKFetchDatabaseChangesOperation), "initWithPreviousServerChangeToken:", v57);
  v58 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v59 = objc_msgSend(v58, "isInternalBuild");

  v129 = v57;
  if (v59)
  {
    LODWORD(v128) = static os_log_type_t.default.getter(v60);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v123 = qword_1011B7D40;
    v61 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v62 = swift_allocObject(v61, 112, 7);
    *(_OWORD *)(v62 + 16) = xmmword_100E22B10;
    aBlock = (void **)objc_msgSend(v131, "scope");
    type metadata accessor for Scope(0);
    v64 = String.init<A>(describing:)(&aBlock, v63);
    v66 = v65;
    *(_QWORD *)(v62 + 56) = &type metadata for String;
    v67 = sub_10001AA00();
    v68 = v67;
    *(_QWORD *)(v62 + 64) = v67;
    *(_QWORD *)(v62 + 32) = v64;
    *(_QWORD *)(v62 + 40) = v66;
    if (v57)
    {
      v122 = a2;
      v69 = v6;
      v70 = objc_msgSend(v57, "data");
      v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v73 = v72;

      v74 = Data.hexString.getter(v71, v73);
      v76 = v75;
      sub_10001BC14(v71, v73);
      v77 = (uint64_t *)(v62 + 72);
      *(_QWORD *)(v62 + 96) = &type metadata for String;
      *(_QWORD *)(v62 + 104) = v68;
      if (v76)
      {
        *v77 = v74;
        v6 = v69;
        a2 = v122;
        v78 = v123;
        v79 = v128;
LABEL_31:
        *(_QWORD *)(v62 + 80) = v76;
        os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, v78, "Old %{public}@ database change token: %@", 40, 2, v62);
        swift_bridgeObjectRelease();
        a4 = v127;
        goto LABEL_32;
      }
      v6 = v69;
      a2 = v122;
    }
    else
    {
      v77 = (uint64_t *)(v62 + 72);
      *(_QWORD *)(v62 + 96) = &type metadata for String;
      *(_QWORD *)(v62 + 104) = v67;
    }
    v79 = v128;
    v78 = v123;
    *v77 = 7104878;
    v76 = 0xE300000000000000;
    goto LABEL_31;
  }
  a4 = v127;
  if (v57)
  {
    v80 = objc_msgSend(v57, "data");
    v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v83 = v82;

    v84 = sub_10001BC14(v81, v83);
    v85 = static os_log_type_t.default.getter(v84);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v86 = qword_1011B7D40;
    v87 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v88 = swift_allocObject(v87, 72, 7);
    *(_OWORD *)(v88 + 16) = xmmword_100E22B00;
    aBlock = (void **)objc_msgSend(v131, "scope");
    type metadata accessor for Scope(0);
    v90 = String.init<A>(describing:)(&aBlock, v89);
    v92 = v91;
    *(_QWORD *)(v88 + 56) = &type metadata for String;
    *(_QWORD *)(v88 + 64) = sub_10001AA00();
    *(_QWORD *)(v88 + 32) = v90;
    *(_QWORD *)(v88 + 40) = v92;
    os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "Old %{public}@ database change token: non-nil", 45, 2, v88);
  }
  else
  {
    v93 = static os_log_type_t.default.getter(v60);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v94 = qword_1011B7D40;
    v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v96 = swift_allocObject(v95, 72, 7);
    *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
    aBlock = (void **)objc_msgSend(v131, "scope");
    type metadata accessor for Scope(0);
    v98 = String.init<A>(describing:)(&aBlock, v97);
    v100 = v99;
    *(_QWORD *)(v96 + 56) = &type metadata for String;
    *(_QWORD *)(v96 + 64) = sub_10001AA00();
    *(_QWORD *)(v96 + 32) = v98;
    *(_QWORD *)(v96 + 40) = v100;
    os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Old %{public}@ database change token: nil", 41, 2, v96);
  }
  swift_bridgeObjectRelease();
LABEL_32:
  objc_msgSend(a3, "setFetchAllChanges:", 1);
  v101 = objc_msgSend(a3, "configuration");
  if (v101)
  {
    v102 = v101;
    objc_msgSend(v101, "setAutomaticallyRetryNetworkFailures:", 0);

    v103 = objc_msgSend(a3, "configuration");
    if (v103)
    {
      v104 = v103;
      v105 = v124 & 1;
      objc_msgSend(v103, "setDiscretionaryNetworkBehavior:", 0);

      v138 = sub_100BD3690;
      v139 = a4;
      aBlock = _NSConcreteStackBlock;
      v135 = 1107296256;
      v136 = sub_100BCDBCC;
      v137 = &unk_1010B1E48;
      v106 = _Block_copy(&aBlock);
      v107 = v139;
      swift_retain();
      swift_release(v107);
      objc_msgSend(a3, "setRecordZoneWithIDChangedBlock:", v106);
      _Block_release(v106);
      v138 = sub_100BD3690;
      v139 = a2;
      aBlock = _NSConcreteStackBlock;
      v135 = 1107296256;
      v136 = sub_100BCDBCC;
      v137 = &unk_1010B1E70;
      v108 = _Block_copy(&aBlock);
      v109 = v139;
      swift_retain();
      swift_release(v109);
      objc_msgSend(a3, "setRecordZoneWithIDWasDeletedBlock:", v108);
      _Block_release(v108);
      v110 = swift_allocObject(&unk_1010B1EA8, 17, 7);
      *(_BYTE *)(v110 + 16) = v105;
      v138 = sub_100BD36B8;
      v139 = v110;
      aBlock = _NSConcreteStackBlock;
      v135 = 1107296256;
      v136 = sub_100BCDBCC;
      v137 = &unk_1010B1EC0;
      v111 = _Block_copy(&aBlock);
      swift_release(v139);
      objc_msgSend(a3, "setChangeTokenUpdatedBlock:", v111);
      _Block_release(v111);
      v112 = swift_allocObject(&unk_1010B1EF8, 72, 7);
      *(_BYTE *)(v112 + 16) = v105;
      v113 = v131;
      *(_QWORD *)(v112 + 24) = v6;
      *(_QWORD *)(v112 + 32) = v113;
      v114 = v126;
      *(_QWORD *)(v112 + 40) = v125;
      *(_QWORD *)(v112 + 48) = v114;
      *(_QWORD *)(v112 + 56) = a2;
      *(_QWORD *)(v112 + 64) = a4;
      swift_retain();
      swift_retain();
      swift_retain();
      a5 = v113;
      swift_retain();
      DatabaseChangesCompletion = CKFetchDatabaseChangesOperation.undeprecated_fetchDatabaseChangesCompletionBlock.setter(sub_100BD3704, v112);
      v14 = static os_log_type_t.default.getter(DatabaseChangesCompletion);
      if (qword_1010EA260 == -1)
      {
LABEL_35:
        v116 = qword_1011B7D40;
        v117 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v118 = swift_allocObject(v117, 72, 7);
        *(_OWORD *)(v118 + 16) = xmmword_100E22B00;
        *(_QWORD *)(v118 + 56) = sub_10000F4A0(0, &qword_101117C58, CKFetchDatabaseChangesOperation_ptr);
        *(_QWORD *)(v118 + 64) = sub_10001AC90(&qword_101117C60, &qword_101117C58, CKFetchDatabaseChangesOperation_ptr, (const char *)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v118 + 32) = a3;
        v119 = a3;
        os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v116, "Adding CloudKit operation %@", 28, 2, v118);
        v120 = swift_bridgeObjectRelease();
        __chkstk_darwin(v120);
        *(&v121 - 2) = (uint64_t)a5;
        *(&v121 - 1) = (uint64_t)v119;
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4E1C);
        swift_release(a4);
        swift_release(a2);

        return;
      }
LABEL_37:
      swift_once(&qword_1010EA260, sub_100B5DA30);
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100BCD2E8(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  if (a2)
  {
    v27 = a2;
    v3 = sub_100656368((uint64_t)v27, a1);
    v5 = static os_log_type_t.default.getter(v3);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v6 = qword_1011B7D40;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 112, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B10;
    v9 = URL.absoluteString.getter();
    v11 = v10;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    v12 = sub_10001AA00();
    *(_QWORD *)(v8 + 64) = v12;
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 40) = v11;
    v13 = objc_msgSend(v27, "data");
    v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v17 = Data.hexString.getter(v14, v16);
    v19 = v18;
    sub_10001BC14(v14, v16);
    *(_QWORD *)(v8 + 96) = &type metadata for String;
    *(_QWORD *)(v8 + 104) = v12;
    *(_QWORD *)(v8 + 72) = v17;
    *(_QWORD *)(v8 + 80) = v19;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Updated change token -- URL: %{public}@, token, %@", 50, 2, v8);
    swift_bridgeObjectRelease(v8);

  }
  else
  {
    v4 = sub_100656590();
    v20 = static os_log_type_t.default.getter(v4);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v21 = qword_1011B7D40;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    v24 = URL.absoluteString.getter();
    v26 = v25;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_10001AA00();
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Deleted change token -- URL: %@", 31, 2, v23);
    swift_bridgeObjectRelease(v23);
  }
}

uint64_t sub_100BCD74C(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  id v35;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v32 = qword_1011B7D40;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  v34 = a1;
  v35 = objc_msgSend(a1, "scope");
  type metadata accessor for Scope(0);
  v12 = String.init<A>(describing:)(&v35, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  v16 = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  if (!a2)
  {
    v25 = (uint64_t *)(v10 + 72);
    *(_QWORD *)(v10 + 96) = &type metadata for String;
    *(_QWORD *)(v10 + 104) = v15;
LABEL_8:
    v26 = v34;
    v27 = v33;
    v28 = v32;
    *v25 = 7104878;
    v24 = 0xE300000000000000;
    goto LABEL_9;
  }
  v30 = v5;
  v31 = v4;
  v17 = a2;
  v18 = objc_msgSend(a2, "data");
  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = Data.hexString.getter(v19, v21);
  v24 = v23;
  sub_10001BC14(v19, v21);
  v25 = (uint64_t *)(v10 + 72);
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v16;
  if (!v24)
  {
    a2 = v17;
    v5 = v30;
    v4 = v31;
    goto LABEL_8;
  }
  *v25 = v22;
  a2 = v17;
  v5 = v30;
  v4 = v31;
  v26 = v34;
  v27 = v33;
  v28 = v32;
LABEL_9:
  *(_QWORD *)(v10 + 80) = v24;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "New database change token -- database: %{public}@, token: %@", 60, 2, v10);
  swift_bridgeObjectRelease(v10);
  sub_100655F48((uint64_t)objc_msgSend(v26, "scope"));
  sub_100BCD2E8((uint64_t)v8, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_100BCD99C(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  id v35;

  v6 = type metadata accessor for URL(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v31 = qword_1011B7D40;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 152, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E221E0;
  v35 = objc_msgSend(a1, "scope");
  type metadata accessor for Scope(0);
  v13 = String.init<A>(describing:)(&v35, v12);
  v30 = a1;
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  v17 = objc_msgSend(a2, "zoneName");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 72) = v18;
  *(_QWORD *)(v11 + 80) = v20;
  v21 = objc_msgSend(a3, "data");
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v25 = Data.hexString.getter(v22, v24);
  v27 = v26;
  sub_10001BC14(v22, v24);
  *(_QWORD *)(v11 + 136) = &type metadata for String;
  *(_QWORD *)(v11 + 144) = v16;
  *(_QWORD *)(v11 + 112) = v25;
  *(_QWORD *)(v11 + 120) = v27;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v31, "New zone change token -- database: %{public}@, zoneName: %{public}@, token: %@", 78, 2, v11);
  swift_bridgeObjectRelease();
  sub_100656124((uint64_t)objc_msgSend(v30, "scope"), a2);
  sub_100BCD2E8((uint64_t)v9, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v9, v34);
}

uint64_t sub_100BCDBD0(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a2 + 16, v10, 33, 0);
  v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 0x10);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_100BCDC68(void *a1, char a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v5 = a2 & 1;
  v6 = qword_1011B7D40;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B10;
  v21 = v5;
  v9 = String.init<A>(describing:)(&v21, &type metadata for CloudKitCoordinator.DatabaseToken);
  v11 = v10;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v8 + 64) = v12;
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v11;
  v13 = objc_msgSend(a1, "data");
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = Data.hexString.getter(v14, v16);
  v19 = v18;
  sub_10001BC14(v14, v16);
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v12;
  *(_QWORD *)(v8 + 72) = v17;
  *(_QWORD *)(v8 + 80) = v19;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "change token updated -- database: %{public}@, token: %@", 55, 2, v8);
  return swift_bridgeObjectRelease(v8);
}

void sub_100BCDDD0(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_100BCDE20(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, void (*a7)(uint64_t, uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  void *v29;
  id v30;
  unsigned int v31;
  NSString v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t Strong;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  id v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  os_log_type_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  Swift::Int v75;
  os_log_type_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  Swift::Int v96;
  os_log_type_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  uint64_t v107;
  char v108;
  uint64_t **v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  os_log_type_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  Swift::Int v135;
  os_log_type_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  id v143;
  unint64_t v144;
  unint64_t v145;
  void *v146;
  void *v147;
  unsigned int v149;
  id v153;
  uint64_t v155[4];
  uint64_t v156;
  _BYTE v157[16];
  uint64_t v158[3];
  _BYTE v159[24];
  _BYTE v160[24];
  _BYTE v161[24];
  uint64_t v162;
  _BYTE v163[24];

  v11 = a4 & 1;
  v12 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v13 = qword_1011B7D40;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  v149 = v11;
  LOBYTE(v155[0]) = v11;
  v16 = String.init<A>(describing:)(v155, &type metadata for CloudKitCoordinator.DatabaseToken);
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  v20 = v19;
  *(_QWORD *)(v15 + 64) = v19;
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  v146 = a1;
  if (a1)
  {
    v21 = objc_msgSend(a1, "data");
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v25 = Data.hexString.getter(v22, v24);
    v27 = v26;
    sub_10001BC14(v22, v24);
    v28 = (uint64_t *)(v15 + 72);
    *(_QWORD *)(v15 + 96) = &type metadata for String;
    *(_QWORD *)(v15 + 104) = v20;
    if (v27)
    {
      *v28 = v25;
      goto LABEL_8;
    }
  }
  else
  {
    v28 = (uint64_t *)(v15 + 72);
    *(_QWORD *)(v15 + 96) = &type metadata for String;
    *(_QWORD *)(v15 + 104) = v19;
  }
  *v28 = 7104878;
  v27 = 0xE300000000000000;
LABEL_8:
  *(_QWORD *)(v15 + 80) = v27;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Fetch database changes complete -- database: %{public}@, token: %@", 66, 2, v15, v146);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v29 = (void *)qword_1011B7C08;
  v30 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v31 = objc_msgSend(v30, "isInternalBuild");

  if (!v31)
  {
    if (!a3)
      goto LABEL_22;
LABEL_17:
    v36 = swift_errorRetain(a3);
    v37 = static os_log_type_t.default.getter(v36);
    v38 = qword_1011B7D40;
    v39 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
    v155[0] = a3;
    swift_errorRetain(a3);
    v40 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v41 = String.init<A>(describing:)(v155, v40);
    *(_QWORD *)(v39 + 56) = &type metadata for String;
    *(_QWORD *)(v39 + 64) = v20;
    *(_QWORD *)(v39 + 32) = v41;
    *(_QWORD *)(v39 + 40) = v42;
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Error during fetch database changes operation: %{public}@", 57, 2, v39);
    swift_bridgeObjectRelease();
    v155[0] = a3;
    swift_errorRetain(a3);
    type metadata accessor for CKError(0);
    v44 = v43;
    v45 = swift_dynamicCast(&v162, v155, v40, v43, 6);
    if ((v45 & 1) != 0)
    {
      v46 = (void *)v162;
      v47 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
      _BridgedStoredNSError.code.getter(v155, v44, v47);
      if (v155[0] == 21)
      {
        sub_100BCD74C(a6, 0);
        Strong = swift_unknownObjectWeakLoadStrong(a5 + 16);
        if (Strong)
        {
          v49 = Strong;
          sub_100086328(a5, 1);
          swift_unknownObjectRelease(v49);
        }
        sub_100BCC634(a6, v149, 1, a7, a8);

        v50 = a3;
LABEL_33:
        swift_errorRelease(v50);
        return;
      }

    }
    v65 = static os_log_type_t.info.getter(v45);
    v66 = qword_1011B7D40;
    v67 = v65;
    if (os_log_type_enabled((os_log_t)qword_1011B7D40, v65))
    {
      swift_retain_n(a5, 2);
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = swift_slowAlloc(32, -1);
      v155[0] = v69;
      *(_DWORD *)v68 = 136315138;
      v70 = objc_msgSend(*(id *)(a5 + 280), "debugDescription");
      v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v73 = v72;

      v162 = sub_100016940(v71, v73, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v68 + 4, v68 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, ">>> fetchDatabaseChanges (error) exclusiveAccessSemaphore.signal() %s", v68, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);
    }
    v74 = *(void **)(a5 + 280);
    v75 = OS_dispatch_semaphore.signal()();
    v76 = static os_log_type_t.info.getter(v75);
    v77 = qword_1011B7D40;
    v78 = v76;
    if (os_log_type_enabled((os_log_t)qword_1011B7D40, v76))
    {
      swift_retain_n(a5, 2);
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v155[0] = v80;
      *(_DWORD *)v79 = 136315138;
      v81 = objc_msgSend(v74, "debugDescription");
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      v162 = sub_100016940(v82, v84, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v79 + 4, v79 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "<<< fetchDatabaseChanges (error) exclusiveAccessSemaphore.signal() %s", v79, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v79, -1, -1);
    }
    swift_errorRetain(a3);
    a7(a3, 1);
    swift_errorRelease(a3);
    v50 = a3;
    goto LABEL_33;
  }
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v29, "BOOLForKey:", v32);

  if (a3)
    goto LABEL_17;
  if ((v33 & 1) != 0)
  {
    v155[3] = (uint64_t)&type metadata for Bool;
    LOBYTE(v155[0]) = 0;
    sub_100ACDE84((uint64_t)v155, 0xD00000000000001ALL, 0x8000000100EF1F00, (void *)qword_1011B7C08);
    sub_100004048((uint64_t)v155, (uint64_t *)&unk_1010F6390);
    sub_100BCD74C(a6, 0);
    v34 = swift_unknownObjectWeakLoadStrong(a5 + 16);
    if (v34)
    {
      v35 = v34;
      sub_100086328(a5, 1);
      swift_unknownObjectRelease(v35);
    }
    sub_100BCC634(a6, v149, 1, a7, a8);
    return;
  }
LABEL_22:
  v51 = swift_unknownObjectWeakLoadStrong(a5 + 16);
  if (!v51)
  {
    v85 = static os_log_type_t.error.getter(0);
    v86 = qword_1011B7D40;
    v87 = os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, qword_1011B7D40, "Delegate does not define a zone!", 32, 2, _swiftEmptyArrayStorage);
    v88 = static os_log_type_t.info.getter(v87);
    if (os_log_type_enabled(v86, v88))
    {
      swift_retain_n(a5, 2);
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = swift_slowAlloc(32, -1);
      *(_DWORD *)v89 = 136315138;
      v155[0] = v90;
      v91 = objc_msgSend(*(id *)(a5 + 280), "debugDescription");
      v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      v94 = v93;

      v162 = sub_100016940(v92, v94, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v89 + 4, v89 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v86, v88, ">>> fetchDatabaseChanges (NoZone) exclusiveAccessSemaphore.signal() %s", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);
    }
    v95 = *(void **)(a5 + 280);
    v96 = OS_dispatch_semaphore.signal()();
    v97 = static os_log_type_t.info.getter(v96);
    v98 = qword_1011B7D40;
    v99 = v97;
    if (os_log_type_enabled((os_log_t)qword_1011B7D40, v97))
    {
      swift_retain_n(a5, 2);
      v100 = (uint8_t *)swift_slowAlloc(12, -1);
      v101 = swift_slowAlloc(32, -1);
      v155[0] = v101;
      *(_DWORD *)v100 = 136315138;
      v102 = objc_msgSend(v95, "debugDescription");
      v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v102);
      v105 = v104;

      v162 = sub_100016940(v103, v105, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163, v100 + 4, v100 + 12);
      swift_release_n(a5, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "<<< fetchDatabaseChanges (NoZone) exclusiveAccessSemaphore.signal() %s", v100, 0xCu);
      swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v101, -1, -1);
      swift_slowDealloc(v100, -1, -1);
    }
    v106 = objc_msgSend(objc_allocWithZone((Class)NSError), "init");
    a7((uint64_t)v106, 1);

    return;
  }
  v52 = v51;
  v53 = (uint64_t *)(a10 + 16);
  v54 = *(id *)(v51 + 152);
  swift_unknownObjectRelease(v52);
  swift_beginAccess(a9 + 16, v155, 0, 0);
  v55 = *(_QWORD *)(a9 + 16);
  swift_bridgeObjectRetain(v55);
  v56 = sub_1001C451C((uint64_t)v54, v55);
  swift_bridgeObjectRelease();
  if ((v56 & 1) != 0)
  {
    v57 = swift_unknownObjectWeakLoadStrong(a5 + 16);
    v58 = v149;
    if (v57)
    {
      v59 = v57;
      sub_100086328(a5, 1);
      swift_unknownObjectRelease(v59);
    }
    v60 = *(_QWORD *)(a5 + 80);
    *(_QWORD *)(a5 + 80) = 0;
    sub_100BD3364(v60);
    v61 = *(_QWORD *)(a5 + 80);
    sub_100BD3374(v61);
    sub_100BD2AE8(v61);
    v62 = sub_100BD3364(v61);
    v63 = static os_log_type_t.default.getter(v62);
    v64 = 2;
    os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, qword_1011B7D40, "Setting zoneState to .unknown", 29, 2, _swiftEmptyArrayStorage);
    goto LABEL_41;
  }
  swift_beginAccess(v53, &v162, 0, 0);
  v107 = *v53;
  swift_bridgeObjectRetain(*v53);
  v108 = sub_1001C451C((uint64_t)v54, v107);
  swift_bridgeObjectRelease();
  v58 = v149;
  if ((v108 & 1) == 0)
  {
    v64 = 3;
LABEL_41:
    sub_100BC66B8(v64);
  }
  v109 = sub_100BD3734();
  v110 = (void *)sub_100CA9330((uint64_t)v109);
  swift_bridgeObjectRelease();
  swift_beginAccess(v53, v161, 0, 0);
  swift_bridgeObjectRetain(*v53);
  v112 = sub_100CA9330(v111);
  swift_bridgeObjectRelease();
  sub_100BBD4D4(v112, v110, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr, &qword_1010FE6A0, (void (*)(id *, id))sub_100A135EC);
  v114 = sub_100509A3C(v113);
  swift_bridgeObjectRelease();
  swift_beginAccess(v53, v160, 1, 0);
  *v53 = (uint64_t)v114;
  swift_bridgeObjectRelease();
  swift_beginAccess(v53, v159, 0, 0);
  v115 = *v53;
  if ((unint64_t)*v53 >> 62)
  {
    if (v115 < 0)
      v122 = *v53;
    else
      v122 = v115 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v53);
    v123 = _CocoaArrayWrapper.endIndex.getter(v122);
    swift_bridgeObjectRelease();
    if (v123)
      goto LABEL_44;
  }
  else if (*(_QWORD *)((v115 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_44:
    v116 = *(_QWORD *)(a5 + 80);
    *(_QWORD *)(a5 + 80) = 2;
    sub_100BD3364(v116);
    v117 = *(_QWORD *)(a5 + 80);
    sub_100BD3374(v117);
    sub_100BD2AE8(v117);
    sub_100BD3364(v117);
    swift_beginAccess(v53, v158, 0, 0);
    swift_bridgeObjectRetain(*v53);
    sub_100BD3918(v118);
    swift_beginAccess(v53, &v156, 0, 0);
    v119 = *v53;
    v120 = (_QWORD *)swift_allocObject(&unk_1010B1F20, 56, 7);
    v120[2] = a5;
    v120[3] = a6;
    v120[4] = v147;
    v120[5] = a7;
    v120[6] = a8;
    v121 = v147;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v119);
    sub_100BCF0CC(a6, v58, v119, (Swift::Int)sub_100BD3C84, v120);
    swift_bridgeObjectRelease();
    swift_release(v120);

    return;
  }
  v124 = sub_100BCD74C(a6, v147);
  v125 = static os_log_type_t.info.getter(v124);
  v126 = qword_1011B7D40;
  v127 = v125;
  if (os_log_type_enabled((os_log_t)qword_1011B7D40, v125))
  {
    swift_retain_n(a5, 2);
    v128 = (uint8_t *)swift_slowAlloc(12, -1);
    v129 = swift_slowAlloc(32, -1);
    *(_DWORD *)v128 = 136315138;
    v158[0] = v129;
    v130 = objc_msgSend(*(id *)(a5 + 280), "debugDescription");
    v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
    v153 = v54;
    v133 = v132;

    v156 = sub_100016940(v131, v133, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v128 + 4, v128 + 12);
    swift_release_n(a5, 2);
    v54 = v153;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v126, v127, ">>> fetchDatabaseChanges (no zone fetch needed) exclusiveAccessSemaphore.signal() %s", v128, 0xCu);
    swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v129, -1, -1);
    swift_slowDealloc(v128, -1, -1);
  }
  v134 = *(void **)(a5 + 280);
  v135 = OS_dispatch_semaphore.signal()();
  v136 = static os_log_type_t.info.getter(v135);
  v137 = qword_1011B7D40;
  v138 = v136;
  if (os_log_type_enabled((os_log_t)qword_1011B7D40, v136))
  {
    swift_retain_n(a5, 2);
    v139 = (uint8_t *)swift_slowAlloc(12, -1);
    v140 = swift_slowAlloc(32, -1);
    v158[0] = v140;
    *(_DWORD *)v139 = 136315138;
    v141 = objc_msgSend(v134, "debugDescription");
    v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v141);
    v143 = v54;
    v145 = v144;

    v156 = sub_100016940(v142, v145, v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v139 + 4, v139 + 12);
    swift_release_n(a5, 2);
    v54 = v143;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v137, v138, "<<< fetchDatabaseChanges (no zone fetch needed) exclusiveAccessSemaphore.signal() %s", v139, 0xCu);
    swift_arrayDestroy(v140, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v140, -1, -1);
    swift_slowDealloc(v139, -1, -1);
  }
  a7(0, 0);

}

uint64_t sub_100BCEDD0(uint64_t a1, void *a2, void *a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  Swift::Int v15;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v27;
  uint64_t v28;

  v5 = sub_100BCD74C(a2, a3);
  v6 = static os_log_type_t.info.getter(v5);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v7 = qword_1011B7D40;
  if (os_log_type_enabled((os_log_t)qword_1011B7D40, v6))
  {
    swift_retain_n(a1, 2);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v28 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(*(id *)(a1 + 280), "debugDescription");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v27 = sub_100016940(v11, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v8 + 4, v8 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v6, ">>> fetchDatabaseChanges (zone fetch complete) exclusiveAccessSemaphore.signal() %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  v14 = *(void **)(a1 + 280);
  v15 = OS_dispatch_semaphore.signal()();
  v16 = static os_log_type_t.info.getter(v15);
  v17 = qword_1011B7D40;
  v18 = v16;
  if (os_log_type_enabled((os_log_t)qword_1011B7D40, v16))
  {
    swift_retain_n(a1, 2);
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v28 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = objc_msgSend(v14, "debugDescription");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v27 = sub_100016940(v22, v24, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4, v19 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "<<< fetchDatabaseChanges (zone fetch complete) exclusiveAccessSemaphore.signal() %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  return a4(0, 0);
}

id sub_100BCF0CC(void *a1, char a2, uint64_t a3, Swift::Int a4, void *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  id result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  CKFetchRecordZoneChangesOperation v78;
  void *v79;
  void *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t RecordZoneChangesCompletion;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  objc_class *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[4];
  int v97;
  Swift::Int v98;
  void *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE *v104;
  unsigned int v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t v108;
  id v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  Swift::Int v117;
  Swift::OpaquePointer_optional v118;
  Swift::OpaquePointer_optional v119;

  LOBYTE(v9) = a2;
  v114 = a1;
  v10 = type metadata accessor for URL(0);
  v112 = *(_QWORD *)(v10 - 8);
  v113 = v10;
  v11 = __chkstk_darwin(v10);
  v104 = &v96[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (id)static os_log_type_t.default.getter(v11);
  if (qword_1010EA260 != -1)
LABEL_35:
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v14 = qword_1011B7D40;
  v115 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v115, 72, 7);
  v102 = xmmword_100E22B00;
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 56) = sub_10001A9A8(&qword_101117C68);
  *(_QWORD *)(v15 + 64) = sub_1000193A4(&qword_101117C70, &qword_101117C68, (const char *)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)&v16 = swift_bridgeObjectRetain(a3).n128_u64[0];
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "zoneIDs changed: %{public}@", 27, 2, v15, v16);
  result = (id)swift_bridgeObjectRelease();
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v95 = a3;
    else
      v95 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v18 = _CocoaArrayWrapper.endIndex.getter(v95);
    result = (id)swift_bridgeObjectRelease();
    v19 = (uint64_t)v104;
    if (!v18)
      return result;
  }
  else
  {
    v18 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v19 = (uint64_t)v104;
    if (!v18)
      return result;
  }
  result = (id)objc_opt_self(FMSystemInfo);
  v108 = v18 - 1;
  v109 = result;
  if (v18 < 1)
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v98 = a4;
  v99 = a5;
  v97 = v9 & 1;
  v100 = v5;
  v20 = *(_QWORD *)(v5 + 272);
  v110 = a3 & 0xC000000000000001;
  v111 = v20;
  swift_bridgeObjectRetain(a3);
  v21 = 0;
  a4 = (Swift::Int)&_swiftEmptyDictionarySingleton;
  v101 = xmmword_100E22B10;
  v103 = a3;
  while (1)
  {
    v26 = v110 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, a3) : *(id *)(a3 + 8 * v21 + 32);
    a5 = v26;
    v13 = objc_msgSend(objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration), "init");
    sub_100656124((uint64_t)objc_msgSend(v114, "scope"), a5);
    v27 = (void *)sub_100656674(v19);
    v9 = sub_100656674(v19);
    objc_msgSend(v13, "setPreviousServerChangeToken:", v9);

    if ((a4 & 0xC000000000000001) != 0)
    {
      if (a4 < 0)
        v5 = a4;
      else
        v5 = a4 & 0xFFFFFFFFFFFFFF8;
      v28 = a5;
      v29 = v13;
      v30 = __CocoaDictionary.count.getter(v5);
      if (__OFADD__(v30, 1))
      {
        __break(1u);
        goto LABEL_35;
      }
      a4 = sub_100BD1A4C(v5, v30 + 1);
    }
    else
    {
      v31 = a5;
      v32 = v13;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a4);
    v117 = a4;
    sub_10010EBB4((uint64_t)v13, a5, isUniquelyReferenced_nonNull_native);
    a4 = v117;

    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v109, "sharedInstance");
    v35 = objc_msgSend(v34, "isInternalBuild");

    v116 = v21;
    if (!v35)
      break;
    v107 = a4;
    v105 = static os_log_type_t.default.getter(v36);
    v106 = qword_1011B7D40;
    v37 = swift_allocObject(v115, 112, 7);
    *(_OWORD *)(v37 + 16) = v101;
    v38 = objc_msgSend(a5, "zoneName");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    *(_QWORD *)(v37 + 56) = &type metadata for String;
    v42 = sub_10001AA00();
    v43 = v42;
    *(_QWORD *)(v37 + 64) = v42;
    *(_QWORD *)(v37 + 32) = v39;
    *(_QWORD *)(v37 + 40) = v41;
    if (!v27)
    {
      v22 = (uint64_t *)(v37 + 72);
      *(_QWORD *)(v37 + 96) = &type metadata for String;
      *(_QWORD *)(v37 + 104) = v42;
LABEL_7:
      v23 = v116;
      *v22 = 7104878;
      v24 = 0xE300000000000000;
      goto LABEL_8;
    }
    v44 = objc_msgSend(v27, "data");
    v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    v48 = Data.hexString.getter(v45, v47);
    v24 = v49;
    sub_10001BC14(v45, v47);
    v22 = (uint64_t *)(v37 + 72);
    *(_QWORD *)(v37 + 96) = &type metadata for String;
    *(_QWORD *)(v37 + 104) = v43;
    if (!v24)
    {
      v19 = (uint64_t)v104;
      goto LABEL_7;
    }
    *v22 = v48;
    v19 = (uint64_t)v104;
    v23 = v116;
LABEL_8:
    v25 = v106;
    a4 = v107;
    *(_QWORD *)(v37 + 80) = v24;
    os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, v25, "Old zone change token for %{public}@: %@", 40, 2, v37);

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v19, v113);
    a3 = v103;
    if (v108 == v23)
      goto LABEL_30;
LABEL_9:
    v21 = v23 + 1;
  }
  if (v27)
  {
    v50 = objc_msgSend(v27, "data");
    v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v53 = v52;

    v54 = sub_10001BC14(v51, v53);
    v55 = static os_log_type_t.default.getter(v54);
    v56 = qword_1011B7D40;
    v57 = swift_allocObject(v115, 72, 7);
    *(_OWORD *)(v57 + 16) = v102;
    v58 = objc_msgSend(a5, "zoneName");
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v61 = v60;

    *(_QWORD *)(v57 + 56) = &type metadata for String;
    *(_QWORD *)(v57 + 64) = sub_10001AA00();
    *(_QWORD *)(v57 + 32) = v59;
    *(_QWORD *)(v57 + 40) = v61;
    a3 = v103;
    os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Old zone change token for %{public}@: non-nil", 45, 2, v57);

  }
  else
  {
    v62 = static os_log_type_t.default.getter(v36);
    v63 = qword_1011B7D40;
    v64 = swift_allocObject(v115, 72, 7);
    *(_OWORD *)(v64 + 16) = v102;
    v65 = objc_msgSend(a5, "zoneName");
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

    *(_QWORD *)(v64 + 56) = &type metadata for String;
    *(_QWORD *)(v64 + 64) = sub_10001AA00();
    *(_QWORD *)(v64 + 32) = v66;
    *(_QWORD *)(v64 + 40) = v68;
    os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "Old zone change token for %{public}@: nil", 41, 2, v64);

  }
  swift_bridgeObjectRelease();
  v19 = (uint64_t)v104;
  (*(void (**)(_BYTE *, uint64_t))(v112 + 8))(v104, v113);
  v23 = v116;
  if (v108 != v116)
    goto LABEL_9;
LABEL_30:
  v69 = swift_bridgeObjectRelease();
  v70 = static os_log_type_t.default.getter(v69);
  v71 = qword_1011B7D40;
  v72 = swift_allocObject(v115, 72, 7);
  *(_OWORD *)(v72 + 16) = v102;
  *(_QWORD *)(v72 + 56) = sub_10001A9A8(&qword_101117C78);
  *(_QWORD *)(v72 + 64) = sub_1000193A4(&qword_101117C80, &qword_101117C78, (const char *)&protocol conformance descriptor for [A : B]);
  *(_QWORD *)(v72 + 32) = a4;
  *(_QWORD *)&v73 = swift_bridgeObjectRetain(a4).n128_u64[0];
  os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "optionsByRecordZoneID: %@", 25, 2, v72, v73);
  swift_bridgeObjectRelease();
  v74 = swift_allocObject(&unk_1010B1F48, 24, 7);
  *(_QWORD *)(v74 + 16) = _swiftEmptyArrayStorage;
  v75 = swift_allocObject(&unk_1010B1F70, 24, 7);
  *(_QWORD *)(v75 + 16) = _swiftEmptyArrayStorage;
  v76 = (void *)a3;
  v77 = sub_10000F4A0(0, &qword_101117C88, CKFetchRecordZoneChangesOperation_ptr);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(a4);
  v118.value._rawValue = v76;
  v118.is_nil = a4;
  v78.super.super.super.super.isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v118, v119).super.super.super.super.isa;
  result = -[objc_class configuration](v78.super.super.super.super.isa, "configuration");
  if (!result)
    goto LABEL_42;
  v79 = result;
  objc_msgSend(result, "setAutomaticallyRetryNetworkFailures:", 0);

  result = -[objc_class configuration](v78.super.super.super.super.isa, "configuration");
  if (result)
  {
    v80 = result;
    objc_msgSend(result, "setDiscretionaryNetworkBehavior:", 0);

    -[objc_class setFetchAllChanges:](v78.super.super.super.super.isa, "setFetchAllChanges:", 1);
    swift_retain();
    CKFetchRecordZoneChangesOperation.undeprecated_recordChangedBlock.setter(sub_100BD3CB4, v75);
    swift_retain();
    CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_100BD3CBC, v74);
    v81 = swift_allocObject(&unk_1010B1F98, 56, 7);
    v82 = v97;
    *(_BYTE *)(v81 + 16) = v97;
    *(_QWORD *)(v81 + 24) = v75;
    *(_QWORD *)(v81 + 32) = v74;
    v83 = v100;
    v84 = v114;
    *(_QWORD *)(v81 + 40) = v100;
    *(_QWORD *)(v81 + 48) = v84;
    swift_retain();
    swift_retain();
    swift_retain();
    v85 = v84;
    CKFetchRecordZoneChangesOperation.undeprecated_recordZoneFetchCompletionBlock.setter(sub_100BD3D00, v81);
    v86 = swift_allocObject(&unk_1010B1FC0, 56, 7);
    *(_BYTE *)(v86 + 16) = v82;
    v87 = v103;
    *(_QWORD *)(v86 + 24) = v103;
    *(_QWORD *)(v86 + 32) = v83;
    v88 = v99;
    *(_QWORD *)(v86 + 40) = v98;
    *(_QWORD *)(v86 + 48) = v88;
    swift_bridgeObjectRetain(v87);
    swift_retain();
    swift_retain();
    RecordZoneChangesCompletion = CKFetchRecordZoneChangesOperation.undeprecated_fetchRecordZoneChangesCompletionBlock.setter(sub_100BD3D68, v86);
    v90 = static os_log_type_t.default.getter(RecordZoneChangesCompletion);
    v91 = qword_1011B7D40;
    v92 = swift_allocObject(v115, 72, 7);
    *(_OWORD *)(v92 + 16) = v102;
    *(_QWORD *)(v92 + 56) = v77;
    *(_QWORD *)(v92 + 64) = sub_10001AC90(&qword_101117C90, &qword_101117C88, CKFetchRecordZoneChangesOperation_ptr, (const char *)&protocol conformance descriptor for NSObject);
    *(CKFetchRecordZoneChangesOperation *)(v92 + 32) = v78;
    v93 = v78.super.super.super.super.isa;
    os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Adding CloudKit operation %@", 28, 2, v92);
    v94 = swift_bridgeObjectRelease();
    __chkstk_darwin(v94);
    *(_QWORD *)&v96[-16] = v85;
    *(_QWORD *)&v96[-8] = v93;
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD3D78);

    swift_release(v74);
    swift_release(v75);
    return (id)swift_bridgeObjectRelease();
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100BCFAF0(void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v3 = (_QWORD *)(a2 + 16);
  v4 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v5 = qword_1011B7D40;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v8 = objc_msgSend(a1, "debugDescription");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Record changed: %{public}@", 26, 2, v7);
  swift_bridgeObjectRelease(v7);
  swift_beginAccess(v3, v17, 33, 0);
  v12 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
  v14 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v14 >= v13 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
  v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
  specialized Array._endMutation()(v15);
  return swift_endAccess(v17);
}

uint64_t sub_100BCFC68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _BYTE v20[24];

  v7 = (_QWORD **)(a4 + 16);
  v8 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v9 = qword_1011B7D40;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v11 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
  *(_QWORD *)(v11 + 64) = sub_10001AC90(&qword_101117CC0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v11 + 32) = a1;
  v12 = a1;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Record deleted: %@", 18, 2, v11);
  swift_bridgeObjectRelease(v11);
  swift_beginAccess(v7, v20, 33, 0);
  v13 = *v7;
  v14 = v12;
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
  *v7 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_1007CA9A8(0, v13[2] + 1, 1, v13);
    *v7 = v13;
  }
  v17 = v13[2];
  v16 = v13[3];
  if (v17 >= v16 >> 1)
  {
    v13 = sub_1007CA9A8((_QWORD *)(v16 > 1), v17 + 1, 1, v13);
    *v7 = v13;
  }
  v13[2] = v17 + 1;
  v18 = &v13[3 * v17];
  v18[4] = v14;
  v18[5] = a2;
  v18[6] = a3;
  return swift_endAccess(v20);
}

void sub_100BCFE44(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t Strong;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  unsigned int v44;
  NSString v45;
  unsigned __int8 v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  _OWORD v74[2];
  _QWORD v75[3];
  _BYTE v76[8];
  _BYTE v77[24];
  _BYTE v78[24];
  _QWORD v79[3];
  _BYTE v80[24];
  _BYTE v81[32];

  v15 = a7 & 1;
  v71 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v72 = qword_1011B7D40;
  v73 = (uint64_t *)(a8 + 16);
  v69 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v69, 272, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E26E10;
  v70 = v15;
  LOBYTE(v74[0]) = v15;
  v17 = String.init<A>(describing:)(v74, &type metadata for CloudKitCoordinator.DatabaseToken);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v16 + 64) = v20;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  v68 = a1;
  v21 = objc_msgSend(a1, "zoneName");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v20;
  *(_QWORD *)(v16 + 72) = v22;
  *(_QWORD *)(v16 + 80) = v24;
  if (a2)
  {
    v25 = objc_msgSend(a2, "data");
    v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    v29 = Data.hexString.getter(v26, v28);
    v31 = v30;
    sub_10001BC14(v26, v28);
    v32 = (uint64_t *)(v16 + 112);
    *(_QWORD *)(v16 + 136) = &type metadata for String;
    *(_QWORD *)(v16 + 144) = v20;
    if (v31)
    {
      *v32 = v29;
      v33 = v71;
      goto LABEL_8;
    }
  }
  else
  {
    v32 = (uint64_t *)(v16 + 112);
    *(_QWORD *)(v16 + 136) = &type metadata for String;
    *(_QWORD *)(v16 + 144) = v20;
  }
  v33 = v71;
  *v32 = 7104878;
  v31 = 0xE300000000000000;
LABEL_8:
  v34 = (_QWORD *)(a9 + 16);
  *(_QWORD *)(v16 + 120) = v31;
  swift_beginAccess(v73, v81, 0, 0);
  v35 = *v73;
  if ((unint64_t)*v73 >> 62)
  {
    if (v35 < 0)
      v67 = *v73;
    else
      v67 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v35);
    v36 = _CocoaArrayWrapper.endIndex.getter(v67);
    swift_bridgeObjectRelease();
  }
  else
  {
    v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v16 + 176) = &type metadata for Int;
  *(_QWORD *)(v16 + 184) = &protocol witness table for Int;
  *(_QWORD *)(v16 + 152) = v36;
  swift_beginAccess(v34, v80, 0, 0);
  v37 = *(_QWORD *)(*v34 + 16);
  *(_QWORD *)(v16 + 216) = &type metadata for Int;
  *(_QWORD *)(v16 + 224) = &protocol witness table for Int;
  *(_QWORD *)(v16 + 192) = v37;
  v38 = a10 + 16;
  Strong = swift_unknownObjectWeakLoadStrong(a10 + 16);
  v40 = Strong;
  if (Strong)
    swift_unknownObjectRelease(Strong);
  *(_QWORD *)(v16 + 256) = &type metadata for Bool;
  *(_QWORD *)(v16 + 264) = &protocol witness table for Bool;
  *(_BYTE *)(v16 + 232) = v40 != 0;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v72, "record zone fetch complete -- database: %{public}@, zone: %{public}@, token: %@, records changed: %d, records deleted: %d, inform delegate: %i", 142, 2, v16);
  swift_bridgeObjectRelease();
  v41 = (void *)objc_opt_self(NSUserDefaults);
  v42 = objc_msgSend(v41, "standardUserDefaults");
  v43 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v44 = objc_msgSend(v43, "isInternalBuild");

  if (v44)
  {
    v45 = String._bridgeToObjectiveC()();
    v46 = objc_msgSend(v42, "BOOLForKey:", v45);

    if ((v46 & 1) != 0)
    {
      v47 = objc_msgSend(v41, "standardUserDefaults");
      memset(v74, 0, sizeof(v74));
      sub_100ACDE84((uint64_t)v74, 0xD000000000000018, 0x8000000100EF2270, v47);

      sub_100004048((uint64_t)v74, (uint64_t *)&unk_1010F6390);
      type metadata accessor for CKError(0);
      v49 = v48;
      v79[0] = 6;
      v50 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v51 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
      _BridgedStoredNSError.init(_:userInfo:)(v74, v79, v50, v49, v51);
      a6 = *(_QWORD *)&v74[0];
LABEL_18:
      v52 = swift_errorRetain(a6);
      v53 = static os_log_type_t.error.getter(v52);
      v54 = qword_1011B7D40;
      v55 = swift_allocObject(v69, 112, 7);
      *(_OWORD *)(v55 + 16) = xmmword_100E22B10;
      LOBYTE(v74[0]) = v70;
      v56 = String.init<A>(describing:)(v74, &type metadata for CloudKitCoordinator.DatabaseToken);
      *(_QWORD *)(v55 + 56) = &type metadata for String;
      *(_QWORD *)(v55 + 64) = v20;
      *(_QWORD *)(v55 + 32) = v56;
      *(_QWORD *)(v55 + 40) = v57;
      swift_getErrorValue(a6, v76, v75);
      v58 = Error.localizedDescription.getter(v75[1], v75[2]);
      *(_QWORD *)(v55 + 96) = &type metadata for String;
      *(_QWORD *)(v55 + 104) = v20;
      *(_QWORD *)(v55 + 72) = v58;
      *(_QWORD *)(v55 + 80) = v59;
      os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "Error fetching zone changes for %@ database: %@", 47, 2, v55);
      swift_bridgeObjectRelease();
      sub_100BC3690(a6);
      swift_errorRelease(a6);
      swift_errorRelease(a6);
      return;
    }
  }
  else
  {

  }
  if (a6)
  {
    swift_errorRetain(a6);
    goto LABEL_18;
  }
  v60 = swift_unknownObjectWeakLoadStrong(v38);
  if (v60)
  {
    v61 = v60;
    swift_beginAccess(v73, v74, 0, 0);
    swift_bridgeObjectRetain(*v73);
    sub_100088148(v62);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v61);
  }
  v63 = swift_unknownObjectWeakLoadStrong(v38);
  if (v63)
  {
    v64 = v63;
    swift_beginAccess(v34, v79, 0, 0);
    swift_bridgeObjectRetain(*v34);
    sub_100087A50(v65);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v64);
  }
  swift_beginAccess(v73, v78, 1, 0);
  *v73 = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_beginAccess(v34, v77, 1, 0);
  *v34 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (a2)
  {
    v66 = a2;
    sub_100BD3DA8(v68);
    sub_100BCD99C(a11, v68, v66);

  }
}

uint64_t sub_100BD0468(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v28[3];
  _BYTE v29[15];
  char v30;

  v7 = a2 & 1;
  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v9 = qword_1011B7D40;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  v30 = v7;
  v12 = String.init<A>(describing:)(&v30, &type metadata for CloudKitCoordinator.DatabaseToken);
  v14 = v13;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v11 + 64) = v15;
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v14;
  *(_QWORD *)(v11 + 96) = sub_10001A9A8(&qword_101117C68);
  *(_QWORD *)(v11 + 104) = sub_1000193A4(&qword_101117C70, &qword_101117C68, (const char *)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v11 + 72) = a3;
  *(_QWORD *)&v16 = swift_bridgeObjectRetain(a3).n128_u64[0];
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Fetch record zone changes complete -- database: %{public}@, zoneIds: %{public}@", 79, 2, v11, v16);
  v17 = swift_bridgeObjectRelease();
  if (a1)
  {
    v18 = swift_errorRetain(a1);
    v19 = static os_log_type_t.error.getter(v18);
    v20 = qword_1011B7D40;
    v21 = swift_allocObject(v10, 112, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B10;
    v30 = v7;
    v22 = String.init<A>(describing:)(&v30, &type metadata for CloudKitCoordinator.DatabaseToken);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = v15;
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 40) = v23;
    swift_getErrorValue(a1, v29, v28);
    v24 = Error.localizedDescription.getter(v28[1], v28[2]);
    *(_QWORD *)(v21 + 96) = &type metadata for String;
    *(_QWORD *)(v21 + 104) = v15;
    *(_QWORD *)(v21 + 72) = v24;
    *(_QWORD *)(v21 + 80) = v25;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error fetching zone changes for %@ database: %{public}@", 55, 2, v21);
    swift_bridgeObjectRelease();
    sub_100BC3690(a1);
    v17 = swift_errorRelease(a1);
  }
  return a5(v17);
}

void sub_100BD0694(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  swift_retain();
  v3 = sub_100BBF0A8();
  v4 = objc_msgSend(v3, "privateCloudDatabase");

  sub_100BCC634(v4, 0, 0, (uint64_t)sub_100BD4EC4, a2);
  swift_release();

}

void sub_100BD070C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;

  if ((a2 & 1) != 0)
  {
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v6 = qword_1011B7D40;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    v21 = a1;
    swift_errorRetain(a1);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v10 = String.init<A>(describing:)(&v21, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_10001AA00();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Error from fetchChanges: %{public}@", 35, 2, v8);
    swift_bridgeObjectRelease();
    v21 = a1;
    swift_errorRetain(a1);
    type metadata accessor for CKError(0);
    v14 = v13;
    if ((swift_dynamicCast(&v20, &v21, v9, v13, 6) & 1) != 0)
    {
      v15 = v20;
      v16 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
      v17 = _BridgedStoredNSError.code.getter(&v21, v14, v16);
      if ((unint64_t)(v21 - 3) > 1)
      {
        v19 = v15;
        sub_100BC3690((uint64_t)v19);
        sub_10010F948(a1, 1);

      }
      else
      {
        v18 = static os_log_type_t.default.getter(v17);
        os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1011B7D40, "scheduleRetryFetch", 18, 2, _swiftEmptyArrayStorage);
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD41D8);
        sub_10010F948(a1, 1);

      }
    }
    else
    {
      sub_10010F948(a1, 1);
    }
  }
  else
  {
    v2 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D40, "fetchChanges succeeded", 22, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t CKDatabaseScope.debugDescription.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  switch(a1)
  {
    case 1:
      return 0x63696C627570;
    case 3:
      return 0x646572616873;
    case 2:
      return 0x65746176697270;
  }
  v2 = static os_log_type_t.error.getter(a1);
  v3 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v4 = (void *)static OS_os_log.default.getter(v3);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "Unknown CKDatabase.Scope!", 25, 2, _swiftEmptyArrayStorage);

  return 0x6E776F6E6B6E75;
}

uint64_t sub_100BD0AA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *v1;
  if (*v1 == 1)
    return 0x63696C627570;
  if (v2 == 3)
    return 0x646572616873;
  if (v2 == 2)
    return 0x65746176697270;
  v4 = static os_log_type_t.error.getter(a1);
  v5 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v6 = (void *)static OS_os_log.default.getter(v5);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "Unknown CKDatabase.Scope!", 25, 2, _swiftEmptyArrayStorage);

  return 0x6E776F6E6B6E75;
}

uint64_t sub_100BD0B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;

  v9 = type metadata accessor for CloudKitChangeSet(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v26[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v26[-1] - v14;
  sub_10005972C(a3, (uint64_t)&v26[-1] - v14, type metadata accessor for CloudKitChangeSet);
  sub_10005972C((uint64_t)v15, (uint64_t)v13, type metadata accessor for CloudKitChangeSet);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1010B21A0, v19 + 8, v16 | 7);
  sub_1000126EC((uint64_t)v15, v20 + v17, type metadata accessor for CloudKitChangeSet);
  v21 = (uint64_t *)(v20 + v18);
  *v21 = a4;
  v21[1] = a5;
  *(_QWORD *)(v20 + v19) = a2;
  v22 = qword_1010EA1D0;
  swift_retain_n(a5, 2);
  swift_retain_n(a2, 2);
  if (v22 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v26[0] = 0x7365547265646E75;
  v26[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v27, v26, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v27 == 1)
  {
    sub_100BD0DF0((uint64_t)v13, a4, a5);
  }
  else
  {
    v23 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v23);
    *(&v25 - 4) = a2;
    *(&v25 - 3) = (uint64_t)sub_100BD4360;
    *(&v25 - 2) = v20;
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_100BD4EE8, &v25 - 6, (char *)&type metadata for () + 8);
  }
  swift_release();
  sub_1000126B0((uint64_t)v13, type metadata accessor for CloudKitChangeSet);
  swift_release();
  return swift_release();
}

void sub_100BD0DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  CKModifyRecordsOperation v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  uint64_t v31;
  Swift::OpaquePointer_optional v32;
  Swift::OpaquePointer_optional v33;

  v6 = swift_allocObject(&unk_1010B2128, 24, 7);
  *(_QWORD *)(v6 + 16) = _swiftEmptyDictionarySingleton;
  v7 = swift_allocObject(&unk_1010B2150, 24, 7);
  *(_QWORD *)(v7 + 16) = _swiftEmptyDictionarySingleton;
  v8 = sub_10000F4A0(0, &qword_101117BF0, CKModifyRecordsOperation_ptr);
  v9 = type metadata accessor for CloudKitChangeSet(0);
  v10 = *(void **)(a1 + *(int *)(v9 + 20));
  v11 = *(_QWORD *)(a1 + *(int *)(v9 + 24));
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  v13 = sub_100509A58(v12);
  swift_bridgeObjectRelease();
  v32.value._rawValue = v10;
  v32.is_nil = v13;
  v14.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v32, v33).super.super.super.super.isa;
  v15 = objc_msgSend((id)objc_opt_self(NSThread), "currentThread");
  v16 = (uint64_t)objc_msgSend(v15, "qualityOfService");

  if (v16 >= 25)
    -[objc_class setQualityOfService:](v14.super.super.super.super.isa, "setQualityOfService:", 25);
  v17 = -[objc_class configuration](v14.super.super.super.super.isa, "configuration");
  if (!v17)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = v17;
  objc_msgSend(v17, "setAutomaticallyRetryNetworkFailures:", 0);

  v19 = -[objc_class configuration](v14.super.super.super.super.isa, "configuration");
  if (!v19)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v20 = v19;
  objc_msgSend(v19, "setDiscretionaryNetworkBehavior:", 0);

  swift_retain();
  CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_100BD4364, v7);
  swift_retain();
  CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_100BD4390, v6);
  v21 = (_QWORD *)swift_allocObject(&unk_1010B2178, 48, 7);
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = v6;
  v21[5] = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  v22 = CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_100BD43C0, v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v24 = qword_1011B7D40;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v26 = swift_allocObject(v25, 112, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100E22B10;
  v27 = sub_100ADBE14();
  v29 = v28;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_10001AA00();
  *(_QWORD *)(v26 + 32) = v27;
  *(_QWORD *)(v26 + 40) = v29;
  *(_QWORD *)(v26 + 96) = v8;
  *(_QWORD *)(v26 + 104) = sub_10001AC90(&qword_101117BF8, &qword_101117BF0, CKModifyRecordsOperation_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(CKModifyRecordsOperation *)(v26 + 72) = v14;
  v30 = v14.super.super.super.super.isa;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Adding CloudKit operation for changeSet: %{public}@ operation: %@", 65, 2, v26);
  v31 = swift_bridgeObjectRelease();
  __chkstk_darwin(v31);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD4EC8);
  swift_release();
  swift_release();

}

uint64_t sub_100BD1168(void *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t, id, uint64_t))
{
  id v12;
  uint64_t v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];

  swift_beginAccess(a4 + 16, v18, 33, 0);
  v12 = a1;
  v13 = a3 & 1;
  a5(a2, v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a4 + 16));
  v17 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = 0x8000000000000000;
  a6(a2, v13, v12, isUniquelyReferenced_nonNull_native);
  v15 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v17;

  swift_bridgeObjectRelease(v15);
  return swift_endAccess(v18);
}

uint64_t sub_100BD122C(uint64_t a1, char a2, void (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v15;
  _BYTE v16[24];

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(a1, 0, 1);
    return sub_10010F948(a1, 1);
  }
  else
  {
    v9 = a6 + 16;
    swift_beginAccess(a5 + 16, v16, 0, 0);
    v10 = *(_QWORD *)(a5 + 16);
    swift_beginAccess(v9, &v15, 0, 0);
    v11 = *(_QWORD *)(a6 + 16);
    swift_bridgeObjectRetain(v10);
    v12 = swift_bridgeObjectRetain(v11);
    ((void (*)(uint64_t, uint64_t, _QWORD, __n128))a3)(v10, v11, 0, v12);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void sub_100BD130C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100BBF0A8();
  v4 = objc_msgSend(v3, "privateCloudDatabase");

  objc_msgSend(v4, "addOperation:", a2);
}

_QWORD *sub_100BD1378(uint64_t a1)
{
  return sub_100BD1404(a1, &qword_1010ED468);
}

uint64_t type metadata accessor for CloudKitCoordinator()
{
  return objc_opt_self(_TtC12searchpartyd19CloudKitCoordinator);
}

ValueMetadata *type metadata accessor for CloudKitCoordinator.ZoneState()
{
  return &type metadata for CloudKitCoordinator.ZoneState;
}

void sub_100BD13BC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 72);
}

uint64_t sub_100BD13C8()
{
  return sub_1000077D8(40);
}

uint64_t sub_100BD13D4()
{
  return sub_100294580((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100BCA0DC);
}

uint64_t sub_100BD13E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100BCA7D8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32));
}

_QWORD *sub_100BD13F8(uint64_t a1)
{
  return sub_100BD1404(a1, &qword_101117D50);
}

_QWORD *sub_100BD1404(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *result;

  if (a1 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else if (a1)
  {
    v3 = sub_10001A9A8(a2);
    result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v3);
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100BD14A0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (a1)
    {
      v2 = sub_10001A9A8(&qword_1011041F8);
      v3 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
      v3[2] = a1;
    }
    else
    {
      v3 = _swiftEmptyArrayStorage;
    }
    sub_10001A9A8(&qword_1011041F8);
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_100BD1564()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BD1598()
{
  uint64_t v0;

  return sub_100BCABBC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

Swift::Int sub_100BD15AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a2)
  {
    sub_10001A9A8(&qword_101111648);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v31 = v4;
    __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()(v5);
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_10000F4A0(0, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
      do
      {
        v29 = v8;
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v28 = v9;
        v22 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
        v4 = v31;
        v23 = *(_QWORD *)(v31 + 16);
        if (*(_QWORD *)(v31 + 24) <= v23)
        {
          sub_100A862DC(v23 + 1, 1);
          v4 = v31;
        }
        v12 = v29;
        v11 = v30;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v15 = v4 + 64;
        v16 = -1 << *(_BYTE *)(v4 + 32);
        v17 = result & ~v16;
        v18 = v17 >> 6;
        if (((-1 << v17) & ~*(_QWORD *)(v4 + 64 + 8 * (v17 >> 6))) != 0)
        {
          v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v4 + 64 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v24 = 0;
          v25 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v26 = v18 == v25;
            if (v18 == v25)
              v18 = 0;
            v24 |= v26;
            v27 = *(_QWORD *)(v15 + 8 * v18);
          }
          while (v27 == -1);
          v19 = __clz(__rbit64(~v27)) + (v18 << 6);
        }
        *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        v20 = 8 * v19;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v20) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()(v14);
        v9 = v21;
      }
      while (v8);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100BD17FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_10001A9A8((uint64_t *)&unk_101111DF0);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v29 = v4;
    __CocoaDictionary.makeIterator()(a1);
    v5 = __CocoaDictionary.Iterator.next()();
    if (v5)
    {
      v7 = v5;
      v8 = v6;
      v9 = sub_10000F4A0(0, (unint64_t *)&qword_101111D20, NRDevice_ptr);
      do
      {
        v27 = v7;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
        v26 = v8;
        v20 = sub_10000F4A0(0, &qword_101111D28, NRDeviceMonitor_ptr);
        swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
        v4 = v29;
        v21 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v21)
        {
          sub_100A8F954(v21 + 1, 1);
          v4 = v29;
        }
        v11 = v27;
        v10 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v13 = v4 + 64;
        v14 = -1 << *(_BYTE *)(v4 + 32);
        v15 = result & ~v14;
        v16 = v15 >> 6;
        if (((-1 << v15) & ~*(_QWORD *)(v4 + 64 + 8 * (v15 >> 6))) != 0)
        {
          v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v4 + 64 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v22 = 0;
          v23 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v24 = v16 == v23;
            if (v16 == v23)
              v16 = 0;
            v22 |= v24;
            v25 = *(_QWORD *)(v13 + 8 * v16);
          }
          while (v25 == -1);
          v17 = __clz(__rbit64(~v25)) + (v16 << 6);
        }
        *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
        v18 = 8 * v17;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v18) = v10;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v11;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaDictionary.Iterator.next()();
        v8 = v19;
      }
      while (v7);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v4;
}

Swift::Int sub_100BD1A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10001A9A8((uint64_t *)&unk_101111528);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_10000F4A0(0, &qword_101117CC8, CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_100A95B70(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

uint64_t sub_100BD1C9C(uint64_t a1, void (*a2)(_BYTE *, id))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _BYTE v16[40];
  id v17;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release(a1);
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release(a1);
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release(a1);
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            return swift_release(a1);
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_10010F9DC(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    v17 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    result = sub_100004048((uint64_t)v16, &qword_101117C08);
  }
  v15 = v13 + 4;
  if (v15 >= v8)
    return swift_release(a1);
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_100BD1E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v15 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v19 = *(_QWORD *)(v5 + 72);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v16(v13, v15, v4);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v17(v13, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v13, v4);
      sub_100A09F38((uint64_t)v10, v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      v15 += v19;
      if (!--v14)
        goto LABEL_7;
    }
  }
  else
  {
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_7:
    v17(v13, 1, 1, v4);
  }
  return v20;
}

uint64_t sub_100BD1FDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v14(v11, v13, v2);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v15(v11, 0, 1, v2);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100A09F38((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v18;
      if (!--v12)
        return v15(v11, 1, 1, v2);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    return v15(v11, 1, 1, v2);
  }
  return result;
}

uint64_t sub_100BD2170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for RawSearchResult(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v3);
  v9 = (char *)&v13 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v12 = *(_QWORD *)(v7 + 72);
    do
    {
      sub_10005972C(v11, (uint64_t)v5, type metadata accessor for RawSearchResult);
      sub_100A0C1EC((uint64_t)v9, (uint64_t)v5);
      result = sub_1000126B0((uint64_t)v9, type metadata accessor for RawSearchResult);
      v11 += v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_100BD2250(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  if (!((unint64_t)result >> 62))
  {
    v2 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return result;
    goto LABEL_3;
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v2 = result;
  if (result)
  {
LABEL_3:
    if (v2 < 1)
    {
      __break(1u);
    }
    else if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        sub_100A1214C(&v7, v4);
        result = swift_release();
      }
    }
    else
    {
      v5 = (uint64_t *)(v1 + 32);
      do
      {
        v6 = *v5++;
        swift_retain();
        sub_100A1214C(&v7, v6);
        result = swift_release();
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t sub_100BD2320(int a1, uint64_t a2, NSObject **a3, uint8_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  NSObject *v29;
  os_log_type_t v30;
  NSObject *v31;
  BOOL v32;
  uint8_t *v33;
  id v34;
  uint64_t v35;
  uint8_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  Swift::Int v65;
  os_log_type_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint8_t *v75;
  uint8_t *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  LODWORD(v7) = a1;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint8_t **)((char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(a2 + 32);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.notOnQueue(_:), v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)(v11);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) != 0)
  {
    v78 = (uint64_t)a3;
    v16 = &qword_1010EA000;
    a3 = (NSObject **)&unk_1011B7000;
    if ((v7 & 1) != 0)
    {
      v17 = static os_log_type_t.debug.getter(v15);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      v18 = qword_1011B7D40;
      v19 = os_log_type_enabled((os_log_t)qword_1011B7D40, v17);
      if ((v19 & 1) != 0)
      {
        swift_retain_n(a2, 2);
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        v77 = v7;
        v7 = v21;
        *(_DWORD *)v20 = 136315138;
        v80 = v21;
        v76 = a4;
        v22 = objc_msgSend(*(id *)(a2 + 280), "debugDescription");
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        v26 = v23;
        a3 = (NSObject **)&unk_1011B7000;
        v79 = sub_100016940(v26, v25, &v80);
        a4 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v20 + 4, v20 + 12);
        swift_release_n(a2, 2);
        v27 = v25;
        v16 = &qword_1010EA000;
        swift_bridgeObjectRelease(v27);
        v28 = "purgeLocalCloudKitData exclusiveAccessSemaphore -- caller claims to already have access %s";
        v29 = v18;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v29, v17, v28, v20, 0xCu);
        swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
        v51 = v7;
        LOBYTE(v7) = v77;
        swift_slowDealloc(v51, -1, -1);
        v19 = swift_slowDealloc(v20, -1, -1);
      }
    }
    else
    {
      v30 = static os_log_type_t.info.getter(v15);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      v31 = qword_1011B7D40;
      v32 = os_log_type_enabled((os_log_t)qword_1011B7D40, v30);
      v77 = v7;
      if (v32)
      {
        swift_retain_n(a2, 2);
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v7 = swift_slowAlloc(32, -1);
        v80 = v7;
        *(_DWORD *)v33 = 136315138;
        v76 = v33 + 4;
        v34 = objc_msgSend(*(id *)(a2 + 280), "debugDescription");
        v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        v36 = a4;
        v38 = v37;

        a3 = (NSObject **)&unk_1011B7000;
        v79 = sub_100016940(v35, v38, &v80);
        v16 = &qword_1010EA000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v76, v33 + 12);
        swift_release_n(a2, 2);
        v39 = v38;
        a4 = v36;
        swift_bridgeObjectRelease(v39);
        _os_log_impl((void *)&_mh_execute_header, v31, v30, ">>> purgeLocalCloudKitData exclusiveAccessSemaphore.wait() %s", v33, 0xCu);
        swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
        v40 = v7;
        LOBYTE(v7) = v77;
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      v41 = *(void **)(a2 + 280);
      OS_dispatch_semaphore.wait()();
      v43 = static os_log_type_t.info.getter(v42);
      v44 = qword_1011B7D40;
      v17 = v43;
      v19 = os_log_type_enabled((os_log_t)qword_1011B7D40, v43);
      if ((_DWORD)v19)
      {
        swift_retain_n(a2, 2);
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v7 = swift_slowAlloc(32, -1);
        v80 = v7;
        *(_DWORD *)v20 = 136315138;
        v75 = v20 + 4;
        v45 = objc_msgSend(v41, "debugDescription");
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v76 = a4;
        v48 = v47;

        v49 = v46;
        a3 = (NSObject **)&unk_1011B7000;
        v79 = sub_100016940(v49, v48, &v80);
        v16 = &qword_1010EA000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v75, v20 + 12);
        swift_release_n(a2, 2);
        v50 = v48;
        a4 = v76;
        swift_bridgeObjectRelease(v50);
        v28 = "<<< purgeLocalCloudKitData exclusiveAccessSemaphore.wait() %s";
        v29 = v44;
        goto LABEL_13;
      }
    }
    v11 = (_QWORD *)static os_log_type_t.default.getter(v19);
    if (v16[76] == -1)
      goto LABEL_15;
    goto LABEL_22;
  }
  __break(1u);
LABEL_22:
  swift_once(&qword_1010EA260, sub_100B5DA30);
LABEL_15:
  v52 = a3[424];
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v52, "Purging local CloudKit cache data", 33, 2, _swiftEmptyArrayStorage);
  v53 = sub_10088CEFC(v78, a4);
  v54 = static os_log_type_t.default.getter(v53);
  result = os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v52, "Done purging local CloudKit cache data", 38, 2, _swiftEmptyArrayStorage);
  if ((v7 & 1) == 0)
  {
    v56 = static os_log_type_t.info.getter(result);
    if (os_log_type_enabled(v52, v56))
    {
      swift_retain_n(a2, 2);
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      *(_DWORD *)v57 = 136315138;
      v80 = v58;
      v59 = objc_msgSend(*(id *)(a2 + 280), "debugDescription");
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v62 = v61;

      v79 = sub_100016940(v60, v62, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v57 + 4, v57 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v62);
      _os_log_impl((void *)&_mh_execute_header, v52, v56, ">>> purgeLocalCloudKitData exclusiveAccessSemaphore.signal() %s", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      v63 = v58;
      a3 = (NSObject **)&unk_1011B7000;
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    v64 = *(void **)(a2 + 280);
    v65 = OS_dispatch_semaphore.signal()();
    v66 = static os_log_type_t.info.getter(v65);
    v67 = a3[424];
    v68 = v66;
    result = os_log_type_enabled(v67, v66);
    if ((_DWORD)result)
    {
      swift_retain_n(a2, 2);
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      v80 = v70;
      *(_DWORD *)v69 = 136315138;
      v71 = objc_msgSend(v64, "debugDescription");
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      v74 = v73;

      v79 = sub_100016940(v72, v74, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v69 + 4, v69 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v74);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "<<< purgeLocalCloudKitData exclusiveAccessSemaphore.signal() %s", v69, 0xCu);
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      return swift_slowDealloc(v69, -1, -1);
    }
  }
  return result;
}

void sub_100BD2AE8(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 v36;
  void *v37;
  unint64_t v38;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v36 - v6;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  v36 = xmmword_100E22B00;
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v38 = a1;
  sub_100BD3374(a1);
  v10 = String.init<A>(describing:)(&v38, &type metadata for CloudKitCoordinator.ZoneState);
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v13 = (void *)((uint64_t (*)(void))static OS_os_log.default.getter)();
  v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)("ZoneState updated: %@", 21, 2, &_mh_execute_header, v13, v14, v9);
  swift_bridgeObjectRelease(v9);

  if (a1 >= 2)
  {
    if (a1 == 2)
    {
      v15 = (void *)((uint64_t (*)(void))static OS_os_log.default.getter)();
      v16 = static os_log_type_t.default.getter(v15);
      os_log(_:dso:log:type:_:)("ZoneState created", 17, 2, &_mh_execute_header, v15, v16, _swiftEmptyArrayStorage);

      if (qword_1010E9D08 != -1)
        v17 = swift_once(&qword_1010E9D08, sub_10059A6E0);
      Date.init()(v17);
      v18 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 0, 1, v18);
      v19 = sub_100013B60();
      sub_10001F674((uint64_t)v7, (uint64_t)v5);
      sub_100B05AF0((uint64_t)v5);
      swift_release(v19);
      sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EA690);
      v20 = sub_100013B60();
      sub_100B05BE0(0, 1);
      swift_release(v20);
    }
    else
    {
      v38 = a1;
      swift_errorRetain(a1);
      swift_errorRetain(a1);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      type metadata accessor for CKError(0);
      v23 = v22;
      if (swift_dynamicCast(&v37, &v38, v21, v22, 6))
      {
        v24 = v37;
        v25 = swift_allocObject(v8, 72, 7);
        *(_OWORD *)(v25 + 16) = v36;
        v37 = v24;
        v26 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
        v27 = _BridgedStoredNSError.code.getter(&v38, v23, v26);
        v28 = v38;
        *(_QWORD *)(v25 + 56) = &type metadata for Int;
        *(_QWORD *)(v25 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v25 + 32) = v28;
        v29 = (void *)static OS_os_log.default.getter(v27);
        static os_log_type_t.default.getter(v29);
        os_log(_:dso:log:type:_:)("ZoneState ckError: %i", (_DWORD)v36);
        swift_bridgeObjectRelease(v25);

        if (qword_1010E9D08 != -1)
          swift_once(&qword_1010E9D08, sub_10059A6E0);
        v37 = v24;
        _BridgedStoredNSError.code.getter(&v38, v23, v26);
        v30 = v38;
        v31 = sub_100013B60();
        sub_100B05BE0(v30, 0);

      }
      else
      {
        v32 = (void *)((uint64_t (*)(void))static OS_os_log.default.getter)();
        v33 = static os_log_type_t.default.getter(v32);
        os_log(_:dso:log:type:_:)("ZoneState generic error: -1", 27, 2, &_mh_execute_header, v32, v33, _swiftEmptyArrayStorage);

        if (qword_1010E9D08 != -1)
          swift_once(&qword_1010E9D08, sub_10059A6E0);
        v31 = sub_100013B60();
        sub_100B05BE0(-1, 0);
      }
      swift_release(v31);
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      v34 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v7, 1, 1, v34);
      v35 = sub_100013B60();
      sub_10001F674((uint64_t)v7, (uint64_t)v5);
      sub_100B05AF0((uint64_t)v5);
      swift_release(v35);
      sub_100BD3364(a1);
      sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EA690);
    }
  }
}

Class sub_100BD2FCC(uint64_t a1, void *a2)
{
  Swift::String v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  _QWORD *v10;
  uint64_t v11;
  CKModifySubscriptionsOperation v12;
  Class result;
  Class v14;
  Class v15;
  uint64_t v16;
  Swift::OpaquePointer_optional v17;

  sub_10000F4A0(0, &qword_101117CF8, CKDatabaseSubscription_ptr);
  swift_bridgeObjectRetain(a2);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  isa = CKDatabaseSubscription.init(subscriptionID:)(v4).super.super.isa;
  v6 = objc_msgSend(objc_allocWithZone((Class)CKNotificationInfo), "init");
  objc_msgSend(v6, "setShouldSendContentAvailable:", 1);
  -[objc_class setNotificationInfo:](isa, "setNotificationInfo:", v6);
  sub_10000F4A0(0, &qword_101117D00, CKModifySubscriptionsOperation_ptr);
  v7 = sub_10001A9A8(&qword_10111BE20);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v8 + 32) = isa;
  v16 = v8;
  specialized Array._endMutation()(v8);
  v9 = isa;
  v10 = _swiftEmptyArrayStorage;
  v11 = v16;
  v12.super.super.super.super.isa = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(*(Swift::OpaquePointer_optional *)(&v10 - 1), v17).super.super.super.super.isa;
  result = (Class)-[objc_class configuration](v12.super.super.super.super.isa, "configuration");
  if (result)
  {
    v14 = result;
    -[objc_class setAutomaticallyRetryNetworkFailures:](result, "setAutomaticallyRetryNetworkFailures:", 0);

    result = (Class)-[objc_class configuration](v12.super.super.super.super.isa, "configuration");
    if (result)
    {
      v15 = result;
      -[objc_class setDiscretionaryNetworkBehavior:](result, "setDiscretionaryNetworkBehavior:", 0);

      return v12.super.super.super.super.isa;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100BD3164(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  id v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;

  *(_QWORD *)&v16 = a1;
  swift_errorRetain(a1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  type metadata accessor for CKError(0);
  v4 = v3;
  if (!swift_dynamicCast(&v18, &v16, v2, v3, 6))
    goto LABEL_15;
  v5 = v18;
  v6 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  _BridgedStoredNSError.code.getter(&v16, v4, v6);
  if ((_QWORD)v16 != 2)
  {
    swift_errorRetain(a1);

    return a1;
  }
  v18 = v5;
  v7 = _BridgedStoredNSError.userInfo.getter(v4, v6);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
  if (*(_QWORD *)(v7 + 16) && (v10 = sub_100518DA0(v8, v9), (v11 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v7 + 56) + 32 * v10, (uint64_t)&v16);
  }
  else
  {
    v16 = 0u;
    v17 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v17 + 1))
  {

    sub_100004048((uint64_t)&v16, (uint64_t *)&unk_1010F6390);
LABEL_15:
    swift_errorRetain(a1);
    return a1;
  }
  v12 = sub_10001A9A8(&qword_101117C00);
  if ((swift_dynamicCast(&v18, &v16, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {

    goto LABEL_15;
  }
  if (v18[2] != 1)
  {
    swift_errorRetain(a1);

    swift_bridgeObjectRelease();
    return a1;
  }
  v13 = sub_100509944((uint64_t)v18);
  result = swift_bridgeObjectRelease();
  if (v13[2])
  {
    v15 = (id)v13[4];
    swift_release();

    return (uint64_t)v15;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100BD3364(unint64_t result)
{
  if (result >= 3)
    return swift_errorRelease(result);
  return result;
}

unint64_t sub_100BD3374(unint64_t result)
{
  if (result >= 3)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_100BD3384(uint64_t a1, uint64_t a2)
{
  return sub_100BC3690(a2);
}

unint64_t sub_100BD338C@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(v1 + 80);
  *a1 = v2;
  return sub_100BD3374(v2);
}

void sub_100BD33B8(uint64_t a1)
{
  uint64_t v1;

  sub_100BCC16C(a1, v1);
}

void sub_100BD33C0(uint64_t a1)
{
  uint64_t *v1;

  sub_100BCADE4(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_100BD33DC()
{
  uint64_t v0;

  return sub_100BCBCF0(v0);
}

uint64_t sub_100BD33F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BD3428()
{
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100BD34E0);
}

uint64_t sub_100BD3484()
{
  uint64_t v0;

  return sub_100BCBC6C(v0);
}

unint64_t sub_100BD349C()
{
  unint64_t result;

  result = qword_101117C20;
  if (!qword_101117C20)
  {
    result = swift_getWitnessTable(byte_100E6333C, &type metadata for CloudKitCoordinator.CloudKitCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_101117C20);
  }
  return result;
}

void sub_100BD34E0()
{
  uint64_t v0;

  sub_100BCBD40(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(NSObject **)(v0 + 40));
}

uint64_t sub_100BD34FC()
{
  uint64_t v0;

  return sub_100BC0F58(v0);
}

uint64_t sub_100BD3514()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100BD3548(uint64_t a1, void **a2)
{
  uint64_t *v2;

  return sub_100BCAEDC(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_100BD3554()
{
  return sub_1000077D8(48);
}

uint64_t sub_100BD355C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  Transaction.capture()();
  return v1(v2);
}

uint64_t sub_100BD3598()
{
  return sub_1000077D8(40);
}

uint64_t sub_100BD35A0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(v0 + 24);
  Transaction.capture()();
  return v1(0);
}

uint64_t sub_100BD35DC()
{
  return sub_100BC66B8(1);
}

uint64_t sub_100BD35E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100BD3610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100BCB8F4(a1, a2, a3, *(void **)(v3 + 16), *(NSObject **)(v3 + 24));
}

void sub_100BD3618()
{
  uint64_t v0;

  sub_100BCBB08(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100BD3634()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100BD365C(uint64_t a1)
{
  uint64_t v1;

  sub_100BC4F60(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_100BD3674(uint64_t a1)
{
  void *v1;

  sub_100BD0694(a1, v1);
}

uint64_t sub_100BD367C()
{
  return sub_1000077D8(40);
}

void sub_100BD3684(uint64_t a1, char a2)
{
  sub_100BD070C(a1, a2 & 1);
}

uint64_t sub_100BD3690(void *a1)
{
  uint64_t v1;

  return sub_100BCDBD0(a1, v1);
}

uint64_t sub_100BD36A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100BD36B8(void *a1)
{
  uint64_t v1;

  return sub_100BCDC68(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_100BD36C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_100BD3704(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100BCDE20(a1, a2, a3, *(_BYTE *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), *(void (**)(uint64_t, uint64_t))(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64));
}

uint64_t **sub_100BD3734()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v10;
  _QWORD v11[2];
  _OWORD v12[2];
  uint64_t v13[4];

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v12, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_100147814((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010F6390);
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if ((swift_dynamicCast(v11, v13, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
    return (uint64_t **)_swiftEmptyArrayStorage;
  v3 = v11[0];
  v4 = v11[1];
  v5 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = PropertyListDecoder.init()();
  v7 = sub_10001A9A8(&qword_101117C98);
  v8 = sub_100BD414C(&qword_101117CB0, &qword_101117CB8, (const char *)&protocol conformance descriptor for CKRecordZoneID, (const char *)&protocol conformance descriptor for <> Set<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, v3, v4, v7, v8);
  swift_release(v6);
  v10 = sub_100509A3C(v13[0]);
  swift_bridgeObjectRelease();
  sub_10001BC14(v3, v4);
  return v10;
}

uint64_t sub_100BD3918(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Class isa;
  NSString v23;
  void *v25;
  _QWORD v26[3];
  _OWORD v27[2];
  _QWORD v28[4];

  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = objc_msgSend(v2, "standardUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "objectForKey:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v27, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v27, 0, sizeof(v27));
  }
  sub_100147814((uint64_t)v27, (uint64_t)v28);
  if (!v28[3])
  {
    sub_100004048((uint64_t)v28, (uint64_t *)&unk_1010F6390);
    goto LABEL_8;
  }
  if ((swift_dynamicCast(v26, v28, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_8:
    v25 = &_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  v7 = v26[0];
  v8 = v26[1];
  v9 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = PropertyListDecoder.init()();
  v11 = sub_10001A9A8(&qword_101117C98);
  v12 = sub_100BD414C(&qword_101117CB0, &qword_101117CB8, (const char *)&protocol conformance descriptor for CKRecordZoneID, (const char *)&protocol conformance descriptor for <> Set<A>);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v11, v7, v8, v11, v12);
  sub_10001BC14(v7, v8);
  swift_release(v10);
  v25 = (void *)v28[0];
LABEL_9:
  v28[0] = v25;
  v13 = sub_100CA9330(a1);
  swift_bridgeObjectRelease();
  sub_100BBDEC8(v13);
  v14 = type metadata accessor for PropertyListEncoder(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = PropertyListEncoder.init()(v15);
  *(_QWORD *)&v27[0] = v28[0];
  v17 = sub_10001A9A8(&qword_101117C98);
  v18 = sub_100BD414C(&qword_101117CA0, &qword_101117CA8, (const char *)&protocol conformance descriptor for CKRecordZoneID, (const char *)&protocol conformance descriptor for <> Set<A>);
  v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v27, v17, v18);
  v21 = v20;
  swift_release(v16);
  swift_bridgeObjectRelease();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setObject:forKey:", isa, v23);

  return sub_10001BC14(v19, v21);
}

uint64_t sub_100BD3C48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100BD3C84()
{
  return sub_100294580((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100BCEDD0);
}

uint64_t sub_100BD3C90()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BD3CB4(void *a1)
{
  uint64_t v1;

  return sub_100BCFAF0(a1, v1);
}

uint64_t sub_100BD3CBC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100BCFC68(a1, a2, a3, v3);
}

uint64_t sub_100BD3CC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_100BD3D00(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  sub_100BCFE44(a1, a2, a3, a4, a5, a6, *(_BYTE *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(void **)(v6 + 48));
}

uint64_t sub_100BD3D34()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100BD3D68(uint64_t a1)
{
  uint64_t v1;

  return sub_100BD0468(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

id sub_100BD3D78()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "addOperation:", *(_QWORD *)(v0 + 24));
}

void sub_100BD3DA8(void *a1)
{
  void *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  NSString v24;
  Class isa;
  NSString v26;
  void *v27;
  _QWORD v28[3];
  _OWORD v29[2];
  _QWORD v30[4];

  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = objc_msgSend(v2, "standardUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "objectForKey:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v29, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v29, 0, sizeof(v29));
  }
  sub_100147814((uint64_t)v29, (uint64_t)v30);
  if (v30[3])
  {
    if ((swift_dynamicCast(v28, v30, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v7 = v28[0];
      v8 = v28[1];
      v9 = type metadata accessor for PropertyListDecoder(0);
      swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      v10 = PropertyListDecoder.init()();
      v11 = sub_10001A9A8(&qword_101117C98);
      v12 = sub_100BD414C(&qword_101117CB0, &qword_101117CB8, (const char *)&protocol conformance descriptor for CKRecordZoneID, (const char *)&protocol conformance descriptor for <> Set<A>);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v11, v7, v8, v11, v12);
      sub_10001BC14(v7, v8);
      swift_release(v10);
      v27 = (void *)v30[0];
      goto LABEL_9;
    }
  }
  else
  {
    sub_100004048((uint64_t)v30, (uint64_t *)&unk_1010F6390);
  }
  v27 = &_swiftEmptySetSingleton;
LABEL_9:
  v30[0] = v27;

  v13 = v30[0];
  if ((v30[0] & 0xC000000000000001) != 0)
  {
    if (v30[0] < 0)
      v14 = v30[0];
    else
      v14 = v30[0] & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v30[0]);
    v15 = __CocoaSet.count.getter(v14);
    swift_bridgeObjectRelease();
    if (v15)
      goto LABEL_14;
  }
  else if (*(_QWORD *)(v30[0] + 16))
  {
LABEL_14:
    v16 = type metadata accessor for PropertyListEncoder(0);
    v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = PropertyListEncoder.init()(v17);
    *(_QWORD *)&v29[0] = v13;
    v19 = sub_10001A9A8(&qword_101117C98);
    v20 = sub_100BD414C(&qword_101117CA0, &qword_101117CA8, (const char *)&protocol conformance descriptor for CKRecordZoneID, (const char *)&protocol conformance descriptor for <> Set<A>);
    v21 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v29, v19, v20);
    v23 = v22;
    swift_release(v18);
    swift_bridgeObjectRelease();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setObject:forKey:", isa, v26);

    sub_10001BC14(v21, v23);
    return;
  }
  swift_bridgeObjectRelease();
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "removeObjectForKey:", v24);

}

uint64_t sub_100BD414C(unint64_t *a1, unint64_t *a2, const char *a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_101117C98);
    v10 = sub_10001AC90(a2, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100BD41D8()
{
  uint64_t v0;

  return sub_100BC1C94(v0);
}

uint64_t sub_100BD41F0(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC1D24(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100BD4208()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

void sub_100BD4214()
{
  uint64_t v0;

  sub_100BC1FB4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100BD421C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BD4248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v2 | 7;
  v5 = ((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100BD42FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100BD0B88(a1, *(_QWORD *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_100BD4354()
{
  return sub_1000077D8(40);
}

uint64_t sub_100BD4364(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100BD1168(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_1002437C4, (void (*)(uint64_t, uint64_t, id, uint64_t))sub_10010ECE0);
}

uint64_t sub_100BD4390(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100BD1168(a1, a2, a3 & 1, v3, (void (*)(uint64_t, uint64_t))sub_1009022B8, (void (*)(uint64_t, uint64_t, id, uint64_t))sub_10010ED04);
}

uint64_t sub_100BD43C0(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100BD122C(a1, a2 & 1, *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_100BD43D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5 + 8, v4);
}

void sub_100BD4498()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for CloudKitChangeSet(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100BD0DF0(v0 + v2, *v3, v3[1]);
}

uint64_t sub_100BD44E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101117CD0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100BD454C(void *a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  sub_10001A9A8(&qword_101117CD0);
  sub_100BC02A8(a1, v3);
}

void sub_100BD459C(uint64_t a1)
{
  uint64_t *v1;

  sub_100BCB3C8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100BD45B8()
{
  return sub_1000077D8(40);
}

void sub_100BD45C0(void *a1, void *a2)
{
  uint64_t v2;

  sub_100BCB4B4(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(void *, uint64_t))(v2 + 24));
}

uint64_t sub_100BD45D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC97E4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(id *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100BD45E0()
{
  return sub_1000077D8(40);
}

uint64_t sub_100BD45EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100BD462C(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC8038(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100BD4638()
{
  return sub_1000077D8(40);
}

void sub_100BD4644()
{
  uint64_t v0;

  sub_100BC81FC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100BD4650()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100BD465C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100BC849C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100BD4668()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100BD4678()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100BD4684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100BC747C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100BD4690()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100BD46A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BD46D4(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC5758(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100BD46E0()
{
  return sub_1000077D8(40);
}

uint64_t sub_100BD46EC()
{
  uint64_t v0;

  return sub_100BC5A08(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100BD46FC(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100BC5B30(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32));
}

uint64_t sub_100BD4708()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BD472C(uint64_t *a1)
{
  uint64_t v1;

  return sub_100BC7010(a1, *(uint64_t (**)(uint64_t, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), "Record created", 14);
}

uint64_t sub_100BD4754(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC6258(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t (**)(_QWORD, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100BD4760(uint64_t *a1)
{
  uint64_t v1;

  return sub_100BC7010(a1, *(uint64_t (**)(uint64_t, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), "Record created during second attempt", 36);
}

uint64_t sub_100BD4784(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC70B4(a1, *(uint64_t (**)(_QWORD, uint64_t))(v1 + 16));
}

void sub_100BD478C()
{
  sub_100BC61BC();
}

uint64_t sub_100BD4798()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_errorRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BD47CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_100BD3164(*(_QWORD *)(v0 + 32));
  Future.finish(error:)(v1);
  return swift_errorRelease(v1);
}

uint64_t sub_100BD480C()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  return Future.finish(result:)(&v2);
}

uint64_t sub_100BD4850()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BD4888()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100BD48BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100BD48E0(void *a1, char a2)
{
  uint64_t v2;

  sub_100BC2238(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(double *)(v2 + 24));
}

uint64_t sub_100BD48F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100BC2E78(a1, a2, a3, v3);
}

void sub_100BD48F8()
{
  uint64_t v0;

  sub_100BD130C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100BD4910(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100BC3160(a1, a2 & 1, v2);
}

void sub_100BD491C()
{
  uint64_t v0;

  sub_100BC3060(v0);
}

uint64_t sub_100BD4924()
{
  uint64_t v0;

  return sub_100BC35D4(v0);
}

uint64_t sub_100BD493C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BD4960@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100BC1A44(v1, a1);
}

uint64_t sub_100BD4968(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100BC1B00(a1, a2, a3, v3);
}

uint64_t sub_100BD4970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v2 + 104) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

void sub_100BD49A8(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(v1 + 112);
  v3 = 2;
  if (*(_BYTE *)(v1 + 112))
    v3 = 0;
  *a1 = v3;
  a1[1] = v2;
  if ((_DWORD)v2)
    v4 = 707;
  else
    v4 = 0;
  a1[2] = v2;
  a1[3] = v2;
  a1[4] = v4;
}

void sub_100BD49D0()
{
  uint64_t v0;

  sub_100BC1644(v0);
}

uint64_t sub_100BD49E8()
{
  uint64_t v0;

  return sub_100BC1730(v0);
}

uint64_t sub_100BD49F0(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC3F8C(a1, v1);
}

uint64_t sub_100BD4A08()
{
  uint64_t v0;

  return sub_100BC17F8(v0);
}

uint64_t sub_100BD4A10()
{
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100172F20);
}

uint64_t sub_100BD4A5C()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100BD4A68(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC4080(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100BD4A70()
{
  uint64_t *v0;

  return sub_100BC414C(v0[2], v0[3], v0[4]);
}

uint64_t sub_100BD4A8C()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100BD4A98()
{
  uint64_t v0;

  return sub_100BC47EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100BD4AA0()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100BD4AAC()
{
  uint64_t v0;

  return sub_100BC479C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100BD4AB4(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC11E4(a1, v1);
}

uint64_t sub_100BD4ABC(uint64_t a1)
{
  uint64_t v1;

  return sub_100BBFB14(a1, v1);
}

uint64_t sub_100BD4AC4()
{
  uint64_t v0;

  return sub_100BBFB68(v0);
}

uint64_t sub_100BD4ACC(uint64_t *a1)
{
  uint64_t v1;

  return sub_100BBFBDC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100BD4AD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100BD4B00(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100BBFE8C(a1, a2 & 1, *(NSObject **)(v2 + 16));
}

void sub_100BD4B0C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 184) = 0;
}

uint64_t sub_100BD4B14@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1002EF960(v1, a1);
}

uint64_t sub_100BD4B2C()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

void sub_100BD4B38()
{
  sub_100BC0974();
  Transaction.capture()();
}

uint64_t storeEnumTagSinglePayload for CloudKitCoordinator.DatabaseToken(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100BD4BB0 + 4 * byte_100E630D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100BD4BE4 + 4 * byte_100E630D0[v4]))();
}

uint64_t sub_100BD4BE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD4BEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BD4BF4);
  return result;
}

uint64_t sub_100BD4C00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BD4C08);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100BD4C0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD4C14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudKitCoordinator.DatabaseToken()
{
  return &type metadata for CloudKitCoordinator.DatabaseToken;
}

uint64_t storeEnumTagSinglePayload for CloudKitCoordinator.CloudKitCoordinatorError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BD4C70 + 4 * byte_100E630DA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BD4C90 + 4 * byte_100E630DF[v4]))();
}

_BYTE *sub_100BD4C70(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BD4C90(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BD4C98(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BD4CA0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BD4CA8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BD4CB0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CloudKitCoordinator.CloudKitCoordinatorError()
{
  return &type metadata for CloudKitCoordinator.CloudKitCoordinatorError;
}

unint64_t sub_100BD4CD0()
{
  unint64_t result;

  result = qword_101117D58;
  if (!qword_101117D58)
  {
    result = swift_getWitnessTable(byte_100E632AC, &type metadata for CloudKitCoordinator.CloudKitCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_101117D58);
  }
  return result;
}

unint64_t sub_100BD4D18()
{
  unint64_t result;

  result = qword_101117D60;
  if (!qword_101117D60)
  {
    result = swift_getWitnessTable(aE_49, &type metadata for CloudKitCoordinator.DatabaseToken);
    atomic_store(result, (unint64_t *)&qword_101117D60);
  }
  return result;
}

void sub_100BD4D5C(_BYTE *a1@<X8>)
{
  sub_100BD13BC(a1);
}

id sub_100BD4E1C()
{
  return sub_100BD3D78();
}

unint64_t sub_100BD4E30@<X0>(unint64_t *a1@<X8>)
{
  return sub_100BD338C(a1);
}

void sub_100BD4EC8()
{
  sub_100BD48F8();
}

uint64_t sub_100BD4EE8(uint64_t a1)
{
  return sub_10077CB50(a1);
}

void sub_100BD4EFC(uint64_t a1)
{
  sub_100BD459C(a1);
}

void sub_100BD4F10(uint64_t a1)
{
  sub_100BD33C0(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for LineUpAccessoryOwnerCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_100BD4F68(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t sub_100BD4F68(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 2)
      return result;
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return sub_10001BBBC(result, a2);
}

uint64_t destroy for LineUpAccessoryOwnerCommand(uint64_t a1)
{
  return sub_100666EC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for LineUpAccessoryOwnerCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_100BD4F68(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100666EC8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for LineUpAccessoryOwnerCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100666EC8(v3, v4);
  return a1;
}

uint64_t sub_100BD500C(uint64_t a1)
{
  if (((*(_QWORD *)(a1 + 8) >> 60) & 3) == 3)
    return (*(_DWORD *)a1 + 3);
  else
    return (*(_QWORD *)(a1 + 8) >> 60) & 3;
}

uint64_t sub_100BD5028(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

_QWORD *sub_100BD5038(_QWORD *result, uint64_t a2)
{
  if (a2 < 3)
  {
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | (a2 << 60);
  }
  else
  {
    *result = (a2 - 3);
    result[1] = 0x3000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for LineUpAccessoryOwnerCommand()
{
  return &type metadata for LineUpAccessoryOwnerCommand;
}

uint64_t sub_100BD5070(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Endianness(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = dispatch thunk of BinaryEncoding.container()(v19, v10, v11);
  LOWORD(v17) = 0x404040504080407uLL >> (HIBYTE(a3) & 0x30);
  static Endianness.current.getter(v12);
  v13 = sub_100112060();
  FixedWidthInteger.convert(to:)(&v18, v9, &type metadata for UInt16, v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  LOWORD(v17) = v18;
  v14 = v20;
  v15 = v21;
  sub_10009F5D0((uint64_t)v19, v20);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v17, &type metadata for UInt16, v13, v14, v15);
  if (!v3)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
}

__int16 *sub_100BD5418@<X0>(_QWORD *a1@<X0>, __int16 **a2@<X8>)
{
  uint64_t v2;
  __int16 *result;
  __int16 *v5;

  result = sub_100BD56D4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100BD5440(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100BD5070(a1, *v1, v1[1]);
}

void sub_100BD5458(char a1, uint64_t a2)
{
  _BYTE v3[40];

  sub_100030784(a2, (uint64_t)v3);
  __asm { BR              X10 }
}

void sub_100BD54A8()
{
  uint64_t v1;
  _QWORD *v2;
  ValueMetadata *DynamicType;
  _QWORD v4[3];
  uint64_t v5;

  sub_10043A1B4();
  v1 = v5;
  v2 = sub_10001AA44(v4, v5);
  DynamicType = (ValueMetadata *)swift_getDynamicType(v2, v1, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
  if (&type metadata for VerifyFindMyNetworkIdPayload == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100BD56B4);
}

__int16 *sub_100BD56D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  unint64_t v12;
  _QWORD *v13;
  ValueMetadata *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  __int16 *v21;
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  v3 = type metadata accessor for Endianness(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  dispatch thunk of BinaryDecoding.container()(v26, v7, v8);
  v9 = v27;
  v10 = v28;
  v11 = (__int16 *)sub_10009F5D0((uint64_t)v26, v27);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v24, &type metadata for UInt16, &type metadata for UInt16, v12, v9, v10);
  if (v1)
  {
LABEL_10:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v29 = v24[0];
    static Endianness.current.getter(v13);
    v11 = &v29;
    FixedWidthInteger.convert(to:)(v25, v6, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    switch(LOWORD(v25[0]))
    {
      case 0x404:
        v14 = &type metadata for AccessoryGenericPayload;
        v15 = 2;
        v16 = sub_10005A334();
        goto LABEL_8;
      case 0x405:
        v14 = &type metadata for LineUpEncryptedSerialNumberResponsePayload;
        v15 = 3;
        v16 = sub_100BD5994();
        goto LABEL_8;
      case 0x407:
        v14 = &type metadata for VerifyFindMyNetworkIdPayload;
        v20 = sub_10043A1B4();
        v15 = 0;
        goto LABEL_9;
      case 0x408:
        v14 = &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload;
        v15 = 1;
        v16 = sub_100BD59D8();
LABEL_8:
        v20 = v16;
LABEL_9:
        sub_100030784((uint64_t)a1, (uint64_t)v24);
        v25[3] = v14;
        v25[4] = v20;
        sub_100018F08(v25);
        dispatch thunk of BinaryDecodable.init(from:)(v24, v14, *(_QWORD *)(v20 + 8));
        sub_100030784((uint64_t)v25, (uint64_t)v24);
        sub_100BD5458(v15, (uint64_t)v24);
        v11 = v21;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
        break;
      default:
        v17 = sub_100BD5950();
        v18 = swift_allocError(&type metadata for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError, v17, 0, 0);
        *v19 = 1;
        swift_willThrow(v18);
        goto LABEL_10;
    }
  }
  return v11;
}

unint64_t sub_100BD5950()
{
  unint64_t result;

  result = qword_101117D68;
  if (!qword_101117D68)
  {
    result = swift_getWitnessTable(aM_44, &type metadata for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError);
    atomic_store(result, (unint64_t *)&qword_101117D68);
  }
  return result;
}

unint64_t sub_100BD5994()
{
  unint64_t result;

  result = qword_101117D70;
  if (!qword_101117D70)
  {
    result = swift_getWitnessTable(byte_100E6FEAC, &type metadata for LineUpEncryptedSerialNumberResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101117D70);
  }
  return result;
}

unint64_t sub_100BD59D8()
{
  unint64_t result;

  result = qword_101117D78;
  if (!qword_101117D78)
  {
    result = swift_getWitnessTable("\rd$", &type metadata for LineUpVerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101117D78);
  }
  return result;
}

unint64_t sub_100BD5A1C()
{
  unint64_t result;

  result = qword_101117D80;
  if (!qword_101117D80)
  {
    result = swift_getWitnessTable(asc_100E6FE84, &type metadata for LineUpEncryptedSerialNumberResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101117D80);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100BD5AAC + 4 * byte_100E6338E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100BD5AE0 + 4 * byte_100E63389[v4]))();
}

uint64_t sub_100BD5AE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD5AE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BD5AF0);
  return result;
}

uint64_t sub_100BD5AFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BD5B04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100BD5B08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD5B10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError()
{
  return &type metadata for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError;
}

unint64_t sub_100BD5B30()
{
  unint64_t result;

  result = qword_101117D88;
  if (!qword_101117D88)
  {
    result = swift_getWitnessTable(byte_100E6346C, &type metadata for LineUpAccessoryOwnerCommand.AccessoryOwnerCommandError);
    atomic_store(result, (unint64_t *)&qword_101117D88);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCapabilityResponsePayload()
{
  return &type metadata for AccessoryCapabilityResponsePayload;
}

uint64_t sub_100BD5B88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  dispatch thunk of BinaryEncoding.container()(v12, v1, v2);
  v3 = sub_1000588DC();
  v4 = FixedWidthInteger.data.getter(&type metadata for UInt32, v3);
  v6 = v5;
  v11[0] = v4;
  v11[1] = v5;
  v7 = v13;
  v8 = v14;
  sub_10009F5D0((uint64_t)v12, v13);
  v9 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v11, &type metadata for Data, v9, v7, v8);
  sub_10001BC14(v4, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_100BD5C5C@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100BD5D0C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100BD5C84(_QWORD *a1)
{
  return sub_100BD5B88(a1);
}

unint64_t sub_100BD5C9C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100BD5CC8();
  result = sub_1003ECDB0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BD5CC8()
{
  unint64_t result;

  result = qword_101117D90;
  if (!qword_101117D90)
  {
    result = swift_getWitnessTable(byte_100E63504, &type metadata for AccessoryCapabilityResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101117D90);
  }
  return result;
}

uint64_t sub_100BD5D0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryDecoding.container()(v19, v6, v7);
  v8 = v20;
  v9 = v21;
  v10 = sub_10009F5D0((uint64_t)v19, v20);
  v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v8, v9);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v13 = v11;
    v14 = v12;
    v15 = sub_10001BBBC(v11, v12);
    static Endianness.current.getter(v15);
    sub_1000588DC();
    FixedWidthInteger.init(data:ofEndianness:)(&v18, v13, v14, v5);
    if (BYTE4(v18))
      v16 = 0;
    else
      v16 = v18;
    v10 = sub_100C6D544(v16);
    sub_10001BC14(v13, v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v10;
}

uint64_t type metadata accessor for PencilLocationSubmit()
{
  return objc_opt_self(_TtC12searchpartyd20PencilLocationSubmit);
}

uint64_t sub_100BD5E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BD5E84);
}

uint64_t sub_100BD5E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100BD5EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BD5ECC);
}

uint64_t sub_100BD5ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_101117EA8, (uint64_t)&nominal type descriptor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_100BD5F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BD5F2C);
}

uint64_t sub_100BD5F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SharedBeaconRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100BD5FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BD5FB4);
}

uint64_t sub_100BD5FB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SharedBeaconRecord(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FindMyAccessoryFamilyShareEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_101117F38, (uint64_t)&nominal type descriptor for FindMyAccessoryFamilyShareEnvelope);
}

uint64_t sub_100BD6040(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MyAccessoryFamilyShareEnvelope;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101117FA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BD6AE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys, &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys, v11, v9, v10);
  LOBYTE(v20) = 0;
  v12 = type metadata accessor for SharedBeaconRecord(0);
  v13 = sub_100006204((unint64_t *)&unk_10111E870, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F4DC);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAccessoryFamilyShareEnvelope + 20));
    v19 = 1;
    v15 = sub_10001A9A8(&qword_1010FB020);
    v16 = sub_1003EF044(&qword_1010FB028, &qword_1010FB030, (uint64_t)&unk_100E487E0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAccessoryFamilyShareEnvelope + 24));
    v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100BD6220@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t MyAccessoryFamilyShareEnvelope;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;

  v23 = a2;
  v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4);
  v24 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_10001A9A8(&qword_101117F88);
  v6 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
  __chkstk_darwin(MyAccessoryFamilyShareEnvelope);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  v26 = a1;
  sub_10001AA44(a1, v13);
  v14 = sub_100BD6AE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys, &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys, v14, v13, v12);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  v15 = v6;
  v16 = (uint64_t)v11;
  LOBYTE(v28) = 0;
  v17 = sub_100006204(&qword_1010FA8A0, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F504);
  v19 = v24;
  v18 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, v4, &v28, v25, v4, v17);
  sub_1003DE8F0((uint64_t)v19, v16);
  v20 = sub_10001A9A8(&qword_1010FB020);
  v27 = 1;
  v24 = (_QWORD *)sub_1003EF044(&qword_1010FB078, &qword_1010FB080, (uint64_t)&unk_100E48808, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, v20, &v27, v18, v20, v24);
  *(_QWORD *)(v16 + *(int *)(MyAccessoryFamilyShareEnvelope + 20)) = v28;
  v27 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, v20, &v27, v18, v20, v24);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v18);
  *(_QWORD *)(v16 + *(int *)(MyAccessoryFamilyShareEnvelope + 24)) = v28;
  sub_10005972C(v16, v23, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  return sub_1000126B0(v16, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
}

uint64_t sub_100BD6530(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101117F78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BD6AA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys, &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys, v11, v9, v10);
  v18 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0) + 20);
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v17, v5, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100BD668C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t MyAccessoryFamilyShareResponseEnvelope;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void (*v23)(uint64_t, _QWORD *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v28 = a2;
  v32 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v32 - 8);
  v4 = __chkstk_darwin(v32);
  v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v31 = (uint64_t *)((char *)&v26 - v6);
  v33 = sub_10001A9A8(&qword_101117F98);
  v7 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  __chkstk_darwin(MyAccessoryFamilyShareResponseEnvelope);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_100BD6AA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys, &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys, v15, v14, v13);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v26 = MyAccessoryFamilyShareResponseEnvelope;
  v27 = a1;
  v16 = v7;
  v17 = (uint64_t)v12;
  v19 = v29;
  v18 = v30;
  v35 = 0;
  v20 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v21 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v32, &v35, v33, v32, v20);
  v22 = v21;
  v23 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32);
  v24 = v32;
  v23(v17, v22, v32);
  v34 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v24, &v34, v33, v24, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v33);
  v23(v17 + *(int *)(v26 + 20), v19, v32);
  sub_10005972C(v17, v28, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return sub_1000126B0(v17, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_100BD6944(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BD6AE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BD696C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BD6AE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BD6994@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100BD6220(a1, a2);
}

uint64_t sub_100BD69A8(_QWORD *a1)
{
  return sub_100BD6040(a1);
}

uint64_t sub_100BD69BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6564496572616873;
  else
    return 0xD000000000000016;
}

uint64_t sub_100BD6A08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100BD6E74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BD6A2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BD6AA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BD6A54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BD6AA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BD6A7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100BD668C(a1, a2);
}

uint64_t sub_100BD6A90(_QWORD *a1)
{
  return sub_100BD6530(a1);
}

unint64_t sub_100BD6AA4()
{
  unint64_t result;

  result = qword_101117F80;
  if (!qword_101117F80)
  {
    result = swift_getWitnessTable(byte_100E638A0, &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117F80);
  }
  return result;
}

unint64_t sub_100BD6AE8()
{
  unint64_t result;

  result = qword_101117F90;
  if (!qword_101117F90)
  {
    result = swift_getWitnessTable(byte_100E63850, &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117F90);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FindMyAccessoryFamilyShareEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100BD6B78 + 4 * byte_100E635C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100BD6BAC + 4 * byte_100E635C0[v4]))();
}

uint64_t sub_100BD6BAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD6BB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BD6BBCLL);
  return result;
}

uint64_t sub_100BD6BC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BD6BD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100BD6BD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD6BDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryFamilyShareEnvelope.CodingKeys()
{
  return &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100BD6C44 + 4 * byte_100E635CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100BD6C78 + 4 * byte_100E635CA[v4]))();
}

uint64_t sub_100BD6C78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD6C80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BD6C88);
  return result;
}

uint64_t sub_100BD6C94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BD6C9CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100BD6CA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BD6CA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys()
{
  return &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys;
}

unint64_t sub_100BD6CC8()
{
  unint64_t result;

  result = qword_101117FA8;
  if (!qword_101117FA8)
  {
    result = swift_getWitnessTable(byte_100E63770, &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117FA8);
  }
  return result;
}

unint64_t sub_100BD6D10()
{
  unint64_t result;

  result = qword_101117FB0;
  if (!qword_101117FB0)
  {
    result = swift_getWitnessTable(asc_100E63828, &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117FB0);
  }
  return result;
}

unint64_t sub_100BD6D58()
{
  unint64_t result;

  result = qword_101117FB8;
  if (!qword_101117FB8)
  {
    result = swift_getWitnessTable(aQ_45, &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117FB8);
  }
  return result;
}

unint64_t sub_100BD6DA0()
{
  unint64_t result;

  result = qword_101117FC0;
  if (!qword_101117FC0)
  {
    result = swift_getWitnessTable(aY_74, &type metadata for FindMyAccessoryFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117FC0);
  }
  return result;
}

unint64_t sub_100BD6DE8()
{
  unint64_t result;

  result = qword_101117FC8;
  if (!qword_101117FC8)
  {
    result = swift_getWitnessTable(asc_100E636E0, &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117FC8);
  }
  return result;
}

unint64_t sub_100BD6E30()
{
  unint64_t result;

  result = qword_101117FD0;
  if (!qword_101117FD0)
  {
    result = swift_getWitnessTable(byte_100E63708, &type metadata for FindMyAccessoryFamilyShareResponseEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101117FD0);
  }
  return result;
}

uint64_t sub_100BD6E74(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000016)
  {
    v4 = 0x8000000100EF30C0;
    if (a2 == 0x8000000100EF30C0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EF30C0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6564496572616873 && a2 == 0xEF7265696669746ELL)
  {
    swift_bridgeObjectRelease(0xEF7265696669746ELL);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6564496572616873, 0xEF7265696669746ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100BD6F84()
{
  uint64_t v0;

  v0 = type metadata accessor for PrefixedDefaults(0);
  sub_1000234D8(v0, qword_101117FD8);
  sub_10001A9E8(v0, (uint64_t)qword_101117FD8);
  return PrefixedDefaults.init(prefix:)(0xD000000000000014, 0x8000000100EF3220);
}

uint64_t sub_100BD6FE4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100BD6FFC, a1, 0);
}

uint64_t sub_100BD6FFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
     + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_100BD7078;
  return ((uint64_t (*)(void *, _QWORD))v4)(&unk_101118340, *(_QWORD *)(v0 + 16));
}

uint64_t sub_100BD7078()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v1 + 16);
  v2 = *(_QWORD *)(*v1 + 24);
  v4 = *v1;
  swift_task_dealloc(v2);
  swift_release(v3);
  if (v0)
    swift_errorRelease(v0);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100BD70D4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100BD70EC, 0, 0);
}

uint64_t sub_100BD70EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 16) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 136));
  v2 = *v1;
  *(_QWORD *)(v0 + 24) = *v1;
  return swift_task_switch(sub_100BD7134, v2, 0);
}

uint64_t sub_100BD7134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_1010EE128, v1);
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch(sub_100BD71B4, v2, 0);
}

uint64_t sub_100BD71B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 16);
  sub_100BD7248();
  v2 = *(_QWORD *)(v1 + 192);
  v3 = swift_allocObject(&unk_1010B3178, 24, 7);
  swift_weakInit(v3 + 16, v1);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = &unk_101118350;
  *(_QWORD *)(v2 + 24) = v3;
  sub_10001D8A8(v4, v5);
  v6 = (_QWORD *)swift_task_alloc(dword_1011182FC);
  *(_QWORD *)(v0 + 32) = v6;
  *v6 = v0;
  v6[1] = sub_100A31E40;
  return sub_100BD74D4();
}

uint64_t sub_100BD7248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v25[2];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v2);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS.QoSClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101118360);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001AA44((_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176));
  v13 = swift_retain();
  v14 = (void *)AnyCurrentValuePublisher.publisher.getter(v13);
  swift_release();
  v25[1] = v14;
  v15 = sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
  v16 = (void *)static OS_dispatch_queue.global(qos:)(v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v25[0] = v16;
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 1, 1, v17);
  v18 = sub_10001A9A8(&qword_1011194D0);
  v19 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v20 = sub_1001C7EF4();
  Publisher.receive<A>(on:options:)(v25, v4, v18, v15, v19, v20);
  sub_100004048((uint64_t)v4, &qword_1010EECC8);

  swift_release();
  v21 = swift_allocObject(&unk_1010B3178, 24, 7);
  swift_weakInit(v21 + 16, v1);
  v22 = sub_1000193A4(&qword_101118368, &qword_101118360, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v23 = Publisher<>.sink(receiveValue:)(sub_100BDCB90, v21, v9, v22);
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *(_QWORD *)(v1 + 240) = v23;
  return swift_release();
}

uint64_t sub_100BD74D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1[20] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v1[24] = v4;
  v1[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SharedBeaconRecord(0);
  v1[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[27] = v6;
  v1[28] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  v1[29] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[30] = v8;
  v1[31] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v1[32] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[33] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v1[34] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v12);
  v1[36] = swift_task_alloc(v12);
  v1[37] = swift_task_alloc(v12);
  v13 = type metadata accessor for OwnerSharingCircle(0);
  v1[38] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[39] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[40] = swift_task_alloc(v15);
  v1[41] = swift_task_alloc(v15);
  v1[42] = swift_task_alloc(v15);
  v16 = sub_10001A9A8(&qword_1010EE340);
  v1[43] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BD765C, v0, 0);
}

uint64_t sub_100BD765C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  NSString v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached;
  *(_QWORD *)(v0 + 352) = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached;
  v4 = v2 + v3;
  swift_beginAccess(v2 + v3, v0 + 16, 0, 0);
  sub_10000F9B8(v4, v1, &qword_1010EE340);
  LOBYTE(v4) = sub_100BDB2EC();
  sub_100004048(v1, &qword_1010EE340);
  if ((v4 & 1) != 0
    || (v5 = *(_QWORD *)(v0 + 344),
        v6 = *(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached,
        swift_beginAccess(v6, v0 + 40, 0, 0),
        sub_10000F9B8(v6, v5, &qword_1010EE340),
        LOBYTE(v6) = sub_100BDB2EC(),
        sub_100004048(v5, &qword_1010EE340),
        (v6 & 1) == 0))
  {
    if ((sub_100BD9900() & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 208);
      *(_QWORD *)(v0 + 360) = v7;
      return swift_task_switch(sub_100BD7B40, v7, 0);
    }
  }
  v9 = (void *)objc_opt_self(LSApplicationWorkspace);
  v10 = objc_msgSend(v9, "defaultWorkspace");
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)(v0 + 160);
    v13 = v12 + *(_QWORD *)(v0 + 352);
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v11, "applicationIsInstalled:", v14);

    swift_beginAccess(v13, v0 + 64, 33, 0);
    sub_100BDBC54(v15);
    swift_endAccess(v0 + 64);
    sub_10001AA44((_QWORD *)(v12 + 152), *(_QWORD *)(v12 + 176));
    v16 = swift_retain();
    AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 492), v16);
    swift_release();
    LOBYTE(v11) = *(_BYTE *)(v0 + 492) == 1;
    swift_beginAccess(v12 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached, v0 + 112, 33, 0);
    sub_100BDBC54((char)v11);
    swift_endAccess(v0 + 112);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v18 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 168);
    v21 = sub_10001A9E8(v19, (uint64_t)qword_1011B6748);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v21, v19);
    v22 = swift_retain_n(v20, 4);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (!os_log_type_enabled(v23, v24))
    {
      swift_release_n(*(_QWORD *)(v0 + 160), 4);
      goto LABEL_12;
    }
    v40 = v24;
    v25 = swift_slowAlloc(14, -1);
    *(_DWORD *)v25 = 67109376;
    v26 = objc_msgSend(v9, "defaultWorkspace");
    v9 = *(void **)(v0 + 160);
    if (v26)
    {
      v27 = v26;
      v28 = String._bridgeToObjectiveC()();
      v29 = objc_msgSend(v27, "applicationIsInstalled:", v28);

      swift_release();
      *(_DWORD *)(v0 + 472) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 476, v25 + 4, v25 + 8);
      swift_release();
      *(_WORD *)(v25 + 8) = 1024;
      sub_10001AA44((_QWORD *)(v12 + 152), *(_QWORD *)(v12 + 176));
      v30 = swift_retain();
      AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 493), v30);
      swift_release();
      LODWORD(v28) = *(unsigned __int8 *)(v0 + 493);
      swift_release();
      *(_DWORD *)(v0 + 476) = (_DWORD)v28 == 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 476, v0 + 480, v25 + 10, v25 + 14);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v23, v40, "SharesRemovalManager: 3. cached isInstalled: %{BOOL}d, isMeDevice: %{BOOL}d", (uint8_t *)v25, 0xEu);
      swift_slowDealloc(v25, -1, -1);
LABEL_12:

      v31 = *(_QWORD *)(v0 + 336);
      v32 = *(_QWORD *)(v0 + 344);
      v34 = *(_QWORD *)(v0 + 320);
      v33 = *(_QWORD *)(v0 + 328);
      v36 = *(_QWORD *)(v0 + 288);
      v35 = *(_QWORD *)(v0 + 296);
      v37 = *(_QWORD *)(v0 + 280);
      v38 = *(_QWORD *)(v0 + 248);
      v41 = *(_QWORD *)(v0 + 224);
      v42 = *(_QWORD *)(v0 + 200);
      v39 = *(_QWORD *)(v0 + 184);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v39, *(_QWORD *)(v0 + 168));
      swift_task_dealloc(v32);
      swift_task_dealloc(v31);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v39);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_release_n(v9, 2);
  __break(1u);
  return result;
}

uint64_t sub_100BD7B40()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 368) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100BD7BBC;
  return unsafeBlocking<A>(_:)(v0 + 144, sub_100068004, *(_QWORD *)(v0 + 360), v3);
}

uint64_t sub_100BD7BBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  swift_release();
  return swift_task_switch(sub_100BD7C18, v1, 0);
}

uint64_t sub_100BD7C18()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[20];
  v0[47] = v0[18];
  return swift_task_switch(sub_100BD7C34, v1, 0);
}

void sub_100BD7C34()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = v0[47];
  v2 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = v0[38];
    v6 = v0[39];
    v32 = _swiftEmptyArrayStorage;
    v29 = v5;
    v30 = *(_QWORD *)(v1 + 16);
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      v7 = v0[42];
      v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v9 = *(_QWORD *)(v6 + 72);
      sub_10005972C(v0[47] + v8 + v9 * v4, v7, type metadata accessor for OwnerSharingCircle);
      v10 = v0[42];
      if (*(_BYTE *)(v7 + *(int *)(v5 + 28)) == 2)
      {
        v11 = v1;
        sub_1000126EC(v10, v0[41], type metadata accessor for OwnerSharingCircle);
        v12 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
        {
          sub_10009A520(0, v32[2] + 1, 1);
          v12 = _swiftEmptyArrayStorage;
        }
        v14 = v12[2];
        v13 = v12[3];
        v15 = v12;
        if (v14 >= v13 >> 1)
        {
          sub_10009A520(v13 > 1, v14 + 1, 1);
          v15 = _swiftEmptyArrayStorage;
        }
        v16 = v0[41];
        v15[2] = v14 + 1;
        v32 = v15;
        sub_1000126EC(v16, (uint64_t)v15 + v8 + v14 * v9, type metadata accessor for OwnerSharingCircle);
        v1 = v11;
        v5 = v29;
        v3 = v30;
      }
      else
      {
        sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
      }
      if (v3 == ++v4)
      {
        v2 = _swiftEmptyArrayStorage;
        v17 = v32;
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    v17 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRelease();
    v18 = v17[2];
    if (v18)
    {
      v19 = v0[39];
      v33 = v0[38];
      v34 = _swiftEmptyArrayStorage;
      v20 = v0[33];
      sub_10009A578(0, v18, 0);
      v21 = (uint64_t)v17 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      v31 = *(_QWORD *)(v19 + 72);
      v2 = _swiftEmptyArrayStorage;
      do
      {
        v22 = v0[40];
        v23 = v0[37];
        v24 = v0[32];
        sub_10005972C(v21, v22, type metadata accessor for OwnerSharingCircle);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v23, v22 + *(int *)(v33 + 20), v24);
        sub_1000126B0(v22, type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
        {
          sub_10009A578(0, v2[2] + 1, 1);
          v2 = v34;
        }
        v26 = v2[2];
        v25 = v2[3];
        if (v26 >= v25 >> 1)
        {
          sub_10009A578(v25 > 1, v26 + 1, 1);
          v2 = v34;
        }
        v27 = v0[37];
        v28 = v0[32];
        v2[2] = v26 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 32))((unint64_t)v2+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v26, v27, v28);
        v34 = v2;
        v21 += v31;
        --v18;
      }
      while (v18);
    }
    swift_release();
    v0[48] = v2;
    swift_task_switch(sub_100BD7F24, v0[45], 0);
  }
}

uint64_t sub_100BD7F24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 392) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_100BD7FA0;
  return unsafeBlocking<A>(_:)(v0 + 152, sub_10001ED30, *(_QWORD *)(v0 + 360), v3);
}

uint64_t sub_100BD7FA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  swift_release();
  return swift_task_switch(sub_100BD8000, v1, 0);
}

uint64_t sub_100BD8000()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[20];
  v0[50] = v0[19];
  return swift_task_switch(sub_100BD8018, v1, 0);
}

uint64_t sub_100BD8018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  unsigned __int8 v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  id v48;
  _QWORD *v49;
  void *v50;
  NSString v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 408) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 240);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 480) = v5;
    v6 = *(_QWORD *)(v3 + 72);
    v7 = *(_QWORD *)(v0 + 384);
    *(_QWORD *)(v0 + 424) = 0;
    *(_QWORD *)(v0 + 432) = v7;
    *(_QWORD *)(v0 + 416) = v6;
    v8 = *(_QWORD *)(v0 + 360);
    sub_10005972C(v1 + ((v5 + 32) & ~(unint64_t)v5), *(_QWORD *)(v0 + 248), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 484) = *(_DWORD *)(v4 + 24);
    return swift_task_switch(sub_100BD8714, v8, 0);
  }
  v10 = v0 + 88;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v0 + 384);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(v0 + 264);
    swift_bridgeObjectRetain(v11);
    sub_10009A2F4(0, v12, 0);
    v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v68 = *(_QWORD *)(v13 + 72);
    v64 = v11;
    v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    do
    {
      v15 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 256);
      v17 = v66(v15, v14, v16);
      v18 = UUID.uuidString.getter(v17);
      v20 = v19;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v16);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v22 = _swiftEmptyArrayStorage[2];
      v21 = _swiftEmptyArrayStorage[3];
      if (v22 >= v21 >> 1)
        sub_10009A2F4(v21 > 1, v22 + 1, 1);
      _swiftEmptyArrayStorage[2] = v22 + 1;
      v23 = &_swiftEmptyArrayStorage[2 * v22];
      v23[4] = v18;
      v23[5] = v20;
      v14 += v68;
      --v12;
    }
    while (v12);
    v11 = v64;
    swift_bridgeObjectRelease();
    v10 = v0 + 88;
  }
  swift_beginAccess(*(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles, v10, 33, 0);
  sub_100BDB9A0((uint64_t)_swiftEmptyArrayStorage);
  swift_endAccess(v10);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  sub_10001A9E8(*(_QWORD *)(v0 + 168), (uint64_t)qword_1011B6748);
  swift_bridgeObjectRetain(v11);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v27 = 134217984;
    v28 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 136) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "SharesRemovalManager: 2. saved %ld revokedCircles.", v27, 0xCu);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v11, 2);
  }

  v29 = (void *)objc_opt_self(LSApplicationWorkspace);
  v30 = objc_msgSend(v29, "defaultWorkspace");
  if (v30)
  {
    v31 = v30;
    v32 = *(_QWORD *)(v0 + 160);
    v33 = v32 + *(_QWORD *)(v0 + 352);
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v31, "applicationIsInstalled:", v34);

    swift_beginAccess(v33, v0 + 64, 33, 0);
    v36 = v35;
    v37 = (_QWORD *)v0;
    sub_100BDBC54(v36);
    swift_endAccess(v0 + 64);
    sub_10001AA44((_QWORD *)(v32 + 152), *(_QWORD *)(v32 + 176));
    v38 = swift_retain();
    AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 492), v38);
    swift_release();
    LOBYTE(v31) = *(_BYTE *)(v0 + 492) == 1;
    swift_beginAccess(v32 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached, v0 + 112, 33, 0);
    sub_100BDBC54((char)v31);
    swift_endAccess(v0 + 112);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v40 = *(_QWORD *)(v0 + 176);
    v39 = v37[23];
    v42 = v37[20];
    v41 = v37[21];
    v43 = sub_10001A9E8(v41, (uint64_t)qword_1011B6748);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v43, v41);
    v44 = swift_retain_n(v42, 4);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter(v45);
    if (!os_log_type_enabled(v45, v46))
    {
      swift_release_n(v37[20], 4);
      goto LABEL_23;
    }
    v65 = v46;
    v47 = swift_slowAlloc(14, -1);
    *(_DWORD *)v47 = 67109376;
    v48 = objc_msgSend(v29, "defaultWorkspace");
    v49 = v37;
    v29 = (void *)v37[20];
    if (v48)
    {
      v50 = v48;
      v51 = String._bridgeToObjectiveC()();
      v52 = objc_msgSend(v50, "applicationIsInstalled:", v51);

      swift_release();
      *((_DWORD *)v49 + 118) = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v49 + 59, (char *)v49 + 476, v47 + 4, v47 + 8);
      swift_release();
      *(_WORD *)(v47 + 8) = 1024;
      sub_10001AA44((_QWORD *)(v32 + 152), *(_QWORD *)(v32 + 176));
      v53 = swift_retain();
      AnyCurrentValuePublisher.value.getter((_QWORD *)((char *)v49 + 493), v53);
      swift_release();
      LODWORD(v51) = *((unsigned __int8 *)v49 + 493);
      swift_release();
      *((_DWORD *)v49 + 119) = (_DWORD)v51 == 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)v49 + 476, v49 + 60, v47 + 10, v47 + 14);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v45, v65, "SharesRemovalManager: 3. cached isInstalled: %{BOOL}d, isMeDevice: %{BOOL}d", (uint8_t *)v47, 0xEu);
      swift_slowDealloc(v47, -1, -1);
      v37 = v49;
LABEL_23:

      v54 = v37[42];
      v55 = v37[43];
      v57 = v37[40];
      v56 = v37[41];
      v59 = v37[36];
      v58 = v37[37];
      v60 = v37[35];
      v61 = v37;
      v62 = v37[31];
      v67 = v61[28];
      v69 = v61[25];
      v63 = v61[23];
      (*(void (**)(uint64_t, _QWORD))(v61[22] + 8))(v63, v61[21]);
      swift_task_dealloc(v55);
      swift_task_dealloc(v54);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v62);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v63);
      return ((uint64_t (*)(void))v61[1])();
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_release_n(v29, 2);
  __break(1u);
  return result;
}

uint64_t sub_100BD8714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 248) + *(int *)(v0 + 484);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 440) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 488) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010B3150, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 448) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 456) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 464) = v13;
  *v13 = v0;
  v13[1] = sub_100BD8804;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 200), sub_100067DF8, v10, *(_QWORD *)(v0 + 192));
}

uint64_t sub_100BD8804()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 464));
  swift_release();
  return swift_task_switch(sub_100BD8868, v1, 0);
}

uint64_t sub_100BD8868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  uint64_t v52;
  unsigned __int8 v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  id v66;
  _QWORD *v67;
  void *v68;
  NSString v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_type_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 216) + 48))(v3, 1, v2) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 248), type metadata accessor for MemberSharingCircle);
    sub_100004048(v3, (uint64_t *)&unk_1010EE180);
LABEL_10:
    v7 = *(_QWORD *)(v0 + 432);
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v0 + 224);
  sub_1000126EC(v3, v4, type metadata accessor for SharedBeaconRecord);
  if (*(_BYTE *)(v4 + *(int *)(v2 + 64)) != 2)
  {
    v17 = *(_QWORD *)(v0 + 248);
    sub_1000126B0(*(_QWORD *)(v0 + 224), type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v17, type metadata accessor for MemberSharingCircle);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v0 + 432);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 440))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 248) + *(int *)(*(_QWORD *)(v0 + 232) + 28), *(_QWORD *)(v0 + 256));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  v7 = *(_QWORD *)(v0 + 432);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v7 = sub_1007C84F8(0, *(_QWORD *)(v7 + 16) + 1, 1, *(_QWORD *)(v1 + 432));
  v9 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(v7 + 24);
  if (v9 >= v8 >> 1)
    v7 = sub_1007C84F8(v8 > 1, v9 + 1, 1, v7);
  v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 456);
  v11 = *(unsigned __int8 *)(v1 + 488);
  v12 = *(_QWORD *)(v1 + 280);
  v13 = *(_QWORD *)(v1 + 256);
  v14 = *(_QWORD *)(v1 + 264);
  v15 = *(_QWORD *)(v1 + 248);
  v16 = *(_QWORD *)(v1 + 224);
  *(_QWORD *)(v7 + 16) = v9 + 1;
  v10(v7 + ((v11 + 32) & ~v11) + *(_QWORD *)(v14 + 72) * v9, v12, v13);
  sub_1000126B0(v16, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v15, type metadata accessor for MemberSharingCircle);
LABEL_11:
  v18 = *(_QWORD *)(v1 + 424) + 1;
  if (v18 != *(_QWORD *)(v1 + 408))
  {
    *(_QWORD *)(v1 + 424) = v18;
    *(_QWORD *)(v1 + 432) = v7;
    v35 = *(_QWORD *)(v1 + 360);
    v36 = *(_QWORD *)(v1 + 232);
    sub_10005972C(*(_QWORD *)(v1 + 400)+ ((*(unsigned __int8 *)(v1 + 480) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 480))+ *(_QWORD *)(v1 + 416) * v18, *(_QWORD *)(v1 + 248), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v1 + 484) = *(_DWORD *)(v36 + 24);
    return swift_task_switch(sub_100BD8714, v35, 0);
  }
  v19 = v1 + 88;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v7 + 16);
  if (v20)
  {
    v82 = v1 + 88;
    v21 = *(_QWORD *)(v1 + 264);
    swift_bridgeObjectRetain(v7);
    sub_10009A2F4(0, v20, 0);
    v22 = v7 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v84 = v7;
    v86 = *(_QWORD *)(v21 + 72);
    v23 = v21;
    v24 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v21 + 16);
    do
    {
      v25 = *(_QWORD *)(v1 + 288);
      v26 = v1;
      v27 = *(_QWORD *)(v1 + 256);
      v28 = v24(v25, v22, v27);
      v29 = UUID.uuidString.getter(v28);
      v31 = v30;
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v27);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v33 = _swiftEmptyArrayStorage[2];
      v32 = _swiftEmptyArrayStorage[3];
      if (v33 >= v32 >> 1)
        sub_10009A2F4(v32 > 1, v33 + 1, 1);
      _swiftEmptyArrayStorage[2] = v33 + 1;
      v34 = &_swiftEmptyArrayStorage[2 * v33];
      v34[4] = v29;
      v34[5] = v31;
      v22 += v86;
      --v20;
      v1 = v26;
    }
    while (v20);
    v7 = v84;
    swift_bridgeObjectRelease();
    v19 = v82;
  }
  swift_beginAccess(*(_QWORD *)(v1 + 160) + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles, v19, 33, 0);
  sub_100BDB9A0((uint64_t)_swiftEmptyArrayStorage);
  swift_endAccess(v19);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  sub_10001A9E8(*(_QWORD *)(v1 + 168), (uint64_t)qword_1011B6748);
  swift_bridgeObjectRetain(v7);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v41 = 134217984;
    v42 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 136) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "SharesRemovalManager: 2. saved %ld revokedCircles.", v41, 0xCu);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }

  v43 = (void *)objc_opt_self(LSApplicationWorkspace);
  v44 = objc_msgSend(v43, "defaultWorkspace");
  if (v44)
  {
    v45 = v44;
    v46 = v1 + 64;
    v47 = v1 + 112;
    v48 = (_QWORD *)(v1 + 492);
    v49 = *(_QWORD *)(v1 + 160);
    v50 = v49 + *(_QWORD *)(v1 + 352);
    v51 = String._bridgeToObjectiveC()();
    v52 = v1;
    v53 = objc_msgSend(v45, "applicationIsInstalled:", v51);

    swift_beginAccess(v50, v46, 33, 0);
    v54 = v53;
    v55 = (_QWORD *)v52;
    sub_100BDBC54(v54);
    swift_endAccess(v46);
    sub_10001AA44((_QWORD *)(v49 + 152), *(_QWORD *)(v49 + 176));
    v56 = swift_retain();
    AnyCurrentValuePublisher.value.getter(v48, v56);
    swift_release();
    LOBYTE(v45) = *(_BYTE *)(v52 + 492) == 1;
    swift_beginAccess(v49 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached, v47, 33, 0);
    sub_100BDBC54((char)v45);
    swift_endAccess(v47);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v58 = *(_QWORD *)(v52 + 176);
    v57 = v55[23];
    v60 = v55[20];
    v59 = v55[21];
    v61 = sub_10001A9E8(v59, (uint64_t)qword_1011B6748);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v57, v61, v59);
    v62 = swift_retain_n(v60, 4);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter(v63);
    if (!os_log_type_enabled(v63, v64))
    {
      swift_release_n(v55[20], 4);
      goto LABEL_33;
    }
    v83 = v64;
    v65 = swift_slowAlloc(14, -1);
    *(_DWORD *)v65 = 67109376;
    v66 = objc_msgSend(v43, "defaultWorkspace");
    v67 = v55;
    v43 = (void *)v55[20];
    if (v66)
    {
      v68 = v66;
      v69 = String._bridgeToObjectiveC()();
      v70 = objc_msgSend(v68, "applicationIsInstalled:", v69);

      swift_release();
      *((_DWORD *)v67 + 118) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v67 + 59, (char *)v67 + 476, v65 + 4, v65 + 8);
      swift_release();
      *(_WORD *)(v65 + 8) = 1024;
      sub_10001AA44((_QWORD *)(v49 + 152), *(_QWORD *)(v49 + 176));
      v71 = swift_retain();
      AnyCurrentValuePublisher.value.getter((_QWORD *)((char *)v67 + 493), v71);
      swift_release();
      LODWORD(v69) = *((unsigned __int8 *)v67 + 493);
      swift_release();
      *((_DWORD *)v67 + 119) = (_DWORD)v69 == 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)v67 + 476, v67 + 60, v65 + 10, v65 + 14);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v63, v83, "SharesRemovalManager: 3. cached isInstalled: %{BOOL}d, isMeDevice: %{BOOL}d", (uint8_t *)v65, 0xEu);
      swift_slowDealloc(v65, -1, -1);
      v55 = v67;
LABEL_33:

      v72 = v55[42];
      v73 = v55[43];
      v75 = v55[40];
      v74 = v55[41];
      v77 = v55[36];
      v76 = v55[37];
      v78 = v55[35];
      v79 = v55;
      v80 = v55[31];
      v85 = v79[28];
      v87 = v79[25];
      v81 = v79[23];
      (*(void (**)(uint64_t, _QWORD))(v79[22] + 8))(v81, v79[21]);
      swift_task_dealloc(v73);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      swift_task_dealloc(v85);
      swift_task_dealloc(v87);
      swift_task_dealloc(v81);
      return ((uint64_t (*)(void))v79[1])();
    }
  }
  else
  {
    __break(1u);
  }
  result = swift_release_n(v43, 2);
  __break(1u);
  return result;
}

uint64_t sub_100BD90D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 80) = a1;
  v2 = sub_10001A9A8(&qword_1010EE348);
  *(_QWORD *)(v1 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BD9130, 0, 0);
}

uint64_t sub_100BD9130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  *(_QWORD *)(v0 + 96) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SharesRemovalManager: 1. check shares cleanup conditions.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_1011182FC);
  *(_QWORD *)(v0 + 104) = v6;
  *v6 = v0;
  v6[1] = sub_100BD9230;
  return sub_100BD74D4();
}

uint64_t sub_100BD9230()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_100BD9288, v1, 0);
}

uint64_t sub_100BD9288()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 184) = sub_100BD9900() & 1;
  return swift_task_switch(sub_100BD92CC, 0, 0);
}

uint64_t sub_100BD92CC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (*(_BYTE *)(v1 + 184) == 1)
  {
    v2 = Logger.logObject.getter(a1);
    v3 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SharesRemovalManager: 4. shares cleanup is required.", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }
    v5 = *(_QWORD *)(v1 + 80);

    return swift_task_switch(sub_100BD93AC, v5, 0);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v1 + 88));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100BD93AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[10];
  v2 = v0[11];
  v3 = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
  v0[14] = OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
  v4 = v1 + v3;
  swift_beginAccess(v1 + v3, v0 + 2, 0, 0);
  sub_10000F9B8(v4, v2, &qword_1010EE348);
  v0[15] = sub_100BDB630();
  sub_100004048(v2, &qword_1010EE348);
  return swift_task_switch(sub_100BD943C, 0, 0);
}

uint64_t sub_100BD943C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = (_QWORD *)v0[15];
  v2 = v1[2];
  v0[16] = v2;
  if (v2)
  {
    v0[17] = 0;
    v4 = v1[4];
    v3 = v1[5];
    v0[18] = v3;
    v5 = dword_101118304;
    swift_bridgeObjectRetain(v3);
    v6 = (_QWORD *)swift_task_alloc(v5);
    v0[19] = v6;
    *v6 = v0;
    v6[1] = sub_100BD94E8;
    return sub_100BD99D8(v4, v3);
  }
  else
  {
    v8 = v0[10];
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100BD95FC, v8, 0);
  }
}

uint64_t sub_100BD94E8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100BD9544, 0, 0);
}

uint64_t sub_100BD9544()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[17] + 1;
  if (v1 == v0[16])
  {
    v2 = v0[10];
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100BD95FC, v2, 0);
  }
  else
  {
    v0[17] = v1;
    v4 = v0[15] + 16 * v1;
    v6 = *(_QWORD *)(v4 + 32);
    v5 = *(_QWORD *)(v4 + 40);
    v0[18] = v5;
    v7 = dword_101118304;
    swift_bridgeObjectRetain(v5);
    v8 = (_QWORD *)swift_task_alloc(v7);
    v0[19] = v8;
    *v8 = v0;
    v8[1] = sub_100BD94E8;
    return sub_100BD99D8(v6, v5);
  }
}

uint64_t sub_100BD95FC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  sub_10000F9B8(v0[10] + v0[14], v1, &qword_1010EE348);
  v0[20] = sub_100BDB630();
  sub_100004048(v1, &qword_1010EE348);
  return swift_task_switch(sub_100BD9664, 0, 0);
}

uint64_t sub_100BD9664()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[8] = v0[20];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[21] = v1;
  v2 = sub_10001A9A8(&qword_1011063B0);
  v3 = sub_1000193A4(&qword_101118318, &qword_1011063B0, (const char *)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_100BD9704;
  return Sequence.asyncFilter(_:)(&unk_101118310, v0[10], v2, v3);
}

uint64_t sub_100BD9704(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100BD976C, v3, 0);
}

uint64_t sub_100BD976C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[22];
  swift_beginAccess(v0[10] + v0[14], v0 + 5, 33, 0);
  swift_bridgeObjectRetain(v1);
  sub_100BDB9A0(v2);
  swift_endAccess(v0 + 5);
  return swift_task_switch(sub_100BD97E8, 0, 0);
}

uint64_t sub_100BD97E8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 176));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 176);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    v6 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 72) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SharesRemovalManager: 6. after shares cleanup revokedCircles count = %ld.", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 176), 2);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100BD9900()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  void *v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;

  sub_10001AA44((_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176));
  v1 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v6, v1);
  swift_release();
  if (v6 != 1)
    return 0;
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v3 = result;
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "applicationIsInstalled:", v4);

    return (id)(v5 ^ 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BD99D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = sub_10001A9A8(&qword_1010ED860);
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v3[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[14] = v6;
  v3[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BD9A60, v2, 0);
}

uint64_t sub_100BD9A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  UUID.init(uuidString:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 96), &qword_1010ED860);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = *(_QWORD *)(v0 + 80);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
    swift_bridgeObjectRetain_n(v4, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 80);
    if (v9)
    {
      v11 = *(_QWORD *)(v0 + 72);
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(32, -1);
      v20 = v13;
      *(_DWORD *)v12 = 141558275;
      *(_QWORD *)(v0 + 40) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      swift_bridgeObjectRetain(v10);
      *(_QWORD *)(v0 + 48) = sub_100016940(v11, v10, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease_n(v10, 3);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SharesRemovalManager: 5. Can't create UUID for revoked circle!\nIncoming id is %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 80), 2);
    }

    v18 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    v15 = *(int **)(v14 + 224);
    v19 = (uint64_t (*)(_QWORD))((char *)v15 + *v15);
    v16 = (_QWORD *)swift_task_alloc(v15[1]);
    *(_QWORD *)(v0 + 128) = v16;
    *v16 = v0;
    v16[1] = sub_100BD9CF4;
    return v19(*(_QWORD *)(v0 + 120));
  }
}

uint64_t sub_100BD9CF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BD9DA4;
  else
    v4 = sub_100BD9D58;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 88), 0);
}

uint64_t sub_100BD9D58()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BD9DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 136);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 56, v0 + 16);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 64) = sub_100016940(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "SharesRemovalManager: 5. Error during shares cleanup: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 136));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BD9FB8(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2[2] = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[3] = v4;
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EE0E0);
  v2[5] = v5;
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v2[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[9] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v2[10] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v10);
  v11 = swift_task_alloc(v10);
  v12 = *a1;
  v13 = a1[1];
  v2[12] = v11;
  v2[13] = v12;
  v2[14] = v13;
  return swift_task_switch(sub_100BDA0AC, 0, 0);
}

uint64_t sub_100BDA0AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  UUID.init(uuidString:)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 56), &qword_1010ED860);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Can't create UUID for revoked circle from UserDefaults!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 48);
    v10 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 32);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 56);
    v17 = *(_QWORD *)(v0 + 16);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 32);
    *(_QWORD *)(v0 + 120) = v18;
    v18(v14, v16, v15);
    v19 = *(_QWORD *)(v17 + 208);
    *(_QWORD *)(v0 + 128) = v19;
    return swift_task_switch(sub_100BDA244, v19, 0);
  }
}

uint64_t sub_100BDA244()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 136) = v8;
  v8(v4, v3, v7);
  LODWORD(v9) = *(_DWORD *)(v6 + 80);
  *(_DWORD *)(v0 + 176) = v9;
  v9 = v9;
  v10 = (v9 + 24) & ~v9;
  v11 = swift_allocObject(&unk_1010B3100, v10 + v5, v9 | 7);
  *(_QWORD *)(v0 + 144) = v11;
  *(_QWORD *)(v11 + 16) = v1;
  v2(v11 + v10, v4, v7);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 152) = v13;
  *v13 = v0;
  v13[1] = sub_100BDA324;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 48), sub_10007CC00, v11, *(_QWORD *)(v0 + 40));
}

uint64_t sub_100BDA324()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release();
  return swift_task_switch(sub_100BDA380, 0, 0);
}

uint64_t sub_100BDA380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = type metadata accessor for OwnerSharingCircle(0);
  *(_DWORD *)(v0 + 180) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  sub_100004048(v2, &qword_1010EE0E0);
  return swift_task_switch(sub_100BDA3F0, v1, 0);
}

uint64_t sub_100BDA3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(unsigned __int8 *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = (v1 + 24) & ~v1;
  v7 = *(_QWORD *)(v0 + 80) + v6;
  v8 = v1 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 136))(v4, *(_QWORD *)(v0 + 96), v5);
  v9 = swift_allocObject(&unk_1010B3128, v7, v8);
  *(_QWORD *)(v0 + 160) = v9;
  *(_QWORD *)(v9 + 16) = v2;
  v3(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 168) = v11;
  *v11 = v0;
  v11[1] = sub_100BDA4D4;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 32), sub_10007CC24, v9, *(_QWORD *)(v0 + 24));
}

uint64_t sub_100BDA4D4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_release();
  return swift_task_switch(sub_100BDA530, 0, 0);
}

uint64_t sub_100BDA530()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_DWORD *)(v0 + 180);
  v2 = *(_QWORD *)(v0 + 32);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
  v3 = type metadata accessor for MemberSharingCircle(0);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  sub_100004048(v2, (uint64_t *)&unk_101111440);
  v6 = v1 != 1 || v4 != 1;
  v7 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v6);
}

_QWORD *sub_100BDA5F8()
{
  _QWORD *v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 19);
  swift_unknownObjectRelease(v0[24]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100004048((uint64_t)v0 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isFindMyAppInstalledCached, &qword_1010EE340);
  sub_100004048((uint64_t)v0 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__isThisMeDeviceCached, &qword_1010EE340);
  sub_100004048((uint64_t)v0 + OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles, &qword_1010EE348);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100BDA69C()
{
  uint64_t v0;

  sub_100BDA5F8();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100BDA6B4()
{
  return type metadata accessor for SharesRemovalManager(0);
}

uint64_t type metadata accessor for SharesRemovalManager(uint64_t a1)
{
  uint64_t result;

  result = qword_101118030;
  if (!qword_101118030)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharesRemovalManager);
  return result;
}

void sub_100BDA6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9[1] = &unk_100E63970;
  v9[2] = &unk_100E63970;
  v9[3] = &unk_100E63988;
  v9[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v9[6] = (char *)&value witness table for () + 64;
  v9[7] = &unk_100E639A0;
  sub_100BDA7C4(319, a2, a3, a4);
  if (v6 <= 0x3F)
  {
    v10 = *(_QWORD *)(v5 - 8) + 64;
    v11 = v10;
    sub_100BDA82C(319);
    if (v8 <= 0x3F)
    {
      v12 = *(_QWORD *)(v7 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 11, v9, a1 + 80);
    }
  }
}

void sub_100BDA7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_101118040)
  {
    v4 = type metadata accessor for PrefixedStored(0, (uint64_t)&type metadata for Bool, (uint64_t)&protocol witness table for Bool, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_101118040);
  }
}

uint64_t type metadata accessor for PrefixedStored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PrefixedStored);
}

void sub_100BDA82C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_101118048)
  {
    v2 = sub_10001F784(&qword_1011063B0);
    v3 = sub_100BDA890();
    v5 = type metadata accessor for PrefixedStored(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_101118048);
  }
}

unint64_t sub_100BDA890()
{
  unint64_t result;
  uint64_t v1;
  void *v2;

  result = qword_101118050;
  if (!qword_101118050)
  {
    v1 = sub_10001F784(&qword_1011063B0);
    v2 = &protocol witness table for String;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101118050);
  }
  return result;
}

uint64_t sub_100BDA8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[3] = a4;
  v5 = sub_10001A9A8(&qword_1010EE428);
  v4[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[5] = v6;
  v4[6] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EE430);
  v4[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[8] = v8;
  v4[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BDA97C, 0, 0);
}

uint64_t sub_100BDA97C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  sub_10001AA44((_QWORD *)(v0[3] + 112), *(_QWORD *)(v0[3] + 136));
  v1 = type metadata accessor for SharingScheduler();
  v4 = (char *)&dword_101113768 + dword_101113768;
  v2 = (_QWORD *)swift_task_alloc(unk_10111376C);
  v0[10] = v2;
  *v2 = v0;
  v2[1] = sub_100BDAA14;
  return ((uint64_t (*)(_QWORD, uint64_t, _UNKNOWN **))v4)(v0[6], v1, &off_1010AA938);
}

uint64_t sub_100BDAA14()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_100BDAA68, 0, 0);
}

uint64_t sub_100BDAA68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[5];
  v1 = v0[6];
  v3 = v0[4];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[11] = v4;
  *v4 = v0;
  v4[1] = sub_100BDAAF8;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[7]);
}

uint64_t sub_100BDAAF8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  return swift_task_switch(sub_100BDAB4C, 0, 0);
}

uint64_t sub_100BDAB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 24);
    swift_release();
    return swift_task_switch(sub_100BDABC8, v1, 0);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v3, *(_QWORD *)(v0 + 56));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BDABC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SharesRemovalManager: 0. check shares cleanup after schedular fire", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v9 = (char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
     + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:);
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 96) = v7;
  *v7 = v0;
  v7[1] = sub_100BDACF8;
  return ((uint64_t (*)(void *, _QWORD))v9)(&unk_1011182F0, *(_QWORD *)(v0 + 24));
}

uint64_t sub_100BDACF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 96));
  swift_release();
  if (v0)
    swift_errorRelease(v0);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v2 + 88) = v4;
  *v4 = v3;
  v4[1] = sub_100BDAAF8;
  return AsyncStream.Iterator.next(isolation:)(v2 + 16, 0, 0, *(_QWORD *)(v2 + 56));
}

uint64_t sub_100BDAD94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  _BYTE v12[24];

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SharesRemovalManager: 0. check shares cleanup after me device change", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = a2 + 16;
  type metadata accessor for Transaction(0);
  v9 = swift_allocObject(&unk_1010B3178, 24, 7);
  swift_beginAccess(v8, v12, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  swift_weakInit(v9 + 16, Strong);
  swift_release();
  swift_retain();
  static Transaction.asyncTask(name:block:)("SharesRemovalManager.meDeviceChanged", 36, 2, &unk_101118378, v9);
  return swift_release_n(v9, 2);
}

uint64_t sub_100BDAF00(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_100BDAF18, 0, 0);
}

uint64_t sub_100BDAF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
    return swift_task_switch(sub_100BDAF8C, Strong, 0);
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BDAF8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
     + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_100BDB008;
  return ((uint64_t (*)(void *, _QWORD))v4)(&unk_101118380, *(_QWORD *)(v0 + 48));
}

uint64_t sub_100BDB008()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  swift_task_dealloc(v2);
  swift_release();
  v4 = *(_QWORD *)(v3 + 48);
  if (v0)
  {
    swift_errorRelease(v0);
    return swift_task_switch(sub_1000BB7E4, v4, 0);
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
}

uint64_t sub_100BDB098(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_100BDB0B0, 0, 0);
}

uint64_t sub_100BDB0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t Strong;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SharesRemovalManager: 0. check shares cleanup after apps list changed", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 40);

  swift_beginAccess(v6 + 16, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v6 + 16);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
    return swift_task_switch(sub_100BDB1E0, Strong, 0);
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BDB1E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v4 = (char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
     + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_100BDB25C;
  return ((uint64_t (*)(void *, _QWORD))v4)(&unk_101118358, *(_QWORD *)(v0 + 48));
}

uint64_t sub_100BDB25C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 48);
  v2 = *(_QWORD *)(*v1 + 56);
  v4 = *v1;
  swift_task_dealloc(v2);
  swift_release(v3);
  v5 = *(_QWORD *)(v4 + 48);
  if (v0)
  {
    swift_errorRelease(v0);
    return swift_task_switch(sub_100BDCBF4, v5, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v4 + 48));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
}

uint64_t sub_100BDB2EC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;

  v1 = (uint64_t)v0;
  v2 = sub_10001A9A8(&qword_1010EE340);
  v3 = __chkstk_darwin(v2);
  v29 = (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - v5;
  v7 = type metadata accessor for PrefixedDefaults(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101118328);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v30[0] = 0x7365547265646E75;
  v30[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v31, v30, sub_10001F628, 0, &type metadata for Bool);
  v15 = swift_bridgeObjectRelease();
  if (v31 == 1)
  {
    if (qword_1010EA390 != -1)
      v15 = swift_once(&qword_1010EA390, sub_100BDBED4);
    v16 = *(_QWORD *)(qword_1011B7E88 + 24);
    __chkstk_darwin(v15);
    *(&v28 - 4) = v17;
    *(&v28 - 3) = v18;
    *(&v28 - 2) = v19;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F6390);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BDCC0C, &v28 - 6, v16, &type metadata for () + 1, v20);
    if ((swift_dynamicCast(&v31, v30, v20, &type metadata for Bool, 6) & 1) == 0)
      LOBYTE(v31) = 2;
    v21 = v29;
    sub_10000F9B8(v1, v29, &qword_1010EE340);
    if (v31 == 2)
      v22 = *(unsigned __int8 *)(v21 + 16);
    else
      v22 = v31 & 1;
    v26 = v21;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v0[*(int *)(v2 + 40)], v7);
    v23 = *(_QWORD *)v0;
    v24 = *(_QWORD *)(v1 + 8);
    swift_bridgeObjectRetain(v24);
    ManagedDefault.init(prefixedDefaults:key:)(v10, v23, v24, &type metadata for Bool, &protocol witness table for Bool);
    ManagedDefault.wrappedValue.getter(v11);
    v25 = LOBYTE(v30[0]);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_10000F9B8(v1, (uint64_t)v6, &qword_1010EE340);
    if (v25 == 2)
      v22 = v6[16];
    else
      v22 = v25 & 1;
    v26 = (uint64_t)v6;
  }
  sub_100004048(v26, &qword_1010EE340);
  return v22;
}

uint64_t sub_100BDB630()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32[16];
  _QWORD v33[4];

  v1 = (uint64_t)v0;
  v2 = sub_10001A9A8(&qword_1010EE348);
  v3 = __chkstk_darwin(v2);
  v31 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - v5;
  v7 = type metadata accessor for PrefixedDefaults(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101118320);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v33[0] = 0x7365547265646E75;
  v33[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v32, v33, sub_10001F628, 0, &type metadata for Bool);
  v15 = swift_bridgeObjectRelease();
  if (v32[0] == 1)
  {
    if (qword_1010EA390 != -1)
      v15 = swift_once(&qword_1010EA390, sub_100BDBED4);
    v16 = *(_QWORD *)(qword_1011B7E88 + 24);
    __chkstk_darwin(v15);
    *(&v30 - 4) = v17;
    *(&v30 - 3) = v18;
    *(&v30 - 2) = v19;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F6390);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BDCA94, &v30 - 6, v16, &type metadata for () + 1, v20);
    v21 = sub_10001A9A8(&qword_1011063B0);
    if ((swift_dynamicCast(v32, v33, v20, v21, 6) & 1) == 0)
      *(_QWORD *)v32 = 0;
    v22 = v1;
    v23 = v31;
    sub_10000F9B8(v22, v31, &qword_1010EE348);
    if (*(_QWORD *)v32)
    {
      sub_100004048(v23, &qword_1010EE348);
      return *(_QWORD *)v32;
    }
    else
    {
      v24 = *(_QWORD *)(v23 + 16);
      swift_bridgeObjectRetain(v24);
      sub_100004048(v23, &qword_1010EE348);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v0[*(int *)(v2 + 40)], v7);
    v25 = *(_QWORD *)v0;
    v26 = *(_QWORD *)(v1 + 8);
    swift_bridgeObjectRetain(v26);
    v27 = sub_10001A9A8(&qword_1011063B0);
    v28 = sub_100BDA890();
    ManagedDefault.init(prefixedDefaults:key:)(v10, v25, v26, v27, v28);
    ManagedDefault.wrappedValue.getter(v11);
    v24 = v33[0];
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    sub_10000F9B8(v1, (uint64_t)v6, &qword_1010EE348);
    if (!v24)
    {
      v24 = *((_QWORD *)v6 + 2);
      swift_bridgeObjectRetain(v24);
    }
    sub_100004048((uint64_t)v6, &qword_1010EE348);
  }
  return v24;
}

uint64_t sub_100BDB9A0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for PrefixedDefaults(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101118320);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v24[0] = 0x7365547265646E75;
  v24[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v26, v24, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v26 == 1)
  {
    if (qword_1010EA390 != -1)
      swift_once(&qword_1010EA390, sub_100BDBED4);
    v12 = qword_1011B7E88;
    v25 = sub_10001A9A8(&qword_1011063B0);
    v24[0] = a1;
    v13 = *(_QWORD *)(v12 + 24);
    __chkstk_darwin(v25);
    *(&v23 - 4) = v12;
    *(&v23 - 3) = v14;
    *(&v23 - 2) = v15;
    *(&v23 - 1) = (uint64_t)v24;
    swift_bridgeObjectRetain(a1);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BDCA70, &v23 - 6, v13, &type metadata for () + 1, &type metadata for () + 1);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010F6390);
  }
  else
  {
    v17 = sub_10001A9A8(&qword_1010EE348);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, (char *)v1 + *(int *)(v17 + 40), v4);
    v18 = *v1;
    v19 = v2[1];
    swift_bridgeObjectRetain(v19);
    v20 = sub_10001A9A8(&qword_1011063B0);
    v21 = sub_100BDA890();
    ManagedDefault.init(prefixedDefaults:key:)(v7, v18, v19, v20, v21);
    v26 = a1;
    swift_beginAccess(v11, v24, 33, 0);
    v22 = swift_bridgeObjectRetain(a1);
    ManagedDefault.wrappedValue.setter(&v26, v8, v22);
    swift_endAccess(v24);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_100BDBC54(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for PrefixedDefaults(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101118328);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v23[0] = 0x7365547265646E75;
  v23[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v24, v23, sub_10001F628, 0, &type metadata for Bool);
  v12 = swift_bridgeObjectRelease();
  if (v24 == 1)
  {
    if (qword_1010EA390 != -1)
      v12 = swift_once(&qword_1010EA390, sub_100BDBED4);
    v23[3] = &type metadata for Bool;
    LOBYTE(v23[0]) = a1 & 1;
    __chkstk_darwin(v12);
    *(&v22 - 4) = v13;
    *(&v22 - 3) = v14;
    *(&v22 - 2) = v15;
    *(&v22 - 1) = (uint64_t)v23;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BDCBF8, &v22 - 6, v16, &type metadata for () + 1, &type metadata for () + 1);
    return sub_100004048((uint64_t)v23, (uint64_t *)&unk_1010F6390);
  }
  else
  {
    v18 = sub_10001A9A8(&qword_1010EE340);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, (char *)v1 + *(int *)(v18 + 40), v4);
    v20 = *v1;
    v19 = v2[1];
    swift_bridgeObjectRetain(v19);
    ManagedDefault.init(prefixedDefaults:key:)(v7, v20, v19, &type metadata for Bool, &protocol witness table for Bool);
    LOBYTE(v24) = a1 & 1;
    v21 = swift_beginAccess(v11, v23, 33, 0);
    ManagedDefault.wrappedValue.setter(&v24, v8, v21);
    swift_endAccess(v23);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_100BDBED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = type metadata accessor for MockUserDefaults();
  v1 = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(v1 + 16) = _swiftEmptyDictionarySingleton;
  v2 = sub_10001A9A8(&qword_1010FAAF0);
  result = swift_allocObject(v2, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 24) = result;
  qword_1011B7E88 = v1;
  return result;
}

void sub_100BDBF34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[24];

  swift_beginAccess(a1 + 16, v11, 0, 0);
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v8);
    v9 = sub_100518DA0(a2, a3);
    if ((v10 & 1) != 0)
    {
      sub_100016A30(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)a4);
    }
    else
    {
      *a4 = 0u;
      a4[1] = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }
}

uint64_t sub_100BDBFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v8[24];
  _BYTE v9[32];

  sub_10000F9B8(a4, (uint64_t)v9, (uint64_t *)&unk_1010F6390);
  swift_beginAccess(a1 + 16, v8, 33, 0);
  swift_bridgeObjectRetain(a3);
  sub_1000FECD8((uint64_t)v9, a2, a3);
  return swift_endAccess(v8);
}

uint64_t sub_100BDC080()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for MockUserDefaults()
{
  return objc_opt_self(_TtC12searchpartyd16MockUserDefaults);
}

uint64_t sub_100BDC0CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_100E63988;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for PrefixedDefaults(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 3, v5, a1 + 32);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100BDC160(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for PrefixedDefaults(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v9 + v12;
  if ((v12 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) != 0
    || ((v13 + ((v7 + 16) & ~(unint64_t)v7)) & ~v12) + *(_QWORD *)(v11 + 64) > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16
                   + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16)));
    swift_retain(v16);
  }
  else
  {
    v17 = v10;
    v18 = ~v12;
    v19 = a2[1];
    *a1 = *a2;
    a1[1] = v19;
    v20 = (char *)a2 + v8;
    v21 = ((unint64_t)a1 + v8 + 16) & ~v8;
    v22 = (unint64_t)(v20 + 16) & ~v8;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain(v19);
    v23(v21, v22, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v21 + v13) & v18, (v22 + v13) & v18, v17);
  }
  return a1;
}

uint64_t sub_100BDC288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = type metadata accessor for PrefixedDefaults(0);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))((v5 + v6 + *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80), v7);
}

_QWORD *sub_100BDC304(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = type metadata accessor for PrefixedDefaults(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))((v11 + *(unsigned __int8 *)(v13 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (v11 + *(unsigned __int8 *)(v13 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), v12);
  return a1;
}

_QWORD *sub_100BDC3A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for PrefixedDefaults(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 24))((v12 + *(unsigned __int8 *)(v14 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v12 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), v13);
  return a1;
}

_OWORD *sub_100BDC45C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 16) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 16) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = type metadata accessor for PrefixedDefaults(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))((v8 + *(unsigned __int8 *)(v10 + 80) + v6) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (v8 + *(unsigned __int8 *)(v10 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), v9);
  return a1;
}

_QWORD *sub_100BDC4F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for PrefixedDefaults(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 40))((v12 + *(unsigned __int8 *)(v14 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (v12 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), v13);
  return a1;
}

uint64_t sub_100BDC594(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for PrefixedDefaults(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v7 <= v10)
    v11 = *(_DWORD *)(v9 + 84);
  else
    v11 = v7;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  if (!a2)
    return 0;
  v13 = v8;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 64);
  v16 = *(unsigned __int8 *)(v9 + 80);
  if (a2 <= v12)
    goto LABEL_27;
  v17 = ((v15 + v16 + ((v14 + 16) & ~v14)) & ~v16) + *(_QWORD *)(v9 + 64);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_27;
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_27:
      if ((v11 & 0x80000000) != 0)
      {
        v25 = (a1 + v14 + 16) & ~v14;
        if ((_DWORD)v7 == v12)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v25, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v25 + v15 + v16) & ~v16, v10, v13);
      }
      else
      {
        v24 = *(_QWORD *)(a1 + 8);
        if (v24 >= 0xFFFFFFFF)
          LODWORD(v24) = -1;
        return (v24 + 1);
      }
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_27;
LABEL_18:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = v17;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v12 + v22 + 1;
}

void sub_100BDC770(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for PrefixedDefaults(0) - 8);
  if (v8 <= *(_DWORD *)(v9 + 84))
    v10 = *(_DWORD *)(v9 + 84);
  else
    v10 = v8;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  v12 = ((*(_QWORD *)(v7 + 64)
        + *(unsigned __int8 *)(v9 + 80)
        + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v11)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_100000004;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &_mh_execute_header.magic + 1;
  }
  if (v11 < a2)
  {
    v14 = ~v11 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X0 }
}

uint64_t sub_100BDC9D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1011182EC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100BD90D4(v0);
}

uint64_t sub_100BDCA20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10111830C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100067F58;
  return sub_100BD9FB8(a1, v1);
}

uint64_t sub_100BDCA70()
{
  uint64_t *v0;

  return sub_100BDBFF4(v0[2], v0[3], v0[4], v0[5]);
}

void sub_100BDCA94(_OWORD *a1@<X8>)
{
  uint64_t *v1;

  sub_100BDBF34(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100BDCAB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10111833C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_100BD70EC, 0, 0);
}

uint64_t sub_100BDCB10()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100BDCB34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10111834C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[5] = v0;
  return swift_task_switch(sub_100BDB0B0, 0, 0);
}

uint64_t sub_100BDCB90(uint64_t a1)
{
  uint64_t v1;

  return sub_100BDAD94(a1, v1);
}

uint64_t sub_100BDCB98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101118374);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004C28;
  v2[5] = v0;
  return swift_task_switch(sub_100BDAF18, 0, 0);
}

uint64_t sub_100BDCBF8()
{
  return sub_100BDCA70();
}

void sub_100BDCC0C(_OWORD *a1@<X8>)
{
  sub_100BDCA94(a1);
}

uint64_t sub_100BDCC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BDCC2C);
}

uint64_t sub_100BDCC2C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100BDCCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BDCCB4);
}

char *sub_100BDCCB4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ConfigurationEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1011183E0;
  if (!qword_1011183E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConfigurationEndpoint);
  return result;
}

uint64_t sub_100BDCD64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x6769666E6F632FLL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

uint64_t sub_100BDCE40@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  void *v17;
  Class isa;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  os_log_t v45;
  uint8_t *v46;
  void *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint8_t *v60;
  char *v61;
  os_log_t v62;
  void *v63;
  uint8_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69[4];

  v2 = sub_10001A9A8(&qword_1010F4AD8);
  __chkstk_darwin(v2);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OfflineFindingInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v60 - v10;
  v12 = sub_100BDEE88();
  v14 = v12;
  if ((v15 & 1) != 0)
  {
    *a1 = v12;
    v25 = sub_10001A9A8(&qword_101108350);
    return swift_storeEnumTagMultiPayload(a1, v25, 1);
  }
  v16 = v13;
  v17 = (void *)objc_opt_self(NSPropertyListSerialization);
  sub_10001BBBC(v14, v16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v69[0] = 0;
  v19 = objc_msgSend(v17, "propertyListWithData:options:format:error:", isa, 0, 0, v69);

  v20 = v69[0];
  if (v19)
  {
    v21 = v69[0];
    _bridgeAnyObjectToAny(_:)(v69, v19);
    swift_unknownObjectRelease(v19);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
    if ((swift_dynamicCast(&v67, v69, (char *)&type metadata for Any + 8, v22, 6) & 1) != 0)
    {
      v23 = v67;
      swift_bridgeObjectRetain(v67);
      sub_1008ED660(v24, (uint64_t)v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        sub_100BDF344(v14, v16, 0);
        swift_bridgeObjectRelease();
        sub_100BDF344(v14, v16, 0);
        sub_100BDF350((uint64_t)v4);
      }
      else
      {
        sub_1008EED68((uint64_t)v4, (uint64_t)v11);
        if (qword_1010EA398 != -1)
          swift_once(&qword_1010EA398, sub_100BDE0B8);
        v33 = type metadata accessor for Logger(0);
        v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B7E90);
        swift_bridgeObjectRetain(v23);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.debug.getter(v36);
        LODWORD(v65) = v37;
        v38 = os_log_type_enabled(v36, v37);
        v66 = v34;
        if (v38)
        {
          v64 = (uint8_t *)swift_slowAlloc(12, -1);
          v63 = (void *)swift_slowAlloc(32, -1);
          v69[0] = v63;
          v62 = v36;
          v39 = v64;
          v40 = v64;
          *(_DWORD *)v64 = 136315138;
          v60 = v39 + 4;
          swift_bridgeObjectRetain(v23);
          v61 = (char *)&type metadata for Any + 8;
          v42 = Dictionary.description.getter(v41, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
          v44 = v43;
          swift_bridgeObjectRelease();
          v67 = sub_100016940(v42, v44, (uint64_t *)v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v60, v40 + 12);
          swift_bridgeObjectRelease_n(v23, 2);
          swift_bridgeObjectRelease();
          v45 = v62;
          v46 = v64;
          _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v65, "plist: %s", v64, 0xCu);
          v47 = v63;
          swift_arrayDestroy(v63, 1, v61);
          swift_slowDealloc(v47, -1, -1);
          swift_slowDealloc(v46, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v23, 2);
        }
        v48 = sub_100BDF390((uint64_t)v11, (uint64_t)v9);
        v49 = Logger.logObject.getter(v48);
        v50 = static os_log_type_t.default.getter(v49);
        v51 = v50;
        if (os_log_type_enabled(v49, v50))
        {
          v52 = swift_slowAlloc(22, -1);
          v65 = (void *)swift_slowAlloc(32, -1);
          v69[0] = v65;
          *(_DWORD *)v52 = 141558275;
          v67 = 1752392040;
          LODWORD(v64) = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v52 + 4, v52 + 12);
          *(_WORD *)(v52 + 12) = 2081;
          v63 = (void *)(v52 + 14);
          sub_1008EE19C();
          v67 = sub_100016940(v53, v54, (uint64_t *)v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v63, v52 + 22);
          swift_bridgeObjectRelease();
          sub_100BDF3D4((uint64_t)v9);
          _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v64, "Successfully decoded plist %{private,mask.hash}s", (uint8_t *)v52, 0x16u);
          v55 = v65;
          swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v55, -1, -1);
          swift_slowDealloc(v52, -1, -1);
        }
        else
        {
          sub_100BDF3D4((uint64_t)v9);
        }

        if (*(_QWORD *)&v11[*(int *)(v5 + 24)])
        {
          sub_100BDF344(v14, v16, 0);
          sub_100BDF344(v14, v16, 0);
          sub_1008EED68((uint64_t)v11, (uint64_t)a1);
          v30 = sub_10001A9A8(&qword_101108350);
          v31 = a1;
          v32 = 0;
          return swift_storeEnumTagMultiPayload(v31, v30, v32);
        }
        v57 = Logger.logObject.getter(v56);
        v58 = static os_log_type_t.error.getter(v57);
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v59 = 0;
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "OfflineFindingInfo record from NVRAM was invalid (index == 0)", v59, 2u);
          swift_slowDealloc(v59, -1, -1);
        }
        sub_100BDF344(v14, v16, 0);

        sub_100BDF344(v14, v16, 0);
        sub_100BDF3D4((uint64_t)v11);
      }
    }
    else
    {
      sub_100BDF344(v14, v16, 0);
      sub_100BDF344(v14, v16, 0);
    }
  }
  else
  {
    v27 = v69[0];
    v28 = _convertNSErrorToError(_:)(v20);

    swift_willThrow(v29);
    sub_100BDF344(v14, v16, 0);
    sub_100BDF344(v14, v16, 0);
    swift_errorRelease(v28);
  }
  *a1 = 2;
  v30 = sub_10001A9A8(&qword_101108350);
  v31 = a1;
  v32 = 1;
  return swift_storeEnumTagMultiPayload(v31, v30, v32);
}

void sub_100BDD528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t aBlock;
  unint64_t v25;
  void (*v26)(uint64_t, void *);
  void *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v23 - v5;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  aBlock = 0x7365547265646E75;
  v25 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v30, &aBlock, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100EF3260, "searchpartyd/NVRAM.swift", 24, 2, 40, 0);
    __break(1u);
  }
  else
  {
    v7 = dispatch_group_create();
    dispatch_group_enter(v7);
    v8 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
    v9 = swift_allocObject(&unk_1010B3308, 24, 7);
    *(_QWORD *)(v9 + 16) = v7;
    v28 = sub_100BDF4B8;
    v29 = v9;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v25 = 1107296256;
    v26 = sub_100555E2C;
    v27 = &unk_1010B3320;
    v10 = _Block_copy(&aBlock);
    v11 = v7;
    swift_release();
    objc_msgSend(v8, "clearOfflineFindingInfoWithCompletion:", v10);
    _Block_release(v10);

    static DispatchTime.now()(v12);
    if (qword_1010EA3A0 != -1)
      swift_once(&qword_1010EA3A0, sub_100BDE23C);
    v13 = type metadata accessor for DispatchTimeInterval(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_101118418);
    + infix(_:_:)(v4, v14);
    v15 = *(void (**)(char *, uint64_t))(v1 + 8);
    v15(v4, v0);
    v16 = OS_dispatch_group.wait(timeout:)(v6) & 1;
    v15(v6, v0);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v16, 1) & 1) != 0)
    {
      if (qword_1010EA398 != -1)
        swift_once(&qword_1010EA398, sub_100BDE0B8);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7E90);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Timed out clearing NVRAM", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
        v22 = v11;
        v11 = v19;
      }
      else
      {
        v22 = v19;
      }

    }
  }
}

void sub_100BDD89C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD aBlock[2];

  v3 = type metadata accessor for DispatchTime(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  aBlock[0] = 0x7365547265646E75;
  aBlock[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v5, aBlock, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    __asm { BR              X9 }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100EF3260, "searchpartyd/NVRAM.swift", 24, 2, 116, 0);
  __break(1u);
  JUMPOUT(0x100BDE098);
}

uint64_t sub_100BDE0B8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7E90);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7E90);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x4D4152564ELL, 0xE500000000000000);
}

unint64_t sub_100BDE12C()
{
  unint64_t result;

  result = qword_101118438;
  if (!qword_101118438)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NVRAMAccessError, &type metadata for NVRAMAccessError);
    atomic_store(result, (unint64_t *)&qword_101118438);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NVRAMAccessError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100BDE1BC + 4 * byte_100E63A85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100BDE1F0 + 4 * byte_100E63A80[v4]))();
}

uint64_t sub_100BDE1F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BDE1F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BDE200);
  return result;
}

uint64_t sub_100BDE20C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BDE214);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100BDE218(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BDE220(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NVRAMAccessError()
{
  return &type metadata for NVRAMAccessError;
}

uint64_t sub_100BDE23C()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  sub_1000234D8(v0, qword_101118418);
  *(_QWORD *)sub_10001A9E8(v0, (uint64_t)qword_101118418) = 30;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t sub_100BDE29C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;

  v0 = sub_100BDEE88();
  if ((v2 & 1) != 0)
  {
    v5 = xmmword_100E22B20;
  }
  else
  {
    *(_QWORD *)&v5 = v0;
    *((_QWORD *)&v5 + 1) = v1;
  }
  v3 = sub_10001A9A8(&qword_101118440);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = CurrentValueSubject.init(_:)(&v5);
  qword_101118430 = result;
  return result;
}

uint64_t sub_100BDE304()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (qword_1010EA3A8 != -1)
    swift_once(&qword_1010EA3A8, sub_100BDE29C);
  swift_retain();
  v0 = sub_10001A9A8(&qword_101118440);
  v1 = sub_100BDF500();
  v2 = Publisher.eraseToAnyPublisher()(v0, v1);
  result = swift_release();
  qword_1011B7EA8 = v2;
  return result;
}

void sub_100BDE3A0(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  __int128 v20;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA398 != -1)
      swift_once(&qword_1010EA398, sub_100BDE0B8);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7E90);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v20 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(a1, v19, v18);
      v10 = Error.localizedDescription.getter(v18[1], v18[2]);
      v17 = sub_100016940(v10, v11, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "NVRAM clear error: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_1010EA398 != -1)
      swift_once(&qword_1010EA398, sub_100BDE0B8);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7E90);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "NVRAM cleared.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    if (qword_1010EA3A8 != -1)
      swift_once(&qword_1010EA3A8, sub_100BDE29C);
    v20 = xmmword_100E22B20;
    CurrentValueSubject.send(_:)(&v20);
  }
  dispatch_group_leave(a2);
}

void sub_100BDE67C(int a1, unint64_t a2, uint64_t a3, dispatch_group_t group)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[3];
  _BYTE v15[8];
  uint64_t v16;
  uint64_t v17[3];

  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_1010EA398 != -1)
      swift_once(&qword_1010EA398, sub_100BDE0B8);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7E90);
    swift_errorRetain(a3);
    v7 = swift_errorRetain(a3);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v17[0] = v11;
      *(_DWORD *)v10 = 136315138;
      swift_getErrorValue(a3, v15, v14);
      v12 = Error.localizedDescription.getter(v14[1], v14[2]);
      v16 = sub_100016940(v12, v13, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "fetchOfflineFindingInfo error: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a3);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
    dispatch_group_leave(group);
  }
  else
  {
    if (a2 >> 60 != 15)
      __asm { BR              X9 }
    dispatch_group_leave(group);
  }
}

void sub_100BDEC04(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v18;
  _QWORD v19[3];
  _BYTE v20[8];
  uint64_t v21[2];
  _BYTE v22[24];

  v6 = (_BYTE *)(a3 + 16);
  if (a1)
  {
    swift_beginAccess(a3 + 16, v22, 1, 0);
    *v6 = 0;
    swift_errorRetain(a1);
    if (qword_1010EA398 != -1)
      swift_once(&qword_1010EA398, sub_100BDE0B8);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7E90);
    swift_errorRetain(a1);
    v9 = swift_errorRetain(a1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v21[0] = v13;
      *(_DWORD *)v12 = 136315138;
      swift_getErrorValue(a1, v20, v19);
      v14 = Error.localizedDescription.getter(v19[1], v19[2]);
      v18 = sub_100016940(v14, v15, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "storeOfflineFindingInfo error: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    swift_beginAccess(a3 + 16, v22, 1, 0);
    *v6 = 1;
    if (qword_1010EA3A8 != -1)
      swift_once(&qword_1010EA3A8, sub_100BDE29C);
    v21[0] = a4;
    v21[1] = a5;
    sub_10001BBBC(a4, a5);
    CurrentValueSubject.send(_:)(v21);
    sub_10001BC14(a4, a5);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100BDEE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  _QWORD *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  NSObject *v28;
  _BYTE *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE v35[24];
  _QWORD v36[3];
  uint64_t aBlock;
  unint64_t v38;
  uint64_t (*v39)(uint64_t, void *, void *);
  void *v40;
  void (*v41)(int, unint64_t, uint64_t);
  _QWORD *v42;

  v0 = type metadata accessor for DispatchTime(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v31 - v5;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  aBlock = 0x7365547265646E75;
  v38 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v36, &aBlock, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v36[0] & 1) != 0)
    return 1;
  v8 = swift_allocObject(&unk_1010B3268, 32, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B20;
  v33 = v8 + 16;
  v9 = swift_allocObject(&unk_1010B3290, 17, 7);
  *(_BYTE *)(v9 + 16) = 3;
  v34 = (_BYTE *)(v9 + 16);
  v10 = dispatch_group_create();
  if (qword_1010EA398 != -1)
    swift_once(&qword_1010EA398, sub_100BDE0B8);
  v11 = type metadata accessor for Logger(0);
  v32 = sub_10001A9E8(v11, (uint64_t)qword_1011B7E90);
  v12 = Logger.logObject.getter(v32);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Reading NVRAM data.", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  dispatch_group_enter(v10);
  v15 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
  v16 = (_QWORD *)swift_allocObject(&unk_1010B32B8, 40, 7);
  v16[2] = v10;
  v16[3] = v8;
  v16[4] = v9;
  v41 = sub_100BDF488;
  v42 = v16;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v38 = 1107296256;
  v39 = sub_1005564D0;
  v40 = &unk_1010B32D0;
  v17 = _Block_copy(&aBlock);
  v18 = v10;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v15, "fetchOfflineFindingInfoWithCompletion:", v17);
  _Block_release(v17);

  static DispatchTime.now()(v19);
  if (qword_1010EA3A0 != -1)
    swift_once(&qword_1010EA3A0, sub_100BDE23C);
  v20 = type metadata accessor for DispatchTimeInterval(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_101118418);
  + infix(_:_:)(v4, v21);
  v22 = *(void (**)(char *, uint64_t))(v1 + 8);
  v22(v4, v0);
  v23 = OS_dispatch_group.wait(timeout:)(v6) & 1;
  v22(v6, v0);
  v24 = static DispatchTimeoutResult.== infix(_:_:)(v23, 1);
  if ((v24 & 1) != 0)
  {
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Timed out reading NVRAM", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
      v28 = v18;
    }
    else
    {
      v28 = v25;
      v25 = v18;
    }

    v29 = v34;
    swift_beginAccess(v34, v35, 1, 0);
    *v29 = 0;
  }
  else
  {

  }
  swift_beginAccess(v33, &aBlock, 0, 0);
  if (*(_QWORD *)(v8 + 24) >> 60 == 15)
  {
    swift_beginAccess(v34, v36, 0, 0);
    LODWORD(v7) = *(unsigned __int8 *)(v9 + 16);
    swift_release();
    swift_release();
    if ((_DWORD)v7 == 3)
      return 1;
    else
      return v7;
  }
  else
  {
    v7 = *(_QWORD *)(v8 + 16);
    sub_10001BBBC(v7, *(_QWORD *)(v8 + 24));
    swift_release();
    swift_release();
  }
  return v7;
}

uint64_t sub_100BDF344(uint64_t result, unint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return sub_10001BC14(result, a2);
  return result;
}

uint64_t sub_100BDF350(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F4AD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100BDF390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OfflineFindingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BDF3D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OfflineFindingInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100BDF410()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BDF444()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100BDF454()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100BDF488(int a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100BDE67C(a1, a2, a3, *(dispatch_group_t *)(v3 + 16));
}

uint64_t sub_100BDF494()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100BDF4B8(uint64_t a1)
{
  uint64_t v1;

  sub_100BDE3A0(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100BDF4C0()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100BDF4F4(uint64_t a1)
{
  uint64_t v1;

  sub_100BDEC04(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_100BDF500()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101118448;
  if (!qword_101118448)
  {
    v1 = sub_10001F784(&qword_101118440);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store(result, &qword_101118448);
  }
  return result;
}

uint64_t sub_100BDF55C()
{
  return swift_task_switch(sub_100BDF570, 0, 0);
}

uint64_t sub_100BDF570(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[3] = sub_100B26BBC(a1);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v2 = qword_1011B71A8;
  v1[4] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v1[5] = v4;
  *v4 = v1;
  v4[1] = sub_100BDF628;
  return unsafeBlocking<A>(_:)(v1 + 2, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_100BDF628()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release();
  return swift_task_switch(sub_100BDF684, 0, 0);
}

uint64_t sub_100BDF684()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  char v4;

  v1 = sub_100C1BB30(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 24);
  if ((v1 & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 24));
    sub_100109D28(0xD000000000000018, 0x8000000100EF3290, 0x2D746E65746E6F63, 0xEC00000065707974, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v4 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_100109D28(0x4554414C464544, 0xE700000000000000, 0xD000000000000010, 0x8000000100EC2970, v4);
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100BDF784()
{
  return swift_task_switch(sub_100BDF798, 0, 0);
}

uint64_t sub_100BDF798(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[3] = sub_100B26BBC(a1);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v2 = qword_1011B71A8;
  v1[4] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v1[5] = v4;
  *v4 = v1;
  v4[1] = sub_100BDF850;
  return unsafeBlocking<A>(_:)(v1 + 2, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_100BDF850()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release(v1);
  return swift_task_switch(sub_100BE5B1C, 0, 0);
}

uint64_t sub_100BDF8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_100BDF910, 0, 0);
}

uint64_t sub_100BDF910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 48) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100BDF9E8;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BDF9E8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release();
  return swift_task_switch(sub_100BDFA70, 0, 0);
}

uint64_t sub_100BDFA70()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  id v5;
  id v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;

  v1 = sub_100C1BB30(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    sub_10001BBBC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 24) = 0;
  v5 = -[objc_class compressedDataUsingAlgorithm:error:](isa, "compressedDataUsingAlgorithm:error:", 3, v0 + 24);

  v6 = *(id *)(v0 + 24);
  if (v5)
  {
    v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v3 = v7;

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  }
  v9 = v6;
  _convertNSErrorToError(_:)(v6);

  swift_willThrow(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BDFBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_100BDFC08, 0, 0);
}

uint64_t sub_100BDFC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 48) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100BDFCE0;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BDFCE0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release();
  return swift_task_switch(sub_100BE5A78, 0, 0);
}

uint64_t sub_100BDFD68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_100BDFDCC, 0, 0);
}

uint64_t sub_100BDFDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 48) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100BDFEA4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BDFEA4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release();
  return swift_task_switch(sub_100BDFF2C, 0, 0);
}

uint64_t sub_100BDFF2C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  id v5;
  id v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;

  v1 = sub_100C1BB30(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    sub_10001BBBC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 24) = 0;
  v5 = -[objc_class decompressedDataUsingAlgorithm:error:](isa, "decompressedDataUsingAlgorithm:error:", 3, v0 + 24);

  v6 = *(id *)(v0 + 24);
  if (v5)
  {
    v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v3 = v7;

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  }
  v9 = v6;
  _convertNSErrorToError(_:)(v6);

  swift_willThrow(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE0060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_100BE00C4, 0, 0);
}

uint64_t sub_100BE00C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 48) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100BE019C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BE019C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release();
  return swift_task_switch(sub_100BE5AC8, 0, 0);
}

uint64_t sub_100BE0224(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for String.Encoding(0);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BE027C, 0, 0);
}

uint64_t sub_100BE027C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 48) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100BE032C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BE032C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release();
  return swift_task_switch(sub_100BE0388, 0, 0);
}

uint64_t sub_100BE0388()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  v1 = sub_100C1BB30(*(_QWORD *)(v0 + 16));
  v2 = swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 24);
    static String.Encoding.utf8.getter(v2);
    v6 = String.init(data:encoding:)(v5, v3, v4);
    v8 = v7;
    if (!v7)
    {
      if (qword_1010EA5F0 != -1)
        swift_once(&qword_1010EA5F0, sub_100D79F3C);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B84B0);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.error.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Empty description for request body.", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

    }
    swift_task_dealloc(*(_QWORD *)(v0 + 40));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
  }
  else
  {
    v15 = swift_task_alloc(dword_101118484);
    *(_QWORD *)(v0 + 64) = v15;
    *(_QWORD *)v15 = v0;
    *(_QWORD *)(v15 + 8) = sub_100BE0518;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v0 + 24);
    return swift_task_switch(sub_100BDFDCC, 0, 0);
  }
}

uint64_t sub_100BE0518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 64);
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100BE06C8;
  else
    v6 = sub_100BE0588;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100BE0588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_QWORD *)(v1 + 80);
  v4 = *(_QWORD *)(v1 + 40);
  static String.Encoding.utf8.getter(a1);
  v5 = String.init(data:encoding:)(v2, v3, v4);
  v7 = v6;
  if (v6)
  {
    v8 = *(_QWORD *)(v1 + 72);
    v9 = *(_QWORD *)(v1 + 80);
  }
  else
  {
    if (qword_1010EA5F0 != -1)
      swift_once(&qword_1010EA5F0, sub_100D79F3C);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B84B0);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v1 + 72);
    v15 = *(_QWORD *)(v1 + 80);
    if (v14)
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Empty description for request body.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v8 = v16;
    v9 = v15;
  }
  sub_10001BC14(v8, v9);
  swift_task_dealloc(*(_QWORD *)(v1 + 40));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v5, v7);
}

uint64_t sub_100BE06C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;

  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B84B0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 88);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Can't get description for request body.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t sub_100BE07C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for String.Encoding(0);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100BE0818, 0, 0);
}

uint64_t sub_100BE0818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 48) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_100BE08C8;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100BE08C8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release();
  return swift_task_switch(sub_100BE0924, 0, 0);
}

uint64_t sub_100BE0924()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  v1 = sub_100C1BB30(*(_QWORD *)(v0 + 16));
  v2 = swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 24);
    static String.Encoding.utf8.getter(v2);
    v6 = String.init(data:encoding:)(v5, v3, v4);
    v8 = v7;
    if (!v7)
    {
      if (qword_1010EA5F0 != -1)
        swift_once(&qword_1010EA5F0, sub_100D79F3C);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B84B0);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.error.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Empty description for request body.", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

    }
    swift_task_dealloc(*(_QWORD *)(v0 + 40));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
  }
  else
  {
    v15 = swift_task_alloc(dword_1011184CC);
    *(_QWORD *)(v0 + 64) = v15;
    *(_QWORD *)v15 = v0;
    *(_QWORD *)(v15 + 8) = sub_100BE0AB4;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v0 + 24);
    return swift_task_switch(sub_100BE00C4, 0, 0);
  }
}

uint64_t sub_100BE0AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 64);
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100BE5B20;
  else
    v6 = sub_100BE5B18;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100BE0B24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *Content;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101118630);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BE501C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys, &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys, v11, v9, v10);
  LOBYTE(v24) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v24, v5, v12, v13);
  if (!v2)
  {
    Content = (int *)type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(0);
    v15 = v3 + Content[5];
    LOBYTE(v24) = 1;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v24, v5, v16, v17);
    LOBYTE(v24) = *(_BYTE *)(v3 + Content[6]);
    v25 = 2;
    v18 = sub_100435994();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, &type metadata for OwnSubmitPayloadTypes.ShareType, v18);
    v24 = *(_QWORD *)(v3 + Content[7]);
    v25 = 3;
    v19 = sub_10001A9A8(&qword_101118640);
    v20 = sub_100BE50E4(&qword_101118648, &qword_101118650, (uint64_t)&unk_100E63C70, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, v19, v20);
    v24 = *(_QWORD *)(v3 + Content[8]);
    v25 = 4;
    v21 = sub_10001A9A8(&qword_1010F1DC8);
    v22 = sub_100BE5060((unint64_t *)&qword_1010F1DD0, &qword_1010F1DD8, (uint64_t)&unk_100E707F8, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100BE0DD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Content;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, _QWORD *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;

  v34 = a2;
  v3 = type metadata accessor for Date(0);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  __chkstk_darwin(v3);
  v35 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v39 = (char **)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_10001A9A8(&qword_101118658);
  v7 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Content = type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(0);
  __chkstk_darwin(Content);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_100BE501C();
  v40 = v9;
  v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys, &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys, v15, v14, v13);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v17 = (int *)Content;
  v33 = v5;
  v42 = a1;
  v18 = v35;
  v19 = v36;
  v20 = v37;
  LOBYTE(v43) = 0;
  v21 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v22 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v39, v38, &v43, v41, v38, v21);
  v23 = *(void (**)(char *, _QWORD *, uint64_t))(v33 + 32);
  v32 = v12;
  v23(v12, v39, v22);
  LOBYTE(v43) = 1;
  v24 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v20, &v43, v41, v20, v24);
  (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(&v32[v17[5]], v18, v20);
  v44 = 2;
  v25 = sub_1004359D8();
  v39 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for OwnSubmitPayloadTypes.ShareType, &v44, v41, &type metadata for OwnSubmitPayloadTypes.ShareType, v25);
  v32[v17[6]] = v43;
  v26 = sub_10001A9A8(&qword_101118640);
  v44 = 3;
  v27 = sub_100BE50E4(&qword_101118660, &qword_101118668, (uint64_t)&unk_100E63C98, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, v26, &v44, v41, v26, v27);
  *(_QWORD *)&v32[v17[7]] = v43;
  v28 = sub_10001A9A8(&qword_1010F1DC8);
  v44 = 4;
  v29 = sub_100BE5060((unint64_t *)&qword_10110D570, &qword_10110D578, (uint64_t)&unk_100E707A8, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, v28, &v44, v41, v28, v29);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v40, v41);
  v30 = (uint64_t)v32;
  *(_QWORD *)&v32[v17[8]] = v43;
  sub_10005972C(v30, v34, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return sub_1000126B0(v30, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
}

uint64_t sub_100BE1288(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101118688);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BE5168();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropCreateRequest.Member.CodingKeys, &type metadata for KeyDropCreateRequest.Member.CodingKeys, v11, v9, v10);
  LOBYTE(v20) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for KeyDropCreateRequest.Member(0);
    v15 = *(unsigned __int8 *)(v3 + v14[5]);
    LOBYTE(v20) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v20, v5);
    v20 = *(_OWORD *)(v3 + v14[6]);
    v19 = 2;
    v16 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v16);
    v20 = *(_OWORD *)(v3 + v14[7]);
    v19 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100BE1464@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD *, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  char v35;

  v28 = a2;
  v29 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_10001A9A8(&qword_101118678);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyDropCreateRequest.Member(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100BE5168();
  v30 = v7;
  v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropCreateRequest.Member.CodingKeys, &type metadata for KeyDropCreateRequest.Member.CodingKeys, v13, v12, v11);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v15 = v5;
  v33 = a1;
  v16 = v10;
  LOBYTE(v34) = 0;
  v17 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v31;
  v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v29, &v34, v31, v29, v17);
  v20 = *(void (**)(char *, _QWORD *, uint64_t))(v3 + 32);
  v21 = (uint64_t)v16;
  v20(v16, v32, v19);
  LOBYTE(v34) = 1;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v18);
  v23 = v18;
  v24 = v8;
  *(_BYTE *)(v21 + *(int *)(v8 + 20)) = v22 & 1;
  v35 = 2;
  v25 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for Data, &v35, v23, &type metadata for Data, v25);
  *(_OWORD *)(v21 + *(int *)(v24 + 24)) = v34;
  v35 = 3;
  v26 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for Data, &v35, v31, &type metadata for Data, v25);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v26, v31);
  *(_OWORD *)(v21 + *(int *)(v24 + 28)) = v34;
  sub_10005972C(v21, v28, type metadata accessor for KeyDropCreateRequest.Member);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  return sub_1000126B0(v21, type metadata accessor for KeyDropCreateRequest.Member);
}

uint64_t sub_100BE17B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100BE17E0 + 4 * byte_100E63B60[*v0]))(0x64496572616873, 0xE700000000000000);
}

uint64_t sub_100BE17E0()
{
  return 0x6974617269707865;
}

uint64_t sub_100BE17FC()
{
  return 1701869940;
}

uint64_t sub_100BE180C()
{
  return 0x737265626D656DLL;
}

uint64_t sub_100BE1820()
{
  return 0x616B63615079656BLL;
}

uint64_t sub_100BE1840@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100BE5668(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BE1864(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BE501C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BE188C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BE501C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BE18B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100BE0DD0(a1, a2);
}

uint64_t sub_100BE18C8(_QWORD *a1)
{
  return sub_100BE0B24(a1);
}

uint64_t sub_100BE18DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100BE190C + 4 * byte_100E63B65[*v0]))(0x64497265626D656DLL, 0xE800000000000000);
}

uint64_t sub_100BE190C()
{
  return 0x72656E776FLL;
}

uint64_t sub_100BE1920()
{
  return 0x654B63696C627570;
}

uint64_t sub_100BE193C()
{
  return 0x6574707972636E65;
}

uint64_t sub_100BE1960@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100BE5898(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100BE1984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BE5168();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BE19AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BE5168();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BE19D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100BE1464(a1, a2);
}

uint64_t sub_100BE19E8(_QWORD *a1)
{
  return sub_100BE1288(a1);
}

uint64_t sub_100BE19FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BE4FD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BE1A24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BE4FD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BE1A4C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_10001A9A8(&qword_101118620);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BE4FD8();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropCreateResponse.CodingKeys, &type metadata for KeyDropCreateResponse.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_100BE1B60(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_10001A9A8(&qword_101118670);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_100BE4FD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropCreateResponse.CodingKeys, &type metadata for KeyDropCreateResponse.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100BE1C48(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_QWORD *)(v6 + 160) = a5;
  *(_QWORD *)(v6 + 168) = v5;
  *(_QWORD *)(v6 + 144) = a2;
  *(_QWORD *)(v6 + 152) = a4;
  *(_BYTE *)(v6 + 360) = a3;
  *(_QWORD *)(v6 + 136) = a1;
  v7 = *(_QWORD *)(type metadata accessor for KeyDropCreateRequest.Member(0) - 8);
  *(_QWORD *)(v6 + 176) = v7;
  *(_QWORD *)(v6 + 184) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  *(_QWORD *)(v6 + 192) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 200) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 208) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 216) = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 224) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 232) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 240) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 248) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 256) = swift_task_alloc(v13);
  return swift_task_switch(sub_100BE1D2C, v5, 0);
}

uint64_t sub_100BE1D2C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v65)(uint64_t, uint64_t, char, uint64_t, uint64_t);
  uint64_t v66;
  _QWORD *v67;

  v1 = v0;
  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v2 = v0[17];
  v3 = v0[32];
  v4 = v0[28];
  v5 = v0[29];
  v6 = v0[24];
  v7 = v0[25];
  v58 = v0[27];
  v59 = v0[20];
  v8 = v0[18];
  v61 = v0[19];
  v9 = type metadata accessor for Logger(0);
  v0[33] = sub_10001A9E8(v9, (uint64_t)qword_1011B84B0);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v64(v3, v2, v4);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v10(v58, v8, v6);
  swift_bridgeObjectRetain_n(v59, 2);
  v11 = swift_bridgeObjectRetain_n(v61, 2);
  v12 = Logger.logObject.getter(v11);
  LOBYTE(v3) = static os_log_type_t.default.getter(v12);
  v13 = os_log_type_enabled(v12, (os_log_type_t)v3);
  v14 = v0[32];
  v16 = v0[28];
  v15 = v0[29];
  v17 = v0[27];
  v60 = v0[25];
  v62 = v0[24];
  v18 = v0[19];
  v19 = v1[20];
  if (v13)
  {
    v57 = v18;
    v20 = swift_slowAlloc(62, -1);
    v66 = swift_slowAlloc(128, -1);
    *(_DWORD *)v20 = 141559299;
    v1[11] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 11, v1 + 12, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v16, v21);
    v1[12] = sub_100016940(v22, v23, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 12, v1 + 13, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    v24 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v25 = v20;
    v24(v14, v16);
    *(_WORD *)(v20 + 22) = 2082;
    v26 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v62, v26);
    v1[13] = sub_100016940(v27, v28, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v1 + 14, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v17, v62);
    *(_WORD *)(v20 + 32) = 2048;
    v29 = *(_QWORD *)(v19 + 16);
    swift_bridgeObjectRelease();
    v1[14] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 14, v1 + 15, v25 + 34, v25 + 42);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 42) = 2080;
    v30 = *(_QWORD *)(v57 + 16);
    v31 = _swiftEmptyArrayStorage;
    if (v30)
    {
      v63 = v20;
      v32 = v1[29];
      v33 = v1[22];
      v34 = v1[19];
      v67 = _swiftEmptyArrayStorage;
      sub_10009A578(0, v30, 0);
      v35 = v34 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
      v36 = *(_QWORD *)(v33 + 72);
      v31 = v67;
      do
      {
        v37 = v1[31];
        v38 = v1[28];
        v39 = v1[23];
        sub_10005972C(v35, v39, type metadata accessor for KeyDropCreateRequest.Member);
        v64(v37, v39, v38);
        sub_1000126B0(v39, type metadata accessor for KeyDropCreateRequest.Member);
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
        {
          sub_10009A578(0, v31[2] + 1, 1);
          v31 = v67;
        }
        v41 = v31[2];
        v40 = v31[3];
        if (v41 >= v40 >> 1)
        {
          sub_10009A578(v40 > 1, v41 + 1, 1);
          v31 = v67;
        }
        v42 = v1[31];
        v43 = v1[28];
        v31[2] = v41 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v32 + 32))((unint64_t)v31+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v41, v42, v43);
        v67 = v31;
        v35 += v36;
        --v30;
      }
      while (v30);
      v25 = v63;
    }
    v44 = v1[19];
    v45 = *((unsigned __int8 *)v1 + 360);
    v46 = Array.description.getter(v31, v1[28]);
    v48 = v47;
    swift_bridgeObjectRelease();
    v1[15] = sub_100016940(v46, v48, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 15, v1 + 16, v25 + 44, v25 + 52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v44, 2);
    *(_WORD *)(v25 + 52) = 2082;
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v17, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v18, 2);

  v49 = v1[26];
  v50 = v1[24];
  v52 = v1[19];
  v51 = v1[20];
  v53 = v1[18];
  v64(v1[30], v1[17], v1[28]);
  v10(v49, v53, v50);
  v54 = unk_10111845C;
  v65 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t, uint64_t))((char *)&dword_101118458 + dword_101118458);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v52);
  v55 = (_QWORD *)swift_task_alloc(v54);
  v1[34] = v55;
  *v55 = v1;
  v55[1] = sub_100BE239C;
  return v65(v1[30], v1[26], *((_BYTE *)v1 + 360), v1[19], v1[20]);
}

uint64_t sub_100BE239C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v8 = *(_QWORD **)v4;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 272);
  v8[35] = a1;
  v8[36] = a2;
  v8[37] = a3;
  v8[38] = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = v8[21];
    v11 = sub_100BE2568;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    sub_10001BBBC(a2, a3);
    v11 = sub_100BE2438;
    v10 = 0;
  }
  return swift_task_switch(v11, v10, 0);
}

uint64_t sub_100BE2438()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001BBBC(v0[36], v0[37]);
  v1 = (_QWORD *)swift_task_alloc(dword_101118464);
  v0[39] = v1;
  *v1 = v0;
  v1[1] = sub_100BE248C;
  return sub_100BE0224(v0[36], v0[37]);
}

uint64_t sub_100BE248C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (_QWORD *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = a2;
  v4 = v3[39];
  v5 = v3[36];
  v6 = v3[37];
  v3[40] = a2;
  swift_task_dealloc(v4);
  sub_10001BC14(v5, v6);
  return swift_task_switch(sub_100BE24F8, 0, 0);
}

uint64_t sub_100BE24F8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = v0[40];
  swift_bridgeObjectRelease();
  if (v1)
  {
    v2 = v0[40];
    v3 = v0[8];
    sub_10001BC14(v0[36], v0[37]);
  }
  else
  {
    sub_10001BC14(v0[36], v0[37]);
    v2 = 0xE300000000000000;
    v3 = 7104878;
  }
  v0[41] = v3;
  v0[42] = v2;
  return swift_task_switch(sub_100BE25E4, v0[21], 0);
}

uint64_t sub_100BE2568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100BE25E4()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, char);
  uint64_t v14;

  swift_bridgeObjectRetain(v0[42]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v5 = v0[41];
    v4 = v0[42];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain(v4);
    v0[10] = sub_100016940(v5, v4, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KeyDropCreateRequest: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[42], 2);
  }

  v8 = v0[36];
  v9 = v0[37];
  v10 = v0[35];
  v0[5] = &type metadata for KeyDropCreateRequest;
  v0[6] = sub_100BE4284();
  v0[2] = v10;
  v0[3] = v8;
  v0[4] = v9;
  swift_bridgeObjectRetain(v10);
  sub_10001BBBC(v8, v9);
  v13 = (uint64_t (*)(uint64_t, char))((char *)&dword_101118470 + dword_101118470);
  v11 = (_QWORD *)swift_task_alloc(unk_101118474);
  v0[43] = v11;
  *v11 = v0;
  v11[1] = sub_100BE27C0;
  return v13((uint64_t)(v0 + 2), 0);
}

uint64_t sub_100BE27C0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(*v2 + 352) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 168);
    v7 = sub_100BE28E8;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 168);
    *(_BYTE *)(v4 + 361) = a1 & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v4 + 16));
    v7 = sub_100BE2848;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100BE2848()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRelease();
  sub_10001BC14(v1, v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 361));
}

uint64_t sub_100BE28E8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100BE2988(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v3 + 153) = a2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v2;
  v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *(_QWORD *)(v3 + 80) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 88) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 104) = swift_task_alloc(v6);
  return swift_task_switch(sub_100BE29FC, v2, 0);
}

uint64_t sub_100BE29FC()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 72) + 112);
  if (v1 && (v2 = v1()) != 0)
  {
    *(_QWORD *)(v0 + 112) = v2;
    v3 = *(_QWORD **)(v0 + 64);
    v4 = v3[3];
    v5 = v3[4];
    v6 = sub_10001AA44(v3, v4);
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v5 + 8);
    v7 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, v6, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 120) = v8;
    *v8 = v0;
    v8[1] = sub_100BE2B00;
    return sub_100338A60(*(_QWORD *)(v0 + 104), v0 + 16);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10111F794);
    *(_QWORD *)(v0 + 136) = v10;
    *v10 = v0;
    v10[1] = sub_100BE2EE0;
    return sub_100D7C1F0(*(_BYTE *)(v0 + 153));
  }
}

uint64_t sub_100BE2B00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 72);
    v5 = sub_100BE2E8C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 72);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_100BE2B74;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100BE2B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 128);
  sub_100D7CA5C(*(_QWORD *)(v0 + 104));
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    swift_release();
    v26 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    if (qword_1010EA5F8 != -1)
      swift_once(&qword_1010EA5F8, sub_100D7B7E4);
    if (qword_1010EA5F0 != -1)
      swift_once(&qword_1010EA5F0, sub_100D79F3C);
    v3 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B84B0);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 80);
    if (v10)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v15 = v31;
      *(_DWORD *)v14 = 136315138;
      v16 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      *(_QWORD *)(v0 + 56) = sub_100016940(v17, v18, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v19(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Response value is %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v19(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    }

    v21 = FMNServerInteractionController.FMNResponseFields.data.getter(v20);
    v23 = v22;
    v24 = sub_100BE42C8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for KeyDropCreateResponse, v21, v23, &type metadata for KeyDropCreateResponse, v24);
    v25 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 80);
    swift_release();
    sub_10001BC14(v21, v23);
    v19(v25, v29);
    v30 = *(unsigned __int8 *)(v0 + 152);
    swift_task_dealloc(v25);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v30);
  }
}

uint64_t sub_100BE2E8C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100BE2EE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BE2F40, v3, 0);
}

uint64_t sub_100BE2F40()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v0[14] = v0[18];
  v1 = (_QWORD *)v0[8];
  v2 = v1[3];
  v3 = v1[4];
  v4 = sub_10001AA44(v1, v2);
  v0[5] = v2;
  v0[6] = *(_QWORD *)(v3 + 8);
  v5 = sub_100018F08(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5, v4, v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[15] = v6;
  *v6 = v0;
  v6[1] = sub_100BE2B00;
  return sub_100338A60(v0[13], (uint64_t)(v0 + 2));
}

uint64_t sub_100BE2FE8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = v3;
  *(_BYTE *)(v4 + 160) = a3;
  *(_QWORD *)(v4 + 64) = a1;
  v5 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *(_QWORD *)(v4 + 88) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 96) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 104) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  return swift_task_switch(sub_100BE3060, v3, 0);
}

uint64_t sub_100BE3060()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 80) + 112);
  if (v1 && (v2 = v1()) != 0)
  {
    *(_QWORD *)(v0 + 120) = v2;
    v3 = *(_QWORD **)(v0 + 72);
    v4 = v3[3];
    v5 = v3[4];
    v6 = sub_10001AA44(v3, v4);
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v5 + 8);
    v7 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, v6, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 128) = v8;
    *v8 = v0;
    v8[1] = sub_100BE3164;
    return sub_100338A60(*(_QWORD *)(v0 + 112), v0 + 16);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10111F794);
    *(_QWORD *)(v0 + 144) = v10;
    *v10 = v0;
    v10[1] = sub_100BE3554;
    return sub_100D7C1F0(*(_BYTE *)(v0 + 160));
  }
}

uint64_t sub_100BE3164()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 80);
    v5 = sub_100BE3504;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 80);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_100BE31D8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100BE31D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0[17];
  sub_100D7CA5C(v0[14]);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[14], v0[11]);
    swift_release();
    v26 = v0[13];
    swift_task_dealloc(v0[14]);
    swift_task_dealloc(v26);
    v27 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    if (qword_1010EA5F8 != -1)
      swift_once(&qword_1010EA5F8, sub_100D7B7E4);
    if (qword_1010EA5F0 != -1)
      swift_once(&qword_1010EA5F0, sub_100D79F3C);
    v3 = v0[13];
    v2 = v0[14];
    v5 = v0[11];
    v4 = v0[12];
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B84B0);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = v0[12];
    v12 = v0[13];
    v13 = v0[11];
    if (v10)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v15 = v31;
      *(_DWORD *)v14 = 136315138;
      v16 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      v0[7] = sub_100016940(v17, v18, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v19(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Response value is %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v19(v0[13], v0[11]);
    }

    v20 = type metadata accessor for KeyDropShareMetaDataResponse(0);
    v21 = FMNServerInteractionController.FMNResponseFields.data.getter(v20);
    v23 = v22;
    v24 = sub_100006204(&qword_1011184A8, type metadata accessor for KeyDropShareMetaDataResponse, (uint64_t)&unk_100E65C34);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v20, v21, v23, v20, v24);
    v25 = v0[14];
    v29 = v0[13];
    v30 = v0[11];
    swift_release();
    sub_10001BC14(v21, v23);
    v19(v25, v30);
    swift_task_dealloc(v25);
    swift_task_dealloc(v29);
    v27 = (uint64_t (*)(void))v0[1];
  }
  return v27();
}

uint64_t sub_100BE3504()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE3554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BE35B4, v3, 0);
}

uint64_t sub_100BE35B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v0[15] = v0[19];
  v1 = (_QWORD *)v0[9];
  v2 = v1[3];
  v3 = v1[4];
  v4 = sub_10001AA44(v1, v2);
  v0[5] = v2;
  v0[6] = *(_QWORD *)(v3 + 8);
  v5 = sub_100018F08(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5, v4, v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[16] = v6;
  *v6 = v0;
  v6[1] = sub_100BE3164;
  return sub_100338A60(v0[14], (uint64_t)(v0 + 2));
}

uint64_t sub_100BE365C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v3 + 153) = a2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v2;
  v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *(_QWORD *)(v3 + 80) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 88) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 104) = swift_task_alloc(v6);
  return swift_task_switch(sub_100BE36D0, v2, 0);
}

uint64_t sub_100BE36D0()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 72) + 112);
  if (v1 && (v2 = v1()) != 0)
  {
    *(_QWORD *)(v0 + 112) = v2;
    v3 = *(_QWORD **)(v0 + 64);
    v4 = v3[3];
    v5 = v3[4];
    v6 = sub_10001AA44(v3, v4);
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v5 + 8);
    v7 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, v6, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 120) = v8;
    *v8 = v0;
    v8[1] = sub_100BE37D4;
    return sub_100338A60(*(_QWORD *)(v0 + 104), v0 + 16);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10111F794);
    *(_QWORD *)(v0 + 136) = v10;
    *v10 = v0;
    v10[1] = sub_100BE3BC8;
    return sub_100D7C1F0(*(_BYTE *)(v0 + 153));
  }
}

uint64_t sub_100BE37D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 72);
    v5 = sub_100BE3B78;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 72);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_100BE3848;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100BE3848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 128);
  sub_100D7CA5C(*(_QWORD *)(v0 + 104));
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    swift_release();
    v26 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_1010EA5F8 != -1)
      swift_once(&qword_1010EA5F8, sub_100D7B7E4);
    if (qword_1010EA5F0 != -1)
      swift_once(&qword_1010EA5F0, sub_100D79F3C);
    v3 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 88);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B84B0);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 80);
    if (v10)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v15 = v31;
      *(_DWORD *)v14 = 136315138;
      v16 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      *(_QWORD *)(v0 + 56) = sub_100016940(v17, v18, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v19(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Response value is %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v19(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    }

    v21 = FMNServerInteractionController.FMNResponseFields.data.getter(v20);
    v23 = v22;
    v24 = sub_100BE4320();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for KeyDropUpdateResponse, v21, v23, &type metadata for KeyDropUpdateResponse, v24);
    v25 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 80);
    swift_release();
    sub_10001BC14(v21, v23);
    v19(v25, v29);
    v30 = *(unsigned __int8 *)(v0 + 152);
    swift_task_dealloc(v25);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v30);
  }
}

uint64_t sub_100BE3B78()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE3BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BE3C28, v3, 0);
}

uint64_t sub_100BE3C28()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v0[14] = v0[18];
  v1 = (_QWORD *)v0[8];
  v2 = v1[3];
  v3 = v1[4];
  v4 = sub_10001AA44(v1, v2);
  v0[5] = v2;
  v0[6] = *(_QWORD *)(v3 + 8);
  v5 = sub_100018F08(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5, v4, v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[15] = v6;
  *v6 = v0;
  v6[1] = sub_100BE37D4;
  return sub_100338A60(v0[13], (uint64_t)(v0 + 2));
}

uint64_t type metadata accessor for KeyDropCreateRequest.Member(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011185D8, (uint64_t)&nominal type descriptor for KeyDropCreateRequest.Member);
}

uint64_t sub_100BE3CE4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t Content;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (__cdecl *v11)();

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  *(_BYTE *)(v5 + 192) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  Content = type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(0);
  *(_QWORD *)(v5 + 48) = Content;
  *(_QWORD *)(v5 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(Content - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v5 + 64) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 72) = v8;
  *(_QWORD *)(v5 + 80) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (__cdecl *)())((char *)&dword_101118488 + dword_101118488);
  v9 = (_QWORD *)swift_task_alloc(unk_10111848C);
  *(_QWORD *)(v5 + 88) = v9;
  *v9 = v5;
  v9[1] = sub_100BE3D94;
  return v11();
}

uint64_t sub_100BE3D94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BE3DF0, 0, 0);
}

uint64_t sub_100BE3DF0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD **)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(int **)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 24);
  v24 = *(_QWORD *)(v0 + 32);
  v25 = *(_QWORD *)(v0 + 40);
  v23 = *(_BYTE *)(v0 + 192);
  v8 = *(_QWORD *)(v0 + 16);
  v9 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = swift_bridgeObjectRetain(v1);
  *(_QWORD *)(v0 + 104) = JSONEncoder.init()(v10);
  *v2 = sub_1002994E8;
  v2[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v2, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v5);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v2);
  v11 = type metadata accessor for UUID(0);
  *(_QWORD *)(v0 + 112) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v0 + 120) = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v4, v8, v11);
  v13 = v4 + v6[5];
  v14 = type metadata accessor for Date(0);
  *(_QWORD *)(v0 + 128) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v0 + 136) = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v7, v14);
  *(_BYTE *)(v4 + v6[6]) = v23;
  *(_QWORD *)(v4 + v6[7]) = v24;
  *(_QWORD *)(v4 + v6[8]) = v25;
  v16 = sub_100006204(&qword_101118490, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent, (uint64_t)&unk_100E63D68);
  v17 = dispatch thunk of JSONEncoder.encode<A>(_:)(v4, v6, v16);
  *(_QWORD *)(v0 + 144) = v17;
  *(_QWORD *)(v0 + 152) = v18;
  v19 = v17;
  v20 = v18;
  v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101118498 + dword_101118498);
  v21 = (_QWORD *)swift_task_alloc(unk_10111849C);
  *(_QWORD *)(v0 + 160) = v21;
  *v21 = v0;
  v21[1] = sub_100BE4048;
  return v26(v19, v20);
}

uint64_t sub_100BE4048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 160);
  *(_QWORD *)(*v3 + 168) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    swift_bridgeObjectRelease();
    v8 = sub_100BE41C4;
  }
  else
  {
    *(_QWORD *)(v6 + 176) = a2;
    *(_QWORD *)(v6 + 184) = a1;
    v8 = sub_100BE40C8;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100BE40C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
  sub_1000126B0(v6, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
  swift_bridgeObjectRetain(v5);
  sub_10001BBBC(v11, v10);
  swift_bridgeObjectRelease_n(v5, 2);
  sub_10001BC14(v11, v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 176));
}

uint64_t sub_100BE41C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
  sub_1000126B0(v6, type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100BE4284()
{
  unint64_t result;

  result = qword_101118468;
  if (!qword_101118468)
  {
    result = swift_getWitnessTable(byte_100E63DB8, &type metadata for KeyDropCreateRequest);
    atomic_store(result, (unint64_t *)&qword_101118468);
  }
  return result;
}

unint64_t sub_100BE42C8()
{
  unint64_t result;

  result = qword_101118478;
  if (!qword_101118478)
  {
    result = swift_getWitnessTable(aY_75, &type metadata for KeyDropCreateResponse);
    atomic_store(result, &qword_101118478);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent(uint64_t a1)
{
  return sub_10001B630(a1, qword_101118538, (uint64_t)&nominal type descriptor for KeyDropCreateRequest.KeyDropCreateContent);
}

unint64_t sub_100BE4320()
{
  unint64_t result;

  result = qword_1011184B8;
  if (!qword_1011184B8)
  {
    result = swift_getWitnessTable("!\b%", &type metadata for KeyDropUpdateResponse);
    atomic_store(result, &qword_1011184B8);
  }
  return result;
}

_QWORD *sub_100BE4364(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v13 = *(_QWORD *)((char *)a2 + v12);
    *(_QWORD *)((char *)a1 + v12) = v13;
    v14 = a3[8];
    v15 = *(_QWORD *)((char *)a2 + v14);
    *(_QWORD *)((char *)a1 + v14) = v15;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
  }
  return a1;
}

uint64_t sub_100BE4440(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
}

uint64_t sub_100BE44BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v13 = a3[8];
  v14 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_100BE456C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100BE4634(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100BE46D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[8];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_100BE478C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BE4798);
}

uint64_t sub_100BE4798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100BE4840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BE484C);
}

uint64_t sub_100BE484C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_100BE48F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_100E63BE8;
      v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyDropCreateResponse(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100BE49D8 + 4 * byte_100E63B72[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100BE4A0C + 4 * byte_100E63B6D[v4]))();
}

uint64_t sub_100BE4A0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BE4A14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BE4A1CLL);
  return result;
}

uint64_t sub_100BE4A28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BE4A30);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100BE4A34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BE4A3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateResponse()
{
  return &type metadata for KeyDropCreateResponse;
}

ValueMetadata *type metadata accessor for KeyDropCreateRequest()
{
  return &type metadata for KeyDropCreateRequest;
}

_QWORD *sub_100BE4A68(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = *(_QWORD *)((char *)a2 + v8);
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    sub_10001BBBC(v10, v11);
    *v9 = v10;
    v9[1] = v11;
    v12 = a3[7];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = *v14;
    v16 = v14[1];
    sub_10001BBBC(*v14, v16);
    *v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t sub_100BE4B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
  return sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_100BE4B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (uint64_t *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  sub_10001BBBC(v9, v10);
  *v8 = v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_10001BBBC(*v13, v15);
  *v12 = v14;
  v12[1] = v15;
  return a1;
}

uint64_t sub_100BE4C2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001BBBC(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_10001BC14(v12, v13);
  v14 = a3[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_10001BBBC(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_10001BC14(v19, v20);
  return a1;
}

uint64_t sub_100BE4CE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100BE4D50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001BC14(v8, v9);
  v10 = a3[7];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_10001BC14(v11, v12);
  return a1;
}

uint64_t sub_100BE4DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BE4DE4);
}

uint64_t sub_100BE4DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100BE4E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BE4E7C);
}

uint64_t sub_100BE4E7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t sub_100BE4EF4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E63C40;
    v4[2] = &unk_100E63C58;
    v4[3] = &unk_100E63C58;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100BE4F70(uint64_t a1)
{
  unint64_t result;

  result = sub_100BE4F94();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100BE4F94()
{
  unint64_t result;

  result = qword_101118618;
  if (!qword_101118618)
  {
    result = swift_getWitnessTable(a9_25, &type metadata for KeyDropCreateRequest);
    atomic_store(result, (unint64_t *)&qword_101118618);
  }
  return result;
}

unint64_t sub_100BE4FD8()
{
  unint64_t result;

  result = qword_101118628;
  if (!qword_101118628)
  {
    result = swift_getWitnessTable(byte_100E640A8, &type metadata for KeyDropCreateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118628);
  }
  return result;
}

unint64_t sub_100BE501C()
{
  unint64_t result;

  result = qword_101118638;
  if (!qword_101118638)
  {
    result = swift_getWitnessTable(aA_58, &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118638);
  }
  return result;
}

uint64_t sub_100BE5060(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F1DC8);
    v10 = sub_100006204(a2, type metadata accessor for KeyDropInterface.KeyPackage, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100BE50E4(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_101118640);
    v10 = sub_100006204(a2, type metadata accessor for KeyDropCreateRequest.Member, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100BE5168()
{
  unint64_t result;

  result = qword_101118680;
  if (!qword_101118680)
  {
    result = swift_getWitnessTable(byte_100E64008, &type metadata for KeyDropCreateRequest.Member.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118680);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyDropCreateRequest.Member.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100BE51F8 + 4 * byte_100E63B7C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100BE522C + 4 * byte_100E63B77[v4]))();
}

uint64_t sub_100BE522C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BE5234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BE523CLL);
  return result;
}

uint64_t sub_100BE5248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BE5250);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100BE5254(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BE525C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateRequest.Member.CodingKeys()
{
  return &type metadata for KeyDropCreateRequest.Member.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100BE52C4 + 4 * byte_100E63B86[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100BE52F8 + 4 * byte_100E63B81[v4]))();
}

uint64_t sub_100BE52F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BE5300(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BE5308);
  return result;
}

uint64_t sub_100BE5314(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BE531CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100BE5320(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BE5328(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys()
{
  return &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KeyDropCreateResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BE5384 + 4 * byte_100E63B8B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BE53A4 + 4 * byte_100E63B90[v4]))();
}

_BYTE *sub_100BE5384(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BE53A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BE53AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BE53B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BE53BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BE53C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropCreateResponse.CodingKeys()
{
  return &type metadata for KeyDropCreateResponse.CodingKeys;
}

unint64_t sub_100BE53E4()
{
  unint64_t result;

  result = qword_101118690;
  if (!qword_101118690)
  {
    result = swift_getWitnessTable(byte_100E63E70, &type metadata for KeyDropCreateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118690);
  }
  return result;
}

unint64_t sub_100BE542C()
{
  unint64_t result;

  result = qword_101118698;
  if (!qword_101118698)
  {
    result = swift_getWitnessTable(aA_59, &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118698);
  }
  return result;
}

unint64_t sub_100BE5474()
{
  unint64_t result;

  result = qword_1011186A0;
  if (!qword_1011186A0)
  {
    result = swift_getWitnessTable(byte_100E63FE0, &type metadata for KeyDropCreateRequest.Member.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011186A0);
  }
  return result;
}

unint64_t sub_100BE54BC()
{
  unint64_t result;

  result = qword_1011186A8;
  if (!qword_1011186A8)
  {
    result = swift_getWitnessTable(byte_100E63F50, &type metadata for KeyDropCreateRequest.Member.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011186A8);
  }
  return result;
}

unint64_t sub_100BE5504()
{
  unint64_t result;

  result = qword_1011186B0;
  if (!qword_1011186B0)
  {
    result = swift_getWitnessTable(byte_100E63F78, &type metadata for KeyDropCreateRequest.Member.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011186B0);
  }
  return result;
}

unint64_t sub_100BE554C()
{
  unint64_t result;

  result = qword_1011186B8;
  if (!qword_1011186B8)
  {
    result = swift_getWitnessTable(byte_100E63E98, &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011186B8);
  }
  return result;
}

unint64_t sub_100BE5594()
{
  unint64_t result;

  result = qword_1011186C0;
  if (!qword_1011186C0)
  {
    result = swift_getWitnessTable(byte_100E63EC0, &type metadata for KeyDropCreateRequest.KeyDropCreateContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011186C0);
  }
  return result;
}

unint64_t sub_100BE55DC()
{
  unint64_t result;

  result = qword_1011186C8;
  if (!qword_1011186C8)
  {
    result = swift_getWitnessTable(aA_60, &type metadata for KeyDropCreateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011186C8);
  }
  return result;
}

unint64_t sub_100BE5624()
{
  unint64_t result;

  result = qword_1011186D0;
  if (!qword_1011186D0)
  {
    result = swift_getWitnessTable(aI_56, &type metadata for KeyDropCreateResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011186D0);
  }
  return result;
}

uint64_t sub_100BE5668(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x64496572616873 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496572616873, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL)
  {
    v7 = 0xEA00000000006E6FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x737265626D656DLL && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737265626D656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x616B63615079656BLL && a2 == 0xEB00000000736567)
  {
    swift_bridgeObjectRelease(0xEB00000000736567);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x616B63615079656BLL, 0xEB00000000736567, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100BE5898(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x64497265626D656DLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64497265626D656DLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x72656E776FLL && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656E776FLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079)
  {
    v8 = 0xE900000000000079;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xEE00646C65694664)
  {
    swift_bridgeObjectRelease(0xEE00646C65694664);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xEE00646C65694664, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100BE5A78()
{
  return sub_100BDFA70();
}

uint64_t sub_100BE5AC8()
{
  return sub_100BDFF2C();
}

uint64_t sub_100BE5B24(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)(v3 + 360) = a2;
  *(_QWORD *)(v3 + 248) = a1;
  *(_QWORD *)(v3 + 256) = v2;
  v4 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 264) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 272) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 280) = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 288) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 296) = swift_task_alloc(v7);
  return swift_task_switch(sub_100BE5B9C, v2, 0);
}

uint64_t sub_100BE5B9C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 304) = v2;
    *v2 = v0;
    v2[1] = sub_100BE5C88;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BE5C88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BE5CE8, v3, 0);
}

uint64_t sub_100BE5CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 312);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100BE5DE0, *(_QWORD *)(v0 + 312), 0);
  type metadata accessor for UpdateBatteryLevelError(0);
  v4 = v3;
  *(_QWORD *)(v0 + 208) = 3;
  v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v6 = sub_100006C64(&qword_1010EB2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  v7 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 200), v0 + 208, v5, v4, v6);
  swift_willThrow(v7);
  v8 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE5DE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = v0[39];
  v2 = v0[37];
  v4 = v0[34];
  v3 = v0[35];
  v5 = v0[33];
  v6 = v0[31];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[40] = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010B38C8, v9 + v3, v8 | 7);
  v0[41] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[42] = v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v12 = v0;
  v12[1] = sub_100BE5EDC;
  return unsafeBlocking<A>(_:)(v0 + 7, sub_1000D9638, v10, v13);
}

uint64_t sub_100BE5EDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  swift_release();
  return swift_task_switch(sub_100BE5F3C, v1, 0);
}

uint64_t sub_100BE5F3C()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (__int128 *)(v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC(v1, v0 + 136);
    v2 = swift_task_alloc(dword_10111870C);
    *(_QWORD *)(v0 + 344) = v2;
    *(_QWORD *)v2 = v0;
    *(_QWORD *)(v2 + 8) = sub_100BE6278;
    v3 = *(_QWORD *)(v0 + 256);
    *(_BYTE *)(v2 + 80) = *(_BYTE *)(v0 + 360);
    *(_QWORD *)(v2 + 32) = v0 + 136;
    *(_QWORD *)(v2 + 40) = v3;
    return swift_task_switch(sub_100BE63A4, v3, 0);
  }
  else
  {
    sub_100004048((uint64_t)v1, (uint64_t *)&unk_1010EE310);
    if (qword_1010E9930 != -1)
      swift_once(&qword_1010E9930, sub_1000AEA0C);
    v5 = *(_QWORD *)(v0 + 248);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
    v7 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 264);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B6730);
    v10 = v6(v7, v5, v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 264);
    if (v13)
    {
      v27 = *(_QWORD *)(v0 + 272);
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(32, -1);
      v28 = v17;
      *(_DWORD *)v16 = 141558275;
      *(_QWORD *)(v0 + 232) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2081;
      v18 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
      *(_QWORD *)(v0 + 240) = sub_100016940(v19, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v14, v15);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "updateBatteryLevelAndNotify: No beacon record for %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 264));
    }

    type metadata accessor for UpdateBatteryLevelError(0);
    v22 = v21;
    *(_QWORD *)(v0 + 224) = 1;
    v23 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v24 = sub_100006C64(&qword_1010EB2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
    v25 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 216), v0 + 224, v23, v22, v24);
    swift_willThrow(v25);
    swift_release();
    v26 = *(_QWORD *)(v0 + 288);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BE6278()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  *(_QWORD *)(*v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100BE6338;
  else
    v4 = sub_100BE62DC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 256), 0);
}

uint64_t sub_100BE62DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 296);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE6338()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 288);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE6388(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = v2;
  return swift_task_switch(sub_100BE63A4, v2, 0);
}

uint64_t sub_100BE63A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v2, v3) & 1) != 0)
  {
    v4 = *(_QWORD **)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_BYTE *)(v0 + 80);
    v7 = sub_100BE7F38(v4, v6);
    *(_QWORD *)(v0 + 48) = v7;
    v9 = sub_100006C64(&qword_1011187D8, v8, (uint64_t (*)(uint64_t))type metadata accessor for BatteryLevelService, (uint64_t)&unk_100E64150);
    v10 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 56) = v10;
    *(_QWORD *)(v10 + 16) = v7;
    *(_BYTE *)(v10 + 24) = v6;
    *(_QWORD *)(v10 + 32) = v5;
    *(_QWORD *)(v10 + 40) = v4;
    v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 64) = v11;
    *v11 = v0;
    v11[1] = sub_100BE6554;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v11, v5, v9, 0xD000000000000036, 0x8000000100EF3300, sub_100BE8268, v10, &type metadata for () + 1);
  }
  else
  {
    type metadata accessor for UpdateBatteryLevelError(0);
    v14 = v13;
    *(_QWORD *)(v0 + 24) = 3;
    v15 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v16 = sub_100006C64(&qword_1010EB2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
    v17 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v15, v14, v16);
    swift_willThrow(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BE6554()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 40);
    v5 = sub_100BE65C8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 40);
    swift_task_dealloc(*(_QWORD *)(v2 + 56));
    v5 = sub_100396274;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100BE65C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE6604(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[2];
  char v27;

  v24 = a4;
  v25 = a2;
  v23 = a1;
  v9 = sub_10001A9A8(&qword_1010F8318);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v27 = a3;
  sub_100030784(a5, (uint64_t)v26);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v12((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 64) & ~v13;
  v15 = v13 | 7;
  v16 = swift_allocObject(&unk_1010B3878, v14 + v11, v13 | 7);
  *(_QWORD *)(v16 + 16) = a4;
  sub_10000F9FC(v26, v16 + 24);
  v17 = v16 + v14;
  v18 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v18(v17, (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  v12((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v9);
  v19 = (v13 + 16) & ~v13;
  v20 = swift_allocObject(&unk_1010B38A0, v19 + v11, v15);
  v18(v20 + v19, (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  swift_retain();
  dispatch thunk of HysteresisFilter.processInput(newValue:outputBlock:ignoreBlock:)(&v27, &unk_1011187F0, v16, &unk_101118800, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_100BE6784(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v7;
  char v8;
  _QWORD *v9;

  *(_QWORD *)(v5 + 24) = a5;
  v7 = *a2;
  v8 = *a1;
  v9 = (_QWORD *)swift_task_alloc(dword_101118714);
  *(_QWORD *)(v5 + 32) = v9;
  *v9 = v5;
  v9[1] = sub_100BE67F8;
  return sub_100BE69D0(a4, v8, v7);
}

uint64_t sub_100BE67F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100BE689C;
  else
    v3 = sub_100BE685C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BE685C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10001A9A8(&qword_1010F8318);
  CheckedContinuation.resume(returning:)(v1, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE689C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  v1 = sub_10001A9A8(&qword_1010F8318);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE68EC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_switch(sub_100BE6904, 0, 0);
}

uint64_t sub_100BE6904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for UpdateBatteryLevelError(0);
  v2 = v1;
  *(_QWORD *)(v0 + 24) = 4;
  v3 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v4 = sub_100006C64(&qword_1010EB2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v3, v2, v4);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 16);
  v5 = sub_10001A9A8(&qword_1010F8318);
  CheckedContinuation.resume(throwing:)(v0 + 24, v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE69D0(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_BYTE *)(v4 + 681) = a3;
  *(_BYTE *)(v4 + 680) = a2;
  *(_QWORD *)(v4 + 480) = a1;
  *(_QWORD *)(v4 + 488) = v3;
  v5 = type metadata accessor for BeaconNamingRecord(0);
  *(_QWORD *)(v4 + 496) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 504) = v6;
  *(_QWORD *)(v4 + 512) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 520) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 528) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v4 + 536) = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 544) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 552) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 560) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 568) = swift_task_alloc(v10);
  v11 = sub_10001A9A8((uint64_t *)&unk_101105880);
  *(_QWORD *)(v4 + 576) = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 584) = swift_task_alloc(v12);
  *(_QWORD *)(v4 + 592) = swift_task_alloc(v12);
  return swift_task_switch(sub_100BE6AC4, v3, 0);
}

uint64_t sub_100BE6AC4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;

  if (!sub_100CA37F0(*(_QWORD **)(v0 + 480), *(_BYTE *)(v0 + 680), *(_BYTE *)(v0 + 681)))
  {
    if (qword_1010E9930 != -1)
      swift_once(&qword_1010E9930, sub_1000AEA0C);
    v4 = *(_QWORD *)(v0 + 480);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B6730);
    v6 = sub_100030784(v4, v0 + 160);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.info.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = *(_QWORD *)(v0 + 568);
      v25 = *(_QWORD *)(v0 + 528);
      v10 = *(_QWORD *)(v0 + 520);
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(32, -1);
      v27 = v12;
      *(_DWORD *)v11 = 141558275;
      *(_QWORD *)(v0 + 416) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2081;
      v14 = *(_QWORD *)(v0 + 184);
      v13 = *(_QWORD *)(v0 + 192);
      sub_10001AA44((_QWORD *)(v0 + 160), v14);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8) + 32))(v14);
      v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v10, v15);
      v18 = v17;
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v9, v10);
      *(_QWORD *)(v0 + 408) = sub_100016940(v16, v18, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 160));
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Not posting low battery notification for %{private,mask.hash}s.", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 160));
    }

    v19 = *(_QWORD *)(v0 + 584);
    v20 = *(_QWORD *)(v0 + 568);
    v21 = *(_QWORD *)(v0 + 560);
    v22 = *(_QWORD *)(v0 + 552);
    v23 = *(_QWORD *)(v0 + 544);
    v24 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 592));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 360, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 320, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 344))
  {
    sub_10000F9FC((__int128 *)(v0 + 320), v0 + 280);
    sub_10001AA44((_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 304));
    v26 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 600) = v2;
    *v2 = v0;
    v2[1] = sub_100BE6E44;
    v3 = v26;
    return v3();
  }
  __break(1u);
  return result;
}

uint64_t sub_100BE6E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 608) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BE6EA4, v3, 0);
}

uint64_t sub_100BE6EA4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)(v0 + 280);
  if (*(_QWORD *)(v0 + 608))
  {
    v2 = *(_QWORD **)(v0 + 480);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = v2[3];
    v4 = v2[4];
    sub_10001AA44(v2, v3);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 32))(v3);
    return swift_task_switch(sub_100BE7020, *(_QWORD *)(v0 + 608), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for UpdateBatteryLevelError(0);
    v7 = v6;
    *(_QWORD *)(v0 + 392) = 3;
    v8 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v9 = sub_100006C64(&qword_1010EB2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
    v10 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 384), v0 + 392, v8, v7, v9);
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 584);
    v12 = *(_QWORD *)(v0 + 568);
    v13 = *(_QWORD *)(v0 + 560);
    v14 = *(_QWORD *)(v0 + 552);
    v15 = *(_QWORD *)(v0 + 544);
    v16 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 592));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BE7020()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[76];
  v2 = v0[70];
  v3 = v0[67];
  v4 = v0[66];
  v5 = v0[65];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[71], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010B3850, v7 + v3, v6 | 7);
  v0[77] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[78] = v10;
  *v10 = v0;
  v10[1] = sub_100BE7104;
  return unsafeBlocking<A>(_:)(v0[74], sub_100BE819C, v8, v0[72]);
}

uint64_t sub_100BE7104()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 568);
  v3 = *(_QWORD *)(*v0 + 528);
  v4 = *(_QWORD *)(*v0 + 520);
  swift_task_dealloc(*(_QWORD *)(*v0 + 624));
  swift_release();
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v1 + 632) = v5;
  v5(v2, v4);
  return swift_task_switch(sub_100BE7190, *(_QWORD *)(v1 + 608), 0);
}

uint64_t sub_100BE7190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 608);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 640) = v3;
  v4 = type metadata accessor for BeaconKeyManager(0);
  *v3 = v0;
  v3[1] = sub_100BE7214;
  return unsafeBlocking<A>(_:)(v0 + 400, sub_10007C6FC, v1, v4);
}

uint64_t sub_100BE7214()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 640));
  swift_release();
  return swift_task_switch(sub_100BE7270, *(_QWORD *)(v1 + 608), 0);
}

uint64_t sub_100BE7270()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[61];
  v0[81] = v0[50];
  return swift_task_switch(sub_100BE728C, v1, 0);
}

uint64_t sub_100BE728C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uid_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;

  if (qword_1010E9930 != -1)
    swift_once(&qword_1010E9930, sub_1000AEA0C);
  v1 = *(_QWORD *)(v0 + 480);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 656) = sub_10001A9E8(v2, (uint64_t)qword_1011B6730);
  v3 = sub_100030784(v1, v0 + 240);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 632);
    v6 = *(_QWORD *)(v0 + 568);
    v7 = *(_QWORD *)(v0 + 520);
    v8 = *(unsigned __int8 *)(v0 + 680);
    v9 = swift_slowAlloc(32, -1);
    v38 = swift_slowAlloc(32, -1);
    v40 = v38;
    *(_DWORD *)v9 = 134218499;
    *(_QWORD *)(v0 + 456) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2160;
    *(_QWORD *)(v0 + 464) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2081;
    v11 = *(_QWORD *)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 272);
    sub_10001AA44((_QWORD *)(v0 + 240), v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    v15 = v14;
    v39(v6, v7);
    *(_QWORD *)(v0 + 472) = sub_100016940(v13, v15, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 480, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "updateBatteryLevelAndNotify %ld for %{private,mask.hash}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
  }

  v16 = *(_QWORD *)(v0 + 584);
  v17 = *(_QWORD *)(v0 + 496);
  v18 = *(_QWORD *)(v0 + 504);
  sub_10000F9B8(*(_QWORD *)(v0 + 592), v16, (uint64_t *)&unk_101105880);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  v20 = *(_QWORD *)(v0 + 584);
  if (v19 == 1)
  {
    v21 = *(_QWORD **)(v0 + 480);
    sub_100004048(v20, (uint64_t *)&unk_101105880);
    v22 = v21[3];
    v23 = v21[4];
    sub_10001AA44(v21, v22);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 32))(v22);
    v24 = getuid();
    sub_100A06500(v24);
    return swift_task_switch(sub_100BE76C8, 0, 0);
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 496);
    sub_100BE8224(v20, v26);
    v28 = (uint64_t *)(v26 + *(int *)(v27 + 32));
    v29 = *v28;
    v30 = v28[1];
    swift_bridgeObjectRetain(v30);
    sub_100A01DF4(v26);
    if (qword_1010EA140 != -1)
      swift_once(&qword_1010EA140, sub_100A3A528);
    v31 = *(_QWORD *)(v0 + 592);
    sub_100CA3A64(*(_QWORD *)(v0 + 480), *(unsigned __int8 *)(v0 + 680), v29, v30);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_100004048(v31, (uint64_t *)&unk_101105880);
    v32 = *(_QWORD *)(v0 + 584);
    v33 = *(_QWORD *)(v0 + 568);
    v34 = *(_QWORD *)(v0 + 560);
    v35 = *(_QWORD *)(v0 + 552);
    v36 = *(_QWORD *)(v0 + 544);
    v37 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 592));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BE76C8()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1010FCEDC);
  v0[83] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100BE7734;
  return sub_100478B94((uint64_t)(v0 + 11), v0[69], v0[68]);
}

uint64_t sub_100BE7734()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  *(_QWORD *)(*(_QWORD *)v1 + 672) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100BE7BC4;
    v5 = 0;
  }
  else
  {
    v6 = (void (*)(uint64_t, uint64_t))v2[79];
    v7 = v2[69];
    v8 = v2[68];
    v9 = v2[65];
    v10 = v2[61];
    v6(v8, v9);
    v6(v7, v9);
    v4 = sub_100BE77CC;
    v5 = v10;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100BE77CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  sub_100BE81DC(v0 + 88, v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
    sub_10007CB54((uint64_t *)(v0 + 88));
    if (qword_1010EA140 != -1)
      swift_once(&qword_1010EA140, sub_100A3A528);
    v3 = *(_QWORD *)(v0 + 592);
    sub_100CA3A64(*(_QWORD *)(v0 + 480), *(unsigned __int8 *)(v0 + 680), v2, v1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    sub_100004048(v3, (uint64_t *)&unk_101105880);
    v4 = *(_QWORD *)(v0 + 584);
    v5 = *(_QWORD *)(v0 + 568);
    v6 = *(_QWORD *)(v0 + 560);
    v7 = *(_QWORD *)(v0 + 552);
    v8 = *(_QWORD *)(v0 + 544);
    v9 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 592));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v11 = sub_100030784(*(_QWORD *)(v0 + 480), v0 + 200);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v37 = *(void (**)(uint64_t, uint64_t))(v0 + 632);
      v14 = *(_QWORD *)(v0 + 568);
      v15 = *(_QWORD *)(v0 + 520);
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(32, -1);
      v38 = v17;
      *(_DWORD *)v16 = 141558275;
      *(_QWORD *)(v0 + 440) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2081;
      v19 = *(_QWORD *)(v0 + 224);
      v18 = *(_QWORD *)(v0 + 232);
      sub_10001AA44((_QWORD *)(v0 + 200), v19);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) + 32))(v19);
      v20 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v15, v20);
      v23 = v22;
      v37(v14, v15);
      *(_QWORD *)(v0 + 448) = sub_100016940(v21, v23, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 200));
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "updateBatteryLevelAndNotify: no name record found for %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 200));
    }

    v24 = *(_QWORD *)(v0 + 592);
    type metadata accessor for UpdateBatteryLevelError(0);
    v26 = v25;
    *(_QWORD *)(v0 + 432) = 2;
    v27 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_100006C64(&qword_1010EB2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
    v29 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 424), v0 + 432, v27, v26, v28);
    swift_willThrow(v29);
    swift_release();
    swift_release();
    sub_100004048(v24, (uint64_t *)&unk_101105880);
    v30 = *(_QWORD *)(v0 + 584);
    v31 = *(_QWORD *)(v0 + 568);
    v32 = *(_QWORD *)(v0 + 560);
    v33 = *(_QWORD *)(v0 + 552);
    v34 = *(_QWORD *)(v0 + 544);
    v35 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 592));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v10();
}

uint64_t sub_100BE7BC4()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void (*)(uint64_t, uint64_t))v0[79];
  v2 = v0[69];
  v3 = v0[68];
  v4 = v0[65];
  v5 = v0[61];
  swift_errorRelease(v0[84]);
  v1(v3, v4);
  v1(v2, v4);
  return swift_task_switch(sub_100BE7C3C, v5, 0);
}

uint64_t sub_100BE7C3C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;

  v1 = sub_100030784(*(_QWORD *)(v0 + 480), v0 + 200);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v0 + 632);
    v4 = *(_QWORD *)(v0 + 568);
    v5 = *(_QWORD *)(v0 + 520);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    v28 = v7;
    *(_DWORD *)v6 = 141558275;
    *(_QWORD *)(v0 + 440) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v9 = *(_QWORD *)(v0 + 224);
    v8 = *(_QWORD *)(v0 + 232);
    sub_10001AA44((_QWORD *)(v0 + 200), v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 32))(v9);
    v10 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v5, v10);
    v13 = v12;
    v27(v4, v5);
    *(_QWORD *)(v0 + 448) = sub_100016940(v11, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 200));
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "updateBatteryLevelAndNotify: no name record found for %{private,mask.hash}s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 200));
  }

  v14 = *(_QWORD *)(v0 + 592);
  type metadata accessor for UpdateBatteryLevelError(0);
  v16 = v15;
  *(_QWORD *)(v0 + 432) = 2;
  v17 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v18 = sub_100006C64(&qword_1010EB2C0, 255, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  v19 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 424), v0 + 432, v17, v16, v18);
  swift_willThrow(v19);
  swift_release();
  swift_release();
  sub_100004048(v14, (uint64_t *)&unk_101105880);
  v20 = *(_QWORD *)(v0 + 584);
  v21 = *(_QWORD *)(v0 + 568);
  v22 = *(_QWORD *)(v0 + 560);
  v23 = *(_QWORD *)(v0 + 552);
  v24 = *(_QWORD *)(v0 + 544);
  v25 = *(_QWORD *)(v0 + 512);
  swift_task_dealloc(*(_QWORD *)(v0 + 592));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BE7F38(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  _QWORD *v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, __n128);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];
  char v32[24];

  v3 = v2;
  v29 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v29 - 8);
  v7 = __chkstk_darwin(v29);
  v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - v9;
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
  v14 = *(void (**)(uint64_t, uint64_t))(v13 + 32);
  v14(v12, v13);
  v15 = (_QWORD *)(v3 + 128);
  v16 = swift_beginAccess(v3 + 128, v32, 0, 0);
  v17 = *(_QWORD *)(v3 + 128);
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + 128));
  v18 = sub_100003FB0((uint64_t)v10);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v21 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
    v22 = v10;
    v23 = v29;
    v21(v22, v29, v16);
    sub_10001A9A8(&qword_1011187E0);
    v31[0] = a2;
    v20 = HysteresisFilter.__allocating_init(currentValue:threshold:)(v31, 3);
    v24 = (uint64_t)v28;
    v14(v12, v13);
    swift_beginAccess(v15, v31, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v30 = *v15;
    *v15 = 0x8000000000000000;
    sub_10010BD00(v20, v24, isUniquelyReferenced_nonNull_native);
    *v15 = v30;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v21)(v24, v23);
    swift_endAccess(v31);
    return v20;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v29);
  return v20;
}

uint64_t type metadata accessor for BatteryLevelService()
{
  return objc_opt_self(_TtC12searchpartyd19BatteryLevelService);
}

uint64_t sub_100BE815C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1011187D8, a2, (uint64_t (*)(uint64_t))type metadata accessor for BatteryLevelService, (uint64_t)&unk_100E64150);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100BE819C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A82924(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100BE81DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F4830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BE8224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconNamingRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100BE8268(uint64_t a1)
{
  uint64_t v1;

  return sub_100BE6604(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100BE8278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010F8318);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100BE82F8(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8) + 80);
  v7 = v2 + 24;
  v8 = v2 + ((v6 + 64) & ~v6);
  v9 = (_QWORD *)swift_task_alloc(dword_1011187EC);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100004C28;
  v9[3] = v8;
  LOBYTE(a2) = *a2;
  LOBYTE(a1) = *a1;
  v10 = (_QWORD *)swift_task_alloc(dword_101118714);
  v9[4] = v10;
  *v10 = v9;
  v10[1] = sub_100BE67F8;
  return sub_100BE69D0(v7, (char)a1, (char)a2);
}

uint64_t sub_100BE83B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010F8318);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100BE841C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1011187FC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[4] = v3;
  return swift_task_switch(sub_100BE6904, 0, 0);
}

uint64_t sub_100BE849C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = v6 + a2;
  if (__OFADD__(v6, a2))
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = a1;
  *(_QWORD *)(a1 + 32) = v7;
  v3 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA448 != -1)
LABEL_5:
    swift_once(&qword_1010EA448, sub_100C52D18);
  v8 = v7 > 2;
  v9 = qword_1011B7FD0;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  v12 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v11 + 56) = &type metadata for Int;
  *(_QWORD *)(v11 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 96) = &type metadata for Bool;
  *(_QWORD *)(v11 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v11 + 72) = v8;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v9, "Decryption error count %i. Should repair? %i", v14, v15);
  result = swift_bridgeObjectRelease(v11);
  *a3 = v8;
  return result;
}

uint64_t sub_100BE85C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v2 = v1;
  v4 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)v27 - v10;
  static SystemInfo.lockState.getter(v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  v12 = sub_100BE89EC();
  v13 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v4, v12);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v15 = ((uint64_t (*)(char *, uint64_t))v14)(v11, v4);
  if ((v13 & 1) != 0)
  {
    v16 = static os_log_type_t.default.getter(v15);
    if (qword_1010EA448 != -1)
      swift_once(&qword_1010EA448, sub_100C52D18);
    v17 = qword_1011B7FD0;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    v27[0] = a1;
    swift_errorRetain(a1);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v21 = String.init<A>(describing:)(v27, v20);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Ignoring decryption error before first unlock. %@", 49, 2, v19);
    return swift_bridgeObjectRelease(v19);
  }
  else
  {
    v25 = *(_QWORD *)(v2 + 24);
    __chkstk_darwin(v15);
    v27[-2] = v2;
    v27[-1] = 1;
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BE8A34, &v27[-4], v25, (char *)&type metadata for () + 8, &type metadata for Bool);
    result = swift_release(v25);
    if (LOBYTE(v27[0]) == 1)
    {
      v26 = *(_QWORD *)(v2 + 16);
      v27[0] = 1;
      swift_retain();
      KeyedThrottle.throttle(key:block:)(v27, sub_100BE8A4C, v2);
      return swift_release(v26);
    }
  }
  return result;
}

uint64_t sub_100BE8838(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BE8A54, a1, v2, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
  v3 = swift_release(v2);
  (*(void (**)(uint64_t))(a1 + 56))(v3);
  return 1;
}

uint64_t sub_100BE88AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;

  v2 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA448 != -1)
    swift_once(&qword_1010EA448, sub_100C52D18);
  v3 = qword_1011B7FD0;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v5 + 56) = &type metadata for Int;
  *(_QWORD *)(v5 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v5 + 32) = v6;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Decryption error count %i. Will attempt repair!", v8);
  result = swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_100BE8990()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_release();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for CryptorRepairTool()
{
  return objc_opt_self(_TtC12searchpartyd17CryptorRepairTool);
}

unint64_t sub_100BE89EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F46E0;
  if (!qword_1010F46E0)
  {
    v1 = type metadata accessor for SystemInfo.DeviceLockState(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for SystemInfo.DeviceLockState, v1);
    atomic_store(result, (unint64_t *)&qword_1010F46E0);
  }
  return result;
}

uint64_t sub_100BE8A34@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100BE849C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100BE8A4C()
{
  uint64_t v0;

  return sub_100BE8838(v0);
}

uint64_t sub_100BE8A54()
{
  uint64_t v0;

  return sub_100BE88AC(v0);
}

ValueMetadata *type metadata accessor for PrimaryKeyResponsePayload()
{
  return &type metadata for PrimaryKeyResponsePayload;
}

uint64_t sub_100BE8A7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100BE8B14(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_100BE8AA4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100BE8AD0();
  result = sub_10043A060();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BE8AD0()
{
  unint64_t result;

  result = qword_101118938;
  if (!qword_101118938)
  {
    result = swift_getWitnessTable(byte_100E641EC, &type metadata for PrimaryKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101118938);
  }
  return result;
}

uint64_t sub_100BE8B14(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v10, v3, v4);
  v5 = v11;
  v6 = v12;
  sub_10009F5D0((uint64_t)v10, v11);
  v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(28, v5, v6);
  if (!v1)
    __asm { BR              X10 }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v8;
}

uint64_t destroy for SecureLocationLabel(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for SecureLocationLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *assignWithCopy for SecureLocationLabel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  v10 = a2[10];
  v11 = a1[10];
  a1[10] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for SecureLocationLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationLabel()
{
  return &type metadata for SecureLocationLabel;
}

void sub_100BE8E14(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void (*v21)(_BYTE *, _QWORD);
  Swift::String v22;
  void (*v23)(_BYTE *, _QWORD);
  Swift::String v24;
  void (*v25)(_BYTE *, _QWORD);
  Swift::String v26;
  void (*v27)(_BYTE *, _QWORD);
  Swift::String v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  uint64_t v57;

  v2 = type metadata accessor for URLComponents(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init()(v4);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  v7 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v8 = objc_msgSend(v7, "aa_primaryAppleAccount");

  if (!v8)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B7A18);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to get account object to create URL for LabelledLocations", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    goto LABEL_25;
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v10 = objc_msgSend(v9, "aa_primaryAppleAccount");

  if (!v10)
  {
    __break(1u);
    goto LABEL_41;
  }
  v11 = objc_msgSend(v10, "aa_personID");

  if (!v11)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v45 = type metadata accessor for Logger(0);
    v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B7A18);
    v41 = Logger.logObject.getter(v46);
    v42 = static os_log_type_t.error.getter(v41);
    if (!os_log_type_enabled(v41, v42))
      goto LABEL_23;
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    v44 = "Unable to get dsid to create fmf URL for LabelledLocations";
    goto LABEL_22;
  }
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v15
    || (v16 = v15,
        v17 = objc_msgSend(v15, "uniqueDeviceIdentifier"),
        v16,
        !v17))
  {
    swift_bridgeObjectRelease();
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B7A18);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (!os_log_type_enabled(v41, v42))
      goto LABEL_23;
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    v44 = "Unable to get device identifier to create request for LabelledLocations";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v41, v42, v44, v43, 2u);
    swift_slowDealloc(v43, -1, -1);
LABEL_23:

LABEL_24:
LABEL_25:
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v6, v2);
    return;
  }
  v52 = a1;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  URLComponents.path.setter();
  v21 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v56);
  v22._countAndFlagsBits = v12;
  v22._object = v14;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v21(v56, 0);
  v23 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v56);
  v24._countAndFlagsBits = 47;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  v23(v56, 0);
  v25 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v56);
  v26._countAndFlagsBits = v18;
  v26._object = v20;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v25(v56, 0);
  v27 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v56);
  v28._countAndFlagsBits = 0xD000000000000016;
  v28._object = (void *)0x8000000100EF3480;
  String.append(_:)(v28);
  v27(v56, 0);
  v29 = objc_msgSend(v8, "dataclassProperties");
  if (v29)
  {
    v30 = v29;
    *(_QWORD *)&v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(kAccountDataclassShareLocation);
    *((_QWORD *)&v54 + 1) = v31;
    swift_bridgeObjectRetain(v31);
    v32 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v54, &type metadata for String);
    v33 = objc_msgSend(v30, "__swift_objectForKeyedSubscript:", v32);
    swift_unknownObjectRelease(v32);

    if (v33)
    {
      _bridgeAnyObjectToAny(_:)(&v54, v33);
      swift_unknownObjectRelease(v33);
    }
    else
    {
      v54 = 0u;
      v55 = 0u;
    }
    sub_100147814((uint64_t)&v54, (uint64_t)v56);
    if (v57)
    {
      v47 = sub_100BEA288();
      if ((swift_dynamicCast(&v53, v56, (char *)&type metadata for Any + 8, v47, 6) & 1) != 0)
      {
        v48 = v53;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v54 = 0x6E74736F48707061;
        *((_QWORD *)&v54 + 1) = 0xEB00000000656D61;
        v49 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v54, &type metadata for String);
        v50 = objc_msgSend(v48, "__swift_objectForKeyedSubscript:", v49);
        swift_unknownObjectRelease(v49);
        if (v50)
        {
          _bridgeAnyObjectToAny(_:)(&v54, v50);
          swift_unknownObjectRelease(v50);
        }
        else
        {
          v54 = 0u;
          v55 = 0u;
        }
        sub_100147814((uint64_t)&v54, (uint64_t)v56);
        a1 = v52;
        if (!v57)
        {

          sub_10014785C((uint64_t)v56);
          goto LABEL_25;
        }
        if ((swift_dynamicCast(&v53, v56, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          URLComponents.host.setter();

        goto LABEL_24;
      }
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();

      sub_10014785C((uint64_t)v56);
    }
    a1 = v52;
    goto LABEL_25;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_100BE94A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7EB0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7EB0);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100E64270, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100BE9578(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101118950);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BEA244();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationLabel.CodingKeys, &type metadata for SecureLocationLabel.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  v31 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v12, v13, &v31, v5);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    v30 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v30, v5);
    v16 = *((_QWORD *)v3 + 4);
    v17 = *((_QWORD *)v3 + 5);
    v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v29, v5);
    v18 = v3[6];
    v28 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v28, v5, v18);
    v19 = v3[7];
    v27 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v27, v5, v19);
    v20 = v3[8];
    v26 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v26, v5, v20);
    v21 = *((_QWORD *)v3 + 9);
    v22 = *((_QWORD *)v3 + 10);
    v25 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v25, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100BE9754(char *a1)
{
  sub_1005138F8(*a1);
}

void sub_100BE9760()
{
  char *v0;

  sub_100516A98(0, *v0);
}

void sub_100BE976C()
{
  __asm { BR              X10 }
}

uint64_t sub_100BE979C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C6562616CLL, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_100BE9838(uint64_t a1)
{
  char *v1;

  sub_100516A98(a1, *v1);
}

unint64_t sub_100BE9840@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100BE9EA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100BE986C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100BE9890 + 4 * byte_100E64267[*v0]))();
}

void sub_100BE9890(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6562616CLL;
  a1[1] = 0xE500000000000000;
}

void sub_100BE98A8(_QWORD *a1@<X8>)
{
  *a1 = 0x7079546C6562616CLL;
  a1[1] = 0xE900000000000065;
}

void sub_100BE98F8(_QWORD *a1@<X8>)
{
  *a1 = 0x7354657461647075;
  a1[1] = 0xE800000000000000;
}

void sub_100BE9914(_QWORD *a1@<X8>)
{
  *a1 = 0x644972657375;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_100BE992C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100BE9950 + 4 * byte_100E6426E[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_100BE9950()
{
  return 0x6C6562616CLL;
}

uint64_t sub_100BE9964()
{
  return 0x7079546C6562616CLL;
}

uint64_t sub_100BE99AC()
{
  return 0x7354657461647075;
}

uint64_t sub_100BE99C4()
{
  return 0x644972657375;
}

unint64_t sub_100BE99D8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100BE9EA4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100BE99FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BEA244();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BE9A24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BEA244();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100BE9A4C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = String.utf8Data.getter(*v0, v0[1]);
  v3 = v2;
  v4 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v4);
  return sub_10001BC14(v1, v3);
}

double sub_100BE9AB4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  sub_100BE9EEC(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100BE9B0C(_QWORD *a1)
{
  return sub_100BE9578(a1);
}

unint64_t sub_100BE9B20(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100AA4F68();
  result = sub_1007BD74C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BE9B4C()
{
  return 0xD000000000000011;
}

uint64_t sub_100BE9B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100BEA5CC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100BE9B90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BEA77C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100BE9BB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100BEA77C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100BE9BE0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100BEA650(a1);
  if (!v2)
    *a2 = result;
  return result;
}

id sub_100BE9C08()
{
  unint64_t v0;
  id result;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v0 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, "serverFriendlyDescription");

    if (v3)
    {
      v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v6 = v5;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
      sub_100109D28(v4, v6, 0xD000000000000011, 0x8000000100ECA2C0, isUniquelyReferenced_nonNull_native);
    }
    else
    {
      sub_100102BE0(0xD000000000000011, 0x8000000100ECA2C0);
    }
    swift_bridgeObjectRelease();
    v8 = swift_isUniquelyReferenced_nonNull_native(v0);
    sub_100109D28(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v8);
    swift_bridgeObjectRelease();
    v9 = swift_isUniquelyReferenced_nonNull_native(v0);
    sub_100109D28(0xD000000000000010, 0x8000000100ECC390, 0x2D746E65746E6F43, 0xEC00000065707954, v9);
    swift_bridgeObjectRelease();
    v10 = swift_isUniquelyReferenced_nonNull_native(v0);
    sub_100109D28(3157554, 0xE300000000000000, 0xD000000000000014, 0x8000000100EC55D0, v10);
    swift_bridgeObjectRelease();
    v11 = swift_isUniquelyReferenced_nonNull_native(v0);
    sub_100109D28(49, 0xE100000000000000, 0xD000000000000013, 0x8000000100EF3440, v11);
    swift_bridgeObjectRelease();
    v12 = swift_isUniquelyReferenced_nonNull_native(v0);
    sub_100109D28(0x72657665726F46, 0xE700000000000000, 0xD000000000000012, 0x8000000100EC55F0, v12);
    swift_bridgeObjectRelease();
    return (id)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100BE9EA4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104BE68, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_100BE9EEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t result;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;

  v5 = sub_10001A9A8(&qword_101118940);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100BEA244();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationLabel.CodingKeys, &type metadata for SecureLocationLabel.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v42 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v5);
    v14 = v13;
    v35 = v12;
    v41 = 1;
    swift_bridgeObjectRetain(v13);
    v15 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    v17 = v16;
    v33 = v15;
    v34 = a2;
    v40 = 2;
    swift_bridgeObjectRetain(v16);
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    v20 = v19;
    v32 = v18;
    v39 = 3;
    swift_bridgeObjectRetain(v19);
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v5);
    v38 = 4;
    v22 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
    v37 = 5;
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
    v36 = 6;
    v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
    v26 = v25;
    v27 = *(void (**)(char *, uint64_t))(v6 + 8);
    v28 = v24;
    v27(v8, v5);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v30 = (double *)v34;
    *v34 = v35;
    *((_QWORD *)v30 + 1) = v14;
    *((_QWORD *)v30 + 2) = v33;
    *((_QWORD *)v30 + 3) = v17;
    *((_QWORD *)v30 + 4) = v32;
    *((_QWORD *)v30 + 5) = v20;
    v30[6] = v21;
    v30[7] = v22;
    v30[8] = v23;
    *((_QWORD *)v30 + 9) = v28;
    *((_QWORD *)v30 + 10) = v26;
  }
  return result;
}

unint64_t sub_100BEA244()
{
  unint64_t result;

  result = qword_101118948;
  if (!qword_101118948)
  {
    result = swift_getWitnessTable(asc_100E64544, &type metadata for SecureLocationLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118948);
  }
  return result;
}

unint64_t sub_100BEA288()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101108200;
  if (!qword_101108200)
  {
    v1 = objc_opt_self(NSDictionary);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101108200);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsLabelledLocationsRequest()
{
  return &type metadata for SecureLocationsLabelledLocationsRequest;
}

ValueMetadata *type metadata accessor for SecureLocationLoadLabelledLocationsResponse()
{
  return &type metadata for SecureLocationLoadLabelledLocationsResponse;
}

uint64_t sub_100BEA2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BEA2F0);
}

uint64_t sub_100BEA2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100BEA364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BEA370);
}

uint64_t sub_100BEA370(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsLabelledLocationsEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1011189B0;
  if (!qword_1011189B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsLabelledLocationsEndpoint);
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationLabel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100BEA474 + 4 * byte_100E6427A[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100BEA4A8 + 4 * byte_100E64275[v4]))();
}

uint64_t sub_100BEA4A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BEA4B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100BEA4B8);
  return result;
}

uint64_t sub_100BEA4C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100BEA4CCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100BEA4D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100BEA4D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationLabel.CodingKeys()
{
  return &type metadata for SecureLocationLabel.CodingKeys;
}

unint64_t sub_100BEA4F8()
{
  unint64_t result;

  result = qword_1011189E8;
  if (!qword_1011189E8)
  {
    result = swift_getWitnessTable(byte_100E6446C, &type metadata for SecureLocationLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011189E8);
  }
  return result;
}

unint64_t sub_100BEA540()
{
  unint64_t result;

  result = qword_1011189F0;
  if (!qword_1011189F0)
  {
    result = swift_getWitnessTable(aM_45, &type metadata for SecureLocationLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011189F0);
  }
  return result;
}

unint64_t sub_100BEA588()
{
  unint64_t result;

  result = qword_1011189F8;
  if (!qword_1011189F8)
  {
    result = swift_getWitnessTable(a5_22, &type metadata for SecureLocationLabel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011189F8);
  }
  return result;
}

uint64_t sub_100BEA5CC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000100EF34A0)
  {
    swift_bridgeObjectRelease(0x8000000100EF34A0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EF34A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_100BEA650(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v3 = sub_10001A9A8(&qword_101118A00);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_100BEA77C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys, &type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_101118A10);
    v12 = sub_100BEA7C0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v15[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_100BEA77C()
{
  unint64_t result;

  result = qword_101118A08;
  if (!qword_101118A08)
  {
    result = swift_getWitnessTable(aU_40, &type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118A08);
  }
  return result;
}

unint64_t sub_100BEA7C0()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_101118A18;
  if (!qword_101118A18)
  {
    v1 = sub_10001F784(&qword_101118A10);
    v2 = sub_100AA4F68();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101118A18);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationLoadLabelledLocationsResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BEA864 + 4 * byte_100E6427F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BEA884 + 4 * byte_100E64284[v4]))();
}

_BYTE *sub_100BEA864(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BEA884(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BEA88C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BEA894(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BEA89C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BEA8A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationLoadLabelledLocationsResponse.CodingKeys()
{
  return &type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys;
}

unint64_t sub_100BEA8C4()
{
  unint64_t result;

  result = qword_101118A20;
  if (!qword_101118A20)
  {
    result = swift_getWitnessTable(a5_23, &type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118A20);
  }
  return result;
}

unint64_t sub_100BEA90C()
{
  unint64_t result;

  result = qword_101118A28;
  if (!qword_101118A28)
  {
    result = swift_getWitnessTable(asc_100E64594, &type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118A28);
  }
  return result;
}

unint64_t sub_100BEA954()
{
  unint64_t result;

  result = qword_101118A30;
  if (!qword_101118A30)
  {
    result = swift_getWitnessTable(aE_50, &type metadata for SecureLocationLoadLabelledLocationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101118A30);
  }
  return result;
}

Swift::Int sub_100BEA998()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000037, 0x8000000100EC5020);
  return Hasher._finalize()();
}

uint64_t sub_100BEA9EC(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000037, 0x8000000100EC5020);
}

Swift::Int sub_100BEAA08()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000037, 0x8000000100EC5020);
  return Hasher._finalize()();
}

uint64_t sub_100BEAA58@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104CE98, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100BEAAA8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000037;
  a1[1] = 0x8000000100EC5020;
}

uint64_t sub_100BEAD80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void (*)(void *, char), uint64_t, uint64_t, uint64_t);
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.default.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("Trampolining fetchFinderState", 29, 2, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

  sub_100030784(v3 + OBJC_IVAR____TtC12searchpartydP33_A237235B9060AAA443FA0E26E38E988121FinderStateTrampoline_implementation, (uint64_t)v14);
  v9 = v15;
  v10 = v16;
  sub_10001AA44(v14, v15);
  v11 = swift_allocObject(&unk_1010B3F08, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = *(void (**)(void (*)(void *, char), uint64_t, uint64_t, uint64_t))(v10 + 24);
  swift_retain();
  v12(sub_100BEC584, v11, v9, v10);
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

void sub_100BEAE8C(void *a1, char a2, void (*a3)(id, void *))
{
  id v6;
  void *v7;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v6 = 0;
    v7 = a1;
  }
  else
  {
    v6 = objc_msgSend(a1, "state");
    v7 = 0;
  }
  a3(v6, v7);
  sub_10010F93C(a1, a2 & 1);
}

void sub_100BEAF60(void *a1, char a2, void (*a3)(void *, void *))
{
  void *v6;
  void *v7;
  id v8;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v6 = 0;
    v7 = a1;
  }
  else
  {
    v8 = a1;
    v6 = a1;
    v7 = 0;
  }
  a3(v6, v7);
  sub_10010F93C(a1, a2 & 1);
}

uint64_t sub_100BEB0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  sub_100030784(v3 + OBJC_IVAR____TtC12searchpartydP33_A237235B9060AAA443FA0E26E38E988121FinderStateTrampoline_implementation, (uint64_t)v10);
  v7 = v11;
  v8 = v12;
  sub_10001AA44(v10, v11);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(((unint64_t)(a1 + 1) > 2) | (6u >> ((a1 + 1) & 7)) & 1, a2, a3, v7, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
}

id sub_100BEB200()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FinderStateTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FinderStateTrampoline()
{
  return objc_opt_self(_TtC12searchpartydP33_A237235B9060AAA443FA0E26E38E988121FinderStateTrampoline);
}

id sub_100BEB264()
{
  uint64_t v0;
  void *v1;
  id v2;
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  objc_super v9;
  _QWORD v10[5];

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = *(id *)(v0 + 48);
  }
  else
  {
    v10[3] = type metadata accessor for FinderStateManagerService(0);
    v10[4] = &off_1010B3DF8;
    v10[0] = v0;
    v3 = (objc_class *)type metadata accessor for FinderStateTrampoline();
    v4 = objc_allocWithZone(v3);
    sub_100030784((uint64_t)v10, (uint64_t)v4+ OBJC_IVAR____TtC12searchpartydP33_A237235B9060AAA443FA0E26E38E988121FinderStateTrampoline_implementation);
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    v5 = objc_msgSendSuper2(&v9, "init");
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
    v6 = *(void **)(v0 + 48);
    *(_QWORD *)(v0 + 48) = v5;
    v2 = v5;

    v1 = 0;
  }
  v7 = v1;
  return v2;
}

_QWORD *sub_100BEB328(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;

  v2 = v1;
  v20 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0xD000000000000019;
  v2[3] = 0x8000000100E646D0;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v13 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  static DispatchQoS.unspecified.getter(v13);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v16 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  v2[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100EF36F0, v8, v5, v12, 0);
  v17 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = XPCSessionManager.init(name:)(0xD000000000000019, 0x8000000100E646D0);
  v2[5] = v18;
  v2[6] = 0;
  PressuredExitTransactionManager.init()(v18);
  v2[7] = v20;
  return v2;
}

uint64_t sub_100BEB564()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[6];

  v1 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = PressuredExitTransactionManager.begin(_:)("com.apple.icloud.searchpartyd.finderstatemanagerservice.startup", 63, 2);
  v17[1] = v0[4];
  v10 = (_QWORD *)swift_allocObject(&unk_1010B3EB8, 40, 7);
  v10[2] = v0;
  v10[3] = v9;
  v10[4] = v1;
  aBlock[4] = sub_100BEC500;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B3ED0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  v12 = swift_retain();
  static DispatchQoS.unspecified.getter(v12);
  v19 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v15 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_100BEB78C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v12;

  v2 = type metadata accessor for MachServiceName(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCServiceDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MachServiceName.init(_:)(0xD000000000000030, 0x8000000100EF35E0);
  v9 = sub_100BEB264();
  if (qword_1010EA3C0 != -1)
    swift_once(&qword_1010EA3C0, sub_100BEB8F4);
  v10 = (id)qword_101118A40;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v4, 0, v9, v10, sub_100BEC50C, a1, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v8);
  Transaction.end()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_100BEB8F4()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPFinderStateXPCProtocol);
  qword_101118A40 = (uint64_t)result;
  return result;
}

uint64_t sub_100BEB940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd25FinderStateManagerService_transactionManager;
  v2 = type metadata accessor for PressuredExitTransactionManager(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100BEB9B8()
{
  return type metadata accessor for FinderStateManagerService(0);
}

uint64_t type metadata accessor for FinderStateManagerService(uint64_t a1)
{
  uint64_t result;

  result = qword_101118B08;
  if (!qword_101118B08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FinderStateManagerService);
  return result;
}

uint64_t sub_100BEB9FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E64710;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_100E64728;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for PressuredExitTransactionManager(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100BEBA9C()
{
  return sub_100BEB564();
}

uint64_t sub_100BEBABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v8 = (void *)static OS_os_log.default.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("Requesting disabling finder mode", 32, 2, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);

  v10 = swift_allocObject(&unk_1010B3E68, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v11 = swift_retain();
  v12 = (void *)static OS_os_log.default.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("trying to disableFinderMode", 27, 2, &_mh_execute_header, v12, v13, _swiftEmptyArrayStorage);

  sub_1001C5AEC(0, 2, 2, (uint64_t)sub_100BEC430, v10);
  swift_release();
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
  v15 = swift_allocObject(&unk_1010B3E90, 32, 7);
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  sub_100691AC0((uint64_t)v6, (uint64_t)&unk_101118BE8, v15);
  return swift_release();
}

uint64_t sub_100BEBC6C()
{
  return swift_task_switch(sub_100BEBC80, 0, 0);
}

uint64_t sub_100BEBC80()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_100BEBD64;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BEBD64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100BEBDC0, 0, 0);
}

uint64_t sub_100BEBDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  v1 = *(_QWORD *)(v0 + 136);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = dword_10111BB24;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = sub_100BEBEFC;
    return sub_100C64368();
  }
  else
  {
    if (qword_1010E9988 != -1)
      swift_once(&qword_1010E9988, sub_100113494);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B67A8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cleared anonymous observations due to Finder turn off.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100BEBEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100BEC050;
  }
  else
  {
    swift_release();
    v3 = sub_100BEBF68;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100BEBF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1010E9988 != -1)
    swift_once(&qword_1010E9988, sub_100113494);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B67A8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Cleared anonymous observations due to Finder turn off.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BEC050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_release_n(*(_QWORD *)(v0 + 136), 2);
  if (qword_1010E9988 != -1)
    swift_once(&qword_1010E9988, sub_100113494);
  v1 = *(_QWORD *)(v0 + 152);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B67A8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 152);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to clear observations due to Finder turn off, error: %@.", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 152));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100BEC228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v4 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v5 = (void *)static OS_os_log.default.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  os_log(_:dso:log:type:_:)("Requesting enabling finder mode", 31, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

  v8 = (void *)static OS_os_log.default.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)("trying to enableFinderMode", 26, 2, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);

  return sub_1001C5AEC(1, 2, 2, a1, a2);
}

uint64_t sub_100BEC318(uint64_t a1, uint64_t a2)
{
  return sub_100BEBABC(a1, a2);
}

uint64_t sub_100BEC338(void (*a1)(id, _QWORD), uint64_t a2)
{
  return sub_1001C6A88(a1, a2);
}

uint64_t sub_100BEC35C(char a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = a1 & 1;
  v6 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.default.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("trying to set(activeCache:completion:)", 38, 2, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

  return sub_1001C5AEC(2, 2, v5, a2, a3);
}

uint64_t sub_100BEC40C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BEC430(uint64_t result)
{
  uint64_t v1;

  if (result)
    return (*(uint64_t (**)(void))(v1 + 16))();
  return result;
}

uint64_t sub_100BEC458()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100BEC47C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101118BE4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  return swift_task_switch(sub_100BEBC80, 0, 0);
}

uint64_t sub_100BEC4D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100BEC500()
{
  uint64_t v0;

  return sub_100BEB78C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100BEC50C()
{
  unint64_t v0;

  v0 = sub_100BEC540();
  return NSXPCConnection.hasEntitlement<A>(_:)(v0, &type metadata for FinderStateEntitlement, v0) & 1;
}

unint64_t sub_100BEC540()
{
  unint64_t result;

  result = qword_101118BF8;
  if (!qword_101118BF8)
  {
    result = swift_getWitnessTable(byte_100E64818, &type metadata for FinderStateEntitlement);
    atomic_store(result, (unint64_t *)&qword_101118BF8);
  }
  return result;
}

void sub_100BEC584(void *a1, char a2)
{
  uint64_t v2;

  sub_100BEAE8C(a1, a2 & 1, *(void (**)(id, void *))(v2 + 16));
}

uint64_t sub_100BEC590()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100BEC5B4(void *a1, char a2)
{
  uint64_t v2;

  sub_100BEAF60(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16));
}

uint64_t storeEnumTagSinglePayload for FinderStateEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100BEC600 + 4 * byte_100E646A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100BEC620 + 4 * byte_100E646A5[v4]))();
}

_BYTE *sub_100BEC600(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100BEC620(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BEC628(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BEC630(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100BEC638(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100BEC640(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FinderStateEntitlement()
{
  return &type metadata for FinderStateEntitlement;
}

unint64_t sub_100BEC660()
{
  unint64_t result;

  result = qword_101118C00;
  if (!qword_101118C00)
  {
    result = swift_getWitnessTable(asc_100E647F0, &type metadata for FinderStateEntitlement);
    atomic_store(result, (unint64_t *)&qword_101118C00);
  }
  return result;
}

unint64_t sub_100BEC6A8()
{
  unint64_t result;

  result = qword_101118C08[0];
  if (!qword_101118C08[0])
  {
    result = swift_getWitnessTable(a9_26, &type metadata for FinderStateEntitlement);
    atomic_store(result, qword_101118C08);
  }
  return result;
}

uint64_t sub_100BEC704(uint64_t a1)
{
  _QWORD v2[18];

  v2[2] = &unk_100E64900;
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[0] = &unk_100E648E8;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[9] = &unk_100E64918;
  v2[10] = &unk_100E64930;
  v2[11] = &unk_100E64930;
  v2[12] = &unk_100E64930;
  v2[13] = &unk_100E64930;
  v2[14] = &unk_100E64930;
  v2[15] = &unk_100E64930;
  v2[16] = &unk_100E64930;
  v2[17] = &unk_100E64930;
  return swift_initClassMetadata2(a1, 0, 18, v2, a1 + 112);
}

uint64_t sub_100BEC7A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t MetatypeMetadata;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE v40[12];
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  uint64_t aBlock;
  _QWORD v51[5];

  v3 = *v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v40[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin(v8);
  v12 = &v40[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v1[29];
  if (v13)
  {
    v45 = v12;
    v46 = v10;
    v47 = result;
    v48 = v7;
    v14 = qword_1010EA3C8;
    v44 = v1[30];
    swift_retain();
    if (v14 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
    v16 = swift_retain_n(a1, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = swift_slowAlloc(22, -1);
      v43 = v5;
      v21 = v20;
      v42 = (_QWORD *)swift_slowAlloc(64, -1);
      v49 = v42;
      aBlock = v3;
      *(_DWORD *)v21 = 136315394;
      MetatypeMetadata = swift_getMetatypeMetadata(v3);
      v23 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
      aBlock = sub_100016940(v23, v24, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v51, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      v25 = sub_1002F0C2C();
      v41 = v19;
      v26 = v4;
      v28 = v27;
      swift_release();
      aBlock = sub_100016940(v25, v28, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v51, v21 + 14, v21 + 22);
      swift_release();
      v4 = v26;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v41, "%s: invalidated %{public}s", (uint8_t *)v21, 0x16u);
      v29 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      v30 = v21;
      v5 = v43;
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    v31 = (_QWORD *)swift_allocObject(&unk_1010B4228, 40, 7);
    v32 = v44;
    v31[2] = v13;
    v31[3] = v32;
    v31[4] = a1;
    v51[3] = sub_100016FE4;
    v51[4] = v31;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v51[0] = 1107296256;
    v51[1] = sub_100016FB8;
    v51[2] = &unk_1010B4240;
    v33 = _Block_copy(&aBlock);
    sub_10001D898(v13, v32);
    v34 = swift_retain();
    v35 = v45;
    static DispatchQoS.unspecified.getter(v34);
    v49 = _swiftEmptyArrayStorage;
    v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v38 = sub_10001371C();
    v39 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v37, v38, v4, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v39, v33);
    _Block_release(v33);
    sub_10001D8A8(v13, v32);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v39, v4);
    (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v35, v47);
    return swift_release();
  }
  return result;
}

_QWORD *sub_100BECB84()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v8;
  uint64_t v9;
  id v10;

  v1 = *(void **)(v0 + 64);
  v2 = String._bridgeToObjectiveC()();
  v10 = 0;
  v3 = objc_msgSend(v1, "datagramConnectionForSessionDestination:error:", v2, &v10);

  v4 = v10;
  if (v3)
  {
    v5 = type metadata accessor for MessagingDatagramConnection();
    swift_allocObject(v5, 64, 7);
    v6 = v4;
    return sub_100B343C8(v3);
  }
  else
  {
    v8 = v10;
    _convertNSErrorToError(_:)(v4);

    return (_QWORD *)swift_willThrow(v9);
  }
}

uint64_t sub_100BECC74()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7EC8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7EC8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6E6967617373656DLL, 0xE900000000000067);
}

uint64_t sub_100BECCEC()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_1010FAAF0);
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  qword_1011B7EE0 = result;
  return result;
}

void sub_100BECD20()
{
  qword_1011B7EE8 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t sub_100BECD34@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  if (qword_1010EA3D8 != -1)
    swift_once(&qword_1010EA3D8, sub_100BECD20);
  swift_beginAccess(&qword_1011B7EE8, v12, 32, 0);
  v4 = qword_1011B7EE8;
  if (*(_QWORD *)(qword_1011B7EE8 + 16))
  {
    v5 = a1;
    v6 = sub_100519510((uint64_t)v5);
    if ((v7 & 1) != 0)
    {
      v8 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v6);
      v10 = *v8;
      v9 = v8[1];
      swift_bridgeObjectRetain(v9);
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }

  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  *a2 = v10;
  a2[1] = v9;
  return swift_endAccess(v12);
}

uint64_t sub_100BECE10()
{
  uint64_t v0;

  if (qword_1010EA3D0 != -1)
    swift_once(&qword_1010EA3D0, sub_100BECCEC);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BF1144, v0, qword_1011B7EE0, &type metadata for () + 1, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D8A8(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  sub_10001D8A8(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  sub_10001D8A8(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  sub_10001D8A8(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  sub_10001D8A8(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  sub_10001D8A8(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  sub_10001D8A8(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
  sub_10001D8A8(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  return v0;
}

uint64_t sub_100BECF10(uint64_t a1)
{
  void *v2;
  id v3;
  _BYTE v5[24];

  if (qword_1010EA3D8 != -1)
    swift_once(&qword_1010EA3D8, sub_100BECD20);
  v2 = *(void **)(a1 + 64);
  swift_beginAccess(&qword_1011B7EE8, v5, 33, 0);
  v3 = v2;
  sub_100103A80((uint64_t)v3);
  swift_endAccess(v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100BECFB0()
{
  uint64_t v0;

  sub_100BECE10();
  return swift_deallocClassInstance(v0, 248, 7);
}

uint64_t type metadata accessor for MessagingService(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for MessagingService);
}

uint64_t sub_100BECFDC(uint64_t a1, char a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, void (*a6)(__n128), uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 v26;
  __n128 v28;
  uint64_t v29;
  void (*v30)(__n128);
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[8];
  void *v34;
  _BYTE v35[32];

  v11 = (_QWORD *)(a8 + 16);
  if ((a2 & 1) != 0)
  {
    v21 = sub_10001A9A8(&qword_1010ED1F0);
    v22 = swift_allocObject(v21, 64, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v33, &v31);
    v23 = v31;
    v24 = v32;
    *(_QWORD *)(v22 + 56) = v32;
    v25 = sub_100018F08((_QWORD *)(v22 + 32));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v25, v23, v24);
    swift_errorRetain(a1);
    print(_:separator:terminator:)(v22, 32, 0xE100000000000000, 10, 0xE100000000000000);
    swift_bridgeObjectRelease();
    sub_1000FE214(a1, 1);
    v18 = 0;
LABEL_12:
    swift_beginAccess(v11, v35, 0, 0);
    v26 = swift_bridgeObjectRetain(*v11);
    a6(v26);
    swift_bridgeObjectRelease();
    return sub_10001D8A8(v18, 0);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain(a5);
    v15 = sub_100519120(a3, a4, a5);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v15);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease();
      if ((unint64_t)v17 >> 62)
        goto LABEL_17;
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v18)
      {
        while (1)
        {
          v30 = a6;
          a6 = 0;
          if ((v17 & 0xC000000000000001) != 0)
            break;
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            v19 = *(id *)(v17 + 32);
LABEL_10:
            v20 = objc_msgSend(v19, "capabilities", a7, v30);
            v34 = &_swiftEmptySetSingleton;
            JUMPOUT(0x100BED184);
          }
          __break(1u);
LABEL_17:
          if (v17 < 0)
            v29 = v17;
          else
            v29 = v17 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v17);
          v18 = _CocoaArrayWrapper.endIndex.getter(v29);
          swift_bridgeObjectRelease();
          if (!v18)
            goto LABEL_21;
        }
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v17);
        goto LABEL_10;
      }
LABEL_21:
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess(v11, v35, 0, 0);
  v28 = swift_bridgeObjectRetain(*v11);
  a6(v28);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100BED788(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, unsigned __int8 a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int64_t v47;

  v6 = a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(v6, 1);
    return sub_1000FE214(v6, 1);
  }
  v44 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v45 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  v12 = a5;
  v46 = v6;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v47 = v11;
      v14 = v13 | (v11 << 6);
      goto LABEL_23;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_49;
    if (v15 >= v45)
      break;
    v16 = *(_QWORD *)(v44 + 8 * v15);
    v17 = v11 + 1;
    if (!v16)
    {
      v17 = v11 + 2;
      if (v11 + 2 >= v45)
        break;
      v16 = *(_QWORD *)(v44 + 8 * v17);
      if (!v16)
      {
        v17 = v11 + 3;
        if (v11 + 3 >= v45)
          break;
        v16 = *(_QWORD *)(v44 + 8 * v17);
        if (!v16)
        {
          v18 = v11 + 4;
          if (v11 + 4 >= v45)
            break;
          v16 = *(_QWORD *)(v44 + 8 * v18);
          if (!v16)
          {
            while (1)
            {
              v17 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_50;
              if (v17 >= v45)
                goto LABEL_46;
              v16 = *(_QWORD *)(v44 + 8 * v17);
              ++v18;
              if (v16)
                goto LABEL_22;
            }
          }
          v17 = v11 + 4;
        }
      }
    }
LABEL_22:
    v10 = (v16 - 1) & v16;
    v47 = v17;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_23:
    v19 = *(_QWORD *)(v6 + 56);
    v20 = *(_QWORD *)(v6 + 48) + 24 * v14;
    v21 = *(_BYTE *)v20;
    v23 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v19 + 8 * v14);
    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0)
        v41 = *(_QWORD *)(v19 + 8 * v14);
      else
        v41 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v20 + 16));
      swift_bridgeObjectRetain(v24);
      v25 = _CocoaArrayWrapper.endIndex.getter(v41);
    }
    else
    {
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v20 + 16));
      swift_bridgeObjectRetain(v24);
    }
    if (v25)
    {
      if ((v24 & 0xC000000000000001) != 0)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
      else
        v26 = *(id *)(v24 + 32);
      v27 = objc_msgSend(v26, "capabilities");
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v30 = sub_100519120(v21, v23, v22);
    v31 = _swiftEmptyDictionarySingleton[2];
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
      __break(1u);
      JUMPOUT(0x100BEDC70);
    }
    v34 = v29;
    if (_swiftEmptyDictionarySingleton[3] >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v29 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_100AA2D74();
        if ((v34 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_100A963C8(v33, isUniquelyReferenced_nonNull_native);
      v35 = sub_100519120(v21, v23, v22);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_51;
      v30 = v35;
      if ((v34 & 1) != 0)
      {
LABEL_5:
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v30) = 0;
        goto LABEL_6;
      }
    }
    _swiftEmptyDictionarySingleton[(v30 >> 6) + 8] |= 1 << v30;
    v37 = _swiftEmptyDictionarySingleton[6] + 24 * v30;
    *(_BYTE *)v37 = v21;
    *(_QWORD *)(v37 + 8) = v23;
    *(_QWORD *)(v37 + 16) = v22;
    *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v30) = 0;
    v38 = _swiftEmptyDictionarySingleton[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
      goto LABEL_48;
    _swiftEmptyDictionarySingleton[2] = v40;
    swift_bridgeObjectRetain(v22);
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v46;
    v11 = v47;
  }
LABEL_46:
  swift_release();
  a3((uint64_t)_swiftEmptyDictionarySingleton, 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100BEDC84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t WitnessTable;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;

  v1 = *v0;
  WitnessTable = swift_getWitnessTable(byte_100E64980, *v0);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, WitnessTable);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v1, WitnessTable);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v10 = v0[2];
  v9 = (void *)v0[3];
  swift_bridgeObjectRetain(v9);
  v11._countAndFlagsBits = v10;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 60;
}

uint64_t sub_100BEDD80()
{
  return sub_100BEDC84();
}

void sub_100BEDDA0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t MetatypeMetadata;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = v7;
  v16 = *(_QWORD *)v8;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 48));
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(v8 + 120);
  if (v17)
  {
    v33 = v16;
    v34 = *(_QWORD *)(v8 + 128);
    v18 = *(_QWORD *)(v8 + 16);
    v19 = v18 == a1 && *(_QWORD *)(v8 + 24) == a2;
    if (v19
      || (v20 = a1,
          v21 = *(_QWORD *)(v8 + 24),
          v32 = v20,
          (_stringCompareWithSmolCheck(_:_:expecting:)(v20, a2, *(_QWORD *)(v8 + 16), v21, 0) & 1) != 0))
    {
      swift_retain();
      v17(a3, a4, a5, a6 & 1, a7);
      sub_10001D8A8((uint64_t)v17, v34);
    }
    else
    {
      v22 = qword_1010EA3C8;
      swift_retain();
      if (v22 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v23 = type metadata accessor for Logger(0);
      sub_10001A9E8(v23, (uint64_t)qword_1011B7EC8);
      swift_retain_n(v8, 2);
      swift_bridgeObjectRetain_n(a2, 2);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(32, -1);
        v31 = swift_slowAlloc(96, -1);
        v35 = v31;
        *(_DWORD *)v27 = 136315650;
        v36 = v33;
        MetatypeMetadata = swift_getMetatypeMetadata(v33);
        v29 = String.init<A>(describing:)(&v36, MetatypeMetadata);
        v36 = sub_100016940(v29, v30, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2080;
        swift_bridgeObjectRetain(v21);
        v36 = sub_100016940(v18, v21, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 14, v27 + 22);
        swift_release_n(v8, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 22) = 2080;
        swift_bridgeObjectRetain(a2);
        v36 = sub_100016940(v32, a2, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 24, v27 + 32);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v27, 0x20u);
        swift_arrayDestroy(v31, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v27, -1, -1);
        sub_10001D8A8((uint64_t)v17, v34);

      }
      else
      {
        sub_10001D8A8((uint64_t)v17, v34);

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v8, 2);
      }
    }
  }
}

void sub_100BEE0D4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t MetatypeMetadata;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = v8;
  v36 = *(_QWORD *)v9;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 48));
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 136);
  if (v18)
  {
    v37 = *(_QWORD *)(v9 + 144);
    v20 = *(_QWORD *)(v9 + 16);
    v19 = *(_QWORD *)(v9 + 24);
    v21 = v20 == a1 && v19 == a2;
    if (v21
      || (v22 = a1,
          v34 = a1,
          v35 = *(_QWORD *)(v9 + 16),
          v23 = *(_QWORD *)(v9 + 24),
          (_stringCompareWithSmolCheck(_:_:expecting:)(v22, a2, v20, v19, 0) & 1) != 0))
    {
      swift_retain();
      v18(a3, a4, a5, a6, a7, a8);
      sub_10001D8A8((uint64_t)v18, v37);
    }
    else
    {
      v24 = qword_1010EA3C8;
      swift_retain();
      if (v24 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v25 = type metadata accessor for Logger(0);
      sub_10001A9E8(v25, (uint64_t)qword_1011B7EC8);
      swift_retain_n(v9, 2);
      swift_bridgeObjectRetain_n(a2, 2);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc(32, -1);
        v33 = swift_slowAlloc(96, -1);
        v38 = v33;
        *(_DWORD *)v29 = 136315650;
        v39 = v36;
        MetatypeMetadata = swift_getMetatypeMetadata(v36);
        v31 = String.init<A>(describing:)(&v39, MetatypeMetadata);
        v39 = sub_100016940(v31, v32, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2080;
        swift_bridgeObjectRetain(v23);
        v39 = sub_100016940(v35, v23, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v29 + 14, v29 + 22);
        swift_release_n(v9, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 22) = 2080;
        swift_bridgeObjectRetain(a2);
        v39 = sub_100016940(v34, a2, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v29 + 24, v29 + 32);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v29, 0x20u);
        swift_arrayDestroy(v33, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v29, -1, -1);
        sub_10001D8A8((uint64_t)v18, v37);

      }
      else
      {
        sub_10001D8A8((uint64_t)v18, v37);

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v9, 2);
      }
    }
  }
}

void sub_100BEE414(void (*a1)(char *, uint64_t), unint64_t a2, void (*a3)(char *, os_log_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t WitnessTable;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  int v56;
  uint64_t v57;
  uint64_t MetatypeMetadata;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void (*v83)(os_log_t, char *, uint64_t);
  os_log_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  int v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  NSObject *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  void (*v110)(char *, uint64_t);
  os_log_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, _QWORD, uint64_t, unint64_t, char *, unint64_t, uint64_t);
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t FunctionTypeMetadata1;
  uint64_t v122;
  void (*v123)(char *);
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  os_log_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  void (*v145)(char *, os_log_t, uint64_t);
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  os_log_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(char *, uint64_t);
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[2];
  uint64_t v167[2];

  v155 = a8;
  LODWORD(v147) = a7;
  v146 = a4;
  v145 = a3;
  v15 = *(_QWORD *)(*(_QWORD *)v10 + 80);
  v159 = *(_QWORD *)v10;
  v16 = type metadata accessor for Message(255, v15, *(_QWORD *)(v159 + 96), a4);
  v17 = type metadata accessor for MessagingMessageContext(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v16, v17, 0, 0, v18);
  v20 = sub_10001F784((uint64_t *)&unk_1010EE2F0);
  v148 = TupleTypeMetadata2;
  v153 = type metadata accessor for Result(0, TupleTypeMetadata2, v20, &protocol self-conformance witness table for Error);
  v150 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v149 = (char *)&v140 - v21;
  v22 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v22);
  v24 = (char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for UUID(0);
  v25 = *(char **)(v157 - 8);
  v26 = __chkstk_darwin(v157);
  v144 = (char *)&v140 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v154 = (char *)&v140 - v29;
  v30 = __chkstk_darwin(v28);
  v156 = (os_log_t)((char *)&v140 - v31);
  v163 = v16;
  v158 = *(_QWORD *)(v16 - 8);
  v32 = __chkstk_darwin(v30);
  v151 = (char *)&v140 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v152 = (char *)&v140 - v35;
  v36 = __chkstk_darwin(v34);
  v38 = (char *)&v140 - v37;
  __chkstk_darwin(v36);
  v162 = (char *)&v140 - v39;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v10 + 48));
  v40 = *(_QWORD *)(v10 + 16);
  v41 = *(_QWORD *)(v10 + 24);
  v160 = v10;
  v161 = a1;
  if ((void (*)(char *, uint64_t))v40 == a1 && v41 == a2
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v161, a2, v40, v41, 0) & 1) != 0)
  {
    v42 = type metadata accessor for PropertyListDecoder(0);
    v43 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    PropertyListDecoder.init()(v43);
    v44 = v163;
    WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Message<A>, v163);
    v46 = v162;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v44, a5, a6, v44, WitnessTable);
    v143 = a9;
    swift_release();
    v142 = a10;
    sub_1002A380C(a10, (uint64_t)v24);
    v47 = v25;
    v48 = v157;
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v25 + 6))(v24, 1, v157) == 1)
    {
      sub_100004048((uint64_t)v24, &qword_1010ED860);
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v49 = type metadata accessor for Logger(0);
      sub_10001A9E8(v49, (uint64_t)qword_1011B7EC8);
      v50 = v158;
      v51 = *(void (**)(char *, char *, uint64_t))(v158 + 16);
      v52 = v151;
      v51(v151, v46, v44);
      swift_bridgeObjectRetain_n(a2, 2);
      swift_bridgeObjectRetain_n(v143, 2);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.default.getter(v54);
      v56 = v55;
      if (os_log_type_enabled(v54, v55))
      {
        v57 = swift_slowAlloc(42, -1);
        v157 = swift_slowAlloc(128, -1);
        v167[0] = v157;
        *(_DWORD *)v57 = 136315906;
        v156 = v54;
        v165 = v159;
        MetatypeMetadata = swift_getMetatypeMetadata(v159);
        v59 = String.init<A>(describing:)(&v165, MetatypeMetadata);
        LODWORD(v159) = v56;
        v60 = v143;
        v165 = sub_100016940(v59, v61, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v57 + 4, v57 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v57 + 12) = 2080;
        swift_bridgeObjectRetain(a2);
        v165 = sub_100016940((uint64_t)v161, a2, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v57 + 14, v57 + 22);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v57 + 22) = 2080;
        swift_bridgeObjectRetain(v60);
        v62 = v155;
        v165 = sub_100016940(v155, v60, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v57 + 24, v57 + 32);
        swift_bridgeObjectRelease_n(v60, 3);
        *(_WORD *)(v57 + 32) = 2080;
        v63 = v152;
        v51(v152, v52, v44);
        v64 = *(void (**)(char *, uint64_t))(v50 + 8);
        v64(v52, v44);
        Message.description.getter(v44);
        v66 = v65;
        v68 = v67;
        v64(v63, v44);
        v165 = sub_100016940(v66, v68, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v57 + 34, v57 + 42);
        swift_bridgeObjectRelease();
        v69 = v156;
        _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v159, "%s: Received message on %s from %s: %s", (uint8_t *)v57, 0x2Au);
        v70 = v157;
        swift_arrayDestroy(v157, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        v71 = v57;
        v46 = v162;
        swift_slowDealloc(v71, -1, -1);

      }
      else
      {
        v64 = *(void (**)(char *, uint64_t))(v50 + 8);
        v64(v52, v44);

        swift_bridgeObjectRelease_n(v143, 2);
        swift_bridgeObjectRelease_n(a2, 2);
        v62 = v155;
      }
      v116 = *(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t, _QWORD, uint64_t, unint64_t, char *, unint64_t, uint64_t))(v160 + 152);
      if (v116)
      {
        v117 = *(_QWORD *)(v160 + 160);
        swift_retain();
        v118 = sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
        v116((void (*)(_QWORD, _QWORD, _QWORD))v145, v146, v147, v62, v143, v46, v118, v142);
        sub_10001D8A8((uint64_t)v116, v117);
        swift_bridgeObjectRelease();
      }
      v64(v46, v163);
    }
    else
    {
      v83 = (void (*)(os_log_t, char *, uint64_t))*((_QWORD *)v25 + 4);
      v84 = v156;
      v83(v156, v24, v48);
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v85 = type metadata accessor for Logger(0);
      v86 = sub_10001A9E8(v85, (uint64_t)qword_1011B7EC8);
      v87 = *(void (**)(char *, char *, uint64_t))(v158 + 16);
      v87(v38, v46, v44);
      v88 = v154;
      v145 = (void (*)(char *, os_log_t, uint64_t))*((_QWORD *)v47 + 2);
      v145(v154, v84, v48);
      swift_bridgeObjectRetain_n(a2, 2);
      swift_bridgeObjectRetain_n(v143, 2);
      v151 = v47;
      v146 = v86;
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.default.getter(v90);
      v92 = v91;
      v93 = os_log_type_enabled(v90, v91);
      v147 = v87;
      if (v93)
      {
        v94 = swift_slowAlloc(52, -1);
        v141 = swift_slowAlloc(160, -1);
        v167[0] = v141;
        *(_DWORD *)v94 = 136316162;
        v140 = v90;
        v165 = v159;
        v95 = swift_getMetatypeMetadata(v159);
        v96 = String.init<A>(describing:)(&v165, v95);
        v165 = sub_100016940(v96, v97, v167);
        LODWORD(v159) = v92;
        v98 = v143;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v94 + 4, v94 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v94 + 12) = 2080;
        swift_bridgeObjectRetain(a2);
        v165 = sub_100016940((uint64_t)v161, a2, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v94 + 14, v94 + 22);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v94 + 22) = 2080;
        swift_bridgeObjectRetain(v98);
        v165 = sub_100016940(v155, v98, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v94 + 24, v94 + 32);
        swift_bridgeObjectRelease_n(v98, 3);
        *(_WORD *)(v94 + 32) = 2080;
        v99 = v152;
        v87(v152, v38, v44);
        v100 = *(void (**)(char *, uint64_t))(v158 + 8);
        v161 = v100;
        v100(v38, v44);
        Message.description.getter(v44);
        v102 = v101;
        v104 = v103;
        v100(v99, v44);
        v165 = sub_100016940(v102, v104, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v94 + 34, v94 + 42);
        v105 = v156;
        swift_bridgeObjectRelease();
        *(_WORD *)(v94 + 42) = 2080;
        v48 = v157;
        v106 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v107 = v154;
        v108 = dispatch thunk of CustomStringConvertible.description.getter(v48, v106);
        v165 = sub_100016940(v108, v109, v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v94 + 44, v94 + 52);
        swift_bridgeObjectRelease();
        v110 = (void (*)(char *, uint64_t))*((_QWORD *)v151 + 1);
        v110(v107, v48);
        v111 = v140;
        _os_log_impl((void *)&_mh_execute_header, v140, (os_log_type_t)v159, "%s: Received message on %s from %s: %s in response to %s", (uint8_t *)v94, 0x34u);
        v112 = v141;
        swift_arrayDestroy(v141, 5, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1, -1);
        swift_slowDealloc(v94, -1, -1);

        v114 = v160;
        v115 = v153;
      }
      else
      {
        v161 = *(void (**)(char *, uint64_t))(v158 + 8);
        v161(v38, v44);
        swift_bridgeObjectRelease_n(v143, 2);
        swift_bridgeObjectRelease_n(a2, 2);
        v110 = (void (*)(char *, uint64_t))*((_QWORD *)v151 + 1);
        v110(v88, v48);

        v114 = v160;
        v115 = v153;
        v105 = v84;
      }
      v119 = *(_QWORD *)(v114 + 32);
      __chkstk_darwin(v113);
      *(&v140 - 2) = v120;
      *(&v140 - 1) = v105;
      FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1(67108865, v115, &type metadata for () + 1);
      v122 = type metadata accessor for Optional(0, FunctionTypeMetadata1);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BF112C, &(&v140)[-4], v119, &type metadata for () + 1, v122);
      v123 = (void (*)(char *))v165;
      if (v165)
      {
        v124 = v166[0];
        v125 = v149;
        v126 = (uint64_t)&v149[*(int *)(v148 + 48)];
        v128 = v162;
        v127 = v163;
        v147(v149, v162, v163);
        sub_1003EA8D8(v142, v126);
        swift_storeEnumTagMultiPayload(v125, v115, 0);
        swift_retain();
        v123(v125);
        sub_10001D8A8((uint64_t)v123, v124);
        sub_10001D8A8((uint64_t)v123, v124);
        (*(void (**)(char *, uint64_t))(v150 + 8))(v125, v115);
        v129 = v128;
        v130 = v127;
      }
      else
      {
        v131 = v144;
        v132 = ((uint64_t (*)(char *, NSObject *, uint64_t))v145)(v144, v105, v48);
        v133 = Logger.logObject.getter(v132);
        v134 = static os_log_type_t.error.getter(v133);
        if (os_log_type_enabled(v133, v134))
        {
          v135 = (uint8_t *)swift_slowAlloc(12, -1);
          v136 = swift_slowAlloc(32, -1);
          v167[0] = v136;
          *(_DWORD *)v135 = 136315138;
          v137 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v138 = dispatch thunk of CustomStringConvertible.description.getter(v157, v137);
          v164 = sub_100016940(v138, v139, v167);
          v105 = v156;
          v48 = v157;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165, v135 + 4, v135 + 12);
          swift_bridgeObjectRelease();
          v110(v131, v48);
          _os_log_impl((void *)&_mh_execute_header, v133, v134, "Could not find promise for %s", v135, 0xCu);
          swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v136, -1, -1);
          swift_slowDealloc(v135, -1, -1);

        }
        else
        {

          v110(v131, v48);
        }
        v129 = v162;
        v130 = v163;
      }
      v161(v129, v130);
      v110((char *)v105, v48);
    }
  }
  else
  {
    v72 = a2;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v73 = type metadata accessor for Logger(0);
    sub_10001A9E8(v73, (uint64_t)qword_1011B7EC8);
    swift_bridgeObjectRetain_n(a2, 2);
    v74 = v160;
    v75 = swift_retain_n(v160, 2);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v78 = swift_slowAlloc(32, -1);
      v163 = swift_slowAlloc(96, -1);
      v167[0] = v163;
      *(_DWORD *)v78 = 136315650;
      v165 = v159;
      v79 = swift_getMetatypeMetadata(v159);
      v80 = String.init<A>(describing:)(&v165, v79);
      v165 = sub_100016940(v80, v81, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 12) = 2080;
      swift_bridgeObjectRetain(v41);
      v165 = sub_100016940(v40, v41, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v78 + 14, v78 + 22);
      swift_release_n(v74, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v78 + 22) = 2080;
      swift_bridgeObjectRetain(v72);
      v165 = sub_100016940((uint64_t)v161, v72, v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v78 + 24, v78 + 32);
      swift_bridgeObjectRelease_n(v72, 3);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v78, 0x20u);
      v82 = v163;
      swift_arrayDestroy(v163, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v72, 2);
      swift_release_n(v74, 2);
    }
  }
}

uint64_t sub_100BEF558@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t FunctionTypeMetadata1;
  uint64_t v17;
  __int128 v19;
  _BYTE v20[24];

  v6 = *a1;
  swift_beginAccess(a1 + 10, v20, 32, 0);
  v7 = a1[10];
  v8 = type metadata accessor for UUID(0);
  v10 = type metadata accessor for Message(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 96), v9);
  v11 = type metadata accessor for MessagingMessageContext(255);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, v11, 0, 0, v12);
  v14 = sub_10001F784((uint64_t *)&unk_1010EE2F0);
  v15 = type metadata accessor for Result(255, TupleTypeMetadata2, v14, &protocol self-conformance witness table for Error);
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1(67108865, v15, &type metadata for () + 1);
  v17 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  Dictionary.subscript.getter(&v19, a2, v7, v8, FunctionTypeMetadata1, v17);
  *a3 = v19;
  return swift_endAccess(v20);
}

void sub_100BEF690(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t MetatypeMetadata;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  void (*v62)(_BYTE *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  os_log_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v70;
  _BYTE v71[4];
  int v72;
  os_log_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  void (*v85)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v11 = v10;
  LODWORD(v83) = a7;
  v81 = a3;
  v82 = a4;
  v17 = *(_QWORD *)v11;
  v18 = type metadata accessor for Message(0, *(_QWORD *)(*(_QWORD *)v11 + 80), *(_QWORD *)(*(_QWORD *)v11 + 96), a4);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v80 = &v71[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __chkstk_darwin(v20);
  v24 = &v71[-v23];
  __chkstk_darwin(v22);
  v84 = &v71[-v25];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v11 + 48));
  v26 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v11 + 152);
  if (v26)
  {
    v78 = a8;
    v79 = a6;
    v27 = *(_QWORD *)(v11 + 160);
    v29 = *(_QWORD *)(v11 + 16);
    v28 = *(_QWORD *)(v11 + 24);
    v85 = v26;
    v86 = v27;
    if (v29 == a1 && v28 == a2 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v29, v28, 0) & 1) != 0)
    {
      swift_retain();
      v30 = Data.init(contentsOf:options:)(a5, 0);
      v32 = v31;
      v33 = type metadata accessor for PropertyListDecoder(0);
      v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
      PropertyListDecoder.init()(v34);
      WitnessTable = swift_getWitnessTable(protocol conformance descriptor for Message<A>, v18);
      v36 = v84;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v18, v30, v32, v18, WitnessTable);
      v75 = a10;
      swift_release();
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v76 = v30;
      v77 = v32;
      v49 = type metadata accessor for Logger(0);
      sub_10001A9E8(v49, (uint64_t)qword_1011B7EC8);
      v50 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 16);
      v50(v24, v36, v18);
      swift_bridgeObjectRetain_n(a9, 2);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      v54 = v53;
      if (os_log_type_enabled(v52, v53))
      {
        v55 = swift_slowAlloc(32, -1);
        v73 = v52;
        v56 = v55;
        v74 = swift_slowAlloc(96, -1);
        v87 = v74;
        v88 = v17;
        *(_DWORD *)v56 = 136315650;
        v72 = v54;
        MetatypeMetadata = swift_getMetatypeMetadata(v17);
        v58 = String.init<A>(describing:)(&v88, MetatypeMetadata);
        v88 = sub_100016940(v58, v59, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v56 + 4, v56 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2080;
        swift_bridgeObjectRetain(a9);
        v60 = v78;
        v88 = sub_100016940(v78, a9, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v56 + 14, v56 + 22);
        swift_bridgeObjectRelease_n(a9, 3);
        *(_WORD *)(v56 + 22) = 2080;
        v61 = v80;
        v50(v80, v24, v18);
        v62 = *(void (**)(_BYTE *, uint64_t))(v19 + 8);
        v62(v24, v18);
        Message.description.getter(v18);
        v64 = v63;
        v66 = v65;
        v62(v61, v18);
        v88 = sub_100016940(v64, v66, &v87);
        v36 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v56 + 24, v56 + 32);
        swift_bridgeObjectRelease();
        v67 = v73;
        _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v72, "%s: Received resource from %s: %s", (uint8_t *)v56, 0x20u);
        v68 = v74;
        swift_arrayDestroy(v74, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v56, -1, -1);

      }
      else
      {
        v62 = *(void (**)(_BYTE *, uint64_t))(v19 + 8);
        v62(v24, v18);

        swift_bridgeObjectRelease_n(a9, 2);
        v60 = v78;
      }
      v69 = v85;
      v70 = v86;
      v85(v81, v82, v83, v60, a9, v36, v79, v75);
      sub_10001D8A8((uint64_t)v69, v70);
      sub_10001BC14(v76, v77);
      v62(v36, v18);
    }
    else
    {
      v37 = qword_1010EA3C8;
      swift_retain();
      if (v37 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v38 = type metadata accessor for Logger(0);
      sub_10001A9E8(v38, (uint64_t)qword_1011B7EC8);
      swift_retain_n(v11, 2);
      swift_bridgeObjectRetain_n(a2, 2);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter(v40);
      v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        v43 = swift_slowAlloc(32, -1);
        LODWORD(v84) = v42;
        v44 = v43;
        v83 = swift_slowAlloc(96, -1);
        v87 = v83;
        v88 = v17;
        *(_DWORD *)v44 = 136315650;
        v45 = swift_getMetatypeMetadata(v17);
        v46 = String.init<A>(describing:)(&v88, v45);
        v88 = sub_100016940(v46, v47, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v44 + 4, v44 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        swift_bridgeObjectRetain(v28);
        v88 = sub_100016940(v29, v28, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v44 + 14, v44 + 22);
        swift_release_n(v11, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 22) = 2080;
        swift_bridgeObjectRetain(a2);
        v88 = sub_100016940(a1, a2, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v44 + 24, v44 + 32);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v84, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v44, 0x20u);
        v48 = v83;
        swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v44, -1, -1);
        sub_10001D8A8((uint64_t)v85, v86);

      }
      else
      {
        sub_10001D8A8((uint64_t)v85, v86);

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v11, 2);
      }
    }
  }
}

void sub_100BEFF38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_type_t type;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v8 = *(_QWORD *)v4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 48));
  v9 = *(void (**)(uint64_t))(v4 + 168);
  if (v9)
  {
    v10 = *(_QWORD *)(v4 + 176);
    v12 = *(_QWORD *)(v4 + 16);
    v11 = *(_QWORD *)(v4 + 24);
    v13 = v12 == a1 && v11 == a2;
    if (v13
      || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), 0) & 1) != 0)
    {
      swift_retain();
      v9(a3);
      sub_10001D8A8((uint64_t)v9, v10);
    }
    else
    {
      v14 = qword_1010EA3C8;
      swift_retain();
      if (v14 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v15 = type metadata accessor for Logger(0);
      sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
      swift_retain_n(v4, 2);
      swift_bridgeObjectRetain_n(a2, 2);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        type = v18;
        v19 = swift_slowAlloc(32, -1);
        v23 = swift_slowAlloc(96, -1);
        v25 = v23;
        v26 = v8;
        *(_DWORD *)v19 = 136315650;
        MetatypeMetadata = swift_getMetatypeMetadata(v8);
        v21 = String.init<A>(describing:)(&v26, MetatypeMetadata);
        v26 = sub_100016940(v21, v22, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        swift_bridgeObjectRetain(v11);
        v26 = sub_100016940(v12, v11, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 14, v19 + 22);
        swift_release_n(v4, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 22) = 2080;
        swift_bridgeObjectRetain(a2);
        v26 = sub_100016940(a1, a2, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 24, v19 + 32);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v17, type, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy(v23, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v19, -1, -1);
        sub_10001D8A8((uint64_t)v9, v10);

      }
      else
      {
        sub_10001D8A8((uint64_t)v9, v10);

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v4, 2);
      }
    }
  }
}

void sub_100BF0248(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_type_t type;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v8 = *(_QWORD *)v4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 48));
  v9 = *(void (**)(uint64_t))(v4 + 184);
  if (v9)
  {
    v10 = *(_QWORD *)(v4 + 192);
    v12 = *(_QWORD *)(v4 + 16);
    v11 = *(_QWORD *)(v4 + 24);
    v13 = v12 == a1 && v11 == a2;
    if (v13
      || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), 0) & 1) != 0)
    {
      swift_retain();
      v9(a3);
      sub_10001D8A8((uint64_t)v9, v10);
    }
    else
    {
      v14 = qword_1010EA3C8;
      swift_retain();
      if (v14 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v15 = type metadata accessor for Logger(0);
      sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
      swift_retain_n(v4, 2);
      swift_bridgeObjectRetain_n(a2, 2);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        type = v18;
        v19 = swift_slowAlloc(32, -1);
        v23 = swift_slowAlloc(96, -1);
        v25 = v23;
        v26 = v8;
        *(_DWORD *)v19 = 136315650;
        MetatypeMetadata = swift_getMetatypeMetadata(v8);
        v21 = String.init<A>(describing:)(&v26, MetatypeMetadata);
        v26 = sub_100016940(v21, v22, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        swift_bridgeObjectRetain(v11);
        v26 = sub_100016940(v12, v11, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 14, v19 + 22);
        swift_release_n(v4, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 22) = 2080;
        swift_bridgeObjectRetain(a2);
        v26 = sub_100016940(a1, a2, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 24, v19 + 32);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v17, type, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy(v23, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v19, -1, -1);
        sub_10001D8A8((uint64_t)v9, v10);

      }
      else
      {
        sub_10001D8A8((uint64_t)v9, v10);

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v4, 2);
      }
    }
  }
}

void sub_100BF0558(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t MetatypeMetadata;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_type_t type;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v8 = *(_QWORD *)v4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 48));
  v9 = *(void (**)(uint64_t))(v4 + 200);
  if (v9)
  {
    v10 = *(_QWORD *)(v4 + 208);
    v12 = *(_QWORD *)(v4 + 16);
    v11 = *(_QWORD *)(v4 + 24);
    v13 = v12 == a1 && v11 == a2;
    if (v13
      || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), 0) & 1) != 0)
    {
      swift_retain();
      v9(a3);
      sub_10001D8A8((uint64_t)v9, v10);
    }
    else
    {
      v14 = qword_1010EA3C8;
      swift_retain();
      if (v14 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v15 = type metadata accessor for Logger(0);
      sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
      swift_retain_n(v4, 2);
      swift_bridgeObjectRetain_n(a2, 2);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        type = v18;
        v19 = swift_slowAlloc(32, -1);
        v23 = swift_slowAlloc(96, -1);
        v25 = v23;
        v26 = v8;
        *(_DWORD *)v19 = 136315650;
        MetatypeMetadata = swift_getMetatypeMetadata(v8);
        v21 = String.init<A>(describing:)(&v26, MetatypeMetadata);
        v26 = sub_100016940(v21, v22, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        swift_bridgeObjectRetain(v11);
        v26 = sub_100016940(v12, v11, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 14, v19 + 22);
        swift_release_n(v4, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 22) = 2080;
        swift_bridgeObjectRetain(a2);
        v26 = sub_100016940(a1, a2, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 24, v19 + 32);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v17, type, "%s: Ignoring delegate callback from wrong IDS service! Expected %s, received: %s", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy(v23, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v19, -1, -1);
        sub_10001D8A8((uint64_t)v9, v10);

      }
      else
      {
        sub_10001D8A8((uint64_t)v9, v10);

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v4, 2);
      }
    }
  }
}

void sub_100BF0870(void (*a1)(char *, uint64_t), unint64_t a2, void (*a3)(char *, os_log_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  sub_100BEE414(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_100BF087C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  sub_100BEF690(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_100BF0894(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8)
{
  sub_100BF08DC(a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100BF08B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100BF08DC(void *a1, unsigned int a2, uint64_t a3, id a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t MetatypeMetadata;
  uint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void (*v36)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  id v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  __int128 v48;
  double v49;
  double v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86[2];
  _OWORD v87[3];

  v7 = v6;
  v85 = a5;
  v13 = *(_QWORD *)v7;
  v14 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v7 + 48));
  v17 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v7 + 216);
  if (v17)
  {
    v80 = v14;
    v81 = a3;
    v77 = a2;
    v18 = *(_QWORD *)(v7 + 224);
    v19 = qword_1010EA3C8;
    swift_retain();
    if (v19 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7EC8);
    v22 = a1;
    swift_bridgeObjectRetain(a4);
    v23 = v85;
    sub_10001BBBC(v85, a6);
    v84 = v22;
    swift_bridgeObjectRetain(a4);
    v24 = sub_10001BBBC(v23, a6);
    v83 = v21;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter(v25);
    v27 = v26;
    v28 = os_log_type_enabled(v25, v26);
    v78 = v16;
    if (v28)
    {
      v29 = swift_slowAlloc(42, -1);
      v76 = swift_slowAlloc(128, -1);
      v86[0] = v76;
      *(_DWORD *)v29 = 136315906;
      v82 = a6;
      *(_QWORD *)&v87[0] = v13;
      MetatypeMetadata = swift_getMetatypeMetadata(v13);
      v75 = v27;
      v31 = String.init<A>(describing:)(v87, MetatypeMetadata);
      v79 = v13;
      *(_QWORD *)&v87[0] = sub_100016940(v31, v32, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      v73 = v29 + 14;
      v33 = v84;
      v34 = objc_msgSend(v33, "description");
      v74 = v25;
      v35 = v18;
      v36 = v17;
      v37 = v34;
      v38 = (unint64_t)a4;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v41 = v40;

      v17 = v36;
      v18 = v35;
      v42 = v39;
      a4 = (id)v38;
      *(_QWORD *)&v87[0] = sub_100016940(v42, v41, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v73, v29 + 22);

      v13 = v79;
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      swift_bridgeObjectRetain(v38);
      *(_QWORD *)&v87[0] = sub_100016940(v81, v38, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v29 + 24, v29 + 32);
      swift_bridgeObjectRelease_n(v38, 3);
      *(_WORD *)(v29 + 32) = 2080;
      v43 = v85;
      v44 = Data.hexString.getter(v85, v82);
      *(_QWORD *)&v87[0] = sub_100016940(v44, v45, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v29 + 34, v29 + 42);
      a6 = v82;
      swift_bridgeObjectRelease();
      sub_10001BC14(v43, a6);
      sub_10001BC14(v43, a6);
      v25 = v74;
      _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v75, "%s: inviteReceivedFor %s fromId: %s withContext: %s", (uint8_t *)v29, 0x2Au);
      v46 = v76;
      swift_arrayDestroy(v76, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      v47 = v84;

      sub_10001BC14(v23, a6);
      sub_10001BC14(v23, a6);
    }

    v48 = *(_OWORD *)(v13 + 96);
    v87[0] = *(_OWORD *)(v13 + 80);
    v87[1] = v48;
    type metadata accessor for MessagingSession(0, (uint64_t)v87);
    v49 = *(double *)(v7 + 96);
    v50 = *(double *)(v7 + 104);
    v51 = *(_QWORD *)(v7 + 112);
    v52 = v84;
    swift_retain();
    v53 = sub_1002F0D88(v52, v7, v51, v49, v50);
    v54 = swift_retain_n(v53, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.debug.getter(v55);
    v57 = v56;
    if (os_log_type_enabled(v55, v56))
    {
      v58 = swift_slowAlloc(22, -1);
      v76 = swift_slowAlloc(64, -1);
      v86[0] = v76;
      *(_DWORD *)v58 = 136315394;
      v75 = v57;
      *(_QWORD *)&v87[0] = v13;
      v59 = swift_getMetatypeMetadata(v13);
      v84 = a4;
      v60 = String.init<A>(describing:)(v87, v59);
      v82 = a6;
      *(_QWORD *)&v87[0] = sub_100016940(v60, v61, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      v62 = sub_1002F0C2C();
      v79 = v13;
      v63 = v18;
      v64 = v17;
      v66 = v65;
      swift_release();
      *(_QWORD *)&v87[0] = sub_100016940(v62, v66, v86);
      a4 = v84;
      a6 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v58 + 14, v58 + 22);
      swift_release();
      v17 = v64;
      v18 = v63;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v75, "%s: session: %s", (uint8_t *)v58, 0x16u);
      v67 = v76;
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {

      swift_release_n(v53, 2);
    }
    v68 = (uint64_t)v78;
    v69 = type metadata accessor for PropertyListDecoder(0);
    v70 = swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
    PropertyListDecoder.init()(v70);
    v71 = sub_100006204(&qword_1010F8150, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37AB8);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v80, v85, a6, v80, v71);
    swift_release();
    v17(v68, v77, v81, a4, v53);
    sub_10001D8A8((uint64_t)v17, v18);
    swift_release();
    sub_1003420EC(v68);
  }
}

uint64_t sub_100BF112C@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100BEF558(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100BF1144()
{
  uint64_t v0;

  return sub_100BECF10(v0);
}

void *sub_100BF115C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  void *result;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  Swift::String v43;
  unsigned __int8 v44;
  void *v45;
  _QWORD v46[11];
  uint64_t v47;

  v0 = sub_10001A9A8(&qword_1010ECF78);
  __chkstk_darwin(v0);
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SystemVersionNumber(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v39 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - v7;
  v45 = &_swiftEmptySetSingleton;
  v9 = (uint64_t)sub_1003AFF14();
  if ((unint64_t)v9 >> 62)
  {
LABEL_26:
    if (v9 < 0)
      v36 = v9;
    else
      v36 = v9 & 0xFFFFFFFFFFFFFF8;
    v10 = _CocoaArrayWrapper.endIndex.getter(v36);
    if (v10)
      goto LABEL_3;
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
LABEL_3:
      v42 = v9 & 0xC000000000000001;
      v11 = 4;
      v38 = v4;
      v37 = v8;
      v41 = v9;
      v40 = v10;
      while (1)
      {
        v12 = v11 - 4;
        if (v42)
        {
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v9);
          v14 = v11 - 3;
          if (__OFADD__(v12, 1))
            goto LABEL_25;
        }
        else
        {
          v13 = *(id *)(v9 + 8 * v11);
          v14 = v11 - 3;
          if (__OFADD__(v12, 1))
          {
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
        }
        v15 = v13;
        sub_100AA600C(v15, (uint64_t)v46);
        v16 = v46[10];
        v17 = v47;
        v18 = swift_bridgeObjectRetain(v47);
        SystemVersionNumber.init(string:)(v16, v17, v18);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
        {
          sub_100004048((uint64_t)v2, &qword_1010ECF78);
          sub_10008B200(v46);

        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v8, v2, v3);
          v43 = String.lowercased()();
          sub_100BF1540();
          sub_1000330C8();
          static PartialMatchCase<>.first(containing:)(&v43);
          swift_bridgeObjectRelease();
          if (v44 == 4)
          {
            v19 = v8;
            (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
            sub_10008B200(v46);
LABEL_18:

            v8 = v19;
            goto LABEL_5;
          }
          if (v44 >= 3u)
            v20 = 809578546;
          else
            v20 = 809580593;
          v21 = v3;
          v22 = v4;
          v23 = v39;
          SystemVersionNumber.init(stringLiteral:)(v20, 0xE400000000000000);
          v24 = sub_100006204((unint64_t *)&qword_1010ECF80, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
          v25 = dispatch thunk of static Comparable.< infix(_:_:)(v8, v23, v21, v24);
          v26 = *(void (**)(char *, uint64_t))(v22 + 8);
          v27 = v23;
          v4 = v22;
          v3 = v21;
          v26(v27, v21);
          v19 = v8;
          v26(v8, v3);
          sub_10008B200(v46);
          if ((v25 & 1) != 0)
            goto LABEL_18;
          result = (void *)IDSCopyIDForDevice(v15);
          if (!result)
          {
            __break(1u);
            return result;
          }
          v29 = result;
          v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
          v32 = v31;

          v33 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v30, v32);
          if (v35)
          {
            sub_100A0C018((uint64_t)&v43, v33, v34, v35);

            swift_bridgeObjectRelease();
          }
          else
          {

          }
          v8 = v37;
          v4 = v38;
        }
LABEL_5:
        ++v11;
        v9 = v41;
        if (v14 == v40)
        {
          swift_bridgeObjectRelease();
          return v45;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return &_swiftEmptySetSingleton;
}

unint64_t sub_100BF1540()
{
  unint64_t result;

  result = qword_101118C98[0];
  if (!qword_101118C98[0])
  {
    result = swift_getWitnessTable(asc_100E3C334, &type metadata for BeaconSharingManager.IntentsSupportedDeviceType);
    atomic_store(result, qword_101118C98);
  }
  return result;
}

uint64_t sub_100BF1584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for FailableRecordSequence(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Optional(319, v5);
  if (v7 <= 0x3F)
  {
    v8 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v8, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100BF15FC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;

  v6 = type metadata accessor for FailableRecordSequence(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_QWORD *)(type metadata accessor for Optional(0, v6) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  if ((v8 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v8 + 16) & ~(unint64_t)v8));
    swift_retain();
  }
  else
  {
    v9 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v7 + 64));
    }
    else
    {
      v11 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      *(uint64_t *)((char *)a1 + *(int *)(v6 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 36));
      v12 = *(int *)(v6 + 40);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for DirectorySequence(0);
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_retain();
      if (v17(v14, 1, v15))
      {
        v18 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

char *sub_100BF1788(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;

  v6 = type metadata accessor for FailableRecordSequence(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v21 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(a1, a2, v21);
      *(_QWORD *)&a1[*(int *)(v6 + 36)] = *(_QWORD *)&a2[*(int *)(v6 + 36)];
      swift_retain();
      swift_release();
      v22 = *(int *)(v6 + 40);
      v23 = &a1[v22];
      a2 += v22;
      v24 = type metadata accessor for DirectorySequence(0);
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
      v27 = v26(v23, 1, v24);
      v28 = v26(a2, 1, v24);
      if (v27)
      {
        if (!v28)
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v23, a2, v24);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
          return a1;
        }
      }
      else
      {
        if (!v28)
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v23, a2, v24);
          return a1;
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F77A0) - 8) + 64);
      v20 = v23;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_7:
    v19 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional(0, v6) - 8) + 64);
    v20 = a1;
LABEL_8:
    memcpy(v20, a2, v19);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  *(_QWORD *)&a1[*(int *)(v6 + 36)] = *(_QWORD *)&a2[*(int *)(v6 + 36)];
  v12 = *(int *)(v6 + 40);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DirectorySequence(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_retain();
  if (v17(v14, 1, v15))
  {
    v18 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

char *sub_100BF1A14(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for FailableRecordSequence(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = type metadata accessor for Optional(0, v6);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    *(_QWORD *)&a1[*(int *)(v6 + 36)] = *(_QWORD *)&a2[*(int *)(v6 + 36)];
    v10 = *(int *)(v6 + 40);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = type metadata accessor for DirectorySequence(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_100BF1B68(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;

  v6 = type metadata accessor for FailableRecordSequence(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v20 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(a1, a2, v20);
      *(_QWORD *)&a1[*(int *)(v6 + 36)] = *(_QWORD *)&a2[*(int *)(v6 + 36)];
      swift_release();
      v21 = *(int *)(v6 + 40);
      v22 = &a1[v21];
      a2 += v21;
      v23 = type metadata accessor for DirectorySequence(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
      v26 = v25(v22, 1, v23);
      v27 = v25(a2, 1, v23);
      if (v26)
      {
        if (!v27)
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v22, a2, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v23);
          return a1;
        }
      }
      else
      {
        if (!v27)
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v22, a2, v23);
          return a1;
        }
        (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F77A0) - 8) + 64);
      v19 = v22;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_7:
    v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Optional(0, v6) - 8) + 64);
    v19 = a1;
LABEL_8:
    memcpy(v19, a2, v18);
    return a1;
  }
  if (v10)
    goto LABEL_7;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  *(_QWORD *)&a1[*(int *)(v6 + 36)] = *(_QWORD *)&a2[*(int *)(v6 + 36)];
  v12 = *(int *)(v6 + 40);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for DirectorySequence(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100BF1DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BF1DE8);
}

uint64_t sub_100BF1DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for FailableRecordSequence(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = type metadata accessor for Optional(0, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(a1, a2, v7);
}

uint64_t sub_100BF1E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BF1E40);
}

uint64_t sub_100BF1E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for FailableRecordSequence(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  v7 = type metadata accessor for Optional(0, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t type metadata accessor for RecordSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RecordSequence);
}

uint64_t sub_100BF1E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = type metadata accessor for FailableRecord(255, v5, a2, a3);
  v7 = type metadata accessor for Optional(0, v6);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v41 - v9;
  v47 = *(_QWORD *)(v6 - 8);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  v16 = *(_QWORD *)(a1 + 24);
  v48 = v5;
  v18 = type metadata accessor for FailableRecordSequence(255, v5, v16, v17);
  v19 = type metadata accessor for Optional(0, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v41 - v22;
  v24 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v21);
  v26 = (char *)&v41 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v50, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    v27 = v48;
    v28 = *(_QWORD *)(v48 - 8);
    v29 = 1;
LABEL_8:
    v39 = v49;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v39, v29, 1, v27);
  }
  v42 = v20;
  v43 = v19;
  v44 = v24;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v23, v18);
  sub_1008D3DB4(v18, v30, v31, (uint64_t)v10);
  v32 = v47;
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (v33(v10, 1, v6) == 1)
  {
LABEL_7:
    v37 = v44;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v18);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v46);
    v38 = v50;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v50, v43);
    v29 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v38, 1, 1, v18);
    v27 = v48;
    v28 = *(_QWORD *)(v48 - 8);
    goto LABEL_8;
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  while (1)
  {
    v34(v15, v10, v6);
    v34(v13, v15, v6);
    if (swift_getEnumCaseMultiPayload(v13, v6) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v6);
    sub_1008D3DB4(v18, v35, v36, (uint64_t)v10);
    if (v33(v10, 1, v6) == 1)
      goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v18);
  v27 = v48;
  v39 = v49;
  v28 = *(_QWORD *)(v48 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v49, v13, v48);
  v29 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v39, v29, 1, v27);
}

uint64_t sub_100BF21AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = j___ss30_copySequenceToContiguousArrayys0dE0Vy7ElementQzGxSTRzlF(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t sub_100BF2204(uint64_t a1)
{
  return swift_getWitnessTable(byte_100E64A68, a1);
}

ValueMetadata *type metadata accessor for AirpodsPairingSpec1_1()
{
  return &type metadata for AirpodsPairingSpec1_1;
}

unint64_t sub_100BF222C()
{
  unint64_t result;

  result = qword_101118D20;
  if (!qword_101118D20)
  {
    result = swift_getWitnessTable(byte_100E64B64, &type metadata for AirPodsPairingCommand1_1);
    atomic_store(result, (unint64_t *)&qword_101118D20);
  }
  return result;
}

uint64_t sub_100BF2270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  _BYTE v11[200];

  sub_100BF2ED8(a1, a2, a3, a4, a5, a6, a7, a8);
  return sub_100785EA0((uint64_t)v11, a9);
}

_QWORD *sub_100BF22B8@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  _OWORD v9[13];
  __int128 v10;

  LODWORD(v9[0]) = a1;
  v4 = sub_1000588DC();
  v5 = FixedWidthInteger.data.getter(&type metadata for UInt32, v4);
  v7 = v6;
  sub_100265524();
  result = BinaryDecodable.init(data:)(&v10, v5, v7);
  if (!v2)
  {
    v9[0] = v10;
    sub_100786018(v9);
    return (_QWORD *)sub_100785EA0((uint64_t)v9, a2);
  }
  return result;
}

uint64_t sub_100BF2364(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1007DE290(a3, a4);
  if (!v4)
  {
    v10 = result;
    v11 = v8;
    v12 = v9;
    sub_10001BBBC(result, v8);
    sub_1002F715C(v10, v11);
    a1[3] = &type metadata for CollaborativeKeyGen.v2.C2;
    a1[4] = sub_100059F14();
    *a1 = v13;
    a1[1] = v14;
    a2[3] = type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
    a2[4] = &off_101093D50;
    result = sub_10001BC14(v10, v11);
    *a2 = v12;
  }
  return result;
}

void sub_100BF244C()
{
  uint64_t v0;
  char *v1;
  _BYTE v2[200];

  sub_100785EA0(v0, (uint64_t)v2);
  v1 = (char *)sub_100BF2490 + 4 * byte_100E64B00[sub_100BF2CD4((uint64_t)v2)];
  __asm { BR              X10 }
}

uint64_t sub_100BF2490()
{
  uint64_t v1;

  sub_100785E04((uint64_t)&v1);
  return 1;
}

void sub_100BF2540()
{
  uint64_t v0;
  char *v1;
  _BYTE v2[200];
  _BYTE v3[200];
  _BYTE v4[208];

  sub_100785EA0(v0, (uint64_t)v2);
  sub_100785EA0((uint64_t)v2, (uint64_t)v4);
  sub_100785EA0(v0, (uint64_t)v3);
  v1 = (char *)sub_100BF25AC + 4 * word_100E64B0C[sub_100BF2CD4((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_100BF25AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  _BYTE v10[400];
  uint64_t v11;
  uint64_t v12;

  v1 = sub_100785E04((uint64_t)&v11);
  v9 = *(_OWORD *)v1;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v0[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
  v0[4] = sub_10005A2C0();
  v4 = swift_allocObject(&unk_1010B4498, 48, 7);
  *v0 = v4;
  *(_OWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  sub_100785EA0((uint64_t)&v12, (uint64_t)v10);
  v5 = (uint64_t *)sub_100785E04((uint64_t)v10);
  v6 = v5[2];
  v7 = v5[3];
  sub_10001BBBC(*v5, v5[1]);
  return sub_10001BBBC(v6, v7);
}

void sub_100BF2B50()
{
  uint64_t v0;
  _BYTE v1[200];

  sub_100785EA0(v0, (uint64_t)v1);
  sub_100BF2540();
}

void sub_100BF2B8C()
{
  uint64_t v0;
  _BYTE v1[200];

  sub_100785EA0(v0, (uint64_t)v1);
  sub_100BF244C();
}

unint64_t sub_100BF2BC0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100BF2BEC();
  result = sub_100BF2C30();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BF2BEC()
{
  unint64_t result;

  result = qword_101118EC0;
  if (!qword_101118EC0)
  {
    result = swift_getWitnessTable(byte_100E64BA8, &type metadata for AirPodsPairingCommand1_1);
    atomic_store(result, (unint64_t *)&qword_101118EC0);
  }
  return result;
}

unint64_t sub_100BF2C30()
{
  unint64_t result;

  result = qword_101118EC8;
  if (!qword_101118EC8)
  {
    result = swift_getWitnessTable(byte_100E64B80, &type metadata for AirPodsPairingCommand1_1);
    atomic_store(result, (unint64_t *)&qword_101118EC8);
  }
  return result;
}

uint64_t sub_100BF2C74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100782628(a1, a2);
}

uint64_t sub_100BF2C88(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v4[200];

  sub_100785EA0(v1, (uint64_t)v4);
  return sub_100783438(a1);
}

uint64_t sub_100BF2CD4(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 192) >> 58) & 0xC | (*(_QWORD *)(a1 + 176) >> 60) & 3;
  if (v1 <= 9)
    return v1;
  else
    return (*(_DWORD *)a1 + 10);
}

uint64_t sub_100BF2D00()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_10001BC14(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  sub_10001BC14(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100BF2D44()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100BF2D80()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100BF2DD4()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  return swift_deallocObject(v0, 216, 7);
}

uint64_t sub_100BF2E58()
{
  _QWORD *v0;
  unint64_t v1;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  sub_10001BC14(v0[6], v0[7]);
  sub_10001BC14(v0[8], v0[9]);
  v1 = v0[11];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[10], v1);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100BF2EAC()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100BF2ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X11 }
}

uint64_t sub_100BF2F20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v31[27];

  *(_QWORD *)&v31[0] = BYTE6(a8);
  v14 = sub_100024908();
  v15 = FixedWidthInteger.data.getter(&type metadata for Int, v14);
  v17 = v16;
  Data.trimmed.getter(v15, v16);
  sub_10001BC14(v15, v17);
  sub_1002ACF6C(a1, a2);
  v18 = *(_OWORD *)(v13 - 192);
  v31[0] = *(_OWORD *)(v13 - 208);
  v31[1] = v18;
  v19 = *(_OWORD *)(v13 - 160);
  v31[2] = *(_OWORD *)(v13 - 176);
  v31[3] = v19;
  v20 = *(_OWORD *)(v13 - 128);
  v31[4] = *(_OWORD *)(v13 - 144);
  v31[5] = v20;
  v31[6] = *(_OWORD *)(v13 - 112);
  sub_100786104(v31);
  sub_10001BD08(v9, v12);
  sub_10001BD08(v11, v10);
  sub_10001BBBC(a7, a8);
  sub_10001BBBC(a5, a6);
  sub_10001BBBC(a3, a4);
  sub_10001BBBC(a1, a2);
  return sub_100785EA0((uint64_t)v31, a9);
}

uint64_t destroy for AirPodsPairingCommand1_1(uint64_t a1)
{
  return sub_100BF3124(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           (void (*)(void))sub_10001BC14,
           (uint64_t (*)(void))sub_10001EF3C);
}

uint64_t sub_100BF3124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,unint64_t a25,void (*a26)(void),uint64_t (*a27)(void))
{
  uint64_t (*v33)(void);
  uint64_t result;
  void (*v35)(void);

  v33 = (uint64_t (*)(void))a26;
  switch((a25 >> 58) & 0xC | (a23 >> 60) & 3)
  {
    case 0uLL:
      v35 = a26;
      a26();
      goto LABEL_9;
    case 1uLL:
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      v33 = a27;
      goto LABEL_10;
    case 2uLL:
    case 3uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      goto LABEL_9;
    case 4uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a26)(a21, a22);
      goto LABEL_9;
    case 5uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      goto LABEL_9;
    case 6uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      goto LABEL_9;
    case 7uLL:
    case 8uLL:
      goto LABEL_10;
    case 9uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a6, a7);
      ((void (*)(uint64_t, uint64_t))a26)(a8, a9);
LABEL_9:
      v33 = (uint64_t (*)(void))v35;
LABEL_10:
      result = v33();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for AirPodsPairingCommand1_1(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v3 = a2[7];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  v23 = a2[19];
  v24 = a2[20];
  v25 = a2[21];
  v26 = a2[22];
  v27 = a2[23];
  v28 = a2[24];
  v4 = a2[8];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  sub_100BF3124(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    (void (*)(void))sub_10001BBBC,
    (uint64_t (*)(void))sub_10001BD08);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v3;
  a1[8] = v4;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingCommand1_1(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v3 = a2[7];
  v30 = a2[9];
  v31 = a2[10];
  v32 = a2[11];
  v33 = a2[12];
  v34 = a2[13];
  v35 = a2[14];
  v36 = a2[15];
  v37 = a2[16];
  v38 = a2[17];
  v39 = a2[18];
  v40 = a2[19];
  v41 = a2[20];
  v42 = a2[21];
  v43 = a2[22];
  v44 = a2[23];
  v45 = a2[24];
  v4 = a2[8];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  sub_100BF3124(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    (void (*)(void))sub_10001BBBC,
    (uint64_t (*)(void))sub_10001BD08);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v3;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = v36;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v37;
  *(_QWORD *)(a1 + 136) = v38;
  *(_QWORD *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v41;
  *(_QWORD *)(a1 + 168) = v42;
  *(_QWORD *)(a1 + 176) = v43;
  *(_QWORD *)(a1 + 184) = v44;
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v45;
  sub_100BF3124(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    (void (*)(void))sub_10001BC14,
    (uint64_t (*)(void))sub_10001EF3C);
  return a1;
}

uint64_t assignWithTake for AirPodsPairingCommand1_1(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_QWORD *)(a2 + 192);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 176);
  v20 = *(_QWORD *)(a1 + 192);
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v23;
  v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v24;
  v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  v26 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 192) = v3;
  sub_100BF3124(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    (void (*)(void))sub_10001BC14,
    (uint64_t (*)(void))sub_10001EF3C);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingCommand1_1(uint64_t a1, unsigned int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 > 0x3FFF5 && *(_BYTE *)(a1 + 200))
    return (*(_DWORD *)a1 + 262134);
  if ((((((*(_QWORD *)(a1 + 192) >> 44) & 0x30000 | (*(_QWORD *)(a1 + 176) >> 46) & 0xC000) >> 14) & 0xFFFC000F | (16 * ((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 95) & 0x30 | (*(_QWORD *)(a1 + 104) >> 54) & 0xC0 | (*(_QWORD *)(a1 + 120) >> 52) & 0x300 | (*(_QWORD *)(a1 + 136) >> 50) & 0xC00 | *(_WORD *)(a1 + 158) & 0x3000))) ^ 0x3FFFF) >= 0x3FFF5)
    v3 = -1;
  else
    v3 = ((((*(_QWORD *)(a1 + 192) >> 44) & 0x30000 | (*(_QWORD *)(a1 + 176) >> 46) & 0xC000) >> 14) & 0xFFFC000F | (16 * ((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 95) & 0x30 | (*(_QWORD *)(a1 + 104) >> 54) & 0xC0 | (*(_QWORD *)(a1 + 120) >> 52) & 0x300 | (*(_QWORD *)(a1 + 136) >> 50) & 0xC00 | *(_WORD *)(a1 + 158) & 0x3000))) ^ 0x3FFFF;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingCommand1_1(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 >= 0x3FFF6)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 262134;
    if (a3 > 0x3FFF5)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if (a3 > 0x3FFF5)
      *(_BYTE *)(result + 200) = 0;
    if (a2)
    {
      v3 = ((-a2 >> 4) & 0x3FFF) - (a2 << 14);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((-a2 >> 4) & 3) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = (v3 << 56) & 0x3000000000000000;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = (v3 << 54) & 0x3000000000000000;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = (v3 << 52) & 0x3000000000000000;
      *(_QWORD *)(result + 128) = 0;
      *(_QWORD *)(result + 136) = (v3 << 50) & 0x3000000000000000;
      *(_QWORD *)(result + 144) = 0;
      *(_QWORD *)(result + 152) = (v3 << 48) & 0x3000000000000000;
      *(_QWORD *)(result + 160) = 0;
      *(_QWORD *)(result + 168) = 0;
      *(_QWORD *)(result + 176) = (v3 << 46) & 0x3000000000000000;
      *(_QWORD *)(result + 184) = 0;
      *(_QWORD *)(result + 192) = (v3 << 44) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_100BF3A68(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a2 < 0xA)
  {
    v2 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
    v3 = *(_QWORD *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
    v4 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
    v5 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
    v6 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
    v7 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
    v8 = *(_QWORD *)(result + 176) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    v9 = *(_QWORD *)(result + 192) & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 2) & 3) << 60);
    *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(_QWORD *)(result + 24) = v2;
    *(_QWORD *)(result + 88) = v3;
    *(_QWORD *)(result + 104) = v4;
    *(_QWORD *)(result + 120) = v5;
    *(_QWORD *)(result + 136) = v6;
    *(_QWORD *)(result + 152) = v7;
    *(_QWORD *)(result + 176) = v8;
    *(_QWORD *)(result + 192) = v9;
  }
  else
  {
    *(_QWORD *)result = a2 - 10;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 176) = xmmword_100E2D3C0;
    *(_QWORD *)(result + 192) = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingCommand1_1()
{
  return &type metadata for AirPodsPairingCommand1_1;
}

char *sub_100BF3B44(void *a1, char a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char *v24;
  id v25;
  id v27;
  char *v28;
  objc_super v29;

  v5 = OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_lock;
  v6 = sub_10001A9A8(&qword_1010FAAF0);
  v7 = swift_allocObject(v6, 20, 7);
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)&v2[v5] = v7;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects] = _swiftEmptyDictionarySingleton;
  v8 = &OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
  *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject] = a1;
  v29.receiver = v2;
  v29.super_class = (Class)type metadata accessor for SharedPairingAgent();
  v9 = a1;
  v10 = objc_msgSendSuper2(&v29, "init");
  v11 = qword_1010EA648;
  v12 = v10;
  if (v11 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B8590);
  v14 = (char *)v12;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = v9;
    v28 = v14;
    v18 = a2;
    v19 = swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 138543362;
    v20 = v14;
    v8 = &OBJC_IVAR____TtC12searchpartyd20SharesRemovalManager__revokedCircles;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 4, v17 + 12);
    *(_QWORD *)v19 = v14;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "PairingAgent init %{public}@", v17, 0xCu);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v19, 1, v21);
    v22 = v19;
    LOBYTE(v19) = v18;
    v9 = v27;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    if ((v19 & 1) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }

  if ((a2 & 1) != 0)
  {
LABEL_7:
    v23 = *(void **)&v14[v8[474]];
    v24 = v14;
    v25 = v23;
    objc_msgSend(v25, "setDelegate:", v24);

  }
LABEL_8:

  return v14;
}

id sub_100BF3DA8()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  objc_class *v9;
  id v11;
  objc_super v12;

  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v1 = type metadata accessor for Logger(0);
  sub_10001A9E8(v1, (uint64_t)qword_1011B8590);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    v11 = v2;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);
    *v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "PairingAgent deinit %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v9 = (objc_class *)type metadata accessor for SharedPairingAgent();
  v12.receiver = v2;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, "dealloc");
}

uint64_t sub_100BF3FBC(int a1, void *a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  LODWORD(v4) = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B8590);
  v10 = a2;
  v11 = v2;
  v12 = (char *)v10;
  v13 = (char *)v11;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v34 = v4;
    v4 = v16;
    v17 = (_QWORD *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v37 = v33;
    *(_DWORD *)v4 = 136446466;
    v32 = v4 + 4;
    v18 = objc_msgSend(*(id *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    v21 = v6;
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v5);
    v35 = sub_100016940(v20, v23, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v32, v4 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2114;
    v35 = (uint64_t)v13;
    v24 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v4 + 14, v4 + 22);
    *v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "PairingAgent: startPairing %{public}s. %{public}@.", (uint8_t *)v4, 0x16u);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v17, 1, v25);
    swift_slowDealloc(v17, -1, -1);
    v26 = v33;
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v27 = v4;
    LOBYTE(v4) = v34;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

  }
  v29 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_lock];
  __chkstk_darwin(v28);
  *((_BYTE *)&v32 - 32) = v4 & 1;
  *(&v32 - 3) = (uint64_t)v13;
  *(&v32 - 2) = (uint64_t)v12;
  v30 = sub_10001A9A8(&qword_1010EEBE8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BF6518, &v32 - 6, v29, &type metadata for () + 1, v30);
  return v37;
}

uint64_t sub_100BF4328@<X0>(char a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  char *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  char *v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, __n128);
  uint64_t v58;
  uint64_t v59;
  id v60;
  char v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  char *v75;
  _QWORD aBlock[6];
  _QWORD v77[4];
  uint64_t v78;

  v75 = a2;
  v74 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  __chkstk_darwin(v6);
  v71 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  __chkstk_darwin(v8);
  v68 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for DispatchTime(0);
  v65 = *(_QWORD *)(v67 - 8);
  v10 = __chkstk_darwin(v67);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v66 = (char *)&v63 - v13;
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v63 - v24;
  if ((a1 & 1) != 0)
  {
    v63 = v23;
    v64 = sub_10001A9A8(&qword_101118F78);
    swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
    v26 = PassthroughSubject.init()();
    v27 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                                + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v28 = &v75[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects];
    swift_beginAccess(&v75[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects], aBlock, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v28);
    v77[0] = *(_QWORD *)v28;
    *(_QWORD *)v28 = 0x8000000000000000;
    sub_10010EE90(v26, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v28 = v77[0];
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v63);
    swift_endAccess(aBlock);
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
    v63 = static OS_dispatch_queue.global(qos:)(v17);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    static DispatchTime.now()(v30);
    v31 = v66;
    + infix(_:_:)(v12, 1.0);
    v75 = *(char **)(v65 + 8);
    v32 = v67;
    ((void (*)(char *, uint64_t))v75)(v12, v67);
    aBlock[4] = j___s7Combine18PassthroughSubjectC4sendyyxF;
    aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010B4570;
    v33 = _Block_copy(aBlock);
    v34 = swift_retain();
    v35 = v68;
    static DispatchQoS.unspecified.getter(v34);
    v77[0] = _swiftEmptyArrayStorage;
    v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v39 = v71;
    v40 = v37;
    v41 = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)(v77, v40, v38, v73, v36);
    v42 = (void *)v63;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v31, v35, v39, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v72 + 8))(v39, v41);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v35, v70);
    ((void (*)(char *, uint64_t))v75)(v31, v32);
    swift_release();
    aBlock[0] = v26;
    v43 = sub_1000193A4(&qword_101118F90, &qword_101118F78, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v44 = v64;
LABEL_8:
    v56 = Publisher.eraseToAnyPublisher()(v44, v43);
    goto LABEL_9;
  }
  v45 = v23;
  v46 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
  v47 = objc_msgSend(v46, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

  v48 = &v75[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects];
  v49 = swift_beginAccess(&v75[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects], aBlock, 0, 0);
  v50 = *(_QWORD *)v48;
  if (!*(_QWORD *)(*(_QWORD *)v48 + 16))
  {
LABEL_7:
    v57 = *(void (**)(char *, uint64_t, __n128))(v19 + 8);
    v57(v25, v45, v49);
    v58 = sub_10001A9A8(&qword_101118F78);
    swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
    v59 = PassthroughSubject.init()();
    v60 = objc_msgSend(v46, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v60);

    swift_beginAccess(v48, v77, 33, 0);
    swift_retain();
    v61 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v48);
    v78 = *(_QWORD *)v48;
    *(_QWORD *)v48 = 0x8000000000000000;
    sub_10010EE90(v59, (uint64_t)v22, v61);
    *(_QWORD *)v48 = v78;
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v57)(v22, v45);
    swift_endAccess(v77);
    objc_msgSend(*(id *)&v75[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject], "pairPeer:", v46);
    v77[0] = v59;
    v43 = sub_1000193A4(&qword_101118F90, &qword_101118F78, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v44 = v58;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(*(_QWORD *)v48);
  v51 = sub_100003FB0((uint64_t)v25);
  if ((v52 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v53 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v51);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v45);
  v77[0] = v53;
  v54 = sub_10001A9A8(&qword_101118F78);
  v55 = sub_1000193A4(&qword_101118F90, &qword_101118F78, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v56 = Publisher.eraseToAnyPublisher()(v54, v55);
LABEL_9:
  result = swift_release();
  *v74 = v56;
  return result;
}

uint64_t sub_100BF49E4(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B8590);
  v8 = a1;
  v9 = v1;
  v10 = (char *)v8;
  v11 = (char *)v9;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v29 = (_QWORD *)swift_slowAlloc(8, -1);
    v30 = swift_slowAlloc(32, -1);
    v33 = v30;
    *(_DWORD *)v14 = 136315394;
    v28 = v14 + 4;
    v15 = objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v3, v16);
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v31 = sub_100016940(v17, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28, v14 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2114;
    v31 = (uint64_t)v11;
    v20 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v14 + 14, v14 + 22);
    v21 = v29;
    *v29 = v11;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PairingAgent: unpair %s. %{public}@", (uint8_t *)v14, 0x16u);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v21, 1, v22);
    swift_slowDealloc(v21, -1, -1);
    v23 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  v24 = objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject], "unpairPeer:", *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject]);
  v25 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_lock];
  __chkstk_darwin(v24);
  *(&v28 - 2) = (uint64_t)v11;
  *(&v28 - 1) = (uint64_t)v10;
  v26 = sub_10001A9A8((uint64_t *)&unk_101118F80);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BF6500, &v28 - 4, v25, &type metadata for () + 1, v26);
  return swift_release();
}

uint64_t sub_100BF4D68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  _BYTE v13[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects, v13, 33, 0);
  *a3 = sub_1001047B8((uint64_t)v9);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return swift_endAccess(v13);
}

uint64_t type metadata accessor for SharedPairingAgent()
{
  return objc_opt_self(_TtC12searchpartyd18SharedPairingAgent);
}

void sub_100BF4EB0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40[5];
  char v41;
  _BYTE v42[24];
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects);
  swift_beginAccess(v13, v42, 0, 0);
  v14 = *v13;
  v15 = objc_msgSend(a2, "identifier", swift_bridgeObjectRetain(*v13).n128_f64[0]);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

  if (*(_QWORD *)(*v13 + 16))
  {
    swift_bridgeObjectRetain(*v13);
    sub_100003FB0((uint64_t)v12);
    if ((v16 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      if (a3)
      {
        v40[0] = a3;
        v41 = 7;
        swift_errorRetain(a3);
        PassthroughSubject.send(completion:)(v40);
        swift_bridgeObjectRelease();
        swift_release();
        sub_100BF64C0((uint64_t)v40);
      }
      else
      {
        __break(1u);
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B8590);
  swift_bridgeObjectRetain_n(v14, 2);
  v19 = a2;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    v23 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    v40[0] = v39;
    *(_DWORD *)v23 = 136315394;
    v37 = v23 + 4;
    v24 = objc_msgSend(v19, "identifier");
    v38 = v22;
    v25 = v24;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v6, v26);
    v29 = v28;
    v17(v10, v6);
    v43 = sub_100016940(v27, v29, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v37, v23 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    swift_bridgeObjectRetain(v14);
    v30 = sub_10001A9A8(&qword_101118F78);
    v31 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = Dictionary.Keys.description.getter(v14, v6, v30, v31);
    v34 = v33;
    swift_bridgeObjectRelease();
    v43 = sub_100016940(v32, v34, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v38, "peerDidFailToCompletePairing: No pairing subject for %s. Peers %{public}s.", (uint8_t *)v23, 0x16u);
    v35 = v39;
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v23, -1, -1);
    swift_bridgeObjectRelease();

  }
  else
  {

    swift_bridgeObjectRelease_n(v14, 3);
  }
}

void sub_100BF5368(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v11 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects);
  swift_beginAccess(v11, v40, 0, 0);
  v12 = *v11;
  v13 = objc_msgSend(a2, "identifier", swift_bridgeObjectRetain(*v11).n128_f64[0]);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

  v14 = *v11;
  if (*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRetain(v14);
    sub_100003FB0((uint64_t)v10);
    if ((v15 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      PassthroughSubject.send(_:)(v16);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
  }
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v10, v4);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B8590);
  swift_bridgeObjectRetain_n(v12, 2);
  v19 = a2;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    v23 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v41 = v38;
    *(_DWORD *)v23 = 136315394;
    v36 = v23 + 4;
    v24 = objc_msgSend(v19, "identifier");
    v37 = v22;
    v25 = v24;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v4, v26);
    v29 = v28;
    v17(v8, v4);
    v39 = sub_100016940(v27, v29, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v36, v23 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    swift_bridgeObjectRetain(v12);
    v30 = sub_10001A9A8(&qword_101118F78);
    v31 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = Dictionary.Keys.description.getter(v12, v4, v30, v31);
    v34 = v33;
    swift_bridgeObjectRelease();
    v39 = sub_100016940(v32, v34, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v37, "peerDidCompletePairing: No pairing subject for %s. Peers %{public}s.", (uint8_t *)v23, 0x16u);
    v35 = v38;
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v23, -1, -1);
    swift_bridgeObjectRelease();

  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 3);
  }
}

void sub_100BF57C0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  char v14;
  void *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_pairingSubjects, v30, 0, 0);
  v11 = *v10;
  v12 = objc_msgSend(a2, "identifier", swift_bridgeObjectRetain(*v10).n128_f64[0]);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v13 = *v10;
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain(v13);
    sub_100003FB0((uint64_t)v9);
    if ((v14 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_release();
      v15 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_underlyingObject);
      sub_1006BAA50((uint64_t)_swiftEmptyArrayStorage);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v15, "respondToPairingRequest:type:accept:data:", a2, a3, 1, isa);
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v17 = type metadata accessor for Logger(0);
  sub_10001A9E8(v17, (uint64_t)qword_1011B8590);
  swift_bridgeObjectRetain_n(v11, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v31 = v22;
    *(_DWORD *)v21 = 136446210;
    swift_bridgeObjectRetain(v11);
    v23 = sub_10001A9A8(&qword_101118F78);
    v24 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = Dictionary.Keys.description.getter(v11, v6, v23, v24);
    v27 = v26;
    swift_bridgeObjectRelease();
    v29 = sub_100016940(v25, v27, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(v11, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "peerDidRequestPairing: Identifier mismatch. Skip pairing request. Peers %{public}s.", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
    swift_bridgeObjectRelease();

  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 3);
  }
}

void sub_100BF5BD8(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  char *v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];

  v3 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v10 = sub_10001A9E8(v6, (uint64_t)qword_1011B8590);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = a1;
  v12 = v1;
  v13 = v11;
  v14 = (char *)v12;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    v35 = v16;
    v38 = v7;
    v17 = swift_slowAlloc(22, -1);
    v36 = (_QWORD *)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(32, -1);
    v42[0] = v37;
    *(_DWORD *)v17 = 136446466;
    if (a1)
    {
      v34 = v17 + 4;
      v18 = objc_msgSend(v13, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = v40;
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v40, v19);
      v23 = v22;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v20);
      v41 = sub_100016940(v21, v23, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v34, v17 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2114;
      v41 = (uint64_t)v14;
      v24 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v17 + 14, v17 + 22);
      v25 = v36;
      *v36 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v35, "peerDidCompletePairing: %{public}s. %{public}@", (uint8_t *)v17, 0x16u);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v25, 1, v26);
      swift_slowDealloc(v25, -1, -1);
      v27 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      v28 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v9, v6);
LABEL_7:
      v29 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_lock];
      __chkstk_darwin(v28);
      *(&v34 - 2) = (uint64_t)v14;
      *(&v34 - 1) = (uint64_t)v13;
      v30 = v13;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100BF648C, &v34 - 4, v29, &type metadata for () + 1, &type metadata for () + 1);

      return;
    }

    __break(1u);
  }
  else
  {

    v28 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (a1)
      goto LABEL_7;
    v31 = Logger.logObject.getter(v28);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "peerDidCompletePairing: peer cannot be nil!", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

  }
}

void sub_100BF6020(void *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  void *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  char *v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t (**v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];

  v43 = (uint64_t (**)(char *, uint64_t))a5;
  v47 = a2;
  v48 = a4;
  v46 = a3;
  v7 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v14 = sub_10001A9E8(v10, (uint64_t)qword_1011B8590);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v15 = a1;
  v16 = v5;
  v17 = v15;
  v18 = (char *)v16;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    v40 = v20;
    v43 = (uint64_t (**)(char *, uint64_t))v11;
    v21 = swift_slowAlloc(22, -1);
    v41 = (_QWORD *)swift_slowAlloc(8, -1);
    v42 = swift_slowAlloc(32, -1);
    v50[0] = v42;
    *(_DWORD *)v21 = 136446466;
    if (a1)
    {
      v39 = v21 + 4;
      v22 = objc_msgSend(v17, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

      v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = v45;
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v45, v23);
      v27 = v26;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v24);
      v49 = sub_100016940(v25, v27, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v39, v21 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2114;
      v49 = (uint64_t)v18;
      v28 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v21 + 14, v21 + 22);
      v29 = v41;
      *v41 = v18;

      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v40, v46, (uint8_t *)v21, 0x16u);
      v30 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v29, 1, v30);
      swift_slowDealloc(v29, -1, -1);
      v31 = v42;
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v32 = v43[1](v13, v10);
LABEL_7:
      v33 = *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd18SharedPairingAgent_lock];
      __chkstk_darwin(v32);
      *(&v38 - 4) = (uint64_t)v18;
      *(&v38 - 3) = (uint64_t)v17;
      *(&v38 - 2) = v47;
      v34 = v17;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(v48, &v38 - 6, v33, &type metadata for () + 1, &type metadata for () + 1);

      return;
    }

    __break(1u);
  }
  else
  {

    v32 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (a1)
      goto LABEL_7;
    v35 = Logger.logObject.getter(v32);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, (const char *)v43, v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
}

void sub_100BF6470()
{
  uint64_t v0;

  sub_100BF57C0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_100BF648C()
{
  uint64_t v0;

  sub_100BF5368(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100BF64A4()
{
  uint64_t v0;

  sub_100BF4EB0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100BF64C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010FBAF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100BF6500@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100BF4D68(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100BF6518@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100BF4328(*(_BYTE *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

ValueMetadata *type metadata accessor for AccessoryFirmwareVersionResponsePayload()
{
  return &type metadata for AccessoryFirmwareVersionResponsePayload;
}

unint64_t sub_100BF6548(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100BF6574();
  result = sub_1003ECD6C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100BF6574()
{
  unint64_t result;

  result = qword_101118F98;
  if (!qword_101118F98)
  {
    result = swift_getWitnessTable(asc_100E64C48, &type metadata for AccessoryFirmwareVersionResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101118F98);
  }
  return result;
}

_QWORD *sub_100BF65B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v2 = v1;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  v2[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003BLL, 0x8000000100EF3D70, v9, v6, v13, 0);
  v2[4] = _swiftEmptyDictionarySingleton;
  v2[5] = _swiftEmptyDictionarySingleton;
  v2[6] = a1;
  return v2;
}

uint64_t sub_100BF679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[6];
  _QWORD *v47;

  v37 = a2;
  v38 = a3;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  __chkstk_darwin(v11);
  v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v17 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v37 - v18;
  v40 = *(_QWORD *)(a2 + 24);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v37 - v18, a5, v13);
  v20(v17, a6, v13);
  v21 = *(unsigned __int8 *)(v14 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + v23 + 8) & ~v21;
  v25 = swift_allocObject(&unk_1010B4818, v24 + v15, v21 | 7);
  *(_QWORD *)(v25 + 16) = v38;
  *(_QWORD *)(v25 + 24) = a4;
  v26 = v25 + v22;
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v27(v26, v19, v13);
  *(_QWORD *)(v25 + v23) = v37;
  v27(v25 + v24, v17, v13);
  aBlock[4] = sub_100BFA8F8;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B4830;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = swift_retain();
  v30 = v39;
  static DispatchQoS.unspecified.getter(v29);
  v47 = _swiftEmptyArrayStorage;
  v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v33 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v35 = v41;
  v34 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v32, v33, v42, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v35, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
  return swift_release();
}

uint64_t sub_100BF6A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t updated;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSUUID v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  NSURL *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _BYTE v42[24];

  v39 = a1;
  v40 = a4;
  v38 = a3;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v41 = (char *)&v37 - v11;
  v12 = sub_10001A9A8(&qword_1010EF1E0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  v20 = *(_QWORD *)(updated - 8);
  v21 = __chkstk_darwin(updated);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v24(&v23[*(int *)(v21 + 20)], v38, v15);
  *(_QWORD *)v23 = v39;
  *((_QWORD *)v23 + 1) = a2;
  v24(v18, a5, v15);
  sub_10005972C((uint64_t)v23, (uint64_t)v14, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v26 = v40;
  v25(v14, 0, 1, updated);
  swift_beginAccess(v26 + 32, v42, 33, 0);
  swift_retain();
  sub_100100D20((uint64_t)v14, (uint64_t)v18);
  swift_endAccess(v42);
  v27 = (uint64_t)v41;
  URL.init(string:)(0xD000000000000084, 0x8000000100EF3CE0);
  v28 = (void *)sub_100BF7FC0();
  v39 = a5;
  v29 = v27;
  v30.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_10000F9B8(v27, (uint64_t)v10, &qword_1010FBA40);
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v10, 1, v31);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    URL._bridgeToObjectiveC()(v34);
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
    objc_msgSend(v28, "updateFirmwareForDevice:withAssetURL:", v30.super.isa, v36);

    sub_100BF6D70(v39, 2, 0, 0, 0);
    sub_100004048(v29, &qword_1010FBA40);
    return sub_1000126B0((uint64_t)v23, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  }
  return result;
}

uint64_t sub_100BF6D70(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int *updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  dispatch_group_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  dispatch_group_t v81;
  NSObject *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  dispatch_group_t v114;
  uint64_t v115;
  int *v116;
  unint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[3];
  char v127[8];
  _QWORD v128[3];
  char v129[8];
  _QWORD v130[4];

  v6 = v5;
  v118 = a5;
  v115 = a4;
  v117 = a3;
  LODWORD(v116) = a2;
  v125 = a1;
  updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  v119 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)updated - 1);
  __chkstk_darwin(updated);
  v120 = (uint64_t)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for DispatchTime(0);
  v109 = *(_QWORD *)(v110 - 8);
  v9 = __chkstk_darwin(v110);
  v107 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v108 = (char *)&v106 - v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v12);
  v114 = (dispatch_group_t)((char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = type metadata accessor for OwnedBeaconRecord(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (uint64_t)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EF190);
  __chkstk_darwin(v15);
  v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for UUID(0);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v106 = v18;
  v122 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (const char *)type metadata accessor for Date(0);
  v20 = *((_QWORD *)v19 - 1);
  __chkstk_darwin(v19);
  v22 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(void **)(v6 + 24);
  *(_QWORD *)v26 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v124 = swift_allocBox(updated);
  v26 = (char *)v29;
  v30 = v6;
  sub_100BF7C74(v125, v29);
  static Date.trustedNow.getter((uint64_t)v22);
  (*(void (**)(char *, char *, const char *))(v20 + 40))(&v26[updated[6]], v22, v19);
  v31 = v116;
  v26[updated[5]] = (char)v116;
  v32 = v117;
  if (v117)
  {
    swift_getErrorValue(v117, v129, v128);
    v33 = v128[1];
    v34 = v128[2];
    swift_errorRetain(v32);
    v35 = Error.domain.getter(v33, v34);
    v37 = v36;
    swift_getErrorValue(v32, v127, v126);
    v38 = Error.code.getter(v126[1], v126[2]);
    swift_errorRelease(v32);
    v39 = (uint64_t *)&v26[updated[8]];
    swift_bridgeObjectRelease();
    *v39 = v35;
    v39[1] = v37;
    v39[2] = v38;
  }
  else
  {
    v40 = &v26[updated[8]];
    swift_bridgeObjectRelease();
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0;
    *((_QWORD *)v40 + 2) = 0;
  }
  v41 = v125;
  v42 = v30;
  v43 = v118;
  if (v118)
  {
    v44 = &v26[updated[7]];
    *(_QWORD *)v44 = v115;
    *((_QWORD *)v44 + 1) = v43;
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRelease();
  }
  v45 = (uint64_t)v122;
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 16);
  v46(v122, v41, v123);
  sub_10005972C((uint64_t)v26, (uint64_t)v17, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  (*((void (**)(char *, _QWORD, uint64_t, int *))v119 + 7))(v17, 0, 1, updated);
  swift_beginAccess(v30 + 40, v130, 33, 0);
  sub_100100B70((uint64_t)v17, v45);
  v47 = swift_endAccess(v130);
  v48 = v31;
  v17 = (char *)&type metadata for String;
  v49 = &qword_1010EA000;
  v19 = "Code";
  if (v48 != 3)
  {
    swift_retain();
    sub_1007EEF64(18);
    v97 = swift_release();
    goto LABEL_18;
  }
  v119 = v46;
  v50 = static os_log_type_t.default.getter(v47);
  v118 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v51 = swift_allocObject(v118, 112, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100E22B10;
  v52 = &v26[updated[7]];
  v53 = *((_QWORD *)v52 + 1);
  v130[0] = *(_QWORD *)v52;
  v130[1] = v53;
  swift_bridgeObjectRetain(v53);
  v54 = sub_10001A9A8(&qword_1010F6350);
  v55 = String.init<A>(describing:)(v130, v54);
  v57 = v56;
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  v58 = sub_10001AA00();
  *(_QWORD *)(v51 + 64) = v58;
  *(_QWORD *)(v51 + 32) = v55;
  *(_QWORD *)(v51 + 40) = v57;
  v59 = UUID.uuidString.getter(v58);
  *(_QWORD *)(v51 + 96) = &type metadata for String;
  *(_QWORD *)(v51 + 104) = v58;
  v117 = v58;
  *(_QWORD *)(v51 + 72) = v59;
  *(_QWORD *)(v51 + 80) = v60;
  v61 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v62 = (void *)static OS_os_log.default.getter(v61);
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v62, "#Accessory - successful fw update - attempting to modify systemVersion on beacon record to %@ for %@", 100, 2, v51);
  swift_bridgeObjectRelease();

  swift_retain();
  sub_10080B648(v41, (uint64_t)v130);
  swift_release();
  if (v130[3])
  {
    v63 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v64 = v114;
    v65 = v113;
    v66 = swift_dynamicCast(v114, v130, v63, v113, 6);
    v67 = v112;
    (*(void (**)(dispatch_group_t, _QWORD, uint64_t, uint64_t))(v112 + 56))(v64, v66 ^ 1u, 1, v65);
    v19 = "Code";
    if ((*(unsigned int (**)(dispatch_group_t, uint64_t, uint64_t))(v67 + 48))(v64, 1, v65) != 1)
    {
      v116 = updated;
      sub_1000126EC((uint64_t)v64, v111, type metadata accessor for OwnedBeaconRecord);
      v114 = dispatch_group_create();
      dispatch_group_enter(v114);
      v115 = *(_QWORD *)(v42 + 48);
      v69 = v122;
      v68 = v123;
      v119(v122, v41, v123);
      v70 = v121;
      v71 = *(unsigned __int8 *)(v121 + 80);
      v72 = (v71 + 24) & ~v71;
      v73 = v72 + v106;
      v74 = v71 | 7;
      v75 = swift_allocObject(&unk_1010B4728, v72 + v106, v71 | 7);
      *(_QWORD *)(v75 + 16) = v124;
      v76 = v41;
      v77 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
      v77(v75 + v72, v69, v68);
      v78 = v76;
      v79 = v111;
      v119(v69, v78, v68);
      v80 = swift_allocObject(&unk_1010B4750, v73, v74);
      v81 = v114;
      *(_QWORD *)(v80 + 16) = v114;
      v77(v80 + v72, v69, v68);
      swift_retain();
      swift_retain();
      v82 = v81;
      sub_1007A09E0(v79, 0, (void (*)(uint64_t))sub_100BFA5AC, v75, sub_100BFA660, (void (*)(uint64_t))v80);
      swift_release();
      swift_release();
      v83 = swift_release();
      v84 = v107;
      static DispatchTime.now()(v83);
      v85 = v108;
      + infix(_:_:)(v84, 120.0);
      v86 = *(void (**)(char *, uint64_t))(v109 + 8);
      v87 = v110;
      v86(v84, v110);
      v88 = OS_dispatch_group.wait(timeout:)(v85) & 1;
      v86(v85, v87);
      v89 = static DispatchTimeoutResult.== infix(_:_:)(v88, 1);
      if ((v89 & 1) != 0)
      {
        v90 = static os_log_type_t.error.getter(v89);
        if (qword_1010EA300 != -1)
          swift_once(&qword_1010EA300, sub_100B5E204);
        v91 = qword_1011B7DE0;
        v92 = swift_allocObject(v118, 72, 7);
        *(_OWORD *)(v92 + 16) = xmmword_100E22B00;
        v93 = UUID.uuidString.getter(v92);
        v94 = v117;
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v94;
        *(_QWORD *)(v92 + 32) = v93;
        *(_QWORD *)(v92 + 40) = v95;
        v96 = v91;
        v19 = "Code";
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v96, "#Accessory - timed out waiting to update sys ver to cloud for %@", 64, 2, v92);

        v17 = (char *)&type metadata for String;
        swift_bridgeObjectRelease();
        v97 = sub_1000126B0(v79, type metadata accessor for OwnedBeaconRecord);
        updated = v116;
      }
      else
      {
        sub_1000126B0(v79, type metadata accessor for OwnedBeaconRecord);

        updated = v116;
        v17 = (char *)&type metadata for String;
        v19 = "Code";
      }
      goto LABEL_17;
    }
  }
  else
  {
    sub_100004048((uint64_t)v130, (uint64_t *)&unk_1010EE310);
    v64 = v114;
    (*(void (**)(dispatch_group_t, uint64_t, uint64_t, uint64_t))(v112 + 56))(v114, 1, 1, v113);
    v19 = "Code";
  }
  v97 = sub_100004048((uint64_t)v64, (uint64_t *)&unk_1010F47C0);
LABEL_17:
  v49 = &qword_1010EA000;
LABEL_18:
  v23 = static os_log_type_t.default.getter(v97);
  if (v49[96] != -1)
LABEL_22:
    swift_once(&qword_1010EA300, sub_100B5E204);
  v98 = qword_1011B7DE0;
  v99 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v100 = swift_allocObject(v99, 72, 7);
  *(_OWORD *)(v100 + 16) = *((_OWORD *)v19 + 176);
  swift_beginAccess(v26, v130, 0, 0);
  v101 = v120;
  sub_10005972C((uint64_t)v26, v120, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  v102 = String.init<A>(describing:)(v101, updated);
  v104 = v103;
  *(_QWORD *)(v100 + 56) = v17;
  *(_QWORD *)(v100 + 64) = sub_10001AA00();
  *(_QWORD *)(v100 + 32) = v102;
  *(_QWORD *)(v100 + 40) = v104;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v98, "#Accessory - Updated %@", 23, 2, v100);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100BF77B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t updated;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  void *v31;
  id v32;
  NSDate v33;
  void *v34;
  id v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  Class isa;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[24];
  char *v58;

  v6 = sub_10001A9A8(&qword_1010EF1E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  v55 = *(_QWORD *)(updated - 8);
  v56 = updated;
  __chkstk_darwin(updated);
  v49 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = (_QWORD *)type metadata accessor for Date(0);
  v14 = *(v53 - 1);
  __chkstk_darwin(v53);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v16);
  v52 = (void *)SPBeaconTaskNameAccessoryFirmwareUpdate;
  v50 = a2;
  v54 = a1;
  sub_100BF7C74(a2, (uint64_t)v13);
  v17 = v13[v11[5]];
  v51 = a3;
  v58 = v8;
  if (v17 == 1)
  {
    v26 = &v13[v11[8]];
    v27 = *((_QWORD *)v26 + 1);
    if (v27)
    {
      v28 = *((_QWORD *)v26 + 2);
      v29 = objc_allocWithZone((Class)NSError);
      swift_bridgeObjectRetain(v27);
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v24 = objc_msgSend(v29, "initWithDomain:code:userInfo:", v30, v28, 0);

    }
    else
    {
      v24 = 0;
    }
    v25 = 3;
    goto LABEL_14;
  }
  if (v17 == 2)
  {
    v24 = 0;
    v25 = 0;
LABEL_14:
    v20 = v53;
    goto LABEL_15;
  }
  if (v17 != 4)
  {
    v24 = 0;
    v25 = 2;
    goto LABEL_14;
  }
  v18 = &v13[v11[8]];
  v19 = *((_QWORD *)v18 + 1);
  v20 = v53;
  if (v19)
  {
    v21 = *((_QWORD *)v18 + 2);
    v22 = objc_allocWithZone((Class)NSError);
    swift_bridgeObjectRetain(v19);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, v21, 0);

  }
  else
  {
    v24 = 0;
  }
  v25 = 1;
LABEL_15:
  v31 = v52;
  v53 = *(_QWORD **)(v14 + 8);
  ((void (*)(char *, _QWORD *))v53)(v16, v20);
  (*(void (**)(char *, char *, _QWORD *))(v14 + 16))(v16, &v13[v11[6]], v20);
  v32 = v31;
  swift_errorRetain(v24);
  v33.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (v24)
  {
    v34 = (void *)_convertErrorToNSError(_:)(v24);
    swift_errorRelease(v24);
  }
  else
  {
    v34 = 0;
  }
  v35 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v32, v33.super.isa, v34, v25);

  v36 = v54;
  v37 = swift_beginAccess(v54 + 32, v57, 0, 0);
  v38 = *(_QWORD *)(v36 + 32);
  if (*(_QWORD *)(v38 + 16))
  {
    swift_bridgeObjectRetain(v38);
    v39 = sub_100003FB0(v50);
    v40 = (uint64_t)v58;
    v41 = v55;
    v42 = v56;
    if ((v43 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v38 + 56) + *(_QWORD *)(v55 + 72) * v39, (uint64_t)v58, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      v44 = 0;
    }
    else
    {
      v44 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v40, v44, 1, v42);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v40, 1, v42) != 1)
    {
      v46 = v40;
      v47 = v49;
      sub_1000126EC(v46, v49, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v35, "setCommandIdentifier:", isa);

      swift_errorRelease(v24);
      sub_1000126B0(v47, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      sub_1000126B0((uint64_t)v13, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
      result = ((uint64_t (*)(char *, _QWORD *))v53)(v16, v20);
      goto LABEL_26;
    }
  }
  else
  {
    v40 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v55 + 56))(v58, 1, 1, v56, v37);
  }
  swift_errorRelease(v24);
  sub_1000126B0((uint64_t)v13, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  ((void (*)(char *, _QWORD *))v53)(v16, v20);
  result = sub_100004048(v40, &qword_1010EF1E0);
LABEL_26:
  *v51 = v35;
  return result;
}

uint64_t sub_100BF7C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  int *updated;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE v39[24];

  v37 = a1;
  v4 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF190);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v34 - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)(v2 + 24);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    v20 = v2 + 40;
    swift_beginAccess(v2 + 40, v39, 0, 0);
    v21 = *(_QWORD *)(v2 + 40);
    v22 = *(_QWORD *)(v21 + 16);
    v35 = v6;
    if (!v22)
    {
      updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
      (*(void (**)(char *, uint64_t, uint64_t, int *))(*((_QWORD *)updated - 1) + 56))(v12, 1, 1, updated);
LABEL_8:
      sub_100004048((uint64_t)v12, &qword_1010EF190);
      v29 = v37;
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
      v30(a2, v37, v4);
      type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
      static Date.trustedNow.getter(a2 + updated[6]);
      *(_BYTE *)(a2 + updated[5]) = 0;
      v31 = (_QWORD *)(a2 + updated[7]);
      *v31 = 0;
      v31[1] = 0;
      v32 = (_QWORD *)(a2 + updated[8]);
      *v32 = 0;
      v32[1] = 0;
      v32[2] = 0;
      v33 = (uint64_t)v35;
      v30((uint64_t)v35, v29, v4);
      sub_10005972C(a2, (uint64_t)v10, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)updated - 1) + 56))(v10, 0, 1, updated);
      swift_beginAccess(v20, v38, 33, 0);
      sub_100100B70((uint64_t)v10, v33);
      return swift_endAccess(v38);
    }
    swift_bridgeObjectRetain(v21);
    v23 = sub_100003FB0(v37);
    if ((v24 & 1) != 0)
    {
      v25 = v23;
      v26 = *(_QWORD *)(v21 + 56);
      updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
      v28 = *((_QWORD *)updated - 1);
      sub_10005972C(v26 + *(_QWORD *)(v28 + 72) * v25, (uint64_t)v12, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56))(v12, 0, 1, updated);
    }
    else
    {
      updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
      (*(void (**)(char *, uint64_t, uint64_t, int *))(*((_QWORD *)updated - 1) + 56))(v12, 1, 1, updated);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)updated - 1) + 48))(v12, 1, updated) == 1)
      goto LABEL_8;
    return sub_1000126EC((uint64_t)v12, a2, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BF7FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 24);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = *(void **)(v0 + 16);
    if (v8)
    {
      v9 = *(id *)(v0 + 16);
    }
    else
    {
      v10 = objc_msgSend(objc_allocWithZone((Class)CLFindMyAccessoryFirmwareUpdateManager), "initWithDelegate:delegateQueue:", v0, 0);
      v11 = *(void **)(v0 + 16);
      *(_QWORD *)(v0 + 16) = v10;
      v9 = v10;

      v8 = 0;
    }
    v12 = v8;
    return (uint64_t)v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100BF80C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateManager()
{
  return objc_opt_self(_TtC12searchpartyd30AccessoryFirmwareUpdateManager);
}

uint64_t *sub_100BF8300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    if (*a2)
    {
      v7 = a2[1];
      *v4 = *a2;
      v4[1] = v7;
      swift_retain(v7);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    v9 = *(int *)(a3 + 20);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_100BF83A8(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  if (*a1)
    swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100BF83F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (*a2)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

_QWORD *sub_100BF8474(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  if (!*a1)
  {
    if (v6)
    {
      v9 = a2[1];
      *a1 = v6;
      a1[1] = v9;
      swift_retain(v9);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }
  v7 = a2[1];
  v8 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v8);
LABEL_8:
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_QWORD *sub_100BF8520(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *sub_100BF8590(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  if (!*a1)
  {
    if (v6)
    {
      v9 = a2[1];
      *a1 = v6;
      a1[1] = v9;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release(a1[1]);
    goto LABEL_7;
  }
  v7 = a2[1];
  v8 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  swift_release(v8);
LABEL_8:
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_100BF8630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100BF863C);
}

uint64_t sub_100BF863C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t sub_100BF86C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100BF86D0);
}

char *sub_100BF86D0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateCommandInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_1011191A0;
  if (!qword_1011191A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryFirmwareUpdateCommandInfo);
  return result;
}

uint64_t sub_100BF8780(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E64D48;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100BF87F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];
  _QWORD *v40;

  v31 = a4;
  v32 = a5;
  v30 = a1;
  v35 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v34 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1010B4868, v18 + 8, v15 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v16, v14, v11);
  v20 = (_QWORD *)(v19 + v17);
  v21 = v32;
  *v20 = v31;
  v20[1] = v21;
  *(_QWORD *)(v19 + v18) = v30;
  aBlock[4] = sub_100BFA9F0;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B4880;
  v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v21);
  swift_retain();
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v40 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v28 = v34;
  v27 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v25, v26, v35, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v28, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
  return swift_release();
}

uint64_t sub_100BF8AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];
  _QWORD *v33;

  v26 = a1;
  v28 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_1010B4778, v16 + 8, v14 | 7);
  *(_QWORD *)(v17 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v17 + v15, v13, v10);
  *(_QWORD *)(v17 + v16) = v26;
  aBlock[4] = sub_100BFA730;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B4790;
  v18 = _Block_copy(aBlock);
  swift_retain();
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v33 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v23 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v21, v22, v28, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  return swift_release();
}

void sub_100BF8D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t updated;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD aBlock[6];
  char v69[32];

  v66 = a3;
  v5 = type metadata accessor for DispatchPredicate(0);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  __chkstk_darwin(v5);
  v62 = (uint64_t *)((char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  __chkstk_darwin(v7);
  v58 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  __chkstk_darwin(v9);
  v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EF1E0);
  v16 = __chkstk_darwin(v15);
  v54 = (uint64_t)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v52 - v18;
  updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  v21 = *(_QWORD *)(updated - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = __chkstk_darwin(updated);
  v24 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v65 = (uint64_t)&v52 - v25;
  sub_100BF6D70(a2, 3, 0, 0, 0);
  v53 = a1 + 32;
  v26 = swift_beginAccess(a1 + 32, v69, 0, 0);
  v61 = a1;
  v27 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v27 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v21 + 56))(v19, 1, 1, updated, v26);
LABEL_7:
    sub_100004048((uint64_t)v19, &qword_1010EF1E0);
LABEL_12:
    Transaction.capture()();
    return;
  }
  swift_bridgeObjectRetain(v27);
  v52 = a2;
  v28 = sub_100003FB0(a2);
  if ((v29 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v27 + 56) + *(_QWORD *)(v21 + 72) * v28, (uint64_t)v19, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
    v30 = 0;
  }
  else
  {
    v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v30, 1, updated);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, updated) == 1)
    goto LABEL_7;
  v31 = v65;
  sub_1000126EC((uint64_t)v19, v65, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v32 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_10005972C(v31, (uint64_t)v24, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  v33 = *(unsigned __int8 *)(v21 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = swift_allocObject(&unk_1010B47C8, v34 + v22, v33 | 7);
  sub_1000126EC((uint64_t)v24, v35 + v34, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
  aBlock[4] = sub_100BFA808;
  aBlock[5] = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B47E0;
  v36 = _Block_copy(aBlock);
  v37 = v55;
  static DispatchQoS.unspecified.getter(v36);
  v67 = _swiftEmptyArrayStorage;
  v38 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v40 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v41 = v58;
  v42 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v39, v40, v60, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v41, v36);
  _Block_release(v36);

  (*(void (**)(char *, uint64_t))(v59 + 8))(v41, v42);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v57);
  swift_release();
  v43 = v53;
  swift_beginAccess(v53, aBlock, 33, 0);
  v44 = v54;
  sub_1001047C4(v52, v54);
  sub_100004048(v44, &qword_1010EF1E0);
  swift_endAccess(aBlock);
  v45 = v61;
  v46 = v62;
  v47 = *(void **)(v61 + 24);
  *v62 = v47;
  v49 = v63;
  v48 = v64;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v63 + 104))(v46, enum case for DispatchPredicate.onQueue(_:), v64);
  v50 = v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)(v46);
  (*(void (**)(_QWORD *, uint64_t))(v49 + 8))(v46, v48);
  if ((v47 & 1) != 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)v43 + 16))
    {
      v51 = *(void **)(v45 + 16);
      *(_QWORD *)(v45 + 16) = 0;

    }
    sub_1000126B0(v65, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_100BF92AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[6];
  _QWORD *v39;

  v30 = a1;
  v31 = a4;
  v34 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1010B4688, v17 + 8, v14 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v18 + v15, v13, v10);
  v19 = v30;
  v20 = v31;
  *(_QWORD *)(v18 + v16) = v31;
  *(_QWORD *)(v18 + v17) = v19;
  aBlock[4] = sub_100BFA400;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B46A0;
  v21 = _Block_copy(aBlock);
  swift_retain();
  swift_errorRetain(v20);
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v39 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v27 = v33;
  v26 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v24, v25, v34, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v27, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
  return swift_release();
}

void sub_100BF954C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t updated;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD aBlock[6];
  char v58[32];

  v55 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  __chkstk_darwin(v7);
  v52 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v9 - 8);
  v51 = v9;
  __chkstk_darwin(v9);
  v49 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EF1E0);
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  v18 = *(_QWORD *)(updated - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(updated);
  v21 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v47 = (uint64_t)&v45 - v22;
  v48 = a3;
  sub_100BF6D70(a2, 4, a3, 0, 0);
  v23 = swift_beginAccess(a1 + 32, v58, 0, 0);
  v24 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v24 + 16))
  {
    swift_bridgeObjectRetain(v24);
    v25 = sub_100003FB0(a2);
    if ((v26 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v24 + 56) + *(_QWORD *)(v18 + 72) * v25, (uint64_t)v16, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      v27 = 0;
    }
    else
    {
      v27 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, v27, 1, updated);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, updated) != 1)
    {
      v28 = v47;
      sub_1000126EC((uint64_t)v16, v47, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v29 = v46;
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v46);
      v30 = (void *)static OS_dispatch_queue.global(qos:)(v13);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
      sub_10005972C(v28, (uint64_t)v21, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      v31 = *(unsigned __int8 *)(v18 + 80);
      v32 = (v31 + 16) & ~v31;
      v33 = (v19 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
      v34 = swift_allocObject(&unk_1010B46D8, v33 + 8, v31 | 7);
      sub_1000126EC((uint64_t)v21, v34 + v32, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      v35 = v48;
      *(_QWORD *)(v34 + v33) = v48;
      aBlock[4] = sub_100BFA4F8;
      aBlock[5] = v34;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_1010B46F0;
      v36 = _Block_copy(aBlock);
      v37 = swift_errorRetain(v35);
      v38 = v49;
      static DispatchQoS.unspecified.getter(v37);
      v56 = _swiftEmptyArrayStorage;
      v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v41 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
      v42 = v52;
      v43 = v40;
      v44 = v54;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v43, v41, v54, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v42, v36);
      _Block_release(v36);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v44);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v51);
      sub_1000126B0(v28, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(v16, 1, 1, updated, v23);
  }
  sub_100004048((uint64_t)v16, &qword_1010EF1E0);
LABEL_9:
  Transaction.capture()();
}

uint64_t sub_100BF99C0(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  if (*a1)
    a1 = (uint64_t (**)(uint64_t))(*a1)(a2);
  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  return os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7DE0, "#Accessory - update failed - called completion with error", 57, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_100BF9A48(uint64_t a1, uint64_t a2)
{
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  updated = type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v19, 0, 0);
  v7 = (uint64_t *)(v5 + *(int *)(updated + 28));
  v8 = v7[1];
  if (v8)
  {
    v9 = *v7;
    v10 = (_QWORD *)(a1 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 60));
    swift_bridgeObjectRetain(v8);
    result = swift_bridgeObjectRelease();
    *v10 = v9;
    v10[1] = v8;
  }
  else
  {
    v12 = static os_log_type_t.error.getter(v6);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v13 = qword_1011B7DE0;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    v16 = UUID.uuidString.getter(v15);
    v18 = v17;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_10001AA00();
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Accessory - failed to update the systemVersion. No version information present.  %@", 84, 2, v15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100BF9BA0(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v6, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = *v6;
    v9 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v10 = qword_1011B7DE0;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
    v13 = UUID.uuidString.getter(v12);
    v15 = v14;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    v16 = sub_10001AA00();
    *(_QWORD *)(v12 + 64) = v16;
    *(_QWORD *)(v12 + 32) = v13;
    *(_QWORD *)(v12 + 40) = v15;
    v28 = v8;
    swift_errorRetain(v8);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v18 = String.init<A>(describing:)(&v28, v17);
    *(_QWORD *)(v12 + 96) = &type metadata for String;
    *(_QWORD *)(v12 + 104) = v16;
    *(_QWORD *)(v12 + 72) = v18;
    *(_QWORD *)(v12 + 80) = v19;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "#Accessory - failed to update beacon record with systemVersion for %@ error %@", 78, 2, v12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
  }
  else
  {
    v20 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v21 = qword_1011B7DE0;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_10001AA00();
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "#Accessory - successfully updated the record with systemVersion for %@", 70, 2, v23);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_101108050);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100BF9E10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD v38[2];

  v37 = a1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v33 - v11;
  v36 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v35 = qword_1011B7DE0;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  v15 = a2;
  sub_10000F9B8(a2, (uint64_t)v12, &qword_1010ED860);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v17 = v16(v12, 1, v3);
  if ((_DWORD)v17 == 1)
  {
    sub_100004048((uint64_t)v12, &qword_1010ED860);
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v18 = UUID.uuidString.getter(v17);
    v19 = v20;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
  }
  v38[0] = v18;
  v38[1] = v19;
  v21 = sub_10001A9A8(&qword_1010F6350);
  v22 = String.init<A>(describing:)(v38, v21);
  v24 = v23;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v25 = sub_10001AA00();
  *(_QWORD *)(v14 + 64) = v25;
  *(_QWORD *)(v14 + 32) = v22;
  *(_QWORD *)(v14 + 40) = v24;
  v38[0] = v37;
  swift_errorRetain(v37);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v27 = String.init<A>(describing:)(v38, v26);
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v25;
  *(_QWORD *)(v14 + 72) = v27;
  *(_QWORD *)(v14 + 80) = v28;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v35, "#Accessory - firmwareUpdate for %@ didFailWithError %@", 54, 2, v14);
  swift_bridgeObjectRelease();
  sub_10000F9B8(v15, (uint64_t)v9, &qword_1010ED860);
  if (v16(v9, 1, v3) == 1)
    return sub_100004048((uint64_t)v9, &qword_1010ED860);
  v30 = v34;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v34, v9, v3);
  v31 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v31);
  *(&v33 - 4) = v33;
  *(&v33 - 3) = (uint64_t)v30;
  *(&v33 - 2) = v32;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryFirmwareUpdate.updateFailed", 66, 2, sub_100BFAA8C, &v33 - 6, &type metadata for () + 1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v30, v3);
}

uint64_t sub_100BFA130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v7 = qword_1011B7DE0;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v13 = sub_10001AA00();
  *(_QWORD *)(v9 + 64) = v13;
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  v23 = a2;
  swift_errorRetain(a2);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
  v15 = String.init<A>(describing:)(&v23, v14);
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v13;
  *(_QWORD *)(v9 + 72) = v15;
  *(_QWORD *)(v9 + 80) = v16;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Accessory - firmwareUpdateRequestForDevice %@ didCompleteWithError %@", 70, 2, v9);
  swift_bridgeObjectRelease();
  v17 = type metadata accessor for Transaction(0);
  if (a2)
  {
    __chkstk_darwin(v17);
    v20[0] = v3;
    v20[1] = a1;
    v21 = a2;
    swift_errorRetain(a2);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryFirmwareUpdate.updateFailed", 66, 2, sub_100BFA344, &v19, &type metadata for () + 1);
    return swift_errorRelease(a2);
  }
  else
  {
    __chkstk_darwin(v17);
    v21 = v3;
    v22 = a1;
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryFirmwareUpdate.updateSuccess", 67, 2, sub_100BFA32C, v20, &type metadata for () + 1);
  }
}

uint64_t sub_100BFA32C(uint64_t a1)
{
  uint64_t v1;

  return sub_100BF8AA0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100BFA344(uint64_t a1)
{
  uint64_t *v1;

  return sub_100BF92AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100BFA360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_100BFA400()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100BF954C(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100BFA450()
{
  uint64_t v0;
  uint64_t updated;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  v2 = *(_QWORD *)(updated - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  v6 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4 + *(int *)(updated + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v3 | 7);
}

uint64_t sub_100BFA4F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100BF99C0((uint64_t (**)(uint64_t))(v0 + v2), *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100BFA538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100BFA5AC(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for UUID(0);
  return sub_100BF9A48(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100BFA5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100BFA660(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for UUID(0);
  sub_100BF9BA0(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100BFA6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100BFA730()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100BF8D28(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100BFA774()
{
  uint64_t v0;
  uint64_t updated;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  updated = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  v2 = *(_QWORD *)(updated - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  v6 = v0 + v4 + *(int *)(updated + 20);
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100BFA808()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t (**v3)(_QWORD);

  result = type metadata accessor for AccessoryFirmwareUpdateCommandInfo(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  v3 = (uint64_t (**)(_QWORD))(v0 + ((v2 + 16) & ~v2));
  if (*v3)
    return (*v3)(0);
  return result;
}

uint64_t sub_100BFA850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v3 + v7 + 8) & ~v3;
  v9 = v8 + v5;
  swift_release(*(_QWORD *)(v0 + 24));
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7));
  v10(v0 + v8, v1);
  return swift_deallocObject(v0, v9, v6);
}

uint64_t sub_100BFA8F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100BF6A84(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v3, *(_QWORD *)(v0 + v4), v0 + ((v2 + v4 + 8) & ~v2));
}

uint64_t sub_100BFA94C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_100BFA9F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100BF6D70(v0 + v2, 4, 0, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
  Transaction.capture()();
}

uint64_t sub_100BFAA8C(uint64_t a1)
{
  return sub_100BFA344(a1);
}

uint64_t sub_100BFAAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100BFAAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_10000F4A0(0, (unint64_t *)&qword_101119470, UNNotification_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain();
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease();
}

unint64_t SPSecureLocationsStewieServiceState.description.getter(uint64_t a1)
{
  unint64_t result;

  result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6C62616C69617661;
      break;
    case 2:
      result = 0x616C696176616E75;
      break;
    case 3:
      result = 0xD00000000000001ALL;
      break;
    case 4:
      result = 0xD00000000000001BLL;
      break;
    case 5:
      result = 0xD000000000000011;
      break;
    case 6:
      result = 0x656C74746F726874;
      break;
    case 7:
    case 8:
      result = 0x64656C6261736964;
      break;
    case 9:
      result = 0xD000000000000017;
      break;
    default:
      result = 0x2D746C7561666564;
      break;
  }
  return result;
}

unint64_t sub_100BFACA8()
{
  uint64_t *v0;

  return SPSecureLocationsStewieServiceState.description.getter(*v0);
}

uint64_t sub_100BFACB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  uint64_t v12;
  double v13;
  id v14;
  NSString v15;
  uint64_t v16;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v4, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010EA690);
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setDouble:forKey:", v10, 0.0);

    return sub_100004048(a1, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v13 = Date.timeIntervalSince1970.getter(v12);
    v14 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "setDouble:forKey:", v15, v13);

    sub_100004048(a1, (uint64_t *)&unk_1010EA690);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

char *sub_100BFAEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _QWORD v44[3];
  objc_super v45;

  v4 = v3;
  v40 = a2;
  v41 = a3;
  v39 = a1;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = &v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
  *(_QWORD *)v15 = 0x3A656977657473;
  *((_QWORD *)v15 + 1) = 0xE700000000000000;
  v16 = &v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm];
  *(_QWORD *)v16 = 0xD000000000000044;
  *((_QWORD *)v16 + 1) = 0x8000000100EF44C0;
  v38 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  v17 = v4;
  static DispatchQoS.unspecified.getter(v17);
  v44[0] = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v44, v19, v20, v5, v18);
  v21 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x8000000100EF4510, v10, v7, v14, 0);
  *(_QWORD *)&v4[v38] = v21;
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient] = 0;
  v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = 0;
  v22 = &v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  v23 = &v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  v24 = type metadata accessor for SecureLocation(0);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_meDeviceSubscription] = 0;
  v26 = &v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_LastPublishDateKey];
  *(_QWORD *)v26 = 0xD000000000000017;
  *((_QWORD *)v26 + 1) = 0x8000000100EF4540;
  v27 = &v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate];
  v28 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts] = 1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer] = 0;
  v29 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold;
  v30 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  *(_QWORD *)&v17[v29] = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, 0x4059000000000000, 0);
  v25(&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation], 1, 1, v24);
  v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] = 0;
  v31 = v40;
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_payloadManager] = v39;
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientSessionPool] = v31;
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_keyManager] = v41;
  v32 = type metadata accessor for QueueSynchronizer(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  swift_retain();
  swift_retain();
  swift_retain();
  *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueueSynchronizer] = QueueSynchronizer.init(queue:)(v21);

  v33 = (objc_class *)type metadata accessor for SecureLocationsStewieManager(0);
  v45.receiver = v17;
  v45.super_class = v33;
  v34 = (char *)objc_msgSendSuper2(&v45, "init");
  v35 = *(_QWORD *)&v34[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold]
      + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(v35, v44, 1, 0);
  *(_QWORD *)(v35 + 8) = &off_1010B48A8;
  swift_unknownObjectWeakAssign(v35, v34);
  v43 = v34;
  v36 = v34;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0DBDC);
  sub_100C013B8();
  v42 = v36;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0DBF0);
  sub_10000B028((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
  sub_100BFB8D8();

  swift_release();
  swift_release();
  swift_release();
  return v36;
}

void sub_100BFB3B0(_BYTE *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;

  v2 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient;
  v3 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient];
  if (v3
    || (v19 = objc_msgSend(objc_allocWithZone((Class)CoreTelephonyClient), "initWithQueue:", *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue]), v20 = *(void **)&a1[v2], *(_QWORD *)&a1[v2] = v19, v20, (v21 = *(void **)&a1[v2]) != 0)&& (objc_msgSend(v21, "setDelegate:", a1), (v3 = *(void **)&a1[v2]) != 0))
  {
    v41 = 0;
    v4 = v3;
    v5 = objc_msgSend(v4, "getStewieSupport:", &v41);
    v6 = v41;
    if (v5)
    {
      v7 = v5;
      v8 = v41;
      v9 = objc_msgSend(v7, "status");
      v10 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported;
      a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] = v9;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v11 = type metadata accessor for Logger(0);
      sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
      v12 = a1;
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        v38 = v4;
        v15 = swift_slowAlloc(18, -1);
        v16 = (void *)swift_slowAlloc(32, -1);
        v41 = v16;
        *(_DWORD *)v15 = 136315394;
        v17 = *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v18 = *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v18);
        v40 = sub_100016940(v17, v18, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v15 + 4, v15 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 1024;
        LODWORD(v40) = a1[v10];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, v15 + 14, v15 + 18);

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - support state %{BOOL}d", (uint8_t *)v15, 0x12u);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v22 = v41;
      v23 = _convertNSErrorToError(_:)(v6);

      swift_willThrow(v24);
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v25 = type metadata accessor for Logger(0);
      sub_10001A9E8(v25, (uint64_t)qword_1011B7A18);
      v26 = a1;
      swift_errorRetain(v23);
      v27 = v26;
      v28 = swift_errorRetain(v23);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v39 = v4;
        v32 = (void *)swift_slowAlloc(64, -1);
        v41 = v32;
        *(_DWORD *)v31 = 136315394;
        v33 = *(_QWORD *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v34 = *(_QWORD *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v34);
        v40 = sub_100016940(v33, v34, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v31 + 4, v31 + 12);

        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2080;
        v40 = v23;
        swift_errorRetain(v23);
        v35 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v36 = String.init<A>(describing:)(&v40, v35);
        v40 = sub_100016940(v36, v37, (uint64_t *)&v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v31 + 14, v31 + 22);
        swift_bridgeObjectRelease();
        swift_errorRelease(v23);
        swift_errorRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - unable to get support state %s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);

        swift_errorRelease(v23);
      }
      else
      {

        swift_errorRelease(v23);
        swift_errorRelease(v23);
        swift_errorRelease(v23);

      }
      v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] = 0;
    }
  }
}

uint64_t sub_100BFB8D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v11 = swift_retain();
  v12 = AnyCurrentValuePublisher.publisher.getter(v11);
  swift_release();
  aBlock[0] = v12;
  v13 = swift_allocObject(&unk_1010B5410, 24, 7);
  *(_QWORD *)(v13 + 16) = v0;
  v14 = v0;
  v15 = sub_10001A9A8(&qword_1011194D0);
  v16 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v17 = Publisher<>.sink(receiveValue:)(sub_100C0DA44, v13, v15, v16);
  swift_release();
  swift_release();
  *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_meDeviceSubscription] = v17;
  swift_release();
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  v18 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_10099230C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B5428;
  v19 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v1, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, v25);
}

void sub_100BFBC0C(unsigned __int8 *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if ((*a1 | 4) == 4)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
    v23 = a2;
    v4 = Logger.logObject.getter(v23);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v25 = v7;
      *(_DWORD *)v6 = 136315138;
      v8 = *(_QWORD *)&v23[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v9 = *(_QWORD *)&v23[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v9);
      v24 = sub_100016940(v8, v9, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v6 + 4, v6 + 12);

      swift_bridgeObjectRelease();
      v10 = "%s - me device state is unknown or none";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v10, v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      return;
    }
LABEL_18:

    return;
  }
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v11 = sub_10000D338();
  swift_release();
  if ((v11 & 1) == 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
    v23 = a2;
    v4 = Logger.logObject.getter(v23);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v25 = v7;
      *(_DWORD *)v6 = 136315138;
      v21 = *(_QWORD *)&v23[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v22 = *(_QWORD *)&v23[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v22);
      v24 = sub_100016940(v21, v22, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v6 + 4, v6 + 12);

      swift_bridgeObjectRelease();
      v10 = "%s - me device status changed - device is not a location publishing device. not starting monitor";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v13 = a2;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v25 = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v19 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v19);
    v24 = sub_100016940(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - device is location publishing device - requesting startMonitor", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
  sub_10000B028((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
}

void sub_100BFC0AC()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[6];
  uint64_t v17;
  void *v18;

  v1 = v0;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient])
  {
    v2 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v2);
    v16[2] = v0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.requestPublishLiteLocation", 71, 2, sub_100C0DA14, v16, &type metadata for () + 1);
  }
  else
  {
    type metadata accessor for SecureLocationsStewieError(0);
    v4 = v3;
    v17 = 4;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(&v18, &v17, v5, v4, v6);
    v7 = v18;
    sub_100C03E18(0, (uint64_t)v18);

    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7A18);
    v9 = v1;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v18 = (void *)v13;
      *(_DWORD *)v12 = 136315138;
      v14 = *(_QWORD *)&v9[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v15 = *(_QWORD *)&v9[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v15);
      v17 = sub_100016940(v14, v15, (uint64_t *)&v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4, v12 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - no dataClient. Not proceeding with requesting context", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_100BFC338(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD aBlock[6];
  _QWORD *v22;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v11 = swift_allocObject(&unk_1010B5370, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_100C0DA30;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B5388;
  v12 = _Block_copy(aBlock);
  v13 = a2;
  v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_100BFC544(char *a1, id a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  id v45;
  void *v46;
  void *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  char *v59;
  char v60;
  uint64_t aBlock[6];
  uint64_t v62;
  uint64_t v63;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v59 = a1;
  v60 = 0;
  v8 = 0;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0DD78);
  if (LOBYTE(aBlock[0]) != 1)
  {
    type metadata accessor for SecureLocationsStewieError(0);
    v27 = v26;
    v62 = 5;
    v28 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v29 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v62, v28, v27, v29);
    v30 = (void *)aBlock[0];
    sub_100C03E18(0, aBlock[0]);

    Transaction.capture()();
    return;
  }
  v9 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v11 = &a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  *(_QWORD *)v11 = 5;
  v11[8] = 0;
  sub_100009528();
  v12 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient;
  v13 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient];
  v14 = &qword_1010EA000;
  if (v13)
    goto LABEL_4;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v34 = type metadata accessor for Logger(0);
  sub_10001A9E8(v34, (uint64_t)qword_1011B7A18);
  v35 = a1;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(12, -1);
    v57 = v10;
    v39 = (uint8_t *)v38;
    v40 = swift_slowAlloc(32, -1);
    v58 = a2;
    v55 = v40;
    aBlock[0] = v40;
    *(_DWORD *)v39 = 136315138;
    v56 = v34;
    v41 = *(_QWORD *)&v35[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v42 = *(_QWORD *)&v35[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v42);
    v62 = sub_100016940(v41, v42, aBlock);
    v14 = &qword_1010EA000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v39 + 4, v39 + 12);

    v34 = v56;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - re-creating CT client", v39, 0xCu);
    v43 = v55;
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    a2 = v58;
    swift_slowDealloc(v43, -1, -1);
    v44 = v39;
    v10 = v57;
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

  }
  v45 = objc_msgSend(objc_allocWithZone((Class)CoreTelephonyClient), "initWithQueue:", v10);
  v46 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = v45;

  v47 = *(void **)&a1[v12];
  if (v47)
  {
    objc_msgSend(v47, "setDelegate:", v35);
    v13 = *(void **)&a1[v12];
    if (v13)
    {
LABEL_4:
      v15 = objc_allocWithZone((Class)CTStewieRequestContext);
      v8 = v13;
      v7 = objc_msgSend(v15, "init");
      objc_msgSend(v7, "setReason:", 6);
      if (v14[19] == -1)
      {
LABEL_5:
        v16 = type metadata accessor for Logger(0);
        sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
        v17 = a1;
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.default.getter(v18);
        if (os_log_type_enabled(v18, v19))
        {
          v20 = swift_slowAlloc(12, -1);
          v57 = v7;
          v21 = (uint8_t *)v20;
          v22 = swift_slowAlloc(32, -1);
          aBlock[0] = v22;
          *(_DWORD *)v21 = 136315138;
          v58 = v8;
          v23 = *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
          v24 = *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
          swift_bridgeObjectRetain(v24);
          v62 = sub_100016940(v23, v24, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v21 + 4, v21 + 12);

          v8 = v58;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - requesting context", v21, 0xCu);
          swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v22, -1, -1);
          v25 = v21;
          v7 = v57;
          swift_slowDealloc(v25, -1, -1);

        }
        else
        {

        }
        v31 = swift_allocObject(&unk_1010B53C0, 32, 7);
        *(_QWORD *)(v31 + 16) = v17;
        *(_QWORD *)(v31 + 24) = a2;
        aBlock[4] = (uint64_t)sub_100C0DA3C;
        aBlock[5] = v31;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100555E2C;
        aBlock[3] = (uint64_t)&unk_1010B53D8;
        v32 = _Block_copy(aBlock);
        v33 = v17;
        swift_retain();
        swift_release();
        objc_msgSend(v8, "requestStewieWithContext:completion:", v7, v32);
        _Block_release(v32);

        return;
      }
LABEL_23:
      swift_once(&qword_1010EA098, sub_10098F7D8);
      goto LABEL_5;
    }
  }
  if (v14[19] != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  sub_10001A9E8(v34, (uint64_t)qword_1011B7A18);
  v48 = v35;
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.error.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = swift_slowAlloc(32, -1);
    aBlock[0] = v52;
    *(_DWORD *)v51 = 136315138;
    v53 = *(_QWORD *)&v48[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v54 = *(_QWORD *)&v48[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v54);
    v62 = sub_100016940(v53, v54, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v51 + 4, v51 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - No CoreTelephonyClient", v51, 0xCu);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);

  }
  else
  {

  }
}

void sub_100BFCC88(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t v20[2];

  if (a1)
  {
    v5 = *a3;
    swift_errorRetain(a1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v7 = a2;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v20[0] = v11;
      *(_DWORD *)v10 = 136315394;
      v18[4] = v5;
      v13 = *(_QWORD *)&v7[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v12 = *(_QWORD *)&v7[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v12);
      v19 = sub_100016940(v13, v12, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v10 + 4, v10 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      v19 = a1;
      swift_errorRetain(a1);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v15 = String.init<A>(describing:)(&v19, v14);
      v19 = sub_100016940(v15, v16, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - error requesting context %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    sub_100C03E18(0, a1);
    v17 = swift_errorRelease(a1);
    __chkstk_darwin(v17);
    v18[2] = v7;
    v18[3] = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100C0DCE8, v18, &type metadata for () + 1);
    swift_errorRelease(a1);
  }
  Transaction.capture()();
}

uint64_t sub_100BFCF58(uint64_t a1, char *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[6];
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v13 = (_QWORD *)swift_allocObject(&unk_1010B5230, 40, 7);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a1;
  aBlock[4] = sub_100C0D768;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B5248;
  v14 = _Block_copy(aBlock);
  v15 = a3;
  swift_retain();
  static DispatchQoS.unspecified.getter(a2);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_100BFD16C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  id v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t aBlock[6];
  uint64_t v53;
  uint64_t v54;

  v6 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v10 = a2;
  v11 = a1;
  v12 = v10;
  v13 = (char *)v11;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v50 = v8;
  v51 = (uint64_t)a2;
  if (v16)
  {
    v17 = swift_slowAlloc(22, -1);
    v48 = swift_slowAlloc(64, -1);
    v49 = a3;
    aBlock[0] = v48;
    *(_DWORD *)v17 = 136315394;
    v18 = v12;
    v19 = (uint64_t)a2;
    v21 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v20 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v20);
    v53 = sub_100016940(v21, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v53 = v19;
    v22 = v18;
    v23 = sub_10001A9A8((uint64_t *)&unk_1011194C0);
    v24 = String.init<A>(describing:)(&v53, v23);
    v53 = sub_100016940(v24, v25, aBlock);
    v12 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - will exit context - error: %s", (uint8_t *)v17, 0x16u);
    v26 = v48;
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    a3 = v49;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v27 = *(void **)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_coreTelephonyClient];
  if (v27)
  {
    v28 = objc_allocWithZone((Class)CTStewieExitContext);
    v29 = v27;
    v30 = objc_msgSend(v28, "init");
    objc_msgSend(v30, "setReason:", 2);
    v31 = (_QWORD *)swift_allocObject(&unk_1010B5280, 40, 7);
    v32 = v51;
    v31[2] = v13;
    v31[3] = v32;
    v31[4] = a3;
    aBlock[4] = (uint64_t)sub_100C0D7C0;
    aBlock[5] = (uint64_t)v31;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100555E2C;
    aBlock[3] = (uint64_t)&unk_1010B5298;
    v33 = _Block_copy(aBlock);
    v34 = v13;
    v35 = v12;
    swift_retain();
    swift_release();
    objc_msgSend(v29, "exitStewieWithContext:completion:", v30, v33);
    _Block_release(v33);

  }
  else
  {
    v36 = v13;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      aBlock[0] = v40;
      *(_DWORD *)v39 = 136315138;
      v41 = *(_QWORD *)&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v42 = *(_QWORD *)&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v42);
      v53 = sub_100016940(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 4, v39 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - will exit no telephony client", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    v44 = (uint64_t)v50;
    v43 = v51;
    sub_100C02C90();
    v45 = type metadata accessor for SecureLocation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
    v46 = (uint64_t)&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
    swift_beginAccess(&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location], aBlock, 33, 0);
    sub_100004084(v44, v46, &qword_101119450);
    swift_endAccess(aBlock);
    sub_100C03E18(0, v43);
    Transaction.capture()();
  }
}

void sub_100BFD688(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46[3];

  v8 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v8);
  v44 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  v12 = a2;
  swift_errorRetain(a1);
  v13 = (char *)v12;
  v14 = swift_errorRetain(a1);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v42 = v11;
    v18 = v17;
    v19 = swift_slowAlloc(64, -1);
    v46[0] = v19;
    *(_DWORD *)v18 = 136315394;
    v43 = a4;
    v20 = a3;
    v21 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v22 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v22);
    v45 = sub_100016940(v21, v22, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v45 = a1;
    swift_errorRetain(a1);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v24 = String.init<A>(describing:)(&v45, v23);
    v45 = sub_100016940(v24, v25, v46);
    a3 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v18 + 14, v18 + 22);
    a4 = v43;
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - exit completed error - %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    if (!a1)
      goto LABEL_10;
  }
  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    if (!a1)
      goto LABEL_10;
  }
  swift_errorRetain(a1);
  v26 = v13;
  swift_errorRetain(a1);
  v27 = v26;
  v28 = swift_errorRetain(a1);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v46[0] = v32;
    *(_DWORD *)v31 = 136315394;
    v42 = a3;
    v43 = a4;
    v33 = *(_QWORD *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v34 = *(_QWORD *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v34);
    v45 = sub_100016940(v33, v34, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v31 + 4, v31 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    v45 = a1;
    swift_errorRetain(a1);
    v35 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v36 = String.init<A>(describing:)(&v45, v35);
    v45 = sub_100016940(v36, v37, v46);
    a3 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - error exiting %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    swift_errorRelease(a1);
  }
  else
  {
    swift_errorRelease(a1);

    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
LABEL_10:
  sub_100C02C90();
  v38 = type metadata accessor for SecureLocation(0);
  v39 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v44, 1, 1, v38);
  v40 = (uint64_t)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location], v46, 33, 0);
  sub_100004084(v39, v40, &qword_101119450);
  swift_endAccess(v46);
  sub_100C03E18(0, a3);
  Transaction.capture()();
}

void sub_100BFDB8C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;

  v3 = type metadata accessor for SecureLocation(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v38 - v7;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  sub_10005972C(a1, (uint64_t)v8, type metadata accessor for SecureLocation);
  v11 = v1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v39 = a1;
    v15 = v14;
    v16 = swift_slowAlloc(64, -1);
    v42 = (void *)v16;
    *(_DWORD *)v15 = 136315394;
    v38 = v3;
    v40 = v10;
    v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v18 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v18);
    v41 = sub_100016940(v17, v18, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    sub_10005972C((uint64_t)v8, (uint64_t)v6, type metadata accessor for SecureLocation);
    v19 = String.init<A>(describing:)(v6, v38);
    v41 = sub_100016940(v19, v20, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v8, type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s publishLocation called with %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v21 = v15;
    a1 = v39;
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {

    sub_1000126B0((uint64_t)v8, type metadata accessor for SecureLocation);
  }

  v22 = *(void **)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  if (v22)
  {
    v23 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v23);
    *(&v38 - 2) = (uint64_t)v11;
    *(&v38 - 1) = a1;
    v24 = v22;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.requestPublishLiteLocation", 71, 2, sub_100C0D920, &v38 - 4, &type metadata for () + 1);

  }
  else
  {
    type metadata accessor for SecureLocationsStewieError(0);
    v26 = v25;
    v41 = 4;
    v27 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(&v42, &v41, v27, v26, v28);
    v29 = v42;
    v30 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v30);
    *(&v38 - 2) = (uint64_t)v11;
    *(&v38 - 1) = (uint64_t)v29;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100C0DCE8, &v38 - 4, &type metadata for () + 1);

    v31 = v11;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v42 = (void *)v35;
      *(_DWORD *)v34 = 136315138;
      v36 = *(_QWORD *)&v31[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v37 = *(_QWORD *)&v31[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v37);
      v41 = sub_100016940(v36, v37, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v34 + 4, v34 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s no dataclient - not proceeding with publishLocation", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_100BFE08C(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];
  _QWORD *v31;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SecureLocation(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v26[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  sub_10005972C(a3, (uint64_t)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(&unk_1010B5320, v17 + v14, v16 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a1;
  sub_100750E30((uint64_t)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  aBlock[4] = sub_100C0D9E4;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B5338;
  v19 = _Block_copy(aBlock);
  v20 = a2;
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v31 = _swiftEmptyArrayStorage;
  v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v24 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v6, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
  return swift_release();
}

void sub_100BFE2FC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v47[3];
  uint64_t v48;
  uint64_t v49;

  v6 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a1;
  v46 = 1;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0DD78);
  if (LOBYTE(v47[0]) != 1)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
    v29 = a1;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v44 = a2;
      v34 = v33;
      v47[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v36 = *(_QWORD *)&v29[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v35 = *(_QWORD *)&v29[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v35);
      v48 = sub_100016940(v36, v35, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v32 + 4, v32 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - publishLocation(location:) - canPublishLocation is false.", v32, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

    }
    type metadata accessor for SecureLocationsStewieError(0);
    v38 = v37;
    v48 = 5;
    v39 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v40 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(v47, &v48, v39, v38, v40);
    v41 = (void *)v47[0];
    v42 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v42);
    *(&v43 - 2) = (uint64_t)v29;
    *(&v43 - 1) = (uint64_t)v41;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100C0DCE8, &v43 - 4, &type metadata for () + 1);

    goto LABEL_16;
  }
  sub_10005972C(a3, (uint64_t)v8, type metadata accessor for SecureLocation);
  v9 = type metadata accessor for SecureLocation(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
  v10 = (uint64_t)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location], v47, 33, 0);
  sub_100004084((uint64_t)v8, v10, &qword_101119450);
  swift_endAccess(v47);
  v11 = a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie];
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(18, -1);
    v17 = swift_slowAlloc(32, -1);
    v44 = a2;
    v18 = v17;
    v47[0] = v17;
    *(_DWORD *)v16 = 136315394;
    v19 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v20 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v20);
    v48 = sub_100016940(v19, v20, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 1024;
    LODWORD(v48) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 4, v16 + 14, v16 + 18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - publishLocation - isFindMyAConnectedService: %{BOOL}d", (uint8_t *)v16, 0x12u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    if (!v11)
      goto LABEL_6;
    goto LABEL_13;
  }

  if (v11)
  {
LABEL_13:
    sub_100BFE928();
LABEL_16:
    Transaction.capture()();
    return;
  }
LABEL_6:
  v21 = v13;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v47[0] = v25;
    *(_DWORD *)v24 = 136315138;
    v26 = *(_QWORD *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v27 = *(_QWORD *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v27);
    v48 = sub_100016940(v26, v27, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v24 + 4, v24 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - publish location called but not active service available", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

  }
}

void sub_100BFE928()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51[3];
  uint64_t v52;
  uint64_t v53;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v2);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SecureLocation(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  __chkstk_darwin(v15);
  *(&v48 - 2) = (uint64_t)v1;
  *((_BYTE *)&v48 - 8) = 1;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0DD78);
  if (LOBYTE(v51[0]) != 1)
  {
    if (qword_1010EA098 == -1)
    {
LABEL_9:
      v25 = type metadata accessor for Logger(0);
      sub_10001A9E8(v25, (uint64_t)qword_1011B7A18);
      v26 = v1;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v51[0] = v30;
        *(_DWORD *)v29 = 136315138;
        v31 = *(_QWORD *)&v26[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v32 = *(_QWORD *)&v26[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v32);
        v52 = sub_100016940(v31, v32, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v29 + 4, v29 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - _createEncryptedLocation - canPublishLocation is false.", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

      }
      type metadata accessor for SecureLocationsStewieError(0);
      v42 = v41;
      v52 = 5;
      v43 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v44 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
      _BridgedStoredNSError.init(_:userInfo:)(v51, &v52, v43, v42, v44);
      v45 = (void *)v51[0];
      v46 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v46);
      *(&v48 - 2) = (uint64_t)v26;
      *(&v48 - 1) = (uint64_t)v45;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100C0DCE8, &v48 - 4, &type metadata for () + 1);

      return;
    }
LABEL_21:
    swift_once(&qword_1010EA098, sub_10098F7D8);
    goto LABEL_9;
  }
  v16 = (uint64_t)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess(&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location], v51, 0, 0);
  sub_10000F9B8(v16, (uint64_t)v4, &qword_101119450);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100004048((uint64_t)v4, &qword_101119450);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
    v18 = v1;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v52 = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v24 = *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v24);
      v50 = sub_100016940(v23, v24, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v21 + 4, v21 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - no location for publish", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    sub_100750E30((uint64_t)v4, (uint64_t)v8);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7A18);
    v34 = v1;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v52 = v38;
      *(_DWORD *)v37 = 136315138;
      v49 = v37 + 4;
      v40 = *(_QWORD *)&v34[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v39 = *(_QWORD *)&v34[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v39);
      v50 = sub_100016940(v40, v39, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v49, v37 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s - Creating encrypted payload", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

    }
    v47 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v47);
    *(&v48 - 2) = (uint64_t)v34;
    *(&v48 - 1) = (uint64_t)v8;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.createLiteLocation", 63, 2, sub_100C0D7CC, &v48 - 4, &type metadata for () + 1);
    sub_1000126B0((uint64_t)v8, type metadata accessor for SecureLocation);
  }
}

uint64_t sub_100BFF090(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v6 = type metadata accessor for SecureLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = swift_allocObject(&unk_1010B52D0, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  sub_10005972C(a3, (uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SecureLocation);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(&unk_1010B52F8, v11 + v8, v10 | 7);
  *(_QWORD *)(v12 + 16) = sub_100C0D824;
  *(_QWORD *)(v12 + 24) = v9;
  sub_100750E30((uint64_t)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11);
  swift_retain();
  swift_retain();
  v13 = a2;
  swift_retain();
  sub_1008B0DEC((uint64_t)sub_100C0D8D0, v12);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100BFF1D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  v12 = a5;
  sub_10001BD08(a1, a2);
  v13 = (char *)v12;
  v14 = sub_10001BD08(a1, a2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (!os_log_type_enabled(v15, v16))
  {

    sub_10001EF3C(a1, a2);
    sub_10001EF3C(a1, a2);

    if (a3)
      goto LABEL_5;
LABEL_8:
    sub_100BFF6B8(a1, a2);
    goto LABEL_11;
  }
  v38 = v11;
  v17 = swift_slowAlloc(22, -1);
  v37 = swift_slowAlloc(64, -1);
  v42 = v37;
  *(_DWORD *)v17 = 136315394;
  v39 = a4;
  v19 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
  v18 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
  swift_bridgeObjectRetain(v18);
  v40 = sub_100016940(v19, v18, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);

  swift_bridgeObjectRelease();
  *(_WORD *)(v17 + 12) = 2080;
  v40 = a1;
  v41 = a2;
  sub_10001BD08(a1, a2);
  v20 = sub_10001A9A8(&qword_1011194A0);
  v21 = String.init<A>(describing:)(&v40, v20);
  v40 = sub_100016940(v21, v22, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 14, v17 + 22);
  swift_bridgeObjectRelease();
  sub_10001EF3C(a1, a2);
  sub_10001EF3C(a1, a2);
  _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - got encryptedLocation %s", (uint8_t *)v17, 0x16u);
  swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v37, -1, -1);
  swift_slowDealloc(v17, -1, -1);

  if (!a3)
    goto LABEL_8;
LABEL_5:
  swift_errorRetain(a3);
  v23 = v13;
  swift_errorRetain(a3);
  v24 = v23;
  v25 = swift_errorRetain(a3);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v40 = v29;
    *(_DWORD *)v28 = 136315394;
    v30 = *(_QWORD *)&v24[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v31 = *(_QWORD *)&v24[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v31);
    v42 = sub_100016940(v30, v31, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v28 + 4, v28 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    v42 = a3;
    swift_errorRetain(a3);
    v32 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v33 = String.init<A>(describing:)(&v42, v32);
    v42 = sub_100016940(v33, v34, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - error payload %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {

    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }

  swift_errorRetain(a3);
  sub_100C03E18(0, a3);
  swift_errorRelease(a3);
  v35 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v35);
  v36[2] = v24;
  v36[3] = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100C0DCE8, v36, &type metadata for () + 1);
  swift_errorRelease(a3);
LABEL_11:
  Transaction.capture()();
}

uint64_t sub_100BFF6B8(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v13 = (_QWORD *)swift_allocObject(&unk_1010B50F0, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100C0D61C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B5108;
  v14 = _Block_copy(aBlock);
  v15 = v2;
  v16 = sub_10001BD08(a1, a2);
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_100BFF8B8(char *a1, void *a2, unint64_t a3)
{
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t *v50;
  char *v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  id v60;
  _BYTE v61[16];
  char *v62;
  id v63;
  uint8_t *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  char v68;
  id aBlock;
  _QWORD v70[5];
  uint64_t v71;
  uint64_t v72;

  v67 = a1;
  v68 = 1;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0DD78);
  if (aBlock == 1)
  {
    if (a3 >> 60 == 15
      || (v6 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient]) == 0)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v17 = type metadata accessor for Logger(0);
      sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
      sub_10001BD08((uint64_t)a2, a3);
      v18 = a1;
      sub_10001BD08((uint64_t)a2, a3);
      v19 = v18;
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(32, -1);
        v66 = swift_slowAlloc(96, -1);
        v71 = v66;
        *(_DWORD *)v22 = 136315650;
        v24 = *(_QWORD *)&v19[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v23 = *(_QWORD *)&v19[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v23);
        aBlock = (id)sub_100016940(v24, v23, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v70, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2080;
        aBlock = a2;
        v70[0] = a3;
        sub_10001BD08((uint64_t)a2, a3);
        v25 = sub_10001A9A8(&qword_1011194A0);
        v26 = String.init<A>(describing:)(&aBlock, v25);
        aBlock = (id)sub_100016940(v26, v27, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v70, v22 + 14, v22 + 22);
        swift_bridgeObjectRelease();
        sub_10001EF3C((uint64_t)a2, a3);
        sub_10001EF3C((uint64_t)a2, a3);
        *(_WORD *)(v22 + 22) = 2080;
        aBlock = *(id *)&v19[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
        v28 = aBlock;
        v29 = sub_10001A9A8(&qword_1011194A8);
        v30 = String.init<A>(describing:)(&aBlock, v29);
        aBlock = (id)sub_100016940(v30, v31, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v70, v22 + 24, v22 + 32);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - publishEncryptedLocation - encryptedData: %s dataClient: %s", (uint8_t *)v22, 0x20u);
        swift_arrayDestroy(v66, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {
        sub_10001EF3C((uint64_t)a2, a3);
        sub_10001EF3C((uint64_t)a2, a3);

      }
      type metadata accessor for SecureLocationsStewieError(0);
      v39 = v38;
      v71 = 6;
      v40 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v41 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
      _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v71, v40, v39, v41);
      v42 = aBlock;
      v43 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v43);
      v62 = v19;
      v63 = v42;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100C0DCE8, v61, &type metadata for () + 1);

    }
    else
    {
      v7 = objc_allocWithZone((Class)CTStewieFindMyMessage);
      sub_10001BD08((uint64_t)a2, a3);
      sub_10001BD08((uint64_t)a2, a3);
      v8 = v6;
      v44 = sub_100C0C624();
      sub_10001EF3C((uint64_t)a2, a3);
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v45 = type metadata accessor for Logger(0);
      sub_10001A9E8(v45, (uint64_t)qword_1011B7A18);
      v46 = a1;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v65 = (void *)swift_slowAlloc(32, -1);
        v66 = (uint64_t)v8;
        aBlock = v65;
        *(_DWORD *)v49 = 136315138;
        v64 = v49 + 4;
        v50 = (uint64_t *)&v46[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v51 = v46;
        v52 = v44;
        v54 = *v50;
        v53 = v50[1];
        swift_bridgeObjectRetain(v53);
        v55 = v54;
        v44 = v52;
        v46 = v51;
        v71 = sub_100016940(v55, v53, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v49 + 4, v49 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s - calling sendMessage", v49, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        v8 = (id)v66;
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v56 = swift_allocObject(&unk_1010B4B28, 24, 7);
      swift_unknownObjectWeakInit(v56 + 16, v46);
      v57 = swift_allocObject(&unk_1010B5140, 32, 7);
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = v8;
      v70[3] = sub_100C0D630;
      v70[4] = v57;
      aBlock = _NSConcreteStackBlock;
      v70[0] = 1107296256;
      v70[1] = sub_100C01330;
      v70[2] = &unk_1010B5158;
      v58 = _Block_copy(&aBlock);
      v59 = v8;
      v60 = v44;
      swift_release();
      objc_msgSend(v59, "sendMessage:completion:", v60, v58);
      sub_10001EF3C((uint64_t)a2, a3);

      _Block_release(v58);
    }
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (void *)swift_slowAlloc(32, -1);
      aBlock = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v16 = *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v16);
      v71 = sub_100016940(v15, v16, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v13 + 4, v13 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - publishEncryptedLocation - canPublishLocation returned false", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    type metadata accessor for SecureLocationsStewieError(0);
    v33 = v32;
    v71 = 5;
    v34 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v35 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v71, v34, v33, v35);
    v36 = aBlock;
    v37 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v37);
    v62 = v10;
    v63 = v36;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100555364, v61, &type metadata for () + 1);

  }
}

void sub_100C0045C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Strong;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36[2];
  uint64_t aBlock[6];
  _QWORD *v38;
  _BYTE v39[24];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v39, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {
    v16 = (void *)Strong;
    v36[1] = *(id *)(Strong + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue);
    v17 = (_QWORD *)swift_allocObject(&unk_1010B5190, 40, 7);
    v17[2] = v16;
    v17[3] = a1;
    v17[4] = a4;
    aBlock[4] = (uint64_t)sub_100C0D66C;
    aBlock[5] = (uint64_t)v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_1010B51A8;
    v18 = v8;
    v19 = _Block_copy(aBlock);
    v20 = a1;
    v36[0] = v16;
    static DispatchQoS.unspecified.getter(a4);
    v38 = _swiftEmptyArrayStorage;
    v21 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v22 = v11;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v24 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v23, v24, v7, v21);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v22);

    swift_release();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7A18);
    v26 = a1;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      aBlock[0] = v30;
      *(_DWORD *)v29 = 136315394;
      v38 = (_QWORD *)sub_100016940(0x3A656977657473, 0xE700000000000000, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2080;
      v31 = v26;
      v32 = objc_msgSend(v31, "description");
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

      v38 = (_QWORD *)sub_100016940(v33, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v29 + 14, v29 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - got ack for sendMessage but no self %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_100C00864(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  char *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  double v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  Class isa;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  id v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  int v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[16];
  _QWORD v105[3];
  char v106[16];
  uint64_t v107[4];

  v6 = type metadata accessor for DispatchPredicate(0);
  v99 = *(char **)(v6 - 8);
  v100 = (char *)v6;
  __chkstk_darwin(v6);
  v98 = (uint64_t *)((char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v95 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v95);
  v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v10);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for Date(0);
  v97 = *(_QWORD *)(v101 - 8);
  v13 = __chkstk_darwin(v101);
  v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v87 - v16;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7A18);
  v20 = a1;
  v21 = a2;
  v22 = (char *)v20;
  v23 = v21;
  v96 = v19;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v27 = swift_slowAlloc(22, -1);
    v90 = v26;
    v28 = v27;
    v91 = swift_slowAlloc(64, -1);
    v107[0] = v91;
    *(_DWORD *)v28 = 136315394;
    v94 = v12;
    v93 = v15;
    v29 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v30 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v30);
    v103 = sub_100016940(v29, v30, v107);
    v89 = v104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v28 + 4, v28 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    v88 = v28 + 14;
    v31 = v23;
    v32 = v23;
    v33 = v17;
    v34 = objc_msgSend(v31, "description");
    v35 = a3;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v92 = v22;
    v37 = v9;
    v39 = v38;

    v17 = v33;
    v23 = v32;
    v40 = v36;
    a3 = v35;
    v103 = sub_100016940(v40, v39, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v89, v88, v28 + 22);

    v15 = v93;
    v9 = v37;
    v22 = v92;
    v12 = v94;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v90, "%s - sendMessage returned %s", (uint8_t *)v28, 0x16u);
    v41 = v91;
    swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

  }
  v42 = &v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  *(_QWORD *)v42 = 0;
  v42[8] = 0;
  if ((objc_msgSend(v23, "success") & 1) != 0)
  {
    v43 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsStewiePublishResult), "init");
    static Date.trustedNow.getter((uint64_t)v17);
    v44 = sub_100C038BC();
    v45 = Date.addingTimeInterval(_:)(v44);
    v46 = Date.timeIntervalSince1970.getter(v45);
    v47 = v97;
    v48 = v15;
    v49 = v101;
    v94 = *(char **)(v97 + 8);
    ((void (*)(char *, uint64_t))v94)(v48, v101);
    objc_msgSend(v43, "setNextAllowedPublish:", v46);
    isa = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v43, "setLastPublished:", isa);

    v51 = (char *)v43;
    sub_100C03E18(v43, 0);
    v93 = v51;

    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v12, v17, v49);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v12, 0, 1, v49);
    sub_100BFACB0((uint64_t)v12);
    v52 = (uint64_t)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
    swift_beginAccess(&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location], &v103, 0, 0);
    sub_10000F9B8(v52, (uint64_t)v9, &qword_101119450);
    v53 = (uint64_t)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation];
    swift_beginAccess(&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation], v107, 33, 0);
    sub_100004084((uint64_t)v9, v53, &qword_101119450);
    swift_endAccess(v107);
    v54 = *(void **)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    v56 = v98;
    v55 = v99;
    *v98 = v54;
    v57 = (uint64_t)v100;
    (*((void (**)(_QWORD *, _QWORD, char *))v55 + 13))(v56, enum case for DispatchPredicate.onQueue(_:), v100);
    v58 = v54;
    LOBYTE(v54) = _dispatchPreconditionTest(_:)(v56);
    (*((void (**)(_QWORD *, uint64_t))v55 + 1))(v56, v57);
    if ((v54 & 1) != 0)
    {
      v100 = v9;
      *(_QWORD *)v42 = 6;
      v42[8] = 0;
      sub_100009528();
      sub_100C02020();
      *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts] = 1;
      if (qword_1010EA140 == -1)
      {
LABEL_9:
        sub_100C0C4AC(0x8000);
        sub_100C08074();
        v59 = v22;
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.default.getter(v60);
        if (os_log_type_enabled(v60, v61))
        {
          v62 = swift_slowAlloc(22, -1);
          v63 = swift_slowAlloc(64, -1);
          v107[0] = v63;
          *(_DWORD *)v62 = 136315394;
          v99 = v17;
          v65 = *(_QWORD *)&v59[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
          v64 = *(_QWORD *)&v59[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
          swift_bridgeObjectRetain(v64);
          v102 = sub_100016940(v65, v64, v107);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v62 + 4, v62 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v62 + 12) = 2080;
          v66 = (uint64_t)v100;
          sub_10000F9B8(v52, (uint64_t)v100, &qword_101119450);
          v67 = String.init<A>(describing:)(v66, v95);
          v102 = sub_100016940(v67, v68, v107);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v62 + 14, v62 + 22);

          v17 = v99;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s - successfully published %s", (uint8_t *)v62, 0x16u);
          swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v63, -1, -1);
          swift_slowDealloc(v62, -1, -1);

        }
        else
        {

        }
        if (qword_1010EA428 != -1)
          swift_once(&qword_1010EA428, sub_100C48554);
        type metadata accessor for Transaction(0);
        v81 = swift_allocObject(&unk_1010B5208, 40, 7);
        *(_BYTE *)(v81 + 16) = 1;
        *(_QWORD *)(v81 + 24) = 0;
        *(_QWORD *)(v81 + 32) = 0;
        swift_retain();
        static Transaction.asyncTask(name:block:)("SecureLocationsLiteLocationPubStateAnalytics", 44, 2, &unk_1011194B8, v81);

        swift_release();
        swift_release();
        ((void (*)(char *, uint64_t))v94)(v17, v101);
        v9 = v100;
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1010EA140, sub_100A3A528);
    goto LABEL_9;
  }
  v69 = v23;
  type metadata accessor for SecureLocationsStewieError(0);
  v71 = v70;
  v103 = 6;
  v72 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v73 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  _BridgedStoredNSError.init(_:userInfo:)(v107, &v103, v72, v71, v73);
  v74 = (void *)v107[0];
  sub_100C03E18(0, v107[0]);

  v75 = objc_msgSend(a3, "getState");
  sub_100C057A4(v75, 1);

  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  swift_retain();
  v76 = objc_msgSend(v69, "error");
  if (v76)
  {
    v77 = v76;
    swift_getErrorValue(v76, v106, v105);
    v78 = Error.localizedDescription.getter(v105[1], v105[2]);
    v80 = v79;

  }
  else
  {
    v78 = 0;
    v80 = 0;
  }
  type metadata accessor for Transaction(0);
  v82 = swift_allocObject(&unk_1010B51E0, 40, 7);
  *(_BYTE *)(v82 + 16) = 0;
  *(_QWORD *)(v82 + 24) = v78;
  *(_QWORD *)(v82 + 32) = v80;
  swift_bridgeObjectRetain(v80);
  static Transaction.asyncTask(name:block:)("SecureLocationsLiteLocationPubStateAnalytics", 44, 2, &unk_1011194B0, v82);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_21:
  v83 = type metadata accessor for SecureLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v9, 1, 1, v83);
  v84 = (uint64_t)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location];
  swift_beginAccess(&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_location], v107, 33, 0);
  sub_100004084((uint64_t)v9, v84, &qword_101119450);
  swift_endAccess(v107);
  v85 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v85);
  *(&v87 - 2) = (uint64_t)v22;
  *(&v87 - 1) = 0;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100C0DCE8, &v87 - 4, &type metadata for () + 1);
}

uint64_t sub_100C01330(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(void))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a3)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a2;
  v5();
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

void sub_100C013B8()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v1 = type metadata accessor for Logger(0);
  sub_10001A9E8(v1, (uint64_t)qword_1011B7A18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v14 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v8);
    v13 = sub_100016940(v7, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s - setupPublishThrottleTimer", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  if (qword_1010EA3E8 != -1)
    swift_once(&qword_1010EA3E8, sub_100C0A758);
  v9 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm];
  v10 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm + 8];
  v11 = swift_allocObject(&unk_1010B4B28, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v2);
  swift_retain();
  sub_100C01B80(v9, v10, (uint64_t)sub_100C0D4D0, v11);
  v12 = swift_release_n(v11, 2);
  sub_100C01E04(v12);
}

void sub_100C015F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22[2];
  _QWORD *v23;
  _QWORD aBlock[6];
  _BYTE v25[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v25, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v13 = (void *)Strong;
    v22[1] = *(id *)(Strong + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue);
    v14 = swift_allocObject(&unk_1010B50A0, 32, 7);
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = a1;
    aBlock[4] = sub_100C0D5D8;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010B50B8;
    v15 = v5;
    v16 = _Block_copy(aBlock);
    v22[0] = v13;
    v17 = swift_retain();
    static DispatchQoS.unspecified.getter(v17);
    v23 = _swiftEmptyArrayStorage;
    v18 = v8;
    v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v20, v21, v4, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);

    swift_release();
  }
  else
  {
    Transaction.capture()();
  }
}

void sub_100C01830(void *a1)
{
  uint64_t v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  id v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v22 = v7;
    *(_DWORD *)v6 = 136315138;
    v9 = *(_QWORD *)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v8 = *(_QWORD *)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v8);
    v21 = sub_100016940(v9, v8, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v6 + 4, v6 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s - throttle period complete", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v10 = &v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if ((v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8] & 1) != 0
    || *(_QWORD *)v10 != 6)
  {
    v14 = v3;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v22 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v20 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v20);
      v21 = sub_100016940(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v17 + 4, v17 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - completed throttle deadline but not in throttled state. doing nothing", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    *(_QWORD *)v10 = 0;
    v10[8] = 0;
    v11 = *(void **)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v12, "getState");
      sub_100C057A4(v13, 1);

    }
  }
  Transaction.capture()();
}

uint64_t sub_100C01B80(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = v4;
  v9 = a1;
  v10 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA3E0 != -1)
    swift_once(&qword_1010EA3E0, sub_100C0A6EC);
  v11 = qword_1011191E0;
  if (os_log_type_enabled((os_log_t)qword_1011191E0, v10))
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v25 = a3;
    v12 = v9;
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v28 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(a2);
    v26 = sub_100016940(v12, a2, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v10, "Registering event for: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v15 = v13;
    v9 = v12;
    a3 = v25;
    swift_slowDealloc(v15, -1, -1);
  }
  v16 = swift_allocObject(&unk_1010B5078, 32, 7);
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v17 = *(_QWORD *)(v5 + 32);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v18 = sub_10001A9A8(&qword_101119498);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100C0DC04, v5, v17, &type metadata for () + 1, v18);
  v19 = v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
  v28 = v19;
  sub_10010C8A0((uint64_t)sub_100C0D578, v16, v9, a2, isUniquelyReferenced_nonNull_native);
  v21 = v28;
  swift_bridgeObjectRelease();
  v22 = swift_bridgeObjectRelease();
  __chkstk_darwin(v22);
  v24[2] = v5;
  v24[3] = v21;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100C0D59C, v24, v17, &type metadata for () + 1, &type metadata for () + 1);
  return swift_bridgeObjectRelease();
}

void sub_100C01E04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t aBlock[6];

  v2 = *v1;
  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA3E0 != -1)
    swift_once(&qword_1010EA3E0, sub_100C0A6EC);
  v4 = qword_1011191E0;
  v5 = v3;
  if (os_log_type_enabled((os_log_t)qword_1011191E0, v3))
  {
    swift_retain();
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    aBlock[0] = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = v1[2];
    v9 = v1[3];
    swift_bridgeObjectRetain(v9);
    v15 = sub_100016940(v8, v9, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, aBlock, v6 + 4, v6 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "XPC Event Stream will be set to run %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  v10 = v1[2];
  v11 = v1[3];
  v12 = swift_allocObject(&unk_1010B5000, 32, 7);
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = v2;
  aBlock[4] = (uint64_t)sub_100C0D4FC;
  aBlock[5] = v12;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100BFAAA0;
  aBlock[3] = (uint64_t)&unk_1010B5018;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v14 = String.utf8CString.getter(v10, v11);
  xpc_set_event_stream_handler((const char *)(v14 + 32), 0, v13);
  swift_release();
  _Block_release(v13);
}

uint64_t sub_100C02020()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  double v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v37 = (uint64_t)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v36 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) != 0)
  {
    v17 = sub_100C038BC();
    Date.addingTimeInterval(_:)(v17);
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B7A18);
  v19 = v39;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v7, v9, v2);
  v20 = v1;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v38 = v2;
    v36 = v24;
    v41 = v24;
    *(_DWORD *)v23 = 136315394;
    v25 = &v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v26 = v7;
    v27 = v20;
    v29 = *(_QWORD *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v28 = *((_QWORD *)v25 + 1);
    swift_bridgeObjectRetain(v28);
    v40 = sub_100016940(v29, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 4, v23 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2048;
    v30 = v37;
    static Date.trustedNow.getter(v37);
    v31 = v26;
    v32 = Date.timeIntervalSince(_:)(v30);
    v33 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v33(v30, v38);
    v40 = *(_QWORD *)&v32;
    v20 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 14, v23 + 22);
    v33((uint64_t)v31, v38);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - entering throttle - remaining period %f", (uint8_t *)v23, 0x16u);
    v34 = v36;
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    v2 = v38;
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {

    v33 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v33((uint64_t)v7, v2);
  }

  if (qword_1010EA3E8 != -1)
    swift_once(&qword_1010EA3E8, sub_100C0A758);
  sub_100C023D0(*(_QWORD *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm], *(_QWORD *)&v20[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_liteLocationThrottleAlarm + 8], (uint64_t)v9);
  return ((uint64_t (*)(char *, uint64_t))v33)(v9, v2);
}

void sub_100C023D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  double v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100C0AD0C(a1, a2);
  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA3E0 != -1)
    swift_once(&qword_1010EA3E0, sub_100C0A6EC);
  v14 = qword_1011191E0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  if (os_log_type_enabled(v14, v13))
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v15 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    v31 = v28;
    *(_DWORD *)v15 = 136315394;
    v27 = v13;
    swift_bridgeObjectRetain(a2);
    v16 = sub_100016940(a1, a2, &v31);
    v29 = a1;
    v30 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v15 + 12) = 2080;
    v26 = v14;
    v17 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v8, v17);
    v30 = sub_100016940(v18, v19, &v31);
    a1 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v27, "Scheduling alarm: %s for %s", (uint8_t *)v15, 0x16u);
    v20 = v28;
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v21 = xpc_dictionary_create(0, 0, 0);
  v22 = Date.timeIntervalSince1970.getter();
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v22 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v22 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v23 = 1000000000 * (uint64_t)v22;
  if ((unsigned __int128)((uint64_t)v22 * (__int128)1000000000) >> 64 == v23 >> 63)
  {
    xpc_dictionary_set_date(v21, "Date", v23);
    v24 = String.utf8CString.getter(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
    v25 = String.utf8CString.getter(a1, a2);
    swift_unknownObjectRetain(v21);
    xpc_set_event(v24 + 32, v25 + 32, v21);
    swift_unknownObjectRelease_n(v21, 2);
    swift_release(v24);
    swift_release(v25);
    return;
  }
LABEL_14:
  __break(1u);
}

uint64_t sub_100C02738(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSString v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint8_t *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "doubleForKey:", v14);
  v16 = v15;

  if (v16 <= 0.0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    return sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010EA690);
  }
  Date.init(timeIntervalSince1970:)(v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010EA690);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
  static Date.trustedNow.getter((uint64_t)v10);
  v17 = Date.timeIntervalSince(_:)(v12);
  v18 = sub_100C038BC();
  if (v17 >= v18)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v31 = type metadata accessor for Logger(0);
    sub_10001A9E8(v31, (uint64_t)qword_1011B7A18);
    v32 = a1;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v46 = v1;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v49 = v45;
      v44 = v35;
      *(_DWORD *)v35 = 136315138;
      v43 = v35 + 4;
      v36 = *(_QWORD *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v37 = *(_QWORD *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v37);
      v47 = sub_100016940(v36, v37, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v43, v35 + 12);

      swift_bridgeObjectRelease();
      v38 = v44;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - device not in throttle period", v44, 0xCu);
      v39 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {

    }
  }
  else
  {
    v19 = *(_QWORD *)&v18;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
    v21 = a1;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      v25 = swift_slowAlloc(32, -1);
      LODWORD(v44) = v24;
      v26 = v25;
      v45 = swift_slowAlloc(32, -1);
      v49 = v45;
      *(_DWORD *)v26 = 136315650;
      v43 = (uint8_t *)(v26 + 4);
      v46 = v1;
      v27 = *(_QWORD *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v28 = *(_QWORD *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v28);
      v47 = sub_100016940(v27, v28, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v43, v26 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2048;
      v47 = *(_QWORD *)&v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 14, v26 + 22);
      *(_WORD *)(v26 + 22) = 2048;
      v47 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v26 + 24, v26 + 32);
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v44, "%s - still in throttle period %f. configuredThrottle %f", (uint8_t *)v26, 0x20u);
      v29 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    v40 = &v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
    *(_QWORD *)v40 = 6;
    v40[8] = 0;
    sub_100C02020();
  }
  v41 = *(void (**)(char *, uint64_t))(v7 + 8);
  v41(v10, v6);
  return ((uint64_t (*)(char *, uint64_t))v41)(v12, v6);
}

void sub_100C02C90()
{
  _BYTE *v0;
  char *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_1010EA098, sub_10098F7D8);
    goto LABEL_5;
  }
  v1 = &v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if ((v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8] & 1) != 0
    || *(_QWORD *)v1 != 5)
  {
    return;
  }
  if (qword_1010EA098 != -1)
    goto LABEL_15;
LABEL_5:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v11 = v2;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v29[1] = v10;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v31 = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v18 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v18);
    v30 = sub_100016940(v17, v18, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - resetStateIfPublishInProgress - will reset", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  *(_QWORD *)v1 = 0;
  v1[8] = 0;
  v19 = *(void **)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v20, "getState");
    sub_100C057A4(v21, 1);

  }
  else
  {
    v22 = v11;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v31 = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v28 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v28);
      v30 = sub_100016940(v27, v28, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v25 + 4, v25 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - resetStateIfPublishInProgress - No data client available", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100C03058(char *a1@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  _BYTE *v3;
  uint64_t My;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _OWORD v44[13];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE *v58;

  My = type metadata accessor for Feature.FindMy(0);
  *((_QWORD *)&v46 + 1) = My;
  *(_QWORD *)&v47 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v8 = sub_100018F08(&v45);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v8, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v45);
  if ((My & 1) == 0)
    goto LABEL_12;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v9 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v9, &type metadata for SecureLocationsConfig);
  swift_release(v9);
  v55 = v44[10];
  v56 = v44[11];
  v57 = v44[12];
  v51 = v44[6];
  v52 = v44[7];
  v53 = v44[8];
  v54 = v44[9];
  v47 = v44[2];
  v48 = v44[3];
  v49 = v44[4];
  v50 = v44[5];
  v45 = v44[0];
  v46 = v44[1];
  sub_1003D09E0(&v45);
  if (v50 != 1
    || (a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] & 1) == 0)
  {
LABEL_12:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v29 = static os_log_type_t.default.getter(v15);
    if (!os_log_type_enabled(v15, v29))
      goto LABEL_35;
    v17 = swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v45 = v18;
    v58 = v3;
    *(_DWORD *)v17 = 136315138;
    v30 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v31 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v31);
    *(_QWORD *)&v44[0] = sub_100016940(v30, v31, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease();
    v32 = "%s - canPublishLocation - feature disabled";
    goto LABEL_16;
  }
  v10 = qword_1011B7A48;
  swift_retain();
  v11 = sub_10000D338();
  swift_release(v10);
  if ((v11 & 1) == 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7A18);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v29 = static os_log_type_t.default.getter(v15);
    if (!os_log_type_enabled(v15, v29))
      goto LABEL_35;
    v17 = swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v44[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v58 = (_BYTE *)(v17 + 4);
    v34 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v35 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v35);
    v43 = sub_100016940(v34, v35, (uint64_t *)v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v58, v17 + 12);

    swift_bridgeObjectRelease();
    v32 = "%s - canPublishLocation - not a location publishing device. ";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v15, v29, v32, (uint8_t *)v17, 0xCu);
    v25 = (char *)&type metadata for Any + 8;
    v26 = v18;
    v27 = 1;
    goto LABEL_17;
  }
  v12 = &a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if ((a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8] & 1) != 0)
    goto LABEL_8;
  v36 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 == 5 && (a2 & 1) == 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B7A18);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v29 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v29))
    {
      v17 = swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v44[0] = v18;
      *(_DWORD *)v17 = 136315138;
      v58 = (_BYTE *)(v17 + 4);
      v38 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v39 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v39);
      v43 = sub_100016940(v38, v39, (uint64_t *)v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v58, v17 + 12);

      swift_bridgeObjectRelease();
      v32 = "%s - canPublishLocation - publish already in progress";
      goto LABEL_16;
    }
LABEL_35:

    goto LABEL_36;
  }
  if (v36 != 1)
  {
    if (v36 == 6)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v40 = type metadata accessor for Logger(0);
      sub_10001A9E8(v40, (uint64_t)qword_1011B7A18);
      v14 = a1;
      v15 = Logger.logObject.getter(v14);
      v29 = static os_log_type_t.default.getter(v15);
      if (os_log_type_enabled(v15, v29))
      {
        v17 = swift_slowAlloc(12, -1);
        v18 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v44[0] = v18;
        *(_DWORD *)v17 = 136315138;
        v58 = (_BYTE *)(v17 + 4);
        v41 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v42 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v42);
        v43 = sub_100016940(v41, v42, (uint64_t *)v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v58, v17 + 12);

        swift_bridgeObjectRelease();
        v32 = "%s - canPublishLocation - publish is throttled";
        goto LABEL_16;
      }
      goto LABEL_35;
    }
    if (v36 != 5 || (a2 & 1) == 0)
    {
LABEL_8:
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v13 = type metadata accessor for Logger(0);
      sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
      v14 = a1;
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter(v15);
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(64, -1);
        v43 = v18;
        *(_DWORD *)v17 = 136315394;
        v58 = a3;
        v19 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v20 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v20);
        *(_QWORD *)&v44[0] = sub_100016940(v19, v20, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v17 + 4, v17 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2080;
        v21 = v12[8];
        *(_QWORD *)&v44[0] = *(_QWORD *)v12;
        BYTE8(v44[0]) = v21;
        v22 = sub_10001A9A8((uint64_t *)&unk_101119478);
        v23 = String.init<A>(describing:)(v44, v22);
        *(_QWORD *)&v44[0] = sub_100016940(v23, v24, &v43);
        a3 = v58;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v17 + 14, v17 + 22);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - canPublishLocation - state is not available %s", (uint8_t *)v17, 0x16u);
        v25 = (char *)&type metadata for Any + 8;
        v26 = v18;
        v27 = 2;
LABEL_17:
        swift_arrayDestroy(v26, v27, v25);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);

LABEL_37:
        *a3 = 0;
        return;
      }

LABEL_36:
      goto LABEL_37;
    }
  }
  *a3 = 1;
}

double sub_100C038BC()
{
  void *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD v14[13];
  _OWORD v15[6];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  sub_100ACDAE0(0xD00000000000001BLL, 0x8000000100EF4330, (void *)qword_1011B7C08);
  if ((v2 & 1) != 0)
  {
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v12 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v12, &type metadata for SecureLocationsConfig);
    swift_release(v12);
    v20 = v14[10];
    v21 = v14[11];
    v22 = v14[12];
    v16 = v14[6];
    v17 = v14[7];
    v18 = v14[8];
    v19 = v14[9];
    v15[2] = v14[2];
    v15[3] = v14[3];
    v15[4] = v14[4];
    v15[5] = v14[5];
    v15[0] = v14[0];
    v15[1] = v14[1];
    sub_1003D09E0(v15);
    return *((double *)&v16 + 1);
  }
  else
  {
    v3 = v1;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
    v5 = v0;
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v15[0] = v9;
      *(_DWORD *)v8 = 136315394;
      v10 = *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v11 = *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v11);
      *(_QWORD *)&v14[0] = sub_100016940(v10, v11, (uint64_t *)v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, (char *)v14 + 8, v8 + 4, v8 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 12) = 2048;
      *(_QWORD *)&v14[0] = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, (char *)v14 + 8, v8 + 14, v8 + 22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - using defaults override for timeBetweenPublish %ld", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

    }
    return (double)v3;
  }
}

uint64_t sub_100C03B84(uint64_t a1, uint64_t a2)
{
  return sub_10000BA2C(a1, a2, (uint64_t)&unk_1010B4F88, (uint64_t)sub_100C0D49C, (uint64_t)&unk_1010B4FA0);
}

void sub_100C03BA0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22[3];

  v6 = swift_allocObject(&unk_1010B4FD8, 32, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = &a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions], v22, 33, 0);
  v8 = *(_QWORD **)v7;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *(_QWORD *)v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = sub_1007CAACC(0, v8[2] + 1, 1, v8);
    *(_QWORD *)v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = sub_1007CAACC((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *(_QWORD *)v7 = v8;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = sub_100C0D4A8;
  v12[5] = v6;
  swift_endAccess(v22);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v22[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v19 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v20 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v20);
    v21 = sub_100016940(v19, v20, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - added callback for location publish", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100C03E18(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v13 = (_QWORD *)swift_allocObject(&unk_1010B4EC0, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100C0D3FC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B4ED8;
  v14 = _Block_copy(aBlock);
  v15 = v2;
  v16 = a1;
  v17 = swift_errorRetain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_100C04018(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  __objc2_class_ro **p_info;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void *v70;
  __int128 v71;
  char v72[24];
  _QWORD *v73;
  uint64_t aBlock[6];
  uint64_t v75;
  _BYTE v76[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v64 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v63 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v68 = v10;
  v69 = v9;
  v70 = a2;
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
  v17 = a1;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  p_info = _TtC12searchpartyd30AccessoryFirmwareUpdateManager.info;
  v67 = v11;
  v66 = v13;
  v65 = v14;
  v62 = a3;
  if (v20)
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(32, -1);
    aBlock[0] = v23;
    *(_DWORD *)v22 = 136315394;
    v24 = *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v25 = *(_QWORD *)&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v25);
    v75 = sub_100016940(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2048;
    v26 = &v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions];
    swift_beginAccess(&v17[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_publishCompletions], v72, 0, 0);
    v75 = *(_QWORD *)(*(_QWORD *)v26 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v22 + 14, v22 + 22);

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - calling completions %ld", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v27 = v23;
    p_info = (__objc2_class_ro **)(_TtC12searchpartyd30AccessoryFirmwareUpdateManager + 32);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

  }
  v28 = (char *)p_info[73] + (_QWORD)v17;
  swift_beginAccess(v28, &v75, 1, 0);
  v29 = *(_QWORD *)v28;
  v30 = *(_QWORD *)(*(_QWORD *)v28 + 16);
  v31 = _swiftEmptyArrayStorage;
  if (v30)
  {
    v55 = v28;
    v60 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v59 = enum case for DispatchQoS.QoSClass.default(_:);
    swift_bridgeObjectRetain_n(v29, 2);
    v32 = 0;
    v58 = v6;
    v57 = v7;
    v61 = v30;
    v56 = v29;
    do
    {
      v33 = v29 + 16 * v32++;
      v34 = swift_allocObject(&unk_1010B4F10, 32, 7);
      v71 = *(_OWORD *)(v33 + 32);
      *(_OWORD *)(v34 + 16) = v71;
      v35 = v64;
      v36 = v63;
      v37 = v65;
      (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, v59, v65);
      *(_QWORD *)&v71 = *((_QWORD *)&v71 + 1);
      swift_retain_n(*((_QWORD *)&v71 + 1), 2);
      v38 = (void *)static OS_dispatch_queue.global(qos:)(v36);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
      v39 = (_QWORD *)swift_allocObject(&unk_1010B4F38, 48, 7);
      v39[2] = sub_100C0D408;
      v39[3] = v34;
      v40 = v70;
      v41 = v62;
      v39[4] = v70;
      v39[5] = v41;
      aBlock[4] = (uint64_t)sub_100C0D470;
      aBlock[5] = (uint64_t)v39;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100016FB8;
      aBlock[3] = (uint64_t)&unk_1010B4F50;
      v42 = _Block_copy(aBlock);
      swift_retain();
      v43 = v40;
      v44 = swift_errorRetain(v41);
      v45 = v66;
      static DispatchQoS.unspecified.getter(v44);
      v73 = v31;
      v46 = v31;
      v47 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v48 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v49 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v50 = v69;
      v51 = v58;
      v52 = v47;
      v31 = v46;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v73, v48, v49, v58, v52);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v50, v42);
      v29 = v56;
      v53 = v61;
      swift_release();
      _Block_release(v42);

      (*(void (**)(char *, uint64_t))(v57 + 8))(v50, v51);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v68);
      swift_release();
      swift_release();
    }
    while (v53 != v32);
    swift_bridgeObjectRelease_n(v29, 2);
    v28 = v55;
  }
  *(_QWORD *)v28 = v31;
  return swift_bridgeObjectRelease();
}

void sub_100C045E8(char a1, void *a2)
{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if ((a1 & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
    v4 = a2;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v20 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v10 = *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v10);
      v19 = sub_100016940(v9, v10, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v7 + 4, v7 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - secure locations is setup - requesting startMonitor", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

    }
    sub_10000B028(SharingCircleWildAdvertisementKey.init(key:), 0);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
    v18 = a2;
    v12 = Logger.logObject.getter(v18);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v20 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v17 = *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v17);
      v19 = sub_100016940(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - setupSecureLocations returned as false. Cannot start monitor. Not retrying to avoid loop", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100C04920(void (*a1)(void *))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  type metadata accessor for SecureLocationsStewieError(0);
  v3 = v2;
  v7 = 4;
  v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
  v6 = v8;
  a1(v8);

}

uint64_t sub_100C049C8(uint64_t a1, uint64_t a2)
{
  return sub_10000BA2C(a1, a2, (uint64_t)&unk_1010B4C18, (uint64_t)sub_100C0D2CC, (uint64_t)&unk_1010B4C30);
}

uint64_t sub_100C049E4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  void **aBlock;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  void *v80;
  uint64_t (*v81)();
  _QWORD *v82;

  v75 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v74 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v72 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8] == 1)
  {
    v70 = v6;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
    v14 = a1;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v68 = a3;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (void **)swift_slowAlloc(32, -1);
      v69 = v8;
      v19 = v18;
      aBlock = v18;
      v67 = a2;
      *(_DWORD *)v17 = 136315138;
      v66 = v17 + 4;
      v20 = v10;
      v21 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v22 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v22);
      v23 = v21;
      v10 = v20;
      v76 = (_QWORD *)sub_100016940(v23, v22, (uint64_t *)&aBlock);
      a3 = v68;
      a2 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &aBlock, v66, v17 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - no current state - responding as unknown", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      v24 = v19;
      v8 = v69;
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

    }
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v40 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v10);
    v41 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v10);
    v42 = swift_allocObject(&unk_1010B4C68, 32, 7);
    *(_QWORD *)(v42 + 16) = a2;
    *(_QWORD *)(v42 + 24) = a3;
    v81 = sub_100C0D2D8;
    v82 = (_QWORD *)v42;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = sub_100016FB8;
    v80 = &unk_1010B4C80;
    v43 = _Block_copy(&aBlock);
    v44 = swift_retain();
    v45 = v72;
    static DispatchQoS.unspecified.getter(v44);
    v76 = _swiftEmptyArrayStorage;
    v46 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v47 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v48 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v49 = v74;
    v50 = v47;
    v51 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v50, v48, v75, v46);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v43);
    _Block_release(v43);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v49, v51);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v45, v8);
  }
  else
  {
    v25 = *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1011B7A18);
    v27 = a1;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v70 = v6;
      v31 = v30;
      v32 = (void **)swift_slowAlloc(64, -1);
      v69 = v8;
      v33 = v32;
      aBlock = v32;
      *(_DWORD *)v31 = 136315394;
      v67 = a2;
      v68 = a3;
      v66 = (uint8_t *)v10;
      v34 = *(_QWORD *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v35 = *(_QWORD *)&v27[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v35);
      v76 = (_QWORD *)sub_100016940(v34, v35, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &aBlock, v31 + 4, v31 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      v36 = sub_100C96C38(v25);
      v76 = (_QWORD *)sub_100016940(v36, v37, (uint64_t *)&aBlock);
      a2 = v67;
      a3 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &aBlock, v31 + 14, v31 + 22);
      v10 = (uint64_t)v66;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - currentState %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      v38 = v33;
      v8 = v69;
      swift_slowDealloc(v38, -1, -1);
      v39 = v31;
      v6 = v70;
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v52 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v10);
    v53 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
    v54 = (_QWORD *)swift_allocObject(&unk_1010B4CB8, 40, 7);
    v54[2] = a2;
    v54[3] = a3;
    v54[4] = v25;
    v81 = sub_100C0D324;
    v82 = v54;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = sub_100016FB8;
    v80 = &unk_1010B4CD0;
    v55 = _Block_copy(&aBlock);
    v56 = swift_retain();
    v57 = v72;
    static DispatchQoS.unspecified.getter(v56);
    v76 = _swiftEmptyArrayStorage;
    v58 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v59 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v60 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v61 = v74;
    v62 = v59;
    v63 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v62, v60, v75, v58);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v61, v55);
    _Block_release(v55);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v61, v63);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v57, v8);
  }
  return swift_release();
}

uint64_t sub_100C05170(uint64_t a1, uint64_t a2)
{
  return sub_10000BA2C(a1, a2, (uint64_t)&unk_1010B4BC8, (uint64_t)sub_100C0D2BC, (uint64_t)&unk_1010B4BE0);
}

void sub_100C0518C(_BYTE *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t My;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  NSString v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  double v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(id, _QWORD);
  uint64_t v50;
  double v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD);
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[13];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v52 - v14;
  My = type metadata accessor for Feature.FindMy(0);
  *((_QWORD *)&v62 + 1) = My;
  *(_QWORD *)&v63 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v17 = sub_100018F08(&v61);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v17, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v61);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v61);
  if ((My & 1) == 0)
    goto LABEL_10;
  v54 = v9;
  v55 = v10;
  v18 = a1;
  v56 = a3;
  v57 = a2;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v19 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v19, &type metadata for SecureLocationsConfig);
  swift_release();
  v71 = v60[10];
  v72 = v60[11];
  v73 = v60[12];
  v67 = v60[6];
  v68 = v60[7];
  v69 = v60[8];
  v70 = v60[9];
  v63 = v60[2];
  v64 = v60[3];
  v65 = v60[4];
  v66 = v60[5];
  v61 = v60[0];
  v62 = v60[1];
  sub_1003D09E0(&v61);
  if (v66 != 1
    || (v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] & 1) == 0)
  {
    a2 = v57;
LABEL_10:
    type metadata accessor for SecureLocationsStewieError(0);
    v35 = v34;
    *(_QWORD *)&v60[0] = 3;
    v36 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v37 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(&v61, v60, v36, v35, v37);
    v38 = (id)v61;
    a2(0, v61);
    goto LABEL_11;
  }
  v20 = v18;
  v21 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsStewiePublishResult), "init");
  v22 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "doubleForKey:", v23);
  v25 = v24;

  if (v25 <= 0.0)
  {
    v27 = v54;
    v26 = v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v8, 1, 1, v54);
  }
  else
  {
    Date.init(timeIntervalSince1970:)(v25);
    v27 = v54;
    v26 = v55;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v8, 0, 1, v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v8, 1, v27) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v15, v8, v27);
      isa = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v21, "setLastPublished:", isa);

      v29 = sub_100C038BC();
      v30 = Date.addingTimeInterval(_:)(v29);
      objc_msgSend(v21, "setNextAllowedPublish:", Date.timeIntervalSince1970.getter(v30));
      v31 = v26;
      v32 = v21;
      v57(v21, 0);

      v33 = *(void (**)(char *, uint64_t))(v31 + 8);
      v33(v13, v27);
      v33(v15, v27);
      return;
    }
  }
  sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v39 = type metadata accessor for Logger(0);
  sub_10001A9E8(v39, (uint64_t)qword_1011B7A18);
  v40 = v20;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v60[0] = v53;
    *(_DWORD *)v43 = 136315138;
    v52 = v43 + 4;
    v44 = v21;
    v45 = *(_QWORD *)&v40[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v46 = *(_QWORD *)&v40[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v46);
    v47 = v45;
    v26 = v55;
    v58 = sub_100016940(v47, v46, (uint64_t *)v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v52, v43 + 12);

    v21 = v44;
    v27 = v54;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s - no last publish. allow immediate", v43, 0xCu);
    v48 = v53;
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

  }
  v49 = (void (*)(id, _QWORD))v57;
  objc_msgSend(v21, "setLastPublished:", 0);
  v50 = static Date.trustedNow.getter((uint64_t)v13);
  v51 = Date.timeIntervalSince1970.getter(v50);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
  objc_msgSend(v21, "setNextAllowedPublish:", v51);
  v38 = v21;
  v49(v21, 0);

LABEL_11:
}

void sub_100C057A4(void *a1, int a2)
{
  _BYTE *v2;
  char *v3;
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  int v18;
  uint64_t My;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  unint64_t v71;
  uint64_t v72;
  os_log_t v73;
  uint64_t v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  char *v79;
  uint8_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  os_log_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  unint64_t v93;
  uint64_t v94;
  os_log_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint8_t *v115;
  uint8_t *v116;
  uint64_t v117;
  os_log_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  _BYTE v124[24];
  _OWORD v125[13];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;

  v4 = v2;
  v122 = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v115 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint8_t **)((char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    v3 = &v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
    v13 = *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
    v18 = v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8];
    My = type metadata accessor for Feature.FindMy(0);
    *((_QWORD *)&v127 + 1) = My;
    *(_QWORD *)&v128 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v20 = sub_100018F08(&v126);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v20, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)(&v126);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v126);
    if ((My & 1) == 0)
      goto LABEL_14;
    LODWORD(v121) = v18;
    if (qword_1010EA0A8 == -1)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA0A8, sub_10098F82C);
LABEL_4:
  v21 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v21, &type metadata for SecureLocationsConfig);
  swift_release(v21);
  v136 = v125[10];
  v137 = v125[11];
  v138 = v125[12];
  v132 = v125[6];
  v133 = v125[7];
  v134 = v125[8];
  v135 = v125[9];
  v128 = v125[2];
  v129 = v125[3];
  v130 = v125[4];
  v131 = v125[5];
  v126 = v125[0];
  v127 = v125[1];
  sub_1003D09E0(&v126);
  if (v131 != 1)
  {
    LOBYTE(v18) = v121;
    goto LABEL_14;
  }
  LOBYTE(v18) = v121;
  if ((v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] & 1) == 0)
  {
LABEL_14:
    *(_QWORD *)v3 = 7;
    v3[8] = 0;
    goto LABEL_15;
  }
  v119 = v13;
  v120 = v3;
  if ((v3[8] & 1) == 0 && *(_QWORD *)v3 == 5)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
    v23 = v4;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v123 = v27;
      *(_DWORD *)v26 = 136315394;
      v29 = *(_QWORD *)&v23[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v28 = *(_QWORD *)&v23[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)&v125[0] = sub_100016940(v29, v28, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, (char *)v125 + 8, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      v30 = v120[8];
      *(_QWORD *)&v125[0] = *(_QWORD *)v120;
      BYTE8(v125[0]) = v30;
      v31 = sub_10001A9A8((uint64_t *)&unk_101119478);
      v32 = String.init<A>(describing:)(v125, v31);
      *(_QWORD *)&v125[0] = sub_100016940(v32, v33, &v123);
      v3 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, (char *)v125 + 8, v26 + 14, v26 + 22);

      LOBYTE(v18) = v121;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - not updating state since existing state is %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    v13 = v119;
    goto LABEL_15;
  }
  if ((objc_msgSend(a1, "allowedServices") & 4) == 0)
  {
    if (objc_msgSend(a1, "status") == (id)1
      && (objc_msgSend(a1, "reason") == (id)4 || objc_msgSend(a1, "reason") == (id)5))
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v66 = type metadata accessor for Logger(0);
      sub_10001A9E8(v66, (uint64_t)qword_1011B7A18);
      v67 = v4;
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.default.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v118 = (os_log_t)swift_slowAlloc(32, -1);
        *(_QWORD *)&v125[0] = v118;
        *(_DWORD *)v70 = 136315138;
        v117 = (uint64_t)(v70 + 4);
        v72 = *(_QWORD *)&v67[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v71 = *(_QWORD *)&v67[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v71);
        v123 = sub_100016940(v72, v71, (uint64_t *)v125);
        v3 = v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v117, v70 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s - FindMy publish is not allowed due to geo reasons", v70, 0xCu);
        v73 = v118;
        swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v70, -1, -1);

      }
      else
      {

      }
      v103 = 8;
    }
    else
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v88 = type metadata accessor for Logger(0);
      sub_10001A9E8(v88, (uint64_t)qword_1011B7A18);
      v89 = v4;
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.default.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        v92 = (uint8_t *)swift_slowAlloc(12, -1);
        v118 = (os_log_t)swift_slowAlloc(32, -1);
        *(_QWORD *)&v125[0] = v118;
        *(_DWORD *)v92 = 136315138;
        v117 = (uint64_t)(v92 + 4);
        v94 = *(_QWORD *)&v89[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v93 = *(_QWORD *)&v89[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v93);
        v123 = sub_100016940(v94, v93, (uint64_t *)v125);
        v3 = v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v117, v92 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "%s - FindMy publish is not available", v92, 0xCu);
        v95 = v118;
        swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v92, -1, -1);

      }
      else
      {

      }
      v103 = 2;
    }
    *(_QWORD *)v3 = v103;
    v3[8] = 0;
    v104 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v9, 1, 1, v104);
    v105 = (uint64_t)&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate];
    swift_beginAccess(&v4[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate], v125, 33, 0);
    sub_100004084((uint64_t)v9, v105, (uint64_t *)&unk_1010EA690);
    swift_endAccess(v125);
    sub_100C08E20(1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v106 = type metadata accessor for Logger(0);
    sub_10001A9E8(v106, (uint64_t)qword_1011B7A18);
    v107 = v4;
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.default.getter(v108);
    if (os_log_type_enabled(v108, v109))
    {
      v110 = swift_slowAlloc(12, -1);
      v111 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v125[0] = v111;
      *(_DWORD *)v110 = 136315138;
      v118 = (os_log_t)(v110 + 4);
      v113 = *(_QWORD *)&v107[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v112 = *(_QWORD *)&v107[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v112);
      v114 = v113;
      v3 = v120;
      v123 = sub_100016940(v114, v112, (uint64_t *)v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v118, v110 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "%s - unregistered reminder notification timer", (uint8_t *)v110, 0xCu);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v110, -1, -1);

    }
    else
    {

    }
    goto LABEL_67;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v74 = type metadata accessor for Logger(0);
  sub_10001A9E8(v74, (uint64_t)qword_1011B7A18);
  v75 = v4;
  v76 = Logger.logObject.getter(v75);
  v77 = static os_log_type_t.default.getter(v76);
  if (os_log_type_enabled(v76, v77))
  {
    v118 = v76;
    v78 = (uint8_t *)swift_slowAlloc(12, -1);
    v117 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v125[0] = v117;
    v79 = v75;
    *(_DWORD *)v78 = 136315138;
    v80 = v78 + 12;
    v115 = v78 + 4;
    v116 = v78;
    v82 = *(_QWORD *)&v79[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v81 = *(_QWORD *)&v79[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v81);
    v123 = sub_100016940(v82, v81, (uint64_t *)v125);
    v83 = v80;
    v75 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v115, v83);

    swift_bridgeObjectRelease();
    v84 = v118;
    v85 = v116;
    _os_log_impl((void *)&_mh_execute_header, v118, v77, "%s - FindMy Publish is allowed", v116, 0xCu);
    v86 = v117;
    swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v85, -1, -1);

  }
  else
  {

  }
  __chkstk_darwin(v87);
  *(&v115 - 2) = (uint8_t *)v75;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0D290);
  v3 = v120;
  if ((v120[8] & 1) == 0 && *(_QWORD *)v120 == 6)
    goto LABEL_67;
  *(_QWORD *)v120 = 1;
  v3[8] = 0;
  v96 = (uint64_t)&v75[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate];
  swift_beginAccess(&v75[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastAvailabilityDate], v125, 0, 0);
  sub_10000F9B8(v96, (uint64_t)v11, (uint64_t *)&unk_1010EA690);
  v97 = type metadata accessor for Date(0);
  v98 = *(_QWORD *)(v97 - 8);
  v99 = v75;
  v100 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48))(v11, 1, v97);
  sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010EA690);
  if (v100 != 1)
  {
    v3 = v120;
LABEL_67:
    v13 = v119;
    LOBYTE(v18) = v121;
    goto LABEL_15;
  }
  static Date.trustedNow.getter((uint64_t)v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v9, 0, 1, v97);
  swift_beginAccess(v96, &v123, 33, 0);
  sub_100004084((uint64_t)v9, v96, (uint64_t *)&unk_1010EA690);
  swift_endAccess(&v123);
  *(_QWORD *)&v99[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts] = 1;
  sub_100C08074();
  LOBYTE(v18) = v121;
  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  v101 = qword_1011B7F60;
  type metadata accessor for Transaction(0);
  v102 = swift_allocObject(&unk_1010B4BA0, 25, 7);
  *(_QWORD *)(v102 + 16) = 0;
  *(_BYTE *)(v102 + 24) = 1;
  swift_retain();
  static Transaction.asyncTask(name:block:)("SecureLocationsLiteLocationAvailabilityAnalytics", 48, 2, &unk_101119488, v102);
  swift_release(v101);
  swift_release(v102);
  v13 = v119;
  v3 = v120;
LABEL_15:
  v34 = v3[8];
  if ((v18 & 1) != 0)
  {
    if (!v3[8])
      goto LABEL_26;
  }
  else
  {
    if (v13 != *(_QWORD *)v3)
      v34 = 1;
    if ((v34 & 1) != 0)
      goto LABEL_26;
  }
  if ((v122 & 1) != 0)
  {
LABEL_26:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v47 = type metadata accessor for Logger(0);
    sub_10001A9E8(v47, (uint64_t)qword_1011B7A18);
    v48 = v4;
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    v51 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      v52 = swift_slowAlloc(38, -1);
      LODWORD(v120) = v51;
      v53 = v52;
      v121 = swift_slowAlloc(96, -1);
      v123 = v121;
      *(_DWORD *)v53 = 136315906;
      v54 = v18;
      v55 = v13;
      v56 = v3;
      v57 = *(_QWORD *)&v48[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v58 = *(_QWORD *)&v48[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v58);
      *(_QWORD *)&v126 = sub_100016940(v57, v58, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 8, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      *(_QWORD *)&v126 = v55;
      BYTE8(v126) = v54;
      v59 = sub_10001A9A8((uint64_t *)&unk_101119478);
      v60 = String.init<A>(describing:)(&v126, v59);
      *(_QWORD *)&v126 = sub_100016940(v60, v61, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 8, v53 + 14, v53 + 22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 22) = 2080;
      v62 = v56[8];
      *(_QWORD *)&v126 = *(_QWORD *)v56;
      BYTE8(v126) = v62;
      v63 = String.init<A>(describing:)(&v126, v59);
      *(_QWORD *)&v126 = sub_100016940(v63, v64, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 8, v53 + 24, v53 + 32);

      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 32) = 1024;
      LODWORD(v126) = v122 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 4, v53 + 34, v53 + 38);
      _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v120, "%s - stateChange old %s new %s forceNotify %{BOOL}d", (uint8_t *)v53, 0x26u);
      v65 = v121;
      swift_arrayDestroy(v121, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

    }
    sub_100009528();
    return;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v35 = type metadata accessor for Logger(0);
  sub_10001A9E8(v35, (uint64_t)qword_1011B7A18);
  v36 = v4;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.debug.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v123 = v40;
    *(_DWORD *)v39 = 136315394;
    v41 = *(_QWORD *)&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v42 = *(_QWORD *)&v36[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v42);
    *(_QWORD *)&v126 = sub_100016940(v41, v42, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 8, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 12) = 2080;
    v43 = v3[8];
    *(_QWORD *)&v126 = *(_QWORD *)v3;
    BYTE8(v126) = v43;
    v44 = sub_10001A9A8((uint64_t *)&unk_101119478);
    v45 = String.init<A>(describing:)(&v126, v44);
    *(_QWORD *)&v126 = sub_100016940(v45, v46, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, (char *)&v126 + 8, v39 + 14, v39 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - no change in service state %s", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100C06914()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD v22[13];
  _OWORD v23[6];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v1 = v0;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10055531C);
  if (LOBYTE(v23[0]) == 1)
  {
    v2 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts;
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts];
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v4 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v4, &type metadata for SecureLocationsConfig);
    swift_release(v4);
    v28 = v22[10];
    v29 = v22[11];
    v30 = v22[12];
    v24 = v22[6];
    v25 = v22[7];
    v26 = v22[8];
    v27 = v22[9];
    v23[2] = v22[2];
    v23[3] = v22[3];
    v23[4] = v22[4];
    v23[5] = v22[5];
    v23[0] = v22[0];
    v23[1] = v22[1];
    sub_1003D09E0(v23);
    if (v3 < (uint64_t)v24)
      return 1;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
    v7 = v0;
    v15 = Logger.logObject.getter(v7);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v22[0] = v18;
      *(_DWORD *)v17 = 136315394;
      v19 = *(_QWORD *)&v7[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v20 = *(_QWORD *)&v7[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v20);
      v21 = sub_100016940(v19, v20, (uint64_t *)v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2048;
      v21 = *(_QWORD *)&v1[v2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v17 + 14, v17 + 22);

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - we have already shown %ld alerts", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      return 0;
    }

LABEL_16:
    return 0;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
  v7 = v0;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (!os_log_type_enabled(v8, v9))
  {

    goto LABEL_16;
  }
  v10 = (uint8_t *)swift_slowAlloc(12, -1);
  v11 = swift_slowAlloc(32, -1);
  *(_QWORD *)&v23[0] = v11;
  *(_DWORD *)v10 = 136315138;
  v12 = *(_QWORD *)&v7[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
  v13 = *(_QWORD *)&v7[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
  swift_bridgeObjectRetain(v13);
  *(_QWORD *)&v22[0] = sub_100016940(v12, v13, (uint64_t *)v23);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, (char *)v22 + 8, v10 + 4, v10 + 12);

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - canPublishLocation is false. Not showing alert", v10, 0xCu);
  swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v11, -1, -1);
  swift_slowDealloc(v10, -1, -1);

  return 0;
}

uint64_t sub_100C06D3C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  v11 = v0;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v25 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v17);
    v24 = sub_100016940(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - checkinReminderNotificationTimer", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  static DispatchQoS.default.getter();
  v18 = swift_allocObject(&unk_1010B4B28, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v11);
  v19 = swift_allocObject(&unk_1010B4B28, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v11);
  v20 = type metadata accessor for XPCActivity();
  swift_allocObject(v20, 112, 7);
  v21 = sub_100734F68(0xD000000000000045, (void *)0x8000000100EF4210, (uint64_t)v3, (uint64_t)sub_100C0D20C, v18, (uint64_t)sub_100C0D214, v19);
  swift_release(v18);
  swift_release(v19);
  v22 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer];
  *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer] = v21;
  return swift_release(v22);
}

void sub_100C07068(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueueSynchronizer);
    __chkstk_darwin(Strong);
    swift_retain();
    sub_10001A9A8(&qword_101106350);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0D278);
    swift_release(v6);

    v7 = v10;
    v8 = v11;
    v9 = v12;
  }
  else
  {
    v9 = 0;
    v7 = xmmword_100E2E3C0;
    v8 = 0uLL;
  }
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = v9;
}

int64x2_t sub_100C07158@<Q0>(int64x2_t *a1@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64x2_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[13];
  _OWORD v37[5];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int64x2_t *v46;

  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v4 = qword_1011B7A48;
  v5 = *(_QWORD *)(qword_1011B7A48 + 144);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v4, &type metadata for SecureLocationsConfig);
  swift_release(v4);
  v43 = v36[10];
  v44 = v36[11];
  v45 = v36[12];
  v39 = v36[6];
  v40 = v36[7];
  v41 = v36[8];
  v42 = v36[9];
  v37[2] = v36[2];
  v37[3] = v36[3];
  v37[4] = v36[4];
  v38 = v36[5];
  v37[0] = v36[0];
  v37[1] = v36[1];
  sub_1003D09E0(v37);
  if ((~*((_QWORD *)&v38 + 1) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*((double *)&v38 + 1) <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*((double *)&v38 + 1) < 9.22337204e18)
  {
    v5 = (uint64_t)*((double *)&v38 + 1);
    if (qword_1010EA198 == -1)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  swift_once(&qword_1010EA198, sub_100ACDE4C);
LABEL_7:
  sub_100ACDAE0(0xD000000000000022, 0x8000000100EF4260, (void *)qword_1011B7C08);
  v7 = &qword_1010EA000;
  if ((v8 & 1) == 0)
  {
    v9 = v6;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
    v11 = a1;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v46 = a1;
      v15 = v14;
      v33 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v36[0] = v33;
      *(_DWORD *)v15 = 136315394;
      v32 = v9;
      v16 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v17);
      v35 = sub_100016940(v16, v17, (uint64_t *)v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v15 + 4, v15 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2048;
      v9 = v32;
      v35 = v32;
      v7 = &qword_1010EA000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v15 + 14, v15 + 22);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - using overriden value for alert delay %ld", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      v18 = v15;
      a1 = v46;
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

    }
    v5 = v9;
  }
  v19 = *(uint64_t *)((char *)a1->i64 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts);
  v20 = v5 * v19;
  if ((unsigned __int128)(v5 * (__int128)v19) >> 64 == (v5 * v19) >> 63)
  {
    if (v7[19] == -1)
      goto LABEL_16;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_16:
  v21 = type metadata accessor for Logger(0);
  sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  v22 = a1;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v46 = a2;
    v26 = v25;
    v27 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v36[0] = v27;
    *(_DWORD *)v26 = 136315394;
    v34 = v20;
    v28 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v29 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v29);
    v35 = sub_100016940(v28, v29, (uint64_t *)v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v26 + 4, v26 + 12);

    v20 = v34;
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2048;
    v35 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v26 + 14, v26 + 22);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - returning xpc activity for reminder notification with delay %lld", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v30 = v26;
    a2 = v46;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

  }
  a2->i64[0] = 0;
  a2->i64[1] = v20;
  result = vdupq_n_s64(1uLL);
  a2[1] = result;
  a2[2].i64[0] = 514;
  return result;
}

void sub_100C07660(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Strong;
  void *v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t aBlock[5];
  _QWORD *v60;
  char v61[32];

  v57 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4 += 16;
  swift_beginAccess(a4, v61, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (!Strong)
  {
    Transaction.capture()();
    return;
  }
  v16 = (void *)Strong;
  v55 = a1;
  v56 = a2;
  v49 = v14;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v17 = type metadata accessor for Logger(0);
  sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
  v18 = v16;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v22 = v57;
  v53 = v8;
  v54 = v7;
  v51 = v11;
  v52 = v10;
  v50 = v12;
  if (v21)
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315394;
    v25 = *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v26 = *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v26);
    v58 = (_QWORD *)sub_100016940(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock, v23 + 4, v23 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    LOBYTE(v58) = v22;
    v27 = String.init<A>(describing:)(&v58, &type metadata for XPCActivity.State);
    v58 = (_QWORD *)sub_100016940(v27, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - state block fired %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  v30 = v55;
  v29 = v56;
  if (v22 == 3)
  {
    Transaction.capture()();
    sub_1007329F0();
LABEL_14:

    return;
  }
  if (v22 != 2)
  {
    Transaction.capture()();
    goto LABEL_14;
  }
  v31 = v18;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    aBlock[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = *(_QWORD *)&v31[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v37 = *(_QWORD *)&v31[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v37);
    v58 = (_QWORD *)sub_100016940(v36, v37, aBlock);
    v29 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock, v34 + 4, v34 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - publishReminder timer fired", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

  }
  v38 = v52;
  v39 = v49;
  v40 = (_QWORD *)swift_allocObject(&unk_1010B4B50, 40, 7);
  v40[2] = v29;
  v40[3] = v30;
  v40[4] = v31;
  aBlock[4] = (uint64_t)sub_100C0D250;
  v60 = v40;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_1010B4B68;
  v41 = _Block_copy(aBlock);
  v42 = v31;
  swift_retain();
  v43 = swift_retain();
  static DispatchQoS.unspecified.getter(v43);
  v58 = _swiftEmptyArrayStorage;
  v44 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v45 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v46 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v47 = v45;
  v48 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v47, v46, v54, v44);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v38, v41);
  _Block_release(v41);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v48);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);

  swift_release(v60);
}

BOOL sub_100C07BD4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];

  v6 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA140 != -1)
    swift_once(&qword_1010EA140, sub_100A3A528);
  if (sub_100C0C6E0(0x8000))
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
    v10 = a3;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v33 = a1;
      v15 = v14;
      v37[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v16 = *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v17 = *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v17);
      v35 = sub_100016940(v16, v17, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v13 + 4, v13 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - reminderNotification is already present. Not showing alert", v13, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v18 = (uint64_t)&a3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation];
    swift_beginAccess(&a3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation], v37, 0, 0);
    sub_10000F9B8(v18, (uint64_t)v8, &qword_101119450);
    v19 = type metadata accessor for SecureLocation(0);
    LODWORD(v18) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v8, 1, v19);
    sub_100004048((uint64_t)v8, &qword_101119450);
    if ((_DWORD)v18 == 1)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v20 = type metadata accessor for Logger(0);
      sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
      v21 = a3;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v33 = a2;
        v26 = v25;
        v35 = v25;
        *(_DWORD *)v24 = 136315138;
        v28 = *(_QWORD *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v27 = *(_QWORD *)&v21[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v27);
        v34 = sub_100016940(v28, v27, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v24 + 4, v24 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - no last published location to compare distance threshold", v24, 0xCu);
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v24, -1, -1);

      }
      else
      {

      }
      v30 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v30);
      *(&v32 - 2) = (uint64_t)v21;
      *((_BYTE *)&v32 - 8) = 0;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.postReminderNotification", 70, 2, sub_100C0DCC0, &v32 - 4, (char *)&type metadata for () + 8);
    }
    else
    {
      v29 = *(id *)&a3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold];
      CurrentLocationMonitor.requestLocation()();

    }
  }
  Transaction.capture()();
  return sub_100732A0C();
}

uint64_t sub_100C08074()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
  v8 = v0;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v20[0] = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = *(_QWORD *)&v8[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v14 = *(_QWORD *)&v8[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v14);
    v19 = sub_100016940(v13, v14, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - scheduling notification timer", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  v15 = *(_QWORD *)&v8[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer];
  v16 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v16);
  *(&v18 - 2) = (uint64_t)v8;
  *(&v18 - 1) = v15;
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.scheduleLiteLocationNotification", 78, 2, sub_100C0D1A4, &v18 - 4, (char *)&type metadata for () + 8);
  return swift_release(v15);
}

uint64_t sub_100C08324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;
  _QWORD *v24;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue);
  v13 = swift_allocObject(&unk_1010B4AD8, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a3;
  aBlock[4] = sub_100BD4214;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B4AF0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v24 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

uint64_t sub_100C08538(uint64_t a1, char *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v13 = swift_allocObject(&unk_1010B4920, 33, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  *(_BYTE *)(v13 + 32) = a3;
  aBlock[4] = sub_100C0AF78;
  v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B4938;
  v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(a2);
  v23 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v16, v17, v6, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v22);
}

void sub_100C0874C(uint64_t a1, void *a2, char a3)
{
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 aBlock;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[6];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  if ((sub_100C06914() & 1) == 0 && (a3 & 1) == 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7A18);
    v6 = a2;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v54[0] = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = *(_QWORD *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v12 = *(_QWORD *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v12);
      *(_QWORD *)&aBlock = sub_100016940(v11, v12, (uint64_t *)v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v9 + 4, v9 + 12);

      swift_bridgeObjectRelease();
      v13 = "%s - conditions not satisfied for posting user notification";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v13, v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
  v15 = a2;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v54[0] = v19;
    *(_DWORD *)v18 = 136315138;
    v21 = *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v20 = *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v20);
    *(_QWORD *)&aBlock = sub_100016940(v21, v20, (uint64_t *)v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - posting publish reminder notification", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  if (qword_1010EA140 != -1)
    swift_once(&qword_1010EA140, sub_100A3A528);
  sub_100C0CB50(0x8000u, 0, 0);
  v22 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts;
  v23 = *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts];
  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  v24 = qword_1011B7F60;
  type metadata accessor for Transaction(0);
  v25 = swift_allocObject(&unk_1010B4970, 25, 7);
  *(_QWORD *)(v25 + 16) = v23;
  *(_BYTE *)(v25 + 24) = 0;
  swift_retain();
  static Transaction.asyncTask(name:block:)("SecureLocationsLiteLocationAvailabilityAnalytics", 48, 2, &unk_101119458, v25);
  swift_release(v24);
  swift_release(v25);
  v26 = *(_QWORD *)&v15[v22];
  v27 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v15[v22] = v27;
    if (qword_1010EA0A8 == -1)
      goto LABEL_18;
  }
  swift_once(&qword_1010EA0A8, sub_10098F82C);
LABEL_18:
  v28 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v28, &type metadata for SecureLocationsConfig);
  swift_release(v28);
  v59 = v51;
  v60 = v52;
  v61 = v53;
  v55 = v47;
  v56 = v48;
  v57 = v49;
  v58 = v50;
  v54[2] = v43;
  v54[3] = v44;
  v54[4] = v45;
  v54[5] = v46;
  v54[0] = aBlock;
  v54[1] = v42;
  sub_1003D09E0(v54);
  if (v27 >= (uint64_t)v55)
  {
LABEL_27:
    Transaction.capture()();
    return;
  }
  v29 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer;
  v30 = *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer];
  if (!v30)
  {
LABEL_23:
    v6 = v15;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v10;
      *(_DWORD *)v9 = 136315138;
      v37 = *(_QWORD *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v38 = *(_QWORD *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v38);
      v39 = sub_100016940(v37, v38, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v9 + 4, v9 + 12);

      swift_bridgeObjectRelease();
      v13 = "%s - scheduled next reminder alert";
      goto LABEL_25;
    }
LABEL_26:

    goto LABEL_27;
  }
  v31 = *(NSObject **)(v30 + 16);
  v32 = swift_allocObject(&unk_1010B4998, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_1003D8448;
  *(_QWORD *)(v32 + 24) = v30;
  *(_QWORD *)&v43 = sub_10001D850;
  *((_QWORD *)&v43 + 1) = v32;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v42 = sub_10001D8B8;
  *((_QWORD *)&v42 + 1) = &unk_1010B49B0;
  v33 = _Block_copy(&aBlock);
  v34 = *((_QWORD *)&v43 + 1);
  swift_retain_n(v30, 2);
  swift_retain();
  swift_release(v34);
  dispatch_sync(v31, v33);
  _Block_release(v33);
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation(v32, "", 90, 53, 20, 1);
  swift_release_n(v30, 2);
  swift_release(v32);
  if ((v31 & 1) == 0)
  {
    v35 = *(_QWORD *)&v15[v29];
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 40);
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v35, v36, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      swift_release(v35);
    }
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_100C08E20(char a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[5];
  uint64_t v9;

  if ((a1 & 1) == 0)
    goto LABEL_4;
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_notificationTimer);
  if (!v2)
    goto LABEL_4;
  v3 = *(NSObject **)(v2 + 16);
  v4 = swift_allocObject(&unk_1010B4A38, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_1003D8448;
  *(_QWORD *)(v4 + 24) = v2;
  v8[4] = sub_10005CBA4;
  v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10001D8B8;
  v8[3] = &unk_1010B4A50;
  v5 = _Block_copy(v8);
  v6 = v9;
  swift_retain_n(v2, 2);
  swift_retain();
  swift_release(v6);
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v4, "", 90, 53, 20, 1);
  swift_release_n(v2, 2);
  result = swift_release(v4);
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_4:
    *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_cntProactiveAlerts) = 1;
    if (qword_1010EA140 != -1)
      swift_once(&qword_1010EA140, sub_100A3A528);
    return sub_100C0C4AC(0x8000);
  }
  return result;
}

id sub_100C08FB0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureLocationsStewieManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100C09134()
{
  return type metadata accessor for SecureLocationsStewieManager(0);
}

uint64_t type metadata accessor for SecureLocationsStewieManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1011192B8;
  if (!qword_1011192B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsStewieManager);
  return result;
}

void sub_100C09178(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[21];

  v7[0] = &unk_100E64DE0;
  v7[1] = &unk_100E64DE0;
  v7[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v7[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v7[4] = &unk_100E64DF8;
  v7[5] = &unk_100E64DF8;
  v7[6] = &unk_100E64E10;
  v7[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v7[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v7[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v7[10] = &unk_100E64E28;
  sub_100149C5C(319, (unint64_t *)&unk_1011192C8, type metadata accessor for SecureLocation);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7[11] = v4;
    v7[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v7[13] = &unk_100E64DF8;
    v7[14] = &unk_100E64DE0;
    sub_100149C5C(319, (unint64_t *)&qword_10110D930, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v6 <= 0x3F)
    {
      v7[15] = *(_QWORD *)(v5 - 8) + 64;
      v7[16] = (char *)&value witness table for Builtin.Int64 + 64;
      v7[17] = &unk_100E64DF8;
      v7[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v7[19] = v4;
      v7[20] = &unk_100E64E10;
      swift_updateClassMetadata2(a1, 256, 21, v7, a1 + 80);
    }
  }
}

void sub_100C09338(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  id v11;
  char *v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v10 = v1;
  v11 = a1;
  v12 = v10;
  v13 = v11;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v26 = v24;
    *(_DWORD *)v16 = 136315394;
    v18 = *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v19 = *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v19);
    v25 = sub_100016940(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2112;
    v25 = (uint64_t)v13;
    v20 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 14, v16 + 22);
    *v17 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - stateChanged %@", (uint8_t *)v16, 0x16u);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v17, 1, v21);
    swift_slowDealloc(v17, -1, -1);
    v22 = v24;
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
  sub_100C057A4(v13, 0);
}

void sub_100C09670(char a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)&v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v2 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie;
    v3[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = (a1 & 4) != 0;
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
  v13 = v3;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(18, -1);
    v34[1] = v12;
    v17 = v16;
    v18 = swift_slowAlloc(32, -1);
    v36 = v18;
    *(_DWORD *)v17 = 136315394;
    v19 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v20 = *(_QWORD *)&v13[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v20);
    v35 = sub_100016940(v19, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v35) = v3[v2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 4, v17 + 14, v17 + 18);

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - connectedServicesChanged: %{BOOL}d", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v21 = v3[v2];
  v22 = v13;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  v25 = os_log_type_enabled(v23, v24);
  if (v21 == 1)
  {
    if (v25)
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v36 = v27;
      *(_DWORD *)v26 = 136315138;
      v28 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v29 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v29);
      v35 = sub_100016940(v28, v29, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v26 + 4, v26 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - findMy is part of connected services. we can publish", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    sub_100BFE928();
  }
  else
  {
    if (v25)
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v36 = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v33 = *(_QWORD *)&v22[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v33);
      v35 = sub_100016940(v32, v33, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v30 + 4, v30 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - findMy is not connected", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

    }
    sub_100C02C90();
  }
}

uint64_t sub_100C09B54()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[2];

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v1 = type metadata accessor for Logger(0);
  sub_10001A9E8(v1, (uint64_t)qword_1011B7A18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12[0] = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v8);
    v11 = sub_100016940(v7, v8, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s - supportChanged notification ", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  __chkstk_darwin(v9);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100C0CEB8);
  return sub_10000B028((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
}

void sub_100C09D90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;
  _QWORD v7[6];

  if (a3)
  {
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold) == a1)
    {
      v5 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v5);
      v7[2] = v3;
      v7[3] = a3;
      v6 = a3;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.liteLocCheckDistanceMoved", 71, 2, sub_100C0AF18, v7, &type metadata for () + 1);

    }
  }
}

uint64_t sub_100C09E50(uint64_t a1, char *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[6];
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v13 = (_QWORD *)swift_allocObject(&unk_1010B48D0, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_100C0AF64;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B48E8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = a2;
  static DispatchQoS.unspecified.getter(a3);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_100C0A064(uint64_t a1, char *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  Class isa;
  id v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  _OWORD v42[13];
  _OWORD v43[7];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char v50[40];

  v5 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SecureLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (double *)((char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (uint64_t)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation];
  swift_beginAccess(&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_lastPublishedLocation], v50, 0, 0);
  sub_10000F9B8(v12, (uint64_t)v7, &qword_101119450);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100004048((uint64_t)v7, &qword_101119450);
    v13 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v13);
    *(&v38 - 2) = (uint64_t)a2;
    *((_BYTE *)&v38 - 8) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.postReminderNotification", 70, 2, sub_10074FEF0, &v38 - 4, &type metadata for () + 1);
  }
  else
  {
    sub_100750E30((uint64_t)v7, (uint64_t)v11);
    v15 = v11[2];
    v14 = v11[3];
    v17 = v11[7];
    v16 = v11[8];
    v19 = v11[4];
    v18 = v11[5];
    v20 = v11[6];
    v21 = objc_allocWithZone((Class)CLLocation);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v23 = objc_msgSend(v21, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", isa, v14, v15, v16, v18, v19, v17, v20);

    objc_msgSend(a3, "distanceFromLocation:", v23);
    v25 = v24;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v26 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v26, &type metadata for SecureLocationsConfig);
    swift_release();
    v47 = v42[10];
    v48 = v42[11];
    v49 = v42[12];
    v43[6] = v42[6];
    v44 = v42[7];
    v45 = v42[8];
    v46 = v42[9];
    v43[2] = v42[2];
    v43[3] = v42[3];
    v43[4] = v42[4];
    v43[5] = v42[5];
    v43[0] = v42[0];
    v43[1] = v42[1];
    sub_1003D09E0(v43);
    v27 = v44;
    if (*(double *)&v44 <= v25)
    {
      v36 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v36);
      *(&v38 - 2) = (uint64_t)a2;
      *((_BYTE *)&v38 - 8) = 0;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.postReminderNotification", 70, 2, sub_100C0DCC0, &v38 - 4, &type metadata for () + 1);
      v37 = *(id *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_locationMonitorDistanceThreshold];
      CurrentLocationMonitor.stopMonitor()();

    }
    else
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v28 = type metadata accessor for Logger(0);
      sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
      v29 = a2;
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(32, -1);
        v39 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v42[0] = v39;
        *(_DWORD *)v32 = 136315650;
        v40 = v23;
        v33 = *(_QWORD *)&v29[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v34 = *(_QWORD *)&v29[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v34);
        v41 = sub_100016940(v33, v34, (uint64_t *)v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v32 + 4, v32 + 12);

        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2048;
        v41 = *(_QWORD *)&v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v32 + 14, v32 + 22);
        *(_WORD *)(v32 + 22) = 2048;
        v41 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v32 + 24, v32 + 32);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - not posting publish reminder notification. distanceMoved %f is less than configThreshold %f", (uint8_t *)v32, 0x20u);
        v35 = v39;
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

      }
    }
    sub_1000126B0((uint64_t)v11, type metadata accessor for SecureLocation);
  }
  Transaction.capture()();
}

uint64_t sub_100C0A5AC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = String.utf8Data.getter(0xD00000000000002FLL, 0x8000000100EECC50);
  v2 = v1;
  v3 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v3);
  return sub_10001BC14(v0, v2);
}

uint64_t sub_100C0A628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for LocalizationUtility.Table(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizationUtility.Table.stewie(_:), v0);
  v4 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000022, 0x8000000100EF4130, v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_100C0A6EC()
{
  uint64_t result;

  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6D72616C41435058, 0xE800000000000000);
  qword_1011191E0 = result;
  return result;
}

unint64_t sub_100C0A758()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t result;

  v0 = type metadata accessor for XPCAlarm();
  v1 = (_QWORD *)swift_allocObject(v0, 48, 7);
  v1[2] = 0x6C7070612E6D6F63;
  v1[3] = 0xEF6D72616C612E65;
  v2 = sub_10001A9A8(&qword_1010FAAF0);
  v3 = swift_allocObject(v2, 20, 7);
  *(_DWORD *)(v3 + 16) = 0;
  v1[4] = v3;
  result = sub_1006BA74C((uint64_t)_swiftEmptyArrayStorage);
  v1[5] = result;
  qword_1011B7EF0 = (uint64_t)v1;
  return result;
}

uint64_t sub_100C0A7E0(void *a1, _QWORD *a2)
{
  const char *string;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[4];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (string)
  {
    v4 = String.init(cString:)(string);
    v6 = v5;
    v7 = a2[4];
    swift_bridgeObjectRetain(v5);
    v8 = sub_10001A9A8(&qword_101119498);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100C0D504, a2, v7, &type metadata for () + 1, v8);
    if (*(_QWORD *)(v35 + 16))
    {
      v9 = sub_100518DA0(v4, v6);
      if ((v10 & 1) != 0)
      {
        v33 = *(_OWORD *)(*(_QWORD *)(v35 + 56) + 16 * v9);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = swift_allocObject(&unk_1010B5050, 32, 7);
        *(_OWORD *)(v11 + 16) = v33;
        v12 = static os_log_type_t.default.getter(v11);
        if (qword_1010EA3E0 != -1)
          swift_once(&qword_1010EA3E0, sub_100C0A6EC);
        v13 = qword_1011191E0;
        if (os_log_type_enabled((os_log_t)qword_1011191E0, v12))
        {
          swift_bridgeObjectRetain_n(v6, 2);
          v14 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_QWORD *)&v33 = v11;
          v15 = swift_slowAlloc(32, -1);
          v35 = v15;
          *(_DWORD *)v14 = 136315138;
          swift_bridgeObjectRetain(v6);
          v34 = sub_100016940(v4, v6, &v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v14 + 4, v14 + 12);
          swift_bridgeObjectRelease_n(v6, 3);
          _os_log_impl((void *)&_mh_execute_header, v13, v12, "XPC Event Stream will run %s", v14, 0xCu);
          swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
          v16 = v15;
          v11 = v33;
          swift_slowDealloc(v16, -1, -1);
          swift_slowDealloc(v14, -1, -1);
        }
        v17 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v17);
        v32[2] = sub_100C0D520;
        v32[3] = v11;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.xpc.alarm", 54, 2, sub_100C0D550, v32, &type metadata for () + 1);
        sub_100C0AD0C(v4, v6);
        swift_bridgeObjectRelease();
        return swift_release();
      }
    }
    swift_bridgeObjectRelease();
    v19 = swift_bridgeObjectRelease();
    v20 = static os_log_type_t.default.getter(v19);
    if (qword_1010EA3E0 != -1)
      swift_once(&qword_1010EA3E0, sub_100C0A6EC);
    v21 = qword_1011191E0;
    v22 = v20;
    if (!os_log_type_enabled((os_log_t)qword_1011191E0, v20))
      return swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v6);
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v35 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(v6);
    v34 = sub_100016940(v4, v6, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "No registered event matching %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v25 = v24;
LABEL_17:
    swift_slowDealloc(v25, -1, -1);
    return swift_slowDealloc(v23, -1, -1);
  }
  v26 = static os_log_type_t.default.getter(0);
  if (qword_1010EA3E0 != -1)
    swift_once(&qword_1010EA3E0, sub_100C0A6EC);
  v27 = qword_1011191E0;
  v28 = v26;
  result = os_log_type_enabled((os_log_t)qword_1011191E0, v26);
  if ((result & 1) != 0)
  {
    swift_retain();
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v35 = v29;
    *(_DWORD *)v23 = 136315138;
    v30 = a2[2];
    v31 = a2[3];
    swift_bridgeObjectRetain(v31);
    v34 = sub_100016940(v30, v31, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v23 + 4, v23 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to determine event name for XPC %s", v23, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    v25 = v29;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_100C0AD0C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  os_log_type_t v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v5 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA3E0 != -1)
    swift_once(&qword_1010EA3E0, sub_100C0A6EC);
  v6 = qword_1011191E0;
  if (os_log_type_enabled((os_log_t)qword_1011191E0, v5))
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain(a2);
    v12 = sub_100016940(a1, a2, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "Canceling alarm: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  v9 = String.utf8CString.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  v10 = String.utf8CString.getter(a1, a2);
  xpc_set_event(v9 + 32, v10 + 32, 0);
  swift_release(v9);
  return swift_release(v10);
}

uint64_t sub_100C0AEC4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for XPCAlarm()
{
  return objc_opt_self(_TtC12searchpartyd8XPCAlarm);
}

uint64_t sub_100C0AF18(uint64_t a1)
{
  uint64_t v1;

  return sub_100C09E50(a1, *(char **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100C0AF30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_100C0AF64()
{
  uint64_t v0;

  sub_100C0A064(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100C0AF70()
{
  return sub_100C0D7EC(33);
}

void sub_100C0AF78()
{
  uint64_t v0;

  sub_100C0874C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

id sub_100C0AF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id result;
  void *v6;
  int wapiCapability;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v0 = type metadata accessor for LocalizationUtility.Table(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)MobileGestalt_get_current_device(v2);
  if (result)
  {
    v6 = result;
    wapiCapability = MobileGestalt_get_wapiCapability();

    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for LocalizationUtility.Table.stewie(_:), v0);
    v8 = "LITE_LOCATION_REMINDER_ALERT_BODY_WIFI";
    if (wapiCapability)
      v8 = "LITE_LOCATION_REMINDER_ALERT_BODY_WLAN";
    v9 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000026, (unint64_t)(v8 - 32) | 0x8000000000000000, v4);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    return (id)v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100C0B078(uint64_t a1)
{
  uint64_t found;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  NSString v7;
  NSString v8;
  NSString v9;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  Class isa;
  uint64_t v16;
  unint64_t v17;
  _OWORD v18[2];
  __int128 v19;
  void *v20;

  found = type metadata accessor for NotifyWhenFoundUserNotification(0);
  __chkstk_darwin(found);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v4, type metadata accessor for NotifyWhenFoundUserNotification);
  v5 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  objc_msgSend(v5, "setDefaultActionURL:", 0);
  v6 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v5, "setSound:", v6);

  LODWORD(v6) = v4[1];
  sub_100A3A9E0(v4[1]);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setCategoryIdentifier:", v7);

  swift_bridgeObjectRetain(*(_QWORD *)&v4[*(int *)(found + 28) + 8]);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setTitle:", v8);

  sub_100DFEDFC();
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setBody:", v9);

  if ((_DWORD)v6 == 67)
    v10 = 1;
  else
    v10 = 2;
  objc_msgSend(v5, "setInterruptionLevel:", v10);
  v11 = sub_100DFEF6C();
  v20 = &type metadata for Bool;
  LOBYTE(v19) = 1;
  sub_10010F90C(&v19, v18);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
  v17 = v11;
  sub_10010A7E4(v18, 0xD000000000000023, 0x8000000100EECE00, isUniquelyReferenced_nonNull_native);
  v13 = v17;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v13);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setUserInfo:", isa);

  objc_msgSend(v5, "setShouldIgnoreDoNotDisturb:", 0);
  objc_msgSend(v5, "setShouldUseRequestIdentifierForDismissalSync:", 0);
  sub_1000126B0((uint64_t)v4, type metadata accessor for NotifyWhenFoundUserNotification);
  return v5;
}

uint64_t sub_100C0B334(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v10[6];
  __int128 v11[2];
  _QWORD v12[5];

  v12[3] = type metadata accessor for UnwantedTrackingUserNotification(0);
  v12[4] = &off_10105AD10;
  v2 = sub_100018F08(v12);
  sub_10005972C(a1, (uint64_t)v2, type metadata accessor for UnwantedTrackingUserNotification);
  v3 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, "initWithBundleIdentifier:", v4);

  sub_100030784((uint64_t)v12, (uint64_t)v11);
  v6 = swift_allocObject(&unk_1010B5460, 64, 7);
  sub_10000F9FC(v11, v6 + 16);
  *(_QWORD *)(v6 + 56) = v5;
  v10[4] = sub_100C0DC1C;
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100BFAAE8;
  v10[3] = &unk_1010B5478;
  v7 = _Block_copy(v10);
  v8 = v5;
  swift_release();
  objc_msgSend(v8, "getDeliveredNotificationsWithCompletionHandler:", v7);
  _Block_release(v7);

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

id sub_100C0B4CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  id v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  int v19;
  NSString v20;
  NSString v21;
  NSString v22;
  uint64_t v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  Class isa;
  uint64_t v29;
  unint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  void *v33;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UnwantedTrackingUserNotification(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v7, v8);
  v9 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  *(_QWORD *)&v32 = 0;
  *((_QWORD *)&v32 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v10 = swift_bridgeObjectRelease();
  *(_QWORD *)&v32 = 0xD000000000000026;
  *((_QWORD *)&v32 + 1) = 0x8000000100EC5AE0;
  v11._countAndFlagsBits = UUID.uuidString.getter(v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  URL.init(string:)(v32, *((_QWORD *)&v32 + 1));
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v4, 1, v12) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v4, v12);
  }
  objc_msgSend(v9, "setDefaultActionURL:", v15);

  v17 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v9, "setSound:", v17);

  v18 = *(int *)(v5 + 24);
  v19 = v7[v18];
  sub_100A3A9E0(v7[v18]);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setCategoryIdentifier:", v20);

  sub_10015E480();
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setTitle:", v21);

  sub_10015EC58();
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setBody:", v22);

  if (v19 == 67)
    v23 = 1;
  else
    v23 = 2;
  objc_msgSend(v9, "setInterruptionLevel:", v23);
  v24 = sub_1006B8B10((uint64_t)_swiftEmptyArrayStorage);
  v33 = &type metadata for Bool;
  LOBYTE(v32) = 1;
  sub_10010F90C(&v32, v31);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  v30 = v24;
  sub_10010A7E4(v31, 0xD000000000000023, 0x8000000100EECE00, isUniquelyReferenced_nonNull_native);
  v26 = v30;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v26);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setUserInfo:", isa);

  objc_msgSend(v9, "setShouldIgnoreDoNotDisturb:", 1);
  objc_msgSend(v9, "setShouldUseRequestIdentifierForDismissalSync:", 1);
  sub_1000126B0((uint64_t)v7, type metadata accessor for UnwantedTrackingUserNotification);
  return v9;
}

id sub_100C0B880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  int v7;
  NSString v8;
  NSString v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  Class isa;
  uint64_t v21;
  unint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  void *v25;
  _BYTE v26[80];

  v2 = type metadata accessor for PlaySoundUserNotification(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v4, type metadata accessor for PlaySoundUserNotification);
  v5 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  objc_msgSend(v5, "setDefaultActionURL:", 0);
  v6 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v5, "setSound:", v6);

  v7 = v4[1];
  sub_100A3A9E0(v4[1]);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setCategoryIdentifier:", v8);

  sub_10060CCC8();
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setTitle:", v9);

  sub_10060CE34();
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setBody:", v10);

  if (v7 == 67)
    v11 = 1;
  else
    v11 = 2;
  objc_msgSend(v5, "setInterruptionLevel:", v11);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v12, v26);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 1684632949;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v14 = UUID.uuidString.getter(inited);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v14;
  *(_QWORD *)(inited + 56) = v15;
  v16 = sub_1006B8B10(inited);
  v25 = &type metadata for Bool;
  LOBYTE(v24) = 1;
  sub_10010F90C(&v24, v23);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  v22 = v16;
  sub_10010A7E4(v23, 0xD000000000000023, 0x8000000100EECE00, isUniquelyReferenced_nonNull_native);
  v18 = v22;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v18);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, "setUserInfo:", isa);

  objc_msgSend(v5, "setShouldIgnoreDoNotDisturb:", 0);
  objc_msgSend(v5, "setShouldUseRequestIdentifierForDismissalSync:", 0);
  sub_1000126B0((uint64_t)v4, type metadata accessor for PlaySoundUserNotification);
  return v5;
}

id sub_100C0BB7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  id v9;
  id v10;
  char v11;
  NSString v12;
  uint64_t v13;
  uint64_t inited;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  Class isa;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  _OWORD v54[2];
  __int128 v55;
  void *v56;
  char v57[80];
  char v58[48];
  char v59[8];

  v50 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ItemShareRequestReceivedUserNotification(0);
  v51 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v7, v8);
  v9 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  objc_msgSend(v9, "setDefaultActionURL:", 0);
  v10 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v9, "setSound:", v10);

  v11 = v7[1];
  v47 = v7;
  sub_100A3A9E0(v11);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setCategoryIdentifier:", v12);

  v13 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v13, v59);
  v52 = xmmword_100E22B00;
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v15 = &v7[*(int *)(v5 + 32)];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)(inited + 32) = *(_QWORD *)v15;
  *(_QWORD *)(inited + 40) = v16;
  v17 = enum case for LocalizationUtility.Table.itemSharing(_:);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v18 = v50;
  v49(v4, enum case for LocalizationUtility.Table.itemSharing(_:), v50);
  swift_bridgeObjectRetain(v16);
  v19 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000027, 0x8000000100ECEE00, v4);
  v21 = v20;
  v48 = *(void (**)(char *, uint64_t))(v2 + 8);
  v48(v4, v18);
  v22 = sub_1007EDC10(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  String.init(format:arguments:)(v19, v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setTitle:", v23);

  v24 = swift_initStackObject(v13, v58);
  *(_OWORD *)(v24 + 16) = v52;
  v25 = v51;
  v26 = (uint64_t)v47;
  v27 = &v47[*(int *)(v51 + 28)];
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)(v24 + 32) = *(_QWORD *)v27;
  *(_QWORD *)(v24 + 40) = v28;
  if (*(_BYTE *)(v26 + *(int *)(v25 + 36)))
    v29 = 0xD000000000000031;
  else
    v29 = 0xD00000000000002FLL;
  if (*(_BYTE *)(v26 + *(int *)(v25 + 36)))
    v30 = 0x8000000100ECEE60;
  else
    v30 = 0x8000000100ECEE30;
  v49(v4, v17, v18);
  swift_bridgeObjectRetain(v28);
  v31 = static LocalizationUtility.localizedString(key:table:)(v29, v30, v4);
  v33 = v32;
  swift_bridgeObjectRelease();
  v48(v4, v18);
  v34 = sub_1007EDC10(v24);
  swift_setDeallocating(v24);
  swift_arrayDestroy(v24 + 32, *(_QWORD *)(v24 + 16), &type metadata for String);
  String.init(format:arguments:)(v31, v33, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setBody:", v35);

  if (*(_BYTE *)(v26 + 1) == 67)
    v36 = 1;
  else
    v36 = 2;
  objc_msgSend(v9, "setInterruptionLevel:", v36);
  v37 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  v38 = swift_initStackObject(v37, v57);
  *(_OWORD *)(v38 + 16) = v52;
  *(_QWORD *)(v38 + 32) = 0x6564496572616873;
  *(_QWORD *)(v38 + 40) = 0xEF7265696669746ELL;
  v39 = UUID.uuidString.getter(v38);
  *(_QWORD *)(v38 + 72) = &type metadata for String;
  *(_QWORD *)(v38 + 48) = v39;
  *(_QWORD *)(v38 + 56) = v40;
  v41 = sub_1006B8B10(v38);
  v56 = &type metadata for Bool;
  LOBYTE(v55) = 1;
  sub_10010F90C(&v55, v54);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v41);
  v53 = v41;
  sub_10010A7E4(v54, 0xD000000000000023, 0x8000000100EECE00, isUniquelyReferenced_nonNull_native);
  v43 = v53;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v43);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setUserInfo:", isa);

  objc_msgSend(v9, "setShouldIgnoreDoNotDisturb:", 0);
  objc_msgSend(v9, "setShouldUseRequestIdentifierForDismissalSync:", 0);
  sub_1000126B0(v26, type metadata accessor for ItemShareRequestReceivedUserNotification);
  return v9;
}

id sub_100C0C12C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  int v11;
  NSString v12;
  NSString v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  Class isa;
  unint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  void *v33;
  _BYTE v34[88];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LowBatteryUserNotification(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v8, type metadata accessor for LowBatteryUserNotification);
  v9 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  objc_msgSend(v9, "setDefaultActionURL:", 0);
  v10 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v9, "setSound:", v10);

  v11 = v8[1];
  sub_100A3A9E0(v8[1]);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setCategoryIdentifier:", v12);

  sub_100CA3018();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setTitle:", v13);

  sub_100CA3188();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setBody:", v14);

  if (v11 == 67)
    v15 = 1;
  else
    v15 = 2;
  objc_msgSend(v9, "setInterruptionLevel:", v15);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v16, v34);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 1684632949;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v18 = &v8[*(int *)(v6 + 28)];
  v20 = *((_QWORD *)v18 + 3);
  v19 = *((_QWORD *)v18 + 4);
  sub_10001AA44(v18, v20);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 8) + 32))(v20);
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v22;
  *(_QWORD *)(inited + 56) = v24;
  v25 = sub_1006B8B10(inited);
  v33 = &type metadata for Bool;
  LOBYTE(v32) = 1;
  sub_10010F90C(&v32, v31);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
  v30 = v25;
  sub_10010A7E4(v31, 0xD000000000000023, 0x8000000100EECE00, isUniquelyReferenced_nonNull_native);
  v27 = v30;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v27);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, "setUserInfo:", isa);

  objc_msgSend(v9, "setShouldIgnoreDoNotDisturb:", 0);
  objc_msgSend(v9, "setShouldUseRequestIdentifierForDismissalSync:", 0);
  sub_1000126B0((uint64_t)v8, type metadata accessor for LowBatteryUserNotification);
  return v9;
}

uint64_t sub_100C0C4AC(__int16 a1)
{
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v9[5];
  uint64_t v10;
  __int128 v11[2];
  _QWORD v12[5];

  v12[3] = &type metadata for SecureLocationsStewiePublishReminderNotification;
  v12[4] = &off_1010B5520;
  LOWORD(v12[0]) = a1;
  v1 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, "initWithBundleIdentifier:", v2);

  sub_100030784((uint64_t)v12, (uint64_t)v11);
  v4 = swift_allocObject(&unk_1010B4A88, 64, 7);
  sub_10000F9FC(v11, v4 + 16);
  *(_QWORD *)(v4 + 56) = v3;
  v9[4] = sub_100650B8C;
  v10 = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100BFAAE8;
  v9[3] = &unk_1010B4AA0;
  v5 = _Block_copy(v9);
  v6 = v10;
  v7 = v3;
  swift_release(v6);
  objc_msgSend(v7, "getDeliveredNotificationsWithCompletionHandler:", v5);
  _Block_release(v5);

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

id sub_100C0C624()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v8 = 0;
  v2 = objc_msgSend(v0, "initWithData:error:", isa, &v8);

  v3 = v8;
  if (v2)
  {
    v4 = v8;
  }
  else
  {
    v5 = v8;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v6);
  }
  return v2;
}

BOOL sub_100C0C6E0(__int16 a1)
{
  id v1;
  NSString v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  _QWORD v11[5];

  v11[3] = &type metadata for SecureLocationsStewiePublishReminderNotification;
  v11[4] = &off_1010B5520;
  LOWORD(v11[0]) = a1;
  sub_10001AA44(v11, (uint64_t)&type metadata for SecureLocationsStewiePublishReminderNotification);
  v1 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, "initWithBundleIdentifier:", v2);

  v4 = objc_msgSend(v3, "deliveredNotifications");
  v5 = sub_10000F4A0(0, (unint64_t *)&qword_101119470, UNNotification_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v10[2] = v11;
  v7 = (uint64_t)sub_10008BE70(sub_100C0D25C, v10, v6);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 >= 0)
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    v8 = _CocoaArrayWrapper.endIndex.getter(v7);
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
  return v8 != 0;
}

id sub_100C0C874(unsigned __int8 a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  NSString v9;
  NSString v10;
  NSString v11;
  uint64_t v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  Class isa;
  uint64_t v18;
  unint64_t v19;
  _OWORD v20[2];
  __int128 v21;
  void *v22;

  v2 = a1;
  v3 = type metadata accessor for LocalizationUtility.Table(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  objc_msgSend(v7, "setDefaultActionURL:", 0);
  v8 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v7, "setSound:", v8);

  sub_100A3A9E0(a1);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, "setCategoryIdentifier:", v9);

  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizationUtility.Table.stewie(_:), v3);
  static LocalizationUtility.localizedString(key:table:)(0xD000000000000022, 0x8000000100EF4130, v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, "setTitle:", v10);

  sub_100C0AF84();
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, "setBody:", v11);

  if (v2 == 67)
    v12 = 1;
  else
    v12 = 2;
  objc_msgSend(v7, "setInterruptionLevel:", v12);
  v13 = sub_1006B8B10((uint64_t)_swiftEmptyArrayStorage);
  v22 = &type metadata for Bool;
  LOBYTE(v21) = 1;
  sub_10010F90C(&v21, v20);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
  v19 = v13;
  sub_10010A7E4(v20, 0xD000000000000023, 0x8000000100EECE00, isUniquelyReferenced_nonNull_native);
  v15 = v19;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v15);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, "setUserInfo:", isa);

  objc_msgSend(v7, "setShouldIgnoreDoNotDisturb:", 0);
  objc_msgSend(v7, "setShouldUseRequestIdentifierForDismissalSync:", 0);
  return v7;
}

uint64_t sub_100C0CB50(unsigned int a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unsigned __int8 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSString v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void **aBlock;
  uint64_t v31;
  void (*v32)(uint64_t, void *);
  void *v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  __int128 v36[2];
  _QWORD v37[5];

  v29 = a3;
  v4 = a1;
  v5 = BYTE1(a1);
  v6 = a1 >> 8;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[3] = &type metadata for SecureLocationsStewiePublishReminderNotification;
  v37[4] = &off_1010B5520;
  LOBYTE(v37[0]) = v4;
  BYTE1(v37[0]) = v6;
  v11 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, "initWithBundleIdentifier:", v12);

  v14 = sub_100C0C874(v5);
  v15 = String.utf8Data.getter(0xD00000000000002FLL, 0x8000000100EECC50);
  v17 = v16;
  aBlock = (void **)v15;
  v31 = v16;
  v18 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v18);
  v19 = sub_10001BC14(v15, v17);
  UUID.uuidString.getter(v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v20 = v14;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v21, v20, 0, 7);

  sub_100030784((uint64_t)v37, (uint64_t)v36);
  v23 = swift_allocObject(&unk_1010B49E8, 72, 7);
  sub_10000F9FC(v36, v23 + 16);
  v24 = v29;
  *(_QWORD *)(v23 + 56) = a2;
  *(_QWORD *)(v23 + 64) = v24;
  v34 = sub_100216F78;
  v35 = v23;
  aBlock = _NSConcreteStackBlock;
  v31 = 1107296256;
  v32 = sub_100555E2C;
  v33 = &unk_1010B4A00;
  v25 = _Block_copy(&aBlock);
  v26 = v35;
  sub_10001D898(a2, v24);
  swift_release(v26);
  objc_msgSend(v13, "addNotificationRequest:withCompletionHandler:", v22, v25);

  _Block_release(v25);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
}

uint64_t sub_100C0CE10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100C0CE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10111AFAC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_100C4B588(v2, v3);
}

uint64_t sub_100C0CE74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100C0CE84()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject(v0, 72, 7);
}

void sub_100C0CEB8()
{
  uint64_t v0;

  sub_100BFB3B0(*(_BYTE **)(v0 + 16));
}

void sub_100C0CED0(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)&v1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v10 = v1;
  swift_unknownObjectRetain_n(a1, 2);
  v11 = v10;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v22 = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v17 = *(_QWORD *)&v11[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v17);
    v21 = sub_100016940(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v21 = a1;
    swift_unknownObjectRetain(a1);
    v18 = sub_10001A9A8(&qword_101119468);
    v19 = String.init<A>(describing:)(&v21, v18);
    v21 = sub_100016940(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 14, v14 + 22);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - Anomalous - we are not expecting to receive any message %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
  }
}

uint64_t sub_100C0D190()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100C0D1A4(uint64_t a1)
{
  uint64_t v1;

  return sub_100C08324(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100C0D1BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100C0D1E8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100C0D20C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100C07068(v1, a1);
}

void sub_100C0D214(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  sub_100C07660(a1, a2, a3, v3);
}

uint64_t sub_100C0D21C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

BOOL sub_100C0D250()
{
  uint64_t v0;

  return sub_100C07BD4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_100C0D25C(id *a1)
{
  uint64_t v1;

  return sub_100A3AB54(a1, *(_QWORD **)(v1 + 16)) & 1;
}

double sub_100C0D278@<D0>(int64x2_t *a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_100C07158((int64x2_t *)*(_QWORD *)(v1 + 16), a1).u64[0];
  return result;
}

uint64_t sub_100C0D290()
{
  uint64_t v0;

  return sub_100C02738(*(void **)(v0 + 16));
}

uint64_t sub_100C0D2A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_100C0D2BC()
{
  uint64_t v0;

  sub_100C0518C(*(_BYTE **)(v0 + 16), *(void (**)(_QWORD, _QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100C0D2CC()
{
  uint64_t v0;

  return sub_100C049E4(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100C0D2D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(0, 0);
}

uint64_t sub_100C0D300()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100C0D324()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), 0);
}

uint64_t sub_100C0D354()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100C0D388()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100C0D3AC(char a1)
{
  uint64_t v1;

  sub_100C045E8(a1, *(void **)(v1 + 16));
}

uint64_t sub_100C0D3B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100C0D3D8()
{
  uint64_t v0;

  sub_100C04920(*(void (**)(void *))(v0 + 16));
}

uint64_t sub_100C0D3F0()
{
  return sub_100C0D780((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100C0D3FC()
{
  uint64_t v0;

  return sub_100C04018(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100C0D408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, uint64_t *);
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t *, uint64_t *))(v2 + 16);
  v5 = a2;
  v6 = a1;
  return v3(&v6, &v5);
}

uint64_t sub_100C0D43C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_errorRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100C0D470()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_100C0D49C()
{
  uint64_t v0;

  sub_100C03BA0(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100C0D4A8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

void sub_100C0D4D0(uint64_t a1)
{
  uint64_t v1;

  sub_100C015F4(a1, v1);
}

uint64_t sub_100C0D4D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100C0D4FC(void *a1)
{
  uint64_t v1;

  return sub_100C0A7E0(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100C0D504@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100C0D520(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_100C0D550()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100C0D578(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100C0D59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

void sub_100C0D5D8()
{
  uint64_t v0;

  sub_100C01830(*(void **)(v0 + 16));
}

uint64_t sub_100C0D5E0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 24), v1);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100C0D61C()
{
  uint64_t v0;

  sub_100BFF8B8(*(char **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100C0D628()
{
  return sub_100C0D7EC(32);
}

void sub_100C0D630(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100C0045C(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_100C0D638()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100C0D66C()
{
  void **v0;

  return sub_100C00864(v0[2], v0[3], v0[4]);
}

uint64_t sub_100C0D678()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100C0D69C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_BYTE *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_10111AFDC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_100C4B120(v2, v4, v3);
}

uint64_t sub_100C0D6FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_BYTE *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_10111AFDC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004C28;
  return sub_100C4B120(v2, v4, v3);
}

uint64_t sub_100C0D75C()
{
  return sub_100C0D780((void (*)(_QWORD))&_swift_release);
}

void sub_100C0D768()
{
  uint64_t v0;

  sub_100BFD16C(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100C0D774()
{
  return sub_100C0D780((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100C0D780(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

void sub_100C0D7C0(uint64_t a1)
{
  uint64_t v1;

  sub_100BFD688(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100C0D7CC(uint64_t a1)
{
  uint64_t v1;

  return sub_100BFF090(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100C0D7E4()
{
  return sub_100C0D7EC(32);
}

uint64_t sub_100C0D7EC(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, a1, 7);
}

void sub_100C0D824(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100BFF1D8(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_100C0D82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SecureLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 52);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

void sub_100C0D8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  type metadata accessor for SecureLocation(0);
  sub_1004456EC(a1, a2, *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100C0D920(uint64_t a1)
{
  uint64_t v1;

  return sub_100BFE08C(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100C0D938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SecureLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_release();
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 52);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

void sub_100C0D9E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SecureLocation(0) - 8) + 80);
  sub_100BFE2FC(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_100C0DA14(uint64_t a1)
{
  uint64_t v1;

  return sub_100BFC338(a1, *(char **)(v1 + 16));
}

void sub_100C0DA30()
{
  uint64_t v0;

  sub_100BFC544(*(char **)(v0 + 16), *(id *)(v0 + 24));
}

void sub_100C0DA3C(uint64_t a1)
{
  uint64_t v1;

  sub_100BFCC88(a1, *(void **)(v1 + 16), *(uint64_t **)(v1 + 24));
}

void sub_100C0DA44(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_100BFBC0C(a1, *(void **)(v1 + 16));
}

uint64_t sub_100C0DA50()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t getEnumTagSinglePayload for SecureLocationsStewiePublishReminderNotification(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsStewiePublishReminderNotification(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100C0DB5C + 4 * byte_100E64D6F[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_100C0DB90 + 4 * byte_100E64D6A[v4]))();
}

uint64_t sub_100C0DB90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100C0DB98(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100C0DBA0);
  return result;
}

uint64_t sub_100C0DBAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100C0DBB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100C0DBB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100C0DBC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsStewiePublishReminderNotification()
{
  return &type metadata for SecureLocationsStewiePublishReminderNotification;
}

void sub_100C0DBDC()
{
  sub_100C0CEB8();
}

uint64_t sub_100C0DBF0()
{
  return sub_100C0D290();
}

uint64_t sub_100C0DC04@<X0>(_QWORD *a1@<X8>)
{
  return sub_100C0D504(a1);
}

uint64_t sub_100C0DCC0(uint64_t a1)
{
  return sub_10074FEF0(a1);
}

uint64_t sub_100C0DCD4(uint64_t a1)
{
  return sub_10001D8D8(a1);
}

uint64_t sub_100C0DCE8(uint64_t a1)
{
  return sub_100555364(a1);
}

void sub_100C0DD78(_BYTE *a1@<X8>)
{
  sub_10055531C(a1);
}

uint64_t sub_100C0DD90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002E062C();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100C0DDB8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011195C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100C10878();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys, &type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys, v11, v9, v10);
  v20 = *v3;
  HIBYTE(v19) = 0;
  v12 = sub_10001A9A8(&qword_101103CB8);
  v13 = sub_1006EA33C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, (char *)&v19 + 7, v5, v12, v13);
  if (!v2)
  {
    v14 = v3[1];
    v15 = v3[2];
    BYTE6(v19) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, (char *)&v19 + 6, v5);
    v16 = v3[3];
    v17 = v3[4];
    BYTE5(v19) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, (char *)&v19 + 5, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100C0DF18(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v7 = sub_10001A9A8(&qword_101119548);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_100C102E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys, &type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys, v13, v11, v12);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v7);
  if (!v3)
  {
    v18 = a3;
    v19 = 1;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v15 = sub_100365CCC((unint64_t *)&qword_1010F19E0, (uint64_t *)&unk_1010FF7C0, (uint64_t (*)(void))sub_100036A58, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v7, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100C0E078()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6449746E65696C63;
  if (*v0 != 1)
    v1 = 0x41747865746E6F63;
  if (*v0)
    return v1;
  else
    return 0x53776F6C6C616873;
}

uint64_t sub_100C0E0E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100C0F938(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100C0E104(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10878();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100C0E12C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10878();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100C0E154(_QWORD *a1)
{
  return sub_100C0DDB8(a1);
}

uint64_t sub_100C0E168()
{
  _BYTE *v0;

  if (*v0)
    return 0x76654464656E776FLL;
  else
    return 0x6570795479656BLL;
}

uint64_t sub_100C0E1B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100C0FAB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100C0E1D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C102E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100C0E1FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C102E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100C0E224(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100C0DF18(a1, *v1, v1[1]);
}

uint64_t sub_100C0E23C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  _OWORD v19[2];
  uint64_t v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101119518);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100C10218();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PencilSecureLocationFetchData.CodingKeys, &type metadata for PencilSecureLocationFetchData.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v19[0] = *(_OWORD *)v3;
  v19[1] = v12;
  v20 = *(_QWORD *)(v3 + 32);
  v18 = 0;
  v13 = sub_100C1025C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v18, v5, &type metadata for PencilSecureLocationFetchData.ClientContext, v13);
  if (!v2)
  {
    *(_QWORD *)&v19[0] = *(_QWORD *)(v3 + 40);
    v18 = 1;
    v14 = sub_10001A9A8(&qword_101119530);
    v15 = sub_100365CCC(&qword_101119538, &qword_101119530, (uint64_t (*)(void))sub_100C102A0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100C0E3B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_10001A9A8(&qword_101119618);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100C10F80();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncodedPayloadResponse.CodingKeys, &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v21[1] = a3;
  v22 = 0;
  v15 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v15);
  if (!v4)
  {
    v21[0] = v20;
    v22 = 1;
    v16 = sub_10001A9A8(&qword_1010F93F0);
    v17 = sub_100C10FC4(&qword_1010F9418, &qword_1010F92A0, byte_100E3986C, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100C0E530()
{
  _BYTE *v0;

  if (*v0)
    return 0x6863746566;
  else
    return 0x6F43746E65696C63;
}

uint64_t sub_100C0E574@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100C0FBC4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100C0E598(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10218();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100C0E5C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10218();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100C0E5E8(_QWORD *a1)
{
  return sub_100C0E23C(a1);
}

uint64_t sub_100C0E5FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C107F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100C0E624(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C107F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100C0E64C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __int16 v6;

  result = sub_100C0FCD0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_BYTE *)(a2 + 17) = HIBYTE(v6) & 1;
  }
  return result;
}

uint64_t sub_100C0E684()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x65566769666E6F63;
}

uint64_t sub_100C0E6D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100C0FEFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100C0E6F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10190();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100C0E71C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10190();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100C0E744@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  result = sub_100C1000C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
    *(_BYTE *)(a2 + 25) = HIBYTE(v7) & 1;
  }
  return result;
}

uint64_t sub_100C0E780()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F697461636F6CLL;
  else
    return 25705;
}

uint64_t sub_100C0E7B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100C10C80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100C0E7DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10F80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100C0E804(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100C10F80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100C0E82C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100C10D70(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100C0E858(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100C0E3B4(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100C0E874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v8 = type metadata accessor for HashAlgorithm(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  __chkstk_darwin(v8);
  v47 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v46 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  v12 = sub_10001A9A8(&qword_1011194E8);
  v41 = swift_allocObject(v12, 48, 7);
  *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
  v13 = *(_QWORD *)(a3 + 16);
  if (v13)
  {
    v38 = a1;
    v39 = a2;
    v40 = a4;
    v53 = _swiftEmptyArrayStorage;
    sub_10009A92C(0, v13, 0);
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v37[1] = a3;
    v15 = a3 + v14;
    v16 = *(_QWORD *)(v10 + 72);
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v45 = v16;
    v43 = enum case for HashAlgorithm.sha256(_:);
    v17 = v46;
    v18 = v48;
    v19 = v49;
    do
    {
      v20 = v44(v17, v15, v18);
      v21 = UUID.data.getter(v20);
      v23 = v22;
      v24 = v10;
      v25 = v47;
      v26 = v50;
      (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v47, v43, v50);
      v27 = Data.hash(algorithm:)(v25, v21, v23);
      v51 = v28;
      v52 = v27;
      sub_10001BC14(v21, v23);
      v29 = v25;
      v10 = v24;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v26);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v17, v18);
      v30 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
      {
        sub_10009A92C(0, v30[2] + 1, 1);
        v30 = v53;
      }
      v32 = v30[2];
      v31 = v30[3];
      if (v32 >= v31 >> 1)
      {
        sub_10009A92C(v31 > 1, v32 + 1, 1);
        v30 = v53;
      }
      v30[2] = v32 + 1;
      v33 = &v30[2 * v32];
      v34 = v51;
      v33[4] = v52;
      v33[5] = v34;
      v15 += v45;
      --v13;
    }
    while (v13);
    result = swift_bridgeObjectRelease();
    a2 = v39;
    a4 = v40;
    a1 = v38;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v30 = _swiftEmptyArrayStorage;
  }
  v36 = v41;
  *(_QWORD *)(v41 + 32) = 1;
  *(_QWORD *)(v36 + 40) = v30;
  *(_QWORD *)a4 = v42;
  *(_QWORD *)(a4 + 8) = a1;
  *(_QWORD *)(a4 + 16) = a2;
  strcpy((char *)(a4 + 24), "searchpartyd");
  *(_BYTE *)(a4 + 37) = 0;
  *(_WORD *)(a4 + 38) = -5120;
  *(_QWORD *)(a4 + 40) = v36;
  return result;
}

uint64_t sub_100C0EB40(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[43] = a1;
  v2[44] = a2;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[45] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[46] = v4;
  v2[47] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100C0EBA0, 0, 0);
}

void sub_100C0EBA0()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  __n128 v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_OWORD **)(v0 + 344);
  v2 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  JSONEncoder.init()(v3);
  v5 = v1[1];
  v4 = v1[2];
  *(_OWORD *)(v0 + 176) = *v1;
  *(_OWORD *)(v0 + 192) = v5;
  *(_OWORD *)(v0 + 208) = v4;
  v6 = sub_100C0F28C();
  *(_QWORD *)(v0 + 384) = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 176, &type metadata for PencilSecureLocationFetchData, v6);
  *(_QWORD *)(v0 + 392) = v7;
  v8 = v7;
  v9 = *(_QWORD *)(v0 + 344);
  swift_release();
  *(_QWORD *)(v0 + 312) = *(_QWORD *)v9;
  sub_1001AE6D8((_QWORD *)(v0 + 312));
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v9 + 8);
  sub_100B29AAC(v0 + 272);
  *(_OWORD *)(v0 + 240) = *(_OWORD *)(v9 + 24);
  sub_100B29AAC(v0 + 240);
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v9 + 40);
  sub_1001AE6D8((_QWORD *)(v0 + 304));
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
  inited = swift_initStackObject(v10, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E26E00;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x8000000100ECA2C0;
  v12 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "serverFriendlyDescription");

    if (v14)
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      *(_QWORD *)(inited + 48) = v15;
      *(_QWORD *)(inited + 56) = v17;
      strcpy((char *)(inited + 64), "Accept-Version");
      *(_BYTE *)(inited + 79) = -18;
      *(_QWORD *)(inited + 80) = 49;
      *(_QWORD *)(inited + 88) = 0xE100000000000000;
      strcpy((char *)(inited + 96), "Content-Type");
      *(_BYTE *)(inited + 109) = 0;
      *(_WORD *)(inited + 110) = -5120;
      *(_QWORD *)(inited + 112) = 0xD000000000000010;
      *(_QWORD *)(inited + 120) = 0x8000000100ECC390;
      strcpy((char *)(inited + 128), "Content-Length");
      *(_BYTE *)(inited + 143) = -18;
      __asm { BR              X11 }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x100C0EF30);
}

uint64_t sub_100C0EF40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 408);
  *(_QWORD *)(v3 + 416) = a1;
  *(_QWORD *)(v3 + 424) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100C0EF9C, 0, 0);
}

uint64_t sub_100C0EF9C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[52];
  v1 = v0[53];
  v4 = v0[48];
  v3 = v0[49];
  v6 = v0[46];
  v5 = v0[47];
  v7 = v0[45];
  v0[36] = v2;
  v0[37] = v1;
  sub_10001BBBC(v2, v1);
  sub_10001BBBC(v4, v3);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v9 = v0[36];
  v8 = v0[37];
  v0[54] = v9;
  v0[55] = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v9, v8);
  v12 = v11;
  v0[56] = v10;
  v0[57] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_1011152D8 + dword_1011152D8;
  v13 = (_QWORD *)swift_task_alloc(unk_1011152DC);
  v0[58] = v13;
  *v13 = v0;
  v13[1] = sub_100C0F0C0;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[44]);
}

uint64_t sub_100C0F0C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 464);
  *(_QWORD *)(*(_QWORD *)v2 + 472) = v1;
  swift_task_dealloc(v5);
  v7 = v4[56];
  v6 = v4[57];
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_10001BC14(v7, v6);
    v8 = sub_100C0F228;
  }
  else
  {
    v4[60] = a1;
    sub_10001BC14(v7, v6);
    v8 = sub_100C0F160;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100C0F160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 472);
  v1 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 400);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v10 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v10);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 376);
  v9 = v10;
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(v6, v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v9);
}

uint64_t sub_100C0F228()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  swift_release();
  sub_10001BC14(v4, v3);
  sub_10001BC14(v1, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100C0F28C()
{
  unint64_t result;

  result = qword_1011194E0;
  if (!qword_1011194E0)
  {
    result = swift_getWitnessTable(byte_100E6502C, &type metadata for PencilSecureLocationFetchData);
    atomic_store(result, (unint64_t *)&qword_1011194E0);
  }
  return result;
}

uint64_t destroy for PencilSecureLocationsFetchRequest(uint64_t *a1)
{
  unint64_t v1;

  v1 = a1[1];
  if (v1 >> 60 != 15)
    sub_10001BC14(*a1, v1);
  return swift_bridgeObjectRelease();
}

uint64_t _s12searchpartyd33PencilSecureLocationsFetchRequestVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for PencilSecureLocationsFetchRequest(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      sub_10001BBBC(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10001BC14(v7, v8);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  sub_10001BBBC(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  v9 = a2[2];
  a1[2] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for PencilSecureLocationsFetchRequest(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10001BC14(v6, v4);
      goto LABEL_6;
    }
    sub_1000DC964((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PencilSecureLocationsFetchRequest()
{
  return &type metadata for PencilSecureLocationsFetchRequest;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.FetchData()
{
  return &type metadata for PencilSecureLocationFetchData.FetchData;
}

uint64_t destroy for PencilSecureLocationFetchData(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t *initializeWithCopy for PencilSecureLocationFetchData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *assignWithCopy for PencilSecureLocationFetchData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for PencilSecureLocationFetchData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = a1[2];
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(a1[4]);
  v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSecureLocationFetchData(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSecureLocationFetchData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData()
{
  return &type metadata for PencilSecureLocationFetchData;
}

uint64_t initializeWithCopy for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PencilSecureLocationFetchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSecureLocationFetchResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSecureLocationFetchResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse()
{
  return &type metadata for PencilSecureLocationFetchResponse;
}

unint64_t sub_100C0F8AC()
{
  unint64_t result;

  result = qword_1011194F0;
  if (!qword_1011194F0)
  {
    result = swift_getWitnessTable("5\r%", &type metadata for PencilSecureLocationsFetchRequest);
    atomic_store(result, (unint64_t *)&qword_1011194F0);
  }
  return result;
}

unint64_t sub_100C0F8F4()
{
  unint64_t result;

  result = qword_1011194F8;
  if (!qword_1011194F8)
  {
    result = swift_getWitnessTable(byte_100E64FB4, &type metadata for PencilSecureLocationsFetchRequest);
    atomic_store(result, (unint64_t *)&qword_1011194F8);
  }
  return result;
}

uint64_t sub_100C0F938(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x53776F6C6C616873 && a2 == 0xEC00000073746174)
  {
    v5 = 0xEC00000073746174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53776F6C6C616873, 0xEC00000073746174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070)
  {
    swift_bridgeObjectRelease(0xEA00000000007070);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x41747865746E6F63, 0xEA00000000007070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100C0FAB0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795479656BLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x76654464656E776FLL && a2 == 0xEE00736449656369)
  {
    swift_bridgeObjectRelease(0xEE00736449656369);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x76654464656E776FLL, 0xEE00736449656369, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100C0FBC4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6863746566 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6863746566, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100C0FCD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_10001A9A8(&qword_1011195A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100C107F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys, &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_1011195B0);
    BYTE2(v16) = 0;
    v11 = sub_100365CCC(&qword_1011195B8, &qword_1011195B0, (uint64_t (*)(void))sub_100C10834, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, (char *)&v16 + 2, v3, v10, v11);
    v7 = v17;
    BYTE1(v16) = 1;
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v16 + 1, v3);
    v15 = 2;
    v13 = sub_1008D1604();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for FetchResponse.Status, &v15, v3, &type metadata for FetchResponse.Status, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_100C0FEFC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65566769666E6F63 && a2 == 0xED00006E6F697372)
  {
    v5 = 0xED00006E6F697372;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566769666E6F63, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100EC52E0)
  {
    swift_bridgeObjectRelease(0x8000000100EC52E0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EC52E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100C1000C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_10001A9A8(&qword_101119500);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100C10190();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PencilSecureLocationFetchResponse.CodingKeys, &type metadata for PencilSecureLocationFetchResponse.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    LOBYTE(v13) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    HIBYTE(v12) = 1;
    v10 = sub_100C101D4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v13, &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload, (char *)&v12 + 7, v3, &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

unint64_t sub_100C10190()
{
  unint64_t result;

  result = qword_101119508;
  if (!qword_101119508)
  {
    result = swift_getWitnessTable(byte_100E653D4, &type metadata for PencilSecureLocationFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119508);
  }
  return result;
}

unint64_t sub_100C101D4()
{
  unint64_t result;

  result = qword_101119510;
  if (!qword_101119510)
  {
    result = swift_getWitnessTable("m\t%", &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload);
    atomic_store(result, (unint64_t *)&qword_101119510);
  }
  return result;
}

unint64_t sub_100C10218()
{
  unint64_t result;

  result = qword_101119520;
  if (!qword_101119520)
  {
    result = swift_getWitnessTable(byte_100E6535C, &type metadata for PencilSecureLocationFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119520);
  }
  return result;
}

unint64_t sub_100C1025C()
{
  unint64_t result;

  result = qword_101119528;
  if (!qword_101119528)
  {
    result = swift_getWitnessTable("}\t%", &type metadata for PencilSecureLocationFetchData.ClientContext);
    atomic_store(result, (unint64_t *)&qword_101119528);
  }
  return result;
}

unint64_t sub_100C102A0()
{
  unint64_t result;

  result = qword_101119540;
  if (!qword_101119540)
  {
    result = swift_getWitnessTable("M\r%", &type metadata for PencilSecureLocationFetchData.FetchData);
    atomic_store(result, (unint64_t *)&qword_101119540);
  }
  return result;
}

unint64_t sub_100C102E4()
{
  unint64_t result;

  result = qword_101119550;
  if (!qword_101119550)
  {
    result = swift_getWitnessTable(byte_100E652E4, &type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119550);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.FetchData.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchData.CodingKeys;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchResponse.CodingKeys;
}

uint64_t destroy for PencilSecureLocationFetchData.ClientContext(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *initializeWithCopy for PencilSecureLocationFetchData.ClientContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v7 = a2[4];
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for PencilSecureLocationFetchData.ClientContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *assignWithTake for PencilSecureLocationFetchData.ClientContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilSecureLocationFetchData.ClientContext(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilSecureLocationFetchData.ClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.ClientContext()
{
  return &type metadata for PencilSecureLocationFetchData.ClientContext;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload()
{
  return &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload;
}

unint64_t sub_100C1056C()
{
  unint64_t result;

  result = qword_101119558;
  if (!qword_101119558)
  {
    result = swift_getWitnessTable(byte_100E6514C, &type metadata for PencilSecureLocationFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119558);
  }
  return result;
}

unint64_t sub_100C105B4()
{
  unint64_t result;

  result = qword_101119560;
  if (!qword_101119560)
  {
    result = swift_getWitnessTable("]\v%", &type metadata for PencilSecureLocationFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119560);
  }
  return result;
}

unint64_t sub_100C105FC()
{
  unint64_t result;

  result = qword_101119568;
  if (!qword_101119568)
  {
    result = swift_getWitnessTable(byte_100E652BC, &type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119568);
  }
  return result;
}

unint64_t sub_100C10644()
{
  unint64_t result;

  result = qword_101119570;
  if (!qword_101119570)
  {
    result = swift_getWitnessTable(byte_100E6522C, &type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119570);
  }
  return result;
}

unint64_t sub_100C1068C()
{
  unint64_t result;

  result = qword_101119578;
  if (!qword_101119578)
  {
    result = swift_getWitnessTable("m\n%", &type metadata for PencilSecureLocationFetchData.FetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119578);
  }
  return result;
}

unint64_t sub_100C106D4()
{
  unint64_t result;

  result = qword_101119580;
  if (!qword_101119580)
  {
    result = swift_getWitnessTable(byte_100E65174, &type metadata for PencilSecureLocationFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119580);
  }
  return result;
}

unint64_t sub_100C1071C()
{
  unint64_t result;

  result = qword_101119588;
  if (!qword_101119588)
  {
    result = swift_getWitnessTable("%\v%", &type metadata for PencilSecureLocationFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119588);
  }
  return result;
}

unint64_t sub_100C10764()
{
  unint64_t result;

  result = qword_101119590;
  if (!qword_101119590)
  {
    result = swift_getWitnessTable(aM_48, &type metadata for PencilSecureLocationFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119590);
  }
  return result;
}

unint64_t sub_100C107AC()
{
  unint64_t result;

  result = qword_101119598;
  if (!qword_101119598)
  {
    result = swift_getWitnessTable(byte_100E650E4, &type metadata for PencilSecureLocationFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119598);
  }
  return result;
}

unint64_t sub_100C107F0()
{
  unint64_t result;

  result = qword_1011195A8;
  if (!qword_1011195A8)
  {
    result = swift_getWitnessTable("\r\a%", &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011195A8);
  }
  return result;
}

unint64_t sub_100C10834()
{
  unint64_t result;

  result = qword_1011195C0;
  if (!qword_1011195C0)
  {
    result = swift_getWitnessTable(byte_100E6563C, &type metadata for DeviceEventEncodedPayloadResponse);
    atomic_store(result, (unint64_t *)&qword_1011195C0);
  }
  return result;
}

unint64_t sub_100C10878()
{
  unint64_t result;

  result = qword_1011195D0;
  if (!qword_1011195D0)
  {
    result = swift_getWitnessTable(byte_100E655EC, &type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011195D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchData.ClientContext.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys;
}

uint64_t _s12searchpartyd29PencilSecureLocationFetchDataV13ClientContextV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100C1091C + 4 * byte_100E64ED5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100C10950 + 4 * byte_100E64ED0[v4]))();
}

uint64_t sub_100C10950(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C10958(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100C10960);
  return result;
}

uint64_t sub_100C1096C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100C10974);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100C10978(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C10980(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys()
{
  return &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys;
}

uint64_t destroy for DeviceEventEncodedPayloadResponse(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t *_s12searchpartyd33DeviceEventEncodedPayloadResponseVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for DeviceEventEncodedPayloadResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for DeviceEventEncodedPayloadResponse(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayloadResponse()
{
  return &type metadata for DeviceEventEncodedPayloadResponse;
}

unint64_t sub_100C10AD4()
{
  unint64_t result;

  result = qword_1011195D8;
  if (!qword_1011195D8)
  {
    result = swift_getWitnessTable("U\b%", &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011195D8);
  }
  return result;
}

unint64_t sub_100C10B1C()
{
  unint64_t result;

  result = qword_1011195E0;
  if (!qword_1011195E0)
  {
    result = swift_getWitnessTable(byte_100E655C4, &type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011195E0);
  }
  return result;
}

unint64_t sub_100C10B64()
{
  unint64_t result;

  result = qword_1011195E8;
  if (!qword_1011195E8)
  {
    result = swift_getWitnessTable(byte_100E65534, &type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011195E8);
  }
  return result;
}

unint64_t sub_100C10BAC()
{
  unint64_t result;

  result = qword_1011195F0;
  if (!qword_1011195F0)
  {
    result = swift_getWitnessTable("e\a%", &type metadata for PencilSecureLocationFetchData.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011195F0);
  }
  return result;
}

unint64_t sub_100C10BF4()
{
  unint64_t result;

  result = qword_1011195F8;
  if (!qword_1011195F8)
  {
    result = swift_getWitnessTable(byte_100E6547C, &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011195F8);
  }
  return result;
}

unint64_t sub_100C10C3C()
{
  unint64_t result;

  result = qword_101119600;
  if (!qword_101119600)
  {
    result = swift_getWitnessTable(byte_100E654A4, &type metadata for PencilSecureLocationFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119600);
  }
  return result;
}

uint64_t sub_100C10C80(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    swift_bridgeObjectRelease(0xEC0000006F666E49);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100C10D70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  v3 = sub_10001A9A8(&qword_101119608);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100C10F80();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncodedPayloadResponse.CodingKeys, &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v17 = 0;
    v10 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &type metadata for Data, &v17, v3, &type metadata for Data, v10);
    v7 = v18[0];
    v12 = v18[1];
    v13 = sub_10001A9A8(&qword_1010F93F0);
    v17 = 1;
    sub_10001BBBC(v7, v12);
    v14 = sub_100C10FC4(&qword_1010F93F8, &qword_1010F9298, byte_100E39894, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v15 = v18[0];
    sub_10001BBBC(v7, v12);
    swift_bridgeObjectRetain(v15);
    sub_10001BC14(v7, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_10001BC14(v7, v12);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100C10F80()
{
  unint64_t result;

  result = qword_101119610;
  if (!qword_101119610)
  {
    result = swift_getWitnessTable(byte_100E6576C, &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119610);
  }
  return result;
}

uint64_t sub_100C10FC4(unint64_t *a1, unint64_t *a2, const char *a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F93F0);
    v10 = sub_100C11040(a2, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100C11040(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DeviceEventEncodedInfo(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s12searchpartyd29PencilSecureLocationFetchDataV9FetchDataV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100C110CC + 4 * byte_100E64EDF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100C11100 + 4 * byte_100E64EDA[v4]))();
}

uint64_t sub_100C11100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C11108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100C11110);
  return result;
}

uint64_t sub_100C1111C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100C11124);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100C11128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100C11130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayloadResponse.CodingKeys()
{
  return &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys;
}

unint64_t sub_100C11150()
{
  unint64_t result;

  result = qword_101119620;
  if (!qword_101119620)
  {
    result = swift_getWitnessTable(byte_100E65744, &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119620);
  }
  return result;
}

unint64_t sub_100C11198()
{
  unint64_t result;

  result = qword_101119628;
  if (!qword_101119628)
  {
    result = swift_getWitnessTable(aU_42, &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101119628);
  }
  return result;
}

unint64_t sub_100C111E0()
{
  unint64_t result;

  result = qword_101119630;
  if (!qword_101119630)
  {
    result = swift_getWitnessTable(byte_100E656DC, &type metadata for DeviceEventEncodedPayloadResponse.CodingKeys);
    atomic_store(result, &qword_101119630);
  }
  return result;
}

uint64_t sub_100C11224(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 128) = v3;
  *(_BYTE *)(v4 + 264) = a2;
  *(_QWORD *)(v4 + 112) = a1;
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 136) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 144) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 152) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 160) = swift_task_alloc(v7);
  return swift_task_switch(sub_100C1129C, v3, 0);
}

uint64_t sub_100C1129C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t type;
  uint64_t (*v28)(uint64_t, char, uint64_t);
  uint64_t v29;

  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 168) = sub_10001A9E8(v6, (uint64_t)qword_1011B84B0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v1, v3);
  swift_bridgeObjectRetain_n(v5, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 120);
  if (v11)
  {
    type = v10;
    v25 = *(_QWORD *)(v0 + 144);
    v16 = swift_slowAlloc(32, -1);
    v26 = swift_slowAlloc(32, -1);
    v29 = v26;
    *(_DWORD *)v16 = 141558531;
    *(_QWORD *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(_QWORD *)(v0 + 96) = sub_100016940(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v12, v14);
    *(_WORD *)(v16 + 22) = 2048;
    v20 = *(_QWORD *)(v15 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 104) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Updating keys for share id: %{private,mask.hash}s, keyPackages count: %ld.", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_bridgeObjectRelease();
  }

  v21 = *(_QWORD *)(v0 + 120);
  v7(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
  v22 = unk_10111965C;
  v28 = (uint64_t (*)(uint64_t, char, uint64_t))((char *)&dword_101119658 + dword_101119658);
  swift_bridgeObjectRetain(v21);
  v23 = (_QWORD *)swift_task_alloc(v22);
  *(_QWORD *)(v0 + 176) = v23;
  *v23 = v0;
  v23[1] = sub_100C11590;
  return v28(*(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 264), *(_QWORD *)(v0 + 120));
}

uint64_t sub_100C11590(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v8 = *(_QWORD **)v4;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 176);
  v8[23] = a1;
  v8[24] = a2;
  v8[25] = a3;
  v8[26] = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = v8[16];
    v11 = sub_100C1175C;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    sub_10001BBBC(a2, a3);
    v11 = sub_100C1162C;
    v10 = 0;
  }
  return swift_task_switch(v11, v10, 0);
}

uint64_t sub_100C1162C()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001BBBC(v0[24], v0[25]);
  v1 = (_QWORD *)swift_task_alloc(dword_1011184C4);
  v0[27] = v1;
  *v1 = v0;
  v1[1] = sub_100C11680;
  return sub_100BE07C0(v0[24], v0[25]);
}

uint64_t sub_100C11680(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (_QWORD *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = a2;
  v4 = v3[27];
  v5 = v3[24];
  v6 = v3[25];
  v3[28] = a2;
  swift_task_dealloc(v4);
  sub_10001BC14(v5, v6);
  return swift_task_switch(sub_100C116EC, 0, 0);
}

