uint64_t sub_1002E986C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  void (*v48)(unint64_t *, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t Strong;
  uint64_t v59;
  uint64_t v60;
  uint64_t ObjectType;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  _QWORD *v72;

  v64 = a1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || (v7 = sub_1002F01C8(a2)) == 0)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v14 = sub_10001A9E8(v3, (uint64_t)qword_1011B7EC8);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
    swift_bridgeObjectRetain_n(a2, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      result = swift_slowAlloc(32, -1);
      v67 = result;
      *(_DWORD *)v18 = 136315138;
      if (!a2)
      {
LABEL_54:
        __break(1u);
        return result;
      }
      v19 = result;
      v66 = (unint64_t)(v18 + 4);
      swift_bridgeObjectRetain(a2);
      v21 = Set.description.getter(v20, &type metadata for AnyHashable, &protocol witness table for AnyHashable);
      v23 = v22;
      swift_bridgeObjectRelease();
      v69 = sub_100016940(v21, v23, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v66, v18 + 12);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "MessagingServiceDelegateTrampoline: Unable to convert accounts to Set<IDSAccount> %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  v8 = v7;
  v66 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    if (v7 >= 0)
      v7 &= 0xFFFFFFFFFFFFFF8uLL;
    v9 = __CocoaSet.count.getter(v7);
    if (v9)
      goto LABEL_7;
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
    {
LABEL_7:
      v72 = _swiftEmptyArrayStorage;
      sub_10009AD90(0, v9 & ~(v9 >> 63), 0);
      if (v66)
      {
        if (v8 >= 0)
          v10 = v8 & 0xFFFFFFFFFFFFFF8;
        else
          v10 = v8;
        result = __CocoaSet.startIndex.getter(v10);
        v13 = 1;
      }
      else
      {
        result = sub_1000FDF54(v8);
        v13 = v25 & 1;
      }
      v69 = result;
      v70 = v12;
      v71 = v13;
      if (v9 < 0)
      {
        __break(1u);
      }
      else
      {
        v26 = v8 & 0xFFFFFFFFFFFFFF8;
        if (v8 < 0)
          v26 = v8;
        v65 = v26;
        while (1)
        {
          v33 = v69;
          v32 = v70;
          v34 = v71;
          sub_100283108(v69, v70, v71, v8);
          v36 = v35;
          result = (uint64_t)objc_msgSend(v35, "uniqueID");
          if (!result)
            break;
          v37 = (void *)result;
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
          v40 = v39;

          v41 = v72;
          result = swift_isUniquelyReferenced_nonNull_native(v72);
          if ((result & 1) == 0)
          {
            result = sub_10009AD90(0, v41[2] + 1, 1);
            v41 = v72;
          }
          v43 = v41[2];
          v42 = v41[3];
          if (v43 >= v42 >> 1)
          {
            result = sub_10009AD90(v42 > 1, v43 + 1, 1);
            v41 = v72;
          }
          v41[2] = v43 + 1;
          v44 = &v41[2 * v43];
          v44[4] = v38;
          v44[5] = v40;
          if (v66)
          {
            if ((v34 & 1) == 0)
              goto LABEL_52;
            v45 = __CocoaSet.Index.handleBitPattern.getter(v33, v32);
            if (v45)
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
            else
              isUniquelyReferenced_nonNull_native = 1;
            v47 = sub_10001A9A8(&qword_1010F6358);
            v48 = (void (*)(unint64_t *, _QWORD))Set.Index._asCocoa.modify(&v67, v47);
            __CocoaSet.formIndex(after:isUnique:)(v49, isUniquelyReferenced_nonNull_native, v65);
            v48(&v67, 0);
            if (!--v9)
            {
LABEL_38:
              sub_1000FE2A4(v69, v70, v71);
              swift_bridgeObjectRelease();
              v24 = v72;
              goto LABEL_39;
            }
          }
          else
          {
            v27 = sub_1003B2DB8(v33, v32, v34, v8);
            v29 = v28;
            v31 = v30;
            sub_1000FE2A4(v33, v32, v34);
            v69 = v27;
            v70 = v29;
            v71 = v31 & 1;
            if (!--v9)
              goto LABEL_38;
          }
        }
      }
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
  }
  swift_bridgeObjectRelease();
  v24 = _swiftEmptyArrayStorage;
LABEL_39:
  v50 = sub_100CA838C((uint64_t)v24);
  result = swift_bridgeObjectRelease();
  if (!v64)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (qword_1010EA3D0 != -1)
    result = swift_once(&qword_1010EA3D0, sub_100BECCEC);
  v51 = qword_1011B7EE0;
  __chkstk_darwin(result);
  *(&v62 - 2) = v52;
  v53 = sub_10001A9A8(&qword_1010F6350);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EB2FC, &v62 - 4, v51, &type metadata for () + 1, v53);
  v54 = v67;
  v55 = v68;
  if (v68)
    v56 = v68;
  else
    v56 = 0x8000000100ED00E0;
  v57 = v63 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v63 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate);
  if (Strong)
  {
    v59 = Strong;
    if (!v55)
      v54 = 0xD000000000000011;
    v60 = *(_QWORD *)(v57 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v60 + 40))(v54, v56, v50, ObjectType, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease(v59);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002E9EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint8_t *v46;
  char *v47;
  _QWORD *v48;
  _OWORD v49[10];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    result = (uint64_t)sub_100362918(a2);
    if (result)
    {
      if (!a1)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v10 = result;
      if (qword_1010EA3D0 != -1)
        result = swift_once(&qword_1010EA3D0, sub_100BECCEC);
      v11 = qword_1011B7EE0;
      __chkstk_darwin(result);
      *(&v45 - 2) = a1;
      v12 = sub_10001A9A8(&qword_1010F6350);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EB2FC, &v45 - 4, v11, &type metadata for () + 1, v12);
      if (*((_QWORD *)&v49[0] + 1))
        v13 = *(_QWORD *)&v49[0];
      else
        v13 = 0xD000000000000011;
      if (*((_QWORD *)&v49[0] + 1))
        v14 = *((_QWORD *)&v49[0] + 1);
      else
        v14 = 0x8000000100ED00E0;
      v15 = v2 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
      Strong = swift_unknownObjectWeakLoadStrong(v15);
      if (!Strong)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v17 = Strong;
      v18 = *(_QWORD *)(v15 + 8);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0)
          v43 = v10 & 0xFFFFFFFFFFFFFF8;
        else
          v43 = v10;
        swift_bridgeObjectRetain(v10);
        v19 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_bridgeObjectRelease();
        if (v19)
          goto LABEL_15;
      }
      else
      {
        v19 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v19)
        {
LABEL_15:
          v45 = v18;
          v46 = (uint8_t *)v13;
          v47 = (char *)v14;
          v48 = _swiftEmptyArrayStorage;
          result = sub_10009A844(0, v19 & ~(v19 >> 63), 0);
          if ((v19 & 0x8000000000000000) == 0)
          {
            v20 = 0;
            v21 = v48;
            do
            {
              if ((v10 & 0xC000000000000001) != 0)
                v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v10);
              else
                v22 = *(id *)(v10 + 8 * v20 + 32);
              sub_100AA600C(v22, (uint64_t)v49);
              v48 = v21;
              v24 = v21[2];
              v23 = v21[3];
              if (v24 >= v23 >> 1)
              {
                sub_10009A844(v23 > 1, v24 + 1, 1);
                v21 = v48;
              }
              ++v20;
              v21[2] = v24 + 1;
              v25 = &v21[20 * v24];
              v26 = v49[1];
              v25[2] = v49[0];
              v25[3] = v26;
              v27 = v49[2];
              v28 = v49[3];
              v29 = v49[5];
              v25[6] = v49[4];
              v25[7] = v29;
              v25[4] = v27;
              v25[5] = v28;
              v30 = v49[6];
              v31 = v49[7];
              v32 = v49[9];
              v25[10] = v49[8];
              v25[11] = v32;
              v25[8] = v30;
              v25[9] = v31;
            }
            while (v19 != v20);
            swift_bridgeObjectRelease();
            v14 = (unint64_t)v47;
            v13 = (unint64_t)v46;
            v18 = v45;
            goto LABEL_37;
          }
          __break(1u);
          goto LABEL_39;
        }
      }
      swift_bridgeObjectRelease();
      v21 = _swiftEmptyArrayStorage;
LABEL_37:
      ObjectType = swift_getObjectType(v17);
      (*(void (**)(unint64_t, unint64_t, _QWORD *, uint64_t, uint64_t))(v18 + 48))(v13, v14, v21, ObjectType, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease(v17);
    }
  }
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v33 = sub_10001A9E8(v5, (uint64_t)qword_1011B7EC8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v33, v5);
  swift_bridgeObjectRetain_n(a2, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter(v35);
  if (!os_log_type_enabled(v35, v36))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v37 = (uint8_t *)swift_slowAlloc(12, -1);
  result = swift_slowAlloc(32, -1);
  *(_QWORD *)&v49[0] = result;
  *(_DWORD *)v37 = 136315138;
  if (a2)
  {
    v38 = result;
    v46 = v37 + 4;
    swift_bridgeObjectRetain(a2);
    v47 = (char *)&type metadata for Any + 8;
    v40 = Array.description.getter(v39, (char *)&type metadata for Any + 8);
    v42 = v41;
    swift_bridgeObjectRelease();
    v48 = (_QWORD *)sub_100016940(v40, v42, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v46, v37 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "MessagingServiceDelegateTrampoline: Unable to convert devices to [IDSDevice] %s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, v47);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1002EA3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint8_t *v46;
  char *v47;
  _QWORD *v48;
  _OWORD v49[10];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    result = (uint64_t)sub_100362918(a2);
    if (result)
    {
      if (!a1)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v10 = result;
      if (qword_1010EA3D0 != -1)
        result = swift_once(&qword_1010EA3D0, sub_100BECCEC);
      v11 = qword_1011B7EE0;
      __chkstk_darwin(result);
      *(&v45 - 2) = a1;
      v12 = sub_10001A9A8(&qword_1010F6350);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EAAB4, &v45 - 4, v11, &type metadata for () + 1, v12);
      if (*((_QWORD *)&v49[0] + 1))
        v13 = *(_QWORD *)&v49[0];
      else
        v13 = 0xD000000000000011;
      if (*((_QWORD *)&v49[0] + 1))
        v14 = *((_QWORD *)&v49[0] + 1);
      else
        v14 = 0x8000000100ED00E0;
      v15 = v2 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
      Strong = swift_unknownObjectWeakLoadStrong(v15);
      if (!Strong)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v17 = Strong;
      v18 = *(_QWORD *)(v15 + 8);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0)
          v43 = v10 & 0xFFFFFFFFFFFFFF8;
        else
          v43 = v10;
        swift_bridgeObjectRetain(v10);
        v19 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_bridgeObjectRelease();
        if (v19)
          goto LABEL_15;
      }
      else
      {
        v19 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v19)
        {
LABEL_15:
          v45 = v18;
          v46 = (uint8_t *)v13;
          v47 = (char *)v14;
          v48 = _swiftEmptyArrayStorage;
          result = sub_10009A844(0, v19 & ~(v19 >> 63), 0);
          if ((v19 & 0x8000000000000000) == 0)
          {
            v20 = 0;
            v21 = v48;
            do
            {
              if ((v10 & 0xC000000000000001) != 0)
                v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v10);
              else
                v22 = *(id *)(v10 + 8 * v20 + 32);
              sub_100AA600C(v22, (uint64_t)v49);
              v48 = v21;
              v24 = v21[2];
              v23 = v21[3];
              if (v24 >= v23 >> 1)
              {
                sub_10009A844(v23 > 1, v24 + 1, 1);
                v21 = v48;
              }
              ++v20;
              v21[2] = v24 + 1;
              v25 = &v21[20 * v24];
              v26 = v49[1];
              v25[2] = v49[0];
              v25[3] = v26;
              v27 = v49[2];
              v28 = v49[3];
              v29 = v49[5];
              v25[6] = v49[4];
              v25[7] = v29;
              v25[4] = v27;
              v25[5] = v28;
              v30 = v49[6];
              v31 = v49[7];
              v32 = v49[9];
              v25[10] = v49[8];
              v25[11] = v32;
              v25[8] = v30;
              v25[9] = v31;
            }
            while (v19 != v20);
            swift_bridgeObjectRelease();
            v14 = (unint64_t)v47;
            v13 = (unint64_t)v46;
            v18 = v45;
            goto LABEL_37;
          }
          __break(1u);
          goto LABEL_39;
        }
      }
      swift_bridgeObjectRelease();
      v21 = _swiftEmptyArrayStorage;
LABEL_37:
      ObjectType = swift_getObjectType(v17);
      (*(void (**)(unint64_t, unint64_t, _QWORD *, uint64_t, uint64_t))(v18 + 56))(v13, v14, v21, ObjectType, v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease(v17);
    }
  }
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v33 = sub_10001A9E8(v5, (uint64_t)qword_1011B7EC8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v33, v5);
  swift_bridgeObjectRetain_n(a2, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter(v35);
  if (!os_log_type_enabled(v35, v36))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v37 = (uint8_t *)swift_slowAlloc(12, -1);
  result = swift_slowAlloc(32, -1);
  *(_QWORD *)&v49[0] = result;
  *(_DWORD *)v37 = 136315138;
  if (a2)
  {
    v38 = result;
    v46 = v37 + 4;
    swift_bridgeObjectRetain(a2);
    v47 = (char *)&type metadata for Any + 8;
    v40 = Array.description.getter(v39, (char *)&type metadata for Any + 8);
    v42 = v41;
    swift_bridgeObjectRelease();
    v48 = (_QWORD *)sub_100016940(v40, v42, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v46, v37 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "MessagingServiceDelegateTrampoline: Unable to convert devices to [IDSDevice] %s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, v47);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1002EA8B4(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void *, uint64_t))
{
  uint64_t v8;
  id v9;
  id v10;

  if (a4)
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, (char *)&type metadata for Any + 8);
  else
    v8 = 0;
  v9 = a3;
  v10 = a1;
  a5(a3, v8);

  return swift_bridgeObjectRelease(v8);
}

id sub_1002EAA54()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MessagingServiceDelegateTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MessagingServiceDelegateTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd34MessagingServiceDelegateTrampoline);
}

uint64_t sub_1002EAAB4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100BECD34(*(void **)(v1 + 16), a1);
}

uint64_t sub_1002EAACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessagingMessageContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002EAB10(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MessagingMessageContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002EAB4C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

void sub_1002EAB80(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char *v6;
  NSObject *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  char **v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  char **v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  char **v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t Strong;
  uint64_t v52;
  id v53;
  id v54;
  void *v55;
  uint64_t ObjectType;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  NSObject *v62;
  char *v63;
  id v64;
  char *v65;
  uint64_t v66;

  if (!a1)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7EC8);
    v63 = v6;
    v7 = Logger.logObject.getter(v63);
    v25 = static os_log_type_t.error.getter(v7);
    if (!os_log_type_enabled(v7, v25))
    {

      goto LABEL_27;
    }
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = (char **)swift_slowAlloc(8, -1);
    *(_DWORD *)v26 = 138412290;
    v65 = v63;
    v28 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v26 + 4, v26 + 12);
    *v27 = v63;

    _os_log_impl((void *)&_mh_execute_header, v7, v25, "MessagingServiceDelegateTrampoline: No account for %@", v26, 0xCu);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v27, 1, v29);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
LABEL_24:

    return;
  }
  v7 = a2;
  if (!a2)
  {
    v30 = qword_1010EA3C8;
    v63 = a1;
    if (v30 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v31 = type metadata accessor for Logger(0);
    sub_10001A9E8(v31, (uint64_t)qword_1011B7EC8);
    v32 = v6;
    v7 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.error.getter(v7);
    if (!os_log_type_enabled(v7, v33))
    {

      goto LABEL_27;
    }
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = (char **)swift_slowAlloc(8, -1);
    *(_DWORD *)v34 = 138412290;
    v65 = v32;
    v36 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v34 + 4, v34 + 12);
    *v35 = v32;

    _os_log_impl((void *)&_mh_execute_header, v7, v33, "MessagingServiceDelegateTrampoline: No session for %@", v34, 0xCu);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v35, 1, v37);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    goto LABEL_24;
  }
  v63 = (char *)a1;
  if (!a4)
  {
    v38 = a1;
    v39 = v7;
    goto LABEL_20;
  }
  v61 = a1;
  v62 = v7;
  swift_bridgeObjectRetain(a4);
  v12 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(a3, a4);
  if (!v14)
  {
LABEL_20:
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B7EC8);
    v41 = v6;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v44 = 138412290;
      v65 = v41;
      v46 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v44 + 4, v44 + 12);
      *v45 = v41;

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "MessagingServiceDelegateTrampoline: No fromID for %@", v44, 0xCu);
      v47 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v45, 1, v47);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      goto LABEL_24;
    }

LABEL_27:
    return;
  }
  v15 = v14;
  if (a6 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B7EC8);
    v17 = v6;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v65 = v17;
      v22 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v20 + 4, v20 + 12);
      *v21 = v17;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "MessagingServiceDelegateTrampoline: No context for %@", v20, 0xCu);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      return;
    }

    goto LABEL_33;
  }
  v48 = v12;
  v49 = v13;
  v50 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    swift_bridgeObjectRelease();
LABEL_33:

    return;
  }
  v52 = Strong;
  v60 = *((_QWORD *)v50 + 1);
  v53 = v61;
  sub_10001BD08(a5, a6);
  v64 = v53;
  v54 = objc_msgSend(v53, "uniqueID");
  if (v54)
  {
    v55 = v54;
    ObjectType = swift_getObjectType(v52);
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v59 = v58;

    (*(void (**)(uint64_t, uint64_t, NSObject *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v60 + 64))(v57, v59, v62, v48, v49, v15, a5, a6, ObjectType, v60);
    swift_unknownObjectRelease(v52);

    sub_10001EF3C(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002EB2D8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1002EB2FC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1002EAAB4(a1);
}

uint64_t sub_1002EB310(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002EB344 + 4 * a0_1[a1]))(0x657461446E616373, 0xE800000000000000);
}

uint64_t sub_1002EB344()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1002EB364()
{
  return 0x797469726F697270;
}

unint64_t sub_1002EB378()
{
  return 0xD000000000000010;
}

uint64_t sub_1002EB3B0()
{
  return 0x656372756F73;
}

uint64_t sub_1002EB3C4()
{
  return 0x7942737574617473;
}

unint64_t sub_1002EB3E0()
{
  return 0xD000000000000015;
}

uint64_t sub_1002EB408(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F65B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1002ED154();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconPayloadFile.MetaData.CodingKeys, &type metadata for BeaconPayloadFile.MetaData.CodingKeys, v11, v9, v10);
  v37 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v37, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for BeaconPayloadFile.MetaData(0);
    v15 = v3 + v14[5];
    v36 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v36, v5, v12, v13);
    v16 = *(unsigned __int8 *)(v3 + v14[6]);
    v35 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v35, v5);
    v34 = *(_BYTE *)(v3 + v14[7]);
    v33 = 3;
    v17 = sub_1002ED2A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v5, &type metadata for BeaconPayloadFile.ObservationValue, v17);
    v18 = (uint64_t *)(v3 + v14[8]);
    v19 = *v18;
    v20 = *((unsigned __int8 *)v18 + 8);
    v32 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v32, v5);
    v31 = *(_BYTE *)(v3 + v14[9]);
    v30 = 5;
    v21 = sub_1002ED2E4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for LocationSource, v21);
    v22 = *(unsigned __int8 *)(v3 + v14[10]);
    v29 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v29, v5);
    v23 = *(unsigned __int8 *)(v3 + v14[11]);
    v28 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v28, v5);
    v24 = *(unsigned __int8 *)(v3 + v14[12]);
    v27 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002EB6DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD *, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;

  v36 = a2;
  v40 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v40 - 8);
  v3 = __chkstk_darwin(v40);
  v5 = (int **)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v38 = (int **)((char *)&v34 - v6);
  v39 = sub_10001A9A8(&qword_1010F65A0);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_1002ED154();
  v41 = v9;
  v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeaconPayloadFile.MetaData.CodingKeys, &type metadata for BeaconPayloadFile.MetaData.CodingKeys, v15, v14, v13);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v34 = (int *)v10;
  v35 = v7;
  v17 = (uint64_t)v12;
  v42 = a1;
  BYTE6(v47) = 0;
  v18 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v19 = v38;
  v20 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v40, (char *)&v47 + 6, v39, v40, v18);
  v21 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v37 + 32);
  v22 = v19;
  v23 = v40;
  v21(v17, v22, v40);
  BYTE5(v47) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v23, (char *)&v47 + 5, v20, v23, v18);
  v24 = v34;
  v21(v17 + v34[5], v5, v23);
  BYTE4(v47) = 2;
  *(_BYTE *)(v17 + v24[6]) = KeyedDecodingContainer.decode(_:forKey:)((char *)&v47 + 4, v20) & 1;
  BYTE2(v47) = 3;
  v25 = sub_1002ED198();
  KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v47 + 3), &type metadata for BeaconPayloadFile.ObservationValue, (char *)&v47 + 2, v39, &type metadata for BeaconPayloadFile.ObservationValue, v25);
  v26 = v42;
  v27 = v35;
  *(_BYTE *)(v17 + v24[7]) = BYTE3(v47);
  BYTE1(v47) = 4;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v47 + 1, v39);
  v29 = v17 + v24[8];
  *(_QWORD *)v29 = v28;
  *(_BYTE *)(v29 + 8) = v30 & 1;
  v46 = 5;
  v31 = sub_1002ED1DC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, &type metadata for LocationSource, &v46, v39, &type metadata for LocationSource, v31);
  *(_BYTE *)(v17 + v24[9]) = v47;
  v45 = 6;
  *(_BYTE *)(v17 + v24[10]) = KeyedDecodingContainer.decode(_:forKey:)(&v45, v39);
  v44 = 7;
  *(_BYTE *)(v17 + v24[11]) = KeyedDecodingContainer.decode(_:forKey:)(&v44, v39);
  v43 = 8;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v39);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v41, v39);
  *(_BYTE *)(v17 + v24[12]) = v32;
  sub_1002ED220(v17, v36);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  return sub_1002ED264(v17);
}

uint64_t sub_1002EBBAC()
{
  unsigned __int8 *v0;

  return sub_1002EB310(*v0);
}

uint64_t sub_1002EBBB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002ED748(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002EBBD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002ED154();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002EBC00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002ED154();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002EBC28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002EB6DC(a1, a2);
}

uint64_t sub_1002EBC3C(_QWORD *a1)
{
  return sub_1002EB408(a1);
}

uint64_t sub_1002EBC54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002EDAEC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002EBCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002EDAEC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1002EBCFC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002ED738(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002EBD24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t Path;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  v11 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F0E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, a1, v4);
  v16 = sub_1002ECF64();
  if (v17 >> 60 == 15)
  {
    v18 = type metadata accessor for BeaconPayloadFile(0);
    v19 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v19(a1, v4);
    v19(v15, v4);
    sub_100004048(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_1010F0E18);
    sub_100004048(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, (uint64_t *)&unk_1010ED850);
    swift_deallocPartialClassInstance(v2, v18, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
    return 0;
  }
  else
  {
    v20 = v16;
    v21 = v17;
    v22 = (uint64_t *)(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement);
    *v22 = v16;
    v22[1] = v17;
    v23 = sub_10001BBBC(v16, v17);
    Path = URL.deletingLastPathComponent()(v23);
    URL.deletingLastPathComponent()(Path);
    sub_10001EF3C(v20, v21);
    v25 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v25(a1, v4);
    v25((uint64_t)v8, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v10, v4);
    v26 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData;
    v27 = type metadata accessor for BeaconPayloadFile.MetaData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  }
  return v2;
}

uint64_t sub_1002EBF78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE v14[24];

  v3 = sub_10001A9A8(&qword_1010F0E18);
  v4 = __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, v14, 0, 0);
  sub_10000F9B8(v9, (uint64_t)v8, &qword_1010F0E18);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F0E00);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return sub_100005CF0((uint64_t)v8, a1, (uint64_t *)&unk_1010F0E00);
  sub_100004048((uint64_t)v8, &qword_1010F0E18);
  sub_1002EC0FC(v1, a1);
  sub_10000F9B8(a1, (uint64_t)v6, (uint64_t *)&unk_1010F0E00);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess(v9, v13, 33, 0);
  sub_100004084((uint64_t)v6, v9, &qword_1010F0E18);
  return swift_endAccess(v13);
}

uint64_t sub_1002EC0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F0E00);
  __chkstk_darwin(v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F9B8(a1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData, (uint64_t)v6, (uint64_t *)&unk_1010F0E00);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010F0E00);
    v12 = URL.extendedAttribute(name:)(0xD000000000000026, 0x8000000100ED0250);
    v14 = v13;
    v15 = type metadata accessor for PropertyListDecoder(0);
    v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    PropertyListDecoder.init()(v16);
    v17 = sub_100006204(&qword_1010F65D0, type metadata accessor for BeaconPayloadFile.MetaData, (uint64_t)&unk_100E31C18);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, v12, v14, v7, v17);
    sub_10001BC14(v12, v14);
    swift_release();
  }
  else
  {
    sub_1002ED328((uint64_t)v6, (uint64_t)v10);
    sub_1002ED328((uint64_t)v10, a2);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
}

uint64_t sub_1002EC304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE v26[24];

  v3 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v24 = (uint64_t)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F0E00);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED850);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v23 - v13;
  v15 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, v26, 0, 0);
  sub_10000F9B8(v15, (uint64_t)v14, (uint64_t *)&unk_1010ED850);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) != 1)
    return sub_100005CF0((uint64_t)v14, a1, (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010ED850);
  sub_1002EBF78((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3))
  {
    sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F0E00);
    v18 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  else
  {
    v20 = v24;
    sub_1002ED220((uint64_t)v8, v24);
    sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F0E00);
    v21 = type metadata accessor for Date(0);
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a1, v20, v21);
    sub_1002ED264(v20);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v21);
  }
  sub_10000F9B8(a1, (uint64_t)v12, (uint64_t *)&unk_1010EA690);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  swift_beginAccess(v15, v25, 33, 0);
  sub_100004084((uint64_t)v12, v15, (uint64_t *)&unk_1010ED850);
  return swift_endAccess(v25);
}

uint64_t sub_1002EC5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL;
  v2 = type metadata accessor for URL(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  sub_10001BC14(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement + 8));
  v3(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v2);
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData, (uint64_t *)&unk_1010F0E00);
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_1010F0E18);
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, (uint64_t *)&unk_1010ED850);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1002EC67C()
{
  return type metadata accessor for BeaconPayloadFile(0);
}

uint64_t type metadata accessor for BeaconPayloadFile(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F63E0, (uint64_t)&nominal type descriptor for BeaconPayloadFile);
}

void sub_1002EC698(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = &unk_100E31B28;
    v10[2] = v10[0];
    sub_1002EC780(319);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_1001C5C94(319, &qword_1010F63F8, (uint64_t *)&unk_1010F0E00);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        sub_1001C5C94(319, (unint64_t *)&unk_1010F6400, (uint64_t *)&unk_1010EA690);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 6, v10, a1 + 80);
        }
      }
    }
  }
}

void sub_1002EC780(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010F63F0)
  {
    v2 = type metadata accessor for BeaconPayloadFile.MetaData(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010F63F0);
  }
}

uint64_t type metadata accessor for BeaconPayloadFile.MetaData(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F6548, (uint64_t)&nominal type descriptor for BeaconPayloadFile.MetaData);
}

_QWORD *sub_1002EC7E8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v10 = a3[8];
    v11 = a3[9];
    v12 = (char *)a1 + v10;
    v13 = (char *)a2 + v10;
    v12[8] = v13[8];
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
    v14 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  }
  return a1;
}

uint64_t sub_1002EC8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_1002EC944(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[8];
  v10 = a3[9];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1002ECA0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1002ECAE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[8];
  v10 = a3[9];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1002ECBA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[8];
  v10 = a3[9];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1002ECC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002ECC7C);
}

uint64_t sub_1002ECC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1002ECD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002ECD14);
}

uint64_t sub_1002ECD14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_1002ECD8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = &unk_100E31B50;
    v4[3] = &unk_100E31B68;
    v4[4] = &unk_100E31B80;
    v4[5] = &unk_100E31B98;
    v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[8] = &unk_100E31BB0;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1002ECE38(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  double *v6;
  char v7;
  double *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  _BOOL4 v13;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for BeaconPayloadFile.MetaData(0);
  if ((static Date.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])
    || *(unsigned __int8 *)(a1 + v4[7]) != *(unsigned __int8 *)(a2 + v4[7]))
  {
    return 0;
  }
  v5 = v4[8];
  v6 = (double *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 8);
  v8 = (double *)(a2 + v5);
  v9 = *(unsigned __int8 *)(a2 + v5 + 8);
  if ((v7 & 1) == 0)
  {
    if (*v6 != *v8)
      LOBYTE(v9) = 1;
    if ((v9 & 1) != 0)
      return 0;
LABEL_11:
    if (*(unsigned __int8 *)(a1 + v4[9]) != *(unsigned __int8 *)(a2 + v4[9])
      || *(unsigned __int8 *)(a1 + v4[10]) != *(unsigned __int8 *)(a2 + v4[10])
      || *(unsigned __int8 *)(a1 + v4[11]) != *(unsigned __int8 *)(a2 + v4[11]))
    {
      return 0;
    }
    v10 = v4[12];
    v11 = *(unsigned __int8 *)(a1 + v10);
    v12 = *(unsigned __int8 *)(a2 + v10);
    if (v11 == 2)
    {
      if (v12 != 2)
        return 0;
    }
    else
    {
      v13 = (v11 & 1) == 0;
      if (v12 == 2 || ((v13 ^ v12) & 1) == 0)
        return 0;
    }
    return 1;
  }
  if (v9)
    goto LABEL_11;
  return 0;
}

uint64_t sub_1002ECF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t Path;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v17[2];

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Path = URL.deletingLastPathComponent()(v2);
  v6 = URL.lastPathComponent.getter(Path);
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v17[0] = v6;
  v17[1] = v8;
  v9 = sub_1000330C8();
  v11 = Data.init<A>(hexString:)(v17, &type metadata for String, v9, v10);
  if (v12 >> 60 == 15)
    return 0;
  v13 = v11;
  v14 = v12;
  sub_10001BBBC(v11, v12);
  sub_1002F702C(v13, v14);
  sub_10001EF3C(v13, v14);
  return v17[0];
}

unint64_t sub_1002ED154()
{
  unint64_t result;

  result = qword_1010F65A8;
  if (!qword_1010F65A8)
  {
    result = swift_getWitnessTable("}d#", &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F65A8);
  }
  return result;
}

unint64_t sub_1002ED198()
{
  unint64_t result;

  result = qword_1010F65B0;
  if (!qword_1010F65B0)
  {
    result = swift_getWitnessTable(byte_100E31EF4, &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1010F65B0);
  }
  return result;
}

unint64_t sub_1002ED1DC()
{
  unint64_t result;

  result = qword_10110D9C0;
  if (!qword_10110D9C0)
  {
    result = swift_getWitnessTable("if#", &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_10110D9C0);
  }
  return result;
}

uint64_t sub_1002ED220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002ED264(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002ED2A0()
{
  unint64_t result;

  result = qword_1010F65C0;
  if (!qword_1010F65C0)
  {
    result = swift_getWitnessTable(byte_100E31ECC, &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1010F65C0);
  }
  return result;
}

unint64_t sub_1002ED2E4()
{
  unint64_t result;

  result = qword_1010F65C8;
  if (!qword_1010F65C8)
  {
    result = swift_getWitnessTable(byte_100E318B0, &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1010F65C8);
  }
  return result;
}

uint64_t sub_1002ED328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadFile.BeaconPayloadFileError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002ED3B8 + 4 * byte_100E31AEE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002ED3EC + 4 * byte_100E31AE9[v4]))();
}

uint64_t sub_1002ED3EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002ED3F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002ED3FCLL);
  return result;
}

uint64_t sub_1002ED408(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002ED410);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002ED414(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002ED41C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.BeaconPayloadFileError()
{
  return &type metadata for BeaconPayloadFile.BeaconPayloadFileError;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadFile.MetaData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1002ED484 + 4 * byte_100E31AF8[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1002ED4B8 + 4 * byte_100E31AF3[v4]))();
}

uint64_t sub_1002ED4B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002ED4C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002ED4C8);
  return result;
}

uint64_t sub_1002ED4D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002ED4DCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1002ED4E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002ED4E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.MetaData.CodingKeys()
{
  return &type metadata for BeaconPayloadFile.MetaData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadFile.ObservationValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002ED550 + 4 * byte_100E31B02[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002ED584 + 4 * byte_100E31AFD[v4]))();
}

uint64_t sub_1002ED584(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002ED58C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002ED594);
  return result;
}

uint64_t sub_1002ED5A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002ED5A8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002ED5AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002ED5B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.ObservationValue()
{
  return &type metadata for BeaconPayloadFile.ObservationValue;
}

unint64_t sub_1002ED5D4()
{
  unint64_t result;

  result = qword_1010F65D8;
  if (!qword_1010F65D8)
  {
    result = swift_getWitnessTable("ee#", &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1010F65D8);
  }
  return result;
}

unint64_t sub_1002ED61C()
{
  unint64_t result;

  result = qword_1010F65E0;
  if (!qword_1010F65E0)
  {
    result = swift_getWitnessTable(byte_100E31DFC, &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F65E0);
  }
  return result;
}

unint64_t sub_1002ED664()
{
  unint64_t result;

  result = qword_1010F65E8;
  if (!qword_1010F65E8)
  {
    result = swift_getWitnessTable("Ed#", &type metadata for BeaconPayloadFile.BeaconPayloadFileError);
    atomic_store(result, (unint64_t *)&qword_1010F65E8);
  }
  return result;
}

unint64_t sub_1002ED6AC()
{
  unint64_t result;

  result = qword_1010F65F0;
  if (!qword_1010F65F0)
  {
    result = swift_getWitnessTable(byte_100E31D6C, &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F65F0);
  }
  return result;
}

unint64_t sub_1002ED6F4()
{
  unint64_t result;

  result = qword_1010F65F8;
  if (!qword_1010F65F8)
  {
    result = swift_getWitnessTable(byte_100E31D94, &type metadata for BeaconPayloadFile.MetaData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F65F8);
  }
  return result;
}

unint64_t sub_1002ED738(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t sub_1002ED748(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x657461446E616373 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657461446E616373, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065746144)
  {
    v7 = 0xEC00000065746144;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000065746144, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100ED0280)
  {
    v9 = 0x8000000100ED0280;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100ED0280, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EC3570)
  {
    v10 = 0x8000000100EC3570;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC3570, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x7942737574617473 && a2 == 0xEA00000000006574)
  {
    v12 = 0xEA00000000006574;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7942737574617473, 0xEA00000000006574, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000015)
  {
    v13 = 0x8000000100ED02A0;
    if (a2 == 0x8000000100ED02A0)
      goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED02A0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ED02C0)
  {
    swift_bridgeObjectRelease(0x8000000100ED02C0);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED02C0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

unint64_t sub_1002EDAEC()
{
  unint64_t result;

  result = qword_1010F6600;
  if (!qword_1010F6600)
  {
    result = swift_getWitnessTable("Ef#", &type metadata for BeaconPayloadFile.ObservationValue);
    atomic_store(result, (unint64_t *)&qword_1010F6600);
  }
  return result;
}

uint64_t CryptoAdvertisementKeys.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CryptoAdvertisementKeys.publicKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys(0) + 20);
  v2 = *(_QWORD *)v1;
  sub_10001BBBC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for CryptoAdvertisementKeys(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F6698;
  if (!qword_1010F6698)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CryptoAdvertisementKeys);
  return result;
}

uint64_t CryptoAdvertisementKeys.privateKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys(0) + 24);
  v2 = *(_QWORD *)v1;
  sub_10001BD08(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t CryptoAdvertisementKeys.advertisement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys(0) + 28);
  v2 = *(_QWORD *)v1;
  sub_10001BBBC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

void sub_1002EDC64(char *a1)
{
  sub_100512CDC(*a1);
}

void sub_1002EDC70()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1002EDCB0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 21840, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_1002EDCF8()
{
  __asm { BR              X10 }
}

uint64_t sub_1002EDD28(uint64_t a1)
{
  String.hash(into:)(a1, 21840, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_1002EDD5C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1002EDD98()
{
  uint64_t v1;

  String.hash(into:)(&v1, 21840, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1002EDDE0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002EF3AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002EDE0C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1002EDE30 + 4 * byte_100E31F7C[*v0]))();
}

void sub_1002EDE30(_QWORD *a1@<X8>)
{
  *a1 = 21840;
  a1[1] = 0xE200000000000000;
}

void sub_1002EDE40(_QWORD *a1@<X8>)
{
  *a1 = 21072;
  a1[1] = 0xE200000000000000;
}

void sub_1002EDE50(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 65;
  a1[1] = v1;
}

uint64_t sub_1002EDE5C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002EDE80 + 4 * byte_100E31F80[*v0]))(68, 0xE100000000000000);
}

uint64_t sub_1002EDE80()
{
  return 21840;
}

uint64_t sub_1002EDE8C()
{
  return 21072;
}

uint64_t sub_1002EDE98()
{
  return 65;
}

unint64_t sub_1002EDEA0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002EF3AC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002EDEC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002EE1E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002EDEEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002EE1E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CryptoAdvertisementKeys.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v30[2];
  __int128 v31;
  char v32;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F6608);
  v30[0] = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_1002EE1E8();
  v14 = v12;
  v15 = v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CryptoAdvertisementKeys.CodingKeys, &type metadata for CryptoAdvertisementKeys.CodingKeys, v13, v11, v14);
  v16 = sub_10001A9A8(&qword_1010F6618);
  v17 = swift_allocObject(v16, 48, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  v18 = DateInterval.start.getter(v17);
  v19 = Date.timeIntervalSinceReferenceDate.getter(v18);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(double *)(v17 + 32) = v19;
  *(double *)(v17 + 40) = DateInterval.duration.getter(v20);
  *(_QWORD *)&v31 = v17;
  v32 = 0;
  v21 = sub_10001A9A8(&qword_1010F6620);
  v22 = sub_1002EE788(&qword_1010F6628, (uint64_t)&protocol witness table for Double, (const char *)&protocol conformance descriptor for <A> [A]);
  v23 = v30[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, v21, v22);
  swift_bridgeObjectRelease();
  if (v23)
    return (*(uint64_t (**)(char *, uint64_t))(v30[0] + 8))(v10, v8);
  v25 = v30[0];
  v26 = (int *)type metadata accessor for CryptoAdvertisementKeys(0);
  v31 = *(_OWORD *)(v15 + v26[5]);
  v32 = 1;
  v27 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, &type metadata for Data, v27);
  v28 = (_QWORD *)(v15 + v26[6]);
  v29 = v28[1];
  if (v29 >> 60 != 15)
  {
    *(_QWORD *)&v31 = *v28;
    *((_QWORD *)&v31 + 1) = v29;
    v32 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, &type metadata for Data, v27);
  }
  v31 = *(_OWORD *)(v15 + v26[7]);
  v32 = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v8, &type metadata for Data, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v10, v8);
}

unint64_t sub_1002EE1E8()
{
  unint64_t result;

  result = qword_1010F6610;
  if (!qword_1010F6610)
  {
    result = swift_getWitnessTable(byte_100E32154, &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6610);
  }
  return result;
}

double *CryptoAdvertisementKeys.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  double *result;
  double *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double *v49;
  int *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 v55;
  char v56;

  v52 = a2;
  v3 = type metadata accessor for Date(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_10001A9A8(&qword_1010F6630);
  v6 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CryptoAdvertisementKeys(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v13);
  v14 = sub_1002EE1E8();
  v15 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CryptoAdvertisementKeys.CodingKeys, &type metadata for CryptoAdvertisementKeys.CodingKeys, v14, v13, v12);
  if (v15)
    return (double *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v50 = (int *)v9;
  v51 = v5;
  v54 = a1;
  v16 = v11;
  v17 = sub_10001A9A8(&qword_1010F6620);
  v56 = 0;
  v18 = sub_1002EE788(&qword_1010F6638, (uint64_t)&protocol witness table for Double, (const char *)&protocol conformance descriptor for <A> [A]);
  v19 = v53;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, v17, &v56, v53, v17, v18);
  v20 = v8;
  v21 = (double *)v55;
  v56 = 1;
  v22 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v56, v19, &type metadata for Data, v22);
  v49 = v21;
  v23 = v55;
  v56 = 2;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v56, v19, &type metadata for Data, v22);
  v47 = *((_QWORD *)&v23 + 1);
  v48 = v23;
  v24 = *((_QWORD *)&v55 + 1);
  v25 = v55;
  v56 = 3;
  result = (double *)KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v56, v19, &type metadata for Data, v22);
  v46 = v25;
  v27 = v49;
  if (!*((_QWORD *)v49 + 2))
  {
    __break(1u);
    goto LABEL_10;
  }
  v45 = v55;
  v28 = v51;
  Date.init(timeIntervalSinceReferenceDate:)(result);
  v29 = *((_QWORD *)v27 + 2);
  result = v27;
  v30 = v48;
  if (v29 < 2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v31 = (uint64_t)v16;
  v32 = result[5];
  swift_bridgeObjectRelease();
  DateInterval.init(start:duration:)(v28, v32);
  v33 = v24;
  if (v24 >> 60 == 15)
  {
    v34 = 0;
    v35 = 0xF000000000000000;
    v36 = v50;
    v37 = v47;
  }
  else
  {
    v38 = v46;
    sub_10001BD08(v46, v24);
    v34 = sub_1002FB3AC(v38, v24);
    v36 = v50;
    v37 = v47;
    v30 = v48;
  }
  v39 = (uint64_t *)(v31 + v36[6]);
  *v39 = v34;
  v39[1] = v35;
  sub_10001BBBC(v30, v37);
  v40 = sub_1002FB6C8(v30, v37);
  v41 = (uint64_t *)(v31 + v36[5]);
  *v41 = v40;
  v41[1] = v42;
  sub_1002F7394(v45, *((uint64_t *)&v45 + 1));
  v43 = v54;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v19);
  sub_10001EF3C(v46, v33);
  sub_10001BC14(v48, v47);
  *(_OWORD *)(v31 + v36[7]) = v55;
  sub_1002EEAA4(v31, v52);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  return (double *)sub_1002EEAE8(v31);
}

uint64_t sub_1002EE788(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_1010F6620);
    v8 = a2;
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

double *sub_1002EE7E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CryptoAdvertisementKeys.init(from:)(a1, a2);
}

uint64_t sub_1002EE7FC(_QWORD *a1)
{
  return CryptoAdvertisementKeys.encode(to:)(a1);
}

unint64_t CryptoAdvertisementKeys.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for HashAlgorithm(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = 0;
  v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v39 = 0xD000000000000019;
  v40 = 0x8000000100ED02E0;
  v6 = type metadata accessor for CryptoAdvertisementKeys(0);
  v7 = (uint64_t *)(v0 + *(int *)(v6 + 28));
  v9 = v7[1];
  v37 = *v7;
  v8 = v37;
  v38 = v9;
  v10 = sub_1001AE66C();
  v11._countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for Advertisement, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 2108704;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v2);
  v13 = Data.hash(algorithm:)(v5, v8, v9);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v37 = v13;
  v38 = v15;
  v16 = sub_100153D50();
  v17 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v16);
  v19 = v18;
  sub_10001BC14(v13, v15);
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 2108704;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  v23 = v39;
  v22 = v40;
  v39 = 0;
  v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v24 = type metadata accessor for DateInterval(0);
  v25 = sub_1002EEB24();
  v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
  v28 = v27;
  swift_bridgeObjectRelease();
  v39 = v26;
  v40 = v28;
  v29._countAndFlagsBits = 0x746176697270202CLL;
  v29._object = (void *)0xEE00203A79654B65;
  String.append(_:)(v29);
  if (*(_QWORD *)(v1 + *(int *)(v6 + 24) + 8) >> 60 == 15)
    v30 = 0x65736C6166;
  else
    v30 = 1702195828;
  if (*(_QWORD *)(v1 + *(int *)(v6 + 24) + 8) >> 60 == 15)
    v31 = 0xE500000000000000;
  else
    v31 = 0xE400000000000000;
  v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease();
  v33 = v39;
  v34 = (void *)v40;
  v39 = v23;
  v40 = v22;
  swift_bridgeObjectRetain(v22);
  v35._countAndFlagsBits = v33;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_1002EEAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CryptoAdvertisementKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002EEAE8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CryptoAdvertisementKeys(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1002EEB24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F2168;
  if (!qword_1010F2168)
  {
    v1 = type metadata accessor for DateInterval(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for DateInterval, v1);
    atomic_store(result, &qword_1010F2168);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CryptoAdvertisementKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_10001BBBC(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = *((_QWORD *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v18 = *(_QWORD *)v15;
      sub_10001BBBC(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
      *(_QWORD *)v14 = v18;
      *((_QWORD *)v14 + 1) = v16;
    }
    v19 = a3[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = *v21;
    v23 = v21[1];
    sub_10001BBBC(*v21, v23);
    *v20 = v22;
    v20[1] = v23;
  }
  return a1;
}

uint64_t destroy for CryptoAdvertisementKeys(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v4 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_10001BC14(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  v5 = (uint64_t *)(a1 + a2[6]);
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_10001BC14(*v5, v6);
  return sub_10001BC14(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t initializeWithCopy for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001BBBC(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_10001BBBC(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_10001BBBC(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  return a1;
}

uint64_t assignWithCopy for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001BBBC(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_10001BC14(v12, v13);
  v14 = a3[6];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *(_QWORD *)(a2 + v14 + 8);
  if (*(_QWORD *)(a1 + v14 + 8) >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      v19 = *v16;
      sub_10001BBBC(v19, v17);
      v20 = *v15;
      v21 = v15[1];
      *v15 = v19;
      v15[1] = v17;
      sub_10001BC14(v20, v21);
      goto LABEL_8;
    }
    sub_1002EEEE0((uint64_t)v15);
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v15 = *(_OWORD *)v16;
    goto LABEL_8;
  }
  v18 = *v16;
  sub_10001BBBC(v18, v17);
  *v15 = v18;
  v15[1] = v17;
LABEL_8:
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10001BBBC(*v24, v26);
  v27 = *v23;
  v28 = v23[1];
  *v23 = v25;
  v23[1] = v26;
  sub_10001BC14(v27, v28);
  return a1;
}

uint64_t sub_1002EEEE0(uint64_t a1)
{
  destroy for KeyRepresentableInternal();
  return a1;
}

uint64_t initializeWithTake for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001BC14(v8, v9);
  v10 = a3[6];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = *(_QWORD *)(a1 + v10 + 8);
  if (v13 >> 60 != 15)
  {
    v14 = v12[1];
    if (v14 >> 60 != 15)
    {
      v15 = *v11;
      *v11 = *v12;
      v11[1] = v14;
      sub_10001BC14(v15, v13);
      goto LABEL_6;
    }
    sub_1002EEEE0((uint64_t)v11);
  }
  *(_OWORD *)v11 = *(_OWORD *)v12;
LABEL_6:
  v16 = a3[7];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_10001BC14(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002EF068);
}

uint64_t sub_1002EF068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002EF104);
}

uint64_t sub_1002EF104(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_1002EF18C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E32028;
    v4[2] = &unk_100E32040;
    v4[3] = &unk_100E32028;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CryptoAdvertisementKeys.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1002EF254 + 4 * byte_100E31F89[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002EF288 + 4 * byte_100E31F84[v4]))();
}

uint64_t sub_1002EF288(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EF290(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002EF298);
  return result;
}

uint64_t sub_1002EF2A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002EF2ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1002EF2B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002EF2B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoAdvertisementKeys.CodingKeys()
{
  return &type metadata for CryptoAdvertisementKeys.CodingKeys;
}

unint64_t sub_1002EF2D8()
{
  unint64_t result;

  result = qword_1010F66D8;
  if (!qword_1010F66D8)
  {
    result = swift_getWitnessTable(byte_100E3212C, &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F66D8);
  }
  return result;
}

unint64_t sub_1002EF320()
{
  unint64_t result;

  result = qword_1010F66E0;
  if (!qword_1010F66E0)
  {
    result = swift_getWitnessTable("-d#", &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F66E0);
  }
  return result;
}

unint64_t sub_1002EF368()
{
  unint64_t result;

  result = qword_1010F66E8;
  if (!qword_1010F66E8)
  {
    result = swift_getWitnessTable(byte_100E3208C, &type metadata for CryptoAdvertisementKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F66E8);
  }
  return result;
}

unint64_t sub_1002EF3AC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049B60, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_1002EF3F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[3];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010F6868);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FAAF0);
  v9 = swift_allocObject(v8, 20, 7);
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v1 + 16) = v9;
  *(_BYTE *)(v1 + 24) = 0;
  v10 = sub_10001A9A8(&qword_1010F6870);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)(v1 + 32) = PassthroughSubject.init()();
  *(_QWORD *)(v1 + 48) = &_swiftEmptySetSingleton;
  v11 = swift_allocObject(v8, 20, 7);
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v1 + 56) = v11;
  *(_BYTE *)(v1 + 64) = 1;
  *(_QWORD *)(v1 + 40) = a1;
  v12 = *(_QWORD *)(v1 + 16);
  swift_retain(a1);
  v13 = swift_retain(v12);
  v14 = AnyCurrentValuePublisher.publisher.getter(v13);
  v23[0] = v14;
  v15 = sub_10001A9A8(&qword_1010F2080);
  v16 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_100033880, 0, v15, v16);
  swift_release(v14);
  v17 = swift_allocObject(&unk_101068540, 24, 7);
  swift_weakInit(v17 + 16, v2);
  v18 = swift_allocObject(&unk_101068568, 32, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v12;
  v19 = sub_1000193A4(&qword_1010F6878, &qword_1010F6868, (const char *)&protocol conformance descriptor for Publishers.Filter<A>);
  swift_retain(v12);
  v20 = Publisher<>.sink(receiveValue:)(sub_1002EFAB0, v18, v4, v19);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess(v2 + 48, v23, 33, 0);
  AnyCancellable.store(in:)(v2 + 48);
  swift_endAccess(v23);
  swift_release(v12);
  swift_release(v20);
  swift_release(a1);
  return v2;
}

uint64_t sub_1002EF650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  _BYTE v15[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EFAB8, result, a3, (char *)&type metadata for () + 8, &type metadata for Bool);
    v8 = v14;
    v9 = static os_log_type_t.default.getter(v7);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v10 = qword_1011B7D40;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v12 + 56) = &type metadata for Bool;
    *(_QWORD *)(v12 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v12 + 32) = v8;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "CloudKitUpdateEligibility app client is active. Eligible: %i", v13);
    swift_bridgeObjectRelease(v12);
    v14 = v8;
    PassthroughSubject.send(_:)(&v14);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1002EF79C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  result = os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D40, "CloudKitUpdateEligibility is eligible (always).", 47, 2, &_swiftEmptyArrayStorage);
  *a2 = 1;
  return result;
}

uint64_t sub_1002EF830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  char v9;

  *(_BYTE *)(a1 + 24) = 1;
  v1 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v2 = qword_1011B7D40;
  v3 = os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7D40, "CloudKitUpdateEligibility is eligible (always).", 47, 2, _swiftEmptyArrayStorage);
  v4 = static os_log_type_t.default.getter(v3);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v6 + 56) = &type metadata for Bool;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 32) = 1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v2, "CloudKitUpdateEligibility overriden: true. Eligible: %i", v8);
  swift_bridgeObjectRelease(v6);
  v9 = 1;
  return PassthroughSubject.send(_:)(&v9);
}

uint64_t sub_1002EF960@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  result = os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D40, "CloudKitUpdateEligibility is eligible (always).", 47, 2, _swiftEmptyArrayStorage);
  *(_BYTE *)(a1 + 24) = 0;
  *a2 = 1;
  return result;
}

uint64_t sub_1002EF9FC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t type metadata accessor for CloudKitUpdateEligibility()
{
  return objc_opt_self(_TtC12searchpartyd25CloudKitUpdateEligibility);
}

uint64_t sub_1002EFA60()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002EFA84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002EFAB0(uint64_t a1)
{
  uint64_t v1;

  return sub_1002EF650(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1002EFAB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1002EF79C(v1, a1);
}

uint64_t sub_1002EFAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  NSString v14;
  void *v15;
  Swift::String v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  NSString v28;
  Swift::String v30;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v30 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v30 - v8;
  v10 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8(v4);
  v11 = 1;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100ED0480, 1);
  v12 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v12(v4, v0);
  URL.appendingPathComponent(_:)(0x2E65746176697250, 0xED00006E656B6F74);
  v13 = ((uint64_t (*)(char *, uint64_t))v12)(v7, v0);
  URL.path.getter(v13);
  v12((uint64_t)v9, v0);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v4) = objc_msgSend(v10, "fileExistsAtPath:", v14);

  if ((v4 & 1) == 0)
  {
    if (qword_1010E9F98 != -1)
      swift_once(&qword_1010E9F98, sub_1007FDE50);
    v15 = (void *)qword_1011B7830;
    sub_1007EC9B8((uint64_t)v7);
    URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
    v12((uint64_t)v7, v0);
    v16._countAndFlagsBits = 0x65746176697250;
    v16._object = (void *)0xE700000000000000;
    URL.appendPathComponent(_:)(v16);
    v17 = objc_msgSend(v15, "ownerName");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v21._countAndFlagsBits = v18;
    v21._object = v20;
    URL.appendPathComponent(_:)(v21);
    swift_bridgeObjectRelease();
    v22 = objc_msgSend(v15, "zoneName");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v30._countAndFlagsBits = v23;
    v30._object = v25;
    v26._countAndFlagsBits = 0x6E656B6F742ELL;
    v26._object = (void *)0xE600000000000000;
    String.append(_:)(v26);
    URL.appendPathComponent(_:)(v30);
    v27 = swift_bridgeObjectRelease();
    URL.path.getter(v27);
    v12((uint64_t)v9, v0);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v11 = (uint64_t)objc_msgSend(v10, "fileExistsAtPath:", v28);

  }
  return v11;
}

uint64_t sub_1002EFE10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[17];
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v5[0] = &unk_100E32278;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[6] = &unk_100E32290;
    v5[7] = &unk_100E32290;
    v5[8] = &unk_100E32290;
    v5[9] = &unk_100E322A8;
    v5[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[14] = &unk_100E32290;
    v5[15] = &unk_100E32290;
    v5[16] = &unk_100E32290;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = (char *)&value witness table for Builtin.Int64 + 64;
      v8 = (char *)&value witness table for Builtin.NativeObject + 64;
      v9 = &unk_100E32290;
      v10 = v6;
      v11 = &unk_100E322C0;
      return swift_initClassMetadata2(a1, 0, 23, v5, a1 + 112);
    }
  }
  return result;
}

void sub_1002EFF0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id i;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  void *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10000F4A0(0, &qword_1010F4B18, IDSAccount_ptr);
    v5 = sub_1002F68C0();
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = v7;
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v13)
    {
      v22 = *(_QWORD *)(v25 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
      {
LABEL_31:
        v14 = (v22 - 1) & v22;
        v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
        for (i = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15); i; v14 = v9)
        {
          if (objc_msgSend(i, "isActive", v24))
            break;

          v8 = v16;
          v9 = v14;
          if ((v1 & 0x8000000000000000) == 0)
            goto LABEL_11;
LABEL_13:
          v17 = __CocoaSet.Iterator.next()(v6);
          if (!v17)
            break;
          v18 = v17;
          v26 = v17;
          v19 = sub_10000F4A0(0, &qword_1010F4B18, IDSAccount_ptr);
          swift_unknownObjectRetain(v18);
          swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
          i = v28;
          swift_unknownObjectRelease(v18);
          v16 = v8;
        }
        goto LABEL_36;
      }
      v16 = v8 + 5;
      if (v8 + 5 < v13)
      {
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
        {
          v23 = v8 + 6;
          while (v13 != v23)
          {
            v22 = *(_QWORD *)(v25 + 8 * v23++);
            if (v22)
            {
              v16 = v23 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_31;
      }
    }
LABEL_36:
    sub_10007CC38(v1);
    return;
  }
  __break(1u);
}

uint64_t sub_1002F01C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  NSObject v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _BYTE v30[40];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_1010F69E0);
    v3 = (_QWORD *)static _SetStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptySetSingleton;
  }
  v29 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = (v6 - 1) & v6;
      v12 = __clz(__rbit64(v6)) | (v9 << 6);
      v13 = v9;
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v14 >= v28)
      goto LABEL_39;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v13 = v9 + 1;
    if (!v15)
    {
      v13 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_39;
      v15 = *(_QWORD *)(v29 + 8 * v13);
      if (!v15)
      {
        v13 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_39;
        v15 = *(_QWORD *)(v29 + 8 * v13);
        if (!v15)
        {
          v13 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_39;
          v15 = *(_QWORD *)(v29 + 8 * v13);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v11 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v13 << 6);
LABEL_28:
    sub_10010F9DC(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v30);
    v17.isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_1002EAB4C((uint64_t)v30);
    v18 = objc_opt_self(IDSAccount);
    v19 = swift_dynamicCastObjCClass(v17.isa, v18);
    if (!v19)
    {
      swift_release_n(v3, 2);

      sub_10007CC38(a1);
      return 0;
    }
    v20 = v19;
    result = NSObject._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    *(_QWORD *)(v3[6] + 8 * v10) = v20;
    ++v3[2];
    v9 = v13;
    v6 = v11;
  }
  v16 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_39:
    swift_release();
    sub_10007CC38(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v16);
  if (v15)
  {
    v13 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v28)
      goto LABEL_39;
    v15 = *(_QWORD *)(v29 + 8 * v13);
    ++v16;
    if (v15)
      goto LABEL_27;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1002F0504()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v13 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v0, v11);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x8000000100ED0690, v5, v2, v9, 0);
  qword_1010F6880 = result;
  return result;
}

uint64_t sub_1002F06D0(uint64_t a1, unint64_t a2)
{
  id v4;
  NSString v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = objc_allocWithZone((Class)IDSAccountController);
  swift_bridgeObjectRetain(a2);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, "initWithService:", v5);

  if (!v6)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7EC8);
    swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v29 = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain(a2);
      v28 = sub_100016940(a1, a2, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to create IDSAccountController for service: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 0;
  }
  v7 = objc_msgSend(v6, "accounts");
  if (!v7
    || (v8 = v7,
        v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for AnyHashable, &protocol witness table for AnyHashable), v8, v10 = sub_1002F01C8(v9), swift_bridgeObjectRelease(), !v10))
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B7EC8);
    v14 = v6;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v17 = 138412290;
      v29 = (uint64_t)v14;
      v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4, v17 + 12);
      *v18 = v6;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to get accounts from: %@", v17, 0xCu);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v18, 1, v20);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  sub_1002EFF0C(v10);
  v12 = v11;
  swift_bridgeObjectRelease();

  return v12;
}

Swift::Int sub_1002F0A98()
{
  unsigned __int8 *v0;
  int v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

void sub_1002F0ADC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(~*v0);
}

Swift::Int sub_1002F0B08()
{
  unsigned __int8 *v0;
  int v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

_DWORD *sub_1002F0B48@<X0>(_DWORD *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result > 0xFFFFFFFC)
    v2 = ~*result;
  else
    v2 = 3;
  *a2 = v2;
  return result;
}

void sub_1002F0B60(int *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = ~*v1;
}

void sub_1002F0B70(_QWORD *a1@<X8>)
{
  *a1 = &off_101049BE0;
}

uint64_t sub_1002F0B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002F6E00();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002F0BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002F6E00();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002F0C2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t WitnessTable;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  _OWORD v18[2];
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  v1 = v0;
  v2 = *v0;
  v3 = objc_msgSend((id)v0[7], "destination");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v7 = (void *)0x8000000100ED0670;
    v5 = 0xD000000000000011;
  }
  v20 = 60;
  v21 = 0xE100000000000000;
  v19 = v1;
  v8 = *(_OWORD *)(v2 + 96);
  v18[0] = *(_OWORD *)(v2 + 80);
  v18[1] = v8;
  v9 = type metadata accessor for MessagingSession(0, (uint64_t)v18);
  WitnessTable = swift_getWitnessTable(byte_100E32390, v9);
  v11._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v9, WitnessTable);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v9, WitnessTable);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 8250;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v5;
  v15._object = v7;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v20;
}

uint64_t sub_1002F0D88(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_1002F0E04(a1, a2, a3, a4, a5);
  return v11;
}

_QWORD *sub_1002F0E04(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  Swift::String v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t WitnessTable;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  char *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  void *v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  id v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  id v107;
  void *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t (*v143)(uint64_t);
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *aBlock;
  unint64_t v153;
  uint64_t (*v154)(uint64_t);
  void *v155;
  uint64_t (*v156)(_QWORD);
  uint64_t v157;
  _QWORD *v158;

  v6 = v5;
  v124 = a3;
  v151 = a2;
  v139 = a1;
  v9 = (_QWORD *)*v5;
  v10 = type metadata accessor for Date(0);
  v146 = *(_QWORD *)(v10 - 8);
  v147 = v10;
  __chkstk_darwin(v10);
  v123 = (uint64_t)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v12);
  v126 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v149 = *(_QWORD *)(v14 - 8);
  v150 = v14;
  __chkstk_darwin(v14);
  v125 = (char *)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v138);
  v137 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v17);
  v136 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010FAAF0);
  v24 = swift_allocObject(v23, 20, 7);
  v6[5] = v24;
  v127 = qword_1010F6890;
  *(_QWORD *)((char *)v6 + qword_1010F6890) = 0;
  *(_DWORD *)(v24 + 16) = 0;
  v128 = qword_1010F6898;
  *(_QWORD *)((char *)v6 + qword_1010F6898) = 0;
  v129 = qword_1010F68A0;
  *(_QWORD *)((char *)v6 + qword_1010F68A0) = 0;
  v25 = (_QWORD *)((char *)v6 + qword_1010F68A8);
  *v25 = 0;
  v25[1] = 0;
  v130 = v25;
  v26 = qword_1010F68B0;
  v27 = v9[11];
  v28 = (uint64_t (*)(uint64_t))v9[12];
  v29 = v9[13];
  v141 = (_QWORD *)v9[10];
  aBlock = v141;
  v153 = v27;
  v143 = v28;
  v154 = v28;
  v155 = (void *)v29;
  v30 = type metadata accessor for MessagingSession(255, (uint64_t)&aBlock);
  v31 = sub_1000FE094();
  v148 = v30;
  v121 = type metadata accessor for PassthroughSubject(0, v30, &type metadata for MessagingError, v31);
  v32 = PassthroughSubject.__allocating_init()();
  v144 = (void *)v29;
  v145 = v26;
  *(_QWORD *)((char *)v6 + v26) = v32;
  v33 = qword_1010F68B8;
  v142 = v27;
  v35 = type metadata accessor for SessionMessage(255, v27, v29, v34);
  v122 = v31;
  v120 = type metadata accessor for PassthroughSubject(0, v35, &type metadata for MessagingError, v31);
  v36 = PassthroughSubject.__allocating_init()();
  v140 = v33;
  *(_QWORD *)((char *)v6 + v33) = v36;
  *(_QWORD *)((char *)v6 + qword_1010F68C0) = 0;
  *(_QWORD *)((char *)v6 + qword_1010F68C8) = 0;
  *(_QWORD *)((char *)v6 + qword_1010F68D0) = 0;
  *(_QWORD *)((char *)v6 + qword_1010F68E0) = 0;
  v37 = qword_1010F68E8;
  v156 = SharingCircleWildAdvertisementKey.init(key:);
  v157 = 0;
  aBlock = _NSConcreteStackBlock;
  v153 = 1107296256;
  v154 = sub_100016FB8;
  v155 = &unk_101068A20;
  v38 = _Block_copy(&aBlock);
  v158 = _swiftEmptyArrayStorage;
  v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v41 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v158, v40, v41, v20, v39);
  v42 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = DispatchWorkItem.init(flags:block:)(v22, v38);
  *(_QWORD *)((char *)v6 + v37) = v43;
  v44 = v151;
  *(_QWORD *)((char *)v6 + qword_1010F68F0) = 0;
  static Date.distantPast.getter(v43);
  *((_BYTE *)v6 + qword_1010F6900) = 0;
  v132 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  aBlock = 0;
  v153 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  aBlock = (_QWORD *)0xD00000000000002BLL;
  v153 = 0x8000000100ED06C0;
  v45 = *(_QWORD *)(v44 + 16);
  v46 = *(void **)(v44 + 24);
  swift_bridgeObjectRetain(v46);
  v47._countAndFlagsBits = v45;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48 = aBlock;
  v131 = v153;
  v49 = v133;
  v50 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v134 + 104))(v133, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v135);
  v51 = v136;
  static DispatchQoS.unspecified.getter(v50);
  aBlock = _swiftEmptyArrayStorage;
  v52 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v53 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v54 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v55 = v137;
  v56 = v53;
  v57 = v52;
  v59 = v149;
  v58 = v150;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v56, v54, v138, v57);
  v60 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v48, v131, v51, v55, v49, 0);
  v61 = v139;
  v6[6] = v60;
  v6[7] = v61;
  *(_QWORD *)((char *)v6 + qword_1010F6888) = v44;
  v62 = v61;
  swift_retain();
  v63 = objc_msgSend(v62, "sessionID");
  if (!v63)
    goto LABEL_4;
  v64 = v63;
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  v67 = v66;

  v68 = (uint64_t)v126;
  UUID.init(uuidString:)(v65, v67);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v68, 1, v58) == 1)
  {
    sub_100004048(v68, &qword_1010ED860);
LABEL_4:
    aBlock = v141;
    v153 = v142;
    v154 = v143;
    v155 = v144;
    v69 = type metadata accessor for MessagingSession.MessagingSessionError(0, (uint64_t)&aBlock);
    WitnessTable = swift_getWitnessTable("Ig#", v69);
    v71 = swift_allocError(v69, WitnessTable, 0, 0);
    *v72 = 0;
    swift_willThrow(v71);

    swift_release();
    v73 = 0;
    goto LABEL_5;
  }
  v75 = v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v125, v68, v58);
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))((uint64_t)v6 + qword_1011B6CF0, v75, v58);
  v76 = objc_msgSend(v62, "destination");
  if (v76)
  {

    aBlock = *(_QWORD **)((char *)v6 + v140);
    v77 = v120;
    v78 = swift_getWitnessTable((const char *)&protocol conformance descriptor for PassthroughSubject<A, B>, v120);
    *(_QWORD *)((char *)v6 + qword_1011B6D00) = Publisher.eraseToAnyPublisher()(v77, v78);
    aBlock = *(_QWORD **)((char *)v6 + v145);
    v79 = v121;
    v80 = swift_getWitnessTable((const char *)&protocol conformance descriptor for PassthroughSubject<A, B>, v121);
    *(_QWORD *)((char *)v6 + qword_1011B6CF8) = Publisher.eraseToAnyPublisher()(v79, v80);
    v81 = v123;
    static Date.trustedNow.getter(v123);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 32))((uint64_t)v6 + qword_1010F68D8, v81, v147);
    *((double *)v6 + 2) = a4;
    *((double *)v6 + 3) = a5;
    v6[4] = v124;
    v146 = type metadata accessor for Future(0, v148, &type metadata for MessagingError, v122);
    v82 = swift_allocObject(&unk_101068738, 24, 7);
    swift_weakInit(v82 + 16, v6);
    v83 = (_QWORD *)swift_allocObject(&unk_101068A58, 56, 7);
    v84 = v141;
    v85 = v142;
    v83[2] = v141;
    v83[3] = v85;
    v87 = v143;
    v86 = v144;
    v83[4] = v143;
    v83[5] = v86;
    v83[6] = v82;
    v88 = Future.__allocating_init(_:)(sub_1002F6B08);
    *(_QWORD *)((char *)v6 + qword_1010F68A0) = v88;
    v89 = (_QWORD *)v88;
    v147 = v88;
    swift_retain();
    swift_release();
    aBlock = v89;
    v90 = swift_allocObject(&unk_101068738, 24, 7);
    swift_weakInit(v90 + 16, v6);
    v91 = (_QWORD *)swift_allocObject(&unk_101068A80, 56, 7);
    v91[2] = v84;
    v91[3] = v85;
    v91[4] = v87;
    v91[5] = v86;
    v91[6] = v90;
    v92 = swift_allocObject(&unk_101068738, 24, 7);
    swift_weakInit(v92 + 16, v6);
    v93 = (_QWORD *)swift_allocObject(&unk_101068AA8, 56, 7);
    v93[2] = v84;
    v93[3] = v85;
    v93[4] = v87;
    v93[5] = v86;
    v93[6] = v92;
    v94 = v146;
    v95 = swift_getWitnessTable((const char *)&protocol conformance descriptor for Future<A, B>, v146);
    v96 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1002F6B18, v91, sub_1002F6B24, v93, v94, v95);
    swift_release();
    swift_release();
    *(_QWORD *)((char *)v6 + qword_1010F68D0) = v96;
    swift_release();
    v97 = type metadata accessor for MessagingSessionDelegateTrampoline();
    v98 = swift_retain();
    v99 = sub_100D46CF4(v98, v97, v148, (uint64_t)&off_1010686C0);
    swift_release();
    v100 = qword_1010F6898;
    v101 = *(void **)((char *)v6 + qword_1010F6898);
    *(_QWORD *)((char *)v6 + qword_1010F6898) = v99;

    sub_1002F2764(0, 1);
    objc_msgSend((id)v6[7], "setDelegate:queue:", *(_QWORD *)((char *)v6 + v100), v6[6]);
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v149 + 8))(v125, v150);
    return v6;
  }
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v102 = type metadata accessor for Logger(0);
  sub_10001A9E8(v102, (uint64_t)qword_1011B7EC8);
  v103 = v62;
  v104 = Logger.logObject.getter(v103);
  v105 = static os_log_type_t.error.getter(v104);
  if (os_log_type_enabled(v104, v105))
  {
    v106 = (uint8_t *)swift_slowAlloc(12, -1);
    v139 = (_QWORD *)swift_slowAlloc(32, -1);
    v158 = v139;
    *(_DWORD *)v106 = 136315138;
    v107 = objc_msgSend(v103, "destination");
    if (v107)
    {
      v108 = v107;
      v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      v111 = v110;

    }
    else
    {
      v109 = 0;
      v111 = 0;
    }
    aBlock = (_QWORD *)v109;
    v153 = v111;
    v112 = sub_10001A9A8(&qword_1010F6350);
    v113 = String.init<A>(describing:)(&aBlock, v112);
    aBlock = (_QWORD *)sub_100016940(v113, v114, (uint64_t *)&v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v153, v106 + 4, v106 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "Invalid IDSSession, destination is [%s]", v106, 0xCu);
    v115 = v139;
    swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1, -1);
    swift_slowDealloc(v106, -1, -1);

    v59 = v149;
    v58 = v150;
    v75 = v125;
  }
  else
  {

  }
  aBlock = v141;
  v153 = v142;
  v154 = v143;
  v155 = v144;
  v116 = type metadata accessor for MessagingSession.MessagingSessionError(0, (uint64_t)&aBlock);
  v117 = swift_getWitnessTable("Ig#", v116);
  v118 = swift_allocError(v116, v117, 0, 0);
  *v119 = 0;
  swift_willThrow(v118);

  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v75, v58);
  v73 = 1;
LABEL_5:
  swift_release();

  if (v73)
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))((uint64_t)v6 + qword_1011B6CF0, v58);
  swift_release();
  swift_release();

  swift_release();
  sub_10001D8A8(*v130, v130[1]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v146 + 8))((uint64_t)v6 + qword_1010F68F8, v147);
  swift_deallocPartialClassInstance(v6, v148, *(unsigned int *)(*v6 + 48), *(unsigned __int16 *)(*v6 + 52));
  return v6;
}

uint64_t sub_1002F1BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, char);
  uint64_t (**v18)(uint64_t, char);
  uint64_t v19;
  uint64_t v20;
  char v22[24];

  v14 = (_QWORD *)swift_allocObject(&unk_101068AD0, 64, 7);
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a6;
  v14[5] = a7;
  a3 += 16;
  v14[6] = a1;
  v14[7] = a2;
  swift_beginAccess(a3, v22, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v16 = Strong;
    v17 = (uint64_t (*)(uint64_t, char))swift_allocObject(&unk_101068AF8, 64, 7);
    *((_QWORD *)v17 + 2) = a4;
    *((_QWORD *)v17 + 3) = a5;
    *((_QWORD *)v17 + 4) = a6;
    *((_QWORD *)v17 + 5) = a7;
    *((_QWORD *)v17 + 6) = sub_1002F6B68;
    *((_QWORD *)v17 + 7) = v14;
    v18 = (uint64_t (**)(uint64_t, char))(v16 + qword_1010F68A8);
    v19 = *(_QWORD *)(v16 + qword_1010F68A8);
    v20 = *(_QWORD *)(v16 + qword_1010F68A8 + 8);
    *v18 = sub_1002F6BA0;
    v18[1] = v17;
    swift_retain();
    sub_10001D8A8(v19, v20);
  }
  else
  {
    swift_retain();
  }
  return swift_release();
}

uint64_t sub_1002F1CDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + qword_1010F68B0);
    swift_retain(v6);
    swift_release(v5);
    v7 = v2;
    PassthroughSubject.send(completion:)(&v7);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1002F1D60(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + qword_1010F68B0);
    swift_retain(v6);
    swift_release(v5);
    v7 = v2;
    PassthroughSubject.send(_:)(&v7);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1002F1DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EC8);
  v3 = swift_retain_n(v0, 3);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136446466;
    v8 = sub_1002F0C2C();
    v19 = sub_100016940(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v6 + 4, v6 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    v10 = *(_QWORD *)(v0 + qword_1010F6888);
    v11 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain(v12);
    v19 = sub_100016940(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v6 + 14, v6 + 22);
    swift_release_n(v0, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deleted session: %{public}s service: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v0, 3);
  }
  swift_release();

  v13 = v0 + qword_1011B6CF0;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release();
  swift_release();

  swift_release();
  sub_10001D8A8(*(_QWORD *)(v1 + qword_1010F68A8), *(_QWORD *)(v1 + qword_1010F68A8 + 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v15 = v1 + qword_1010F68D8;
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v17(v15, v16);
  swift_release();
  swift_release();
  v17(v1 + qword_1010F68F8, v16);
  return v1;
}

uint64_t sub_1002F2144()
{
  uint64_t v0;

  sub_1002F1DE4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for MessagingSession(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for MessagingSession);
}

uint64_t sub_1002F2174()
{
  uint64_t v0;

  sub_1002F3D70();
  objc_msgSend(*(id *)(v0 + 56), "endSession");
  return sub_100BEC7A0(v0);
}

uint64_t sub_1002F21B8()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 56), "endSession");
  return sub_100BEC7A0(v0);
}

uint64_t sub_1002F21F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  _BYTE v44[12];
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = sub_10001A9A8(&qword_1010F69F8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A9A8(&qword_1010F69C8);
  __chkstk_darwin(v7);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(v1 + qword_1010F6890);
  if (v10)
  {
    v48 = v1;
    v11 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = swift_retain();
    PropertyListEncoder.init()(v12);
    v13 = sub_1000193A4(&qword_1010F6A08, &qword_1010F69C8, protocol conformance descriptor for SessionMessage<A>);
    v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v7, v13);
    v16 = v15;
    swift_release();
    v46 = v16;
    v47 = v10;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B7EC8);
    sub_1002F6918(a1, (uint64_t)v9);
    v21 = v48;
    v22 = swift_retain_n(v48, 4);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc(32, -1);
      v27 = swift_slowAlloc(96, -1);
      v51 = v27;
      *(_DWORD *)v26 = 136446722;
      v45 = v25;
      v28 = sub_1002F0C2C();
      v49 = sub_100016940(v28, v29, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 4, v26 + 12);
      swift_release_n(v21, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      v30 = sub_10037B948();
      v49 = sub_100016940(v30, v31, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v9, &qword_1010F69C8);
      *(_WORD *)(v26 + 22) = 2082;
      swift_release();
      v32 = type metadata accessor for UUID(0);
      v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      v49 = sub_100016940(v34, v35, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 24, v26 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v45, "%{public}s: Sending (Internal): %{public}s over session: %{public}s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy(v27, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {
      swift_release_n(v21, 3);
      sub_100004048((uint64_t)v9, &qword_1010F69C8);

      swift_release();
    }
    v36 = v14;
    v37 = v46;
    v38 = swift_allocObject(&unk_1010689E0, 24, 7);
    swift_weakInit(v38 + 16, v47);
    v39 = (_QWORD *)swift_allocObject(&unk_101068A08, 40, 7);
    v39[2] = v38;
    v39[3] = v36;
    v39[4] = v37;
    v40 = sub_10001A9A8(&qword_1010F6A10);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    sub_10001BBBC(v36, v37);
    v51 = Future.init(_:)(sub_1002F6AF0, v39, v41);
    v42 = sub_1000193A4(qword_1010F6A18, &qword_1010F6A10, (const char *)&protocol conformance descriptor for Future<A, B>);
    v19 = Publisher.eraseToAnyPublisher()(v40, v42);
    swift_release();
    sub_10001BC14(v36, v37);
    swift_release();
  }
  else
  {
    v51 = 4;
    v17 = sub_1000FE094();
    Fail.init(error:)(&v51, &type metadata for () + 1, &type metadata for MessagingError, v17);
    v18 = sub_1000193A4(&qword_1010F6A00, &qword_1010F69F8, (const char *)&protocol conformance descriptor for Fail<A, B>);
    v19 = Publisher.eraseToAnyPublisher()(v3, v18);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v19;
}

uint64_t sub_1002F2764(int a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __objc2_ivar_list **p_ivars;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  void *v29;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  int v36;
  dispatch_queue_t v37;
  _BYTE v38[24];
  uint64_t v39;
  _QWORD *v40;
  void **aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;

  v3 = (uint64_t)v2;
  v36 = a1;
  LODWORD(v37) = a2;
  v4 = *v2;
  v5 = type metadata accessor for DispatchTime(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v34 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101068738, 24, 7);
  swift_weakInit(v14 + 16, v3);
  v15 = swift_allocObject(&unk_1010688F0, 56, 7);
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v4 + 80);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v4 + 88);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(v15 + 48) = v14;
  v45 = sub_1002F6A38;
  v46 = v15;
  aBlock = _NSConcreteStackBlock;
  v42 = 1107296256;
  v43 = sub_100016FB8;
  v44 = &unk_101068908;
  v16 = _Block_copy(&aBlock);
  v40 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v18, v19, v11, v17);
  v20 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = DispatchWorkItem.init(flags:block:)(v13, v16);
  swift_release();
  swift_release();
  v22 = *(_QWORD *)(v3 + 40);
  v38[16] = v36;
  v39 = v3;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002F6A68, v38, v22, &type metadata for () + 1, &type metadata for () + 1);
  v23 = swift_allocObject(&unk_101068940, 32, 7);
  *(_QWORD *)(v23 + 16) = v3;
  *(_QWORD *)(v23 + 24) = v21;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if ((v37 & 1) != 0)
  {
    v25 = qword_1010E9B28;
    swift_retain();
    swift_retain();
    if (v25 != -1)
      swift_once(&qword_1010E9B28, sub_1002F0504);
    v37 = (dispatch_queue_t)qword_1010F6880;
    v26 = swift_allocObject(&unk_101068968, 32, 7);
    *(_QWORD *)(v26 + 16) = sub_1002F6A88;
    *(_QWORD *)(v26 + 24) = v23;
    v27 = swift_allocObject(&unk_101068990, 32, 7);
    v28 = sub_10001D858;
    *(_QWORD *)(v27 + 16) = sub_10001D858;
    *(_QWORD *)(v27 + 24) = v26;
    v45 = sub_10005CBA4;
    v46 = v27;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_10001D8B8;
    v44 = &unk_1010689A8;
    v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v37, v29);
    _Block_release(v29);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v27, "", 92, 287, 33, 1);
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      return result;
    }
    p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
  }
  else
  {
    swift_retain();
    swift_retain();
    result = sub_1002F2C9C(v3, v21);
    v28 = 0;
    v26 = 0;
  }
  if (p_ivars[357] != (__objc2_ivar_list *)-1)
    result = swift_once(&qword_1010E9B28, sub_1002F0504);
  static DispatchTime.now()(result);
  + infix(_:_:)(v8, *(double *)(v3 + 16));
  v32 = v35;
  v33 = *(void (**)(char *, uint64_t))(v34 + 8);
  v33(v8, v35);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v10, v21);
  swift_release();
  swift_release();
  v33(v10, v32);
  return sub_10001D8A8((uint64_t)v28, v26);
}

uint64_t sub_1002F2BD0(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __n128 v10;
  _BYTE v12[24];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a1 & 1) == 0)
  {
    static Date.trustedNow.getter((uint64_t)&v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8]);
    v9 = a2 + qword_1010F68D8;
    v10 = swift_beginAccess(a2 + qword_1010F68D8, v12, 33, 0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v5 + 40))(v9, v8, v4, v10);
    result = swift_endAccess(v12);
    *(_QWORD *)(a2 + qword_1010F68E0) = 0;
  }
  return result;
}

uint64_t sub_1002F2C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = qword_1010F68E8;
  v5 = *(_QWORD *)(a1 + qword_1010F68E8);
  v6 = swift_retain(v5);
  dispatch thunk of DispatchWorkItem.cancel()(v6);
  swift_release(v5);
  v7 = qword_1010F68F0;
  v8 = *(_QWORD *)(a1 + qword_1010F68F0);
  if (v8)
  {
    v9 = swift_retain(*(_QWORD *)(a1 + qword_1010F68F0));
    dispatch thunk of DispatchWorkItem.cancel()(v9);
    swift_release(v8);
    v10 = *(_QWORD *)(a1 + v7);
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(a1 + v7) = 0;
  swift_release(v10);
  v11 = *(_QWORD *)(a1 + v4);
  *(_QWORD *)(a1 + v4) = a2;
  swift_retain(a2);
  return swift_release(v11);
}

uint64_t sub_1002F2D38()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[8];

  v1 = v0;
  v2 = *v0;
  v3 = sub_10001A9A8(&qword_1010F69C8);
  __chkstk_darwin(v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10037B4B0(0, 1, 0, 0xE000000000000000, (uint64_t)v5);
  v11[6] = sub_1002F21F8((uint64_t)v5);
  v6 = swift_allocObject(&unk_101068738, 24, 7);
  swift_weakInit(v6 + 16, v1);
  v7 = swift_allocObject(&unk_101068800, 56, 7);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v2 + 80);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v2 + 88);
  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v2 + 104);
  *(_QWORD *)(v7 + 48) = v6;
  v8 = sub_10001A9A8(&qword_1010F69E8);
  v9 = sub_1000193A4(&qword_1010F69F0, &qword_1010F69E8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_1002F6A00, v7, v8, v9);
  swift_release();
  swift_release();
  return sub_100004048((uint64_t)v5, &qword_1010F69C8);
}

void sub_1002F309C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void **aBlock;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t (*v58)();
  _QWORD *v59;
  _QWORD *v60;
  _BYTE v61[24];

  v53 = type metadata accessor for DispatchTime(0);
  v51 = *(_QWORD *)(v53 - 8);
  v12 = __chkstk_darwin(v53);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v52 = (char *)&v50 - v15;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)a1;
  v20 = *(_BYTE *)(a1 + 8);
  a2 += 16;
  swift_beginAccess(a2, v61, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    if ((v20 & 1) != 0)
    {
      sub_100165D28(v19);
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v23 = type metadata accessor for Logger(0);
      sub_10001A9E8(v23, (uint64_t)qword_1011B7EC8);
      swift_retain();
      sub_1002F69E0(v19, 1);
      swift_retain();
      v24 = sub_1002F69E0(v19, 1);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(22, -1);
        v28 = (void **)swift_slowAlloc(64, -1);
        aBlock = v28;
        *(_DWORD *)v27 = 136446466;
        v29 = sub_1002F0C2C();
        v60 = (_QWORD *)sub_100016940(v29, v30, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v27 + 4, v27 + 12);
        swift_release_n(v22, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        v60 = (_QWORD *)v19;
        v31 = sub_1000FE094();
        v32 = Error.localizedDescription.getter(&type metadata for MessagingError, v31);
        v60 = (_QWORD *)sub_100016940(v32, v33, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        sub_1002F69EC(v19, 1);
        sub_1002F69EC(v19, 1);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s: Error sending .heartbeat: %{public}s", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        sub_1002F69EC(v19, 1);
        swift_release();
      }
      else
      {
        swift_release();
        sub_1002F69EC(v19, 1);
        swift_release_n(v22, 2);
        sub_1002F69EC(v19, 1);
        sub_1002F69EC(v19, 1);

      }
    }
    else
    {
      v34 = swift_allocObject(&unk_101068738, 24, 7);
      swift_weakInit(v34 + 16, v22);
      v35 = (_QWORD *)swift_allocObject(&unk_101068828, 56, 7);
      v35[2] = a3;
      v35[3] = a4;
      v35[4] = a5;
      v35[5] = a6;
      v35[6] = v34;
      v58 = sub_1002F6A10;
      v59 = v35;
      aBlock = _NSConcreteStackBlock;
      v55 = 1107296256;
      v56 = sub_100016FB8;
      v57 = &unk_101068840;
      v36 = _Block_copy(&aBlock);
      v60 = _swiftEmptyArrayStorage;
      v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      swift_retain();
      v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v38, v39, v16, v37);
      v40 = type metadata accessor for DispatchWorkItem(0);
      swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
      v41 = DispatchWorkItem.init(flags:block:)(v18, v36);
      swift_release();
      swift_release();
      if (qword_1010E9B28 != -1)
        swift_once(&qword_1010E9B28, sub_1002F0504);
      v42 = qword_1010F6880;
      v43 = swift_allocObject(&unk_101068878, 32, 7);
      *(_QWORD *)(v43 + 16) = v22;
      *(_QWORD *)(v43 + 24) = v41;
      v44 = swift_allocObject(&unk_1010688A0, 32, 7);
      *(_QWORD *)(v44 + 16) = sub_1002F6A20;
      *(_QWORD *)(v44 + 24) = v43;
      v58 = sub_10005CBA4;
      v59 = (_QWORD *)v44;
      aBlock = _NSConcreteStackBlock;
      v55 = 1107296256;
      v56 = sub_10001D8B8;
      v57 = &unk_1010688B8;
      v45 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v42, v45);
      _Block_release(v45);
      LOBYTE(v42) = swift_isEscapingClosureAtFileLocation(v44, "", 92, 310, 45, 1);
      v46 = swift_release();
      if ((v42 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        static DispatchTime.now()(v46);
        v47 = v52;
        + infix(_:_:)(v14, *(double *)(v22 + 24));
        v48 = *(void (**)(char *, uint64_t))(v51 + 8);
        v49 = v53;
        v48(v14, v53);
        OS_dispatch_queue.asyncAfter(deadline:execute:)(v47, v41);
        swift_release();
        swift_release();
        v48(v47, v49);
        swift_release();
      }
    }
  }
}

uint64_t sub_1002F36AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    a6();
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_1002F3704(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __n128 v9;
  _BYTE v12[24];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static Date.trustedNow.getter((uint64_t)v7);
  v8 = a1 + qword_1010F68F8;
  v9 = swift_beginAccess(a1 + qword_1010F68F8, v12, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v5 + 40))(v8, v7, v4, v9);
  swift_endAccess(v12);
  *(_QWORD *)(a1 + qword_1010F68F0) = a2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1002F37D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[8];

  v1 = sub_10001A9A8(&qword_1010F69C8);
  __chkstk_darwin(v1);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10037B4B0(1, 1, 0, 0xE000000000000000, (uint64_t)v3);
  v7[6] = sub_1002F21F8((uint64_t)v3);
  swift_retain();
  v4 = sub_10001A9A8(&qword_1010F69E8);
  v5 = sub_1000193A4(&qword_1010F69F0, &qword_1010F69E8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_1002F69F8, v0, v4, v5);
  swift_release();
  swift_release();
  return sub_100004048((uint64_t)v3, &qword_1010F69C8);
}

void sub_1002F3AEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *oslog;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 8) == 1)
  {
    v3 = *(_QWORD *)a1;
    sub_100165D28(*(_QWORD *)a1);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7EC8);
    sub_1002F69E0(v3, 1);
    swift_retain();
    sub_1002F69E0(v3, 1);
    v5 = swift_retain();
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = swift_slowAlloc(64, -1);
      v16 = v8;
      *(_DWORD *)v7 = 136446466;
      v9 = sub_1002F0C2C();
      v15 = sub_100016940(v9, v10, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2082;
      v15 = v3;
      v11 = sub_1000FE094();
      v12 = Error.localizedDescription.getter(&type metadata for MessagingError, v11);
      v15 = sub_100016940(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14, v7 + 22);
      swift_bridgeObjectRelease();
      sub_1002F69EC(v3, 1);
      sub_1002F69EC(v3, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "%{public}s: Error sending .heartbeatReply: %{public}s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      sub_1002F69EC(v3, 1);
    }
    else
    {
      sub_1002F69EC(v3, 1);
      swift_release_n(a2, 2);
      sub_1002F69EC(v3, 1);
      sub_1002F69EC(v3, 1);

    }
  }
}

uint64_t sub_1002F3D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for DispatchTime(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v19 - v6;
  v8 = sub_10001A9A8(&qword_1010F69C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002F6990, v0, *(_QWORD *)(v0 + 40), &type metadata for () + 1, &type metadata for Bool);
  if ((v20 & 1) == 0)
  {
    v12 = dispatch_group_create();
    sub_10037B4B0(2, 1, 0, 0xE000000000000000, (uint64_t)v10);
    dispatch_group_enter(v12);
    v20 = sub_1002F21F8((uint64_t)v10);
    v13 = swift_allocObject(&unk_1010687D8, 32, 7);
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v13 + 24) = v0;
    v14 = v12;
    swift_retain();
    v15 = sub_10001A9A8(&qword_1010F69E8);
    v16 = sub_1000193A4(&qword_1010F69F0, &qword_1010F69E8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_1002F69D8, v13, v15, v16);
    swift_release();
    v17 = swift_release();
    static DispatchTime.now()(v17);
    + infix(_:_:)(v5, *(double *)(v0 + 24));
    v18 = *(void (**)(char *, uint64_t))(v2 + 8);
    v18(v5, v1);
    OS_dispatch_group.wait(timeout:)(v7);

    v18(v7, v1);
    return sub_100004048((uint64_t)v10, &qword_1010F69C8);
  }
  return result;
}

void sub_1002F4188(uint64_t a1, dispatch_group_t group, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 8) == 1)
  {
    v5 = *(_QWORD *)a1;
    sub_100165D28(*(_QWORD *)a1);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7EC8);
    sub_1002F69E0(v5, 1);
    swift_retain();
    sub_1002F69E0(v5, 1);
    v7 = swift_retain();
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v18 = v11;
      *(_DWORD *)v10 = 136446466;
      v12 = sub_1002F0C2C();
      v17 = sub_100016940(v12, v13, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2082;
      v17 = v5;
      v14 = sub_1000FE094();
      v15 = Error.localizedDescription.getter(&type metadata for MessagingError, v14);
      v17 = sub_100016940(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease();
      sub_1002F69EC(v5, 1);
      sub_1002F69EC(v5, 1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Error sending .shuttingDown: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      sub_1002F69EC(v5, 1);
    }
    else
    {
      sub_1002F69EC(v5, 1);
      swift_release_n(a3, 2);
      sub_1002F69EC(v5, 1);
      sub_1002F69EC(v5, 1);

    }
  }
  dispatch_group_leave(group);
}

uint64_t sub_1002F4404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21[2];

  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v1 = type metadata accessor for Logger(0);
  sub_10001A9E8(v1, (uint64_t)qword_1011B7EC8);
  v2 = swift_retain_n(v0, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v21[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_1002F0C2C();
    v20 = sub_100016940(v7, v8, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v5 + 4, v5 + 12);
    swift_release_n(v0, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s: heartbeat timed out", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002F6960, v0, *(_QWORD *)(v0 + 40), &type metadata for () + 1, &type metadata for Bool);
  if ((v21[0] & 1) == 0)
    return sub_1002F2764(1, 0);
  v9 = swift_retain_n(v0, 4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v21[0] = v13;
    *(_DWORD *)v12 = 136446466;
    v14 = sub_1002F0C2C();
    v20 = sub_100016940(v14, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v12 + 4, v12 + 12);
    swift_release_n(v0, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    v16 = sub_1002F0C2C();
    v18 = v17;
    swift_release();
    v20 = sub_100016940(v16, v18, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v12 + 14, v12 + 22);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: *** SESSION FAILED [%{public}s] ***", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_release_n(v0, 4);
  }
  return sub_1002F2174();
}

void sub_1002F477C(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010F69C8);
  __chkstk_darwin(v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B7EC8);
  sub_1002F6918((uint64_t)a1, (uint64_t)v6);
  v9 = swift_retain_n(v2, 4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(32, -1);
    v30[0] = swift_slowAlloc(96, -1);
    v32 = v30[0];
    *(_DWORD *)v12 = 136446722;
    v30[1] = v8;
    v13 = sub_1002F0C2C();
    v31 = sub_100016940(v13, v14, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 4, v12 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    v15 = sub_10037B948();
    v31 = sub_100016940(v15, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v6, &qword_1010F69C8);
    *(_WORD *)(v12 + 22) = 2082;
    swift_release();
    v17 = type metadata accessor for UUID(0);
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    v31 = sub_100016940(v19, v20, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 24, v12 + 32);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s: read internal message: %{public}s over session: %{public}s", (uint8_t *)v12, 0x20u);
    v21 = v30[0];
    swift_arrayDestroy(v30[0], 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v22 = *a1;
    if (*a1)
      goto LABEL_5;
LABEL_9:
    sub_1002F37D8();
    return;
  }
  swift_release_n(v2, 3);
  sub_100004048((uint64_t)v6, &qword_1010F69C8);

  swift_release();
  v22 = *a1;
  if (!*a1)
    goto LABEL_9;
LABEL_5:
  if (v22 != 1)
  {
    v23 = swift_retain_n(v2, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v32 = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = sub_1002F0C2C();
      v31 = sub_100016940(v28, v29, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v26 + 4, v26 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s: received .shuttingDown message", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    objc_msgSend(*(id *)(v2 + 56), "endSession");
    sub_100BEC7A0(v2);
  }
}

uint64_t getEnumTagSinglePayload for HeartbeatConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HeartbeatConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HeartbeatConfiguration()
{
  return &type metadata for HeartbeatConfiguration;
}

uint64_t sub_1002F4C1C()
{
  return sub_1002F0C2C();
}

uint64_t sub_1002F4C3C(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v3 = objc_msgSend(*(id *)(a1 + 56), "sessionID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = objc_msgSend(*(id *)(a2 + 56), "sessionID");
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

    if (v7)
    {
      if (v12)
      {
        if (v5 == v10 && v7 == v12)
        {
          swift_bridgeObjectRelease(v7);
          v14 = 1;
        }
        else
        {
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v10, v12, 0);
          swift_bridgeObjectRelease(v7);
        }
        goto LABEL_18;
      }
      goto LABEL_13;
    }
    if (v12)
    {
      v14 = 0;
      goto LABEL_18;
    }
  }
  else if (v7)
  {
LABEL_13:
    v14 = 0;
    v12 = v7;
LABEL_18:
    swift_bridgeObjectRelease(v12);
    return v14 & 1;
  }
  v14 = 1;
  return v14 & 1;
}

void sub_1002F4D48(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*(id *)(v1 + 56), "sessionID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(a1, v5, v7);
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1002F4DE0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1002F4D48((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1002F4E1C()
{
  return sub_1002F4DE0();
}

void sub_1002F4E3C(uint64_t a1)
{
  sub_1002F4D48(a1);
}

Swift::Int sub_1002F4E5C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1002F4D48((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1002F4E98(uint64_t *a1, uint64_t *a2)
{
  return sub_1002F4C3C(*a1, *a2) & 1;
}

void sub_1002F4EB8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = v0;
  v65 = *v0;
  v64 = sub_10001A9A8(&qword_1010F6988);
  v2 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7EC8);
  v6 = swift_retain_n(v0, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v63 = v2;
  if (v9)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v67 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_1002F0C2C();
    v69 = sub_100016940(v12, v13, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v10 + 4, v10 + 12);
    swift_release_n(v0, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s: sessionStarted", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
  v14 = *(_QWORD *)((char *)v0 + qword_1010F68A8);
  if (v14)
  {
    v15 = *(_QWORD *)((char *)v0 + qword_1010F68A8 + 8);
    v16 = (void *)v0[7];
    swift_retain();
    v17 = objc_msgSend(v16, "destination");
    if (v17
      && (v18 = v17,
          v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17),
          v21 = v20,
          v18,
          v17 = (id)_s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v19, v21),
          v22))
    {
      v33 = sub_100BECB84();
      swift_bridgeObjectRelease();
      swift_retain_n(v1, 2);
      v34 = swift_retain_n(v33, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter(v35);
      v37 = v36;
      v62 = v35;
      if (os_log_type_enabled(v35, v36))
      {
        v39 = swift_slowAlloc(22, -1);
        v61 = swift_slowAlloc(64, -1);
        v69 = v61;
        *(_DWORD *)v39 = 136446466;
        v40 = sub_1002F0C2C();
        v67 = sub_100016940(v40, v41, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v39 + 4, v39 + 12);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2082;
        v60 = v39 + 14;
        v67 = 60;
        v68 = 0xE100000000000000;
        v66 = v33;
        v42 = type metadata accessor for MessagingDatagramConnection();
        v43 = sub_100006204(&qword_1010F69A8, (uint64_t (*)(uint64_t))type metadata accessor for MessagingDatagramConnection, (uint64_t)&unk_100E613A0);
        swift_retain();
        v44._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v42, v43);
        HIDWORD(v59) = v37;
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._countAndFlagsBits = 8250;
        v45._object = (void *)0xE200000000000000;
        String.append(_:)(v45);
        v46._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v42, v43);
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 62;
        v47._object = (void *)0xE100000000000000;
        String.append(_:)(v47);
        swift_release();
        v67 = sub_100016940(v67, v68, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v60, v39 + 22);
        swift_release_n(v33, 2);
        swift_bridgeObjectRelease();
        v48 = v62;
        _os_log_impl((void *)&_mh_execute_header, v62, BYTE4(v59), "%{public}s: Created %{public}s", (uint8_t *)v39, 0x16u);
        v49 = v61;
        swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

        swift_release_n(v33, 2);
        swift_release_n(v1, 2);
      }
      v51 = v63;
      v50 = v64;
      *(_QWORD *)((char *)v1 + qword_1010F6890) = v33;
      swift_retain();
      swift_release();
      v67 = v33[6];
      swift_retain();
      v52 = sub_10001A9A8(&qword_1010F6990);
      v53 = sub_1000193A4(&qword_1010F6998, &qword_1010F6990, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.first(where:)(sub_1002F5888, 0, v52, v53);
      swift_release();
      v54 = swift_allocObject(&unk_101068738, 24, 7);
      swift_weakInit(v54 + 16, v1);
      v55 = swift_allocObject(&unk_101068760, 80, 7);
      v56 = v65;
      *(_QWORD *)(v55 + 16) = *(_QWORD *)(v65 + 80);
      *(_OWORD *)(v55 + 24) = *(_OWORD *)(v56 + 88);
      *(_QWORD *)(v55 + 40) = *(_QWORD *)(v56 + 104);
      *(_QWORD *)(v55 + 48) = v54;
      *(_QWORD *)(v55 + 56) = v33;
      *(_QWORD *)(v55 + 64) = v14;
      *(_QWORD *)(v55 + 72) = v15;
      sub_10001D898(v14, v15);
      v57 = sub_1000193A4(&qword_1010F69A0, &qword_1010F6988, (const char *)&protocol conformance descriptor for Publishers.FirstWhere<A>);
      swift_retain();
      v58 = Publisher<>.sink(receiveValue:)(sub_1002F6808, v55, v50, v57);
      swift_release();
      sub_10001D8A8(v14, v15);
      swift_release();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v4, v50);
      *(_QWORD *)((char *)v1 + qword_1010F68C0) = v58;
      swift_release();
    }
    else
    {
      v23 = Logger.logObject.getter(v17);
      v24 = static os_log_type_t.error.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Invalid destinationString!", v25, 2u);
        swift_slowDealloc(v25, -1, -1);

        sub_10001D8A8(v14, v15);
      }
      else
      {
        sub_10001D8A8(v14, v15);

      }
    }
  }
  else
  {
    v26 = swift_retain_n(v0, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v67 = v30;
      *(_DWORD *)v29 = 136446210;
      v31 = sub_1002F0C2C();
      v69 = sub_100016940(v31, v32, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v29 + 4, v29 + 12);
      swift_release_n(v0, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: sessionStarted called with no promise!", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_release_n(v0, 2);
    }
  }
}

BOOL sub_1002F5888(_QWORD *a1)
{
  return *a1 == 3;
}

uint64_t sub_1002F5898(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v13 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0, 0);
  result = swift_weakLoadStrong(v13);
  if (result)
  {
    v15 = result;
    v16 = swift_allocObject(&unk_101068738, 24, 7);
    swift_weakInit(v16 + 16, v15);
    v17 = (_QWORD *)swift_allocObject(&unk_101068788, 56, 7);
    v17[2] = a6;
    v17[3] = a7;
    v17[4] = a8;
    v17[5] = a9;
    v17[6] = v16;
    v18 = swift_allocObject(&unk_101068738, 24, 7);
    swift_weakInit(v18 + 16, v15);
    v19 = (_QWORD *)swift_allocObject(&unk_1010687B0, 56, 7);
    v19[2] = a6;
    v19[3] = a7;
    v19[4] = a8;
    v19[5] = a9;
    v19[6] = v18;
    swift_retain();
    v20 = sub_10001A9A8(&qword_1010F69B0);
    v21 = sub_1000193A4(&qword_1010F69B8, &qword_1010F69B0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v22 = Publisher.sink(receiveCompletion:receiveValue:)(sub_1002F6838, v17, sub_1002F6868, v19, v20, v21);
    swift_release();
    swift_release();
    swift_release();
    *(_QWORD *)(v15 + qword_1010F68C8) = v22;
    swift_release();
    v23 = swift_retain();
    a4(v23, 0);
    swift_release();
    *(_QWORD *)(v15 + qword_1010F68C0) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002F5A84(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v7 = v2;
    PassthroughSubject.send(completion:)(&v7);
    v6 = *(_QWORD *)(v5 + qword_1010F68C8);
    *(_QWORD *)(v5 + qword_1010F68C8) = 0;
    swift_release(v5);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_1002F5B10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[12];
  _BYTE v37[24];

  v10 = type metadata accessor for UUID(0);
  v36[4] = *(_QWORD *)(v10 - 8);
  v36[5] = v10;
  __chkstk_darwin(v10);
  v36[3] = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SessionMessage(255, a4, a6, v12);
  v14 = type metadata accessor for Optional(0, v13);
  v36[7] = *(_QWORD *)(v14 - 8);
  v36[8] = v14;
  v15 = __chkstk_darwin(v14);
  v36[10] = (char *)v36 - v16;
  v36[11] = *(_QWORD *)(v13 - 8);
  v17 = __chkstk_darwin(v15);
  v36[2] = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v36[6] = (char *)v36 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)v36 - v21;
  v23 = sub_10001A9A8(&qword_1010F69C0);
  __chkstk_darwin(v23);
  v25 = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010F69C8);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)v36 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *a1;
  v31 = a1[1];
  a2 += 16;
  swift_beginAccess(a2, v37, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v36[1] = v22;
    v36[9] = v13;
    sub_1002F2764(0, 1);
    v33 = type metadata accessor for PropertyListDecoder(0);
    v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    PropertyListDecoder.init()(v34);
    v35 = sub_1000193A4(&qword_1010F69D0, &qword_1010F69C8, protocol conformance descriptor for SessionMessage<A>);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v26, v30, v31, v26, v35);
    swift_release();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v25, 0, 1, v26);
    sub_1002F6878((uint64_t)v25, (uint64_t)v29);
    sub_1002F477C(v29);
    swift_release();
    return sub_100004048((uint64_t)v29, &qword_1010F69C8);
  }
  return result;
}

uint64_t sub_1002F61EC(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[8];
  uint64_t v29;
  uint64_t aBlock[6];

  v3 = v2;
  if (!a2)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
    v16 = swift_retain_n(v2, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(18, -1);
      v20 = swift_slowAlloc(32, -1);
      aBlock[0] = v20;
      *(_DWORD *)v19 = 136446466;
      v21 = sub_1002F0C2C();
      v29 = sub_100016940(v21, v22, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v19 + 4, v19 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 1024;
      LODWORD(v29) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v19 + 14, v19 + 18);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s: session ended with reason: %u", (uint8_t *)v19, 0x12u);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    goto LABEL_11;
  }
  v5 = a2;
  swift_errorRetain(a2);
  if (qword_1010EA3C8 != -1)
    goto LABEL_15;
  while (1)
  {
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7EC8);
    swift_errorRetain(v5);
    swift_retain();
    swift_errorRetain(v5);
    v7 = swift_retain();
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(28, -1);
      v26 = swift_slowAlloc(64, -1);
      aBlock[0] = v26;
      *(_DWORD *)v10 = 136446722;
      v11 = sub_1002F0C2C();
      v29 = sub_100016940(v11, v12, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v10 + 4, v10 + 12);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 1024;
      LODWORD(v29) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v10 + 14, v10 + 18);
      *(_WORD *)(v10 + 18) = 2082;
      swift_getErrorValue(v5, v28, v27);
      v13 = Error.localizedDescription.getter(v27[1], v27[2]);
      v29 = sub_100016940(v13, v14, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v10 + 20, v10 + 28);
      swift_bridgeObjectRelease();
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: session ended with reason: %u error: %{public}s", (uint8_t *)v10, 0x1Cu);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      swift_release_n(v3, 2);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
LABEL_11:
    if (qword_1010E9B28 != -1)
      swift_once(&qword_1010E9B28, sub_1002F0504);
    v23 = qword_1010F6880;
    v24 = swift_allocObject(&unk_1010686E8, 32, 7);
    *(_QWORD *)(v24 + 16) = sub_1002F6798;
    *(_QWORD *)(v24 + 24) = v3;
    aBlock[4] = (uint64_t)sub_10001D850;
    aBlock[5] = v24;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10001D8B8;
    aBlock[3] = (uint64_t)&unk_101068700;
    v5 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v23, v5);
    _Block_release(v5);
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v24, "", 92, 507, 29, 1);
    swift_release();
    result = swift_release();
    if ((v23 & 1) == 0)
      break;
    __break(1u);
LABEL_15:
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  }
  return result;
}

uint64_t sub_1002F66DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v2);
  swift_release();
  v3 = qword_1010F68F0;
  if (*(_QWORD *)(a1 + qword_1010F68F0))
  {
    v4 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v4);
    swift_release();
  }
  *(_QWORD *)(a1 + v3) = 0;
  swift_release();
  *(_QWORD *)(a1 + qword_1010F68A0) = 0;
  swift_release();
  v5 = (_QWORD *)(a1 + qword_1010F68A8);
  v6 = *(_QWORD *)(a1 + qword_1010F68A8);
  v7 = *(_QWORD *)(a1 + qword_1010F68A8 + 8);
  *v5 = 0;
  v5[1] = 0;
  return sub_10001D8A8(v6, v7);
}

uint64_t sub_1002F6788(uint64_t a1)
{
  return swift_getWitnessTable("1i#", a1);
}

uint64_t sub_1002F6798()
{
  uint64_t v0;

  return sub_1002F66DC(v0);
}

uint64_t sub_1002F67A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F67B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002F67D4()
{
  _QWORD *v0;

  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1002F6808(uint64_t a1)
{
  uint64_t v1;

  return sub_1002F5898(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(uint64_t, _QWORD))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1002F6838(uint64_t a1)
{
  return sub_1002F6B30(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002F5A84);
}

uint64_t sub_1002F6844()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002F6868(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1002F5B10(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1002F6878(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F69C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002F68C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F69D8;
  if (!qword_1010F69D8)
  {
    v1 = sub_10000F4A0(255, &qword_1010F4B18, IDSAccount_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1010F69D8);
  }
  return result;
}

uint64_t sub_1002F6918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F69C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1002F6960(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + qword_1010F68E0);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + qword_1010F68E0) = v4;
    *a1 = v4 >= *(_QWORD *)(v1 + 32);
  }
}

void sub_1002F6990(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + qword_1010F6900);
  *(_BYTE *)(v1 + qword_1010F6900) = 1;
  *a1 = v2;
}

uint64_t sub_1002F69AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1002F69D8(uint64_t a1)
{
  uint64_t v1;

  sub_1002F4188(a1, *(dispatch_group_t *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1002F69E0(unint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_100165D28(result);
  return result;
}

unint64_t sub_1002F69EC(unint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_100165D38(result);
  return result;
}

void sub_1002F69F8(uint64_t a1)
{
  uint64_t v1;

  sub_1002F3AEC(a1, v1);
}

void sub_1002F6A00(uint64_t a1)
{
  uint64_t *v1;

  sub_1002F309C(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1002F6A10()
{
  return sub_1002F6A44((void (*)(void))sub_1002F4404);
}

uint64_t sub_1002F6A20()
{
  uint64_t v0;

  return sub_1002F3704(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1002F6A28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F6A38()
{
  return sub_1002F6A44((void (*)(void))sub_1002F2D38);
}

uint64_t sub_1002F6A44(void (*a1)(void))
{
  uint64_t *v1;

  return sub_1002F36AC(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1002F6A68()
{
  uint64_t v0;

  return sub_1002F2BD0(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1002F6A88()
{
  uint64_t v0;

  return sub_1002F2C9C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1002F6A90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F6AB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002F6AC4()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1002F6AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100B34C60(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t type metadata accessor for MessagingSession.MessagingSessionError(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for MessagingSession.MessagingSessionError);
}

uint64_t sub_1002F6B08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_1002F1BCC(a1, a2, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1002F6B18(uint64_t a1)
{
  return sub_1002F6B30(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002F1CDC);
}

uint64_t sub_1002F6B24(uint64_t a1)
{
  return sub_1002F6B30(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002F1D60);
}

uint64_t sub_1002F6B30(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_1002F6B44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1002F6B68(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 48);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1002F6BA0(uint64_t a1, char a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, _QWORD))(v2 + 48))(a1, a2 & 1);
  return 0;
}

uint64_t sub_1002F6BC8(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UserNotificationPublisher.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InternalSessionMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002F6CC4 + 4 * byte_100E32215[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002F6CF8 + 4 * asc_100E32210[v4]))();
}

uint64_t sub_1002F6CF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F6D00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002F6D08);
  return result;
}

uint64_t sub_1002F6D14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002F6D1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1002F6D20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002F6D28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalSessionMessageType()
{
  return &type metadata for InternalSessionMessageType;
}

unint64_t sub_1002F6D44(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1002F6D78();
  a1[2] = sub_1002F6DBC();
  result = sub_1002F6E00();
  a1[3] = result;
  return result;
}

unint64_t sub_1002F6D78()
{
  unint64_t result;

  result = qword_1010F6AA0;
  if (!qword_1010F6AA0)
  {
    result = swift_getWitnessTable(byte_100E32434, &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1010F6AA0);
  }
  return result;
}

unint64_t sub_1002F6DBC()
{
  unint64_t result;

  result = qword_1010F6AA8;
  if (!qword_1010F6AA8)
  {
    result = swift_getWitnessTable("-h#", &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1010F6AA8);
  }
  return result;
}

unint64_t sub_1002F6E00()
{
  unint64_t result;

  result = qword_1010F6AB0;
  if (!qword_1010F6AB0)
  {
    result = swift_getWitnessTable("!h#", &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1010F6AB0);
  }
  return result;
}

uint64_t sub_1002F6E44()
{
  return sub_1000193A4(&qword_1010F6AB8, &qword_1010F6AC0, (const char *)&protocol conformance descriptor for [A]);
}

unint64_t sub_1002F6E74()
{
  unint64_t result;

  result = qword_1010F6AC8;
  if (!qword_1010F6AC8)
  {
    result = swift_getWitnessTable("1g#", &type metadata for InternalSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1010F6AC8);
  }
  return result;
}

void *PairingNonce.length.unsafeMutableAddressor()
{
  return &static PairingNonce.length;
}

void sub_1002F6F10(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F6F4C(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 72)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F701CLL);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 72;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F702C(uint64_t a1, uint64_t a2)
{
  sub_1002F76FC(a1, a2);
}

void sub_1002F7040(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F707C(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 113)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F714CLL);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 113;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F715C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F7198(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 114)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F7268);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 114;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F7278(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F72B4(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 89)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F7384);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 89;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F7394(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F73D0(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 28)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F74A0);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 28;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F74B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F74EC(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 60)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F75BCLL);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 60;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F75CC(uint64_t a1, uint64_t a2)
{
  sub_1002F75E0(a1, a2);
}

void sub_1002F75E0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F761C(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 6)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F76ECLL);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 6;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F76FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F7738(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 32)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F7808);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 32;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

void sub_1002F7818(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1002F7854()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1000D95EC();
  v3 = swift_allocError(&type metadata for KeyRepresentableError, v2, 0, 0);
  *(_QWORD *)v4 = 1326;
  *(_QWORD *)(v4 + 8) = BYTE6(v0);
  *(_BYTE *)(v4 + 16) = 0;
  swift_willThrow(v3);
  return sub_10001BC14(v1, v0);
}

void sub_1002F7924(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1002F7960()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1000D95EC();
  v3 = swift_allocError(&type metadata for KeyRepresentableError, v2, 0, 0);
  *(_QWORD *)v4 = 1286;
  *(_QWORD *)(v4 + 8) = BYTE6(v0);
  *(_BYTE *)(v4 + 16) = 0;
  swift_willThrow(v3);
  return sub_10001BC14(v1, v0);
}

void sub_1002F7A30(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1002F7A6C(uint64_t *a1@<X8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v2) == 85)
  {
    *a1 = v3;
    a1[1] = v2;
    return;
  }
  if (!v1)
  {
    v4 = BYTE6(v2);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v6 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    v4 = v5 - v6;
    if (!__OFSUB__(v5, v6))
      goto LABEL_9;
LABEL_11:
    __break(1u);
    JUMPOUT(0x1002F7B3CLL);
  }
  if (__OFSUB__(HIDWORD(v3), (_DWORD)v3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = HIDWORD(v3) - (int)v3;
LABEL_9:
  v7 = sub_1000D95EC();
  v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
  *(_QWORD *)v9 = 85;
  *(_QWORD *)(v9 + 8) = v4;
  *(_BYTE *)(v9 + 16) = 0;
  swift_willThrow(v8);
  sub_10001BC14(v3, v2);
}

uint64_t KeyRepresentable<>.init(data:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 48);
  sub_10001BBBC(a1, a2);
  v10(a3, v9);
  sub_1002FB59C(a1, a2);
  if (!v4)
    (*(void (**)(void))(a4 + 24))();
  return sub_10001BC14(a1, a2);
}

void *CollaborativeKeyGen.v1.C2.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v1.C2.length;
}

void sub_1002F7C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x1002F7D54);
}

uint64_t sub_1002F7D88(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for OwnedDeviceKeyRecord(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

int64_t sub_1002F7DF8(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t Advertisement.nearOwner.getter(uint64_t a1, unint64_t a2)
{
  return sub_1002F97CC(a1, a2, 6);
}

void *Advertisement.length.unsafeMutableAddressor()
{
  return &static Advertisement.length;
}

void *NearOwnerAdvertisement.length.unsafeMutableAddressor()
{
  return &static NearOwnerAdvertisement.length;
}

uint64_t StandardPublicKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_1002FB894(a1, a2);
}

uint64_t Advertisement.hashed.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for HashAlgorithm(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for HashAlgorithm.sha256(_:), v4);
  v8 = Data.hash(algorithm:)(v7, a1, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t KeyRepresenting.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 40))();
}

SecKeyRef sub_1002F7F34(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __CFString *v6;
  const __CFString *v7;
  char isUniquelyReferenced_nonNull_native;
  __CFString *v9;
  const __CFString *v10;
  char v11;
  const __CFData *isa;
  const __CFDictionary *v13;
  SecKeyRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD v27[2];
  CFErrorRef error[3];
  uint64_t v29;

  type metadata accessor for CFString(0);
  v5 = v4;
  v29 = v4;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_10010F90C(error, v27);
  v6 = (id)kSecAttrKeyType;
  v7 = (id)kSecAttrKeyTypeEC;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10010AA84(v27, v6, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  v29 = v5;
  error[0] = (CFErrorRef)kSecAttrKeyClassPrivate;
  sub_10010F90C(error, v27);
  v9 = (id)kSecAttrKeyClass;
  v10 = (id)kSecAttrKeyClassPrivate;
  v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10010AA84(v27, v9, v11);

  swift_bridgeObjectRelease();
  error[0] = 0;
  sub_10001BBBC(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001BC14(a1, a2);
  sub_10000F4A0(0, &qword_1010F7800, NSObject_ptr);
  sub_100301D88();
  v13 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14 = SecKeyCreateWithData(isa, v13, error);

  if (!v14)
    goto LABEL_4;
  if (error[0])
  {

LABEL_4:
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    *(CFErrorRef *)&v27[0] = error[0];
    v17 = sub_10001A9A8(&qword_1010F74F0);
    v18 = String.init<A>(describing:)(v27, v17);
    v20 = v19;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10001AA00();
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    v21 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v22 = (void *)static OS_os_log.default.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:type:_:)("CryptoUtil: decryption: could not create SecKey for private key: %@", 67, 2, &_mh_execute_header, v22, v23, v16, _swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();

    v24 = sub_100301DE0();
    v25 = swift_allocError(&type metadata for PrivateKey.PrivateKeyError, v24, 0, 0);
    swift_willThrow(v25);
  }
  return v14;
}

uint64_t PrivateKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_1002FB3AC(a1, a2);
}

void PrivateKey.publicKey.getter(uint64_t a1, unint64_t a2)
{
  sub_1002F8DC0(a1, a2);
}

uint64_t PublicKey.advertisement.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  sub_10001BBBC(a1, a2);
  v4 = sub_1007E6F8C(a1, a2);
  v6 = v5;
  sub_10001BC14(a1, a2);
  sub_1002F7394(v4, v6);
  return v8;
}

uint64_t NearOwnerAdvertisement.init(macAddress:ek:)(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;

  v4 = MACAddress.data.getter(a1);
  v6 = v5;
  sub_10001BBBC(v4, v5);
  v7 = Data.subscript.getter(0, v4, v6);
  sub_10001BC14(v4, v6);
  Data._Representation.subscript.setter(v7 & 0x3F | (a2 << 6), 0);
  v8 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v4;
}

uint64_t Advertisement.init(macAddress:pubKey2:ek:)(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v6;

  v6 = sub_1002FBD4C(a1, a2, a3, a4);
  sub_10001BC14(a2, a3);
  return v6;
}

void KeyRepresenting.init(rawValue:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  unint64_t v7;

  v5 = *(_QWORD *)(a4 + 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 48);
  v7 = a2 >> 62;
  sub_10001BBBC(a1, a2);
  v6(a3, v5);
  __asm { BR              X9 }
}

uint64_t sub_1002F84BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (BYTE6(v3) == a1)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v5 + 24))(v4, v3, v1, v5);
    v6 = 0;
  }
  else
  {
    sub_10001BC14(v4, v3);
    v6 = 1;
  }
  sub_10001BC14(v4, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v2, v6, 1, v1);
}

void *SharedSecretKey.length.unsafeMutableAddressor()
{
  return &static SharedSecretKey.length;
}

uint64_t Advertisement.macAddress.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001BBBC(a1, a2);
  v10 = static MACAddress.length.getter(v9);
  sub_1002F7C0C(v10, a1, a2);
  MACAddress.init(data:type:)(v14);
  v11 = type metadata accessor for MACAddress(0);
  v12 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v8, v11);
  __break(1u);
  return result;
}

void *RefKey.length.unsafeMutableAddressor()
{
  return &static RefKey.length;
}

void *SikPub.length.unsafeMutableAddressor()
{
  return &static SikPub.length;
}

void *CollaborativeKeyGen.C1.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.C1.length;
}

void *CollaborativeKeyGen.v2.C2.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v2.C2.length;
}

uint64_t Advertisement.hint.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v4 = sub_10001BBBC(a1, a2);
  v5 = static MACAddress.length.getter(v4);
  sub_1002F7C0C(v5, a1, a2);
  v6 = Data.subscript.getter(5);
  sub_10001BC14(v8, v9);
  return v6;
}

uint64_t PublicKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_1002FB6C8(a1, a2);
}

uint64_t sub_1002F8720(uint64_t a1, unint64_t a2, char a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v11;

  if (!a3)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v11 = 0xD000000000000019;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x6C6175746361202CLL;
    v8._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    return v11;
  }
  if (a3 == 1)
  {
    sub_10001BBBC(a1, a2);
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v11 = 0xD000000000000018;
    v5._countAndFlagsBits = Data.hexString.getter(a1, a2);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    sub_100301F2C(a1, a2, 1);
    return v11;
  }
  if (a1 | a2)
    return 0x64696C61766E692ELL;
  else
    return 0x7479426F72657A2ELL;
}

uint64_t sub_1002F88F8()
{
  uint64_t v0;

  return sub_1002F8720(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t KeyRepresentableInternal.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_10001BBBC(a2, a3);
  Data.hash(into:)(a1, a2, a3);
  return sub_10001BC14(a2, a3);
}

uint64_t sub_1002F8958()
{
  return 1635017060;
}

uint64_t sub_1002F8968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1002F89EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FBE60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F8A14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FBE60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t KeyRepresentableInternal.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_10001A9A8(&qword_1010F6B00);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_1002FBE60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyRepresentableInternal.CodingKeys, &type metadata for KeyRepresentableInternal.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int KeyRepresentableInternal.hashValue.getter(uint64_t a1, unint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  sub_10001BBBC(a1, a2);
  Data.hash(into:)(v5, a1, a2);
  sub_10001BC14(a1, a2);
  return Hasher._finalize()();
}

_QWORD *KeyRepresentableInternal.init(from:)(_QWORD *a1)
{
  return sub_1002FBEA4(a1);
}

_QWORD *sub_1002F8BB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1002FBEA4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002F8BE0(_QWORD *a1)
{
  uint64_t *v1;

  return KeyRepresentableInternal.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002F8BF8(uint64_t *a1)
{
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
}

uint64_t SecurityKeyRepresentable.init(rawValue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(void))(a2 + 16))();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a3, 0, 1, a1);
}

id sub_1002F8C54@<X0>(void **a1@<X8>)
{
  void **v1;
  void *v2;

  v2 = *v1;
  *a1 = *v1;
  return v2;
}

void *CommitmentKey.length.unsafeMutableAddressor()
{
  return &static CommitmentKey.length;
}

uint64_t static SharingCircleWildAdvertisementKey.length.getter()
{
  return 32;
}

uint64_t sub_1002F8C74()
{
  return 7955819;
}

uint64_t sub_1002F8C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FBFC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F8CB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FBFC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CommitmentKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B10, (uint64_t (*)(void))sub_1002FBFC8, (uint64_t)&type metadata for CommitmentKey.CodingKeys);
}

_QWORD *CommitmentKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75E8, (uint64_t (*)(void))sub_1002FBFC8, (uint64_t)&type metadata for CommitmentKey.CodingKeys);
}

_QWORD *sub_1002F8D30@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75E8, (uint64_t (*)(void))sub_1002FBFC8, (uint64_t)&type metadata for CommitmentKey.CodingKeys, a2);
}

uint64_t sub_1002F8D5C(_QWORD *a1)
{
  uint64_t *v1;

  return CommitmentKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1002F8D80(_QWORD *a1)
{
  return sub_10033F0A4(*a1, a1[1]);
}

void *EncryptedPrivateKey.length.unsafeMutableAddressor()
{
  return &static EncryptedPrivateKey.length;
}

uint64_t static EncryptedPrivateKey.length.getter()
{
  return 174;
}

void EncryptedPrivateKey.init(data:)(uint64_t a1, uint64_t a2)
{
  sub_1002FC050(a1, a2);
}

void EncryptedPrivateKey.publicKey.getter(uint64_t a1, unint64_t a2)
{
  sub_1002F8DC0(a1, a2);
}

void sub_1002F8DC0(uint64_t a1, unint64_t a2)
{
  sub_10001BBBC(a1, a2);
  sub_1002F7C0C(57, a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_1002F8E18(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) != 57)
  {
    sub_10001BC14(result, a2);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000018, 0x8000000100EC7A70, "searchpartyd/KeyRepresentable.swift", 35, 2, v2, 0);
    __break(1u);
    JUMPOUT(0x1002F8EB0);
  }
  return result;
}

void *PublicKey.length.unsafeMutableAddressor()
{
  return &static PublicKey.length;
}

uint64_t sub_1002F8ECC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC16C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F8EF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC16C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedPrivateKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B28, (uint64_t (*)(void))sub_1002FC16C, (uint64_t)&type metadata for EncryptedPrivateKey.CodingKeys);
}

_QWORD *EncryptedPrivateKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75E0, (uint64_t (*)(void))sub_1002FC16C, (uint64_t)&type metadata for EncryptedPrivateKey.CodingKeys);
}

_QWORD *sub_1002F8F74@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75E0, (uint64_t (*)(void))sub_1002FC16C, (uint64_t)&type metadata for EncryptedPrivateKey.CodingKeys, a2);
}

_QWORD *sub_1002F8FA0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;

  result = sub_1002FC8DC(a1, a2, a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }
  return result;
}

uint64_t sub_1002F8FD4(_QWORD *a1)
{
  uint64_t *v1;

  return EncryptedPrivateKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002F8FEC(uint64_t *a1)
{
  sub_10033F0A8(*a1, a1[1]);
}

void *PrivateKey.length.unsafeMutableAddressor()
{
  return &static PrivateKey.length;
}

uint64_t static CollaborativeKeyGen.v2.C3.length.getter()
{
  return 85;
}

void sub_1002F900C(uint64_t a1)
{
  sub_1002F926C(COERCE_DOUBLE(0x5500000000), a1, 85, (double *)&qword_1010F6AD0, (uint64_t *)algn_1010F6AD8);
}

uint64_t sub_1002F9028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC1B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC1B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PrivateKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B38, (uint64_t (*)(void))sub_1002FC1B0, (uint64_t)&type metadata for PrivateKey.CodingKeys);
}

_QWORD *PrivateKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75D8, (uint64_t (*)(void))sub_1002FC1B0, (uint64_t)&type metadata for PrivateKey.CodingKeys);
}

_QWORD *sub_1002F90D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75D8, (uint64_t (*)(void))sub_1002FC1B0, (uint64_t)&type metadata for PrivateKey.CodingKeys, a2);
}

uint64_t sub_1002F90FC(_QWORD *a1)
{
  uint64_t *v1;

  return PrivateKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1002F9114(_QWORD *a1)
{
  return sub_10033F138(*a1, a1[1]);
}

void *StandardPublicKey.length.unsafeMutableAddressor()
{
  return &static StandardPublicKey.length;
}

uint64_t static StandardPublicKey.length.getter()
{
  return 65;
}

void sub_1002F9134(uint64_t a1)
{
  sub_1002F926C(COERCE_DOUBLE(0x4100000000), a1, 65, (double *)&qword_1010F6AE0, (uint64_t *)algn_1010F6AE8);
}

uint64_t sub_1002F9150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC1F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9178(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC1F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t StandardPublicKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B48, (uint64_t (*)(void))sub_1002FC1F4, (uint64_t)&type metadata for StandardPublicKey.CodingKeys);
}

_QWORD *StandardPublicKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75D0, (uint64_t (*)(void))sub_1002FC1F4, (uint64_t)&type metadata for StandardPublicKey.CodingKeys);
}

_QWORD *sub_1002F91F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75D0, (uint64_t (*)(void))sub_1002FC1F4, (uint64_t)&type metadata for StandardPublicKey.CodingKeys, a2);
}

uint64_t sub_1002F9224(_QWORD *a1)
{
  uint64_t *v1;

  return StandardPublicKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002F923C(uint64_t *a1)
{
  sub_10033F13C(*a1, a1[1]);
}

uint64_t static PublicKey.length.getter()
{
  return 57;
}

void sub_1002F9250(uint64_t a1)
{
  sub_1002F926C(COERCE_DOUBLE(0x3900000000), a1, 57, (double *)&qword_1010F6AF0, (uint64_t *)algn_1010F6AF8);
}

void sub_1002F926C(double a1, uint64_t a2, uint64_t a3, double *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  v9 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v11 = a1;
  v12 = __DataStorage.init(length:)(a3);
  sub_10051ED28((int *)&v11, 0);
  v10 = v12 | 0x4000000000000000;
  *a4 = v11;
  *a5 = v10;
}

uint64_t sub_1002F92F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC238();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9320(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC238();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PublicKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B58, (uint64_t (*)(void))sub_1002FC238, (uint64_t)&type metadata for PublicKey.CodingKeys);
}

_QWORD *PublicKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75C8, (uint64_t (*)(void))sub_1002FC238, (uint64_t)&type metadata for PublicKey.CodingKeys);
}

_QWORD *sub_1002F93A0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75C8, (uint64_t (*)(void))sub_1002FC238, (uint64_t)&type metadata for PublicKey.CodingKeys, a2);
}

uint64_t sub_1002F93CC(_QWORD *a1)
{
  uint64_t *v1;

  return PublicKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002F93E4(uint64_t *a1)
{
  sub_10033F1CC(*a1, a1[1]);
}

uint64_t static NearOwnerAdvertisement.length.getter()
{
  return 6;
}

uint64_t NearOwnerAdvertisement.description.getter(uint64_t a1, uint64_t a2)
{
  return sub_1002F983C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1001B5DBC, (uint64_t)&type metadata for NearOwnerAdvertisement);
}

uint64_t sub_1002F940C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC27C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9434(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC27C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NearOwnerAdvertisement.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B68, (uint64_t (*)(void))sub_1002FC27C, (uint64_t)&type metadata for NearOwnerAdvertisement.CodingKeys);
}

_QWORD *NearOwnerAdvertisement.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75C0, (uint64_t (*)(void))sub_1002FC27C, (uint64_t)&type metadata for NearOwnerAdvertisement.CodingKeys);
}

uint64_t sub_1002F94B4(uint64_t a1, uint64_t a2)
{
  return sub_1002F992C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1001B5DBC);
}

_QWORD *sub_1002F94C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75C0, (uint64_t (*)(void))sub_1002FC27C, (uint64_t)&type metadata for NearOwnerAdvertisement.CodingKeys, a2);
}

uint64_t sub_1002F94EC(_QWORD *a1)
{
  uint64_t *v1;

  return NearOwnerAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1002F9504(_QWORD *a1)
{
  return sub_10033F25C(*a1, a1[1]);
}

uint64_t static Advertisement.length.getter()
{
  return 28;
}

uint64_t Advertisement.address.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_10001BBBC(a1, a2);
  v5 = static MACAddress.length.getter(v4);
  sub_1002F7C0C(v5, a1, a2);
  return v7;
}

uint64_t sub_1002F955C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[5];
  uint64_t v22;
  unint64_t v23;

  v8 = type metadata accessor for HmacAlgorithm(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a3;
  v23 = a4;
  sub_10001BBBC(a3, a4);
  v12 = String.utf8Data.getter(0xD000000000000012, 0x8000000100ED0740);
  v14 = v13;
  Data.append(_:)(v12, v13);
  sub_10001BC14(v12, v14);
  v15 = v22;
  v16 = v23;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for HmacAlgorithm.sha256(_:), v8);
  sub_10001BBBC(v15, v16);
  sub_10001BBBC(a1, a2);
  v17 = Data.hmac(key:algorithm:)(a1, a2, v11, v15, v16);
  v19 = v18;
  sub_10001BC14(a1, a2);
  sub_10001BC14(v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_1002F7C0C(6, v17, v19);
  sub_1002F75E0(v21[2], v21[3]);
  sub_10001BC14(v22, v23);
  return v21[4];
}

uint64_t SharingCircleWildAdvertisementKey.data.getter(uint64_t a1, unint64_t a2)
{
  sub_10001BBBC(a1, a2);
  return a1;
}

void *NearbyTokenKey.length.unsafeMutableAddressor()
{
  return &static NearbyTokenKey.length;
}

uint64_t Advertisement.nfcPartial.getter(uint64_t a1, unint64_t a2)
{
  return sub_1002F97CC(a1, a2, 12);
}

uint64_t sub_1002F97CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7;

  sub_10001BBBC(a1, a2);
  sub_1002F7C0C(a3, a1, a2);
  return v7;
}

void *NFCPartialAdvertisement.length.unsafeMutableAddressor()
{
  return &static NFCPartialAdvertisement.length;
}

uint64_t Advertisement.description.getter(uint64_t a1, uint64_t a2)
{
  return sub_1002F983C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1001AE66C, (uint64_t)&type metadata for Advertisement);
}

uint64_t sub_1002F983C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5;

  v5 = a3(a1, a2);
  return RawRepresentable<>.hexString.getter(a4, v5);
}

uint64_t sub_1002F9878(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC2C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F98A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC2C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Advertisement.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B78, (uint64_t (*)(void))sub_1002FC2C0, (uint64_t)&type metadata for Advertisement.CodingKeys);
}

_QWORD *Advertisement.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75B8, (uint64_t (*)(void))sub_1002FC2C0, (uint64_t)&type metadata for Advertisement.CodingKeys);
}

uint64_t sub_1002F9920(uint64_t a1, uint64_t a2)
{
  return sub_1002F992C(a1, a2, (uint64_t (*)(uint64_t, uint64_t))sub_1001AE66C);
}

uint64_t sub_1002F992C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;

  v4 = a3(a1, a2);
  return RawRepresentable<>.hexString.getter(a1, v4);
}

_QWORD *sub_1002F996C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75B8, (uint64_t (*)(void))sub_1002FC2C0, (uint64_t)&type metadata for Advertisement.CodingKeys, a2);
}

uint64_t sub_1002F9998(_QWORD *a1)
{
  uint64_t *v1;

  return Advertisement.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002F99B0(uint64_t *a1)
{
  sub_10033F260(*a1, a1[1]);
}

void *HashedAdvertisement.length.unsafeMutableAddressor()
{
  return &static HashedAdvertisement.length;
}

uint64_t sub_1002F99C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC304();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F99F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC304();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HashedAdvertisement.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B88, (uint64_t (*)(void))sub_1002FC304, (uint64_t)&type metadata for HashedAdvertisement.CodingKeys);
}

_QWORD *HashedAdvertisement.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75B0, (uint64_t (*)(void))sub_1002FC304, (uint64_t)&type metadata for HashedAdvertisement.CodingKeys);
}

_QWORD *sub_1002F9A70@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75B0, (uint64_t (*)(void))sub_1002FC304, (uint64_t)&type metadata for HashedAdvertisement.CodingKeys, a2);
}

uint64_t sub_1002F9A9C(_QWORD *a1)
{
  uint64_t *v1;

  return HashedAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1002F9AB4(_QWORD *a1)
{
  return sub_10033F2F0(*a1, a1[1]);
}

uint64_t sub_1002F9AC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC348();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9AE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC348();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PairingNonce.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6B98, (uint64_t (*)(void))sub_1002FC348, (uint64_t)&type metadata for PairingNonce.CodingKeys);
}

_QWORD *PairingNonce.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75A8, (uint64_t (*)(void))sub_1002FC348, (uint64_t)&type metadata for PairingNonce.CodingKeys);
}

_QWORD *sub_1002F9B68@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75A8, (uint64_t (*)(void))sub_1002FC348, (uint64_t)&type metadata for PairingNonce.CodingKeys, a2);
}

uint64_t sub_1002F9B94(_QWORD *a1)
{
  uint64_t *v1;

  return PairingNonce.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1002F9BAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC38C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9BD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC38C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharedSecretKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6BA8, (uint64_t (*)(void))sub_1002FC38C, (uint64_t)&type metadata for SharedSecretKey.CodingKeys);
}

_QWORD *SharedSecretKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F75A0, (uint64_t (*)(void))sub_1002FC38C, (uint64_t)&type metadata for SharedSecretKey.CodingKeys);
}

_QWORD *sub_1002F9C54@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F75A0, (uint64_t (*)(void))sub_1002FC38C, (uint64_t)&type metadata for SharedSecretKey.CodingKeys, a2);
}

uint64_t sub_1002F9C80(_QWORD *a1)
{
  uint64_t *v1;

  return SharedSecretKey.encode(to:)(a1, *v1, v1[1]);
}

void *AntiTrackingKey.length.unsafeMutableAddressor()
{
  return &static AntiTrackingKey.length;
}

uint64_t static AntiTrackingKey.length.getter()
{
  return 72;
}

uint64_t sub_1002F9CAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC3D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9CD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC3D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AntiTrackingKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6BB8, (uint64_t (*)(void))sub_1002FC3D0, (uint64_t)&type metadata for AntiTrackingKey.CodingKeys);
}

_QWORD *AntiTrackingKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7598, (uint64_t (*)(void))sub_1002FC3D0, (uint64_t)&type metadata for AntiTrackingKey.CodingKeys);
}

_QWORD *sub_1002F9D54@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7598, (uint64_t (*)(void))sub_1002FC3D0, (uint64_t)&type metadata for AntiTrackingKey.CodingKeys, a2);
}

uint64_t sub_1002F9D80(_QWORD *a1)
{
  uint64_t *v1;

  return AntiTrackingKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002F9D98(uint64_t *a1)
{
  sub_10033F2F4(*a1, a1[1]);
}

void *IntermediateKey.length.unsafeMutableAddressor()
{
  return &static IntermediateKey.length;
}

uint64_t sub_1002F9DB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC414();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9DD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC414();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IntermediateKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6BC8, (uint64_t (*)(void))sub_1002FC414, (uint64_t)&type metadata for IntermediateKey.CodingKeys);
}

_QWORD *IntermediateKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7590, (uint64_t (*)(void))sub_1002FC414, (uint64_t)&type metadata for IntermediateKey.CodingKeys);
}

_QWORD *sub_1002F9E58@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7590, (uint64_t (*)(void))sub_1002FC414, (uint64_t)&type metadata for IntermediateKey.CodingKeys, a2);
}

uint64_t sub_1002F9E84(_QWORD *a1)
{
  uint64_t *v1;

  return IntermediateKey.encode(to:)(a1, *v1, v1[1]);
}

void *CommandKey.length.unsafeMutableAddressor()
{
  return &static CommandKey.length;
}

uint64_t sub_1002F9EA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC458();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9ED0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC458();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CommandKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6BD8, (uint64_t (*)(void))sub_1002FC458, (uint64_t)&type metadata for CommandKey.CodingKeys);
}

_QWORD *CommandKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7588, (uint64_t (*)(void))sub_1002FC458, (uint64_t)&type metadata for CommandKey.CodingKeys);
}

uint64_t sub_1002F9F50@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

_QWORD *sub_1002F9F58@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7588, (uint64_t (*)(void))sub_1002FC458, (uint64_t)&type metadata for CommandKey.CodingKeys, a2);
}

uint64_t sub_1002F9F84(_QWORD *a1)
{
  uint64_t *v1;

  return CommandKey.encode(to:)(a1, *v1, v1[1]);
}

void *ConnectionKey.length.unsafeMutableAddressor()
{
  return &static ConnectionKey.length;
}

uint64_t sub_1002F9FA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC49C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002F9FD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC49C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ConnectionKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6BE8, (uint64_t (*)(void))sub_1002FC49C, (uint64_t)&type metadata for ConnectionKey.CodingKeys);
}

_QWORD *ConnectionKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7580, (uint64_t (*)(void))sub_1002FC49C, (uint64_t)&type metadata for ConnectionKey.CodingKeys);
}

_QWORD *sub_1002FA050@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7580, (uint64_t (*)(void))sub_1002FC49C, (uint64_t)&type metadata for ConnectionKey.CodingKeys, a2);
}

uint64_t sub_1002FA07C(_QWORD *a1)
{
  uint64_t *v1;

  return ConnectionKey.encode(to:)(a1, *v1, v1[1]);
}

void *LongTermKey.length.unsafeMutableAddressor()
{
  return &static LongTermKey.length;
}

uint64_t static LongTermKey.length.getter()
{
  return 16;
}

uint64_t sub_1002FA0A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC4E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA0D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC4E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LongTermKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6BF8, (uint64_t (*)(void))sub_1002FC4E0, (uint64_t)&type metadata for LongTermKey.CodingKeys);
}

_QWORD *LongTermKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7578, (uint64_t (*)(void))sub_1002FC4E0, (uint64_t)&type metadata for LongTermKey.CodingKeys);
}

_QWORD *sub_1002FA150@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7578, (uint64_t (*)(void))sub_1002FC4E0, (uint64_t)&type metadata for LongTermKey.CodingKeys, a2);
}

uint64_t sub_1002FA17C(_QWORD *a1)
{
  uint64_t *v1;

  return LongTermKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FA194(uint64_t *a1)
{
  sub_10033F384(*a1, a1[1]);
}

uint64_t sub_1002FA1A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC524();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA1C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC524();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NearbyTokenKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C08, (uint64_t (*)(void))sub_1002FC524, (uint64_t)&type metadata for NearbyTokenKey.CodingKeys);
}

_QWORD *NearbyTokenKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7570, (uint64_t (*)(void))sub_1002FC524, (uint64_t)&type metadata for NearbyTokenKey.CodingKeys);
}

_QWORD *sub_1002FA248@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7570, (uint64_t (*)(void))sub_1002FC524, (uint64_t)&type metadata for NearbyTokenKey.CodingKeys, a2);
}

uint64_t sub_1002FA274(_QWORD *a1)
{
  uint64_t *v1;

  return NearbyTokenKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t static NFCPartialAdvertisement.length.getter()
{
  return 12;
}

uint64_t sub_1002FA294(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC568();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA2BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC568();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NFCPartialAdvertisement.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C18, (uint64_t (*)(void))sub_1002FC568, (uint64_t)&type metadata for NFCPartialAdvertisement.CodingKeys);
}

_QWORD *NFCPartialAdvertisement.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7568, (uint64_t (*)(void))sub_1002FC568, (uint64_t)&type metadata for NFCPartialAdvertisement.CodingKeys);
}

_QWORD *sub_1002FA33C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7568, (uint64_t (*)(void))sub_1002FC568, (uint64_t)&type metadata for NFCPartialAdvertisement.CodingKeys, a2);
}

uint64_t sub_1002FA368(_QWORD *a1)
{
  uint64_t *v1;

  return NFCPartialAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FA380(uint64_t *a1)
{
  sub_10033F4A4(*a1, a1[1]);
}

void *EncryptedBlobE1.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE1.length;
}

uint64_t static EncryptedBlobE1.length.getter()
{
  return 113;
}

uint64_t sub_1002FA3A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC5AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA3C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC5AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE1.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C28, (uint64_t (*)(void))sub_1002FC5AC, (uint64_t)&type metadata for EncryptedBlobE1.CodingKeys);
}

_QWORD *EncryptedBlobE1.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7560, (uint64_t (*)(void))sub_1002FC5AC, (uint64_t)&type metadata for EncryptedBlobE1.CodingKeys);
}

_QWORD *sub_1002FA448@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7560, (uint64_t (*)(void))sub_1002FC5AC, (uint64_t)&type metadata for EncryptedBlobE1.CodingKeys, a2);
}

uint64_t sub_1002FA474(_QWORD *a1)
{
  uint64_t *v1;

  return EncryptedBlobE1.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FA48C(uint64_t *a1)
{
  sub_10033F534(*a1, a1[1]);
}

void *FindMyNetworkId.length.unsafeMutableAddressor()
{
  return &static FindMyNetworkId.length;
}

uint64_t FindMyNetworkId.init(altDSID:)(uint64_t a1, uint64_t a2)
{
  return sub_1002FBA84(a1, a2);
}

uint64_t sub_1002FA4B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC5F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA4E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC5F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FindMyNetworkId.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C38, (uint64_t (*)(void))sub_1002FC5F0, (uint64_t)&type metadata for FindMyNetworkId.CodingKeys);
}

_QWORD *FindMyNetworkId.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7558, (uint64_t (*)(void))sub_1002FC5F0, (uint64_t)&type metadata for FindMyNetworkId.CodingKeys);
}

_QWORD *sub_1002FA560@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7558, (uint64_t (*)(void))sub_1002FC5F0, (uint64_t)&type metadata for FindMyNetworkId.CodingKeys, a2);
}

uint64_t sub_1002FA58C(_QWORD *a1)
{
  uint64_t *v1;

  return FindMyNetworkId.encode(to:)(a1, *v1, v1[1]);
}

void *EncryptedBlobE2.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE2.length;
}

uint64_t static EncryptedBlobE2.length.getter()
{
  return 1326;
}

uint64_t sub_1002FA5B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC634();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA5E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC634();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE2.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C48, (uint64_t (*)(void))sub_1002FC634, (uint64_t)&type metadata for EncryptedBlobE2.CodingKeys);
}

_QWORD *EncryptedBlobE2.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7550, (uint64_t (*)(void))sub_1002FC634, (uint64_t)&type metadata for EncryptedBlobE2.CodingKeys);
}

_QWORD *sub_1002FA660@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7550, (uint64_t (*)(void))sub_1002FC634, (uint64_t)&type metadata for EncryptedBlobE2.CodingKeys, a2);
}

uint64_t sub_1002FA68C(_QWORD *a1)
{
  uint64_t *v1;

  return EncryptedBlobE2.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FA6A4(uint64_t *a1)
{
  sub_10033F5C4(*a1, a1[1]);
}

void *EncryptedBlobE3.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE3.length;
}

uint64_t static EncryptedBlobE3.length.getter()
{
  return 1040;
}

uint64_t sub_1002FA6C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC678();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA6EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC678();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE3.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C58, (uint64_t (*)(void))sub_1002FC678, (uint64_t)&type metadata for EncryptedBlobE3.CodingKeys);
}

_QWORD *EncryptedBlobE3.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7548, (uint64_t (*)(void))sub_1002FC678, (uint64_t)&type metadata for EncryptedBlobE3.CodingKeys);
}

_QWORD *sub_1002FA76C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7548, (uint64_t (*)(void))sub_1002FC678, (uint64_t)&type metadata for EncryptedBlobE3.CodingKeys, a2);
}

uint64_t sub_1002FA798(_QWORD *a1)
{
  uint64_t *v1;

  return EncryptedBlobE3.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FA7B0(uint64_t *a1)
{
  sub_10033F64C(*a1, a1[1]);
}

void *EncryptedBlobE4.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE4.length;
}

uint64_t static EncryptedBlobE4.length.getter()
{
  return 1286;
}

uint64_t sub_1002FA7D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC6BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA7F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC6BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE4.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C68, (uint64_t (*)(void))sub_1002FC6BC, (uint64_t)&type metadata for EncryptedBlobE4.CodingKeys);
}

_QWORD *EncryptedBlobE4.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7540, (uint64_t (*)(void))sub_1002FC6BC, (uint64_t)&type metadata for EncryptedBlobE4.CodingKeys);
}

_QWORD *sub_1002FA878@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7540, (uint64_t (*)(void))sub_1002FC6BC, (uint64_t)&type metadata for EncryptedBlobE4.CodingKeys, a2);
}

uint64_t sub_1002FA8A4(_QWORD *a1)
{
  uint64_t *v1;

  return EncryptedBlobE4.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FA8BC(uint64_t *a1)
{
  sub_10033F6D4(*a1, a1[1]);
}

uint64_t static SikPub.length.getter()
{
  return 100;
}

uint64_t sub_1002FA8D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC700();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA8F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC700();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RefKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C78, (uint64_t (*)(void))sub_1002FC700, (uint64_t)&type metadata for RefKey.CodingKeys);
}

_QWORD *RefKey.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7538, (uint64_t (*)(void))sub_1002FC700, (uint64_t)&type metadata for RefKey.CodingKeys);
}

_QWORD *sub_1002FA978@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7538, (uint64_t (*)(void))sub_1002FC700, (uint64_t)&type metadata for RefKey.CodingKeys, a2);
}

uint64_t sub_1002FA9A4(_QWORD *a1)
{
  uint64_t *v1;

  return RefKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1002FA9BC(_QWORD *a1)
{
  return sub_10033F75C(*a1, a1[1]);
}

uint64_t sub_1002FA9C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC744();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FA9F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC744();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SikPub.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C88, (uint64_t (*)(void))sub_1002FC744, (uint64_t)&type metadata for SikPub.CodingKeys);
}

_QWORD *SikPub.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7530, (uint64_t (*)(void))sub_1002FC744, (uint64_t)&type metadata for SikPub.CodingKeys);
}

_QWORD *sub_1002FAA70@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7530, (uint64_t (*)(void))sub_1002FC744, (uint64_t)&type metadata for SikPub.CodingKeys, a2);
}

uint64_t sub_1002FAA9C(_QWORD *a1)
{
  uint64_t *v1;

  return SikPub.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1002FAAB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC788();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FAADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC788();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.C1.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6C98, (uint64_t (*)(void))sub_1002FC788, (uint64_t)&_s2C1V10CodingKeysON);
}

_QWORD *CollaborativeKeyGen.C1.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7528, (uint64_t (*)(void))sub_1002FC788, (uint64_t)&_s2C1V10CodingKeysON);
}

_QWORD *sub_1002FAB5C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7528, (uint64_t (*)(void))sub_1002FC788, (uint64_t)&_s2C1V10CodingKeysON, a2);
}

uint64_t sub_1002FAB88(_QWORD *a1)
{
  uint64_t *v1;

  return CollaborativeKeyGen.C1.encode(to:)(a1, *v1, v1[1]);
}

uint64_t static CollaborativeKeyGen.v1.C2.length.getter()
{
  return 89;
}

uint64_t sub_1002FABA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC7CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FABD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC7CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v1.C2.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6CA8, (uint64_t (*)(void))sub_1002FC7CC, (uint64_t)&_s2C2V10CodingKeysON_0);
}

_QWORD *CollaborativeKeyGen.v1.C2.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7520, (uint64_t (*)(void))sub_1002FC7CC, (uint64_t)&_s2C2V10CodingKeysON_0);
}

_QWORD *sub_1002FAC50@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7520, (uint64_t (*)(void))sub_1002FC7CC, (uint64_t)&_s2C2V10CodingKeysON_0, a2);
}

uint64_t sub_1002FAC7C(_QWORD *a1)
{
  uint64_t *v1;

  return CollaborativeKeyGen.v1.C2.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FAC94(uint64_t *a1)
{
  sub_10033F7F0(*a1, a1[1]);
}

void *CollaborativeKeyGen.v1.C3.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v1.C3.length;
}

uint64_t static CollaborativeKeyGen.v1.C3.length.getter()
{
  return 60;
}

uint64_t sub_1002FACB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC810();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FACDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC810();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v1.C3.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6CB8, (uint64_t (*)(void))sub_1002FC810, (uint64_t)&_s2C3V10CodingKeysON_0);
}

_QWORD *CollaborativeKeyGen.v1.C3.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7518, (uint64_t (*)(void))sub_1002FC810, (uint64_t)&_s2C3V10CodingKeysON_0);
}

_QWORD *sub_1002FAD5C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7518, (uint64_t (*)(void))sub_1002FC810, (uint64_t)&_s2C3V10CodingKeysON_0, a2);
}

uint64_t sub_1002FAD88(_QWORD *a1)
{
  uint64_t *v1;

  return CollaborativeKeyGen.v1.C3.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FADA0(uint64_t *a1)
{
  sub_10033F880(*a1, a1[1]);
}

uint64_t static CollaborativeKeyGen.v2.C2.length.getter()
{
  return 114;
}

uint64_t sub_1002FADB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC854();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FADDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC854();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v2.C2.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6CC8, (uint64_t (*)(void))sub_1002FC854, (uint64_t)&_s2C2V10CodingKeysON);
}

_QWORD *CollaborativeKeyGen.v2.C2.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7510, (uint64_t (*)(void))sub_1002FC854, (uint64_t)&_s2C2V10CodingKeysON);
}

_QWORD *sub_1002FAE5C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7510, (uint64_t (*)(void))sub_1002FC854, (uint64_t)&_s2C2V10CodingKeysON, a2);
}

uint64_t sub_1002FAE88(_QWORD *a1)
{
  uint64_t *v1;

  return CollaborativeKeyGen.v2.C2.encode(to:)(a1, *v1, v1[1]);
}

void sub_1002FAEA0(uint64_t *a1)
{
  sub_10033F910(*a1, a1[1]);
}

void *CollaborativeKeyGen.v2.C3.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v2.C3.length;
}

uint64_t sub_1002FAEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease(0xE300000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(7955819, 0xE300000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1002FAF3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC898();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002FAF64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002FC898();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v2.C3.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FAFB8(a1, a2, a3, &qword_1010F6CD8, (uint64_t (*)(void))sub_1002FC898, (uint64_t)&_s2C3V10CodingKeysON);
}

uint64_t sub_1002FAFB8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v21 = a3;
  v10 = sub_10001A9A8(a4);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v15);
  v16 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v16, v15, v14);
  v22[0] = a2;
  v22[1] = v21;
  v17 = sub_1002FC00C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v18, v10, &type metadata for KeyRepresentableInternal, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

_QWORD *CollaborativeKeyGen.v2.C3.init(from:)(_QWORD *a1)
{
  return sub_1002FC8DC(a1, &qword_1010F7500, (uint64_t (*)(void))sub_1002FC898, (uint64_t)&_s2C3V10CodingKeysON);
}

_QWORD *sub_1002FB0F0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002F8FA0(a1, &qword_1010F7500, (uint64_t (*)(void))sub_1002FC898, (uint64_t)&_s2C3V10CodingKeysON, a2);
}

uint64_t sub_1002FB11C(_QWORD *a1)
{
  uint64_t *v1;

  return CollaborativeKeyGen.v2.C3.encode(to:)(a1, *v1, v1[1]);
}

void _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1002FB180()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1002FB1B4 + dword_1002FB38C[v0 >> 62]))();
}

uint64_t sub_1002FB1C4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1002FB3AC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_1010E9B30 != -1)
    swift_once(&qword_1010E9B30, sub_1002F900C);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  if ((v4 & 1) == 0)
    __asm { BR              X10 }
  v5 = static os_log_type_t.error.getter(v4);
  if (qword_1010EA228 != -1)
    swift_once(&qword_1010EA228, sub_100B5D7D4);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7CF8, "Zero bytes sent for private key", 31, 2, _swiftEmptyArrayStorage);
  v6 = sub_1000D95EC();
  v7 = swift_allocError(&type metadata for KeyRepresentableError, v6, 0, 0);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 2;
  swift_willThrow(v7);
  sub_10001BC14(a1, a2);
  return a1;
}

void sub_1002FB59C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002FB5DC@<X0>(int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v1) != v3)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
        {
          v4 = HIDWORD(v2) - (int)v2;
LABEL_8:
          v7 = sub_1000D95EC();
          v8 = swift_allocError(&type metadata for KeyRepresentableError, v7, 0, 0);
          *(_QWORD *)v9 = v3;
          *(_QWORD *)(v9 + 8) = v4;
          *(_BYTE *)(v9 + 16) = 0;
          swift_willThrow(v8);
          sub_10001BC14(v2, v1);
          return v2;
        }
        __break(1u);
      }
      else
      {
        v6 = *(_QWORD *)(v2 + 16);
        v5 = *(_QWORD *)(v2 + 24);
        v4 = v5 - v6;
        if (!__OFSUB__(v5, v6))
          goto LABEL_8;
      }
      __break(1u);
      JUMPOUT(0x1002FB6B8);
    }
    v4 = BYTE6(v1);
    goto LABEL_8;
  }
  return v2;
}

uint64_t sub_1002FB6C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  if (qword_1010E9B40 != -1)
    swift_once(&qword_1010E9B40, sub_1002F9250);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  if ((v6 & 1) != 0)
  {
    v7 = static os_log_type_t.error.getter(v6);
    if (qword_1010EA228 != -1)
      swift_once(&qword_1010EA228, sub_100B5D7D4);
    v3 = 2;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7CF8, "Zero bytes sent for public key", 30, 2, _swiftEmptyArrayStorage);
    v8 = sub_1000D95EC();
    v9 = swift_allocError(&type metadata for KeyRepresentableError, v8, 0, 0);
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = 2;
    swift_willThrow(v9);
  }
  else
  {
    sub_10001BBBC(a1, a2);
    sub_1002FB59C(a1, a2);
    if (!v2)
    {
      v3 = v11;
      v13 = sub_1007E6F8C(a1, a2);
      sub_10001BC14(v13, v14);
      sub_10001BC14(a1, a2);
      return v3;
    }
  }
  sub_10001BC14(a1, a2);
  return v3;
}

uint64_t sub_1002FB894(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_1010E9B38 != -1)
    swift_once(&qword_1010E9B38, sub_1002F9134);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  if ((v4 & 1) == 0)
    __asm { BR              X10 }
  v5 = static os_log_type_t.error.getter(v4);
  if (qword_1010EA228 != -1)
    swift_once(&qword_1010EA228, sub_100B5D7D4);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7CF8, "Zero bytes sent for public key", 30, 2, _swiftEmptyArrayStorage);
  v6 = sub_1000D95EC();
  v7 = swift_allocError(&type metadata for KeyRepresentableError, v6, 0, 0);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 2;
  swift_willThrow(v7);
  sub_10001BC14(a1, a2);
  return a1;
}

uint64_t sub_1002FBA84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for HashAlgorithm(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v10);
  v13 = String.data(using:allowLossyConversion:)(v12, 0, a1, a2);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v17 = v16(v12, v8);
  if (v15 >> 60 == 15)
    goto LABEL_6;
  v39 = v13;
  static String.Encoding.utf8.getter(v17);
  v18 = String.data(using:allowLossyConversion:)(v12, 0, 0x726961506552, 0xE600000000000000);
  v20 = v19;
  v21 = v16(v12, v8);
  if (v20 >> 60 == 15)
  {
LABEL_5:
    sub_10001EF3C(v39, v15);
LABEL_6:
    v24 = sub_1000D95EC();
    v25 = swift_allocError(&type metadata for KeyRepresentableError, v24, 0, 0);
    *(_OWORD *)v26 = xmmword_100E2E3B0;
    *(_BYTE *)(v26 + 16) = 2;
    return swift_willThrow(v25);
  }
  v38 = v18;
  static String.Encoding.utf8.getter(v21);
  v37 = String.data(using:allowLossyConversion:)(v12, 0, 0x44494E4D46, 0xE500000000000000);
  v23 = v22;
  v16(v12, v8);
  if (v23 >> 60 == 15)
  {
    sub_10001EF3C(v38, v20);
    goto LABEL_5;
  }
  v28 = v38;
  v41 = v38;
  v42 = v20;
  sub_10001BBBC(v38, v20);
  Data.append(_:)(v39, v15);
  Data.append(_:)(v37, v23);
  v29 = v41;
  v30 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for HashAlgorithm.sha256(_:), v4);
  sub_10001BBBC(v29, v30);
  v31 = Data.hash(algorithm:)(v7, v29, v30);
  v35 = v32;
  v36 = v31;
  sub_10001BC14(v29, v30);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10001BC14(v41, v42);
  v33 = v43;
  sub_1002F76FC(v36, v35);
  sub_10001EF3C(v39, v15);
  sub_10001EF3C(v28, v20);
  result = sub_10001EF3C(v37, v23);
  if (!v33)
    return v40;
  return result;
}

uint64_t sub_1002FBD4C(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v14;

  v8 = MACAddress.data.getter(a1);
  v10 = v9;
  v14 = v9;
  sub_10001BBBC(v8, v9);
  v11 = Data.subscript.getter(0, v8, v10);
  sub_10001BC14(v8, v10);
  Data._Representation.subscript.setter(v11 & 0x3F | (a4 << 6), 0);
  sub_10001BBBC(v8, v14);
  sub_10001BBBC(v8, v14);
  sub_10001BBBC(a2, a3);
  sub_10078E27C(a2, a3);
  sub_10001BC14(a2, a3);
  v12 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  sub_10001BC14(v8, v14);
  sub_10001BC14(v8, v14);
  return v8;
}

unint64_t sub_1002FBE60()
{
  unint64_t result;

  result = qword_1010F6B08;
  if (!qword_1010F6B08)
  {
    result = swift_getWitnessTable("YN#", &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B08);
  }
  return result;
}

_QWORD *sub_1002FBEA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_10001A9A8(&qword_1010F75F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_1002FBE60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyRepresentableInternal.CodingKeys, &type metadata for KeyRepresentableInternal.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_1002FBFC8()
{
  unint64_t result;

  result = qword_1010F6B18;
  if (!qword_1010F6B18)
  {
    result = swift_getWitnessTable(byte_100E36A98, &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B18);
  }
  return result;
}

unint64_t sub_1002FC00C()
{
  unint64_t result;

  result = qword_1010F6B20;
  if (!qword_1010F6B20)
  {
    result = swift_getWitnessTable("ё#", &type metadata for KeyRepresentableInternal);
    atomic_store(result, (unint64_t *)&qword_1010F6B20);
  }
  return result;
}

void sub_1002FC050(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1002FC08C@<X0>(int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (BYTE6(v1) != 174)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
        {
          v3 = HIDWORD(v2) - (int)v2;
LABEL_8:
          v6 = sub_1000D95EC();
          v7 = swift_allocError(&type metadata for KeyRepresentableError, v6, 0, 0);
          *(_QWORD *)v8 = 174;
          *(_QWORD *)(v8 + 8) = v3;
          *(_BYTE *)(v8 + 16) = 0;
          swift_willThrow(v7);
          sub_10001BC14(v2, v1);
          return v2;
        }
        __break(1u);
      }
      else
      {
        v5 = *(_QWORD *)(v2 + 16);
        v4 = *(_QWORD *)(v2 + 24);
        v3 = v4 - v5;
        if (!__OFSUB__(v4, v5))
          goto LABEL_8;
      }
      __break(1u);
      JUMPOUT(0x1002FC15CLL);
    }
    v3 = BYTE6(v1);
    goto LABEL_8;
  }
  return v2;
}

unint64_t sub_1002FC16C()
{
  unint64_t result;

  result = qword_1010F6B30;
  if (!qword_1010F6B30)
  {
    result = swift_getWitnessTable(byte_100E36A48, &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B30);
  }
  return result;
}

unint64_t sub_1002FC1B0()
{
  unint64_t result;

  result = qword_1010F6B40;
  if (!qword_1010F6B40)
  {
    result = swift_getWitnessTable("IO#", &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B40);
  }
  return result;
}

unint64_t sub_1002FC1F4()
{
  unint64_t result;

  result = qword_1010F6B50;
  if (!qword_1010F6B50)
  {
    result = swift_getWitnessTable(byte_100E369A8, &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B50);
  }
  return result;
}

unint64_t sub_1002FC238()
{
  unint64_t result;

  result = qword_1010F6B60;
  if (!qword_1010F6B60)
  {
    result = swift_getWitnessTable(byte_100E36958, &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B60);
  }
  return result;
}

unint64_t sub_1002FC27C()
{
  unint64_t result;

  result = qword_1010F6B70;
  if (!qword_1010F6B70)
  {
    result = swift_getWitnessTable("9P#", &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B70);
  }
  return result;
}

unint64_t sub_1002FC2C0()
{
  unint64_t result;

  result = qword_1010F6B80;
  if (!qword_1010F6B80)
  {
    result = swift_getWitnessTable(byte_100E368B8, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B80);
  }
  return result;
}

unint64_t sub_1002FC304()
{
  unint64_t result;

  result = qword_1010F6B90;
  if (!qword_1010F6B90)
  {
    result = swift_getWitnessTable(byte_100E36868, &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6B90);
  }
  return result;
}

unint64_t sub_1002FC348()
{
  unint64_t result;

  result = qword_1010F6BA0;
  if (!qword_1010F6BA0)
  {
    result = swift_getWitnessTable(")Q#", &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6BA0);
  }
  return result;
}

unint64_t sub_1002FC38C()
{
  unint64_t result;

  result = qword_1010F6BB0;
  if (!qword_1010F6BB0)
  {
    result = swift_getWitnessTable("yQ#", &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6BB0);
  }
  return result;
}

unint64_t sub_1002FC3D0()
{
  unint64_t result;

  result = qword_1010F6BC0;
  if (!qword_1010F6BC0)
  {
    result = swift_getWitnessTable(byte_100E36778, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6BC0);
  }
  return result;
}

unint64_t sub_1002FC414()
{
  unint64_t result;

  result = qword_1010F6BD0;
  if (!qword_1010F6BD0)
  {
    result = swift_getWitnessTable(byte_100E36728, &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6BD0);
  }
  return result;
}

unint64_t sub_1002FC458()
{
  unint64_t result;

  result = qword_1010F6BE0;
  if (!qword_1010F6BE0)
  {
    result = swift_getWitnessTable("iR#", &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6BE0);
  }
  return result;
}

unint64_t sub_1002FC49C()
{
  unint64_t result;

  result = qword_1010F6BF0;
  if (!qword_1010F6BF0)
  {
    result = swift_getWitnessTable(byte_100E36688, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6BF0);
  }
  return result;
}

unint64_t sub_1002FC4E0()
{
  unint64_t result;

  result = qword_1010F6C00;
  if (!qword_1010F6C00)
  {
    result = swift_getWitnessTable("\tS#", &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C00);
  }
  return result;
}

unint64_t sub_1002FC524()
{
  unint64_t result;

  result = qword_1010F6C10;
  if (!qword_1010F6C10)
  {
    result = swift_getWitnessTable("YS#", &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C10);
  }
  return result;
}

unint64_t sub_1002FC568()
{
  unint64_t result;

  result = qword_1010F6C20;
  if (!qword_1010F6C20)
  {
    result = swift_getWitnessTable(byte_100E36598, &type metadata for NFCPartialAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C20);
  }
  return result;
}

unint64_t sub_1002FC5AC()
{
  unint64_t result;

  result = qword_1010F6C30;
  if (!qword_1010F6C30)
  {
    result = swift_getWitnessTable(byte_100E36548, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C30);
  }
  return result;
}

unint64_t sub_1002FC5F0()
{
  unint64_t result;

  result = qword_1010F6C40;
  if (!qword_1010F6C40)
  {
    result = swift_getWitnessTable("IT#", &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C40);
  }
  return result;
}

unint64_t sub_1002FC634()
{
  unint64_t result;

  result = qword_1010F6C50;
  if (!qword_1010F6C50)
  {
    result = swift_getWitnessTable(byte_100E364A8, &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C50);
  }
  return result;
}

unint64_t sub_1002FC678()
{
  unint64_t result;

  result = qword_1010F6C60;
  if (!qword_1010F6C60)
  {
    result = swift_getWitnessTable(byte_100E36458, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C60);
  }
  return result;
}

unint64_t sub_1002FC6BC()
{
  unint64_t result;

  result = qword_1010F6C70;
  if (!qword_1010F6C70)
  {
    result = swift_getWitnessTable("9U#", &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C70);
  }
  return result;
}

unint64_t sub_1002FC700()
{
  unint64_t result;

  result = qword_1010F6C80;
  if (!qword_1010F6C80)
  {
    result = swift_getWitnessTable(byte_100E363B8, &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C80);
  }
  return result;
}

unint64_t sub_1002FC744()
{
  unint64_t result;

  result = qword_1010F6C90;
  if (!qword_1010F6C90)
  {
    result = swift_getWitnessTable(byte_100E36368, &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6C90);
  }
  return result;
}

unint64_t sub_1002FC788()
{
  unint64_t result;

  result = qword_1010F6CA0;
  if (!qword_1010F6CA0)
  {
    result = swift_getWitnessTable(")V#", &_s2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F6CA0);
  }
  return result;
}

unint64_t sub_1002FC7CC()
{
  unint64_t result;

  result = qword_1010F6CB0;
  if (!qword_1010F6CB0)
  {
    result = swift_getWitnessTable("yV#", &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F6CB0);
  }
  return result;
}

unint64_t sub_1002FC810()
{
  unint64_t result;

  result = qword_1010F6CC0;
  if (!qword_1010F6CC0)
  {
    result = swift_getWitnessTable(byte_100E36278, &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F6CC0);
  }
  return result;
}

unint64_t sub_1002FC854()
{
  unint64_t result;

  result = qword_1010F6CD0;
  if (!qword_1010F6CD0)
  {
    result = swift_getWitnessTable(byte_100E36228, &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F6CD0);
  }
  return result;
}

unint64_t sub_1002FC898()
{
  unint64_t result;

  result = qword_1010F6CE0;
  if (!qword_1010F6CE0)
  {
    result = swift_getWitnessTable("iW#", &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F6CE0);
  }
  return result;
}

_QWORD *sub_1002FC8DC(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;

  v8 = sub_10001A9A8(a2);
  v22 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v13 = sub_10001AA44(a1, v11);
  v14 = a3();
  v15 = a4;
  v16 = a4;
  v17 = v13;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v15, v16, v14, v11, v12);
  if (v4)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v18 = sub_100301E24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for KeyRepresentableInternal, v19, v8, &type metadata for KeyRepresentableInternal, v18);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
    v17 = v21;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v17;
}

unint64_t sub_1002FCA18()
{
  unint64_t result;

  result = qword_1010F6CE8;
  if (!qword_1010F6CE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for KeyRepresentableInternal, &type metadata for KeyRepresentableInternal);
    atomic_store(result, (unint64_t *)&qword_1010F6CE8);
  }
  return result;
}

unint64_t sub_1002FCA5C(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FCA80();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FCA80()
{
  unint64_t result;

  result = qword_1010F6CF0;
  if (!qword_1010F6CF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LocationDecryptionKey, &type metadata for LocationDecryptionKey);
    atomic_store(result, (unint64_t *)&qword_1010F6CF0);
  }
  return result;
}

unint64_t sub_1002FCAC4(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FCAE8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FCAE8()
{
  unint64_t result;

  result = qword_1010F6CF8;
  if (!qword_1010F6CF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1010F6CF8);
  }
  return result;
}

uint64_t sub_1002FCB2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FCB50, (uint64_t (*)(void))sub_1002FCB94, (uint64_t (*)(void))sub_1002FCBD8, (uint64_t (*)(void))sub_1002FCC1C);
}

unint64_t sub_1002FCB50()
{
  unint64_t result;

  result = qword_1010F6D00;
  if (!qword_1010F6D00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D00);
  }
  return result;
}

unint64_t sub_1002FCB94()
{
  unint64_t result;

  result = qword_1010F6D08;
  if (!qword_1010F6D08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D08);
  }
  return result;
}

unint64_t sub_1002FCBD8()
{
  unint64_t result;

  result = qword_1010F6D10;
  if (!qword_1010F6D10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D10);
  }
  return result;
}

unint64_t sub_1002FCC1C()
{
  unint64_t result;

  result = qword_1010F6D18;
  if (!qword_1010F6D18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D18);
  }
  return result;
}

unint64_t sub_1002FCC64()
{
  unint64_t result;

  result = qword_1010F6D20;
  if (!qword_1010F6D20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommitmentKey, &type metadata for CommitmentKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D20);
  }
  return result;
}

unint64_t sub_1002FCCA8(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FCCCC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FCCCC()
{
  unint64_t result;

  result = qword_1010F6D28;
  if (!qword_1010F6D28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedPrivateKey, &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D28);
  }
  return result;
}

uint64_t sub_1002FCD10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FCD34, (uint64_t (*)(void))sub_1002FCD78, (uint64_t (*)(void))sub_1002FCDBC, (uint64_t (*)(void))sub_1002FCE00);
}

unint64_t sub_1002FCD34()
{
  unint64_t result;

  result = qword_1010F6D30;
  if (!qword_1010F6D30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedPrivateKey, &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D30);
  }
  return result;
}

unint64_t sub_1002FCD78()
{
  unint64_t result;

  result = qword_1010F6D38;
  if (!qword_1010F6D38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedPrivateKey, &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D38);
  }
  return result;
}

unint64_t sub_1002FCDBC()
{
  unint64_t result;

  result = qword_1010F6D40;
  if (!qword_1010F6D40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedPrivateKey, &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D40);
  }
  return result;
}

unint64_t sub_1002FCE00()
{
  unint64_t result;

  result = qword_1010F6D48;
  if (!qword_1010F6D48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedPrivateKey, &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D48);
  }
  return result;
}

unint64_t sub_1002FCE48()
{
  unint64_t result;

  result = qword_1010F6D50;
  if (!qword_1010F6D50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedPrivateKey, &type metadata for EncryptedPrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D50);
  }
  return result;
}

unint64_t sub_1002FCE8C(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FCEB0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FCEB0()
{
  unint64_t result;

  result = qword_1010F6D58;
  if (!qword_1010F6D58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D58);
  }
  return result;
}

uint64_t sub_1002FCEF4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_10007CB0C, (uint64_t (*)(void))sub_100068134, (uint64_t (*)(void))sub_1002FCF18, (uint64_t (*)(void))sub_1002FCF5C);
}

unint64_t sub_1002FCF18()
{
  unint64_t result;

  result = qword_1010F6D60;
  if (!qword_1010F6D60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D60);
  }
  return result;
}

unint64_t sub_1002FCF5C()
{
  unint64_t result;

  result = qword_1010F6D68;
  if (!qword_1010F6D68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D68);
  }
  return result;
}

unint64_t sub_1002FCFA4()
{
  unint64_t result;

  result = qword_1010F6D70;
  if (!qword_1010F6D70)
  {
    result = swift_getWitnessTable("Ս#", &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D70);
  }
  return result;
}

unint64_t sub_1002FCFE8(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FD00C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FD00C()
{
  unint64_t result;

  result = qword_1010F6D78;
  if (!qword_1010F6D78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for StandardPublicKey, &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D78);
  }
  return result;
}

uint64_t sub_1002FD050(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FD074, (uint64_t (*)(void))sub_1002FD0B8, (uint64_t (*)(void))sub_1002FD0FC, (uint64_t (*)(void))sub_1002FD140);
}

unint64_t sub_1002FD074()
{
  unint64_t result;

  result = qword_1010F6D80;
  if (!qword_1010F6D80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for StandardPublicKey, &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D80);
  }
  return result;
}

unint64_t sub_1002FD0B8()
{
  unint64_t result;

  result = qword_1010F6D88;
  if (!qword_1010F6D88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for StandardPublicKey, &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D88);
  }
  return result;
}

unint64_t sub_1002FD0FC()
{
  unint64_t result;

  result = qword_1010F6D90;
  if (!qword_1010F6D90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for StandardPublicKey, &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D90);
  }
  return result;
}

unint64_t sub_1002FD140()
{
  unint64_t result;

  result = qword_1010F6D98;
  if (!qword_1010F6D98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for StandardPublicKey, &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6D98);
  }
  return result;
}

unint64_t sub_1002FD188()
{
  unint64_t result;

  result = qword_1010F6DA0;
  if (!qword_1010F6DA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for StandardPublicKey, &type metadata for StandardPublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6DA0);
  }
  return result;
}

unint64_t sub_1002FD1CC(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FD1F0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FD1F0()
{
  unint64_t result;

  result = qword_1010F6DA8;
  if (!qword_1010F6DA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6DA8);
  }
  return result;
}

uint64_t sub_1002FD234(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FD258, (uint64_t (*)(void))sub_1002FD29C, (uint64_t (*)(void))sub_1002FD2E0, (uint64_t (*)(void))sub_1002FD324);
}

unint64_t sub_1002FD258()
{
  unint64_t result;

  result = qword_10111C9B0;
  if (!qword_10111C9B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_10111C9B0);
  }
  return result;
}

unint64_t sub_1002FD29C()
{
  unint64_t result;

  result = qword_10110EF00;
  if (!qword_10110EF00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_10110EF00);
  }
  return result;
}

unint64_t sub_1002FD2E0()
{
  unint64_t result;

  result = qword_1010F6DB0;
  if (!qword_1010F6DB0)
  {
    result = swift_getWitnessTable("Ջ#", &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6DB0);
  }
  return result;
}

unint64_t sub_1002FD324()
{
  unint64_t result;

  result = qword_1010F6DB8;
  if (!qword_1010F6DB8)
  {
    result = swift_getWitnessTable("͋#", &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6DB8);
  }
  return result;
}

unint64_t sub_1002FD36C()
{
  unint64_t result;

  result = qword_1010F6DC0;
  if (!qword_1010F6DC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PublicKey, &type metadata for PublicKey);
    atomic_store(result, (unint64_t *)&qword_1010F6DC0);
  }
  return result;
}

unint64_t sub_1002FD3B0(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FD3D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FD3D4()
{
  unint64_t result;

  result = qword_1010F6DC8;
  if (!qword_1010F6DC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearOwnerAdvertisement, &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6DC8);
  }
  return result;
}

uint64_t sub_1002FD418(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1001BCA48, (uint64_t (*)(void))sub_1001BBF58, (uint64_t (*)(void))sub_1002FD43C, (uint64_t (*)(void))sub_1001B5DBC);
}

unint64_t sub_1002FD43C()
{
  unint64_t result;

  result = qword_1010F6DD0;
  if (!qword_1010F6DD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearOwnerAdvertisement, &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6DD0);
  }
  return result;
}

unint64_t sub_1002FD484()
{
  unint64_t result;

  result = qword_1010F6DD8;
  if (!qword_1010F6DD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearOwnerAdvertisement, &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6DD8);
  }
  return result;
}

unint64_t sub_1002FD4C8(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FD4EC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FD4EC()
{
  unint64_t result;

  result = qword_1010F6DE0;
  if (!qword_1010F6DE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6DE0);
  }
  return result;
}

uint64_t sub_1002FD530(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1001BCA8C, (uint64_t (*)(void))sub_1001BBFE0, (uint64_t (*)(void))sub_1002FD554, (uint64_t (*)(void))sub_1001AE66C);
}

unint64_t sub_1002FD554()
{
  unint64_t result;

  result = qword_1010F6DE8;
  if (!qword_1010F6DE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6DE8);
  }
  return result;
}

unint64_t sub_1002FD59C()
{
  unint64_t result;

  result = qword_1010F6DF0;
  if (!qword_1010F6DF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6DF0);
  }
  return result;
}

unint64_t sub_1002FD5E0(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FD604();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FD604()
{
  unint64_t result;

  result = qword_1010F6DF8;
  if (!qword_1010F6DF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HashedAdvertisement, &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6DF8);
  }
  return result;
}

uint64_t sub_1002FD648(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FD66C, (uint64_t (*)(void))sub_1002FD6B0, (uint64_t (*)(void))sub_1002FD6F4, (uint64_t (*)(void))sub_100153D50);
}

unint64_t sub_1002FD66C()
{
  unint64_t result;

  result = qword_1010F6E00;
  if (!qword_1010F6E00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HashedAdvertisement, &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6E00);
  }
  return result;
}

unint64_t sub_1002FD6B0()
{
  unint64_t result;

  result = qword_1010F6E08;
  if (!qword_1010F6E08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HashedAdvertisement, &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6E08);
  }
  return result;
}

unint64_t sub_1002FD6F4()
{
  unint64_t result;

  result = qword_1010F6E10;
  if (!qword_1010F6E10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HashedAdvertisement, &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6E10);
  }
  return result;
}

unint64_t sub_1002FD73C()
{
  unint64_t result;

  result = qword_1010F6E18;
  if (!qword_1010F6E18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for HashedAdvertisement, &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6E18);
  }
  return result;
}

unint64_t sub_1002FD780(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FD7A4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FD7A4()
{
  unint64_t result;

  result = qword_1010F6E20;
  if (!qword_1010F6E20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1010F6E20);
  }
  return result;
}

uint64_t sub_1002FD7E8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FD80C, (uint64_t (*)(void))sub_1002FD850, (uint64_t (*)(void))sub_1002FD894, (uint64_t (*)(void))sub_1002FD8D8);
}

unint64_t sub_1002FD80C()
{
  unint64_t result;

  result = qword_1010F6E28;
  if (!qword_1010F6E28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1010F6E28);
  }
  return result;
}

unint64_t sub_1002FD850()
{
  unint64_t result;

  result = qword_1010F6E30;
  if (!qword_1010F6E30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1010F6E30);
  }
  return result;
}

unint64_t sub_1002FD894()
{
  unint64_t result;

  result = qword_1010F6E38;
  if (!qword_1010F6E38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1010F6E38);
  }
  return result;
}

unint64_t sub_1002FD8D8()
{
  unint64_t result;

  result = qword_1010F6E40;
  if (!qword_1010F6E40)
  {
    result = swift_getWitnessTable("݆#", &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1010F6E40);
  }
  return result;
}

unint64_t sub_1002FD920()
{
  unint64_t result;

  result = qword_1010F6E48;
  if (!qword_1010F6E48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PairingNonce, &type metadata for PairingNonce);
    atomic_store(result, (unint64_t *)&qword_1010F6E48);
  }
  return result;
}

unint64_t sub_1002FD964(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FD988();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FD988()
{
  unint64_t result;

  result = qword_1010F6E50;
  if (!qword_1010F6E50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharedSecretKey, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E50);
  }
  return result;
}

uint64_t sub_1002FD9CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1001EC3A8, (uint64_t (*)(void))sub_1001EC4B8, (uint64_t (*)(void))sub_1002FD9F0, (uint64_t (*)(void))sub_1002FDA34);
}

unint64_t sub_1002FD9F0()
{
  unint64_t result;

  result = qword_1010F6E58;
  if (!qword_1010F6E58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharedSecretKey, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E58);
  }
  return result;
}

unint64_t sub_1002FDA34()
{
  unint64_t result;

  result = qword_1010F6E60;
  if (!qword_1010F6E60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharedSecretKey, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E60);
  }
  return result;
}

unint64_t sub_1002FDA7C()
{
  unint64_t result;

  result = qword_1010F6E68;
  if (!qword_1010F6E68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharedSecretKey, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E68);
  }
  return result;
}

unint64_t sub_1002FDAC0(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FDAE4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FDAE4()
{
  unint64_t result;

  result = qword_1010F6E70;
  if (!qword_1010F6E70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AntiTrackingKey, &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E70);
  }
  return result;
}

uint64_t sub_1002FDB28(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FDB4C, (uint64_t (*)(void))sub_1002FDB90, (uint64_t (*)(void))sub_1002FDBD4, (uint64_t (*)(void))sub_1002FDC18);
}

unint64_t sub_1002FDB4C()
{
  unint64_t result;

  result = qword_1010F6E78;
  if (!qword_1010F6E78)
  {
    result = swift_getWitnessTable("ń#", &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E78);
  }
  return result;
}

unint64_t sub_1002FDB90()
{
  unint64_t result;

  result = qword_1010F6E80;
  if (!qword_1010F6E80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AntiTrackingKey, &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E80);
  }
  return result;
}

unint64_t sub_1002FDBD4()
{
  unint64_t result;

  result = qword_1010F6E88;
  if (!qword_1010F6E88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AntiTrackingKey, &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E88);
  }
  return result;
}

unint64_t sub_1002FDC18()
{
  unint64_t result;

  result = qword_1010F6E90;
  if (!qword_1010F6E90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AntiTrackingKey, &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E90);
  }
  return result;
}

unint64_t sub_1002FDC60()
{
  unint64_t result;

  result = qword_1010F6E98;
  if (!qword_1010F6E98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AntiTrackingKey, &type metadata for AntiTrackingKey);
    atomic_store(result, (unint64_t *)&qword_1010F6E98);
  }
  return result;
}

unint64_t sub_1002FDCA4(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FDCC8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FDCC8()
{
  unint64_t result;

  result = qword_1010F6EA0;
  if (!qword_1010F6EA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IntermediateKey, &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EA0);
  }
  return result;
}

uint64_t sub_1002FDD0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FDD30, (uint64_t (*)(void))sub_1002FDD74, (uint64_t (*)(void))sub_1002FDDB8, (uint64_t (*)(void))sub_1002FDDFC);
}

unint64_t sub_1002FDD30()
{
  unint64_t result;

  result = qword_1010F6EA8;
  if (!qword_1010F6EA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IntermediateKey, &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EA8);
  }
  return result;
}

unint64_t sub_1002FDD74()
{
  unint64_t result;

  result = qword_1010F6EB0;
  if (!qword_1010F6EB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IntermediateKey, &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EB0);
  }
  return result;
}

unint64_t sub_1002FDDB8()
{
  unint64_t result;

  result = qword_1010F6EB8;
  if (!qword_1010F6EB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IntermediateKey, &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EB8);
  }
  return result;
}

unint64_t sub_1002FDDFC()
{
  unint64_t result;

  result = qword_1010F6EC0;
  if (!qword_1010F6EC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IntermediateKey, &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EC0);
  }
  return result;
}

unint64_t sub_1002FDE44()
{
  unint64_t result;

  result = qword_1010F6EC8;
  if (!qword_1010F6EC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IntermediateKey, &type metadata for IntermediateKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EC8);
  }
  return result;
}

unint64_t sub_1002FDE88(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FDEAC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FDEAC()
{
  unint64_t result;

  result = qword_1010F6ED0;
  if (!qword_1010F6ED0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1010F6ED0);
  }
  return result;
}

uint64_t sub_1002FDEF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FDF14, (uint64_t (*)(void))sub_1002FDF58, (uint64_t (*)(void))sub_1002FDF9C, (uint64_t (*)(void))sub_1002FDFE0);
}

unint64_t sub_1002FDF14()
{
  unint64_t result;

  result = qword_1010F6ED8;
  if (!qword_1010F6ED8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1010F6ED8);
  }
  return result;
}

unint64_t sub_1002FDF58()
{
  unint64_t result;

  result = qword_1010F6EE0;
  if (!qword_1010F6EE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EE0);
  }
  return result;
}

unint64_t sub_1002FDF9C()
{
  unint64_t result;

  result = qword_1010F6EE8;
  if (!qword_1010F6EE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EE8);
  }
  return result;
}

unint64_t sub_1002FDFE0()
{
  unint64_t result;

  result = qword_1010F6EF0;
  if (!qword_1010F6EF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EF0);
  }
  return result;
}

unint64_t sub_1002FE028()
{
  unint64_t result;

  result = qword_1010F6EF8;
  if (!qword_1010F6EF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CommandKey, &type metadata for CommandKey);
    atomic_store(result, (unint64_t *)&qword_1010F6EF8);
  }
  return result;
}

unint64_t sub_1002FE06C(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FE090();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FE090()
{
  unint64_t result;

  result = qword_1010F6F00;
  if (!qword_1010F6F00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F00);
  }
  return result;
}

uint64_t sub_1002FE0D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FE0F8, (uint64_t (*)(void))sub_1002FE13C, (uint64_t (*)(void))sub_1002FE180, (uint64_t (*)(void))sub_1002FE1C4);
}

unint64_t sub_1002FE0F8()
{
  unint64_t result;

  result = qword_1010F6F08;
  if (!qword_1010F6F08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F08);
  }
  return result;
}

unint64_t sub_1002FE13C()
{
  unint64_t result;

  result = qword_1010F6F10;
  if (!qword_1010F6F10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F10);
  }
  return result;
}

unint64_t sub_1002FE180()
{
  unint64_t result;

  result = qword_1010F6F18;
  if (!qword_1010F6F18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F18);
  }
  return result;
}

unint64_t sub_1002FE1C4()
{
  unint64_t result;

  result = qword_1010F6F20;
  if (!qword_1010F6F20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ConnectionKey, &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F20);
  }
  return result;
}

unint64_t sub_1002FE20C()
{
  unint64_t result;

  result = qword_1010F6F28;
  if (!qword_1010F6F28)
  {
    result = swift_getWitnessTable("̀#", &type metadata for ConnectionKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F28);
  }
  return result;
}

unint64_t sub_1002FE250(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FE274();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FE274()
{
  unint64_t result;

  result = qword_1010F6F30;
  if (!qword_1010F6F30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F30);
  }
  return result;
}

uint64_t sub_1002FE2B8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FE2DC, (uint64_t (*)(void))sub_1002FE320, (uint64_t (*)(void))sub_1002FE364, (uint64_t (*)(void))sub_1002FE3A8);
}

unint64_t sub_1002FE2DC()
{
  unint64_t result;

  result = qword_1010F6F38;
  if (!qword_1010F6F38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F38);
  }
  return result;
}

unint64_t sub_1002FE320()
{
  unint64_t result;

  result = qword_1010F6F40;
  if (!qword_1010F6F40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F40);
  }
  return result;
}

unint64_t sub_1002FE364()
{
  unint64_t result;

  result = qword_1010F6F48;
  if (!qword_1010F6F48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F48);
  }
  return result;
}

unint64_t sub_1002FE3A8()
{
  unint64_t result;

  result = qword_1010F6F50;
  if (!qword_1010F6F50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F50);
  }
  return result;
}

unint64_t sub_1002FE3F0()
{
  unint64_t result;

  result = qword_1010F6F58;
  if (!qword_1010F6F58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LongTermKey, &type metadata for LongTermKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F58);
  }
  return result;
}

unint64_t sub_1002FE434(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FE458();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FE458()
{
  unint64_t result;

  result = qword_1010F6F60;
  if (!qword_1010F6F60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearbyTokenKey, &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F60);
  }
  return result;
}

uint64_t sub_1002FE49C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FE4C0, (uint64_t (*)(void))sub_1002FE504, (uint64_t (*)(void))sub_1002FE548, (uint64_t (*)(void))sub_1002FE58C);
}

unint64_t sub_1002FE4C0()
{
  unint64_t result;

  result = qword_1010F6F68;
  if (!qword_1010F6F68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearbyTokenKey, &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F68);
  }
  return result;
}

unint64_t sub_1002FE504()
{
  unint64_t result;

  result = qword_1010F6F70;
  if (!qword_1010F6F70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearbyTokenKey, &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F70);
  }
  return result;
}

unint64_t sub_1002FE548()
{
  unint64_t result;

  result = qword_1010F6F78;
  if (!qword_1010F6F78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearbyTokenKey, &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F78);
  }
  return result;
}

unint64_t sub_1002FE58C()
{
  unint64_t result;

  result = qword_1010F6F80;
  if (!qword_1010F6F80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NearbyTokenKey, &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F80);
  }
  return result;
}

unint64_t sub_1002FE5D4()
{
  unint64_t result;

  result = qword_1010F6F88;
  if (!qword_1010F6F88)
  {
    result = swift_getWitnessTable("}~#", &type metadata for NearbyTokenKey);
    atomic_store(result, (unint64_t *)&qword_1010F6F88);
  }
  return result;
}

unint64_t sub_1002FE618(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FE63C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FE63C()
{
  unint64_t result;

  result = qword_1010F6F90;
  if (!qword_1010F6F90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NFCPartialAdvertisement, &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6F90);
  }
  return result;
}

uint64_t sub_1002FE680(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FE6A4, (uint64_t (*)(void))sub_1002FE6E8, (uint64_t (*)(void))sub_1002FE72C, (uint64_t (*)(void))sub_1002FE770);
}

unint64_t sub_1002FE6A4()
{
  unint64_t result;

  result = qword_1010F6F98;
  if (!qword_1010F6F98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NFCPartialAdvertisement, &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6F98);
  }
  return result;
}

unint64_t sub_1002FE6E8()
{
  unint64_t result;

  result = qword_1010F6FA0;
  if (!qword_1010F6FA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NFCPartialAdvertisement, &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6FA0);
  }
  return result;
}

unint64_t sub_1002FE72C()
{
  unint64_t result;

  result = qword_1010F6FA8;
  if (!qword_1010F6FA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NFCPartialAdvertisement, &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6FA8);
  }
  return result;
}

unint64_t sub_1002FE770()
{
  unint64_t result;

  result = qword_1010F6FB0;
  if (!qword_1010F6FB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NFCPartialAdvertisement, &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6FB0);
  }
  return result;
}

unint64_t sub_1002FE7B8()
{
  unint64_t result;

  result = qword_1010F6FB8;
  if (!qword_1010F6FB8)
  {
    result = swift_getWitnessTable("U}#", &type metadata for NFCPartialAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F6FB8);
  }
  return result;
}

unint64_t sub_1002FE7FC(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FE820();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FE820()
{
  unint64_t result;

  result = qword_1010F6FC0;
  if (!qword_1010F6FC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE1, &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1010F6FC0);
  }
  return result;
}

uint64_t sub_1002FE864(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FE888, (uint64_t (*)(void))sub_1002FE8CC, (uint64_t (*)(void))sub_1002FE910, (uint64_t (*)(void))sub_1002FE954);
}

unint64_t sub_1002FE888()
{
  unint64_t result;

  result = qword_1010F6FC8;
  if (!qword_1010F6FC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE1, &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1010F6FC8);
  }
  return result;
}

unint64_t sub_1002FE8CC()
{
  unint64_t result;

  result = qword_1010F6FD0;
  if (!qword_1010F6FD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE1, &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1010F6FD0);
  }
  return result;
}

unint64_t sub_1002FE910()
{
  unint64_t result;

  result = qword_1010F6FD8;
  if (!qword_1010F6FD8)
  {
    result = swift_getWitnessTable("}|#", &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1010F6FD8);
  }
  return result;
}

unint64_t sub_1002FE954()
{
  unint64_t result;

  result = qword_1010F6FE0;
  if (!qword_1010F6FE0)
  {
    result = swift_getWitnessTable("u|#", &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1010F6FE0);
  }
  return result;
}

unint64_t sub_1002FE99C()
{
  unint64_t result;

  result = qword_1010F6FE8;
  if (!qword_1010F6FE8)
  {
    result = swift_getWitnessTable("-|#", &type metadata for EncryptedBlobE1);
    atomic_store(result, (unint64_t *)&qword_1010F6FE8);
  }
  return result;
}

unint64_t sub_1002FE9E0(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FEA04();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FEA04()
{
  unint64_t result;

  result = qword_1010F6FF0;
  if (!qword_1010F6FF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FindMyNetworkId, &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1010F6FF0);
  }
  return result;
}

uint64_t sub_1002FEA48(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FEA6C, (uint64_t (*)(void))sub_1002FEAB0, (uint64_t (*)(void))sub_1002FEAF4, (uint64_t (*)(void))sub_100059684);
}

unint64_t sub_1002FEA6C()
{
  unint64_t result;

  result = qword_1010F6FF8;
  if (!qword_1010F6FF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FindMyNetworkId, &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1010F6FF8);
  }
  return result;
}

unint64_t sub_1002FEAB0()
{
  unint64_t result;

  result = qword_1010F7000;
  if (!qword_1010F7000)
  {
    result = swift_getWitnessTable("m{#", &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1010F7000);
  }
  return result;
}

unint64_t sub_1002FEAF4()
{
  unint64_t result;

  result = qword_1010F7008;
  if (!qword_1010F7008)
  {
    result = swift_getWitnessTable("U{#", &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1010F7008);
  }
  return result;
}

unint64_t sub_1002FEB3C()
{
  unint64_t result;

  result = qword_1010F7010;
  if (!qword_1010F7010)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for FindMyNetworkId, &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1010F7010);
  }
  return result;
}

unint64_t sub_1002FEB80(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FEBA4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FEBA4()
{
  unint64_t result;

  result = qword_1010F7018;
  if (!qword_1010F7018)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE2, &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1010F7018);
  }
  return result;
}

uint64_t sub_1002FEBE8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FEC0C, (uint64_t (*)(void))sub_1002FEC50, (uint64_t (*)(void))sub_1002FEC94, (uint64_t (*)(void))sub_1002FECD8);
}

unint64_t sub_1002FEC0C()
{
  unint64_t result;

  result = qword_1010F7020;
  if (!qword_1010F7020)
  {
    result = swift_getWitnessTable("]z#", &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1010F7020);
  }
  return result;
}

unint64_t sub_1002FEC50()
{
  unint64_t result;

  result = qword_1010F7028;
  if (!qword_1010F7028)
  {
    result = swift_getWitnessTable("Ez#", &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1010F7028);
  }
  return result;
}

unint64_t sub_1002FEC94()
{
  unint64_t result;

  result = qword_1010F7030;
  if (!qword_1010F7030)
  {
    result = swift_getWitnessTable("-z#", &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1010F7030);
  }
  return result;
}

unint64_t sub_1002FECD8()
{
  unint64_t result;

  result = qword_1010F7038;
  if (!qword_1010F7038)
  {
    result = swift_getWitnessTable("%z#", &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1010F7038);
  }
  return result;
}

unint64_t sub_1002FED20()
{
  unint64_t result;

  result = qword_1010F7040;
  if (!qword_1010F7040)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE2, &type metadata for EncryptedBlobE2);
    atomic_store(result, (unint64_t *)&qword_1010F7040);
  }
  return result;
}

unint64_t sub_1002FED64(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FED88();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FED88()
{
  unint64_t result;

  result = qword_1010F7048;
  if (!qword_1010F7048)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE3, &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1010F7048);
  }
  return result;
}

uint64_t sub_1002FEDCC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FEDF0, (uint64_t (*)(void))sub_1002FEE34, (uint64_t (*)(void))sub_1002FEE78, (uint64_t (*)(void))sub_1002FEEBC);
}

unint64_t sub_1002FEDF0()
{
  unint64_t result;

  result = qword_1010F7050;
  if (!qword_1010F7050)
  {
    result = swift_getWitnessTable("5y#", &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1010F7050);
  }
  return result;
}

unint64_t sub_1002FEE34()
{
  unint64_t result;

  result = qword_1010F7058;
  if (!qword_1010F7058)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE3, &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1010F7058);
  }
  return result;
}

unint64_t sub_1002FEE78()
{
  unint64_t result;

  result = qword_1010F7060;
  if (!qword_1010F7060)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE3, &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1010F7060);
  }
  return result;
}

unint64_t sub_1002FEEBC()
{
  unint64_t result;

  result = qword_1010F7068;
  if (!qword_1010F7068)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE3, &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1010F7068);
  }
  return result;
}

unint64_t sub_1002FEF04()
{
  unint64_t result;

  result = qword_1010F7070;
  if (!qword_1010F7070)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE3, &type metadata for EncryptedBlobE3);
    atomic_store(result, (unint64_t *)&qword_1010F7070);
  }
  return result;
}

unint64_t sub_1002FEF48(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FEF6C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FEF6C()
{
  unint64_t result;

  result = qword_1010F7078;
  if (!qword_1010F7078)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE4, &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1010F7078);
  }
  return result;
}

uint64_t sub_1002FEFB0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FEFD4, (uint64_t (*)(void))sub_1002FF018, (uint64_t (*)(void))sub_1002FF05C, (uint64_t (*)(void))sub_1002FF0A0);
}

unint64_t sub_1002FEFD4()
{
  unint64_t result;

  result = qword_1010F7080;
  if (!qword_1010F7080)
  {
    result = swift_getWitnessTable("\rx#", &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1010F7080);
  }
  return result;
}

unint64_t sub_1002FF018()
{
  unint64_t result;

  result = qword_1010F7088;
  if (!qword_1010F7088)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE4, &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1010F7088);
  }
  return result;
}

unint64_t sub_1002FF05C()
{
  unint64_t result;

  result = qword_1010F7090;
  if (!qword_1010F7090)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE4, &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1010F7090);
  }
  return result;
}

unint64_t sub_1002FF0A0()
{
  unint64_t result;

  result = qword_1010F7098;
  if (!qword_1010F7098)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE4, &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1010F7098);
  }
  return result;
}

unint64_t sub_1002FF0E8()
{
  unint64_t result;

  result = qword_1010F70A0;
  if (!qword_1010F70A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for EncryptedBlobE4, &type metadata for EncryptedBlobE4);
    atomic_store(result, (unint64_t *)&qword_1010F70A0);
  }
  return result;
}

unint64_t sub_1002FF12C(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FF150();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FF150()
{
  unint64_t result;

  result = qword_1010F70A8;
  if (!qword_1010F70A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1010F70A8);
  }
  return result;
}

uint64_t sub_1002FF194(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FF1B8, (uint64_t (*)(void))sub_1002FF1FC, (uint64_t (*)(void))sub_1002FF240, (uint64_t (*)(void))sub_1002FF284);
}

unint64_t sub_1002FF1B8()
{
  unint64_t result;

  result = qword_1010F70B0;
  if (!qword_1010F70B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1010F70B0);
  }
  return result;
}

unint64_t sub_1002FF1FC()
{
  unint64_t result;

  result = qword_1010F70B8;
  if (!qword_1010F70B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1010F70B8);
  }
  return result;
}

unint64_t sub_1002FF240()
{
  unint64_t result;

  result = qword_1010F70C0;
  if (!qword_1010F70C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1010F70C0);
  }
  return result;
}

unint64_t sub_1002FF284()
{
  unint64_t result;

  result = qword_1010F70C8;
  if (!qword_1010F70C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RefKey, &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1010F70C8);
  }
  return result;
}

unint64_t sub_1002FF2CC()
{
  unint64_t result;

  result = qword_1010F70D0;
  if (!qword_1010F70D0)
  {
    result = swift_getWitnessTable("ev#", &type metadata for RefKey);
    atomic_store(result, (unint64_t *)&qword_1010F70D0);
  }
  return result;
}

unint64_t sub_1002FF310(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FF334();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FF334()
{
  unint64_t result;

  result = qword_1010F70D8;
  if (!qword_1010F70D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1010F70D8);
  }
  return result;
}

uint64_t sub_1002FF378(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FF39C, (uint64_t (*)(void))sub_1002FF3E0, (uint64_t (*)(void))sub_1002FF424, (uint64_t (*)(void))sub_1002FF468);
}

unint64_t sub_1002FF39C()
{
  unint64_t result;

  result = qword_1010F70E0;
  if (!qword_1010F70E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1010F70E0);
  }
  return result;
}

unint64_t sub_1002FF3E0()
{
  unint64_t result;

  result = qword_1010F70E8;
  if (!qword_1010F70E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1010F70E8);
  }
  return result;
}

unint64_t sub_1002FF424()
{
  unint64_t result;

  result = qword_1010F70F0;
  if (!qword_1010F70F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1010F70F0);
  }
  return result;
}

unint64_t sub_1002FF468()
{
  unint64_t result;

  result = qword_1010F70F8;
  if (!qword_1010F70F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SikPub, &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1010F70F8);
  }
  return result;
}

unint64_t sub_1002FF4B0()
{
  unint64_t result;

  result = qword_1010F7100;
  if (!qword_1010F7100)
  {
    result = swift_getWitnessTable("=u#", &type metadata for SikPub);
    atomic_store(result, (unint64_t *)&qword_1010F7100);
  }
  return result;
}

unint64_t sub_1002FF4F4(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FF518();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FF518()
{
  unint64_t result;

  result = qword_1010F7108;
  if (!qword_1010F7108)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.C1, &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1010F7108);
  }
  return result;
}

uint64_t sub_1002FF55C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FF580, (uint64_t (*)(void))sub_1002FF5C4, (uint64_t (*)(void))sub_1002FF608, (uint64_t (*)(void))sub_1002FF64C);
}

unint64_t sub_1002FF580()
{
  unint64_t result;

  result = qword_1010F7110;
  if (!qword_1010F7110)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.C1, &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1010F7110);
  }
  return result;
}

unint64_t sub_1002FF5C4()
{
  unint64_t result;

  result = qword_1010F7118;
  if (!qword_1010F7118)
  {
    result = swift_getWitnessTable("}t#", &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1010F7118);
  }
  return result;
}

unint64_t sub_1002FF608()
{
  unint64_t result;

  result = qword_1010F7120;
  if (!qword_1010F7120)
  {
    result = swift_getWitnessTable("et#", &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1010F7120);
  }
  return result;
}

unint64_t sub_1002FF64C()
{
  unint64_t result;

  result = qword_1010F7128;
  if (!qword_1010F7128)
  {
    result = swift_getWitnessTable("]t#", &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1010F7128);
  }
  return result;
}

unint64_t sub_1002FF694()
{
  unint64_t result;

  result = qword_1010F7130;
  if (!qword_1010F7130)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.C1, &type metadata for CollaborativeKeyGen.C1);
    atomic_store(result, (unint64_t *)&qword_1010F7130);
  }
  return result;
}

unint64_t sub_1002FF6D8(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FF6FC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FF6FC()
{
  unint64_t result;

  result = qword_1010F7138;
  if (!qword_1010F7138)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C2, &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010F7138);
  }
  return result;
}

unint64_t sub_1002FF740(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FF764();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FF764()
{
  unint64_t result;

  result = qword_1010F7140;
  if (!qword_1010F7140)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C2, &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010F7140);
  }
  return result;
}

uint64_t sub_1002FF7A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FF7CC, (uint64_t (*)(void))sub_1002FF810, (uint64_t (*)(void))sub_1002FF854, (uint64_t (*)(void))sub_1002FF898);
}

unint64_t sub_1002FF7CC()
{
  unint64_t result;

  result = qword_1010F7148;
  if (!qword_1010F7148)
  {
    result = swift_getWitnessTable("Qs#", &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010F7148);
  }
  return result;
}

unint64_t sub_1002FF810()
{
  unint64_t result;

  result = qword_1010F7150;
  if (!qword_1010F7150)
  {
    result = swift_getWitnessTable("9s#", &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010F7150);
  }
  return result;
}

unint64_t sub_1002FF854()
{
  unint64_t result;

  result = qword_1010F7158;
  if (!qword_1010F7158)
  {
    result = swift_getWitnessTable("!s#", &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010F7158);
  }
  return result;
}

unint64_t sub_1002FF898()
{
  unint64_t result;

  result = qword_1010F7160;
  if (!qword_1010F7160)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C2, &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010F7160);
  }
  return result;
}

unint64_t sub_1002FF8E0()
{
  unint64_t result;

  result = qword_1010F7168;
  if (!qword_1010F7168)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C2, &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010F7168);
  }
  return result;
}

unint64_t sub_1002FF924(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FF948();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FF948()
{
  unint64_t result;

  result = qword_1010F7170;
  if (!qword_1010F7170)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C3, &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7170);
  }
  return result;
}

unint64_t sub_1002FF98C(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FF9B0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FF9B0()
{
  unint64_t result;

  result = qword_1010F7178;
  if (!qword_1010F7178)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C3, &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7178);
  }
  return result;
}

uint64_t sub_1002FF9F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FFA18, (uint64_t (*)(void))sub_1002FFA5C, (uint64_t (*)(void))sub_1002FFAA0, (uint64_t (*)(void))sub_1002FFAE4);
}

unint64_t sub_1002FFA18()
{
  unint64_t result;

  result = qword_1010F7180;
  if (!qword_1010F7180)
  {
    result = swift_getWitnessTable("\rr#", &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7180);
  }
  return result;
}

unint64_t sub_1002FFA5C()
{
  unint64_t result;

  result = qword_1010F7188;
  if (!qword_1010F7188)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C3, &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7188);
  }
  return result;
}

unint64_t sub_1002FFAA0()
{
  unint64_t result;

  result = qword_1010F7190;
  if (!qword_1010F7190)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C3, &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7190);
  }
  return result;
}

unint64_t sub_1002FFAE4()
{
  unint64_t result;

  result = qword_1010F7198;
  if (!qword_1010F7198)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C3, &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7198);
  }
  return result;
}

unint64_t sub_1002FFB2C()
{
  unint64_t result;

  result = qword_1010F71A0;
  if (!qword_1010F71A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v1.C3, &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010F71A0);
  }
  return result;
}

unint64_t sub_1002FFB70(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FFB94();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FFB94()
{
  unint64_t result;

  result = qword_1010F71A8;
  if (!qword_1010F71A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C2, &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010F71A8);
  }
  return result;
}

unint64_t sub_1002FFBD8(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FFBFC();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FFBFC()
{
  unint64_t result;

  result = qword_1010F71B0;
  if (!qword_1010F71B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C2, &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010F71B0);
  }
  return result;
}

uint64_t sub_1002FFC40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FFC64, (uint64_t (*)(void))sub_1002FFCA8, (uint64_t (*)(void))sub_1002FFCEC, (uint64_t (*)(void))sub_1002FFD30);
}

unint64_t sub_1002FFC64()
{
  unint64_t result;

  result = qword_1010F71B8;
  if (!qword_1010F71B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C2, &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010F71B8);
  }
  return result;
}

unint64_t sub_1002FFCA8()
{
  unint64_t result;

  result = qword_1010F71C0;
  if (!qword_1010F71C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C2, &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010F71C0);
  }
  return result;
}

unint64_t sub_1002FFCEC()
{
  unint64_t result;

  result = qword_1010F71C8;
  if (!qword_1010F71C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C2, &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010F71C8);
  }
  return result;
}

unint64_t sub_1002FFD30()
{
  unint64_t result;

  result = qword_1010F71D0;
  if (!qword_1010F71D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C2, &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010F71D0);
  }
  return result;
}

unint64_t sub_1002FFD78()
{
  unint64_t result;

  result = qword_1010F71D8;
  if (!qword_1010F71D8)
  {
    result = swift_getWitnessTable("Ip#", &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010F71D8);
  }
  return result;
}

unint64_t sub_1002FFDBC(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FFDE0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FFDE0()
{
  unint64_t result;

  result = qword_1010F71E0;
  if (!qword_1010F71E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C3, &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1010F71E0);
  }
  return result;
}

unint64_t sub_1002FFE24(uint64_t a1)
{
  unint64_t result;

  result = sub_1002FFE48();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002FFE48()
{
  unint64_t result;

  result = qword_1010F71E8;
  if (!qword_1010F71E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C3, &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1010F71E8);
  }
  return result;
}

uint64_t sub_1002FFE8C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1002FFEB0(a1, a2, a3, (uint64_t (*)(void))sub_1002FFF00, (uint64_t (*)(void))sub_1002FFF44, (uint64_t (*)(void))sub_1002FFF88, (uint64_t (*)(void))sub_1002FFFCC);
}

uint64_t sub_1002FFEB0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  result = a7();
  a1[4] = result;
  return result;
}

unint64_t sub_1002FFF00()
{
  unint64_t result;

  result = qword_1010F71F0;
  if (!qword_1010F71F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C3, &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1010F71F0);
  }
  return result;
}

unint64_t sub_1002FFF44()
{
  unint64_t result;

  result = qword_1010F71F8;
  if (!qword_1010F71F8)
  {
    result = swift_getWitnessTable("mo#", &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1010F71F8);
  }
  return result;
}

unint64_t sub_1002FFF88()
{
  unint64_t result;

  result = qword_1010F7200;
  if (!qword_1010F7200)
  {
    result = swift_getWitnessTable("Uo#", &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7200);
  }
  return result;
}

unint64_t sub_1002FFFCC()
{
  unint64_t result;

  result = qword_1010F7208;
  if (!qword_1010F7208)
  {
    result = swift_getWitnessTable("Mo#", &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7208);
  }
  return result;
}

unint64_t sub_100300014()
{
  unint64_t result;

  result = qword_1010F7210;
  if (!qword_1010F7210)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CollaborativeKeyGen.v2.C3, &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, (unint64_t *)&qword_1010F7210);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyRepresentableInternal()
{
  return &type metadata for KeyRepresentableInternal;
}

ValueMetadata *type metadata accessor for LocationDecryptionKey()
{
  return &type metadata for LocationDecryptionKey;
}

ValueMetadata *type metadata accessor for CommitmentKey()
{
  return &type metadata for CommitmentKey;
}

ValueMetadata *type metadata accessor for EncryptedPrivateKey()
{
  return &type metadata for EncryptedPrivateKey;
}

ValueMetadata *type metadata accessor for PrivateKey()
{
  return &type metadata for PrivateKey;
}

ValueMetadata *type metadata accessor for StandardPublicKey()
{
  return &type metadata for StandardPublicKey;
}

ValueMetadata *type metadata accessor for PublicKey()
{
  return &type metadata for PublicKey;
}

ValueMetadata *type metadata accessor for NearOwnerAdvertisement()
{
  return &type metadata for NearOwnerAdvertisement;
}

ValueMetadata *type metadata accessor for Advertisement()
{
  return &type metadata for Advertisement;
}

ValueMetadata *type metadata accessor for HashedAdvertisement()
{
  return &type metadata for HashedAdvertisement;
}

ValueMetadata *type metadata accessor for PairingNonce()
{
  return &type metadata for PairingNonce;
}

ValueMetadata *type metadata accessor for SharedSecretKey()
{
  return &type metadata for SharedSecretKey;
}

ValueMetadata *type metadata accessor for AntiTrackingKey()
{
  return &type metadata for AntiTrackingKey;
}

ValueMetadata *type metadata accessor for IntermediateKey()
{
  return &type metadata for IntermediateKey;
}

ValueMetadata *type metadata accessor for CommandKey()
{
  return &type metadata for CommandKey;
}

ValueMetadata *type metadata accessor for ConnectionKey()
{
  return &type metadata for ConnectionKey;
}

ValueMetadata *type metadata accessor for LongTermKey()
{
  return &type metadata for LongTermKey;
}

ValueMetadata *type metadata accessor for NearbyTokenKey()
{
  return &type metadata for NearbyTokenKey;
}

ValueMetadata *type metadata accessor for NFCPartialAdvertisement()
{
  return &type metadata for NFCPartialAdvertisement;
}

ValueMetadata *type metadata accessor for EncryptedBlobE1()
{
  return &type metadata for EncryptedBlobE1;
}

ValueMetadata *type metadata accessor for FindMyNetworkId()
{
  return &type metadata for FindMyNetworkId;
}

ValueMetadata *type metadata accessor for EncryptedBlobE2()
{
  return &type metadata for EncryptedBlobE2;
}

ValueMetadata *type metadata accessor for EncryptedBlobE3()
{
  return &type metadata for EncryptedBlobE3;
}

ValueMetadata *type metadata accessor for EncryptedBlobE4()
{
  return &type metadata for EncryptedBlobE4;
}

ValueMetadata *type metadata accessor for RefKey()
{
  return &type metadata for RefKey;
}

ValueMetadata *type metadata accessor for SikPub()
{
  return &type metadata for SikPub;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.C1()
{
  return &type metadata for CollaborativeKeyGen.C1;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1.C2()
{
  return &type metadata for CollaborativeKeyGen.v1.C2;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1.C3()
{
  return &type metadata for CollaborativeKeyGen.v1.C3;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2.C2()
{
  return &type metadata for CollaborativeKeyGen.v2.C2;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2.C3()
{
  return &type metadata for CollaborativeKeyGen.v2.C3;
}

ValueMetadata *_s2C3V10CodingKeysOMa()
{
  return &_s2C3V10CodingKeysON;
}

ValueMetadata *_s2C2V10CodingKeysOMa()
{
  return &_s2C2V10CodingKeysON;
}

ValueMetadata *_s2C3V10CodingKeysOMa_0()
{
  return &_s2C3V10CodingKeysON_0;
}

ValueMetadata *_s2C2V10CodingKeysOMa_0()
{
  return &_s2C2V10CodingKeysON_0;
}

ValueMetadata *_s2C1V10CodingKeysOMa()
{
  return &_s2C1V10CodingKeysON;
}

ValueMetadata *type metadata accessor for SikPub.CodingKeys()
{
  return &type metadata for SikPub.CodingKeys;
}

ValueMetadata *type metadata accessor for RefKey.CodingKeys()
{
  return &type metadata for RefKey.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE4.CodingKeys()
{
  return &type metadata for EncryptedBlobE4.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE3.CodingKeys()
{
  return &type metadata for EncryptedBlobE3.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE2.CodingKeys()
{
  return &type metadata for EncryptedBlobE2.CodingKeys;
}

ValueMetadata *type metadata accessor for FindMyNetworkId.CodingKeys()
{
  return &type metadata for FindMyNetworkId.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE1.CodingKeys()
{
  return &type metadata for EncryptedBlobE1.CodingKeys;
}

ValueMetadata *type metadata accessor for NFCPartialAdvertisement.CodingKeys()
{
  return &type metadata for NFCPartialAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbyTokenKey.CodingKeys()
{
  return &type metadata for NearbyTokenKey.CodingKeys;
}

ValueMetadata *type metadata accessor for LongTermKey.CodingKeys()
{
  return &type metadata for LongTermKey.CodingKeys;
}

ValueMetadata *type metadata accessor for ConnectionKey.CodingKeys()
{
  return &type metadata for ConnectionKey.CodingKeys;
}

ValueMetadata *type metadata accessor for CommandKey.CodingKeys()
{
  return &type metadata for CommandKey.CodingKeys;
}

ValueMetadata *type metadata accessor for IntermediateKey.CodingKeys()
{
  return &type metadata for IntermediateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for AntiTrackingKey.CodingKeys()
{
  return &type metadata for AntiTrackingKey.CodingKeys;
}

ValueMetadata *type metadata accessor for SharedSecretKey.CodingKeys()
{
  return &type metadata for SharedSecretKey.CodingKeys;
}

ValueMetadata *type metadata accessor for PairingNonce.CodingKeys()
{
  return &type metadata for PairingNonce.CodingKeys;
}

ValueMetadata *type metadata accessor for HashedAdvertisement.CodingKeys()
{
  return &type metadata for HashedAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for Advertisement.CodingKeys()
{
  return &type metadata for Advertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for NearOwnerAdvertisement.CodingKeys()
{
  return &type metadata for NearOwnerAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for PublicKey.CodingKeys()
{
  return &type metadata for PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for StandardPublicKey.CodingKeys()
{
  return &type metadata for StandardPublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for PrivateKey.CodingKeys()
{
  return &type metadata for PrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedPrivateKey.CodingKeys()
{
  return &type metadata for EncryptedPrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for CommitmentKey.CodingKeys()
{
  return &type metadata for CommitmentKey.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyRepresentableInternal.CodingKeys()
{
  return &type metadata for KeyRepresentableInternal.CodingKeys;
}

unint64_t sub_10030043C()
{
  unint64_t result;

  result = qword_1010F7218;
  if (!qword_1010F7218)
  {
    result = swift_getWitnessTable(byte_100E34CD8, &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7218);
  }
  return result;
}

unint64_t sub_100300484()
{
  unint64_t result;

  result = qword_1010F7220;
  if (!qword_1010F7220)
  {
    result = swift_getWitnessTable("Ik#", &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7220);
  }
  return result;
}

unint64_t sub_1003004CC()
{
  unint64_t result;

  result = qword_1010F7228;
  if (!qword_1010F7228)
  {
    result = swift_getWitnessTable(byte_100E34E48, &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7228);
  }
  return result;
}

unint64_t sub_100300514()
{
  unint64_t result;

  result = qword_1010F7230;
  if (!qword_1010F7230)
  {
    result = swift_getWitnessTable(byte_100E34F00, &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7230);
  }
  return result;
}

unint64_t sub_10030055C()
{
  unint64_t result;

  result = qword_1010F7238;
  if (!qword_1010F7238)
  {
    result = swift_getWitnessTable("!i#", &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7238);
  }
  return result;
}

unint64_t sub_1003005A4()
{
  unint64_t result;

  result = qword_1010F7240;
  if (!qword_1010F7240)
  {
    result = swift_getWitnessTable("ih#", &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7240);
  }
  return result;
}

unint64_t sub_1003005EC()
{
  unint64_t result;

  result = qword_1010F7248;
  if (!qword_1010F7248)
  {
    result = swift_getWitnessTable(byte_100E35128, &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7248);
  }
  return result;
}

unint64_t sub_100300634()
{
  unint64_t result;

  result = qword_1010F7250;
  if (!qword_1010F7250)
  {
    result = swift_getWitnessTable(byte_100E351E0, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7250);
  }
  return result;
}

unint64_t sub_10030067C()
{
  unint64_t result;

  result = qword_1010F7258;
  if (!qword_1010F7258)
  {
    result = swift_getWitnessTable("Af#", &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7258);
  }
  return result;
}

unint64_t sub_1003006C4()
{
  unint64_t result;

  result = qword_1010F7260;
  if (!qword_1010F7260)
  {
    result = swift_getWitnessTable(byte_100E35350, &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7260);
  }
  return result;
}

unint64_t sub_10030070C()
{
  unint64_t result;

  result = qword_1010F7268;
  if (!qword_1010F7268)
  {
    result = swift_getWitnessTable(byte_100E35408, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7268);
  }
  return result;
}

unint64_t sub_100300754()
{
  unint64_t result;

  result = qword_1010F7270;
  if (!qword_1010F7270)
  {
    result = swift_getWitnessTable(byte_100E354C0, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7270);
  }
  return result;
}

unint64_t sub_10030079C()
{
  unint64_t result;

  result = qword_1010F7278;
  if (!qword_1010F7278)
  {
    result = swift_getWitnessTable("ac#", &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7278);
  }
  return result;
}

unint64_t sub_1003007E4()
{
  unint64_t result;

  result = qword_1010F7280;
  if (!qword_1010F7280)
  {
    result = swift_getWitnessTable(byte_100E35630, &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7280);
  }
  return result;
}

unint64_t sub_10030082C()
{
  unint64_t result;

  result = qword_1010F7288;
  if (!qword_1010F7288)
  {
    result = swift_getWitnessTable(byte_100E356E8, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7288);
  }
  return result;
}

unint64_t sub_100300874()
{
  unint64_t result;

  result = qword_1010F7290;
  if (!qword_1010F7290)
  {
    result = swift_getWitnessTable("9a#", &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7290);
  }
  return result;
}

unint64_t sub_1003008BC()
{
  unint64_t result;

  result = qword_1010F7298;
  if (!qword_1010F7298)
  {
    result = swift_getWitnessTable(byte_100E35858, &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7298);
  }
  return result;
}

unint64_t sub_100300904()
{
  unint64_t result;

  result = qword_1010F72A0;
  if (!qword_1010F72A0)
  {
    result = swift_getWitnessTable(byte_100E35910, &type metadata for NFCPartialAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72A0);
  }
  return result;
}

unint64_t sub_10030094C()
{
  unint64_t result;

  result = qword_1010F72A8;
  if (!qword_1010F72A8)
  {
    result = swift_getWitnessTable(byte_100E359C8, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72A8);
  }
  return result;
}

unint64_t sub_100300994()
{
  unint64_t result;

  result = qword_1010F72B0;
  if (!qword_1010F72B0)
  {
    result = swift_getWitnessTable("Y^#", &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72B0);
  }
  return result;
}

unint64_t sub_1003009DC()
{
  unint64_t result;

  result = qword_1010F72B8;
  if (!qword_1010F72B8)
  {
    result = swift_getWitnessTable(byte_100E35B38, &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72B8);
  }
  return result;
}

unint64_t sub_100300A24()
{
  unint64_t result;

  result = qword_1010F72C0;
  if (!qword_1010F72C0)
  {
    result = swift_getWitnessTable(byte_100E35BF0, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72C0);
  }
  return result;
}

unint64_t sub_100300A6C()
{
  unint64_t result;

  result = qword_1010F72C8;
  if (!qword_1010F72C8)
  {
    result = swift_getWitnessTable("1\\#", &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72C8);
  }
  return result;
}

unint64_t sub_100300AB4()
{
  unint64_t result;

  result = qword_1010F72D0;
  if (!qword_1010F72D0)
  {
    result = swift_getWitnessTable("y[#", &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72D0);
  }
  return result;
}

unint64_t sub_100300AFC()
{
  unint64_t result;

  result = qword_1010F72D8;
  if (!qword_1010F72D8)
  {
    result = swift_getWitnessTable(byte_100E35E18, &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F72D8);
  }
  return result;
}

unint64_t sub_100300B44()
{
  unint64_t result;

  result = qword_1010F72E0;
  if (!qword_1010F72E0)
  {
    result = swift_getWitnessTable("\tZ#", &_s2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F72E0);
  }
  return result;
}

unint64_t sub_100300B8C()
{
  unint64_t result;

  result = qword_1010F72E8;
  if (!qword_1010F72E8)
  {
    result = swift_getWitnessTable("QY#", &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F72E8);
  }
  return result;
}

unint64_t sub_100300BD4()
{
  unint64_t result;

  result = qword_1010F72F0;
  if (!qword_1010F72F0)
  {
    result = swift_getWitnessTable(byte_100E36040, &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F72F0);
  }
  return result;
}

unint64_t sub_100300C1C()
{
  unint64_t result;

  result = qword_1010F72F8;
  if (!qword_1010F72F8)
  {
    result = swift_getWitnessTable(byte_100E360F8, &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F72F8);
  }
  return result;
}

unint64_t sub_100300C64()
{
  unint64_t result;

  result = qword_1010F7300;
  if (!qword_1010F7300)
  {
    result = swift_getWitnessTable(")W#", &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F7300);
  }
  return result;
}

unint64_t sub_100300CAC()
{
  unint64_t result;

  result = qword_1010F7308;
  if (!qword_1010F7308)
  {
    result = swift_getWitnessTable(byte_100E36120, &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F7308);
  }
  return result;
}

unint64_t sub_100300CF4()
{
  unint64_t result;

  result = qword_1010F7310;
  if (!qword_1010F7310)
  {
    result = swift_getWitnessTable(byte_100E36148, &_s2C3V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F7310);
  }
  return result;
}

unint64_t sub_100300D3C()
{
  unint64_t result;

  result = qword_1010F7318;
  if (!qword_1010F7318)
  {
    result = swift_getWitnessTable(byte_100E36068, &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F7318);
  }
  return result;
}

unint64_t sub_100300D84()
{
  unint64_t result;

  result = qword_1010F7320;
  if (!qword_1010F7320)
  {
    result = swift_getWitnessTable("yX#", &_s2C2V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F7320);
  }
  return result;
}

unint64_t sub_100300DCC()
{
  unint64_t result;

  result = qword_1010F7328;
  if (!qword_1010F7328)
  {
    result = swift_getWitnessTable(byte_100E35FB0, &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F7328);
  }
  return result;
}

unint64_t sub_100300E14()
{
  unint64_t result;

  result = qword_1010F7330;
  if (!qword_1010F7330)
  {
    result = swift_getWitnessTable("1Y#", &_s2C3V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F7330);
  }
  return result;
}

unint64_t sub_100300E5C()
{
  unint64_t result;

  result = qword_1010F7338;
  if (!qword_1010F7338)
  {
    result = swift_getWitnessTable("9Z#", &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F7338);
  }
  return result;
}

unint64_t sub_100300EA4()
{
  unint64_t result;

  result = qword_1010F7340;
  if (!qword_1010F7340)
  {
    result = swift_getWitnessTable(byte_100E35F20, &_s2C2V10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1010F7340);
  }
  return result;
}

unint64_t sub_100300EEC()
{
  unint64_t result;

  result = qword_1010F7348;
  if (!qword_1010F7348)
  {
    result = swift_getWitnessTable(byte_100E35E40, &_s2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F7348);
  }
  return result;
}

unint64_t sub_100300F34()
{
  unint64_t result;

  result = qword_1010F7350;
  if (!qword_1010F7350)
  {
    result = swift_getWitnessTable(byte_100E35E68, &_s2C1V10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1010F7350);
  }
  return result;
}

unint64_t sub_100300F7C()
{
  unint64_t result;

  result = qword_1010F7358;
  if (!qword_1010F7358)
  {
    result = swift_getWitnessTable(byte_100E35D88, &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7358);
  }
  return result;
}

unint64_t sub_100300FC4()
{
  unint64_t result;

  result = qword_1010F7360;
  if (!qword_1010F7360)
  {
    result = swift_getWitnessTable("Y[#", &type metadata for SikPub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7360);
  }
  return result;
}

unint64_t sub_10030100C()
{
  unint64_t result;

  result = qword_1010F7368;
  if (!qword_1010F7368)
  {
    result = swift_getWitnessTable("a\\#", &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7368);
  }
  return result;
}

unint64_t sub_100301054()
{
  unint64_t result;

  result = qword_1010F7370;
  if (!qword_1010F7370)
  {
    result = swift_getWitnessTable(byte_100E35CF8, &type metadata for RefKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7370);
  }
  return result;
}

unint64_t sub_10030109C()
{
  unint64_t result;

  result = qword_1010F7378;
  if (!qword_1010F7378)
  {
    result = swift_getWitnessTable(byte_100E35C18, &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7378);
  }
  return result;
}

unint64_t sub_1003010E4()
{
  unint64_t result;

  result = qword_1010F7380;
  if (!qword_1010F7380)
  {
    result = swift_getWitnessTable(byte_100E35C40, &type metadata for EncryptedBlobE4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7380);
  }
  return result;
}

unint64_t sub_10030112C()
{
  unint64_t result;

  result = qword_1010F7388;
  if (!qword_1010F7388)
  {
    result = swift_getWitnessTable(byte_100E35B60, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7388);
  }
  return result;
}

unint64_t sub_100301174()
{
  unint64_t result;

  result = qword_1010F7390;
  if (!qword_1010F7390)
  {
    result = swift_getWitnessTable(byte_100E35B88, &type metadata for EncryptedBlobE3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7390);
  }
  return result;
}

unint64_t sub_1003011BC()
{
  unint64_t result;

  result = qword_1010F7398;
  if (!qword_1010F7398)
  {
    result = swift_getWitnessTable(byte_100E35AA8, &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7398);
  }
  return result;
}

unint64_t sub_100301204()
{
  unint64_t result;

  result = qword_1010F73A0;
  if (!qword_1010F73A0)
  {
    result = swift_getWitnessTable("9^#", &type metadata for EncryptedBlobE2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73A0);
  }
  return result;
}

unint64_t sub_10030124C()
{
  unint64_t result;

  result = qword_1010F73A8;
  if (!qword_1010F73A8)
  {
    result = swift_getWitnessTable("A_#", &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73A8);
  }
  return result;
}

unint64_t sub_100301294()
{
  unint64_t result;

  result = qword_1010F73B0;
  if (!qword_1010F73B0)
  {
    result = swift_getWitnessTable(byte_100E35A18, &type metadata for FindMyNetworkId.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73B0);
  }
  return result;
}

unint64_t sub_1003012DC()
{
  unint64_t result;

  result = qword_1010F73B8;
  if (!qword_1010F73B8)
  {
    result = swift_getWitnessTable(byte_100E35938, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73B8);
  }
  return result;
}

unint64_t sub_100301324()
{
  unint64_t result;

  result = qword_1010F73C0;
  if (!qword_1010F73C0)
  {
    result = swift_getWitnessTable(byte_100E35960, &type metadata for EncryptedBlobE1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73C0);
  }
  return result;
}

unint64_t sub_10030136C()
{
  unint64_t result;

  result = qword_1010F73C8;
  if (!qword_1010F73C8)
  {
    result = swift_getWitnessTable(byte_100E35880, &type metadata for NFCPartialAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73C8);
  }
  return result;
}

unint64_t sub_1003013B4()
{
  unint64_t result;

  result = qword_1010F73D0;
  if (!qword_1010F73D0)
  {
    atomic_store(result, (unint64_t *)&qword_1010F73D0);
  }
  return result;
}

unint64_t sub_1003013FC()
{
  unint64_t result;

  result = qword_1010F73D8;
  if (!qword_1010F73D8)
  {
    result = swift_getWitnessTable("ia#", &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73D8);
  }
  return result;
}

unint64_t sub_100301444()
{
  unint64_t result;

  result = qword_1010F73E0;
  if (!qword_1010F73E0)
  {
    result = swift_getWitnessTable(byte_100E357F0, &type metadata for NearbyTokenKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73E0);
  }
  return result;
}

unint64_t sub_10030148C()
{
  unint64_t result;

  result = qword_1010F73E8;
  if (!qword_1010F73E8)
  {
    result = swift_getWitnessTable("!b#", &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73E8);
  }
  return result;
}

unint64_t sub_1003014D4()
{
  unint64_t result;

  result = qword_1010F73F0;
  if (!qword_1010F73F0)
  {
    result = swift_getWitnessTable(byte_100E35738, &type metadata for LongTermKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73F0);
  }
  return result;
}

unint64_t sub_10030151C()
{
  unint64_t result;

  result = qword_1010F73F8;
  if (!qword_1010F73F8)
  {
    result = swift_getWitnessTable(byte_100E35658, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F73F8);
  }
  return result;
}

unint64_t sub_100301564()
{
  unint64_t result;

  result = qword_1010F7400;
  if (!qword_1010F7400)
  {
    result = swift_getWitnessTable(byte_100E35680, &type metadata for ConnectionKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7400);
  }
  return result;
}

unint64_t sub_1003015AC()
{
  unint64_t result;

  result = qword_1010F7408;
  if (!qword_1010F7408)
  {
    result = swift_getWitnessTable(byte_100E355A0, &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7408);
  }
  return result;
}

unint64_t sub_1003015F4()
{
  unint64_t result;

  result = qword_1010F7410;
  if (!qword_1010F7410)
  {
    result = swift_getWitnessTable("Ac#", &type metadata for CommandKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7410);
  }
  return result;
}

unint64_t sub_10030163C()
{
  unint64_t result;

  result = qword_1010F7418;
  if (!qword_1010F7418)
  {
    result = swift_getWitnessTable("Id#", &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7418);
  }
  return result;
}

unint64_t sub_100301684()
{
  unint64_t result;

  result = qword_1010F7420;
  if (!qword_1010F7420)
  {
    result = swift_getWitnessTable(byte_100E35510, &type metadata for IntermediateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7420);
  }
  return result;
}

unint64_t sub_1003016CC()
{
  unint64_t result;

  result = qword_1010F7428;
  if (!qword_1010F7428)
  {
    result = swift_getWitnessTable(byte_100E35430, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7428);
  }
  return result;
}

unint64_t sub_100301714()
{
  unint64_t result;

  result = qword_1010F7430;
  if (!qword_1010F7430)
  {
    result = swift_getWitnessTable(byte_100E35458, &type metadata for AntiTrackingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7430);
  }
  return result;
}

unint64_t sub_10030175C()
{
  unint64_t result;

  result = qword_1010F7438;
  if (!qword_1010F7438)
  {
    result = swift_getWitnessTable(byte_100E35378, &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7438);
  }
  return result;
}

unint64_t sub_1003017A4()
{
  unint64_t result;

  result = qword_1010F7440;
  if (!qword_1010F7440)
  {
    result = swift_getWitnessTable("ie#", &type metadata for SharedSecretKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7440);
  }
  return result;
}

unint64_t sub_1003017EC()
{
  unint64_t result;

  result = qword_1010F7448;
  if (!qword_1010F7448)
  {
    result = swift_getWitnessTable("qf#", &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7448);
  }
  return result;
}

unint64_t sub_100301834()
{
  unint64_t result;

  result = qword_1010F7450;
  if (!qword_1010F7450)
  {
    result = swift_getWitnessTable("!f#", &type metadata for PairingNonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7450);
  }
  return result;
}

unint64_t sub_10030187C()
{
  unint64_t result;

  result = qword_1010F7458;
  if (!qword_1010F7458)
  {
    result = swift_getWitnessTable(")g#", &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7458);
  }
  return result;
}

unint64_t sub_1003018C4()
{
  unint64_t result;

  result = qword_1010F7460;
  if (!qword_1010F7460)
  {
    result = swift_getWitnessTable(byte_100E35230, &type metadata for HashedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7460);
  }
  return result;
}

unint64_t sub_10030190C()
{
  unint64_t result;

  result = qword_1010F7468;
  if (!qword_1010F7468)
  {
    result = swift_getWitnessTable(byte_100E35150, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7468);
  }
  return result;
}

unint64_t sub_100301954()
{
  unint64_t result;

  result = qword_1010F7470;
  if (!qword_1010F7470)
  {
    result = swift_getWitnessTable(byte_100E35178, &type metadata for Advertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7470);
  }
  return result;
}

unint64_t sub_10030199C()
{
  unint64_t result;

  result = qword_1010F7478;
  if (!qword_1010F7478)
  {
    result = swift_getWitnessTable(byte_100E35098, &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7478);
  }
  return result;
}

unint64_t sub_1003019E4()
{
  unint64_t result;

  result = qword_1010F7480;
  if (!qword_1010F7480)
  {
    result = swift_getWitnessTable("Ih#", &type metadata for NearOwnerAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7480);
  }
  return result;
}

unint64_t sub_100301A2C()
{
  unint64_t result;

  result = qword_1010F7488;
  if (!qword_1010F7488)
  {
    result = swift_getWitnessTable("Qi#", &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7488);
  }
  return result;
}

unint64_t sub_100301A74()
{
  unint64_t result;

  result = qword_1010F7490;
  if (!qword_1010F7490)
  {
    result = swift_getWitnessTable(byte_100E35008, &type metadata for PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7490);
  }
  return result;
}

unint64_t sub_100301ABC()
{
  unint64_t result;

  result = qword_1010F7498;
  if (!qword_1010F7498)
  {
    result = swift_getWitnessTable("\tj#", &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7498);
  }
  return result;
}

unint64_t sub_100301B04()
{
  unint64_t result;

  result = qword_1010F74A0;
  if (!qword_1010F74A0)
  {
    result = swift_getWitnessTable(byte_100E34F50, &type metadata for StandardPublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74A0);
  }
  return result;
}

unint64_t sub_100301B4C()
{
  unint64_t result;

  result = qword_1010F74A8;
  if (!qword_1010F74A8)
  {
    result = swift_getWitnessTable(byte_100E34E70, &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74A8);
  }
  return result;
}

unint64_t sub_100301B94()
{
  unint64_t result;

  result = qword_1010F74B0;
  if (!qword_1010F74B0)
  {
    result = swift_getWitnessTable("qj#", &type metadata for PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74B0);
  }
  return result;
}

unint64_t sub_100301BDC()
{
  unint64_t result;

  result = qword_1010F74B8;
  if (!qword_1010F74B8)
  {
    result = swift_getWitnessTable("yk#", &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74B8);
  }
  return result;
}

unint64_t sub_100301C24()
{
  unint64_t result;

  result = qword_1010F74C0;
  if (!qword_1010F74C0)
  {
    result = swift_getWitnessTable(")k#", &type metadata for EncryptedPrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74C0);
  }
  return result;
}

unint64_t sub_100301C6C()
{
  unint64_t result;

  result = qword_1010F74C8;
  if (!qword_1010F74C8)
  {
    result = swift_getWitnessTable("1l#", &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74C8);
  }
  return result;
}

unint64_t sub_100301CB4()
{
  unint64_t result;

  result = qword_1010F74D0;
  if (!qword_1010F74D0)
  {
    result = swift_getWitnessTable(byte_100E34D28, &type metadata for CommitmentKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74D0);
  }
  return result;
}

unint64_t sub_100301CFC()
{
  unint64_t result;

  result = qword_1010F74D8;
  if (!qword_1010F74D8)
  {
    result = swift_getWitnessTable(byte_100E34C48, &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74D8);
  }
  return result;
}

unint64_t sub_100301D44()
{
  unint64_t result;

  result = qword_1010F74E0;
  if (!qword_1010F74E0)
  {
    result = swift_getWitnessTable(byte_100E34C70, &type metadata for KeyRepresentableInternal.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F74E0);
  }
  return result;
}

unint64_t sub_100301D88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F74E8;
  if (!qword_1010F74E8)
  {
    v1 = sub_10000F4A0(255, &qword_1010F7800, NSObject_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1010F74E8);
  }
  return result;
}

unint64_t sub_100301DE0()
{
  unint64_t result;

  result = qword_1010F74F8;
  if (!qword_1010F74F8)
  {
    result = swift_getWitnessTable(byte_100E36BF8, &type metadata for PrivateKey.PrivateKeyError);
    atomic_store(result, (unint64_t *)&qword_1010F74F8);
  }
  return result;
}

unint64_t sub_100301E24()
{
  unint64_t result;

  result = qword_1010F7508;
  if (!qword_1010F7508)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for KeyRepresentableInternal, &type metadata for KeyRepresentableInternal);
    atomic_store(result, (unint64_t *)&qword_1010F7508);
  }
  return result;
}

uint64_t _s2C3V10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100301EA8 + 4 * byte_100E325B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100301EC8 + 4 * byte_100E325B5[v4]))();
}

_BYTE *sub_100301EA8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100301EC8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100301ED0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100301ED8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100301EE0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100301EE8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PrivateKey.PrivateKeyError()
{
  return &type metadata for PrivateKey.PrivateKeyError;
}

uint64_t sub_100301F08(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1)
    return sub_10001BBBC(result, a2);
  return result;
}

uint64_t destroy for KeyRepresentableError(uint64_t a1)
{
  return sub_100301F2C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100301F2C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 1)
    return sub_10001BC14(result, a2);
  return result;
}

uint64_t _s12searchpartyd21KeyRepresentableErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100301F08(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for KeyRepresentableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100301F08(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100301F2C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for KeyRepresentableError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100301F2C(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for KeyRepresentableError()
{
  return &type metadata for KeyRepresentableError;
}

unint64_t sub_100302034()
{
  unint64_t result;

  result = qword_1010F75F8;
  if (!qword_1010F75F8)
  {
    result = swift_getWitnessTable("\tM#", &type metadata for PrivateKey.PrivateKeyError);
    atomic_store(result, (unint64_t *)&qword_1010F75F8);
  }
  return result;
}

void sub_100302094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v25;

  v22 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  while (1)
  {
    if (v3)
    {
      v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v6 = v5 | (v4 << 6);
      goto LABEL_22;
    }
    v7 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v7 >= v23)
      goto LABEL_29;
    v8 = *(_QWORD *)(v22 + 8 * v7);
    ++v4;
    if (!v8)
    {
      v4 = v7 + 1;
      if (v7 + 1 >= v23)
        goto LABEL_29;
      v8 = *(_QWORD *)(v22 + 8 * v4);
      if (!v8)
      {
        v4 = v7 + 2;
        if (v7 + 2 >= v23)
          goto LABEL_29;
        v8 = *(_QWORD *)(v22 + 8 * v4);
        if (!v8)
        {
          v4 = v7 + 3;
          if (v7 + 3 >= v23)
            goto LABEL_29;
          v8 = *(_QWORD *)(v22 + 8 * v4);
          if (!v8)
          {
            v9 = v7 + 4;
            if (v9 >= v23)
            {
LABEL_29:
              swift_release();
              return;
            }
            v8 = *(_QWORD *)(v22 + 8 * v9);
            v4 = v9;
            if (!v8)
              break;
          }
        }
      }
    }
LABEL_21:
    v3 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v4 << 6);
LABEL_22:
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v25 = v3;
      swift_bridgeObjectRetain(v10);
      sub_10009A2F4(0, v11, 0);
      v12 = type metadata accessor for UUID(0);
      v13 = *(_QWORD *)(v12 - 8);
      v14 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v15 = *(_QWORD *)(v13 + 72);
      do
      {
        v12 = UUID.uuidString.getter(v12);
        v16 = v12;
        v18 = v17;
        v20 = _swiftEmptyArrayStorage[2];
        v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1)
          v12 = sub_10009A2F4(v19 > 1, v20 + 1, 1);
        _swiftEmptyArrayStorage[2] = v20 + 1;
        v21 = &_swiftEmptyArrayStorage[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v14 += v15;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      v3 = v25;
    }
    sub_100302314((uint64_t)_swiftEmptyArrayStorage);
  }
  while (1)
  {
    v4 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v4 >= v23)
      goto LABEL_29;
    v8 = *(_QWORD *)(v22 + 8 * v4);
    ++v9;
    if (v8)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100302314(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1007C7438(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100302464(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C80BC, type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_100302478(uint64_t a1)
{
  return sub_10030590C(a1, (uint64_t (*)(void))sub_1007C80D0, type metadata accessor for TimeBasedKey);
}

uint64_t sub_10030248C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1007C80F8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003025E4(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C8220, type metadata accessor for KeyDropCreateRequest.Member);
}

uint64_t sub_1003025F8(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1007C839C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[7 * v9 + 4];
  if (a1 + 32 < v10 + 56 * v8 && v10 < a1 + 32 + 56 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100302754(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1007C84E4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  sub_10001A9A8(&qword_1011093A0);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003028BC(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C7C20, type metadata accessor for SharingCircleSecret);
}

uint64_t sub_1003028D0(uint64_t a1)
{
  return sub_1003044F0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10050C744);
}

uint64_t sub_1003028DC(uint64_t a1)
{
  return sub_1003044F0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10050C528);
}

uint64_t sub_1003028E8(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C86C4, type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_1003028FC(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C84F8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100302910(uint64_t a1)
{
  return sub_10001B858(a1, (uint64_t (*)(void))sub_1007C8824, (uint64_t *)&unk_101105A10);
}

uint64_t sub_100302924(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C8874, type metadata accessor for MemberPeerTrust);
}

uint64_t sub_100302938(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C8838, type metadata accessor for OwnerPeerTrust);
}

uint64_t sub_10030294C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1007C77D4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100302A9C(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C84C4, type metadata accessor for ObservedAdvertisement);
}

uint64_t sub_100302AB0(uint64_t a1)
{
  return sub_10030590C(a1, (uint64_t (*)(void))sub_1007C8C54, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
}

uint64_t sub_100302AC4(uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), unint64_t a4)
{
  return sub_100305204(a1, a2, a3, a4, type metadata accessor for OwnedDeviceKeyRecord, &qword_1010F7608, (uint64_t (*)(void))sub_1007C8CA4, (uint64_t (*)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))sub_100DF5AC4);
}

uint64_t sub_100302AE8()
{
  unint64_t *v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_native;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[24];

  v2 = v0;
  v55 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v3 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v53 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F7608);
  v6 = __chkstk_darwin(v5);
  v54 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v48 - v9;
  v11 = __chkstk_darwin(v8);
  v56 = (uint64_t)&v48 - v12;
  inited = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v11);
  v14 = *v0;
  v15 = *(_QWORD *)(*v0 + 16);
  v16 = v15 + inited;
  if (__OFADD__(v15, inited))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = inited;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *v2 = v14;
  if (!isUniquelyReferenced_nonNull_native || (v19 = *(_QWORD *)(v14 + 24) >> 1, v19 < v16))
  {
    if (v15 <= v16)
      v20 = v16;
    else
      v20 = v15;
    v14 = sub_1007C8CA4(isUniquelyReferenced_nonNull_native, v20, 1, v14);
    *v2 = v14;
    v19 = *(_QWORD *)(v14 + 24) >> 1;
  }
  v21 = *(_QWORD *)(v14 + 16);
  v1 = *(_QWORD *)(v3 + 72);
  v22 = v19 - v21;
  v52 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23 = dispatch thunk of _AnySequenceBox.__copyContents(initializing:)(v14 + v52 + v1 * v21, v19 - v21);
  v25 = v24;
  swift_release();
  v26 = sub_10001A9A8(&qword_1010F7610);
  inited = swift_initStackObject(v26, v57);
  *(_QWORD *)(inited + 16) = v23;
  if (v25 < v17)
    goto LABEL_15;
  if (v25 >= 1)
  {
    v27 = *(_QWORD *)(v14 + 16);
    v28 = __OFADD__(v27, v25);
    v29 = v27 + v25;
    if (v28)
    {
      __break(1u);
LABEL_19:
      v33 = type metadata accessor for OwnedDeviceKeyRecord;
      v49 = v25;
      do
      {
        v34 = v33;
        sub_100004048(v25, &qword_1010F7608);
        v35 = *v2;
        v36 = *(_QWORD *)(*v2 + 24);
        v37 = v36 >> 1;
        if ((uint64_t)(v36 >> 1) < v22 + 1)
        {
          v35 = sub_1007C8CA4(v36 > 1, v22 + 1, 1, *v2);
          *v2 = v35;
          v37 = *(_QWORD *)(v35 + 24) >> 1;
        }
        v38 = v54;
        sub_10000F9B8(v56, v54, &qword_1010F7608);
        if (v51(v38, 1, v55) == 1)
        {
          v39 = v34;
LABEL_32:
          sub_100004048(v38, &qword_1010F7608);
          v43 = v22;
          v33 = v39;
        }
        else
        {
          if (v22 <= v37)
            v40 = v37;
          else
            v40 = v22;
          v50 = v40;
          v41 = (uint64_t)v53;
          v42 = v35 + v52 + v1 * v22;
          v39 = v34;
          while (1)
          {
            sub_1000126EC(v38, v41, v39);
            v43 = v50;
            v33 = v39;
            if (v50 == v22)
              break;
            v44 = v22;
            v45 = v56;
            sub_100004048(v56, &qword_1010F7608);
            v46 = sub_1000126EC(v41, v42, v39);
            dispatch thunk of _AnyIteratorBoxBase.next()(v46);
            v47 = v45;
            v22 = v44 + 1;
            sub_10000F9B8(v47, v38, &qword_1010F7608);
            v42 += v1;
            if (v51(v38, 1, v55) == 1)
              goto LABEL_32;
          }
          sub_1000126B0(v41, v39);
          v22 = v43;
        }
        *(_QWORD *)(*v2 + 16) = v43;
        v25 = v49;
        sub_10000F9B8(v56, v49, &qword_1010F7608);
      }
      while (v51(v25, 1, v55) != 1);
      goto LABEL_17;
    }
    *(_QWORD *)(v14 + 16) = v29;
  }
  if (v25 != v22)
    return swift_release();
LABEL_16:
  v22 = *(_QWORD *)(v14 + 16);
  v31 = v56;
  dispatch thunk of _AnyIteratorBoxBase.next()(inited);
  v32 = v31;
  v25 = (uint64_t)v10;
  sub_10000F9B8(v32, (uint64_t)v10, &qword_1010F7608);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v51((uint64_t)v10, 1, v55) != 1)
    goto LABEL_19;
LABEL_17:
  sub_100004048(v56, &qword_1010F7608);
  swift_release();
  return sub_100004048(v25, &qword_1010F7608);
}

uint64_t sub_100302F10(uint64_t a1)
{
  return sub_100305068(a1, (uint64_t (*)(void))sub_1007C88B0, &qword_1010ED1A0);
}

uint64_t sub_100302F24(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int isUniquelyReferenced_nonNull_native;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  char *v58;
  uint64_t (*v59)(unint64_t, char *, uint64_t);
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  unint64_t v72;
  unint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v79 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = __chkstk_darwin(v6);
  v80 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  v16 = (char *)&v68 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *v1;
  v19 = *(_QWORD *)(*v1 + 16);
  v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v18;
  v78 = v11;
  if (!isUniquelyReferenced_nonNull_native || (v22 = *(_QWORD *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20)
      v23 = v19 + v17;
    else
      v23 = v19;
    v18 = sub_1007C84F8(isUniquelyReferenced_nonNull_native, v23, 1, v18);
    *v1 = v18;
    v22 = *(_QWORD *)(v18 + 24) >> 1;
  }
  v24 = *(_QWORD *)(v18 + 16);
  v19 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v20 = *(_QWORD *)(v4 + 72);
  v25 = v22 - v24;
  v26 = sub_10050A294(&v81, v18 + v19 + v20 * v24, v22 - v24, a1);
  if (v26 < v17)
    goto LABEL_15;
  if (v26)
  {
    v28 = *(_QWORD *)(v18 + 16);
    v29 = __OFADD__(v28, v26);
    v30 = v28 + v26;
    if (v29)
    {
      __break(1u);
LABEL_20:
      v35 = a1 + 1;
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else
      {
        v36 = (v27 + 64) >> 6;
        v77 = a1;
        if (v35 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v18 + 8 * v35);
        if (v37)
        {
LABEL_23:
          v32 = (v37 - 1) & v37;
          v33 = __clz(__rbit64(v37)) + (v35 << 6);
          a1 = v35;
          goto LABEL_18;
        }
        v38 = a1 + 2;
        v77 = a1 + 1;
        if ((uint64_t)(a1 + 2) >= v36)
          goto LABEL_41;
        v14 = v19;
        v13 = v25;
        v12 = v17;
        v37 = *(_QWORD *)(v18 + 8 * v38);
        if (v37)
        {
LABEL_26:
          v35 = v38;
          goto LABEL_23;
        }
        v77 = a1 + 2;
        v18 = v76;
        if ((uint64_t)(a1 + 3) >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v76 + 8 * (a1 + 3));
        if (v37)
        {
          v35 = a1 + 3;
          goto LABEL_23;
        }
        v38 = a1 + 4;
        v77 = a1 + 3;
        v18 = v76;
        if ((uint64_t)(a1 + 4) >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v76 + 8 * v38);
        if (v37)
          goto LABEL_26;
        v35 = a1 + 5;
        v77 = a1 + 4;
        v18 = v76;
        if ((uint64_t)(a1 + 5) >= v36)
        {
LABEL_41:
          v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v69(v16, 1, 1, v3);
          v34 = 0;
          a1 = v77;
          goto LABEL_42;
        }
        v37 = *(_QWORD *)(v76 + 8 * v35);
        if (v37)
          goto LABEL_23;
        v77 = v36 - 1;
        v39 = a1 + 6;
        while (v36 != v39)
        {
          v37 = *(_QWORD *)(v76 + 8 * v39++);
          if (v37)
          {
            v35 = v39 - 1;
            goto LABEL_23;
          }
        }
      }
      v17 = v12;
      v25 = v13;
      v18 = v76;
      v19 = v14;
      goto LABEL_41;
    }
    *(_QWORD *)(v18 + 16) = v30;
  }
  if (v26 != v25)
    return sub_10007CC38(v81);
LABEL_16:
  v25 = *(_QWORD *)(v18 + 16);
  v17 = v81;
  v18 = v82;
  v27 = v83;
  a1 = v84;
  v76 = v82;
  v73 = v83;
  if (!v85)
    goto LABEL_20;
  v32 = (v85 - 1) & v85;
  v33 = __clz(__rbit64(v85)) | (v84 << 6);
LABEL_18:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v17 + 48) + v33 * v20, v3);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v69(v16, 0, 1, v3);
  v34 = v32;
  v18 = v76;
LABEL_42:
  v75 = v34;
  v77 = a1;
  v81 = v17;
  v82 = v18;
  v83 = v73;
  v84 = a1;
  v85 = v34;
  v40 = v17;
  v41 = (uint64_t)v78;
  sub_10000F9B8((uint64_t)v16, (uint64_t)v78, &qword_1010ED860);
  v42 = v41;
  v43 = v40;
  v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v74(v42, 1, v3) == 1)
  {
LABEL_82:
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    sub_10007CC38(v43);
    return sub_100004048((uint64_t)v78, &qword_1010ED860);
  }
  v44 = (uint64_t)v78;
  v45 = v79;
  v70 = v19;
  while (1)
  {
    sub_100004048(v44, &qword_1010ED860);
    v46 = *(_QWORD *)(*v1 + 24);
    v47 = v46 >> 1;
    if ((uint64_t)(v46 >> 1) < v25 + 1)
    {
      v53 = sub_1007C84F8(v46 > 1, v25 + 1, 1, *v1);
      *v1 = v53;
      v77 = v53;
      v47 = *(_QWORD *)(v53 + 24) >> 1;
    }
    else
    {
      v77 = *v1;
    }
    v48 = v80;
    sub_10000F9B8((uint64_t)v16, v80, &qword_1010ED860);
    if (v74(v48, 1, v3) != 1)
      break;
    v49 = v80;
LABEL_50:
    sub_100004048(v49, &qword_1010ED860);
    v50 = v25;
LABEL_45:
    *(_QWORD *)(*v1 + 16) = v50;
    v44 = (uint64_t)v78;
    sub_10000F9B8((uint64_t)v16, (uint64_t)v78, &qword_1010ED860);
    if (v74(v44, 1, v3) == 1)
    {
      v43 = v81;
      v77 = v84;
      v75 = v85;
      goto LABEL_82;
    }
  }
  v72 = v77 + v19;
  v51 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32);
  if (v25 <= v47)
    v52 = v47;
  else
    v52 = v25;
  v73 = v52;
  v49 = v80;
  v71 = v51;
  while (1)
  {
    v57 = v45;
    v58 = v45;
    v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v51;
    v51(v57, v49, v3);
    v50 = v73;
    if (v25 == v73)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v58, v3);
      v25 = v50;
      v45 = v58;
      v19 = v70;
      goto LABEL_45;
    }
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    v77 = v25;
    result = v59(v72 + v25 * v20, v58, v3);
    v55 = v81;
    v60 = v84;
    v75 = v83;
    v76 = v82;
    if (v85)
    {
      v54 = (v85 - 1) & v85;
      v61 = __clz(__rbit64(v85)) | (v84 << 6);
      v19 = v70;
      goto LABEL_62;
    }
    v68 = v81;
    v63 = v84 + 1;
    v19 = v70;
    if (__OFADD__(v84, 1))
      break;
    v64 = (v83 + 64) >> 6;
    v62 = v84;
    if (v63 < v64)
    {
      v65 = *(_QWORD *)(v82 + 8 * v63);
      if (v65)
        goto LABEL_66;
      v66 = v84 + 2;
      v62 = v84 + 1;
      if ((uint64_t)(v84 + 2) < v64)
      {
        v65 = *(_QWORD *)(v82 + 8 * v66);
        if (v65)
          goto LABEL_69;
        v62 = v84 + 2;
        if ((uint64_t)(v84 + 3) < v64)
        {
          v65 = *(_QWORD *)(v82 + 8 * (v84 + 3));
          if (v65)
          {
            v63 = v84 + 3;
            goto LABEL_66;
          }
          v66 = v84 + 4;
          v62 = v84 + 3;
          if ((uint64_t)(v84 + 4) < v64)
          {
            v65 = *(_QWORD *)(v82 + 8 * v66);
            if (v65)
            {
LABEL_69:
              v63 = v66;
              goto LABEL_66;
            }
            v63 = v84 + 5;
            v62 = v84 + 4;
            if ((uint64_t)(v84 + 5) < v64)
            {
              v65 = *(_QWORD *)(v82 + 8 * v63);
              if (!v65)
              {
                v62 = v64 - 1;
                v67 = v84 + 6;
                do
                {
                  if (v64 == v67)
                  {
                    v19 = v70;
                    goto LABEL_57;
                  }
                  v65 = *(_QWORD *)(v82 + 8 * v67++);
                }
                while (!v65);
                v63 = v67 - 1;
                v19 = v70;
              }
LABEL_66:
              v54 = (v65 - 1) & v65;
              v61 = __clz(__rbit64(v65)) + (v63 << 6);
              v60 = v63;
              v55 = v68;
LABEL_62:
              (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v55 + 48) + v61 * v20, v3);
              v69(v16, 0, 1, v3);
              v62 = v60;
              goto LABEL_58;
            }
          }
        }
      }
    }
LABEL_57:
    v69(v16, 1, 1, v3);
    v54 = 0;
    v55 = v68;
LABEL_58:
    v25 = v77 + 1;
    v81 = v55;
    v82 = v76;
    v83 = v75;
    v84 = v62;
    v85 = v54;
    v49 = v80;
    sub_10000F9B8((uint64_t)v16, v80, &qword_1010ED860);
    v56 = v74(v49, 1, v3);
    v45 = v79;
    v51 = v71;
    if (v56 == 1)
      goto LABEL_50;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003036C4(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C8C90, type metadata accessor for MemberSharingCircle);
}

uint64_t sub_1003036D8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_1007C8FD4(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = sub_10001A9A8(&qword_1010ED360);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100303850(uint64_t a1)
{
  return sub_100305068(a1, (uint64_t (*)(void))sub_1007C884C, (uint64_t *)&unk_1011117D0);
}

uint64_t sub_100303864(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  int isUniquelyReferenced_nonNull_native;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  char *v58;
  uint64_t (*v59)(unint64_t, char *, uint64_t);
  int64_t v60;
  unint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  unint64_t v72;
  unint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v79 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = __chkstk_darwin(v6);
  v80 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  v16 = (char *)&v68 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *v1;
  v19 = *(_QWORD *)(*v1 + 16);
  v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v18;
  v78 = v11;
  if (!isUniquelyReferenced_nonNull_native || (v22 = *(_QWORD *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20)
      v23 = v19 + v17;
    else
      v23 = v19;
    v18 = sub_1007C84F8(isUniquelyReferenced_nonNull_native, v23, 1, v18);
    *v1 = v18;
    v22 = *(_QWORD *)(v18 + 24) >> 1;
  }
  v24 = *(_QWORD *)(v18 + 16);
  v19 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v20 = *(_QWORD *)(v4 + 72);
  v25 = v22 - v24;
  v26 = sub_10050AE8C(&v81, v18 + v19 + v20 * v24, v22 - v24, a1);
  if (v26 < v17)
    goto LABEL_15;
  if (v26)
  {
    v28 = *(_QWORD *)(v18 + 16);
    v29 = __OFADD__(v28, v26);
    v30 = v28 + v26;
    if (v29)
    {
      __break(1u);
LABEL_20:
      v35 = a1 + 1;
      if (__OFADD__(a1, 1))
      {
        __break(1u);
      }
      else
      {
        v36 = (v27 + 64) >> 6;
        v77 = a1;
        if (v35 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v18 + 8 * v35);
        if (v37)
        {
LABEL_23:
          v32 = (v37 - 1) & v37;
          v33 = __clz(__rbit64(v37)) + (v35 << 6);
          a1 = v35;
          goto LABEL_18;
        }
        v38 = a1 + 2;
        v77 = a1 + 1;
        if (a1 + 2 >= v36)
          goto LABEL_41;
        v14 = v19;
        v13 = v25;
        v12 = v17;
        v37 = *(_QWORD *)(v18 + 8 * v38);
        if (v37)
        {
LABEL_26:
          v35 = v38;
          goto LABEL_23;
        }
        v77 = a1 + 2;
        v18 = v76;
        if (a1 + 3 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v76 + 8 * (a1 + 3));
        if (v37)
        {
          v35 = a1 + 3;
          goto LABEL_23;
        }
        v38 = a1 + 4;
        v77 = a1 + 3;
        v18 = v76;
        if (a1 + 4 >= v36)
          goto LABEL_41;
        v37 = *(_QWORD *)(v76 + 8 * v38);
        if (v37)
          goto LABEL_26;
        v35 = a1 + 5;
        v77 = a1 + 4;
        v18 = v76;
        if (a1 + 5 >= v36)
        {
LABEL_41:
          v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
          v69(v16, 1, 1, v3);
          v34 = 0;
          a1 = v77;
          goto LABEL_42;
        }
        v37 = *(_QWORD *)(v76 + 8 * v35);
        if (v37)
          goto LABEL_23;
        v77 = v36 - 1;
        v39 = a1 + 6;
        while (v36 != v39)
        {
          v37 = *(_QWORD *)(v76 + 8 * v39++);
          if (v37)
          {
            v35 = v39 - 1;
            goto LABEL_23;
          }
        }
      }
      v17 = v12;
      v25 = v13;
      v18 = v76;
      v19 = v14;
      goto LABEL_41;
    }
    *(_QWORD *)(v18 + 16) = v30;
  }
  if (v26 != v25)
    return sub_10007CC38(v81);
LABEL_16:
  v25 = *(_QWORD *)(v18 + 16);
  v17 = v81;
  v18 = v82;
  v27 = v83;
  a1 = v84;
  v76 = v82;
  v73 = v83;
  if (!v85)
    goto LABEL_20;
  v32 = (v85 - 1) & v85;
  v33 = __clz(__rbit64(v85)) | (v84 << 6);
LABEL_18:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v17 + 48) + v33 * v20, v3);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v69(v16, 0, 1, v3);
  v34 = v32;
  v18 = v76;
LABEL_42:
  v75 = v34;
  v77 = a1;
  v81 = v17;
  v82 = v18;
  v83 = v73;
  v84 = a1;
  v85 = v34;
  v40 = v17;
  v41 = (uint64_t)v78;
  sub_10000F9B8((uint64_t)v16, (uint64_t)v78, &qword_1010ED860);
  v42 = v41;
  v43 = v40;
  v74 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v74(v42, 1, v3) == 1)
  {
LABEL_82:
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    sub_10007CC38(v43);
    return sub_100004048((uint64_t)v78, &qword_1010ED860);
  }
  v44 = (uint64_t)v78;
  v45 = v79;
  v70 = v19;
  while (1)
  {
    sub_100004048(v44, &qword_1010ED860);
    v46 = *(_QWORD *)(*v1 + 24);
    v47 = v46 >> 1;
    if ((uint64_t)(v46 >> 1) < v25 + 1)
    {
      v53 = sub_1007C84F8(v46 > 1, v25 + 1, 1, *v1);
      *v1 = v53;
      v77 = v53;
      v47 = *(_QWORD *)(v53 + 24) >> 1;
    }
    else
    {
      v77 = *v1;
    }
    v48 = v80;
    sub_10000F9B8((uint64_t)v16, v80, &qword_1010ED860);
    if (v74(v48, 1, v3) != 1)
      break;
    v49 = v80;
LABEL_50:
    sub_100004048(v49, &qword_1010ED860);
    v50 = v25;
LABEL_45:
    *(_QWORD *)(*v1 + 16) = v50;
    v44 = (uint64_t)v78;
    sub_10000F9B8((uint64_t)v16, (uint64_t)v78, &qword_1010ED860);
    if (v74(v44, 1, v3) == 1)
    {
      v43 = v81;
      v77 = v84;
      v75 = v85;
      goto LABEL_82;
    }
  }
  v72 = v77 + v19;
  v51 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 32);
  if (v25 <= v47)
    v52 = v47;
  else
    v52 = v25;
  v73 = v52;
  v49 = v80;
  v71 = v51;
  while (1)
  {
    v57 = v45;
    v58 = v45;
    v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v51;
    v51(v57, v49, v3);
    v50 = v73;
    if (v25 == v73)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v58, v3);
      v25 = v50;
      v45 = v58;
      v19 = v70;
      goto LABEL_45;
    }
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    v77 = v25;
    result = v59(v72 + v25 * v20, v58, v3);
    v55 = v81;
    v60 = v84;
    v75 = v83;
    v76 = v82;
    if (v85)
    {
      v54 = (v85 - 1) & v85;
      v61 = __clz(__rbit64(v85)) | (v84 << 6);
      v19 = v70;
      goto LABEL_62;
    }
    v68 = v81;
    v63 = v84 + 1;
    v19 = v70;
    if (__OFADD__(v84, 1))
      break;
    v64 = (v83 + 64) >> 6;
    v62 = v84;
    if (v63 < v64)
    {
      v65 = *(_QWORD *)(v82 + 8 * v63);
      if (v65)
        goto LABEL_66;
      v66 = v84 + 2;
      v62 = v84 + 1;
      if (v84 + 2 < v64)
      {
        v65 = *(_QWORD *)(v82 + 8 * v66);
        if (v65)
          goto LABEL_69;
        v62 = v84 + 2;
        if (v84 + 3 < v64)
        {
          v65 = *(_QWORD *)(v82 + 8 * (v84 + 3));
          if (v65)
          {
            v63 = v84 + 3;
            goto LABEL_66;
          }
          v66 = v84 + 4;
          v62 = v84 + 3;
          if (v84 + 4 < v64)
          {
            v65 = *(_QWORD *)(v82 + 8 * v66);
            if (v65)
            {
LABEL_69:
              v63 = v66;
              goto LABEL_66;
            }
            v63 = v84 + 5;
            v62 = v84 + 4;
            if (v84 + 5 < v64)
            {
              v65 = *(_QWORD *)(v82 + 8 * v63);
              if (!v65)
              {
                v62 = v64 - 1;
                v67 = v84 + 6;
                do
                {
                  if (v64 == v67)
                  {
                    v19 = v70;
                    goto LABEL_57;
                  }
                  v65 = *(_QWORD *)(v82 + 8 * v67++);
                }
                while (!v65);
                v63 = v67 - 1;
                v19 = v70;
              }
LABEL_66:
              v54 = (v65 - 1) & v65;
              v61 = __clz(__rbit64(v65)) + (v63 << 6);
              v60 = v63;
              v55 = v68;
LABEL_62:
              (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v16, *(_QWORD *)(v55 + 48) + v61 * v20, v3);
              v69(v16, 0, 1, v3);
              v62 = v60;
              goto LABEL_58;
            }
          }
        }
      }
    }
LABEL_57:
    v69(v16, 1, 1, v3);
    v54 = 0;
    v55 = v68;
LABEL_58:
    v25 = v77 + 1;
    v81 = v55;
    v82 = v76;
    v83 = v75;
    v84 = v62;
    v85 = v54;
    v49 = v80;
    sub_10000F9B8((uint64_t)v16, v80, &qword_1010ED860);
    v56 = v74(v49, 1, v3);
    v45 = v79;
    v51 = v71;
    if (v56 == 1)
      goto LABEL_50;
  }
  __break(1u);
  return result;
}

uint64_t sub_100304004(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C95B8, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100304018(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C8CF4, type metadata accessor for ShareRecord);
}

uint64_t sub_10030402C(uint64_t a1)
{
  return sub_10001B858(a1, (uint64_t (*)(void))sub_1007C98A0, (uint64_t *)&unk_1010FABA0);
}

uint64_t sub_100304040(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1007C8E78(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  sub_10001A9A8(&qword_101108F70);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003041A0(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_1007C9CA8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  sub_10001A9A8(&qword_101109170);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10030430C(uint64_t a1)
{
  return sub_10030590C(a1, (uint64_t (*)(void))sub_1007C9F04, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100304320(uint64_t a1)
{
  return sub_1003044F0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10050CB7C);
}

uint64_t sub_10030432C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease();
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_10050CD98(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003044E4(uint64_t a1)
{
  return sub_1003044F0(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_10050CFB4);
}

uint64_t sub_1003044F0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003046AC(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C9DB4, type metadata accessor for SecureLocation);
}

uint64_t sub_1003046C0(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007CA080, type metadata accessor for WildModeTrackingLocation);
}

void sub_1003046D4(uint64_t a1)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  int64_t v38;
  unint64_t v39;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)*v1;
  v5 = *(_QWORD *)(*v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = sub_1007CA094(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  v13 = sub_10050AC94((uint64_t)v36, &v4[v11 + 4], v9 - v11, a1);
  if (v13 < v3)
    goto LABEL_16;
  if (v13)
  {
    v15 = v4[2];
    v16 = __OFADD__(v15, v13);
    v17 = v15 + v13;
    if (v16)
    {
      __break(1u);
      goto LABEL_50;
    }
    v4[2] = v17;
  }
  if (v13 != v12)
  {
    v18 = v36[0];
LABEL_14:
    sub_10007CC38(v18);
    *v1 = v4;
    return;
  }
LABEL_17:
  v2 = v4[2];
  v3 = v36[0];
  v35 = v36[1];
  v14 = v37;
  v6 = v38;
  if (v39)
  {
    v19 = (v39 - 1) & v39;
    v20 = __clz(__rbit64(v39)) | (v38 << 6);
    v21 = (unint64_t)(v37 + 64) >> 6;
    goto LABEL_19;
  }
LABEL_50:
  v31 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_68;
  v21 = (unint64_t)(v14 + 64) >> 6;
  if (v31 >= v21)
  {
    v18 = v3;
    goto LABEL_14;
  }
  v32 = *(_QWORD *)(v35 + 8 * v31);
  v33 = v6 + 1;
  if (v32)
    goto LABEL_53;
  v33 = v6 + 2;
  if (v6 + 2 >= v21)
    goto LABEL_47;
  v32 = *(_QWORD *)(v35 + 8 * v33);
  if (!v32)
  {
    v33 = v6 + 3;
    if (v6 + 3 >= v21)
      goto LABEL_47;
    v32 = *(_QWORD *)(v35 + 8 * v33);
    if (!v32)
    {
      v33 = v6 + 4;
      if (v6 + 4 >= v21)
        goto LABEL_47;
      v32 = *(_QWORD *)(v35 + 8 * v33);
      if (!v32)
      {
        v33 = v6 + 5;
        if (v6 + 5 < v21)
        {
          v32 = *(_QWORD *)(v35 + 8 * v33);
          if (!v32)
          {
            v34 = v6 + 6;
            do
            {
              if (v21 == v34)
                goto LABEL_47;
              v32 = *(_QWORD *)(v35 + 8 * v34++);
            }
            while (!v32);
            v33 = v34 - 1;
          }
          goto LABEL_53;
        }
LABEL_47:
        v18 = v3;
        goto LABEL_14;
      }
    }
  }
LABEL_53:
  v19 = (v32 - 1) & v32;
  v20 = __clz(__rbit64(v32)) + (v33 << 6);
  v6 = v33;
LABEL_19:
  v22 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v20);
  swift_bridgeObjectRetain(v22);
  while (1)
  {
    v23 = v4[3];
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v2 + 1)
      break;
    if (v2 < v24)
      goto LABEL_24;
LABEL_21:
    v4[2] = v2;
  }
  v4 = sub_1007CA094((_QWORD *)(v23 > 1), v2 + 1, 1, v4);
  v24 = v4[3] >> 1;
  if (v2 >= v24)
    goto LABEL_21;
  while (1)
  {
LABEL_24:
    v4[v2++ + 4] = v22;
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v6 << 6);
      goto LABEL_42;
    }
    v27 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v27 >= v21)
      goto LABEL_46;
    v28 = *(_QWORD *)(v35 + 8 * v27);
    v29 = v6 + 1;
    if (!v28)
    {
      v29 = v6 + 2;
      if (v6 + 2 >= v21)
        goto LABEL_46;
      v28 = *(_QWORD *)(v35 + 8 * v29);
      if (!v28)
      {
        v29 = v6 + 3;
        if (v6 + 3 >= v21)
          goto LABEL_46;
        v28 = *(_QWORD *)(v35 + 8 * v29);
        if (!v28)
        {
          v29 = v6 + 4;
          if (v6 + 4 >= v21)
            goto LABEL_46;
          v28 = *(_QWORD *)(v35 + 8 * v29);
          if (!v28)
          {
            v29 = v6 + 5;
            if (v6 + 5 >= v21)
              goto LABEL_46;
            v28 = *(_QWORD *)(v35 + 8 * v29);
            if (!v28)
            {
              v30 = v6 + 6;
              while (v21 != v30)
              {
                v28 = *(_QWORD *)(v35 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_41;
                }
              }
LABEL_46:
              v4[2] = v2;
              goto LABEL_47;
            }
          }
        }
      }
    }
LABEL_41:
    v19 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v6 = v29;
LABEL_42:
    v22 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v26);
    if (v2 >= v24)
    {
      swift_bridgeObjectRetain(v22);
      goto LABEL_21;
    }
    swift_bridgeObjectRetain(v22);
  }
  __break(1u);
LABEL_68:
  __break(1u);
}

uint64_t sub_100304A5C(uint64_t a1)
{
  return sub_100305068(a1, (uint64_t (*)(void))sub_1007CA0BC, &qword_1011093C0);
}

uint64_t sub_100304A70(uint64_t a1)
{
  return sub_100305068(a1, (uint64_t (*)(void))sub_1007CA0D0, &qword_101108FE0);
}

uint64_t sub_100304A84(uint64_t a1)
{
  return sub_10030590C(a1, (uint64_t (*)(void))sub_1007CA3DC, type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

uint64_t sub_100304A98(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007C8D08, type metadata accessor for SafeLocation);
}

uint64_t sub_100304AAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  void (*v46)(_QWORD *);
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[4];

  v59 = a2;
  v9 = type metadata accessor for Bit(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v57 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EEC30);
  v13 = __chkstk_darwin(v12);
  v14 = __chkstk_darwin(v13);
  v55 = (uint64_t)&v49 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v49 - v17;
  v56 = a4;
  v19 = a4 >> 1;
  v20 = __OFSUB__(a4 >> 1, a3);
  v21 = (a4 >> 1) - a3;
  if (v20)
  {
    __break(1u);
    goto LABEL_26;
  }
  v60 = a1;
  a1 = *v4;
  v22 = *(_QWORD *)(*v4 + 16);
  v5 = v22 + v21;
  if (__OFADD__(v22, v21))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v58 = v16;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
  *v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (v24 = *(_QWORD *)(a1 + 24) >> 1, v24 < v5))
  {
    if (v22 <= v5)
      v25 = v22 + v21;
    else
      v25 = v22;
    a1 = sub_1007CA404(isUniquelyReferenced_nonNull_native, v25, 1, a1);
    *v4 = a1;
    v24 = *(_QWORD *)(a1 + 24) >> 1;
  }
  v26 = *(_QWORD *)(a1 + 16);
  v27 = v24 - v26;
  if (v19 == a3)
  {
    if (v21 <= 0)
    {
      v21 = 0;
      v5 = a3;
      goto LABEL_23;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v27 < v21)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v21 < 0)
    goto LABEL_51;
  v28 = *(_QWORD *)(v10 + 72);
  v29 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)) + v28 * v26;
  v30 = v59 + v28 * a3;
  if (v30 >= v29 + v28 * v21 || v29 >= v30 + v28 * v21)
  {
    swift_arrayInitWithCopy(v29);
    if (!v21)
    {
LABEL_22:
      v5 = v19;
LABEL_23:
      if (v21 != v27)
        return swift_unknownObjectRelease(v60);
LABEL_28:
      v21 = *(_QWORD *)(a1 + 16);
      v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v50(v18, 1, 1, v9);
      a1 = v55;
      sub_10000F9B8((uint64_t)v18, v55, &qword_1010EEC30);
      v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      if (v54(a1, 1, v9) == 1)
      {
LABEL_29:
        sub_100004048((uint64_t)v18, &qword_1010EEC30);
        swift_unknownObjectRelease(v60);
        return sub_100004048(a1, &qword_1010EEC30);
      }
      do
      {
LABEL_34:
        sub_100004048(a1, &qword_1010EEC30);
        v35 = *v4;
        v36 = *(_QWORD *)(*v4 + 24);
        if ((uint64_t)(v36 >> 1) < v21 + 1)
        {
          v37 = v5;
          v47 = sub_1007CA404(v36 > 1, v21 + 1, 1, v35);
          *v4 = v47;
          v53 = v47;
          v49 = *(_QWORD *)(v47 + 24) >> 1;
        }
        else
        {
          v49 = v36 >> 1;
          v53 = v35;
          v37 = v5;
        }
        v38 = *(unsigned __int8 *)(v10 + 80);
        v39 = v58;
        sub_10000F9B8((uint64_t)v18, v58, &qword_1010EEC30);
        if (v54(v39, 1, v9) == 1)
        {
          v40 = v58;
LABEL_38:
          sub_100004048(v40, &qword_1010EEC30);
          v34 = v21;
          v5 = v37;
        }
        else
        {
          v51 = v53 + ((v38 + 32) & ~v38);
          v41 = v49;
          if (v21 > v49)
            v41 = v21;
          v52 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
          v53 = v41;
          v42 = v57;
          v40 = v58;
          while (1)
          {
            v44 = v40;
            v45 = v52;
            v52((uint64_t)v42, (char *)v44, v9);
            if (v53 == v21)
              break;
            sub_100004048((uint64_t)v18, &qword_1010EEC30);
            v45(v51 + *(_QWORD *)(v10 + 72) * v21, v42, v9);
            if (v37 == v19)
            {
              v43 = 1;
              v37 = v19;
            }
            else
            {
              v46 = sub_100DF5B90(v61, v37, v60, v59, a3, v56);
              (*(void (**)(char *))(v10 + 16))(v18);
              ((void (*)(uint64_t *, _QWORD))v46)(v61, 0);
              v20 = __OFADD__(v37++, 1);
              if (v20)
                goto LABEL_50;
              v43 = 0;
              v42 = v57;
            }
            v50(v18, v43, 1, v9);
            v40 = v58;
            sub_10000F9B8((uint64_t)v18, v58, &qword_1010EEC30);
            ++v21;
            if (v54(v40, 1, v9) == 1)
              goto LABEL_38;
          }
          (*(void (**)(char *, uint64_t))(v10 + 8))(v42, v9);
          v34 = v53;
          v21 = v53;
          v5 = v37;
        }
        *(_QWORD *)(*v4 + 16) = v34;
        a1 = v55;
        sub_10000F9B8((uint64_t)v18, v55, &qword_1010EEC30);
      }
      while (v54(a1, 1, v9) != 1);
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(a1 + 16);
    v20 = __OFADD__(v32, v21);
    v33 = v32 + v21;
    if (!v20)
    {
      *(_QWORD *)(a1 + 16) = v33;
      goto LABEL_22;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_52;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_100305040(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007CA404, (uint64_t (*)(_QWORD))&type metadata accessor for Bit);
}

uint64_t sub_100305054(uint64_t a1)
{
  return sub_100305068(a1, (uint64_t (*)(void))sub_1007CA42C, (uint64_t *)&unk_101109310);
}

uint64_t sub_100305068(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  char v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = sub_10001A9A8(a3);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy(v16);
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003051E0(uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), unint64_t a4)
{
  return sub_100305204(a1, a2, a3, a4, type metadata accessor for OwnedBeaconRecord, (uint64_t *)&unk_1010F47C0, (uint64_t (*)(void))sub_1007C8520, (uint64_t (*)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))sub_100DF5C64);
}

uint64_t sub_100305204(uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t, uint64_t, uint64_t), unint64_t a4, uint64_t (*a5)(_QWORD), uint64_t *a6, uint64_t (*a7)(void), uint64_t (*a8)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))
{
  uint64_t *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  void (**v25)(char *, uint64_t, uint64_t, uint64_t);
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int i;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD);
  void (*v56)(_BYTE *, _QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  void (**v64)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  unint64_t v66;
  uint64_t (*v67)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t);
  uint64_t (*v68)(_QWORD);
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t (*v72)(void);
  uint64_t v73;
  char *v74;
  _BYTE v75[40];

  v67 = (uint64_t (*)(_BYTE *, void (**)(char *, uint64_t, uint64_t, uint64_t), char *, uint64_t, void (**)(char *, uint64_t, uint64_t, uint64_t), unint64_t))a8;
  v68 = a5;
  v72 = a7;
  v73 = a2;
  v13 = a5(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v60 - v15;
  v17 = sub_10001A9A8(a6);
  v18 = __chkstk_darwin(v17);
  v70 = (uint64_t)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v65 = (uint64_t)&v60 - v21;
  __chkstk_darwin(v20);
  v22 = &v60;
  v24 = (char *)&v60 - v23;
  v66 = a4;
  v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 >> 1);
  v26 = __OFSUB__(a4 >> 1, a3);
  v27 = (a4 >> 1) - (_QWORD)a3;
  if (v26)
  {
    __break(1u);
    goto LABEL_23;
  }
  v69 = v16;
  v74 = (char *)a1;
  v71 = a6;
  a1 = *v8;
  v28 = *(_QWORD *)(*v8 + 16);
  v16 = (char *)(v28 + v27);
  if (__OFADD__(v28, v27))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  *v8 = a1;
  if (!isUniquelyReferenced_nonNull_native || (v30 = *(_QWORD *)(a1 + 24) >> 1, v30 < (uint64_t)v16))
  {
    a1 = v72();
    *v8 = a1;
    v30 = *(_QWORD *)(a1 + 24) >> 1;
  }
  v16 = v74;
  v22 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(a1 + 16);
  v31 = v30 - (_QWORD)v22;
  if (v25 != a3)
  {
    if (v31 < v27)
    {
      __break(1u);
    }
    else
    {
      if (v27 < 0)
      {
LABEL_49:
        result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
        goto LABEL_50;
      }
      v32 = *(_QWORD *)(v14 + 72);
      v33 = a1
          + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + v32 * (_QWORD)v22;
      v34 = v73 + v32 * (_QWORD)a3;
      if (v34 < v33 + v32 * v27 && v33 < v34 + v32 * v27)
      {
        result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_50:
        __break(1u);
        return result;
      }
      swift_arrayInitWithCopy(v33);
      if (!v27)
      {
LABEL_19:
        v22 = v25;
LABEL_20:
        if (v27 != v31)
          return swift_unknownObjectRelease(v16);
        goto LABEL_25;
      }
      v36 = *(_QWORD *)(a1 + 16);
      v26 = __OFADD__(v36, v27);
      v37 = v36 + v27;
      if (!v26)
      {
        *(_QWORD *)(a1 + 16) = v37;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v27 <= 0)
  {
    v27 = 0;
    v22 = a3;
    goto LABEL_20;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  v64 = v22;
  v38 = *(_QWORD *)(a1 + 16);
  v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v60(v24, 1, 1, v13);
  v39 = v65;
  v40 = v71;
  sub_10000F9B8((uint64_t)v24, v65, v71);
  v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  for (i = v63(v39, 1, v13); i != 1; i = v63(v39, 1, v13))
  {
    sub_100004048(v39, v40);
    v43 = *(_QWORD *)(*v8 + 24);
    v44 = v43 >> 1;
    if ((uint64_t)(v43 >> 1) < v38 + 1)
    {
      v58 = ((uint64_t (*)(BOOL))v72)(v43 > 1);
      *v8 = v58;
      v62 = v58;
      v44 = *(_QWORD *)(v58 + 24) >> 1;
    }
    else
    {
      v62 = *v8;
    }
    v45 = *(unsigned __int8 *)(v14 + 80);
    v46 = v70;
    sub_10000F9B8((uint64_t)v24, v70, v71);
    if (v63(v46, 1, v13) == 1)
    {
      v16 = v74;
      v47 = v70;
LABEL_33:
      v48 = v47;
      v40 = v71;
      sub_100004048(v48, v71);
      v42 = v38;
      v39 = v65;
    }
    else
    {
      v61 = v62 + ((v45 + 32) & ~v45);
      if (v38 <= v44)
        v49 = v44;
      else
        v49 = v38;
      v62 = v49;
      v16 = v74;
      v50 = v68;
      v47 = v70;
      while (1)
      {
        v52 = v47;
        v53 = (uint64_t)v69;
        sub_1000126EC(v52, (uint64_t)v69, v50);
        if (v62 == v38)
          break;
        sub_100004048((uint64_t)v24, v71);
        sub_1000126EC(v53, v61 + *(_QWORD *)(v14 + 72) * v38, v50);
        if (v64 == v25)
        {
          v51 = 1;
          v64 = v25;
          v47 = v70;
        }
        else
        {
          v54 = v67(v75, v64, v16, v73, a3, v66);
          v55 = v50;
          v56 = (void (*)(_BYTE *, _QWORD))v54;
          sub_10005972C(v57, (uint64_t)v24, v55);
          v56(v75, 0);
          v47 = v70;
          if (__OFADD__(v64, 1))
            goto LABEL_48;
          v64 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)v64 + 1);
          v51 = 0;
          v50 = v68;
        }
        v60(v24, v51, 1, v13);
        sub_10000F9B8((uint64_t)v24, v47, v71);
        ++v38;
        if (v63(v47, 1, v13) == 1)
          goto LABEL_33;
      }
      sub_1000126B0(v53, v50);
      v42 = v62;
      v38 = v62;
      v39 = v65;
      v40 = v71;
    }
    *(_QWORD *)(*v8 + 16) = v42;
    sub_10000F9B8((uint64_t)v24, v39, v40);
  }
  sub_100004048((uint64_t)v24, v40);
  swift_unknownObjectRelease(v16);
  return sub_100004048(v39, v40);
}

uint64_t sub_10030576C(uint64_t a1)
{
  return sub_100305780(a1, (uint64_t (*)(void))sub_1007CA7F8, type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_100305780(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  char v26;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3) && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003058F8(uint64_t a1)
{
  return sub_10030590C(a1, (uint64_t (*)(void))sub_1007CA96C, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_10030590C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  char v27;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3)
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  v12 = (*(_QWORD *)(v5 + 24) >> 1) - v11;
  v13 = a3(0);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v5 + v15 + v16 * v11;
  v18 = a1 + v15;
  v19 = v16 * v10;
  v20 = v17 + v19;
  v21 = v18 + v19;
  if (v18 < v20 && v17 < v21)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v10);
  v25 = v23 + v10;
  if (!v24)
  {
    *(_QWORD *)(v5 + 16) = v25;
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v27 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v27, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100305A88(uint64_t a1)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1007C98C8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (char *)v3 + v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

void *sub_100305BCC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + *(int *)(a1 + 24));
  v3 = v2;
  return v2;
}

uint64_t sub_100305BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  const char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  const char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  id v60;

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LeftBehindUserNotification(0);
  v6 = v0 + *(int *)(v5 + 20);
  v8 = *(void **)(v6 + 8);
  v7 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 24);
  if ((*(_BYTE *)(v6 + 32) & 1) == 0)
  {
    v14 = v8;
    swift_bridgeObjectRetain(v9);
    if (v9)
    {
      v15 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v15 = v7 & 0xFFFFFFFFFFFFLL;
      if (v15)
      {
        v60 = v14;
        v16 = v1;
        v17 = 0xD000000000000039;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v18 != v21 || v20 != v22)
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) != 0)
          {
            v25 = 0x8000000100ED0A80;
LABEL_45:
            v1 = v16;
            v54 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
            v41 = (_QWORD *)swift_allocObject(v54, 72, 7);
            *((_OWORD *)v41 + 1) = xmmword_100E22B00;
            v41[7] = &type metadata for String;
            v41[8] = sub_10001AA00();
            v41[4] = v7;
            v41[5] = v9;
            v14 = v60;
            goto LABEL_46;
          }
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
          v20 = v50;
          v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
          if (v49 != v52 || v20 != v51)
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v20, v52, v51, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v53 & 1) != 0)
            {
              v25 = 0x8000000100ED0A80;
            }
            else
            {
              v17 = 0xD00000000000003BLL;
              v25 = 0x8000000100ED0A40;
            }
            goto LABEL_45;
          }
        }
        swift_bridgeObjectRelease_n(v20, 2);
        v25 = 0x8000000100ED0A80;
        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
    }
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v33 == v36 && v35 == v37)
    {
      swift_bridgeObjectRelease_n(v35, 2);
      v17 = 0xD000000000000044;
    }
    else
    {
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
        v44 = v43;
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v42 != v45 || v44 != v46)
        {
          v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v45, v46, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v48 & 1) != 0)
            v17 = 0xD000000000000041;
          else
            v17 = 0xD000000000000043;
          if ((v48 & 1) != 0)
            v25 = 0x8000000100ED09A0;
          else
            v25 = 0x8000000100ED0950;
          goto LABEL_26;
        }
        swift_bridgeObjectRelease_n(v44, 2);
        v17 = 0xD000000000000041;
        v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_B389";
LABEL_25:
        v25 = (unint64_t)(v40 - 32) | 0x8000000000000000;
LABEL_26:
        v41 = _swiftEmptyArrayStorage;
LABEL_46:
        (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
        v55 = static LocalizationUtility.localizedString(key:table:)(v17, v25, v4);
        v57 = v56;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        v32 = String.init(format:arguments:)(v55, v57, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v32;
      }
      v17 = 0xD000000000000044;
    }
    v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_HAWKEYE";
    goto LABEL_25;
  }
  v10 = *(_QWORD *)v6;
  v11 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 36)) - 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  swift_bridgeObjectRetain(v10);
  if (v11 >= 2)
  {
    v12 = 0xD00000000000003ELL;
    v13 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_TITLE";
  }
  else
  {
    v12 = 0xD00000000000003CLL;
    v13 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_TITLE";
  }
  v26 = static LocalizationUtility.localizedString(key:table:)(v12, (unint64_t)(v13 - 32) | 0x8000000000000000, v4);
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100E22B00;
  v31 = *(_QWORD *)(v10 + 16);
  sub_100306ACC(v10, v8, v7, v9, 1);
  *(_QWORD *)(v30 + 56) = &type metadata for Int;
  *(_QWORD *)(v30 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v30 + 32) = v31;
  v32 = static String.localizedStringWithFormat(_:_:)(v26, v28, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_100306128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  __n128 v16;
  unsigned int v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for LeftBehindUserNotification(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v0 + *(int *)(v6 + 24));
  if (!v9 || (char *)objc_msgSend(*(id *)(v0 + *(int *)(v6 + 24)), "type") - 1 > (char *)3)
  {
    v15 = (uint64_t *)(v0 + v5[7]);
    v12 = *v15;
    v14 = v15[1];
    v16 = swift_bridgeObjectRetain(v14);
    if (v14)
      goto LABEL_7;
LABEL_13:
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1, v16);
    v26 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000035, 0x8000000100ED0800, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v26;
  }
  v10 = objc_msgSend(v9, "name");
  if (!v10)
  {
    sub_10005972C(v0, (uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
LABEL_12:
    v27 = (uint64_t *)&v8[v5[7]];
    v12 = *v27;
    v14 = v27[1];
    swift_bridgeObjectRetain(v14);
    sub_1000126B0((uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
    if (v14)
      goto LABEL_7;
    goto LABEL_13;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;

  sub_10005972C(v0, (uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
  if (!v14)
    goto LABEL_12;
  sub_1000126B0((uint64_t)v8, type metadata accessor for LeftBehindUserNotification);
LABEL_7:
  v17 = *(unsigned __int8 *)(v0 + v5[9]) - 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  if (v17 > 1)
  {
    v18 = 0xD000000000000041;
    v19 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_SUBTITLE";
  }
  else
  {
    v18 = 0xD00000000000003FLL;
    v19 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_SUBTITLE";
  }
  v20 = static LocalizationUtility.localizedString(key:table:)(v18, (unint64_t)(v19 - 32) | 0x8000000000000000, v4);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v24 = swift_allocObject(v23, 112, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B10;
  v25 = *(_QWORD *)(*(_QWORD *)(v0 + v5[5]) + 16);
  *(_QWORD *)(v24 + 56) = &type metadata for Int;
  *(_QWORD *)(v24 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 96) = &type metadata for String;
  *(_QWORD *)(v24 + 104) = sub_10001AA00();
  *(_QWORD *)(v24 + 72) = v12;
  *(_QWORD *)(v24 + 80) = v14;
  v26 = static String.localizedStringWithFormat(_:_:)(v20, v22, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

unint64_t sub_100306420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  _BYTE v42[176];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)objc_opt_self(NSKeyedArchiver);
  v7 = type metadata accessor for LeftBehindUserNotification(0);
  v8 = *(_QWORD *)(v1 + *(int *)(v7 + 32));
  *(_QWORD *)&v40 = 0;
  v9 = objc_msgSend(v6, "archivedDataWithRootObject:requiringSecureCoding:error:", v8, 1, &v40);
  v10 = (id)v40;
  if (v9)
  {
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    v39 = 0;
  }
  else
  {
    v14 = v10;
    v15 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v16);
    swift_errorRelease(v15);
    v11 = 0;
    v39 = 0;
    v13 = 0xF000000000000000;
  }
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v17, v42);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoLocationKey);
  *(_QWORD *)(inited + 40) = v19;
  if (v13 >> 60 == 15)
  {
    v20 = objc_allocWithZone((Class)NSNull);
    v21 = objc_msgSend(v20, "init", v39);
    *(_QWORD *)(inited + 72) = sub_100306A90();
    *(_QWORD *)(inited + 48) = v21;
  }
  else
  {
    v41 = &type metadata for Data;
    *(_QWORD *)&v40 = v11;
    *((_QWORD *)&v40 + 1) = v13;
    sub_10010F90C(&v40, (_OWORD *)(inited + 48));
  }
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoSafeLocationKey);
  *(_QWORD *)(inited + 88) = v22;
  v23 = v7;
  v24 = *(void **)(v1 + *(int *)(v7 + 24));
  if (v24)
  {
    sub_10001BD08(v11, v13);
    v25 = objc_msgSend(v24, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

    v27 = UUID.uuidString.getter(v26);
    v28 = v2;
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v28);
    v41 = &type metadata for String;
    *(_QWORD *)&v40 = v27;
    *((_QWORD *)&v40 + 1) = v30;
    sub_10010F90C(&v40, (_OWORD *)(inited + 96));
  }
  else
  {
    v31 = objc_allocWithZone((Class)NSNull);
    sub_10001BD08(v11, v13);
    v32 = objc_msgSend(v31, "init");
    *(_QWORD *)(inited + 120) = sub_100306A90();
    *(_QWORD *)(inited + 96) = v32;
  }
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoBeaconIdentifiersKey);
  *(_QWORD *)(inited + 136) = v33;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(v23 + 20)));
  sub_100302094(v34);
  v36 = v35;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 168) = sub_10001A9A8(&qword_1011063B0);
  *(_QWORD *)(inited + 144) = v36;
  v37 = sub_1006B8B10(inited);
  sub_10001EF3C(v11, v13);
  return v37;
}

uint64_t sub_100306770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  int *v10;
  Swift::String v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  Swift::String v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  double v25;
  Swift::String v26;
  double v27;
  Swift::String v28;
  _OWORD v30[2];
  char v31;
  __int128 v32;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v30[0] = 0;
  *((_QWORD *)&v30[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(98);
  v32 = v30[0];
  v6._countAndFlagsBits = 0xD00000000000001FLL;
  v6._object = (void *)0x8000000100ED0AC0;
  String.append(_:)(v6);
  v7 = sub_1001D4C18();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6E6974736564202CLL;
  v9._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v9);
  v10 = (int *)type metadata accessor for LeftBehindUserNotification(0);
  LOBYTE(v30[0]) = *(_BYTE *)(v0 + v10[9]);
  _print_unlocked<A, B>(_:_:)(v30, &v32, &type metadata for UserNotificationDestination, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 0x747865746E6F6320;
  v11._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v11);
  v12 = v0 + v10[5];
  v13 = *(_BYTE *)(v12 + 32);
  v14 = *(_OWORD *)(v12 + 16);
  v30[0] = *(_OWORD *)v12;
  v30[1] = v14;
  v31 = v13;
  _print_unlocked<A, B>(_:_:)(v30, &v32, &type metadata for SeparationMonitoringBeaconsContext, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15._object = (void *)0x8000000100ED0AE0;
  v15._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v15);
  v16 = *(void **)(v0 + v10[6]);
  if (v16)
  {
    v17 = objc_msgSend(v16, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = UUID.uuidString.getter(v18);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v21 = (void *)0xE400000000000000;
    v19 = 1701736302;
  }
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x6F697461636F6C20;
  v23._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v23);
  v24 = *(void **)(v1 + v10[8]);
  objc_msgSend(v24, "coordinate");
  Double.write<A>(to:)(&v32, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v25);
  v26._countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  objc_msgSend(v24, "coordinate");
  Double.write<A>(to:)(&v32, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v27);
  v28._countAndFlagsBits = 62;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return v32;
}

uint64_t sub_100306A2C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_100306A44(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t type metadata accessor for LeftBehindUserNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F7670;
  if (!qword_1010F7670)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LeftBehindUserNotification);
  return result;
}

unint64_t sub_100306A90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F7600;
  if (!qword_1010F7600)
  {
    v1 = objc_opt_self(NSNull);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010F7600);
  }
  return result;
}

uint64_t sub_100306ACC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  if ((a5 & 1) == 0)
  {

    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

_QWORD *sub_100306B18(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = (void *)*((_QWORD *)v10 + 1);
    v13 = *((_QWORD *)v10 + 2);
    v14 = *((_QWORD *)v10 + 3);
    v15 = v10[32];
    sub_100306C34(*(_QWORD *)v10, v12, v13, v14, v15);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    *((_QWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 3) = v14;
    v9[32] = v15;
    v16 = a3[6];
    v17 = a3[7];
    v18 = *(void **)((char *)a2 + v16);
    *(_QWORD *)((char *)a1 + v16) = v18;
    v19 = (_QWORD *)((char *)a1 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[8];
    v23 = a3[9];
    v24 = *(void **)((char *)a2 + v22);
    *(_QWORD *)((char *)a1 + v22) = v24;
    *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v25 = v18;
    swift_bridgeObjectRetain(v21);
    v26 = v24;
  }
  return a1;
}

id sub_100306C34(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return (id)swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a1);
  return a2;
}

void sub_100306C88(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  sub_100306ACC(*(_QWORD *)v5, *(void **)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));

  swift_bridgeObjectRelease();
}

uint64_t sub_100306D00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(void **)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_BYTE *)(v9 + 32);
  sub_100306C34(*(_QWORD *)v9, v11, v12, v13, v14);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  v15 = a3[6];
  v16 = a3[7];
  v17 = *(void **)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v17;
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[8];
  v22 = a3[9];
  v23 = *(void **)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v24 = v17;
  swift_bridgeObjectRetain(v20);
  v25 = v23;
  return a1;
}

uint64_t sub_100306DF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(void **)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_BYTE *)(v9 + 32);
  sub_100306C34(*(_QWORD *)v9, v11, v12, v13, v14);
  v15 = *(_QWORD *)v8;
  v16 = *(void **)(v8 + 8);
  v17 = *(_QWORD *)(v8 + 16);
  v18 = *(_QWORD *)(v8 + 24);
  v19 = *(_BYTE *)(v8 + 32);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  sub_100306ACC(v15, v16, v17, v18, v19);
  v20 = a3[6];
  v21 = *(void **)(a1 + v20);
  v22 = *(void **)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  v23 = v22;

  v24 = a3[7];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  v28 = a3[8];
  v29 = *(void **)(a2 + v28);
  v30 = *(void **)(a1 + v28);
  *(_QWORD *)(a1 + v28) = v29;
  v31 = v29;

  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100306F18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = (__int128 *)(a2 + v7);
  v11 = *v10;
  v12 = v10[1];
  *(_BYTE *)(v9 + 32) = *((_BYTE *)v10 + 32);
  *(_OWORD *)v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v13 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_100306FB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 32);
  v11 = *(_QWORD *)v8;
  v12 = *(void **)(v8 + 8);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v15 = *(_BYTE *)(v8 + 32);
  v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  *(_BYTE *)(v8 + 32) = v10;
  sub_100306ACC(v11, v12, v13, v14, v15);
  v17 = a3[6];
  v18 = *(void **)(a1 + v17);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);

  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  v24 = a3[8];
  v25 = *(void **)(a1 + v24);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);

  v26 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v26) = *(_BYTE *)(a2 + v26);
  return a1;
}

uint64_t sub_100307088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100307094);
}

uint64_t sub_100307094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100307110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10030711C);
}

uint64_t sub_10030711C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_100307194(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "!";
    v4[2] = L"\b";
    v4[3] = &unk_100E36D20;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_100E36D38;
    v4[6] = &unk_100E36D50;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10030723C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_100307244(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4)
{
  return sub_100307258(a1, a2, a3, a4);
}

uint64_t sub_100307258(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, __n128);
  __n128 v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, __n128);
  void (*v24)(uint64_t *, char *);
  uint64_t v25;

  v24 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1;
  v14 = *(_QWORD *)(a4 + 16);
  v21 = a4;
  if (v14)
  {
    v15 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v22 = *(_QWORD *)(v8 + 72);
    v23 = v16;
    v17 = swift_bridgeObjectRetain(a4);
    while (1)
    {
      v23(v13, v15, v7, v17);
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v18)(v13, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
      v24(&v25, v10);
      if (v4)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        return swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15 += v22;
      if (!--v14)
        goto LABEL_8;
    }
  }
  else
  {
    v19 = a4;
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
    v17 = swift_bridgeObjectRetain(v19);
LABEL_8:
    v18(v13, 1, 1, v7, v17);
  }
  swift_bridgeObjectRelease();
  return v25;
}

void sub_100307440(uint64_t a1, void (*a2)(uint64_t *, _QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD v21[2];
  uint64_t v22;

  v22 = a1;
  v7 = a4 + 64;
  v8 = 1 << *(_BYTE *)(a4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a4 + 64);
  v20 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a4);
  v11 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    v21[0] = v18;
    v21[1] = v19;
    sub_10001BBBC(v18, v19);
    a2(&v22, v21);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_10001BC14(v18, v19);
      swift_release();
      return;
    }
    sub_10001BC14(v18, v19);
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v20)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v10 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v20)
    goto LABEL_26;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v20)
    goto LABEL_26;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v20)
    goto LABEL_26;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v20)
  {
LABEL_26:
    swift_release();
    return;
  }
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v20)
      goto LABEL_26;
    v15 = *(_QWORD *)(v7 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100307624(uint64_t a1, void (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(char *), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  int64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  char *v29;
  unint64_t v30;
  int64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  char *v40;
  void (*v41)(uint64_t *, char *);
  uint64_t v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  char *v47;
  uint64_t (*v48)(char *);
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v48 = a5;
  v41 = a2;
  v42 = a3;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v40 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v47 = (char *)v39 - v13;
  v14 = sub_10001A9A8(&qword_1010ED860);
  v15 = __chkstk_darwin(v14);
  v51 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v43 = (char *)v39 - v17;
  v54 = a1;
  v18 = *(_QWORD *)(a4 + 56);
  v45 = a4 + 56;
  v19 = -1;
  v20 = -1 << *(_BYTE *)(a4 + 32);
  v39[1] = ~v20;
  if (-v20 < 64)
    v19 = ~(-1 << -(char)v20);
  v21 = v19 & v18;
  v44 = (unint64_t)(63 - v20) >> 6;
  v53 = a4;
  swift_bridgeObjectRetain(a4);
  v52 = a6;
  result = swift_retain();
  v23 = 0;
  v24 = v47;
  while (1)
  {
    v50 = v21;
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v23 << 6);
      v28 = v23;
      v29 = v51;
      goto LABEL_23;
    }
    v28 = v23 + 1;
    v29 = v51;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v28 >= v44)
      goto LABEL_33;
    v30 = *(_QWORD *)(v45 + 8 * v28);
    if (!v30)
      break;
LABEL_22:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v28 << 6);
LABEL_23:
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v29, *(_QWORD *)(v53 + 48) + *(_QWORD *)(v10 + 72) * v27, v9);
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v32(v29, 0, 1, v9);
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    if (v33(v29, 1, v9) == 1)
    {
      v38 = (uint64_t)v29;
LABEL_34:
      sub_100004048(v38, &qword_1010ED860);
      v32(v43, 1, 1, v9);
LABEL_35:
      sub_10007CC38(v53);
      swift_release();
      return v54;
    }
    v46 = v23;
    v34 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v34(v24, v29, v9);
    if ((v48(v24) & 1) != 0)
    {
      v35 = v43;
      v34(v43, v24, v9);
      v32(v35, 0, 1, v9);
      if (v33(v35, 1, v9) == 1)
        goto LABEL_35;
      v36 = v40;
      v34(v40, v35, v9);
      v37 = v49;
      v41(&v54, v36);
      v49 = v37;
      if (v37)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v36, v9);
        sub_10007CC38(v53);
        return swift_release();
      }
      v25 = v36;
    }
    else
    {
      v25 = v24;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v25, v9);
    v23 = v28;
  }
  v31 = v23 + 2;
  if (v23 + 2 >= v44)
    goto LABEL_33;
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
    goto LABEL_21;
  v31 = v23 + 3;
  if (v23 + 3 >= v44)
    goto LABEL_33;
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
    goto LABEL_21;
  v31 = v23 + 4;
  if (v23 + 4 >= v44)
    goto LABEL_33;
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
    goto LABEL_21;
  v31 = v23 + 5;
  if (v23 + 5 >= v44)
    goto LABEL_33;
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
    goto LABEL_21;
  v31 = v23 + 6;
  if (v23 + 6 >= v44)
  {
LABEL_33:
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v38 = (uint64_t)v51;
    v32(v51, 1, 1, v9);
    v50 = 0;
    goto LABEL_34;
  }
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
  {
LABEL_21:
    v28 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v28 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v28 >= v44)
      goto LABEL_33;
    v30 = *(_QWORD *)(v45 + 8 * v28);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_100307A98(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = (unint64_t)_swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(a1 + 56);
  v33 = a1 + 56;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v34 = (unint64_t)(v12 + 63) >> 6;
  v15 = swift_bridgeObjectRetain(a1);
  v16 = 0;
  v31 = a2;
  v32 = a1;
  if (v14)
    goto LABEL_6;
LABEL_7:
  v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    if (v19 >= v34)
      goto LABEL_30;
    v20 = *(_QWORD *)(v33 + 8 * v19);
    ++v16;
    if (v20)
      goto LABEL_22;
    v16 = v19 + 1;
    if (v19 + 1 >= v34)
      goto LABEL_30;
    v20 = *(_QWORD *)(v33 + 8 * v16);
    if (v20)
      goto LABEL_22;
    v16 = v19 + 2;
    if (v19 + 2 >= v34)
      goto LABEL_30;
    v20 = *(_QWORD *)(v33 + 8 * v16);
    if (v20)
      goto LABEL_22;
    v16 = v19 + 3;
    if (v19 + 3 >= v34)
      goto LABEL_30;
    v20 = *(_QWORD *)(v33 + 8 * v16);
    if (v20)
      goto LABEL_22;
    v21 = v19 + 4;
    if (v21 >= v34)
    {
LABEL_30:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v10, 1, 1, v4, v15);
LABEL_31:
      swift_release();
      return;
    }
    v20 = *(_QWORD *)(v33 + 8 * v21);
    if (v20)
    {
      v16 = v21;
LABEL_22:
      v14 = (v20 - 1) & v20;
      for (i = __clz(__rbit64(v20)) + (v16 << 6); ; i = v17 | (v16 << 6))
      {
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v10, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * i, v4, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
        v22 = *a2;
        if (*(_QWORD *)(*a2 + 16) && (v23 = sub_100003FB0((uint64_t)v7), (v24 & 1) != 0))
        {
          v25 = *(id *)(*(_QWORD *)(v22 + 56) + 8 * v23);
          v26 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          v28 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v27 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v28 >= v27 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v25);
          specialized Array._endMutation()(v29);
          a2 = v31;
          a1 = v32;
          if (!v14)
            goto LABEL_7;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          if (!v14)
            goto LABEL_7;
        }
LABEL_6:
        v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
      }
      goto LABEL_31;
    }
    while (1)
    {
      v16 = v21 + 1;
      if (__OFADD__(v21, 1))
        break;
      if (v16 >= v34)
        goto LABEL_30;
      v20 = *(_QWORD *)(v33 + 8 * v16);
      ++v21;
      if (v20)
        goto LABEL_22;
    }
  }
  __break(1u);
}

_QWORD *sub_100307DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  _QWORD *v17;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v17 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v17;
    v9 = (_QWORD *)(a1 + 32);
    do
    {
      v11 = v9[3];
      v10 = v9[4];
      sub_10001AA44(v9, v11);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      v17 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009A578(0, v8[2] + 1, 1);
        v8 = v17;
      }
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009A578(v13 > 1, v14 + 1, 1);
        v8 = v17;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v17 = v8;
      v9 += 5;
      --v7;
    }
    while (v7);
  }
  return v8;
}

_QWORD *sub_100307F54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v15 = v1;
    v17 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v17;
    v9 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v16 = *(_QWORD *)(v9 + 72);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v11(v6, v10, v3);
      v17 = v8;
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_10009A578(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, v6, v3);
      v10 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1003080BC(void *a1)
{
  return sub_1003080E0(a1, (uint64_t *)&unk_1010F7B30, (uint64_t)sub_10001D940, &qword_1010F7B20, &qword_1010F7B28);
}

uint64_t sub_1003080E0(void *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v5;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v11 = objc_msgSend(a1, "invalidationHandler");
  if (v11)
  {
    _Block_release(v11);
    __chkstk_darwin(v12);
    v30[2] = a1;
    v30[3] = v5;
    v13 = sub_10001A9A8(a2);
    OS_dispatch_queue.sync<A>(execute:)(a3, v30, v13);
    return v33;
  }
  else
  {
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B8010);
    swift_retain_n(v5, 2);
    v16 = a1;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      v21 = swift_slowAlloc(32, -1);
      v31 = v21;
      *(_DWORD *)v19 = 136446466;
      v32 = v5;
      v34 = 0xE100000000000000;
      v35 = v21;
      v22 = sub_10001A9A8(a4);
      v23 = sub_1000193A4(a5, a4, aQ_54);
      v24._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v22, v23);
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 8250;
      v25._object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      v26._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v22, v23);
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 62;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      swift_release(v5);
      v33 = sub_100016940(60, 0xE100000000000000, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 4, v19 + 12);
      swift_release(v5);
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2112;
      v33 = (uint64_t)v16;
      v28 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 14, v19 + 22);
      *v20 = v16;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s: Not adding invalidated connection: %@", (uint8_t *)v19, 0x16u);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v20, 1, v29);
      swift_slowDealloc(v20, -1, -1);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_release_n(v5, 2);
    }
    return 0;
  }
}

uint64_t sub_10030842C(void *a1)
{
  return sub_1003080E0(a1, (uint64_t *)&unk_1010F78B0, (uint64_t)sub_10001D908, &qword_1010F78A0, &qword_1010F78A8);
}

uint64_t sub_100308450(void *a1)
{
  return sub_1003080E0(a1, (uint64_t *)&unk_1010F7910, (uint64_t)sub_10001D924, &qword_1010F7900, &qword_1010F7908);
}

uint64_t sub_100308474(void *a1)
{
  return sub_1003080E0(a1, &qword_1010F7B08, (uint64_t)sub_100336C38, (uint64_t *)&unk_1011106E0, &qword_1010F7B00);
}

uint64_t sub_100308498(void *a1)
{
  return sub_1003080E0(a1, &qword_1010F78D8, (uint64_t)sub_100330D38, &qword_1010F78C8, &qword_1010F78D0);
}

uint64_t sub_1003084BC(void *a1)
{
  return sub_1003080E0(a1, &qword_1010F7898, (uint64_t)sub_100330C2C, &qword_1010F7888, &qword_1010F7890);
}

void sub_1003084E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 16);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1010EA470 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA470, sub_100C6BFB4);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B8010);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "invalidate", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

}

unint64_t sub_100308638()
{
  unint64_t result;

  result = qword_1010F76C0;
  if (!qword_1010F76C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BeaconManagerCommandError, &type metadata for BeaconManagerCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F76C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconManagerCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003086C8 + 4 * byte_100E36DA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003086FC + 4 * byte_100E36DA0[v4]))();
}

uint64_t sub_1003086FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100308704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10030870CLL);
  return result;
}

uint64_t sub_100308718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100308720);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100308724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030872C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerCommandError()
{
  return &type metadata for BeaconManagerCommandError;
}

uint64_t sub_100308748(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B6D08, 0x61636F4C6576696CLL, 0xED0000736E6F6974);
}

uint64_t sub_100308774()
{
  uint64_t result;

  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100ED0B40);
  qword_1011B6D20 = result;
  return result;
}

uint64_t sub_1003087EC(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B6D28, 0x6F4C74736574616CLL, 0xEF736E6F69746163);
}

uint64_t sub_100308818(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_1000234D8(v7, a2);
  sub_10001A9E8(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, a3, a4);
}

_QWORD *sub_10030888C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t (*v25)();
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  void *v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, __n128);
  char *v51;
  NSObject *v52;
  char *v53;
  uint64_t v54;
  __int128 aBlock;
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t (*v58)();
  uint64_t v59;
  __int128 v60[2];
  _QWORD v61[5];
  _QWORD *v62;

  v47 = a1;
  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v51 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v53 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  static DispatchQoS.unspecified.getter(v16);
  *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v18, v19, v6, v17);
  v52 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x8000000100ED0F80, v11, v8, v15, 0);
  v62 = _swiftEmptyArrayStorage;
  v20 = *(_QWORD *)(v47 + 16);
  if (v20)
  {
    v21 = v47 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v49 = *(_QWORD *)(v2 + 72);
    v50 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16);
    v22 = swift_bridgeObjectRetain(v47);
    v23 = 0;
    isEscapingClosureAtFileLocation = 0;
    v25 = sub_100335FF8;
    v26 = v2;
    v27 = (uint64_t)v51;
    while (1)
    {
      v54 = v20;
      v28 = v53;
      v50(v53, v21, v1, v22);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
      v29(v28, 0, 1, v1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v28, 1, v1) == 1)
      {

        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v27, v28, v1);
      sub_10080B648(v27, (uint64_t)&aBlock);
      if (!v57)
        break;
      v48 = v29;
      sub_10000F9FC(&aBlock, (uint64_t)v61);
      sub_100030784((uint64_t)v61, (uint64_t)v60);
      v30 = swift_allocObject(&unk_10106C6C8, 64, 7);
      *(_QWORD *)(v30 + 16) = &v62;
      sub_10000F9FC(v60, v30 + 24);
      sub_10001D8A8(v23, isEscapingClosureAtFileLocation);
      v31 = v25;
      v32 = swift_allocObject(&unk_10106C6F0, 32, 7);
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = v30;
      v58 = sub_10005CBA4;
      v59 = v32;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v56 = sub_10001D8B8;
      v57 = &unk_10106C708;
      v33 = _Block_copy(&aBlock);
      v23 = v59;
      swift_retain();
      swift_release();
      dispatch_sync(v52, v33);
      _Block_release(v33);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v1);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v32, "", 150, 60, 30, 1);
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
        goto LABEL_15;
      }
      isEscapingClosureAtFileLocation = v30;
      v21 += v49;
      v23 = (uint64_t)v31;
      v20 = v54 - 1;
      v25 = v31;
      if (v54 == 1)
      {
        v48(v53, 1, 1, v1);
        goto LABEL_9;
      }
    }
    v27 = v1;
    v54 = v26;
    swift_bridgeObjectRelease();
    v35 = sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
    v26 = static os_log_type_t.error.getter(v35);
    if (qword_1010EA248 == -1)
      goto LABEL_12;
LABEL_15:
    swift_once(&qword_1010EA248, sub_100B5D8FC);
LABEL_12:
    v36 = qword_1011B7D28;
    v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v38 = swift_allocObject(v37, 72, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
    v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = v51;
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v27, v39);
    v43 = v42;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    *(_QWORD *)(v38 + 64) = sub_10001AA00();
    *(_QWORD *)(v38 + 32) = v41;
    *(_QWORD *)(v38 + 40) = v43;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v36, "Unable to obtain beaconRecord for %@", 36, 2, v38);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v40, v27);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    swift_bridgeObjectRetain(v47);
    v25 = 0;
    isEscapingClosureAtFileLocation = 0;
    v34(v53, 1, 1, v1);
LABEL_9:

    swift_bridgeObjectRelease();
    v23 = (uint64_t)v25;
  }
LABEL_13:
  v44 = v62;
  sub_10001D8A8(v23, isEscapingClosureAtFileLocation);
  return v44;
}

uint64_t sub_100308EFC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  __int128 v8[2];

  sub_100030784(a2, (uint64_t)v8);
  v3 = (_QWORD *)*a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_10001BC00(0, v3[2] + 1, 1, v3);
    *a1 = v3;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    v3 = sub_10001BC00((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    *a1 = v3;
  }
  v3[2] = v6 + 1;
  return sub_10000F9FC(v8, (uint64_t)&v3[5 * v6 + 4]);
}

uint64_t sub_100308FBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t My;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  BOOL v70;
  _BOOL4 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  int v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v119;
  int v120;
  _BYTE *v121;
  int v122;
  _BYTE v123[4];
  _BOOL4 v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  _QWORD v134[3];
  uint64_t v135;
  uint64_t v136;
  _QWORD v137[6];
  _BYTE *v138;

  v2 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v2);
  v4 = &v123[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v6 = __chkstk_darwin(v5);
  v126 = &v123[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v10 = &v123[-v9];
  v11 = __chkstk_darwin(v8);
  v125 = &v123[-v12];
  v13 = __chkstk_darwin(v11);
  v127 = &v123[-v14];
  v15 = __chkstk_darwin(v13);
  v17 = &v123[-v16];
  v18 = __chkstk_darwin(v15);
  v128 = &v123[-v19];
  __chkstk_darwin(v18);
  v21 = &v123[-v20];
  v22 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v22 - 8);
  v131 = v22;
  __chkstk_darwin(v22);
  v129 = &v123[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v24);
  v26 = &v123[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v132 = (_BYTE *)a1;
  sub_100030784(a1, (uint64_t)v137);
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v26, v137, v27, v24, 0))
  {
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B6D28);
    v29 = sub_100030784((uint64_t)v132, (uint64_t)v134);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v132 = (_BYTE *)swift_slowAlloc(32, -1);
      v138 = v132;
      *(_DWORD *)v32 = 141558275;
      v133 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2081;
      v128 = (_BYTE *)(v32 + 14);
      v34 = v135;
      v33 = v136;
      sub_10001AA44(v134, v135);
      v35 = v129;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v33 + 8) + 8) + 32))(v34);
      v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = v131;
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v131, v36);
      v40 = v39;
      (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v35, v37);
      v133 = sub_100016940(v38, v40, (uint64_t *)&v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v128, v32 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Allowed to locate owned beacon %{private,mask.hash}s.", (uint8_t *)v32, 0x16u);
      v41 = (uint64_t)v132;
      swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
    }

    sub_1000126B0((uint64_t)v26, type metadata accessor for OwnedBeaconRecord);
    v49 = 1;
    goto LABEL_45;
  }
  if (swift_dynamicCast(v21, v137, v27, v5, 0))
  {
    v42 = v128;
    sub_1000126EC((uint64_t)v21, (uint64_t)v128, type metadata accessor for SharedBeaconRecord);
    My = type metadata accessor for Feature.FindMy(0);
    v135 = My;
    v136 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v44 = sub_100018F08(v134);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v44, enum case for Feature.FindMy.itemSharing(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)(v134);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
    if ((My & 1) == 0)
    {
      v52 = v42[v5[13]];
      sub_10005972C((uint64_t)v42, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
      v48 = (uint64_t)v132;
      if (v52 == 1)
      {
        v53 = *(_QWORD *)&v10[v5[11]];
        v54 = v126;
        sub_10005972C((uint64_t)v10, (uint64_t)v126, type metadata accessor for SharedBeaconRecord);
        if (v53 == -1)
        {
          v119 = *(_QWORD *)&v54[v5[12]];
          sub_1000126B0((uint64_t)v54, type metadata accessor for SharedBeaconRecord);
          sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
          if (v119 != -1)
            goto LABEL_32;
LABEL_39:
          if (qword_1010E9B58 != -1)
            swift_once(&qword_1010E9B58, sub_1003087EC);
          v104 = type metadata accessor for Logger(0);
          sub_10001A9E8(v104, (uint64_t)qword_1011B6D28);
          v105 = sub_100030784(v48, (uint64_t)v134);
          v106 = Logger.logObject.getter(v105);
          v107 = static os_log_type_t.default.getter(v106);
          if (os_log_type_enabled(v106, v107))
          {
            v108 = swift_slowAlloc(22, -1);
            v109 = (_BYTE *)swift_slowAlloc(32, -1);
            v138 = v109;
            *(_DWORD *)v108 = 141558275;
            v133 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v108 + 4, v108 + 12);
            *(_WORD *)(v108 + 12) = 2081;
            v132 = (_BYTE *)(v108 + 14);
            v111 = v135;
            v110 = v136;
            sub_10001AA44(v134, v135);
            v112 = v129;
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v110 + 8) + 8) + 32))(v111);
            v113 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v114 = v131;
            v115 = dispatch thunk of CustomStringConvertible.description.getter(v131, v113);
            v117 = v116;
            (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v112, v114);
            v133 = sub_100016940(v115, v117, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v132, v108 + 22);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
            _os_log_impl((void *)&_mh_execute_header, v106, v107, "Allowed to locate shared self-beacon %{private,mask.hash}s.", (uint8_t *)v108, 0x16u);
            v49 = 1;
            swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v109, -1, -1);
            swift_slowDealloc(v108, -1, -1);

            sub_1000126B0((uint64_t)v128, type metadata accessor for SharedBeaconRecord);
            goto LABEL_45;
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
          v50 = type metadata accessor for SharedBeaconRecord;
          v51 = (uint64_t)v42;
LABEL_44:
          sub_1000126B0(v51, v50);
          v49 = 1;
          goto LABEL_45;
        }
        sub_1000126B0((uint64_t)v54, type metadata accessor for SharedBeaconRecord);
      }
      sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
LABEL_32:
      if (qword_1010E9B58 != -1)
        swift_once(&qword_1010E9B58, sub_1003087EC);
      v89 = type metadata accessor for Logger(0);
      sub_10001A9E8(v89, (uint64_t)qword_1011B6D28);
      v90 = sub_100030784(v48, (uint64_t)v134);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter(v91);
      if (os_log_type_enabled(v91, v92))
      {
        v93 = swift_slowAlloc(22, -1);
        v94 = (_BYTE *)swift_slowAlloc(32, -1);
        v138 = v94;
        *(_DWORD *)v93 = 141558275;
        v133 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v93 + 4, v93 + 12);
        *(_WORD *)(v93 + 12) = 2081;
        v132 = (_BYTE *)(v93 + 14);
        v96 = v135;
        v95 = v136;
        sub_10001AA44(v134, v135);
        v97 = v129;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v95 + 8) + 8) + 32))(v96);
        v98 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v99 = v131;
        v100 = dispatch thunk of CustomStringConvertible.description.getter(v131, v98);
        v102 = v101;
        (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v97, v99);
        v133 = sub_100016940(v100, v102, (uint64_t *)&v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v132, v93 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Not locating shared beacon %{private,mask.hash}s.", (uint8_t *)v93, 0x16u);
        swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);

        v103 = v128;
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
        v103 = v42;
      }
      sub_1000126B0((uint64_t)v103, type metadata accessor for SharedBeaconRecord);
      v49 = 0;
      goto LABEL_45;
    }
    v45 = v42[v5[16]];
    v46 = *(_QWORD *)&v42[v5[11]];
    sub_10005972C((uint64_t)v42, (uint64_t)v17, type metadata accessor for SharedBeaconRecord);
    if (v46 == -1)
    {
      v69 = *(_QWORD *)&v17[v5[12]];
      sub_1000126B0((uint64_t)v17, type metadata accessor for SharedBeaconRecord);
      v47 = v127;
      sub_10005972C((uint64_t)v42, (uint64_t)v127, type metadata accessor for SharedBeaconRecord);
      v70 = v69 == -1;
      v48 = (uint64_t)v132;
      if (v70)
      {
        v120 = v47[v5[16]];
        v121 = v125;
        sub_10005972C((uint64_t)v47, (uint64_t)v125, type metadata accessor for SharedBeaconRecord);
        v71 = v120 == 4 || v121[v5[16]] == 1;
        sub_1000126B0((uint64_t)v121, type metadata accessor for SharedBeaconRecord);
        sub_1000126B0((uint64_t)v47, type metadata accessor for SharedBeaconRecord);
        v122 = v42[v5[13]];
        v72 = v122 & v71;
        if (v122 != 1)
          goto LABEL_28;
        goto LABEL_26;
      }
    }
    else
    {
      sub_1000126B0((uint64_t)v17, type metadata accessor for SharedBeaconRecord);
      v47 = v127;
      sub_10005972C((uint64_t)v42, (uint64_t)v127, type metadata accessor for SharedBeaconRecord);
      v48 = (uint64_t)v132;
    }
    sub_1000126B0((uint64_t)v47, type metadata accessor for SharedBeaconRecord);
    v71 = 0;
    v72 = 0;
    if (v42[v5[13]] != 1)
      goto LABEL_28;
LABEL_26:
    if (v45 == 2)
      v72 = 1;
LABEL_28:
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v73 = type metadata accessor for Logger(0);
    sub_10001A9E8(v73, (uint64_t)qword_1011B6D28);
    v74 = sub_100030784(v48, (uint64_t)v134);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      LODWORD(v126) = v45 == 2;
      v77 = swift_slowAlloc(40, -1);
      v127 = (_BYTE *)swift_slowAlloc(32, -1);
      v138 = v127;
      *(_DWORD *)v77 = 141559043;
      v133 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v77 + 4, v77 + 12);
      *(_WORD *)(v77 + 12) = 2081;
      v124 = v71;
      LODWORD(v125) = v72;
      v79 = v135;
      v78 = v136;
      sub_10001AA44(v134, v135);
      v80 = v129;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v78 + 8) + 8) + 32))(v79);
      v81 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v82 = v131;
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v131, v81);
      v85 = v84;
      v86 = v80;
      v48 = (uint64_t)v132;
      (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v86, v82);
      v133 = sub_100016940(v83, v85, (uint64_t *)&v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v77 + 14, v77 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
      *(_WORD *)(v77 + 22) = 1024;
      LODWORD(v133) = (_DWORD)v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 4, v77 + 24, v77 + 28);
      *(_WORD *)(v77 + 28) = 1024;
      LODWORD(v133) = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 4, v77 + 30, v77 + 34);
      *(_WORD *)(v77 + 34) = 1024;
      v42 = v128;
      v87 = (int)v125;
      LODWORD(v133) = (_DWORD)v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 4, v77 + 36, v77 + 40);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Should locate shared beacon? beacon:%{private,mask.hash}s, isExplicitSharedBeacon: %{BOOL}d, isUTSFAutomaticSelfBeacon: %{BOOL}d, result: %{BOOL}d.", (uint8_t *)v77, 0x28u);
      v88 = v127;
      swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v77, -1, -1);

      if (!v87)
        goto LABEL_32;
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);

      if ((v72 & 1) == 0)
        goto LABEL_32;
    }
    goto LABEL_39;
  }
  if (swift_dynamicCast(v4, v137, v27, v2, 0))
  {
    v50 = type metadata accessor for LocalFindableAccessoryRecord;
    v51 = (uint64_t)v4;
    goto LABEL_44;
  }
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v55 = type metadata accessor for Logger(0);
  sub_10001A9E8(v55, (uint64_t)qword_1011B6D28);
  v56 = sub_100030784((uint64_t)v132, (uint64_t)v134);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.default.getter(v57);
  if (os_log_type_enabled(v57, v58))
  {
    v59 = swift_slowAlloc(22, -1);
    v60 = (_BYTE *)swift_slowAlloc(32, -1);
    v138 = v60;
    *(_DWORD *)v59 = 141558275;
    v133 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v59 + 4, v59 + 12);
    *(_WORD *)(v59 + 12) = 2081;
    v132 = (_BYTE *)(v59 + 14);
    v62 = v135;
    v61 = v136;
    sub_10001AA44(v134, v135);
    v63 = v129;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v61 + 8) + 8) + 32))(v62);
    v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v65 = v131;
    v66 = dispatch thunk of CustomStringConvertible.description.getter(v131, v64);
    v68 = v67;
    (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v63, v65);
    v133 = sub_100016940(v66, v68, (uint64_t *)&v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v132, v59 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unknown beacon type, not locating %{private,mask.hash}s.", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
  }

  v49 = 0;
LABEL_45:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);
  return v49;
}

uint64_t sub_100309F78(uint64_t a1, uint64_t a2, char *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  NSObject *v90;
  os_log_type_t v91;
  BOOL v92;
  uint8_t *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char *v102;
  _QWORD *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint8_t *v117;
  int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unsigned int (**v137)(char *, uint64_t, unint64_t);
  __n128 v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 aBlock;
  uint64_t (*v146)(uint64_t);
  void *v147;
  uint64_t (*v148)();
  _QWORD *v149;
  _QWORD *v150;
  char v151[8];
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;

  v126 = a6;
  v124 = a5;
  v133 = a4;
  v120 = a2;
  v132 = type metadata accessor for DispatchWorkItemFlags(0);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for DispatchQoS(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v121 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v122 = v11;
  v123 = (uint64_t)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138.n128_u64[0] = type metadata accessor for OwnedBeaconGroup(0);
  v137 = *(unsigned int (***)(char *, uint64_t, unint64_t))(v138.n128_u64[0] - 8);
  v15 = __chkstk_darwin(v138.n128_u64[0]);
  v136 = (uint64_t *)((char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v15);
  v135 = (uint64_t)&v116 - v18;
  __chkstk_darwin(v17);
  v134 = (uint64_t)&v116 - v19;
  v20 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v20);
  v22 = (char *)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v142 = v23;
  v143 = v24;
  v25 = __chkstk_darwin(v23);
  v139 = (char *)&v116 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)&v116 - v27;
  if (qword_1010E9B58 != -1)
    goto LABEL_43;
  while (1)
  {
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6D28);
    swift_bridgeObjectRetain_n(a3, 2);
    v141 = v30;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    v34 = v33;
    v35 = os_log_type_enabled(v32, v33);
    v125 = a3;
    if (v35)
    {
      v118 = v34;
      v119 = (_QWORD *)a1;
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v37;
      *(_DWORD *)v36 = 136446210;
      v117 = v36 + 4;
      v38 = sub_100335CC8();
      swift_bridgeObjectRetain(a3);
      v40 = Set.description.getter(v39, &type metadata for LocationSource, v38);
      v41 = a3;
      a3 = v42;
      swift_bridgeObjectRelease();
      v150 = (_QWORD *)sub_100016940(v40, (unint64_t)a3, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v117, v36 + 12);
      v43 = v41;
      a1 = (uint64_t)v119;
      swift_bridgeObjectRelease_n(v43, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v118, "Latest locations requested for sources %{public}s.", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v44 = _swiftEmptyArrayStorage;
    if (*(_QWORD *)(a1 + 16))
      break;
    a1 = *(_QWORD *)(v140 + 280);
    v78 = sub_100017368();
    v22 = (char *)v78;
    v154 = _swiftEmptyArrayStorage;
    v79 = *(_QWORD *)(v78 + 16);
    if (!v79)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      v89 = sub_10081CEB8();
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.default.getter(v90);
      v92 = os_log_type_enabled(v90, v91);
      v77 = v140;
      v136 = v89;
      if (v92)
      {
        v93 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "Latest locations requested default empty array []. Returning all owned beacons.", v93, 2u);
        swift_slowDealloc(v93, -1, -1);
      }

      goto LABEL_39;
    }
    v80 = 0;
    v14 = (char *)(v78 + 32);
    while (v80 < *((_QWORD *)v22 + 2))
    {
      sub_100030784((uint64_t)v14, (uint64_t)&aBlock);
      v81 = (uint64_t)v147;
      v28 = (char *)v148;
      sub_10001AA44(&aBlock, (uint64_t)v147);
      if ((sub_100DC5AF0(v81, (uint64_t)v28) & 1) != 0)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      }
      else
      {
        sub_10000F9FC(&aBlock, (uint64_t)&v150);
        v82 = v154;
        if ((swift_isUniquelyReferenced_nonNull_native(v154) & 1) == 0)
        {
          sub_10009A628(0, v82[2] + 1, 1);
          v82 = v154;
        }
        v28 = (char *)v82[2];
        v83 = v82[3];
        if ((unint64_t)v28 >= v83 >> 1)
          sub_10009A628(v83 > 1, (int64_t)(v28 + 1), 1);
        v84 = v152;
        v85 = v153;
        v86 = sub_10009F5D0((uint64_t)&v150, v152);
        __chkstk_darwin(v86);
        a3 = (char *)&v116 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v88 + 16))(a3);
        sub_1004AA86C((uint64_t)v28, (uint64_t)a3, (uint64_t *)&v154, v84, v85);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
      }
      ++v80;
      v14 += 40;
      if (v79 == v80)
      {
        v44 = v154;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_43:
    swift_once(&qword_1010E9B58, sub_1003087EC);
  }
  v45 = sub_10030888C(a1);
  v44 = v45;
  v46 = &_swiftEmptySetSingleton;
  v154 = &_swiftEmptySetSingleton;
  v47 = v45[2];
  v119 = v45;
  if (!v47)
    goto LABEL_16;
  v48 = v45 + 4;
  swift_bridgeObjectRetain(v45);
  do
  {
    v52 = v48[3];
    v51 = v48[4];
    sub_10001AA44(v48, v52);
    (*(void (**)(uint64_t, uint64_t))(v51 + 192))(v52, v51);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v143 + 48))(v22, 1, v142) == 1)
    {
      v49 = (uint64_t)v22;
      v50 = &qword_1010ED860;
LABEL_9:
      sub_100004048(v49, v50);
      goto LABEL_10;
    }
    (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v28, v22, v142);
    sub_10081EDA8((uint64_t)v28, (uint64_t)v14);
    if (v137[6](v14, 1, v138.n128_u64[0]) == 1)
    {
      (*(void (**)(char *, uint64_t))(v143 + 8))(v28, v142);
      v49 = (uint64_t)v14;
      v50 = (uint64_t *)&unk_1010FF7F0;
      goto LABEL_9;
    }
    v53 = (uint64_t)v14;
    v54 = v28;
    v55 = v14;
    v56 = v134;
    sub_1000126EC(v53, v134, type metadata accessor for OwnedBeaconGroup);
    v57 = v136;
    sub_10005972C(v56, (uint64_t)v136, type metadata accessor for OwnedBeaconGroup);
    v58 = v135;
    sub_100A0EFDC(v135, (uint64_t)v57);
    sub_1000126B0(v58, type metadata accessor for OwnedBeaconGroup);
    v59 = v56;
    v14 = v55;
    v28 = v54;
    sub_1000126B0(v59, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v54, v142);
LABEL_10:
    v48 += 5;
    --v47;
  }
  while (v47);
  v44 = v119;
  swift_bridgeObjectRelease();
  v46 = v154;
LABEL_16:
  swift_bridgeObjectRetain(v46);
  v136 = sub_100508EB8(v60);
  swift_bridgeObjectRelease();
  v61 = v44[2];
  if (v61)
  {
    v62 = (uint64_t)(v44 + 4);
    v63 = swift_bridgeObjectRetain_n(v44, 2);
    v63.n128_u64[0] = 141558275;
    v138 = v63;
    v137 = (unsigned int (**)(char *, uint64_t, unint64_t))((char *)&type metadata for Any + 8);
    v64 = v142;
    v65 = v139;
    do
    {
      sub_100030784(v62, (uint64_t)&aBlock);
      v66 = sub_100030784((uint64_t)&aBlock, (uint64_t)&v150);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.default.getter(v67);
      if (os_log_type_enabled(v67, v68))
      {
        v69 = swift_slowAlloc(22, -1);
        v70 = swift_slowAlloc(32, -1);
        v144 = v70;
        *(_DWORD *)v69 = v138.n128_u32[0];
        *(_QWORD *)(v69 + 4) = 1752392040;
        *(_WORD *)(v69 + 12) = 2081;
        v71 = v152;
        v72 = v153;
        sub_10001AA44(&v150, v152);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v72 + 8) + 8) + 32))(v71);
        v73 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v74 = dispatch thunk of CustomStringConvertible.description.getter(v64, v73);
        v76 = v75;
        (*(void (**)(char *, uint64_t))(v143 + 8))(v65, v64);
        *(_QWORD *)(v69 + 14) = sub_100016940(v74, v76, &v144);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "Latest locations requested for beacon %{private,mask.hash}s.", (uint8_t *)v69, 0x16u);
        swift_arrayDestroy(v70, 1, v137);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v69, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v150);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v62 += 40;
      --v61;
    }
    while (v61);
    v44 = v119;
    swift_bridgeObjectRelease_n(v119, 2);
  }
  swift_bridgeObjectRelease();
  v77 = v140;
LABEL_39:
  v94 = v120;
  v95 = sub_100330084((uint64_t)v44);
  swift_bridgeObjectRelease();
  sub_1007C53E8();
  v96 = v123;
  sub_10000F9B8(v94, v123, (uint64_t *)&unk_1010EA690);
  v97 = *(unsigned __int8 *)(v121 + 80);
  v98 = (v97 + 40) & ~v97;
  v99 = (v122 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
  v100 = (v99 + 15) & 0xFFFFFFFFFFFFFFF8;
  v101 = (_QWORD *)swift_allocObject(&unk_10106C588, v100 + 16, v97 | 7);
  v101[2] = v77;
  v101[3] = v95;
  v102 = v125;
  v101[4] = v125;
  sub_100005CF0(v96, (uint64_t)v101 + v98, (uint64_t *)&unk_1010EA690);
  *(_QWORD *)((char *)v101 + v99) = v136;
  v103 = (_QWORD *)((char *)v101 + v100);
  v104 = v126;
  *v103 = v124;
  v103[1] = v104;
  v148 = sub_100335C54;
  v149 = v101;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v146 = sub_100016FB8;
  v147 = &unk_10106C5A0;
  v105 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(v102);
  swift_retain();
  swift_bridgeObjectRetain(v95);
  v106 = swift_retain();
  v107 = v127;
  static DispatchQoS.unspecified.getter(v106);
  v150 = _swiftEmptyArrayStorage;
  v108 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v109 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v110 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v111 = v130;
  v112 = v109;
  v113 = v132;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v150, v112, v110, v132, v108);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v107, v111, v105);
  _Block_release(v105);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v111, v113);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v107, v129);
  swift_release();
  if ((v133 & 1) != 0)
  {
    v114 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v114);
    *(&v116 - 2) = v77;
    *(&v116 - 1) = (uint64_t)v95;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconManagerService.latestLocationsFromServer", 76, 2, sub_100335CB0, &v116 - 4);
  }
  swift_bridgeObjectRelease();
  return sub_100668048();
}

uint64_t sub_10030AC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];

  v52 = a7;
  v53 = a5;
  v50 = a6;
  v51 = a3;
  v48 = a4;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v47 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v47 + 64);
  __chkstk_darwin(v8);
  v49 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v13 = sub_100C1B008(v57);
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    sub_10030B02C(a2);
  v14 = a2;
  v15 = _swiftEmptyArrayStorage;
  v60[0] = (uint64_t)_swiftEmptyArrayStorage;
  v16 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRetain(v14);
  if (v16)
  {
    v18 = v17;
    v19 = v17 + 32;
    do
    {
      sub_100030784(v19, (uint64_t)&v57);
      v21 = v58;
      v20 = v59;
      sub_10001AA44(&v57, v58);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 112))(v21, v20) & 1) != 0)
      {
        sub_10000F9FC(&v57, (uint64_t)v54);
        v22 = (_QWORD *)v60[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v60[0]) & 1) == 0)
        {
          sub_10009A628(0, v22[2] + 1, 1);
          v22 = (_QWORD *)v60[0];
        }
        v24 = v22[2];
        v23 = v22[3];
        if (v24 >= v23 >> 1)
          sub_10009A628(v23 > 1, v24 + 1, 1);
        v25 = v55;
        v26 = v56;
        v27 = sub_10009F5D0((uint64_t)v54, v55);
        __chkstk_darwin(v27);
        v29 = (char *)&v45 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v30 + 16))(v29);
        sub_1004AA86C(v24, (uint64_t)v29, v60, v25, v26);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v57);
      }
      v19 += 40;
      --v16;
    }
    while (v16);
    v15 = (_QWORD *)v60[0];
  }
  else
  {
    v18 = v17;
  }
  swift_bridgeObjectRelease();
  v31 = type metadata accessor for TaskPriority(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v46 = v12;
  v32(v12, 1, 1, v31);
  v33 = v49;
  sub_10000F9B8(v48, v49, (uint64_t *)&unk_1010EA690);
  v34 = *(unsigned __int8 *)(v47 + 80);
  v35 = (v34 + 48) & ~v34;
  v36 = (v9 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  v39 = (_QWORD *)swift_allocObject(&unk_10106C628, v38 + 16, v34 | 7);
  v39[2] = 0;
  v39[3] = 0;
  v40 = v51;
  v39[4] = v18;
  v39[5] = v40;
  sub_100005CF0(v33, (uint64_t)v39 + v35, (uint64_t *)&unk_1010EA690);
  v41 = v53;
  *(_QWORD *)((char *)v39 + v36) = v53;
  *(_QWORD *)((char *)v39 + v37) = v15;
  v42 = (_QWORD *)((char *)v39 + v38);
  v43 = v52;
  *v42 = v50;
  v42[1] = v43;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v40);
  swift_retain();
  swift_bridgeObjectRetain(v41);
  sub_100626BC4((uint64_t)v46, (uint64_t)&unk_1010F7930, (uint64_t)v39);
  return swift_release();
}

void sub_10030B02C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t My;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44[3];
  ValueMetadata *v45;
  unint64_t v46;

  v2 = v1;
  v4 = type metadata accessor for LocationFetcher(0);
  v40 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v40 + 64);
  v6 = __chkstk_darwin(v4);
  v41 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v42 = (char *)&v38 - v7;
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = objc_msgSend(v8, "bundleIdentifier");

  if (v9)
  {
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v43 = v10;

  }
  else
  {
    v39 = 0;
    v43 = 0;
  }
  v11 = sub_1005CC484();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v12 = sub_100C1B1E8(v44[0]);
  swift_bridgeObjectRelease();
  My = type metadata accessor for Feature.FindMy(0);
  v45 = (ValueMetadata *)My;
  v46 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v14 = sub_100018F08(v44);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v14, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  v15 = isFeatureEnabled(_:)(v44);
  v16 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
  __chkstk_darwin(v16);
  *(&v38 - 2) = a1;
  *(&v38 - 1) = v2;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  OS_dispatch_queue.sync<A>(execute:)(sub_1003302B0, &v38 - 4, v17);
  v18 = v44[0];
  if (*(_QWORD *)(v44[0] + 16))
  {
    v19 = *(_QWORD *)(v2 + 280);
    v45 = &_s13DefaultPolicyVN;
    v46 = sub_100067E14();
    v20 = swift_allocObject(&unk_10106BD18, 97, 7);
    v44[0] = v20;
    *(_QWORD *)(v20 + 16) = v12;
    *(_BYTE *)(v20 + 24) = 1;
    *(_QWORD *)(v20 + 32) = &off_101049C08;
    *(_BYTE *)(v20 + 40) = 0;
    v21 = v43;
    *(_QWORD *)(v20 + 48) = v39;
    *(_QWORD *)(v20 + 56) = v21;
    *(_QWORD *)(v20 + 64) = v11;
    *(_BYTE *)(v20 + 72) = v15 & 1;
    *(_QWORD *)(v20 + 80) = 0;
    *(_QWORD *)(v20 + 88) = 0;
    *(_BYTE *)(v20 + 96) = 1;
    v22 = qword_1010E9CF0;
    swift_retain();
    if (v22 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v23 = qword_1011B7160;
    swift_retain();
    v24 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
    v25 = v42;
    sub_1003F1570(v19, v44, v23, v24, v42);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(a1);
    v27 = sub_10032ED54(v26, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = swift_allocObject(&unk_10106BD40, 32, 7);
    *(_QWORD *)(v28 + 16) = v2;
    *(_QWORD *)(v28 + 24) = v18;
    type metadata accessor for Transaction(0);
    v29 = v41;
    sub_10005972C((uint64_t)v25, v41, type metadata accessor for LocationFetcher);
    v30 = *(unsigned __int8 *)(v40 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (_QWORD *)swift_allocObject(&unk_10106BD68, v31 + v5, v30 | 7);
    v32[2] = sub_100330310;
    v32[3] = v28;
    v32[4] = v27;
    sub_1000126EC(v29, (uint64_t)v32 + v31, type metadata accessor for LocationFetcher);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v27);
    static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24, 2, &unk_1010F7740, v32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_1000126B0((uint64_t)v25, type metadata accessor for LocationFetcher);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B6D28);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "No new beacons to locate on disk. Skipping.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
}

uint64_t sub_10030B524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v8[94] = v26;
  v8[93] = v25;
  v8[92] = a8;
  v8[91] = a7;
  v8[90] = a6;
  v8[89] = a5;
  v8[88] = a4;
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  v8[95] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[96] = v10;
  v8[97] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8[98] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v8[99] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[100] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[101] = swift_task_alloc(v14);
  v8[102] = swift_task_alloc(v14);
  v8[103] = swift_task_alloc(v14);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F7810) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[104] = swift_task_alloc(v15);
  v8[105] = swift_task_alloc(v15);
  v16 = type metadata accessor for BeaconEstimatedLocation(0);
  v8[106] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v8[107] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[108] = swift_task_alloc(v18);
  v8[109] = swift_task_alloc(v18);
  v8[110] = swift_task_alloc(v18);
  v8[111] = swift_task_alloc(v18);
  v8[112] = swift_task_alloc(v18);
  v8[113] = swift_task_alloc(v18);
  v8[114] = swift_task_alloc(v18);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[115] = swift_task_alloc(v19);
  v8[116] = swift_task_alloc(v19);
  v20 = type metadata accessor for UUID(0);
  v8[117] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v8[118] = v21;
  v22 = *(_QWORD *)(v21 + 64);
  v8[119] = v22;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[120] = swift_task_alloc(v23);
  v8[121] = swift_task_alloc(v23);
  v8[122] = swift_task_alloc(v23);
  v8[123] = swift_task_alloc(v23);
  v8[124] = swift_task_alloc(v23);
  v8[125] = swift_task_alloc(v23);
  v8[126] = swift_task_alloc(v23);
  v8[127] = swift_task_alloc(v23);
  return swift_task_switch(sub_10030B768, 0, 0);
}

uint64_t sub_10030B768(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);

  v1[73] = 0;
  UUID.init()(a1);
  v2 = type metadata accessor for AnalyticsEvent(0);
  v1[128] = v2;
  v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v1[129] = v3;
  swift_defaultActor_initialize(v3);
  v4 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v3 + 14) = v4;
  UUID.init()(v4);
  v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v6 = type metadata accessor for DispatchTime(0);
  v1[130] = v6;
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v1[131] = v7;
  v7(v5, 1, 1, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v6);
  *((_QWORD *)v3 + 15) = 0xD00000000000002ELL;
  *((_QWORD *)v3 + 16) = 0x8000000100ED0D60;
  return swift_task_switch(sub_10030B874, v3, 0);
}

uint64_t sub_10030B874(uint64_t a1)
{
  _QWORD *v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[131];
  v3 = v1[130];
  v4 = v1[129];
  v5 = v1[116];
  v6 = v1[115];
  static DispatchTime.now()(a1);
  v2(v5, 0, 1, v3);
  sub_100005CF0(v5, v6, &qword_1010EBE20);
  v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 55, 33, 0);
  sub_100004084(v6, v7, &qword_1010EBE20);
  swift_endAccess(v1 + 55);
  return swift_task_switch(sub_10030B940, 0, 0);
}

uint64_t sub_10030B940()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  *(_QWORD *)(v0 + 576) = 0;
  *(_QWORD *)(v0 + 528) = _swiftEmptyDictionarySingleton;
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 416, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 256, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 280))
  {
    sub_10000F9FC((__int128 *)(v0 + 256), v0 + 176);
    sub_10001AA44((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 1056) = v2;
    *v2 = v0;
    v2[1] = sub_10030BA3C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10030BA3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1056);
  *(_QWORD *)(*(_QWORD *)v1 + 1064) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10030BA98, 0, 0);
}

uint64_t sub_10030BA98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void (*v51)(uint64_t, uint64_t);
  void *v52;
  id v53;
  double v54;
  double v55;
  double v56;
  double v57;
  _QWORD *v58;
  id v59;
  double v60;
  double v61;
  double v62;
  double v63;
  id v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;

  v1 = (_QWORD *)(v0 + 176);
  if (!*(_QWORD *)(v0 + 1064))
  {
    v11 = *(_QWORD *)(v0 + 1016);
    v12 = *(_QWORD *)(v0 + 1008);
    v13 = *(_QWORD *)(v0 + 1000);
    v14 = *(_QWORD *)(v0 + 992);
    v87 = *(_QWORD *)(v0 + 984);
    v88 = *(_QWORD *)(v0 + 976);
    v90 = *(_QWORD *)(v0 + 968);
    v91 = *(_QWORD *)(v0 + 960);
    v15 = *(_QWORD *)(v0 + 944);
    v16 = *(_QWORD *)(v0 + 936);
    v93 = *(_QWORD *)(v0 + 928);
    v95 = *(_QWORD *)(v0 + 920);
    v97 = *(_QWORD *)(v0 + 912);
    v99 = *(_QWORD *)(v0 + 904);
    v101 = *(_QWORD *)(v0 + 896);
    v103 = *(_QWORD *)(v0 + 888);
    v105 = *(_QWORD *)(v0 + 880);
    v107 = *(_QWORD *)(v0 + 872);
    v110 = *(_QWORD *)(v0 + 864);
    v111 = *(_QWORD *)(v0 + 840);
    v113 = *(_QWORD *)(v0 + 832);
    v115 = *(_QWORD *)(v0 + 824);
    v116 = *(_QWORD *)(v0 + 816);
    v118 = *(_QWORD *)(v0 + 808);
    v120 = *(_QWORD *)(v0 + 784);
    v122 = *(_QWORD *)(v0 + 776);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v17 = sub_100033220();
    v18 = swift_allocError(&type metadata for DaemonError, v17, 0, 0);
    *v19 = 0xD000000000000010;
    v19[1] = 0x8000000100EC6470;
    swift_willThrow(v18);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v11, v16);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 704);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = (_QWORD *)v109;
  *(_QWORD *)(v109 + 1072) = v3;
  if (v3)
  {
    v5 = *(_QWORD *)(v109 + 704);
    *(_OWORD *)(v109 + 1080) = 0u;
    *(_OWORD *)(v109 + 1096) = 0u;
    v6 = v5 + 32;
    swift_bridgeObjectRetain(v5);
    sub_100030784(v6, v109 + 296);
    v7 = *(_QWORD *)(v109 + 320);
    v8 = *(_QWORD *)(v109 + 328);
    sub_10001AA44((_QWORD *)(v109 + 296), v7);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 32))(v7);
    v9 = *(_QWORD *)(v109 + 1064);
    v10 = sub_10030C3EC;
    return swift_task_switch(v10, v9, 0);
  }
  v21 = *(_QWORD *)(v109 + 728);
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
LABEL_54:
    v78 = v4 + 72;
    v79 = v4 + 73;
    v80 = v4 + 61;
    v4[164] = 0;
    v4[61] = 0;
    v81 = v4;
    v82 = v4[129];
    v83 = v81[127];
    v84 = v81[92];
    v85 = v81[88];
    v86 = (_QWORD *)swift_task_alloc(64);
    v81[165] = v86;
    v86[2] = v85;
    v86[3] = v84;
    v86[4] = v83;
    v86[5] = v78;
    v86[6] = v79;
    v86[7] = v80;
    v10 = sub_10030F854;
    v9 = v82;
    return swift_task_switch(v10, v9, 0);
  }
  v119 = (_QWORD *)(v109 + 336);
  v121 = (_QWORD *)(v109 + 216);
  v23 = (uint64_t *)(v109 + 528);
  v89 = *(_QWORD *)(v109 + 944);
  v104 = *(_QWORD *)(v109 + 800);
  v24 = *(_QWORD *)(v109 + 768);
  v98 = v21 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v94 = *(_QWORD *)(v109 + 760);
  v96 = *(_QWORD *)(v24 + 72);
  swift_bridgeObjectRetain(v21);
  v25 = 0;
  v92 = v22;
  v100 = (_QWORD *)(v109 + 136);
  v102 = (_QWORD *)(v109 + 56);
  while (1)
  {
    v114 = v25;
    sub_10005972C(v98 + v25 * v96, v4[97], type metadata accessor for OwnedBeaconGroup);
    sub_10036AC6C();
    sub_100307A98(v27, v23);
    v29 = v28;
    swift_bridgeObjectRelease();
    v30 = (unint64_t)v29 >> 62;
    if ((unint64_t)v29 >> 62)
      break;
    v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v29);
    v4 = (_QWORD *)v109;
    if (v31)
      goto LABEL_12;
LABEL_7:
    v26 = v4[97];
    swift_bridgeObjectRelease();
    sub_1000126B0(v26, type metadata accessor for OwnedBeaconGroup);
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    v25 = v114 + 1;
    if (v114 + 1 == v22)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
  }
  if (v29 < 0)
    v77 = v29;
  else
    v77 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v29);
  v4 = (_QWORD *)v109;
  if (!_CocoaArrayWrapper.endIndex.getter(v77))
    goto LABEL_7;
LABEL_12:
  v112 = v29 & 0xC000000000000001;
  if ((v29 & 0xC000000000000001) != 0)
  {
    v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
  }
  else
  {
    if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_57;
    v32 = *(id *)(v29 + 32);
  }
  v123 = v32;
  swift_bridgeObjectRelease();
  if (v30)
  {
    if (v29 < 0)
      v34 = v29;
    else
      v34 = v29 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v29);
    v33 = _CocoaArrayWrapper.endIndex.getter(v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v35 = v4[97];
  v36 = *(_QWORD *)(*(_QWORD *)(v35 + *(int *)(v94 + 40)) + 16);
  if (v36 >= 0x100)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  if (v33 != v36)
  {
    sub_1000126B0(v35, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_8;
  }
  if (!v30)
  {
    v37 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v29);
    v38 = v123;
    if (v37)
      goto LABEL_31;
    goto LABEL_41;
  }
  if (v29 < 0)
    v39 = v29;
  else
    v39 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v29);
  v40 = v123;
  v37 = _CocoaArrayWrapper.endIndex.getter(v39);
  if (!v37)
  {
LABEL_41:
    v69 = v4[125];
    v70 = v4[117];
    v71 = v29;
    v72 = v4[97];
    swift_bridgeObjectRelease_n(v71, 2);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v69, v72 + *(int *)(v94 + 24), v70);
    v73 = v123;
    v74 = *(_QWORD *)(v109 + 528);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v74);
    v124 = v74;
    sub_10010B5A8((uint64_t)v73, v69, isUniquelyReferenced_nonNull_native);
    v4 = (_QWORD *)v109;
    *(_QWORD *)(v109 + 528) = v124;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v69, v70);

    sub_1000126B0(v72, type metadata accessor for OwnedBeaconGroup);
LABEL_46:
    v23 = (uint64_t *)(v109 + 528);
    v22 = v92;
    goto LABEL_9;
  }
LABEL_31:
  v41 = 0;
  v106 = v37;
  v108 = v29;
  while (1)
  {
    v42 = v112
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v29)
        : *(id *)(v29 + 8 * v41 + 32);
    v43 = v42;
    if (__OFADD__(v41, 1))
      break;
    v117 = v41 + 1;
    v44 = v4[103];
    v45 = v4[101];
    v46 = v4[99];
    v4[10] = sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
    v4[11] = &off_1010B9400;
    v4[7] = v123;
    v47 = v123;
    v48 = objc_msgSend(v43, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v49 = v47;
    v50 = objc_msgSend(v47, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v50);

    LOBYTE(v50) = static Date.== infix(_:_:)(v44, v45);
    v51 = *(void (**)(uint64_t, uint64_t))(v104 + 8);
    v51(v45, v46);
    v51(v44, v46);
    sub_100030784((uint64_t)v102, (uint64_t)v121);
    if ((v50 & 1) == 0)
    {
      v52 = v43;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
      sub_100030784((uint64_t)v102, (uint64_t)v119);
      v58 = (_QWORD *)(v109 + 136);
LABEL_43:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
      sub_100030784((uint64_t)v102, (uint64_t)v58);
LABEL_44:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v102);

LABEL_45:
      swift_bridgeObjectRelease();

      v76 = v4[97];
      swift_bridgeObjectRelease();
      sub_1000126B0(v76, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_46;
    }
    v52 = v43;
    v53 = v43;
    objc_msgSend(v53, "longitude");
    v55 = v54;
    objc_msgSend((id)*sub_10001AA44(v121, v4[30]), "longitude");
    v57 = v56;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
    sub_100030784((uint64_t)v102, (uint64_t)v119);
    v58 = (_QWORD *)(v109 + 136);
    if (v55 != v57)
      goto LABEL_43;
    v59 = v53;
    objc_msgSend(v59, "latitude");
    v61 = v60;
    objc_msgSend((id)*sub_10001AA44(v119, v4[45]), "latitude");
    v63 = v62;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
    sub_100030784((uint64_t)v102, (uint64_t)v100);
    if (v61 != v63)
      goto LABEL_44;
    v64 = v59;
    objc_msgSend(v64, "horizontalAccuracy");
    v66 = v65;
    objc_msgSend((id)*sub_10001AA44(v100, v4[20]), "horizontalAccuracy");
    v68 = v67;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v102);

    if (v66 != v68)
      goto LABEL_45;
    ++v41;
    v29 = v108;
    if (v117 == v106)
      goto LABEL_41;
  }
  __break(1u);
LABEL_57:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
}

uint64_t sub_10030C3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 1064);
  sub_100030784(v0 + 296, v0 + 376);
  v2 = swift_allocObject(&unk_10106C650, 64, 7);
  *(_QWORD *)(v0 + 1112) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 376), v2 + 24);
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 1120) = v4;
  v5 = sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
  *v4 = v0;
  v4[1] = sub_10030C4BC;
  return unsafeBlocking<A>(_:)(v0 + 520, sub_100335F28, v2, v5);
}

uint64_t sub_10030C4BC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1120));
  swift_release();
  return swift_task_switch(sub_10030C518, *(_QWORD *)(v1 + 1064), 0);
}

uint64_t sub_10030C518()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = v0[133];
  v2 = v0[126];
  v3 = v0[125];
  v4 = v0[119];
  v5 = v0[118];
  v6 = v0[117];
  v0[141] = v0[65];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[142] = v7;
  v7(v3, v2, v6);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10106C678, v9 + v4, v8 | 7);
  v0[143] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v3, v6);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[144] = v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
  *v12 = v0;
  v12[1] = sub_10030C620;
  return unsafeBlocking<A>(_:)(v0 + 64, sub_100335F38, v10, v13);
}

uint64_t sub_10030C620()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1152));
  swift_release();
  return swift_task_switch(sub_10030C67C, *(_QWORD *)(v1 + 1064), 0);
}

uint64_t sub_10030C67C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 1160) = *(_QWORD *)(v0 + 512);
  return swift_task_switch(sub_10030C698, 0, 0);
}

void sub_10030C698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  void *v96;
  id v97;
  id v98;
  void (*v99)(uint64_t, uint64_t);
  id v100;
  double v101;
  double v102;
  double v103;
  double v104;
  _QWORD *v105;
  id v106;
  double v107;
  double v108;
  double v109;
  double v110;
  void *v111;
  id v112;
  double v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)();
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  _QWORD *v143;
  double v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172[11];

  v1 = *(_QWORD *)(v0 + 1160);
  v2 = *(_QWORD *)(v0 + 712);
  v3 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 504) = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_bridgeObjectRetain(v1);
  v169 = v4;
  if (v4)
  {
    v5 = 0;
    v167 = v0 + 504;
    v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v5 >= *(_QWORD *)(v1 + 16))
      {
        __break(1u);
        goto LABEL_107;
      }
      v7 = *(_QWORD *)(v0 + 856);
      v8 = *(_QWORD *)(v0 + 712);
      v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v10 = *(_QWORD *)(v7 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 1160) + v9 + v10 * v5, *(_QWORD *)(v0 + 912), type metadata accessor for BeaconEstimatedLocation);
      if (!*(_QWORD *)(v8 + 16))
        break;
      v11 = *(_QWORD *)(v0 + 712);
      v12 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 912) + *(int *)(*(_QWORD *)(v0 + 848) + 44));
      Hasher.init(_seed:)(v172);
      Hasher._combine(_:)(v12);
      v13 = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v11 + 32);
      v15 = v13 & ~v14;
      if (((*(_QWORD *)(v11 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v15) & 1) != 0)
      {
        v16 = *(_QWORD *)(v0 + 712);
        v17 = *(_QWORD *)(v16 + 48);
        if (*(unsigned __int8 *)(v17 + v15) == (_DWORD)v12)
          break;
        v18 = ~v14;
        v19 = v16 + 56;
        while (1)
        {
          v15 = (v15 + 1) & v18;
          if (((*(_QWORD *)(v19 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            break;
          if (*(unsigned __int8 *)(v17 + v15) == (_DWORD)v12)
            goto LABEL_12;
        }
      }
      sub_1000126B0(*(_QWORD *)(v0 + 912), type metadata accessor for BeaconEstimatedLocation);
LABEL_4:
      if (++v5 == v169)
      {
        v3 = *(_QWORD **)(v0 + 504);
        goto LABEL_18;
      }
    }
LABEL_12:
    sub_1000126EC(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 904), type metadata accessor for BeaconEstimatedLocation);
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      sub_10009A5D0(0, v6[2] + 1, 1);
    v6 = *(_QWORD **)v167;
    v21 = *(_QWORD *)(*(_QWORD *)v167 + 16);
    v20 = *(_QWORD *)(*(_QWORD *)v167 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_10009A5D0(v20 > 1, v21 + 1, 1);
      v6 = *(_QWORD **)v167;
    }
    v22 = *(_QWORD *)(v0 + 904);
    v6[2] = v21 + 1;
    sub_1000126EC(v22, (uint64_t)v6 + v9 + v21 * v10, type metadata accessor for BeaconEstimatedLocation);
    goto LABEL_4;
  }
LABEL_18:
  v23 = *(_QWORD *)(v0 + 1080);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 496) = v3;
  swift_retain();
  sub_100325330((_QWORD *)(v0 + 496));
  if (v23)
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 712), 2);
    swift_release();
    return;
  }
  v24 = *(_QWORD *)(v0 + 856);
  v25 = *(_QWORD *)(v0 + 848);
  v26 = *(_QWORD *)(v0 + 840);
  swift_release();
  v27 = *(_QWORD *)(v0 + 496);
  *(_QWORD *)(v0 + 1168) = v27;
  sub_100A79444(v27, v26);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v28(v26, 1, v25) != 1)
  {
    v47 = *(_QWORD *)(v0 + 1088);
    v48 = *(_QWORD *)(v0 + 896);
    v49 = *(_QWORD *)(v0 + 848);
    v50 = *(_QWORD *)(v0 + 824);
    v51 = *(_QWORD *)(v0 + 800);
    v52 = *(_QWORD *)(v0 + 792);
    v53 = sub_1000126EC(*(_QWORD *)(v0 + 840), v48, type metadata accessor for BeaconEstimatedLocation);
    Date.init()(v53);
    *(double *)(v0 + 1176) = Date.timeIntervalSince(_:)(v48 + *(int *)(v49 + 40));
    v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    *(_QWORD *)(v0 + 1184) = v54;
    v54(v50, v52);
    *(_QWORD *)(v0 + 1192) = v47 + 1;
    if (!__OFADD__(v47, 1))
    {
      v55 = *(_QWORD *)(v27 + 16);
      if (v55)
      {
        v56 = *(_QWORD *)(v0 + 856);
        v57 = v27 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
        v58 = *(_QWORD *)(v56 + 72);
        swift_retain();
        do
        {
          sub_10030FCB8(v57, *(_QWORD *)(v0 + 1008));
          v57 += v58;
          --v55;
        }
        while (v55);
        swift_release();
      }
      *(_QWORD *)(v0 + 1200) = 0;
      v130 = *(_QWORD *)(v0 + 800);
      v131 = *(_QWORD *)(v0 + 792);
      v132 = *(_QWORD *)(v0 + 784);
      v133 = *(_QWORD *)(v0 + 720);
      *(_QWORD *)(v0 + 552) = 0;
      sub_10000F9B8(v133, v132, (uint64_t *)&unk_1010EA690);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v132, 1, v131) == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 784), (uint64_t *)&unk_1010EA690);
      }
      else
      {
        v134 = *(_QWORD *)(v0 + 816);
        v135 = *(_QWORD *)(v0 + 792);
        v136 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 800) + 32))(v134, *(_QWORD *)(v0 + 784), v135);
        v137 = Date.timeIntervalSinceNow.getter(v136);
        v54(v134, v135);
        if ((~*(_QWORD *)&v137 & 0x7FF0000000000000) == 0)
        {
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }
        if (v137 <= -9.22337204e18)
        {
LABEL_114:
          __break(1u);
          goto LABEL_115;
        }
        if (v137 >= 9.22337204e18)
        {
LABEL_115:
          __break(1u);
          goto LABEL_116;
        }
        *(_QWORD *)(v0 + 552) = (uint64_t)v137;
      }
      v138 = *(_QWORD *)(v0 + 848);
      v139 = *(_QWORD *)(v0 + 832);
      *(_QWORD *)(v0 + 560) = 0;
      sub_1001E6664(v27, v139);
      if (v28(v139, 1, v138) == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 832), (uint64_t *)&unk_1010F7810);
      }
      else
      {
        v140 = *(_QWORD *)(v0 + 888);
        v141 = sub_1000126EC(*(_QWORD *)(v0 + 832), v140, type metadata accessor for BeaconEstimatedLocation);
        v142 = Date.timeIntervalSinceNow.getter(v141);
        sub_1000126B0(v140, type metadata accessor for BeaconEstimatedLocation);
        if ((~*(_QWORD *)&v142 & 0x7FF0000000000000) == 0)
        {
LABEL_116:
          __break(1u);
          goto LABEL_117;
        }
        if (v142 <= -9.22337204e18)
        {
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        if (v142 >= 9.22337204e18)
        {
LABEL_118:
          __break(1u);
          goto LABEL_119;
        }
        *(_QWORD *)(v0 + 560) = (uint64_t)v142;
      }
      v128 = *(_QWORD *)(v0 + 1064);
      v129 = sub_10030D5DC;
      goto LABEL_105;
    }
    __break(1u);
    goto LABEL_111;
  }
  v153 = (_QWORD *)(v0 + 576);
  v29 = *(_QWORD *)(v0 + 840);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100004048(v29, (uint64_t *)&unk_1010F7810);
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
  v31 = *(_QWORD *)(v0 + 1008);
  v32 = *(_QWORD *)(v0 + 992);
  v33 = *(_QWORD *)(v0 + 936);
  v34 = type metadata accessor for Logger(0);
  sub_10001A9E8(v34, (uint64_t)qword_1011B6D28);
  v35 = v30(v32, v31, v33);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  v38 = os_log_type_enabled(v36, v37);
  v39 = *(_QWORD *)(v0 + 992);
  v40 = *(_QWORD *)(v0 + 944);
  v41 = *(_QWORD *)(v0 + 936);
  if (v38)
  {
    v42 = swift_slowAlloc(22, -1);
    v170 = swift_slowAlloc(32, -1);
    v172[0] = v170;
    *(_DWORD *)v42 = 141558275;
    *(_QWORD *)(v0 + 536) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 544, v42 + 4, v42 + 12);
    *(_WORD *)(v42 + 12) = 2081;
    v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v41, v43);
    *(_QWORD *)(v0 + 544) = sub_100016940(v44, v45, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v0 + 552, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease();
    v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(v39, v41);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "No cached latest location found for beacon %{private,mask.hash}s and given filter.", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy(v170, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v170, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    v46 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v46(*(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 936));
  }

  if (__OFADD__(*v153, 1))
  {
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  v152 = (_QWORD *)(v0 + 584);
  v59 = *(void **)(v0 + 1128);
  v60 = *(_QWORD *)(v0 + 712);
  *(_QWORD *)(v0 + 576) = *v153 + 1;
  v61 = *(_QWORD *)(v0 + 320);
  v62 = *(_QWORD *)(v0 + 328);
  sub_10001AA44((_QWORD *)(v0 + 296), v61);
  v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 112))(v61, v62);
  swift_bridgeObjectRelease_n(v60, 2);

  if ((v63 & 1) == 0)
    goto LABEL_35;
  if (__OFADD__(*v152, 1))
    goto LABEL_112;
  ++*v152;
LABEL_35:
  v46(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 936));
  v64 = *(double *)(v0 + 1096);
  v65 = *(_QWORD *)(v0 + 1088);
  v66 = *(_QWORD *)(v0 + 1072);
  v67 = *(_QWORD *)(v0 + 1104) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 296));
  if (v67 != v66)
  {
    v125 = *(_QWORD *)(v0 + 1104) + 1;
    *(_QWORD *)(v0 + 1104) = v125;
    *(double *)(v0 + 1096) = v64;
    *(_QWORD *)(v0 + 1088) = v65;
    *(_QWORD *)(v0 + 1080) = 0;
    sub_100030784(*(_QWORD *)(v0 + 704) + 40 * v125 + 32, v0 + 296);
    v126 = *(_QWORD *)(v0 + 320);
    v127 = *(_QWORD *)(v0 + 328);
    sub_10001AA44((_QWORD *)(v0 + 296), v126);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v127 + 8) + 8) + 32))(v126);
    v128 = *(_QWORD *)(v0 + 1064);
    v129 = sub_10030C3EC;
LABEL_105:
    swift_task_switch(v129, v128, 0);
    return;
  }
  v150 = v65;
  swift_bridgeObjectRelease();
  v68 = *(_QWORD *)(v0 + 728);
  v69 = *(_QWORD *)(v68 + 16);
  v154 = v69;
  if (!v69)
  {
LABEL_99:
    v143 = (_QWORD *)(v0 + 488);
    *(_QWORD *)(v0 + 1312) = 0;
    *(_QWORD *)(v0 + 488) = 0;
    if (v150 <= 0)
    {
LABEL_104:
      v145 = *(_QWORD *)(v0 + 1032);
      v146 = *(_QWORD *)(v0 + 1016);
      v147 = *(_QWORD *)(v0 + 736);
      v148 = *(_QWORD *)(v0 + 704);
      v149 = (_QWORD *)swift_task_alloc(64);
      *(_QWORD *)(v0 + 1320) = v149;
      v149[2] = v148;
      v149[3] = v147;
      v149[4] = v146;
      v149[5] = v153;
      v149[6] = v152;
      v149[7] = v143;
      v129 = sub_10030F854;
      v128 = v145;
      goto LABEL_105;
    }
    v144 = v64 / (double)v150;
    if ((~*(_QWORD *)&v144 & 0x7FF0000000000000) != 0)
    {
      if (v144 > -9.22337204e18)
      {
        if (v144 < 9.22337204e18)
        {
          *v143 = (uint64_t)v144;
          goto LABEL_104;
        }
LABEL_121:
        __break(1u);
        return;
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  v70 = (uint64_t *)(v0 + 528);
  v151 = *(_QWORD *)(v0 + 944);
  v160 = *(_QWORD *)(v0 + 800);
  v161 = (_QWORD *)(v0 + 216);
  v71 = *(_QWORD *)(v0 + 768);
  v155 = *(_QWORD *)(v0 + 760);
  v157 = v68 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
  v158 = (_QWORD *)(v0 + 336);
  v156 = *(_QWORD *)(v71 + 72);
  swift_bridgeObjectRetain(v68);
  v72 = 0;
  v159 = (_QWORD *)(v0 + 56);
  while (1)
  {
    v166 = v72;
    sub_10005972C(v157 + v72 * v156, *(_QWORD *)(v0 + 776), type metadata accessor for OwnedBeaconGroup);
    sub_10036AC6C();
    sub_100307A98(v74, v70);
    v76 = v75;
    swift_bridgeObjectRelease();
    v77 = (unint64_t)v76 >> 62;
    if ((unint64_t)v76 >> 62)
      break;
    v78 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v76);
    if (v78)
      goto LABEL_43;
LABEL_38:
    v73 = *(_QWORD *)(v0 + 776);
    swift_bridgeObjectRelease();
    sub_1000126B0(v73, type metadata accessor for OwnedBeaconGroup);
LABEL_39:
    swift_bridgeObjectRelease();
LABEL_40:
    v72 = v166 + 1;
    if (v166 + 1 == v69)
    {
      swift_bridgeObjectRelease();
      goto LABEL_99;
    }
  }
  if (v76 < 0)
    v124 = v76;
  else
    v124 = v76 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v76);
  if (!_CocoaArrayWrapper.endIndex.getter(v124))
    goto LABEL_38;
LABEL_43:
  v165 = v76 & 0xC000000000000001;
  if ((v76 & 0xC000000000000001) != 0)
  {
    v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v76);
  }
  else
  {
    if (!*(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_108;
    v79 = *(id *)(v76 + 32);
  }
  v80 = v79;
  swift_bridgeObjectRelease();
  if (v77)
  {
    if (v76 < 0)
      v82 = v76;
    else
      v82 = v76 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v76);
    v81 = _CocoaArrayWrapper.endIndex.getter(v82);
    swift_bridgeObjectRelease();
  }
  else
  {
    v81 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v83 = *(_QWORD *)(v0 + 776);
  v84 = *(_QWORD *)(*(_QWORD *)(v83 + *(int *)(v155 + 40)) + 16);
  if (v84 >= 0x100)
    goto LABEL_109;
  if (v81 != v84)
  {
    sub_1000126B0(v83, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_39;
  }
  if (!v77)
  {
    v85 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v76);
    v86 = v80;
    if (v85)
      goto LABEL_62;
    goto LABEL_72;
  }
  if (v76 < 0)
    v87 = v76;
  else
    v87 = v76 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v76);
  v88 = v80;
  v85 = _CocoaArrayWrapper.endIndex.getter(v87);
  if (!v85)
  {
LABEL_72:
    v117 = *(_QWORD *)(v0 + 1000);
    v118 = *(_QWORD *)(v0 + 936);
    v119 = *(_QWORD *)(v0 + 776);
    swift_bridgeObjectRelease_n(v76, 2);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16))(v117, v119 + *(int *)(v155 + 24), v118);
    v120 = v80;
    v121 = *(_QWORD *)(v0 + 528);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v121);
    v172[0] = v121;
    sub_10010B5A8((uint64_t)v120, v117, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v0 + 528) = v172[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v117, v118);

    sub_1000126B0(v119, type metadata accessor for OwnedBeaconGroup);
LABEL_77:
    v70 = (uint64_t *)(v0 + 528);
    v69 = v154;
    goto LABEL_40;
  }
LABEL_62:
  v89 = 0;
  v163 = v80;
  v164 = v76;
  v162 = v85;
  while (1)
  {
    v90 = v165
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v76)
        : *(id *)(v76 + 8 * v89 + 32);
    v91 = v90;
    if (__OFADD__(v89, 1))
      break;
    v168 = v89 + 1;
    v92 = *(_QWORD *)(v0 + 824);
    v93 = *(_QWORD *)(v0 + 808);
    v94 = *(_QWORD *)(v0 + 792);
    *(_QWORD *)(v0 + 80) = sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
    *(_QWORD *)(v0 + 88) = &off_1010B9400;
    *(_QWORD *)(v0 + 56) = v80;
    v95 = v80;
    v96 = v91;
    v97 = objc_msgSend(v91, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v97);

    v171 = v95;
    v98 = objc_msgSend(v95, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v98);

    LOBYTE(v98) = static Date.== infix(_:_:)(v92, v93);
    v99 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
    v99(v93, v94);
    v99(v92, v94);
    sub_100030784((uint64_t)v159, (uint64_t)v161);
    if ((v98 & 1) == 0)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v161);
      v105 = (_QWORD *)(v0 + 336);
      sub_100030784((uint64_t)v159, (uint64_t)v158);
LABEL_74:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
      sub_100030784((uint64_t)v159, v0 + 136);
      v111 = v171;
LABEL_75:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v159);

LABEL_76:
      swift_bridgeObjectRelease();

      v123 = *(_QWORD *)(v0 + 776);
      swift_bridgeObjectRelease();
      sub_1000126B0(v123, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_77;
    }
    v100 = v96;
    objc_msgSend(v100, "longitude");
    v102 = v101;
    objc_msgSend((id)*sub_10001AA44(v161, *(_QWORD *)(v0 + 240)), "longitude");
    v104 = v103;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v161);
    v105 = (_QWORD *)(v0 + 336);
    sub_100030784((uint64_t)v159, (uint64_t)v158);
    if (v102 != v104)
      goto LABEL_74;
    v106 = v100;
    objc_msgSend(v106, "latitude");
    v108 = v107;
    objc_msgSend((id)*sub_10001AA44(v158, *(_QWORD *)(v0 + 360)), "latitude");
    v110 = v109;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v158);
    sub_100030784((uint64_t)v159, v0 + 136);
    v111 = v171;
    if (v108 != v110)
      goto LABEL_75;
    v112 = v106;
    objc_msgSend(v112, "horizontalAccuracy");
    v114 = v113;
    objc_msgSend((id)*sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160)), "horizontalAccuracy");
    v116 = v115;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v159);

    if (v114 != v116)
      goto LABEL_76;
    ++v89;
    v80 = v163;
    v76 = v164;
    if (v168 == v162)
      goto LABEL_72;
  }
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
}

uint64_t sub_10030D5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 1064);
  sub_100030784(v0 + 296, v0 + 96);
  v2 = swift_allocObject(&unk_10106C6A0, 64, 7);
  *(_QWORD *)(v0 + 1208) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 96), v2 + 24);
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 1216) = v4;
  *v4 = v0;
  v4[1] = sub_10030D698;
  return unsafeBlocking<A>(_:)(v0 + 568, sub_100335F8C, v2, &type metadata for Double);
}

uint64_t sub_10030D698()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1216));
  swift_release();
  return swift_task_switch(sub_10030D6F4, *(_QWORD *)(v1 + 1064), 0);
}

uint64_t sub_10030D6F4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 1224) = *(_QWORD *)(v0 + 568);
  return swift_task_switch(sub_10030D710, 0, 0);
}

uint64_t sub_10030D710()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  double v36;
  double v37;
  id v38;
  double v39;
  Class isa;
  id v41;
  id v42;
  double v43;
  double v44;
  double v45;
  double v46;
  id v47;
  double v48;
  double v49;
  id v50;
  Class v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  BOOL v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  Class v94;
  id v95;
  id v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  void *v103;
  id v104;
  id v105;
  Class v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char isUniquelyReferenced_nonNull_native;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t (*v122)();
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t result;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  uint64_t v156;
  id v157;
  id v158;
  void (*v159)(uint64_t, uint64_t);
  id v160;
  double v161;
  double v162;
  double v163;
  double v164;
  _QWORD *v165;
  void *v166;
  id v167;
  double v168;
  double v169;
  double v170;
  double v171;
  id v172;
  double v173;
  double v174;
  double v175;
  double v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  _QWORD *v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  os_log_type_t typeb;
  os_log_type_t type[8];
  os_log_type_t typec[8];
  _QWORD *typea;
  void (*v223)(uint64_t, uint64_t);
  __int128 v224;
  _QWORD *v225;
  void (*v226)(uint64_t, uint64_t);
  void *v227;
  _QWORD *v228;
  void *v229;
  uint64_t v230;
  uint64_t v231[3];

  v1 = (_QWORD *)(v0 + 16);
  v2 = (_QWORD *)(v0 + 296);
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
  v4 = *(_QWORD *)(v0 + 1008);
  v5 = *(_QWORD *)(v0 + 984);
  v6 = *(_QWORD *)(v0 + 936);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 1232) = sub_10001A9E8(v7, (uint64_t)qword_1011B6D28);
  v3(v5, v4, v6);
  v8 = sub_100030784(v0 + 296, v0 + 16);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v230 = v0;
  if (os_log_type_enabled(v9, v10))
  {
    v11 = *(_QWORD *)(v0 + 1224);
    typeb = v10;
    v12 = *(_QWORD *)(v0 + 984);
    v209 = *(_QWORD *)(v0 + 944);
    v13 = *(_QWORD *)(v0 + 936);
    v14 = swift_slowAlloc(42, -1);
    v215 = swift_slowAlloc(32, -1);
    v231[0] = v215;
    *(_DWORD *)v14 = 141558787;
    *(_QWORD *)(v0 + 672) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 672, v0 + 680, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 680) = sub_100016940(v16, v17, v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v209 + 8);
    v18(v12, v13);
    *(_WORD *)(v14 + 22) = 2048;
    *(_QWORD *)(v0 + 688) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v14 + 24, v14 + 32);
    *(_WORD *)(v14 + 32) = 2048;
    v19 = *(_QWORD *)(v0 + 40);
    v20 = *(_QWORD *)(v0 + 48);
    sub_10001AA44(v1, v19);
    v21 = sub_100C62334(v19, v20);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_QWORD *)(v0 + 696) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v14 + 34, v14 + 42);
    _os_log_impl((void *)&_mh_execute_header, v9, typeb, "Applying location filter for beacon %{private,mask.hash}s, transmitPower: %f, beaconType: %lu.", (uint8_t *)v14, 0x2Au);
    swift_arrayDestroy(v215, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v215, -1, -1);
    v22 = v14;
    v2 = (_QWORD *)(v0 + 296);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 984);
    v24 = *(_QWORD *)(v0 + 944);
    v25 = *(_QWORD *)(v0 + 936);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    v18 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v18(v23, v25);
  }

  v199 = (uint64_t *)(v0 + 528);
  *(_QWORD *)(v0 + 1240) = v18;
  v26 = *(double *)(v0 + 1224);
  v27 = sub_1007EE0A0(*(_QWORD *)(v0 + 1168));
  v28 = *(_QWORD *)(v0 + 320);
  v29 = *(_QWORD *)(v0 + 328);
  sub_10001AA44(v2, v28);
  v30 = sub_100C62334(v28, v29);
  v31 = sub_100C63B1C((uint64_t)v27, v30, v26);
  *(_QWORD *)(v0 + 1248) = v31;
  swift_bridgeObjectRelease();
  if (v31)
  {
    v207 = v0 + 552;
    *(_QWORD *)type = v0 + 560;
    v223 = v18;
    v226 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
    v32 = *(_QWORD *)(v0 + 896);
    v33 = *(_QWORD *)(v0 + 880);
    v34 = *(int **)(v0 + 848);
    v35 = *(_QWORD *)(v0 + 824);
    v212 = *(_QWORD *)(v0 + 792);
    v216 = *(_QWORD *)(v0 + 1168);
    sub_10005972C(v32, v33, type metadata accessor for BeaconEstimatedLocation);
    v36 = *(double *)(v33 + v34[7]);
    v37 = *(double *)(v33 + v34[8]);
    v38 = objc_allocWithZone((Class)CLLocation);
    v39 = *(double *)(v33 + v34[9]);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v41 = objc_msgSend(v38, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", isa, v36, v37, -1.0, v39, -1.0);

    sub_1000126B0(v33, type metadata accessor for BeaconEstimatedLocation);
    v42 = v31;
    objc_msgSend(v42, "coordinate");
    v44 = v43;
    objc_msgSend(v42, "coordinate");
    v46 = v45;
    v47 = objc_allocWithZone((Class)CLLocation);
    objc_msgSend(v42, "horizontalAccuracy");
    v49 = v48;
    v50 = objc_msgSend(v42, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v50);

    v51 = Date._bridgeToObjectiveC()().super.isa;
    v226(v35, v212);
    v52 = objc_msgSend(v47, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", v51, v44, v46, -1.0, v49, -1.0);

    objc_msgSend(v41, "distanceFromLocation:", v52);
    v54 = v53;

    v55 = *(double *)(v32 + v34[9]);
    v227 = v42;
    objc_msgSend(v42, "horizontalAccuracy");
    v57 = v56;
    v58 = *(_QWORD *)(v216 + 16);
    if (v58)
    {
      v59 = *(_QWORD *)(v230 + 872);
      v60 = *(_QWORD *)(v230 + 856);
      v61 = *(int *)(*(_QWORD *)(v230 + 848) + 44);
      v62 = *(_QWORD *)(v230 + 1168)
          + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
      swift_retain();
      v63 = *(_QWORD *)(v60 + 72);
      v64 = _swiftEmptyArrayStorage;
      do
      {
        v65 = *(_QWORD *)(v230 + 872);
        sub_10005972C(v62, v65, type metadata accessor for BeaconEstimatedLocation);
        v66 = *(_BYTE *)(v59 + v61);
        sub_1000126B0(v65, type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
          v64 = sub_1007C9384(0, v64[2] + 1, 1, v64);
        v68 = v64[2];
        v67 = v64[3];
        if (v68 >= v67 >> 1)
          v64 = sub_1007C9384((_QWORD *)(v67 > 1), v68 + 1, 1, v64);
        v64[2] = v68 + 1;
        *((_BYTE *)v64 + v68 + 32) = v66;
        v62 += v63;
        --v58;
      }
      while (v58);
      v69 = (_QWORD *)v230;
      swift_release();
    }
    else
    {
      v64 = _swiftEmptyArrayStorage;
      v69 = (_QWORD *)v230;
    }
    v87 = (void (*)(uint64_t, uint64_t, uint64_t))v69[142];
    v88 = v69[126];
    v89 = v69[121];
    v90 = v69[117];
    v210 = v69[112];
    v91 = v69[106];
    v92 = v69[103];
    v213 = v69[99];
    v217 = (void (*)(uint64_t, uint64_t))v69[148];
    sub_1007EE0C4((uint64_t)v64);
    swift_bridgeObjectRelease();
    v93 = objc_allocWithZone((Class)NSSet);
    v94 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v95 = objc_msgSend(v93, "initWithArray:", v94);
    v69[157] = v95;

    v87(v89, v88, v90);
    v96 = objc_msgSend(v227, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

    objc_msgSend(v227, "coordinate");
    v98 = v97;
    objc_msgSend(v227, "coordinate");
    v100 = v99;
    objc_msgSend(v227, "horizontalAccuracy");
    v102 = v101;
    v103 = (void *)sub_100C63E28(*(_BYTE *)(v210 + *(int *)(v91 + 44)));
    v104 = objc_allocWithZone((Class)SPBeaconLocation);
    v105 = v103;
    v106 = Date._bridgeToObjectiveC()().super.isa;
    v107 = objc_msgSend(v104, "initWithTimestamp:latitude:longitude:horizontalAccuracy:source:", v106, v105, v98, v100, v102);

    v217(v92, v213);
    v108 = v69[121];
    v109 = v69[117];
    if (v107)
    {
      v110 = *v199;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v199);
      v231[0] = v110;
      sub_10010B5A8((uint64_t)v107, v108, isUniquelyReferenced_nonNull_native);
      *v199 = v231[0];
      swift_bridgeObjectRelease();
      v223(v108, v109);
    }
    else
    {
      v112 = (void *)sub_100103908(v69[121]);
      v223(v108, v109);

    }
    v113 = *(_QWORD *)(v230 + 1176);
    v114 = *(_QWORD *)(v230 + 1128);
    v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v230 + 1048);
    v116 = *(_QWORD *)(v230 + 1040);
    v117 = *(_QWORD *)(v230 + 1016);
    v118 = *(_QWORD *)(v230 + 896);
    v119 = (char *)swift_allocObject(*(_QWORD *)(v230 + 1024), *(unsigned int *)(*(_QWORD *)(v230 + 1024) + 48), *(unsigned __int16 *)(*(_QWORD *)(v230 + 1024) + 52));
    *(_QWORD *)(v230 + 1264) = v119;
    v224 = *(_OWORD *)(v230 + 1160);
    swift_defaultActor_initialize(v119);
    v120 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v119 + 14) = v120;
    UUID.init()(v120);
    v115(&v119[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime], 1, 1, v116);
    v115(&v119[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v116);
    *((_QWORD *)v119 + 15) = 0xD000000000000030;
    *((_QWORD *)v119 + 16) = 0x8000000100ED0D90;
    v121 = swift_task_alloc(112);
    *(_QWORD *)(v230 + 1272) = v121;
    *(_QWORD *)(v121 + 16) = v117;
    *(_QWORD *)(v121 + 24) = v113;
    *(_QWORD *)(v121 + 32) = v227;
    *(_QWORD *)(v121 + 40) = v118;
    *(_OWORD *)(v121 + 48) = v224;
    *(_QWORD *)(v121 + 64) = v207;
    *(_QWORD *)(v121 + 72) = *(_QWORD *)type;
    *(_QWORD *)(v121 + 80) = v54;
    *(double *)(v121 + 88) = vabdd_f64(v55, v57);
    *(_QWORD *)(v121 + 96) = v95;
    *(_QWORD *)(v121 + 104) = v114;
    v122 = sub_10030E9FC;
    goto LABEL_80;
  }
  v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
  v71 = *(_QWORD *)(v0 + 1008);
  v72 = *(_QWORD *)(v0 + 976);
  v73 = *(_QWORD *)(v0 + 936);
  swift_bridgeObjectRelease();
  swift_release();
  v74 = v70(v72, v71, v73);
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.error.getter(v75);
  v77 = os_log_type_enabled(v75, v76);
  v78 = *(void **)(v0 + 1128);
  v79 = *(_QWORD *)(v0 + 976);
  v80 = *(_QWORD *)(v0 + 936);
  if (v77)
  {
    *(_QWORD *)typec = *(_QWORD *)(v0 + 712);
    v81 = swift_slowAlloc(22, -1);
    v228 = v2;
    v82 = swift_slowAlloc(32, -1);
    v231[0] = v82;
    *(_DWORD *)v81 = 141558275;
    *(_QWORD *)(v0 + 592) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v81 + 4, v81 + 12);
    *(_WORD *)(v81 + 12) = 2081;
    v83 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v84 = dispatch thunk of CustomStringConvertible.description.getter(v80, v83);
    *(_QWORD *)(v0 + 600) = sub_100016940(v84, v85, v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v81 + 14, v81 + 22);
    swift_bridgeObjectRelease();
    v18(v79, v80);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Could not produce filtered location for beacon %{private,mask.hash}s.", (uint8_t *)v81, 0x16u);
    swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
    v86 = v82;
    v2 = v228;
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v81, -1, -1);

    swift_bridgeObjectRelease_n(*(_QWORD *)typec, 2);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 712), 2);
    v18(v79, v80);

  }
  v123 = *(_QWORD *)(v0 + 1008);
  v124 = *(_QWORD *)(v0 + 936);
  sub_1000126B0(*(_QWORD *)(v0 + 896), type metadata accessor for BeaconEstimatedLocation);
  v18(v123, v124);
  v125 = *(_QWORD *)(v0 + 1200);
  v126 = *(_QWORD *)(v0 + 1192);
  v127 = *(double *)(v0 + 1176) + *(double *)(v0 + 1096);
  v128 = *(_QWORD *)(v0 + 1072);
  v129 = *(_QWORD *)(v0 + 1104) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
  v130 = (uint64_t *)(v0 + 528);
  if (v129 != v128)
  {
    v185 = *(_QWORD *)(v0 + 1104) + 1;
    *(_QWORD *)(v0 + 1104) = v185;
    *(double *)(v0 + 1096) = v127;
    *(_QWORD *)(v0 + 1088) = v126;
    *(_QWORD *)(v0 + 1080) = v125;
    sub_100030784(*(_QWORD *)(v0 + 704) + 40 * v185 + 32, (uint64_t)v2);
    v186 = *(_QWORD *)(v0 + 320);
    v187 = *(_QWORD *)(v0 + 328);
    sub_10001AA44(v2, v186);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v187 + 8) + 8) + 32))(v186);
    v188 = *(char **)(v0 + 1064);
    v122 = sub_10030C3EC;
    return swift_task_switch(v122, v188, 0);
  }
  v195 = v126;
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(v0 + 728);
  v202 = *(_QWORD *)(result + 16);
  if (!v202)
  {
LABEL_74:
    v189 = (_QWORD *)(v0 + 488);
    *(_QWORD *)(v0 + 1312) = v125;
    *(_QWORD *)(v0 + 488) = 0;
    if (v195 <= 0)
    {
LABEL_79:
      v119 = *(char **)(v0 + 1032);
      v191 = *(_QWORD *)(v0 + 1016);
      v192 = *(_QWORD *)(v0 + 736);
      v193 = *(_QWORD *)(v0 + 704);
      v194 = (_QWORD *)swift_task_alloc(64);
      *(_QWORD *)(v0 + 1320) = v194;
      v194[2] = v193;
      v194[3] = v192;
      v194[4] = v191;
      v194[5] = v0 + 576;
      v194[6] = v0 + 584;
      v194[7] = v189;
      v122 = sub_10030F854;
LABEL_80:
      v188 = v119;
      return swift_task_switch(v122, v188, 0);
    }
    v190 = v127 / (double)v195;
    if ((~*(_QWORD *)&v190 & 0x7FF0000000000000) != 0)
    {
      if (v190 > -9.22337204e18)
      {
        if (v190 < 9.22337204e18)
        {
          *v189 = (uint64_t)v190;
          goto LABEL_79;
        }
LABEL_87:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_87;
  }
  typea = (_QWORD *)(v0 + 336);
  v225 = (_QWORD *)(v0 + 216);
  v196 = *(_QWORD *)(v0 + 944);
  v205 = *(_QWORD *)(v0 + 800);
  v132 = *(_QWORD *)(v0 + 768);
  v198 = *(_QWORD *)(v0 + 760);
  v200 = *(_QWORD *)(v132 + 72);
  v201 = result + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
  swift_bridgeObjectRetain(result);
  v133 = 0;
  v203 = (_QWORD *)(v0 + 136);
  v204 = (_QWORD *)(v0 + 56);
  while (1)
  {
    v214 = v133;
    sub_10005972C(v201 + v133 * v200, *(_QWORD *)(v0 + 776), type metadata accessor for OwnedBeaconGroup);
    sub_10036AC6C();
    sub_100307A98(v135, v130);
    v137 = v136;
    swift_bridgeObjectRelease();
    v138 = (unint64_t)v137 >> 62;
    if ((unint64_t)v137 >> 62)
      break;
    v139 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v137);
    if (v139)
      goto LABEL_31;
LABEL_26:
    v134 = *(_QWORD *)(v0 + 776);
    swift_bridgeObjectRelease();
    sub_1000126B0(v134, type metadata accessor for OwnedBeaconGroup);
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    v133 = v214 + 1;
    if (v214 + 1 == v202)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_74;
    }
  }
  if (v137 < 0)
    v184 = v137;
  else
    v184 = v137 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v137);
  if (!_CocoaArrayWrapper.endIndex.getter(v184))
    goto LABEL_26;
LABEL_31:
  v211 = v137 & 0xC000000000000001;
  if ((v137 & 0xC000000000000001) != 0)
  {
    v140 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v137);
  }
  else
  {
    if (!*(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_83;
    v140 = *(id *)(v137 + 32);
  }
  v229 = v140;
  swift_bridgeObjectRelease();
  if (v138)
  {
    if (v137 < 0)
      v142 = v137;
    else
      v142 = v137 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v137);
    v141 = _CocoaArrayWrapper.endIndex.getter(v142);
    swift_bridgeObjectRelease();
  }
  else
  {
    v141 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v143 = *(_QWORD *)(v0 + 776);
  v144 = *(_QWORD *)(*(_QWORD *)(v143 + *(int *)(v198 + 40)) + 16);
  if (v144 >= 0x100)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  if (v141 != v144)
  {
    sub_1000126B0(v143, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_27;
  }
  v197 = v125;
  if (!v138)
  {
    v145 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v137);
    v146 = v229;
    if (v145)
      goto LABEL_50;
    goto LABEL_60;
  }
  if (v137 < 0)
    v147 = v137;
  else
    v147 = v137 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v137);
  v148 = v229;
  v145 = _CocoaArrayWrapper.endIndex.getter(v147);
  if (!v145)
  {
LABEL_60:
    v177 = *(_QWORD *)(v0 + 1000);
    v178 = *(_QWORD *)(v0 + 936);
    v179 = *(_QWORD *)(v230 + 776);
    swift_bridgeObjectRelease_n(v137, 2);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 16))(v177, v179 + *(int *)(v198 + 24), v178);
    v180 = v229;
    v181 = *(_QWORD *)(v230 + 528);
    v182 = swift_isUniquelyReferenced_nonNull_native(v181);
    v231[0] = v181;
    sub_10010B5A8((uint64_t)v180, v177, v182);
    *(_QWORD *)(v230 + 528) = v231[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v177, v178);

    v0 = v230;
    sub_1000126B0(v179, type metadata accessor for OwnedBeaconGroup);
LABEL_65:
    v130 = v199;
    v125 = v197;
    goto LABEL_28;
  }
LABEL_50:
  v149 = 0;
  v206 = v145;
  v208 = v137;
  while (1)
  {
    v150 = v211
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v149, v137)
         : *(id *)(v137 + 8 * v149 + 32);
    v151 = v150;
    if (__OFADD__(v149, 1))
      break;
    v218 = v149 + 1;
    v152 = *(_QWORD *)(v0 + 824);
    v153 = *(_QWORD *)(v0 + 808);
    v154 = *(_QWORD *)(v0 + 792);
    *(_QWORD *)(v0 + 80) = sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
    *(_QWORD *)(v0 + 88) = &off_1010B9400;
    *(_QWORD *)(v0 + 56) = v229;
    v155 = v229;
    v156 = v0;
    v157 = objc_msgSend(v151, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v157);

    v158 = objc_msgSend(v155, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v158);

    LOBYTE(v158) = static Date.== infix(_:_:)(v152, v153);
    v159 = *(void (**)(uint64_t, uint64_t))(v205 + 8);
    v159(v153, v154);
    v159(v152, v154);
    sub_100030784((uint64_t)v204, (uint64_t)v225);
    if ((v158 & 1) == 0)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v225);
      sub_100030784((uint64_t)v204, (uint64_t)typea);
      v0 = v156;
      v165 = v203;
      v166 = v151;
LABEL_62:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(typea);
      sub_100030784((uint64_t)v204, (uint64_t)v165);
LABEL_63:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v165);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v204);

LABEL_64:
      swift_bridgeObjectRelease();

      v183 = *(_QWORD *)(v0 + 776);
      swift_bridgeObjectRelease();
      sub_1000126B0(v183, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_65;
    }
    v160 = v151;
    objc_msgSend(v160, "longitude");
    v162 = v161;
    objc_msgSend((id)*sub_10001AA44(v225, *(_QWORD *)(v156 + 240)), "longitude");
    v164 = v163;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v225);
    sub_100030784((uint64_t)v204, (uint64_t)typea);
    v0 = v156;
    v165 = v203;
    v166 = v151;
    if (v162 != v164)
      goto LABEL_62;
    v167 = v160;
    objc_msgSend(v167, "latitude");
    v169 = v168;
    objc_msgSend((id)*sub_10001AA44(typea, *(_QWORD *)(v0 + 360)), "latitude");
    v171 = v170;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(typea);
    sub_100030784((uint64_t)v204, (uint64_t)v203);
    if (v169 != v171)
      goto LABEL_63;
    v172 = v167;
    objc_msgSend(v172, "horizontalAccuracy");
    v174 = v173;
    objc_msgSend((id)*sub_10001AA44(v203, *(_QWORD *)(v0 + 160)), "horizontalAccuracy");
    v176 = v175;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v203);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v204);

    if (v174 != v176)
      goto LABEL_64;
    ++v149;
    v137 = v208;
    if (v218 == v206)
      goto LABEL_60;
  }
  __break(1u);
LABEL_83:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
}

uint64_t sub_10030E9FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = v0[150];
  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_100335F98);
  v0[160] = v1;
  v2 = v0[159];
  if (v1)
  {
    swift_errorRelease(v1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v2);
    v3 = sub_10030FC48;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc(v2);
    v3 = sub_10030EAA8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10030EAA8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v0[161] = v0[160];
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[162] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[163] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10030EB1C;
  return sub_100CD63AC(v0[158]);
}

uint64_t sub_10030EB1C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1304));
  swift_release();
  return swift_task_switch(sub_10030EB7C, 0, 0);
}

uint64_t sub_10030EB7C()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void (*v27)(uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  void (*v71)(uint64_t, uint64_t);
  id v72;
  double v73;
  double v74;
  double v75;
  double v76;
  _QWORD *v77;
  id v78;
  double v79;
  double v80;
  double v81;
  double v82;
  void *v83;
  id v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)();
  _QWORD *v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  os_log_type_t typea;
  _QWORD *type;
  uint64_t v121;
  _QWORD *v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  void *v137;
  uint64_t v138[3];

  v1 = (_QWORD *)(v0 + 296);
  v2 = *(void **)(v0 + 1248);
  v3 = *(_QWORD *)(v0 + 896);
  v4 = *(_QWORD *)(v0 + 864);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1136))(*(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 936));
  sub_10005972C(v3, v4, type metadata accessor for BeaconEstimatedLocation);
  v5 = Logger.logObject.getter(v2);
  v6 = static os_log_type_t.default.getter(v5);
  v136 = v5;
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(void **)(v0 + 1248);
    v109 = *(void (**)(uint64_t, uint64_t))(v0 + 1240);
    v123 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
    v128 = *(void **)(v0 + 1128);
    v130 = *(void **)(v0 + 1256);
    v8 = *(_QWORD *)(v0 + 960);
    v9 = *(_QWORD *)(v0 + 936);
    v112 = *(_QWORD *)(v0 + 864);
    v117 = *(_QWORD *)(v0 + 824);
    v121 = *(_QWORD *)(v0 + 792);
    v132 = *(_QWORD *)(v0 + 712);
    v10 = swift_slowAlloc(82, -1);
    v126 = swift_slowAlloc(96, -1);
    v138[0] = v126;
    *(_DWORD *)v10 = 141559811;
    *(_QWORD *)(v0 + 608) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    typea = v6;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(_QWORD *)(v0 + 616) = sub_100016940(v12, v13, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    v109(v8, v9);
    *(_WORD *)(v10 + 22) = 2160;
    *(_QWORD *)(v0 + 624) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    v14 = v9;
    v1 = (_QWORD *)(v0 + 296);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v14, v11);
    *(_QWORD *)(v0 + 632) = sub_100016940(v15, v16, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v112, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v10 + 42) = 2049;
    objc_msgSend(v7, "coordinate");
    *(_QWORD *)(v0 + 640) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v10 + 44, v10 + 52);

    *(_WORD *)(v10 + 52) = 2049;
    objc_msgSend(v7, "coordinate");
    *(_QWORD *)(v0 + 648) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v10 + 54, v10 + 62);

    *(_WORD *)(v10 + 62) = 2050;
    objc_msgSend(v7, "horizontalAccuracy");
    *(_QWORD *)(v0 + 656) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v10 + 64, v10 + 72);

    *(_WORD *)(v10 + 72) = 2082;
    v20 = objc_msgSend(v7, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v21 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v121, v21);
    v24 = v23;
    v123(v117, v121);
    *(_QWORD *)(v0 + 664) = sub_100016940(v22, v24, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v10 + 74, v10 + 82);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v136, typea, "Filtered cached latest location returned to client for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v10, 0x52u);
    swift_arrayDestroy(v126, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_release();
    swift_bridgeObjectRelease_n(v132, 2);
  }
  else
  {
    v25 = *(void **)(v0 + 1256);
    v26 = *(void **)(v0 + 1248);
    v27 = *(void (**)(uint64_t, uint64_t))(v0 + 1240);
    v28 = *(void **)(v0 + 1128);
    v29 = *(_QWORD *)(v0 + 960);
    v30 = *(_QWORD *)(v0 + 936);
    v31 = *(_QWORD *)(v0 + 864);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 712), 2);

    v27(v29, v30);
    sub_1000126B0(v31, type metadata accessor for BeaconEstimatedLocation);

    swift_release();
  }
  v32 = *(_QWORD *)(v0 + 1008);
  v33 = *(_QWORD *)(v0 + 944);
  v34 = *(_QWORD *)(v0 + 936);
  sub_1000126B0(*(_QWORD *)(v0 + 896), type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  v35 = *(_QWORD *)(v0 + 1288);
  v36 = *(_QWORD *)(v0 + 1192);
  v37 = *(double *)(v0 + 1176) + *(double *)(v0 + 1096);
  v38 = *(_QWORD *)(v0 + 1072);
  v39 = *(_QWORD *)(v0 + 1104) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v39 != v38)
  {
    v97 = *(_QWORD *)(v0 + 1104) + 1;
    *(_QWORD *)(v0 + 1104) = v97;
    *(double *)(v0 + 1096) = v37;
    *(_QWORD *)(v0 + 1088) = v36;
    *(_QWORD *)(v0 + 1080) = v35;
    sub_100030784(*(_QWORD *)(v0 + 704) + 40 * v97 + 32, (uint64_t)v1);
    v98 = *(_QWORD *)(v0 + 320);
    v99 = *(_QWORD *)(v0 + 328);
    sub_10001AA44(v1, v98);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v99 + 8) + 8) + 32))(v98);
    v100 = *(_QWORD *)(v0 + 1064);
    v101 = sub_10030C3EC;
    return swift_task_switch(v101, v100, 0);
  }
  v110 = v36;
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(v0 + 728);
  v41 = *(_QWORD *)(result + 16);
  v113 = v41;
  if (!v41)
  {
LABEL_55:
    v102 = (_QWORD *)(v0 + 488);
    *(_QWORD *)(v0 + 1312) = v35;
    *(_QWORD *)(v0 + 488) = 0;
    if (v110 <= 0)
    {
LABEL_60:
      v104 = *(_QWORD *)(v0 + 1032);
      v105 = *(_QWORD *)(v0 + 1016);
      v106 = *(_QWORD *)(v0 + 736);
      v107 = *(_QWORD *)(v0 + 704);
      v108 = (_QWORD *)swift_task_alloc(64);
      *(_QWORD *)(v0 + 1320) = v108;
      v108[2] = v107;
      v108[3] = v106;
      v108[4] = v105;
      v108[5] = v0 + 576;
      v108[6] = v0 + 584;
      v108[7] = v102;
      v101 = sub_10030F854;
      v100 = v104;
      return swift_task_switch(v101, v100, 0);
    }
    v103 = v37 / (double)v110;
    if ((~*(_QWORD *)&v103 & 0x7FF0000000000000) != 0)
    {
      if (v103 > -9.22337204e18)
      {
        if (v103 < 9.22337204e18)
        {
          *v102 = (uint64_t)v103;
          goto LABEL_60;
        }
LABEL_67:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_67;
  }
  v42 = (uint64_t *)(v0 + 528);
  v111 = *(_QWORD *)(v0 + 944);
  v124 = *(_QWORD *)(v0 + 800);
  v125 = (_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 768);
  v115 = *(_QWORD *)(v0 + 760);
  v118 = result + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  type = (_QWORD *)(v0 + 336);
  v116 = *(_QWORD *)(v43 + 72);
  swift_bridgeObjectRetain(result);
  v44 = 0;
  v122 = (_QWORD *)(v0 + 56);
  while (1)
  {
    v134 = v44;
    sub_10005972C(v118 + v44 * v116, *(_QWORD *)(v0 + 776), type metadata accessor for OwnedBeaconGroup);
    sub_10036AC6C();
    sub_100307A98(v46, v42);
    v48 = v47;
    swift_bridgeObjectRelease();
    v49 = (unint64_t)v48 >> 62;
    if ((unint64_t)v48 >> 62)
      break;
    v50 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v48);
    if (v50)
      goto LABEL_12;
LABEL_7:
    v45 = *(_QWORD *)(v0 + 776);
    swift_bridgeObjectRelease();
    sub_1000126B0(v45, type metadata accessor for OwnedBeaconGroup);
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    v44 = v134 + 1;
    if (v134 + 1 == v41)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_55;
    }
  }
  if (v48 < 0)
    v96 = v48;
  else
    v96 = v48 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v48);
  if (!_CocoaArrayWrapper.endIndex.getter(v96))
    goto LABEL_7;
LABEL_12:
  v133 = v48 & 0xC000000000000001;
  if ((v48 & 0xC000000000000001) != 0)
  {
    v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v48);
  }
  else
  {
    if (!*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_63;
    v51 = *(id *)(v48 + 32);
  }
  v52 = v51;
  swift_bridgeObjectRelease();
  if (v49)
  {
    if (v48 < 0)
      v54 = v48;
    else
      v54 = v48 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v48);
    v53 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease();
  }
  else
  {
    v53 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v55 = *(_QWORD *)(v0 + 776);
  v56 = *(_QWORD *)(*(_QWORD *)(v55 + *(int *)(v115 + 40)) + 16);
  if (v56 >= 0x100)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  if (v53 != v56)
  {
    sub_1000126B0(v55, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_8;
  }
  v114 = v35;
  if (!v49)
  {
    v57 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v48);
    v58 = v52;
    if (v57)
      goto LABEL_31;
    goto LABEL_41;
  }
  if (v48 < 0)
    v59 = v48;
  else
    v59 = v48 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v48);
  v60 = v52;
  v57 = _CocoaArrayWrapper.endIndex.getter(v59);
  if (!v57)
  {
LABEL_41:
    v89 = *(_QWORD *)(v0 + 1000);
    v90 = *(_QWORD *)(v0 + 936);
    v91 = *(_QWORD *)(v0 + 776);
    swift_bridgeObjectRelease_n(v48, 2);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v89, v91 + *(int *)(v115 + 24), v90);
    v92 = v52;
    v93 = *(_QWORD *)(v0 + 528);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v93);
    v138[0] = v93;
    sub_10010B5A8((uint64_t)v92, v89, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v0 + 528) = v138[0];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v89, v90);

    sub_1000126B0(v91, type metadata accessor for OwnedBeaconGroup);
LABEL_46:
    v41 = v113;
    v35 = v114;
    v42 = (uint64_t *)(v0 + 528);
    goto LABEL_9;
  }
LABEL_31:
  v61 = 0;
  v129 = v52;
  v131 = v48;
  v127 = v57;
  while (1)
  {
    v62 = v133
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v48)
        : *(id *)(v48 + 8 * v61 + 32);
    v63 = v62;
    if (__OFADD__(v61, 1))
      break;
    v135 = v61 + 1;
    v64 = *(_QWORD *)(v0 + 824);
    v65 = *(_QWORD *)(v0 + 808);
    v66 = *(_QWORD *)(v0 + 792);
    *(_QWORD *)(v0 + 80) = sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
    *(_QWORD *)(v0 + 88) = &off_1010B9400;
    *(_QWORD *)(v0 + 56) = v52;
    v67 = v52;
    v68 = v63;
    v69 = objc_msgSend(v63, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v69);

    v137 = v67;
    v70 = objc_msgSend(v67, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v70);

    LOBYTE(v70) = static Date.== infix(_:_:)(v64, v65);
    v71 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
    v71(v65, v66);
    v71(v64, v66);
    sub_100030784((uint64_t)v122, (uint64_t)v125);
    if ((v70 & 1) == 0)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v125);
      v77 = (_QWORD *)(v0 + 336);
      sub_100030784((uint64_t)v122, (uint64_t)type);
LABEL_43:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
      sub_100030784((uint64_t)v122, v0 + 136);
      v83 = v137;
LABEL_44:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v122);

LABEL_45:
      swift_bridgeObjectRelease();

      v95 = *(_QWORD *)(v0 + 776);
      swift_bridgeObjectRelease();
      sub_1000126B0(v95, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_46;
    }
    v72 = v68;
    objc_msgSend(v72, "longitude");
    v74 = v73;
    objc_msgSend((id)*sub_10001AA44(v125, *(_QWORD *)(v0 + 240)), "longitude");
    v76 = v75;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v125);
    v77 = (_QWORD *)(v0 + 336);
    sub_100030784((uint64_t)v122, (uint64_t)type);
    if (v74 != v76)
      goto LABEL_43;
    v78 = v72;
    objc_msgSend(v78, "latitude");
    v80 = v79;
    objc_msgSend((id)*sub_10001AA44(type, *(_QWORD *)(v0 + 360)), "latitude");
    v82 = v81;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(type);
    sub_100030784((uint64_t)v122, v0 + 136);
    v83 = v137;
    if (v80 != v82)
      goto LABEL_44;
    v84 = v78;
    objc_msgSend(v84, "horizontalAccuracy");
    v86 = v85;
    objc_msgSend((id)*sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160)), "horizontalAccuracy");
    v88 = v87;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v122);

    if (v86 != v88)
      goto LABEL_45;
    ++v61;
    v52 = v129;
    v48 = v131;
    if (v135 == v127)
      goto LABEL_41;
  }
  __break(1u);
LABEL_63:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
}

uint64_t sub_10030F854()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[164];
  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_100335F78);
  if (v1)
    swift_errorRelease(v1);
  v2 = v0[129];
  swift_task_dealloc(v0[165]);
  return swift_task_switch(sub_10030F8C0, v2, 0);
}

uint64_t sub_10030F8C0(uint64_t a1)
{
  _QWORD *v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[131];
  v3 = v1[130];
  v4 = v1[129];
  v5 = v1[116];
  v6 = v1[115];
  static DispatchTime.now()(a1);
  v2(v5, 0, 1, v3);
  sub_100005CF0(v5, v6, &qword_1010EBE20);
  v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, v1 + 58, 33, 0);
  sub_100004084(v6, v7, &qword_1010EBE20);
  swift_endAccess(v1 + 58);
  return swift_task_switch(sub_10030F98C, 0, 0);
}

uint64_t sub_10030F98C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[166] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[167] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10030F9F8;
  return sub_100CD63AC(v0[129]);
}

uint64_t sub_10030F9F8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1336));
  swift_release();
  return swift_task_switch(sub_10030FA58, 0, 0);
}

uint64_t sub_10030FA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 1064);
  v2 = *(_QWORD *)(v0 + 1032);
  v3 = *(_QWORD *)(v0 + 1016);
  v4 = *(_QWORD *)(v0 + 1008);
  v11 = *(_QWORD *)(v0 + 1000);
  v12 = *(_QWORD *)(v0 + 992);
  v13 = *(_QWORD *)(v0 + 984);
  v14 = *(_QWORD *)(v0 + 976);
  v15 = *(_QWORD *)(v0 + 968);
  v16 = *(_QWORD *)(v0 + 960);
  v5 = *(_QWORD *)(v0 + 944);
  v6 = *(_QWORD *)(v0 + 936);
  v17 = *(_QWORD *)(v0 + 928);
  v18 = *(_QWORD *)(v0 + 920);
  v19 = *(_QWORD *)(v0 + 912);
  v20 = *(_QWORD *)(v0 + 904);
  v21 = *(_QWORD *)(v0 + 896);
  v22 = *(_QWORD *)(v0 + 888);
  v23 = *(_QWORD *)(v0 + 880);
  v24 = *(_QWORD *)(v0 + 872);
  v25 = *(_QWORD *)(v0 + 864);
  v26 = *(_QWORD *)(v0 + 840);
  v27 = *(_QWORD *)(v0 + 832);
  v28 = *(_QWORD *)(v0 + 824);
  v29 = *(_QWORD *)(v0 + 816);
  v30 = *(_QWORD *)(v0 + 808);
  v31 = *(_QWORD *)(v0 + 784);
  v32 = *(_QWORD *)(v0 + 776);
  v7 = *(void (**)(uint64_t))(v0 + 744);
  v8 = *(_QWORD *)(v0 + 528);
  v9 = swift_bridgeObjectRetain(v8);
  v7(v9);
  swift_bridgeObjectRelease(v8);
  swift_release(v1);
  swift_release(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 528));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10030FC48()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v0[161] = 0;
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[162] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[163] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10030EB1C;
  return sub_100CD63AC(v0[158]);
}

void sub_10030FCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v48 = type metadata accessor for BeaconEstimatedLocation(0);
  v5 = __chkstk_darwin(v48);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v51 = (uint64_t)&v43 - v9;
  v10 = __chkstk_darwin(v8);
  v50 = (uint64_t)&v43 - v11;
  v12 = __chkstk_darwin(v10);
  v49 = (uint64_t)&v43 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v43 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v20 = type metadata accessor for Logger(0);
  sub_10001A9E8(v20, (uint64_t)qword_1011B6D28);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a2, v16);
  sub_10005972C(a1, (uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
  sub_10005972C(a1, v49, type metadata accessor for BeaconEstimatedLocation);
  sub_10005972C(a1, v50, type metadata accessor for BeaconEstimatedLocation);
  sub_10005972C(a1, v51, type metadata accessor for BeaconEstimatedLocation);
  v21 = sub_10005972C(a1, (uint64_t)v7, type metadata accessor for BeaconEstimatedLocation);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    v25 = swift_slowAlloc(82, -1);
    v46 = swift_slowAlloc(96, -1);
    v54 = v46;
    *(_DWORD *)v25 = 141559811;
    v52 = 1752392040;
    v45 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2081;
    v47 = v2;
    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = v7;
    v27 = v26;
    v44 = v24;
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v16, v26);
    v52 = sub_100016940(v28, v29, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    *(_WORD *)(v25 + 22) = 2160;
    v52 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 24, v25 + 32);
    *(_WORD *)(v25 + 32) = 2081;
    v30 = (int *)v48;
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v16, v27);
    v52 = sub_100016940(v31, v32, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 34, v25 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 42) = 2049;
    v33 = v49;
    v52 = *(_QWORD *)(v49 + v30[7]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 44, v25 + 52);
    sub_1000126B0(v33, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 52) = 2049;
    v34 = v50;
    v52 = *(_QWORD *)(v50 + v30[8]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 54, v25 + 62);
    sub_1000126B0(v34, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 62) = 2050;
    v35 = v51;
    v52 = *(_QWORD *)(v51 + v30[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 64, v25 + 72);
    sub_1000126B0(v35, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v25 + 72) = 2082;
    v36 = (uint64_t)v43;
    v37 = type metadata accessor for Date(0);
    v38 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
    v52 = sub_100016940(v39, v40, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v25 + 74, v25 + 82);
    swift_bridgeObjectRelease();
    sub_1000126B0(v36, type metadata accessor for BeaconEstimatedLocation);
    v41 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v44, "Filtering the following latest location for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v25, 0x52u);
    v42 = v46;
    swift_arrayDestroy(v46, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0(v49, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0(v50, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0(v51, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconEstimatedLocation);

  }
}

id sub_100310220(double a1, double a2, double a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10, void *a11, void *a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  NSString v24;
  id result;
  id v26;
  double v27;
  uint64_t v28;
  NSString v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  id v40;
  id v41;
  _BOOL8 v42;
  unint64_t v43;
  id v44;
  unsigned int v45;
  id v46;
  char *v47;
  uint64_t v48;
  NSString v49;
  char isUniquelyReferenced_nonNull_native;
  id v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v60 = a6;
  v61 = a7;
  v20 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v20 - 8);
  v56 = v20;
  __chkstk_darwin(v20);
  v54 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v22, &v63);
  *(_OWORD *)(inited + 16) = xmmword_100E36F60;
  *(_QWORD *)(inited + 32) = 0x496E6F6973736573;
  *(_QWORD *)(inited + 40) = 0xE900000000000044;
  UUID.uuidString.getter(inited);
  v24 = String._bridgeToObjectiveC()();
  result = (id)swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v24;
  *(_BYTE *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0x6E6F697461636F6CLL;
  *(_QWORD *)(inited + 72) = 0xEF79636E65636552;
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a1 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a1 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v58 = a12;
  v59 = a11;
  v26 = objc_allocWithZone((Class)NSNumber);
  v57 = a10;
  *(_QWORD *)(inited + 80) = objc_msgSend(v26, "initWithInteger:", (uint64_t)a1);
  *(_BYTE *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0xD000000000000010;
  *(_QWORD *)(inited + 104) = 0x8000000100ED0DD0;
  objc_msgSend(a5, "horizontalAccuracy");
  *(_QWORD *)(inited + 112) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v27);
  *(_BYTE *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "locationSource");
  *(_BYTE *)(inited + 143) = -18;
  v28 = type metadata accessor for BeaconEstimatedLocation(0);
  sub_100CE4DEC(*(_BYTE *)(v60 + *(int *)(v28 + 44)));
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 144) = v29;
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0xD000000000000013;
  *(_QWORD *)(inited + 168) = 0x8000000100ED0DF0;
  *(_QWORD *)(inited + 176) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v61 + 16));
  *(_BYTE *)(inited + 184) = 0;
  *(_QWORD *)(inited + 192) = 0xD000000000000010;
  *(_QWORD *)(inited + 200) = 0x8000000100ED0E10;
  *(_QWORD *)(inited + 208) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(a8 + 16));
  *(_BYTE *)(inited + 216) = 0;
  *(_QWORD *)(inited + 224) = 0xD000000000000011;
  *(_QWORD *)(inited + 232) = 0x8000000100ED0E30;
  *(_QWORD *)(inited + 240) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *a9);
  *(_BYTE *)(inited + 248) = 0;
  *(_QWORD *)(inited + 256) = 0xD000000000000010;
  *(_QWORD *)(inited + 264) = 0x8000000100ED0E50;
  v30 = v58;
  *(_QWORD *)(inited + 272) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *v57);
  *(_BYTE *)(inited + 280) = 0;
  *(_QWORD *)(inited + 288) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 296) = 0x8000000100ED0E70;
  *(_QWORD *)(inited + 304) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a2);
  *(_BYTE *)(inited + 312) = 0;
  *(_QWORD *)(inited + 320) = 0xD000000000000024;
  *(_QWORD *)(inited + 328) = 0x8000000100ED0E90;
  *(_QWORD *)(inited + 336) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a3);
  *(_BYTE *)(inited + 344) = 0;
  *(_QWORD *)(inited + 352) = 0x6F43656372756F73;
  *(_QWORD *)(inited + 360) = 0xEB00000000746E75;
  *(_QWORD *)(inited + 368) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v59, "count"));
  *(_BYTE *)(inited + 376) = 0;
  *(_QWORD *)(inited + 384) = 0xD000000000000013;
  *(_QWORD *)(inited + 392) = 0x8000000100ED0EC0;
  result = objc_msgSend(v30, "systemVersion");
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(_QWORD *)(inited + 400) = result;
  *(_BYTE *)(inited + 408) = 0;
  strcpy((char *)(inited + 416), "batteryLevel");
  *(_BYTE *)(inited + 429) = 0;
  *(_WORD *)(inited + 430) = -5120;
  *(_QWORD *)(inited + 432) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v30, "batteryLevel"));
  *(_BYTE *)(inited + 440) = 0;
  *(_QWORD *)(inited + 448) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 456) = 0x8000000100ED0EE0;
  result = objc_msgSend(v30, "systemVersion");
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  *(_QWORD *)(inited + 464) = result;
  *(_BYTE *)(inited + 472) = 0;
  *(_QWORD *)(inited + 480) = 0x6563697665447369;
  *(_QWORD *)(inited + 488) = 0xEF6465687361654CLL;
  v31 = SPBeaconTaskNameBeginLeashing;
  v32 = objc_msgSend(v30, "taskInformation");
  type metadata accessor for SPBeaconTaskName(0);
  v34 = v33;
  v35 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  v36 = sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v32, v34, v35, v36);

  if (*(_QWORD *)(v37 + 16) && (v38 = sub_100519464(v31), (v39 & 1) != 0))
  {
    v40 = *(id *)(*(_QWORD *)(v37 + 56) + 8 * v38);

    swift_bridgeObjectRelease();
    v41 = objc_msgSend(v40, "state");

    v42 = v41 == 0;
  }
  else
  {

    swift_bridgeObjectRelease();
    v42 = 0;
  }
  *(_QWORD *)(inited + 496) = v42;
  *(_BYTE *)(inited + 504) = 1;
  *(_QWORD *)(inited + 512) = 0xD000000000000011;
  *(_QWORD *)(inited + 520) = 0x8000000100ECAF20;
  *(_QWORD *)(inited + 528) = objc_msgSend(v30, "connected");
  *(_BYTE *)(inited + 536) = 1;
  v43 = sub_1006B9444(inited);
  v44 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v45 = objc_msgSend(v44, "isInternalBuild");

  if (v45)
  {
    v46 = objc_msgSend(v30, "identifier");
    v47 = v54;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

    UUID.uuidString.getter(v48);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v56);
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
    v62 = v43;
    sub_10010AC08((uint64_t)v49, 0, 0x6544646572696170, 0xEE00444965636976, isUniquelyReferenced_nonNull_native);
    v43 = v62;
    swift_bridgeObjectRelease();
    v51 = objc_msgSend(v30, "serialNumber");
    if (v51)
    {
      v52 = (uint64_t)v51;
      v53 = swift_isUniquelyReferenced_nonNull_native(v43);
      v62 = v43;
      sub_10010AC08(v52, 0, 0xD000000000000018, 0x8000000100ECAF40, v53);
      v43 = v62;
      swift_bridgeObjectRelease();
    }
  }
  return (id)v43;
}

unint64_t sub_10031099C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t inited;
  id v13;
  NSString v14;
  _BYTE v16[232];

  v11 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v11, v16);
  *(_OWORD *)(inited + 16) = xmmword_100E26E10;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x8000000100ED0F00;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(a1 + 16));
  *(_BYTE *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0xD00000000000001CLL;
  *(_QWORD *)(inited + 72) = 0x8000000100ED0F20;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(a2 + 16));
  *(_QWORD *)(inited + 80) = v13;
  *(_BYTE *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0x496E6F6973736573;
  *(_QWORD *)(inited + 104) = 0xE900000000000044;
  UUID.uuidString.getter(v13);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 112) = v14;
  *(_BYTE *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0xD000000000000012;
  *(_QWORD *)(inited + 136) = 0x8000000100ED0F40;
  *(_QWORD *)(inited + 144) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *a4);
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 168) = 0x8000000100ED0F60;
  *(_QWORD *)(inited + 176) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *a5);
  *(_BYTE *)(inited + 184) = 0;
  strcpy((char *)(inited + 192), "averageRecency");
  *(_BYTE *)(inited + 207) = -18;
  *(_QWORD *)(inited + 208) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *a6);
  *(_BYTE *)(inited + 216) = 0;
  return sub_1006B9444(inited);
}

uint64_t sub_100310B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[6];
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a2 + 96);
  v13 = (_QWORD *)swift_allocObject(&unk_10106C5D8, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_100335D40;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106C5F0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_100310DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t My;
  _QWORD *v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _UNKNOWN **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  Transaction.capture()();
  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = objc_msgSend(v5, "bundleIdentifier");

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = sub_1005CC484();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v11 = sub_100C1B1E8(v19);
  swift_bridgeObjectRelease();
  My = type metadata accessor for Feature.FindMy(0);
  v22 = My;
  v23 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v13 = sub_100018F08(&v19);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v13, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v19);
  v19 = v11;
  v20 = 0;
  v21 = &off_101049C80;
  LOBYTE(v22) = 0;
  v23 = v7;
  v24 = v9;
  v25 = v10;
  v26 = My & 1;
  v27 = 0;
  v28 = 0;
  v29 = 1;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B0A0(v18);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
  sub_10032BD98(a3, (uint64_t)&v19, 0, v16, a2, v15, 60.0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100310FF8(unsigned __int8 *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t p_Configuration;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  uint64_t (*v50)();
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int64_t v56;
  void *v57;
  _QWORD *v58;
  uint64_t (*v59)();
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _BYTE *v66;
  uint64_t v67;
  BOOL v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  char *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  _UNKNOWN **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  void *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  id v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  __n128 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  uint64_t (*v169)();
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t (*v178)();
  uint64_t v179;
  unsigned __int8 *v180;
  uint64_t v181;
  unsigned __int8 *v182;
  id v183;
  void *v184;
  unsigned __int8 *v185;
  id v186;
  char *v187;
  id v188;
  char *v189;
  char *v190;
  unsigned __int8 *v191;
  id v192;
  double v193;
  double v194;
  double v195;
  double v196;
  id v197;
  double v198;
  double v199;
  double v200;
  double v201;
  id v202;
  double v203;
  double v204;
  double v205;
  double v206;
  void *v207;
  uint64_t (*v208)();
  uint64_t v209;
  unsigned __int8 *v210;
  uint64_t v211;
  char isUniquelyReferenced_nonNull_native;
  void (*v213)(uint64_t, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t Configuration;
  uint64_t v218;
  char *v219;
  uint64_t (*v220)();
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  id v224;
  _BYTE *v225;
  _QWORD *v226;
  char *v227;
  int64_t v228;
  uint8_t *v229;
  char *v230;
  char *v231;
  _QWORD *v232;
  char *v233;
  unsigned __int8 *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  __n128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 aBlock;
  uint64_t (*v244)(uint64_t);
  void *v245;
  uint64_t (*v246)();
  uint64_t v247;
  _QWORD v248[4];
  _QWORD v249[4];
  uint64_t v250[4];
  uint64_t v251;
  char v252[8];
  uint64_t v253;
  _UNKNOWN **v254;
  uint64_t v255;
  _QWORD *v256;

  v233 = a2;
  v242 = type metadata accessor for UUID(0);
  v241 = *(_QWORD *)(v242 - 8);
  v3 = __chkstk_darwin(v242);
  p_Configuration = (uint64_t)&Configuration - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&Configuration - v7;
  __chkstk_darwin(v6);
  v227 = (char *)&Configuration - v9;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F76D0);
  v11 = __chkstk_darwin(v10);
  v231 = (char *)&Configuration - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v230 = (char *)&Configuration - v13;
  v237 = type metadata accessor for Date(0);
  v226 = *(_QWORD **)(v237 - 8);
  v14 = __chkstk_darwin(v237);
  v235 = (char *)&Configuration - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v236 = (char *)&Configuration - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v17);
  v19 = (uint64_t)&Configuration - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = (char *)type metadata accessor for SharedBeaconRecord(0);
  v239.n128_u64[0] = *((_QWORD *)v238 - 1);
  __chkstk_darwin(v238);
  v232 = (uint64_t *)((char *)&Configuration - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  Configuration = type metadata accessor for LocationFetchConfiguration(0);
  v218 = *(_QWORD *)(Configuration - 8);
  v21 = __chkstk_darwin(Configuration);
  v221 = (uint64_t)&Configuration - (((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = v22;
  __chkstk_darwin(v21);
  v225 = (char *)&Configuration - v23;
  if (qword_1010E9B58 != -1)
    goto LABEL_152;
LABEL_2:
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6D28);
  sub_100012368(a1);
  v26 = sub_100012368(a1);
  v240 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v234 = (unsigned __int8 *)swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v234;
    *(_DWORD *)v29 = 136446210;
    v229 = v29 + 4;
    sub_100012368(a1);
    v30 = sub_100C924F8();
    v32 = v31;
    sub_1000122FC(a1);
    v251 = sub_100016940(v30, v32, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v229, v29 + 12);
    swift_bridgeObjectRelease();
    sub_1000122FC(a1);
    sub_1000122FC(a1);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "One-shot location request with context %{public}s.", v29, 0xCu);
    v33 = v234;
    swift_arrayDestroy(v234, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_1000122FC(a1);
    sub_1000122FC(a1);
  }

  v34 = (uint64_t)v233;
  swift_retain();
  v35 = sub_10001A9A8(&qword_1010F76F0);
  unsafeFromAsyncTask<A>(_:)(&aBlock, &unk_1010F76E8, v34, v35);
  swift_release();
  v222 = aBlock;
  v224 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  v36 = *a1;
  if (v36 == 2)
  {
    sub_1007C53E8();
    sub_100668048();
  }
  v37 = *((_QWORD *)a1 + 1);
  v38 = *(_QWORD *)(v37 + 16);
  LODWORD(v228) = v36;
  if (!v38)
  {
    v53 = sub_100017368();
    swift_bridgeObjectRetain(*((_QWORD *)a1 + 3));
    p_Configuration = sub_100CA84A8(v54);
    swift_bridgeObjectRelease();
    v55 = sub_10047EBD8(v53, p_Configuration, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v56 = v55[2];
    if (v56)
    {
      v251 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10009A578(0, v56, 0);
      p_Configuration = (uint64_t)(v55 + 4);
      v47 = (_QWORD *)v251;
      do
      {
        sub_100030784(p_Configuration, (uint64_t)&aBlock);
        v57 = v245;
        v58 = v47;
        v59 = v246;
        sub_10001AA44(&aBlock, (uint64_t)v245);
        (*(void (**)(void *))(*(_QWORD *)(*((_QWORD *)v59 + 1) + 8) + 32))(v57);
        v47 = v58;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
        {
          sub_10009A578(0, v58[2] + 1, 1);
          v47 = (_QWORD *)v251;
        }
        v61 = v47[2];
        v60 = v47[3];
        if (v61 >= v60 >> 1)
        {
          sub_10009A578(v60 > 1, v61 + 1, 1);
          v47 = (_QWORD *)v251;
        }
        v47[2] = v61 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v241 + 32))((unint64_t)v47+ ((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80))+ *(_QWORD *)(v241 + 72) * v61, v8, v242);
        v251 = (uint64_t)v47;
        p_Configuration += 40;
        --v56;
      }
      while (v56);
      goto LABEL_15;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    v47 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  swift_retain();
  swift_bridgeObjectRetain(v37);
  v40 = sub_10032FCB4(v39, v34);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v41 = sub_10032DD00((uint64_t)v40, v34);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain(*((_QWORD *)a1 + 3));
  v43 = sub_100CA84A8(v42);
  swift_bridgeObjectRelease();
  v44 = sub_10047EBD8((uint64_t)v41, v43, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = v44[2];
  if (!v45)
    goto LABEL_24;
  v251 = (uint64_t)_swiftEmptyArrayStorage;
  sub_10009A578(0, v45, 0);
  v46 = (uint64_t)(v44 + 4);
  v47 = (_QWORD *)v251;
  do
  {
    sub_100030784(v46, (uint64_t)&aBlock);
    v48 = v245;
    v49 = v47;
    v50 = v246;
    sub_10001AA44(&aBlock, (uint64_t)v245);
    (*(void (**)(void *))(*(_QWORD *)(*((_QWORD *)v50 + 1) + 8) + 32))(v48);
    v47 = v49;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
    {
      sub_10009A578(0, v49[2] + 1, 1);
      v47 = (_QWORD *)v251;
    }
    v52 = v47[2];
    v51 = v47[3];
    if (v52 >= v51 >> 1)
    {
      sub_10009A578(v51 > 1, v52 + 1, 1);
      v47 = (_QWORD *)v251;
    }
    v47[2] = v52 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v241 + 32))((unint64_t)v47+ ((*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80))+ *(_QWORD *)(v241 + 72) * v52, p_Configuration, v242);
    v251 = (uint64_t)v47;
    v46 += 40;
    --v45;
  }
  while (v45);
LABEL_15:
  swift_bridgeObjectRelease();
  v36 = v228;
LABEL_25:
  v229 = (uint8_t *)*((_QWORD *)a1 + 4);
  v62 = (uint64_t)v233;
  swift_retain();
  swift_bridgeObjectRetain(v47);
  v8 = 0;
  v64 = sub_10032DF84(v63, v62);
  swift_bridgeObjectRelease();
  swift_release();
  v65 = sub_100330084((uint64_t)v64);
  swift_bridgeObjectRelease();
  v66 = v225;
  sub_100C91CF0(v36);
  v68 = v66[1] == 1;
  v234 = a1;
  v223 = v47;
  if (!v68)
    goto LABEL_43;
  v69 = _swiftEmptyArrayStorage;
  v250[0] = (uint64_t)_swiftEmptyArrayStorage;
  v70 = (unsigned __int8 *)v65[2];
  swift_bridgeObjectRetain(v65);
  v71 = v65;
  if (!v70)
    goto LABEL_42;
  v219 = 0;
  a1 = 0;
  v72 = (uint64_t)(v65 + 4);
  v8 = v238;
  do
  {
    if ((unint64_t)a1 >= v71[2])
      goto LABEL_151;
    sub_100030784(v72, (uint64_t)&aBlock);
    sub_100030784((uint64_t)&aBlock, (uint64_t)&v251);
    v73 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v74 = swift_dynamicCast(v19, &v251, v73, v8, 6);
    v75 = *(void (**)(uint64_t, uint64_t, uint64_t, char *))(v239.n128_u64[0] + 56);
    if ((v74 & 1) != 0)
    {
      v75(v19, 0, 1, v8);
      v76 = (uint64_t)v232;
      p_Configuration = (uint64_t)type metadata accessor for SharedBeaconRecord;
      sub_1000126EC(v19, (uint64_t)v232, type metadata accessor for SharedBeaconRecord);
      v77 = *(unsigned __int8 *)(v76 + *((int *)v8 + 16));
      sub_1000126B0(v76, type metadata accessor for SharedBeaconRecord);
      if (v77 != 1)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        goto LABEL_30;
      }
    }
    else
    {
      v75(v19, 1, 1, v8);
      sub_100004048(v19, (uint64_t *)&unk_1010EE180);
    }
    sub_10000F9FC(&aBlock, (uint64_t)&v251);
    v78 = v250[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v250[0]) & 1) == 0)
    {
      sub_10009A628(0, *(_QWORD *)(v78 + 16) + 1, 1);
      v78 = v250[0];
    }
    v80 = *(_QWORD *)(v78 + 16);
    v79 = *(_QWORD *)(v78 + 24);
    if (v80 >= v79 >> 1)
      sub_10009A628(v79 > 1, v80 + 1, 1);
    v81 = v253;
    v82 = (uint64_t)v254;
    v83 = sub_10009F5D0((uint64_t)&v251, v253);
    p_Configuration = (uint64_t)&Configuration;
    __chkstk_darwin(v83);
    v85 = (char *)&Configuration - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v86 + 16))(v85);
    sub_1004AA86C(v80, (uint64_t)v85, v250, v81, v82);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
    v8 = v238;
LABEL_30:
    ++a1;
    v72 += 40;
  }
  while (v70 != a1);
  v69 = (_QWORD *)v250[0];
  a1 = v234;
  v8 = v219;
LABEL_42:
  swift_bridgeObjectRelease();
  v65 = v71;
  sub_10030B02C((uint64_t)v69);
  v67 = swift_release();
  v66 = v225;
  v47 = v223;
  v36 = v228;
LABEL_43:
  if (*v66 != 1)
  {
    result = swift_bridgeObjectRelease();
    v220 = 0;
    v221 = 0;
LABEL_58:
    v120 = v236;
    v121 = static Date.distantPast.getter(result);
    __chkstk_darwin(v121);
    v122 = (uint64_t)v233;
    v123 = (uint64_t)v229;
    *(&Configuration - 4) = (uint64_t)v233;
    *(&Configuration - 3) = v123;
    *(&Configuration - 2) = (uint64_t)v120;
    swift_bridgeObjectRetain(v47);
    v124 = sub_100307258((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100330224, (uint64_t)(&Configuration - 6), (uint64_t)v47);
    swift_bridgeObjectRelease_n(v47, 2);
    v234 = (unsigned __int8 *)v226[1];
    ((void (*)(char *, uint64_t))v234)(v120, v237);
    v256 = _swiftEmptyDictionarySingleton;
    swift_retain();
    sub_10032DA60((uint64_t)_swiftEmptyDictionarySingleton, v124, v122, (uint64_t *)&v256);
    v126 = v125;
    swift_release();
    v255 = v126;
    swift_bridgeObjectRelease();
    if ((a1[56] & 1) != 0 || (a1[57] & 1) != 0)
    {
      sub_100012368(a1);
      v127 = sub_100012368(a1);
      if (v224)
      {
        v128 = v224;
        v129 = Logger.logObject.getter(v128);
        v130 = static os_log_type_t.default.getter(v129);
        if (os_log_type_enabled(v129, v130))
        {
          v131 = swift_slowAlloc(22, -1);
          v132 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v132;
          *(_DWORD *)v131 = 141558275;
          v251 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v131 + 4, v131 + 12);
          *(_WORD *)(v131 + 12) = 2081;
          v133 = *((_QWORD *)a1 + 6);
          if (v133)
          {
            v134 = *((_QWORD *)a1 + 5);
            v135 = *((_QWORD *)a1 + 6);
          }
          else
          {
            v134 = 0x6E776F6E6B6E75;
            v135 = 0xE700000000000000;
          }
          swift_bridgeObjectRetain(v133);
          v251 = sub_100016940(v134, v135, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v131 + 14, v131 + 22);
          swift_bridgeObjectRelease();
          sub_1000122FC(a1);
          sub_1000122FC(a1);
          _os_log_impl((void *)&_mh_execute_header, v129, v130, "Subscribing context for %{private,mask.hash}s.", (uint8_t *)v131, 0x16u);
          swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v132, -1, -1);
          swift_slowDealloc(v131, -1, -1);
        }
        else
        {
          sub_1000122FC(a1);
          sub_1000122FC(a1);
        }

        v143 = *(_QWORD *)&v233[OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService];
        sub_1003279EC(v128, a1);
        type metadata accessor for Transaction(0);
        v144 = swift_allocObject(&unk_10106BC78, 113, 7);
        *(_QWORD *)(v144 + 16) = v143;
        v145 = *((_OWORD *)a1 + 3);
        *(_OWORD *)(v144 + 56) = *((_OWORD *)a1 + 2);
        *(_OWORD *)(v144 + 72) = v145;
        *(_OWORD *)(v144 + 88) = *((_OWORD *)a1 + 4);
        *(_OWORD *)(v144 + 97) = *(_OWORD *)(a1 + 73);
        v146 = *((_OWORD *)a1 + 1);
        *(_OWORD *)(v144 + 24) = *(_OWORD *)a1;
        *(_OWORD *)(v144 + 40) = v146;
        sub_100012368(a1);
        swift_retain();
        static Transaction.asyncTask(name:block:)("LocationFetchService.addConnection", 34, 2, &unk_1010F7710, v144);

        swift_release();
      }
      else
      {
        v136 = Logger.logObject.getter(v127);
        v137 = static os_log_type_t.default.getter(v136);
        if (os_log_type_enabled(v136, v137))
        {
          v138 = swift_slowAlloc(32, -1);
          v139 = swift_slowAlloc(64, -1);
          *(_QWORD *)&aBlock = v139;
          *(_DWORD *)v138 = 141558531;
          v251 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v138 + 4, v138 + 12);
          *(_WORD *)(v138 + 12) = 2081;
          v140 = *((_QWORD *)a1 + 6);
          if (v140)
          {
            v141 = *((_QWORD *)a1 + 5);
            v142 = *((_QWORD *)a1 + 6);
          }
          else
          {
            v141 = 0x6E776F6E6B6E75;
            v142 = 0xE700000000000000;
          }
          swift_bridgeObjectRetain(v140);
          v251 = sub_100016940(v141, v142, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v138 + 14, v138 + 22);
          swift_bridgeObjectRelease();
          sub_1000122FC(a1);
          sub_1000122FC(a1);
          *(_WORD *)(v138 + 22) = 2080;
          v251 = 0;
          v147 = sub_10001A9A8(&qword_1010F7708);
          v148 = String.init<A>(describing:)(&v251, v147);
          v251 = sub_100016940(v148, v149, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v138 + 24, v138 + 32);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v136, v137, "Did not subscribe context for %{private,mask.hash}s,\nconnection: %s. No connection.", (uint8_t *)v138, 0x20u);
          swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v139, -1, -1);
          swift_slowDealloc(v138, -1, -1);

        }
        else
        {
          sub_1000122FC(a1);
          sub_1000122FC(a1);

        }
      }
    }
    v150 = v256[8];
    v226 = v256 + 8;
    v151 = 1 << *((_BYTE *)v256 + 32);
    v152 = -1;
    if (v151 < 64)
      v152 = ~(-1 << v151);
    p_Configuration = v152 & v150;
    v153 = (unint64_t)(v151 + 63) >> 6;
    v218 = v153 - 1;
    v154 = swift_bridgeObjectRetain(v256);
    v155 = 0;
    v228 = v153;
    v219 = (char *)(v153 - 5);
    v229 = (uint8_t *)v156;
    v223 = (_QWORD *)(v156 + 104);
    v157 = (uint64_t)v231;
    v19 = (uint64_t)v230;
    while (!p_Configuration)
    {
      v164 = v155 + 1;
      if (__OFADD__(v155, 1))
        goto LABEL_150;
      if (v164 < v228)
      {
        v165 = v226[v164];
        if (v165)
          goto LABEL_86;
        if (v155 + 2 >= v228)
        {
          ++v155;
        }
        else
        {
          v165 = v226[v155 + 2];
          if (v165)
          {
            v164 = v155 + 2;
            goto LABEL_86;
          }
          if (v155 + 3 >= v228)
          {
            v155 += 2;
          }
          else
          {
            v165 = v226[v155 + 3];
            if (v165)
            {
              v164 = v155 + 3;
LABEL_86:
              v159 = (v165 - 1) & v165;
              v160 = __clz(__rbit64(v165)) + (v164 << 6);
              v155 = v164;
LABEL_82:
              v161 = v229;
              (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v241 + 16))(v157, *((_QWORD *)v229 + 6) + *(_QWORD *)(v241 + 72) * v160, v242, v154);
              v162 = *((_QWORD *)v161 + 7) + 40 * v160;
              v163 = sub_10001A9A8(&qword_1010F76F8);
              sub_100030784(v162, v157 + *(int *)(v163 + 48));
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v163 - 8) + 56))(v157, 0, 1, v163);
              goto LABEL_92;
            }
            v164 = v155 + 4;
            if (v155 + 4 >= v228)
            {
              v155 += 3;
            }
            else
            {
              v165 = v226[v164];
              if (v165)
                goto LABEL_86;
              while (v219 != (char *)v155)
              {
                v165 = v223[v155++];
                if (v165)
                {
                  v164 = v155 + 4;
                  goto LABEL_86;
                }
              }
              v155 = v218;
            }
          }
        }
      }
      v166 = sub_10001A9A8(&qword_1010F76F8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 56))(v157, 1, 1, v166);
      v159 = 0;
LABEL_92:
      sub_100005CF0(v157, v19, (uint64_t *)&unk_1010F76D0);
      v167 = sub_10001A9A8(&qword_1010F76F8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 48))(v19, 1, v167) == 1)
      {

        swift_release();
        swift_release();
        sub_1000126B0((uint64_t)v225, type metadata accessor for LocationFetchConfiguration);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_10001D8A8((uint64_t)v220, v221);
      }
      v239.n128_u64[0] = v159;
      sub_10000F9FC((__int128 *)(v19 + *(int *)(v167 + 48)), (uint64_t)&aBlock);
      v168 = v245;
      v169 = v246;
      sub_10001AA44(&aBlock, (uint64_t)v245);
      v170 = (*((uint64_t (**)(void *, uint64_t (*)()))v169 + 2))(v168, v169);
      sub_100307A98(v170, &v255);
      p_Configuration = v171;
      swift_bridgeObjectRelease();
      v19 = (unint64_t)p_Configuration >> 62;
      if ((unint64_t)p_Configuration >> 62)
      {
        if (p_Configuration < 0)
          v216 = p_Configuration;
        else
          v216 = p_Configuration & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(p_Configuration);
        if (!_CocoaArrayWrapper.endIndex.getter(v216))
        {
LABEL_77:
          swift_bridgeObjectRelease();
          v157 = (uint64_t)v231;
          v19 = (uint64_t)v230;
LABEL_78:
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v19, v242);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
          goto LABEL_79;
        }
      }
      else
      {
        v172 = *(_QWORD *)((p_Configuration & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(p_Configuration);
        if (!v172)
          goto LABEL_77;
      }
      v238 = (char *)(p_Configuration & 0xC000000000000001);
      if ((p_Configuration & 0xC000000000000001) != 0)
      {
        v173 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, p_Configuration);
      }
      else
      {
        if (!*(_QWORD *)((p_Configuration & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_149;
        v173 = (unsigned __int8 *)*(id *)(p_Configuration + 32);
      }
      v174 = v173;
      swift_bridgeObjectRelease();
      v233 = v8;
      v232 = (_QWORD *)v155;
      if (v19)
      {
        if (p_Configuration < 0)
          v176 = p_Configuration;
        else
          v176 = p_Configuration & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(p_Configuration);
        v175 = _CocoaArrayWrapper.endIndex.getter(v176);
        swift_bridgeObjectRelease();
      }
      else
      {
        v175 = *(_QWORD *)((p_Configuration & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v177 = v245;
      v178 = v246;
      sub_10001AA44(&aBlock, (uint64_t)v245);
      if (v175 != (*((unsigned __int8 (**)(void *, uint64_t (*)()))v178 + 3))(v177, v178))
      {

        v157 = (uint64_t)v231;
        v19 = (uint64_t)v230;
        v8 = v233;
LABEL_129:
        v155 = (uint64_t)v232;
        goto LABEL_78;
      }
      if (v19)
      {
        if (p_Configuration < 0)
          v181 = p_Configuration;
        else
          v181 = p_Configuration & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(p_Configuration);
        v182 = v174;
        v179 = _CocoaArrayWrapper.endIndex.getter(v181);
        if (v179)
        {
LABEL_113:
          v19 = 4;
          while (1)
          {
            v183 = v238
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, p_Configuration)
                 : *(id *)(p_Configuration + 8 * v19);
            v184 = v183;
            if (__OFADD__(v19 - 4, 1))
              break;
            v240 = v19 - 3;
            v253 = sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
            v254 = &off_1010B9400;
            v251 = (uint64_t)v174;
            a1 = v174;
            v185 = v174;
            v186 = objc_msgSend(v184, "timestamp");
            v187 = v236;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v186);

            v188 = objc_msgSend(v185, "timestamp");
            v189 = v235;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v188);

            LOBYTE(v188) = static Date.== infix(_:_:)(v187, v189);
            v190 = v189;
            v8 = (char *)v237;
            v191 = v234;
            ((void (*)(char *, uint64_t))v234)(v190, v237);
            ((void (*)(char *, char *))v191)(v187, v8);
            sub_100030784((uint64_t)&v251, (uint64_t)v250);
            if ((v188 & 1) == 0)
            {
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v250);
              sub_100030784((uint64_t)&v251, (uint64_t)v249);
LABEL_125:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v249);
              sub_100030784((uint64_t)&v251, (uint64_t)v248);
LABEL_126:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v248);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
              swift_bridgeObjectRelease();

LABEL_128:
              v8 = v233;

              v157 = (uint64_t)v231;
              v19 = (uint64_t)v230;
              goto LABEL_129;
            }
            v192 = v184;
            objc_msgSend(v192, "longitude");
            v194 = v193;
            objc_msgSend((id)*sub_10001AA44(v250, v250[3]), "longitude");
            v196 = v195;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v250);
            sub_100030784((uint64_t)&v251, (uint64_t)v249);
            if (v194 != v196)
              goto LABEL_125;
            v197 = v192;
            objc_msgSend(v197, "latitude");
            v199 = v198;
            objc_msgSend((id)*sub_10001AA44(v249, v249[3]), "latitude");
            v201 = v200;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v249);
            sub_100030784((uint64_t)&v251, (uint64_t)v248);
            if (v199 != v201)
              goto LABEL_126;
            v202 = v197;
            objc_msgSend(v202, "horizontalAccuracy");
            v204 = v203;
            objc_msgSend((id)*sub_10001AA44(v248, v248[3]), "horizontalAccuracy");
            v206 = v205;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v248);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);

            if (v204 != v206)
            {

              swift_bridgeObjectRelease();
              goto LABEL_128;
            }
            ++v19;
            v174 = a1;
            if (v240 == v179)
              goto LABEL_123;
          }
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          swift_once(&qword_1010E9B58, sub_1003087EC);
          goto LABEL_2;
        }
      }
      else
      {
        v179 = *(_QWORD *)((p_Configuration & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(p_Configuration);
        v180 = v174;
        if (v179)
          goto LABEL_113;
      }
LABEL_123:

      swift_bridgeObjectRelease_n(p_Configuration, 2);
      v207 = v245;
      v208 = v246;
      sub_10001AA44(&aBlock, (uint64_t)v245);
      v209 = (uint64_t)v227;
      (*((void (**)(void *, uint64_t (*)()))v208 + 1))(v207, v208);
      v210 = v174;
      v211 = v255;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v255);
      v251 = v211;
      sub_10010B5A8((uint64_t)v210, v209, isUniquelyReferenced_nonNull_native);
      v255 = v251;
      swift_bridgeObjectRelease();
      v213 = *(void (**)(uint64_t, uint64_t))(v241 + 8);
      v214 = v209;
      v215 = v242;
      v213(v214, v242);

      v19 = (uint64_t)v230;
      v213((uint64_t)v230, v215);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v157 = (uint64_t)v231;
      v8 = v233;
      v155 = (uint64_t)v232;
LABEL_79:
      p_Configuration = v239.n128_u64[0];
    }
    v158 = __clz(__rbit64(p_Configuration));
    v159 = (p_Configuration - 1) & p_Configuration;
    v160 = v158 | (v155 << 6);
    goto LABEL_82;
  }
  __chkstk_darwin(v67);
  v87 = (uint64_t)v233;
  v88 = (uint64_t)v229;
  *(&Configuration - 4) = (uint64_t)v233;
  *(&Configuration - 3) = v88;
  *(&Configuration - 2) = v89;
  swift_bridgeObjectRetain(v47);
  v90 = sub_100307258((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100336F80, (uint64_t)(&Configuration - 6), (uint64_t)v47);
  swift_bridgeObjectRelease();
  if (v36)
  {
    swift_retain();
    v91 = sub_10032F868((uint64_t)v65, v90, v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v91 = v65;
  }
  v219 = v8;
  v93 = v91[2];
  if (v93)
  {
    v94 = (uint64_t)(v91 + 4);
    v232 = v91;
    v95 = swift_bridgeObjectRetain_n(v91, 2);
    v95.n128_u64[0] = 141558275;
    v239 = v95;
    v238 = (char *)&type metadata for Any + 8;
    v96 = v227;
    do
    {
      sub_100030784(v94, (uint64_t)&aBlock);
      v97 = sub_100030784((uint64_t)&aBlock, (uint64_t)&v251);
      v98 = Logger.logObject.getter(v97);
      v99 = static os_log_type_t.default.getter(v98);
      if (os_log_type_enabled(v98, v99))
      {
        v100 = swift_slowAlloc(22, -1);
        v101 = swift_slowAlloc(32, -1);
        v250[0] = v101;
        *(_DWORD *)v100 = v239.n128_u32[0];
        *(_QWORD *)(v100 + 4) = 1752392040;
        *(_WORD *)(v100 + 12) = 2081;
        v103 = v253;
        v102 = v254;
        sub_10001AA44(&v251, v253);
        (*(void (**)(uint64_t))(*((_QWORD *)v102[1] + 1) + 32))(v103);
        v104 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v105 = v242;
        v106 = dispatch thunk of CustomStringConvertible.description.getter(v242, v104);
        v108 = v107;
        v109 = v105;
        a1 = v234;
        (*(void (**)(char *, uint64_t))(v241 + 8))(v96, v109);
        *(_QWORD *)(v100 + 14) = sub_100016940(v106, v108, v250);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "One-shot location fetching ACSN for beacon without recent location: %{private,mask.hash}s.", (uint8_t *)v100, 0x16u);
        swift_arrayDestroy(v101, 1, v238);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v100, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v251);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v94 += 40;
      --v93;
    }
    while (v93);
    v110 = (uint64_t)v232;
    swift_bridgeObjectRelease_n(v232, 2);
    v87 = (uint64_t)v233;
  }
  else
  {
    v110 = (uint64_t)v91;
  }
  v111 = *(NSObject **)(v87 + 96);
  v112 = v221;
  sub_10005972C((uint64_t)v225, v221, type metadata accessor for LocationFetchConfiguration);
  v113 = *(unsigned __int8 *)(v218 + 80);
  v114 = (v113 + 128) & ~v113;
  v115 = swift_allocObject(&unk_10106BCA0, (char *)v220 + v114, v113 | 7);
  v116 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v115 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v115 + 64) = v116;
  *(_OWORD *)(v115 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v115 + 89) = *(_OWORD *)(a1 + 73);
  v117 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v115 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v115 + 32) = v117;
  *(_QWORD *)(v115 + 112) = v233;
  *(_QWORD *)(v115 + 120) = v110;
  sub_1000126EC(v112, v115 + v114, type metadata accessor for LocationFetchConfiguration);
  v118 = swift_allocObject(&unk_10106BCC8, 32, 7);
  v220 = sub_10033029C;
  *(_QWORD *)(v118 + 16) = sub_10033029C;
  *(_QWORD *)(v118 + 24) = v115;
  v221 = v115;
  v246 = sub_10001D850;
  v247 = v118;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v244 = sub_10001D8B8;
  v245 = &unk_10106BCE0;
  v119 = _Block_copy(&aBlock);
  sub_100012368(a1);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v111, v119);
  _Block_release(v119);
  LOBYTE(v111) = swift_isEscapingClosureAtFileLocation(v118, "", 150, 425, 44, 1);
  result = swift_release();
  if ((v111 & 1) == 0)
  {
    v47 = v223;
    v8 = v219;
    goto LABEL_58;
  }
  __break(1u);
  return result;
}

uint64_t sub_100312E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_task_switch(sub_1000087E0, 0, 0);
}

uint64_t sub_100312E44(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17[4];
  uint64_t v18;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v13 = sub_10088AA6C(a2);
  v17[2] = a4;
  v17[3] = a5;
  v14 = sub_10008B52C((uint64_t (*)(char *))sub_100330B70, v17, (uint64_t)v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  v18 = *a1;
  *a1 = 0x8000000000000000;
  sub_10010B8A8(v14, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  *a1 = v18;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100312F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconEstimatedLocation(0);
  result = __chkstk_darwin(v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = *(unsigned __int8 *)(a1 + *(int *)(v10 + 44));
  if (*(unsigned __int8 *)(a2 + 32) == v15)
  {
LABEL_3:
    sub_10005972C(a1, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    v16 = &v13[*(int *)(v10 + 40)];
    v17 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v18 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v9, v6, v17) ^ 1;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    return v18 & 1;
  }
  if (v14 == 1)
  {
LABEL_9:
    sub_10005972C(a1, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    v18 = 0;
    goto LABEL_10;
  }
  v19 = 33;
  while (1)
  {
    v20 = v19 - 31;
    if (__OFADD__(v19 - 32, 1))
      break;
    if (*(unsigned __int8 *)(a2 + v19) == v15)
      goto LABEL_3;
    ++v19;
    if (v20 == v14)
      goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100313134(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t My;
  _QWORD *v16;
  double v17;
  uint64_t v19;
  uint64_t v22;
  char v23;
  _UNKNOWN **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v6 = *a1;
  v8 = *((_QWORD *)a1 + 5);
  v7 = *((_QWORD *)a1 + 6);
  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 9);
  v19 = *((_QWORD *)a1 + 10);
  v11 = a1[88];
  v12 = qword_1010E9D08;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  if (v12 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v13 = v6 == 3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v14 = sub_100C1B1E8(v22);
  swift_bridgeObjectRelease();
  My = type metadata accessor for Feature.FindMy(0);
  v25 = My;
  v26 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v16 = sub_100018F08(&v22);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v16, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v22);
  v22 = v14;
  v23 = 0;
  v24 = &off_101049CA8;
  LOBYTE(v25) = v13;
  v26 = v8;
  v27 = v7;
  v28 = v9;
  v29 = My & 1;
  v30 = v10;
  v31 = v19;
  v32 = v11;
  v17 = *(double *)(a4 + *(int *)(type metadata accessor for LocationFetchConfiguration(0) + 32));
  sub_10032BD98(a3, (uint64_t)&v22, (a1[56] & 1) == 0, *((_QWORD *)a1 + 8), a2, v17, *(double *)(a4 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003132FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  unsigned int (*v52)(__int128 *, uint64_t, uint64_t);
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  os_log_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  os_log_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  int v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int128 *v148;
  char *v149;
  uint64_t v150;
  id v151;
  char *v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  void *v159;
  id v160;
  id v161;
  Class isa;
  id v163;
  _QWORD *v164;
  char isUniquelyReferenced_nonNull_native;
  void (*v166)(char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  os_log_t v175;
  char *v176;
  uint64_t *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  __int128 *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;

  v177 = a4;
  v184 = a1;
  v191 = type metadata accessor for Date(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v168 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F7808);
  v8 = __chkstk_darwin(v7);
  v182 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v187 = (uint64_t)&v168 - v11;
  v12 = __chkstk_darwin(v10);
  v188 = (uint64_t)&v168 - v13;
  v14 = __chkstk_darwin(v12);
  v178 = (char *)&v168 - v15;
  v16 = __chkstk_darwin(v14);
  v174 = (uint64_t)&v168 - v17;
  v18 = __chkstk_darwin(v16);
  v175 = (os_log_t)((char *)&v168 - v19);
  v20 = __chkstk_darwin(v18);
  v173 = (char *)&v168 - v21;
  v22 = __chkstk_darwin(v20);
  v196 = (char *)&v168 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v168 - v24;
  v180 = sub_10001A9A8(&qword_1010ED860);
  v26 = __chkstk_darwin(v180);
  v179 = (char *)&v168 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v181 = (uint64_t)&v168 - v29;
  __chkstk_darwin(v28);
  v192 = (__int128 *)((char *)&v168 - v30);
  v200 = type metadata accessor for UUID(0);
  v197 = *(_QWORD *)(v200 - 8);
  v31 = __chkstk_darwin(v200);
  v183 = (char *)&v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v185 = (char *)&v168 - v34;
  v35 = __chkstk_darwin(v33);
  v186 = (char *)&v168 - v36;
  __chkstk_darwin(v35);
  v176 = (char *)&v168 - v37;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  __chkstk_darwin(v38);
  v40 = (char *)&v168 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for BeaconEstimatedLocation(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v193 = (uint64_t)&v168 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v46 = (char *)&v168 - v45;
  v198 = *(_QWORD *)(a3 + 280);
  sub_10080B648(a2, (uint64_t)&v203);
  if (!*((_QWORD *)&v204 + 1))
    return sub_100004048((uint64_t)&v203, (uint64_t *)&unk_1010EE310);
  sub_10000F9FC(&v203, (uint64_t)&v206);
  v199 = *(int *)(v7 + 48);
  sub_100A79444(*(_QWORD *)(a2 + v199), (uint64_t)v40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) != 1)
  {
    v169 = v42;
    v171 = v41;
    v194 = v7;
    v195 = (char *)a2;
    v172 = v46;
    sub_1000126EC((uint64_t)v40, (uint64_t)v46, type metadata accessor for BeaconEstimatedLocation);
    v48 = v207;
    v49 = v208;
    sub_10001AA44(&v206, v207);
    v50 = v192;
    (*(void (**)(uint64_t, uint64_t))(v49 + 192))(v48, v49);
    v51 = v197;
    v52 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v197 + 48);
    v53 = v200;
    v54 = v52(v50, 1, v200);
    v170 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
    if (v54 == 1)
    {
      v55 = &qword_1010ED860;
      v56 = v50;
LABEL_13:
      sub_100004048((uint64_t)v56, v55);
      goto LABEL_14;
    }
    v57 = (uint64_t)v176;
    (*(void (**)(char *, __int128 *, uint64_t))(v51 + 32))(v176, v50, v53);
    v58 = *v177;
    if (*(_QWORD *)(*v177 + 16) && (v59 = sub_100003FB0(v57), (v60 & 1) != 0))
    {
      sub_100030784(*(_QWORD *)(v58 + 56) + 40 * v59, (uint64_t)&v203);
      sub_100004048((uint64_t)&v203, (uint64_t *)&unk_101107010);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v200);
    }
    else
    {
      v205 = 0;
      v203 = 0u;
      v204 = 0u;
      sub_100004048((uint64_t)&v203, (uint64_t *)&unk_101107010);
      sub_1008259D0(v57, (uint64_t)&v201);
      if (!v202)
      {
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v200);
        v55 = (uint64_t *)&unk_101107010;
        v56 = &v201;
        goto LABEL_13;
      }
      sub_10000F9FC(&v201, (uint64_t)&v203);
      v61 = (uint64_t)v186;
      v62 = v200;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v186, v57, v200);
      sub_100030784((uint64_t)&v203, (uint64_t)&v201);
      sub_1000FF39C((uint64_t)&v201, v61);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v203);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v57, v62);
    }
LABEL_14:
    sub_10081BD08(&v206);
    v64 = v63;
    v65 = *(_QWORD *)&v195[v199];
    v66 = *(int *)(v194 + 48);
    v67 = *(void (**)(char *))(v51 + 16);
    v67(v25);
    *(_QWORD *)&v25[v66] = v65;
    v68 = *(_QWORD *)(v65 + 16);
    if (v68)
    {
      v69 = v65 + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
      v70 = *(_QWORD *)(v169 + 72);
      swift_bridgeObjectRetain_n(v65, 2);
      do
      {
        sub_100314610(v69, (uint64_t)v25);
        v69 += v70;
        --v68;
      }
      while (v68);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v65);
    }
    sub_100004048((uint64_t)v25, &qword_1010F7808);
    v71 = *(int *)(v194 + 48);
    v72 = v196;
    v73 = v195;
    v74 = v200;
    ((void (*)(char *, char *, uint64_t))v67)(v196, v195, v200);
    v75 = *(_QWORD *)&v73[v199];
    *(_QWORD *)&v72[v71] = v75;
    swift_bridgeObjectRetain(v75);
    v77 = sub_1007EE0A0(v76);
    swift_bridgeObjectRelease();
    v78 = v207;
    v79 = v208;
    sub_10001AA44(&v206, v207);
    v80 = sub_100C62334(v78, v79);
    v81 = sub_100C63B1C((uint64_t)v77, v80, v64);
    swift_bridgeObjectRelease();
    v82 = *(void (**)(char *, uint64_t))(v51 + 8);
    v82(v72, v74);
    v177 = (uint64_t *)v82;
    if (v81)
    {
      if (qword_1010E9B58 != -1)
        swift_once(&qword_1010E9B58, sub_1003087EC);
      v83 = type metadata accessor for Logger(0);
      sub_10001A9E8(v83, (uint64_t)qword_1011B6D28);
      v84 = *(int *)(v194 + 48);
      v85 = (uint64_t)v178;
      v86 = v195;
      v192 = (__int128 *)v67;
      ((void (*)(char *, char *, uint64_t))v67)(v178, v195, v74);
      v87 = *(_QWORD *)&v86[v199];
      *(_QWORD *)(v85 + v84) = v87;
      v88 = v188;
      sub_10000F9B8(v85, v188, &qword_1010F7808);
      v89 = v85;
      v90 = v187;
      sub_100005CF0(v89, v187, &qword_1010F7808);
      sub_10005972C((uint64_t)v172, v193, type metadata accessor for BeaconEstimatedLocation);
      v91 = v81;
      swift_bridgeObjectRetain(v87);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.default.getter(v93);
      LODWORD(v178) = v94;
      if (os_log_type_enabled(v93, v94))
      {
        v95 = swift_slowAlloc(82, -1);
        v176 = (char *)swift_slowAlloc(96, -1);
        *(_QWORD *)&v203 = v176;
        *(_DWORD *)v95 = 141559811;
        *(_QWORD *)&v201 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 4, v95 + 12);
        *(_WORD *)(v95 + 12) = 2081;
        v96 = v196;
        ((void (*)(char *, uint64_t, uint64_t))v192)(v196, v88, v200);
        v97 = v186;
        (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v186, v96, v200);
        v98 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v99 = dispatch thunk of CustomStringConvertible.description.getter(v200, v98);
        v175 = v93;
        v101 = v100;
        ((void (*)(char *, uint64_t))v177)(v97, v200);
        *(_QWORD *)&v201 = sub_100016940(v99, v101, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 14, v95 + 22);
        swift_bridgeObjectRelease();
        sub_100004048(v187, &qword_1010F7808);
        sub_100004048(v188, &qword_1010F7808);
        *(_WORD *)(v95 + 22) = 2160;
        *(_QWORD *)&v201 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 24, v95 + 32);
        *(_WORD *)(v95 + 32) = 2081;
        v102 = v193;
        v103 = dispatch thunk of CustomStringConvertible.description.getter(v200, v98);
        *(_QWORD *)&v201 = sub_100016940(v103, v104, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 34, v95 + 42);
        swift_bridgeObjectRelease();
        sub_1000126B0(v102, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v95 + 42) = 2049;
        objc_msgSend(v91, "coordinate");
        *(_QWORD *)&v201 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 44, v95 + 52);

        *(_WORD *)(v95 + 52) = 2049;
        objc_msgSend(v91, "coordinate");
        *(_QWORD *)&v201 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 54, v95 + 62);

        *(_WORD *)(v95 + 62) = 2050;
        objc_msgSend(v91, "horizontalAccuracy");
        *(_QWORD *)&v201 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 64, v95 + 72);

        *(_WORD *)(v95 + 72) = 2082;
        v108 = objc_msgSend(v91, "timestamp");
        v109 = v189;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v108);

        v110 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v111 = v191;
        v112 = dispatch thunk of CustomStringConvertible.description.getter(v191, v110);
        v114 = v113;
        (*(void (**)(char *, uint64_t))(v190 + 8))(v109, v111);
        *(_QWORD *)&v201 = sub_100016940(v112, v114, (uint64_t *)&v203);
        v74 = v200;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 74, v95 + 82);

        swift_bridgeObjectRelease();
        v115 = v175;
        _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v178, "Filtered cached latest location returned to client for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v95, 0x52u);
        v116 = v176;
        swift_arrayDestroy(v176, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v116, -1, -1);
        swift_slowDealloc(v95, -1, -1);

      }
      else
      {
        sub_100004048(v90, &qword_1010F7808);
        sub_100004048(v88, &qword_1010F7808);
        sub_1000126B0(v193, type metadata accessor for BeaconEstimatedLocation);

      }
      v138 = v185;
      __chkstk_darwin(v117);
      v139 = v195;
      *(&v168 - 2) = v140;
      *(&v168 - 1) = (uint64_t)v139;
      v141 = (uint64_t)v179;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100330B58);
      v142 = v181;
      sub_100005CF0(v141, v181, &qword_1010ED860);
      v143 = *(int *)(v194 + 48);
      v144 = (uint64_t)v182;
      ((void (*)(char *, char *, uint64_t))v192)(v182, v139, v74);
      v145 = *(_QWORD *)&v139[v199];
      *(_QWORD *)(v144 + v143) = v145;
      if (v170(v142, 1, v74) == 1)
      {
        v146 = v196;
        v147 = (char *)v192;
        ((void (*)(char *, uint64_t, uint64_t))v192)(v196, v144, v74);
        swift_bridgeObjectRetain(v145);
        sub_100004048(v144, &qword_1010F7808);
        (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v138, v146, v74);
        sub_100004048(v142, &qword_1010ED860);
        v148 = (__int128 *)v147;
        v149 = v138;
      }
      else
      {
        swift_bridgeObjectRetain(v145);
        sub_100004048(v144, &qword_1010F7808);
        v149 = v138;
        (*(void (**)(char *, uint64_t, uint64_t))(v197 + 32))(v138, v142, v74);
        v148 = v192;
      }
      v150 = (uint64_t)v183;
      ((void (*)(char *, char *, uint64_t))v148)(v183, v149, v74);
      v151 = objc_msgSend(v91, "timestamp");
      v152 = v189;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v151);

      objc_msgSend(v91, "coordinate");
      v154 = v153;
      objc_msgSend(v91, "coordinate");
      v156 = v155;
      objc_msgSend(v91, "horizontalAccuracy");
      v158 = v157;
      v159 = (void *)sub_100C63E28(v172[*(int *)(v171 + 44)]);
      v160 = objc_allocWithZone((Class)SPBeaconLocation);
      v161 = v159;
      isa = Date._bridgeToObjectiveC()().super.isa;
      v163 = objc_msgSend(v160, "initWithTimestamp:latitude:longitude:horizontalAccuracy:source:", isa, v161, v154, v156, v158);

      (*(void (**)(char *, uint64_t))(v190 + 8))(v152, v191);
      if (v163)
      {
        v164 = v184;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v184);
        *(_QWORD *)&v203 = *v164;
        *v164 = 0x8000000000000000;
        sub_10010B5A8((uint64_t)v163, v150, isUniquelyReferenced_nonNull_native);
        *v164 = v203;
        swift_bridgeObjectRelease();
        v166 = (void (*)(char *, uint64_t))v177;
        ((void (*)(uint64_t, uint64_t))v177)(v150, v74);
      }
      else
      {
        v167 = sub_100103908(v150);
        v166 = (void (*)(char *, uint64_t))v177;
        ((void (*)(uint64_t, uint64_t))v177)(v150, v74);

        v91 = (id)v167;
      }

      v166(v149, v74);
    }
    else
    {
      if (qword_1010E9B58 != -1)
        swift_once(&qword_1010E9B58, sub_1003087EC);
      v118 = type metadata accessor for Logger(0);
      sub_10001A9E8(v118, (uint64_t)qword_1011B6D28);
      v119 = *(int *)(v194 + 48);
      v120 = (uint64_t)v173;
      v121 = v195;
      ((void (*)(char *, char *, uint64_t))v67)(v173, v195, v74);
      v122 = *(_QWORD *)&v121[v199];
      *(_QWORD *)(v120 + v119) = v122;
      v123 = v175;
      sub_10000F9B8(v120, (uint64_t)v175, &qword_1010F7808);
      v124 = v120;
      v125 = v174;
      sub_100005CF0(v124, v174, &qword_1010F7808);
      swift_bridgeObjectRetain(v122);
      v127 = Logger.logObject.getter(v126);
      v128 = static os_log_type_t.error.getter(v127);
      v129 = v128;
      if (os_log_type_enabled(v127, v128))
      {
        v130 = swift_slowAlloc(22, -1);
        v199 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v203 = v199;
        *(_DWORD *)v130 = 141558275;
        *(_QWORD *)&v201 = 1752392040;
        v195 = (char *)&v201 + 8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v130 + 4, v130 + 12);
        *(_WORD *)(v130 + 12) = 2081;
        v194 = v130 + 14;
        LODWORD(v198) = v129;
        v131 = v196;
        ((void (*)(char *, os_log_t, uint64_t))v67)(v196, v123, v74);
        v132 = v186;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v186, v131, v74);
        v133 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v134 = dispatch thunk of CustomStringConvertible.description.getter(v74, v133);
        v136 = v135;
        ((void (*)(char *, uint64_t))v177)(v132, v74);
        *(_QWORD *)&v201 = sub_100016940(v134, v136, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v195, v194, v130 + 22);
        swift_bridgeObjectRelease();
        sub_100004048(v125, &qword_1010F7808);
        sub_100004048((uint64_t)v123, &qword_1010F7808);
        _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v198, "Could not produce filtered location for beacon %{private,mask.hash}s.", (uint8_t *)v130, 0x16u);
        v137 = v199;
        swift_arrayDestroy(v199, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1, -1);
        swift_slowDealloc(v130, -1, -1);

      }
      else
      {

        sub_100004048(v125, &qword_1010F7808);
        sub_100004048((uint64_t)v123, &qword_1010F7808);
      }
    }
    sub_1000126B0((uint64_t)v172, type metadata accessor for BeaconEstimatedLocation);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v206);
  }
  sub_100004048((uint64_t)v40, (uint64_t *)&unk_1010F7810);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v206);
}

void sub_100314610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  uint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  os_log_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v4 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  __chkstk_darwin(v4);
  v68 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for BeaconEstimatedLocation(0);
  v6 = __chkstk_darwin(v69);
  v70 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v59 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v59 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v59 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v59 - v17;
  v19 = sub_10001A9A8(&qword_1010F7808);
  v20 = __chkstk_darwin(v19);
  v67 = (os_log_t)((char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __chkstk_darwin(v20);
  v73 = (uint64_t)&v59 - v23;
  v24 = __chkstk_darwin(v22);
  v74 = (uint64_t)&v59 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v59 - v26;
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v28 = type metadata accessor for Logger(0);
  sub_10001A9E8(v28, (uint64_t)qword_1011B6D28);
  v29 = *(int *)(v19 + 48);
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v66(v27, a2, v72);
  v30 = *(_QWORD *)(a2 + v29);
  *(_QWORD *)&v27[v29] = v30;
  sub_10000F9B8((uint64_t)v27, v74, &qword_1010F7808);
  sub_100005CF0((uint64_t)v27, v73, &qword_1010F7808);
  sub_10005972C(a1, (uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
  sub_10005972C(a1, (uint64_t)v16, type metadata accessor for BeaconEstimatedLocation);
  sub_10005972C(a1, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
  sub_10005972C(a1, (uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
  v31 = v70;
  sub_10005972C(a1, v70, type metadata accessor for BeaconEstimatedLocation);
  swift_bridgeObjectRetain(v30);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    v36 = swift_slowAlloc(82, -1);
    v65 = swift_slowAlloc(96, -1);
    v77 = v65;
    *(_DWORD *)v36 = 141559811;
    v75 = 1752392040;
    v62 = v13;
    v63 = v10;
    v60 = v18;
    v61 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2081;
    v64 = v35;
    v37 = v67;
    v38 = v74;
    v39 = v72;
    v66((char *)v67, v74, v72);
    v40 = v71;
    v41 = v68;
    (*(void (**)(char *, os_log_t, uint64_t))(v71 + 32))(v68, v37, v39);
    v66 = (void (*)(char *, uint64_t, uint64_t))sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v67 = v33;
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v39, v66);
    v44 = v43;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    v75 = sub_100016940(v42, v44, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v73, &qword_1010F7808);
    sub_100004048(v38, &qword_1010F7808);
    *(_WORD *)(v36 + 22) = 2160;
    v75 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 24, v36 + 32);
    *(_WORD *)(v36 + 32) = 2081;
    v45 = (int *)v69;
    v46 = (uint64_t)v60;
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v39, v66);
    v75 = sub_100016940(v47, v48, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 34, v36 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v46, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 42) = 2049;
    v49 = (uint64_t)v61;
    v75 = *(_QWORD *)&v61[v45[7]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 44, v36 + 52);
    sub_1000126B0(v49, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 52) = 2049;
    v50 = (uint64_t)v62;
    v75 = *(_QWORD *)&v62[v45[8]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 54, v36 + 62);
    sub_1000126B0(v50, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 62) = 2050;
    v51 = (uint64_t)v63;
    v75 = *(_QWORD *)&v63[v45[9]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 64, v36 + 72);
    sub_1000126B0(v51, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v36 + 72) = 2082;
    v52 = v70;
    v53 = type metadata accessor for Date(0);
    v54 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
    v75 = sub_100016940(v55, v56, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 74, v36 + 82);
    swift_bridgeObjectRelease();
    sub_1000126B0(v52, type metadata accessor for BeaconEstimatedLocation);
    v57 = v67;
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v64, "Filtering the following latest location for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v36, 0x52u);
    v58 = v65;
    swift_arrayDestroy(v65, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {
    sub_100004048(v73, &qword_1010F7808);
    sub_100004048(v74, &qword_1010F7808);
    sub_1000126B0((uint64_t)v18, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0(v31, type metadata accessor for BeaconEstimatedLocation);

  }
}

_QWORD *sub_100314CC4(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66[16];
  uint64_t v67;
  double v68;
  uint64_t v69;
  char *v70;
  _BYTE v71[40];
  uint64_t v72[5];
  uint64_t v73;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v65 = (uint64_t)&v56 - v13;
  v14 = type metadata accessor for Date(0);
  v62 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v16);
  v63 = a1;
  v67 = a1;
  v68 = a2;
  v69 = v2;
  v70 = v16;
  v61 = v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
  OS_dispatch_queue.sync<A>(execute:)(sub_100330A64, v66, v17);
  if (*(_QWORD *)(v73 + 16))
  {
    v59 = v14;
    v18 = v73;
    sub_1003306E0(v73);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v19 = sub_100C1BA08(v72[0]);
    swift_bridgeObjectRelease();
    v20 = sub_100CA8018((uint64_t)&off_101049C58);
    swift_bridgeObjectRetain(v18);
    swift_retain();
    v21 = v63;
    swift_bridgeObjectRetain(v63);
    v23 = sub_10032F0E4(v22, v18, (uint64_t)&off_101049C30, v19 & 1, v2, v20);
    swift_bridgeObjectRelease();
    v24 = v23;
    swift_release();
    swift_bridgeObjectRelease();
    v25 = sub_100307DCC(v23);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    v60 = sub_10032F2F4(v26, v18, (uint64_t)v25);
    swift_bridgeObjectRelease();
    v58 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v24 + 16))
    {
      v27 = sub_1007C9498(0, 1, 1, _swiftEmptyArrayStorage);
      v29 = v27[2];
      v28 = v27[3];
      if (v29 >= v28 >> 1)
        v27 = sub_1007C9498((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
      v27[2] = v29 + 1;
      v30 = &v27[2 * v29];
      v30[4] = v24;
      *((_BYTE *)v30 + 40) = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = _swiftEmptyArrayStorage;
    }
    v57 = v27;
    v37 = v60[2];
    if (v37)
    {
      v56 = 0;
      v38 = (uint64_t)(v60 + 4);
      swift_bridgeObjectRetain(v60);
      v39 = _swiftEmptyArrayStorage;
      v64 = v12;
      do
      {
        sub_100030784(v38, (uint64_t)v72);
        sub_100030784((uint64_t)v72, (uint64_t)v71);
        v40 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
        v41 = swift_dynamicCast(v7, v71, v40, v8, 6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, v41 ^ 1u, 1, v8);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v72);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
        {
          sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EDC50);
        }
        else
        {
          v42 = v65;
          sub_1000126EC((uint64_t)v7, v65, type metadata accessor for LocalFindableAccessoryRecord);
          sub_1000126EC(v42, (uint64_t)v12, type metadata accessor for LocalFindableAccessoryRecord);
          if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
            v39 = (_QWORD *)sub_1007C9484(0, v39[2] + 1, 1, (unint64_t)v39);
          v44 = v39[2];
          v43 = v39[3];
          if (v44 >= v43 >> 1)
            v39 = (_QWORD *)sub_1007C9484(v43 > 1, v44 + 1, 1, (unint64_t)v39);
          v39[2] = v44 + 1;
          v45 = (uint64_t)v39
              + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
              + *(_QWORD *)(v9 + 72) * v44;
          v12 = v64;
          sub_1000126EC((uint64_t)v64, v45, type metadata accessor for LocalFindableAccessoryRecord);
        }
        v38 += 40;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease_n(v60, 2);
    }
    else
    {
      swift_bridgeObjectRelease();
      v39 = _swiftEmptyArrayStorage;
    }
    v46 = sub_100307F54((uint64_t)v39);
    swift_bridgeObjectRetain(v63);
    v48 = sub_10032F2F4(v47, v58, (uint64_t)v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v39[2])
    {
      v36 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
        v36 = sub_1007C9498(0, v36[2] + 1, 1, v36);
      v50 = v36[2];
      v49 = v36[3];
      if (v50 >= v49 >> 1)
        v36 = sub_1007C9498((_QWORD *)(v49 > 1), v50 + 1, 1, v36);
      v36[2] = v50 + 1;
      v51 = &v36[2 * v50];
      v51[4] = v39;
      *((_BYTE *)v51 + 40) = 2;
      v14 = v59;
      if (v48[2])
        goto LABEL_32;
    }
    else
    {
      swift_bridgeObjectRelease();
      v14 = v59;
      v36 = v57;
      if (v48[2])
      {
LABEL_32:
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
          v36 = sub_1007C9498(0, v36[2] + 1, 1, v36);
        v53 = v36[2];
        v52 = v36[3];
        if (v53 >= v52 >> 1)
          v36 = sub_1007C9498((_QWORD *)(v52 > 1), v53 + 1, 1, v36);
        v36[2] = v53 + 1;
        v54 = &v36[2 * v53];
        v54[4] = v48;
        *((_BYTE *)v54 + 40) = 0;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6D28);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Skipping fetching locations from server. No beacons remaining to fetch.", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  v36 = _swiftEmptyArrayStorage;
LABEL_39:
  (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v14);
  return v36;
}

uint64_t sub_100315408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[3];
  uint64_t *v26;
  _QWORD v27[6];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v27[2] = a5;
  v27[3] = a2;
  v27[4] = a3;
  swift_bridgeObjectRetain(a1);
  v15 = sub_10008B604((uint64_t)sub_100330AA0, v27, a1);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v25[2] = v5;
    v26 = a4;
    v31 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v16, 0);
    v25[1] = v15;
    v17 = v15 + 32;
    v18 = v31;
    do
    {
      sub_100030784(v17, (uint64_t)v28);
      v19 = v29;
      v20 = v30;
      sub_10001AA44(v28, v29);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8) + 32))(v19);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      {
        sub_10009A578(0, v18[2] + 1, 1);
        v18 = v31;
      }
      v22 = v18[2];
      v21 = v18[3];
      if (v22 >= v21 >> 1)
      {
        sub_10009A578(v21 > 1, v22 + 1, 1);
        v18 = v31;
      }
      v18[2] = v22 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v22, v14, v11);
      v31 = v18;
      v17 += 40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a4 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = _swiftEmptyArrayStorage;
  }
  v23 = sub_10001B664((uint64_t)v18);
  result = swift_bridgeObjectRelease();
  *a4 = v23;
  return result;
}

uint64_t sub_10031561C(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t (**v76)(uint64_t);
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t, unint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, unint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char v98;
  void (**v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, char *, unint64_t);
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void (*v125)(char *, unint64_t);
  char *v126;
  char *v127;
  os_log_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  void (*v135)(char *, char *, unint64_t);
  char *v136;
  os_log_t v137;
  char *v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  os_log_t v158;
  Class v159;
  void (*v160)(char *, unint64_t);
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v176;
  uint64_t v177;
  char v178;
  _QWORD *v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  Class v194;
  void (*v195)(char *, unint64_t);
  void (*v196)(char *, unint64_t);
  uint64_t (*v197)(uint64_t);
  unint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  os_log_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (**v222)(char *, uint64_t);
  char *v223;
  char *v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char *v230;
  os_log_t v231;
  uint64_t v232;
  uint64_t (**v233)(uint64_t);
  Class isa;
  uint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;

  v221 = a3;
  v219 = a2;
  v220 = type metadata accessor for Logger(0);
  v222 = *(void (***)(char *, uint64_t))(v220 - 8);
  v6 = __chkstk_darwin(v220);
  v206 = (char *)&v197 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v211 = (char *)&v197 - v8;
  v231 = (os_log_t)type metadata accessor for BeaconObservation(0);
  isa = v231[-1].isa;
  v9 = __chkstk_darwin(v231);
  v233 = (uint64_t (**)(uint64_t))((char *)&v197 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v230 = (char *)&v197 - v11;
  v229 = type metadata accessor for UUID(0);
  v214 = *(_QWORD *)(v229 - 8);
  v12 = __chkstk_darwin(v229);
  v202 = (char *)&v197 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v208 = (char *)&v197 - v15;
  v16 = __chkstk_darwin(v14);
  v217 = (char *)&v197 - v17;
  __chkstk_darwin(v16);
  v19 = (uint64_t (*)(uint64_t))((char *)&v197 - v18);
  v20 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v20);
  v213 = (uint64_t)&v197 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v23 = __chkstk_darwin(v22);
  v200 = (uint64_t)&v197 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v201 = (char *)&v197 - v26;
  v27 = __chkstk_darwin(v25);
  v216 = (char *)&v197 - v28;
  __chkstk_darwin(v27);
  v215 = (char *)&v197 - v29;
  v30 = type metadata accessor for Date(0);
  v227 = *(_QWORD *)(v30 - 8);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v197 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v31);
  v36 = (os_log_t)((char *)&v197 - v35);
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v197 - v38;
  v40 = __chkstk_darwin(v37);
  v199 = (char *)&v197 - v41;
  v42 = __chkstk_darwin(v40);
  v210 = (char *)&v197 - v43;
  v44 = __chkstk_darwin(v42);
  v209 = (char *)&v197 - v45;
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v197 - v47;
  v49 = __chkstk_darwin(v46);
  v226 = (char *)&v197 - v50;
  v51 = __chkstk_darwin(v49);
  v224 = (char *)&v197 - v52;
  v53 = __chkstk_darwin(v51);
  v228 = (char *)&v197 - v54;
  __chkstk_darwin(v53);
  v223 = (char *)&v197 - v55;
  if (qword_1010E9CF0 != -1)
    goto LABEL_61;
  while (1)
  {
    v56 = qword_1011B7160;
    v57 = a1;
    v59 = a1[3];
    v58 = a1[4];
    v225 = v57;
    sub_10001AA44(v57, v59);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v58 + 8) + 8) + 32))(v59);
    v212 = objc_autoreleasePoolPush();
    v60 = sub_10001A9A8(&qword_1010F7770);
    v61 = v232;
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v56, v60);
    v218 = v61;
    v62 = v237;
    v63 = v237[2];
    v205 = v33;
    v204 = v36;
    v203 = v39;
    v207 = v48;
    if (!v63)
    {
      swift_bridgeObjectRelease();
      v70 = _swiftEmptyArrayStorage;
      v74 = v223;
      v75 = v227;
      v36 = v231;
      goto LABEL_20;
    }
    v64 = sub_100003FB0((uint64_t)v19);
    v36 = v231;
    if ((v65 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v70 = _swiftEmptyArrayStorage;
      goto LABEL_19;
    }
    v66 = *(_QWORD *)(v62[7] + 8 * v64);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease();
    v67 = sub_100508D98(v66);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v67);
    v69 = v68;
    swift_release();
    v70 = _swiftEmptyArrayStorage;
    v237 = _swiftEmptyArrayStorage;
    v232 = *(_QWORD *)(v69 + 16);
    if (!v232)
      break;
    v197 = v19;
    v198 = v30;
    v30 = 0;
    a1 = _swiftEmptyArrayStorage;
    v19 = type metadata accessor for BeaconObservation;
    v48 = (char *)v222;
    v71 = (uint64_t)v230;
    while (v30 < *(_QWORD *)(v69 + 16))
    {
      v39 = (char *)((*((unsigned __int8 *)isa + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)isa + 80));
      v33 = (char *)*((_QWORD *)isa + 9);
      sub_10005972C((uint64_t)&v39[v69 + (_QWORD)v33 * v30], v71, type metadata accessor for BeaconObservation);
      if (*(_BYTE *)(v71 + SLODWORD(v36[3].isa)) == 5)
      {
        sub_1000126EC(v71, (uint64_t)v233, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) == 0)
          sub_10009AAC8(0, a1[2] + 1, 1);
        a1 = v237;
        v73 = v237[2];
        v72 = v237[3];
        if (v73 >= v72 >> 1)
        {
          sub_10009AAC8(v72 > 1, v73 + 1, 1);
          a1 = v237;
        }
        a1[2] = v73 + 1;
        sub_1000126EC((uint64_t)v233, (uint64_t)&v39[(_QWORD)a1 + v73 * (_QWORD)v33], type metadata accessor for BeaconObservation);
        v71 = (uint64_t)v230;
        v36 = v231;
      }
      else
      {
        sub_1000126B0(v71, type metadata accessor for BeaconObservation);
      }
      ++v30;
      v19 = type metadata accessor for BeaconObservation;
      if (v232 == v30)
      {
        v70 = v237;
        v30 = v198;
        v19 = v197;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_61:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  }
LABEL_18:
  swift_release();
LABEL_19:
  v74 = v223;
  v75 = v227;
LABEL_20:
  objc_autoreleasePoolPop(v212);
  v76 = *(uint64_t (***)(uint64_t))(v214 + 8);
  ((void (*)(uint64_t (*)(uint64_t), uint64_t))v76)(v19, v229);
  v77 = v213;
  sub_100A797E8((uint64_t)v70, v213);
  swift_bridgeObjectRelease();
  if ((*((unsigned int (**)(uint64_t, uint64_t, os_log_t))isa + 6))(v77, 1, v36) == 1)
  {
    sub_100004048(v77, &qword_1010EF660);
    v78 = *(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v75 + 56);
    v79 = (uint64_t)v215;
    v80 = v78(v215, 1, 1, v30);
LABEL_23:
    static Date.distantPast.getter(v80);
    sub_100004048(v79, (uint64_t *)&unk_1010EA690);
    goto LABEL_25;
  }
  v79 = (uint64_t)v215;
  (*(void (**)(char *, uint64_t, unint64_t))(v75 + 16))(v215, v77 + SHIDWORD(v36[2].isa), v30);
  sub_1000126B0(v77, type metadata accessor for BeaconObservation);
  v78 = *(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v75 + 56);
  v78((char *)v79, 0, 1, v30);
  v80 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v75 + 48))(v79, 1, v30);
  if ((_DWORD)v80 == 1)
    goto LABEL_23;
  (*(void (**)(char *, uint64_t, unint64_t))(v75 + 32))(v74, v79, v30);
LABEL_25:
  Date.addingTimeInterval(_:)(a4);
  v81 = v225[3];
  v82 = v225[4];
  sub_10001AA44(v225, v81);
  v83 = (uint64_t)v217;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v82 + 8) + 8) + 32))(v81);
  v84 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  v85 = *(_QWORD *)(v219 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
  if (*(_QWORD *)(v85 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v219 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating));
    v86 = sub_100003FB0(v83);
    v87 = v83;
    v89 = (uint64_t)v216;
    if ((v88 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, unint64_t))(v75 + 16))(v216, *(_QWORD *)(v85 + 56) + *(_QWORD *)(v75 + 72) * v86, v30);
      v90 = (char *)v89;
      v91 = 0;
    }
    else
    {
      v90 = v216;
      v91 = 1;
    }
    v78(v90, v91, 1, v30);
    swift_bridgeObjectRelease();
  }
  else
  {
    v92 = v216;
    v78(v216, 1, 1, v30);
    v87 = v83;
    v89 = (uint64_t)v92;
  }
  ((void (*)(uint64_t, uint64_t))v76)(v87, v229);
  v93 = v75;
  v94 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v75 + 48);
  v95 = v94(v89, 1, v30);
  v233 = v76;
  if ((_DWORD)v95 == 1)
  {
    static Date.distantPast.getter(v95);
    sub_100004048(v89, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, uint64_t, unint64_t))(v93 + 32))(v224, v89, v30);
  }
  v96 = v226;
  Date.addingTimeInterval(_:)(a4);
  v97 = v221;
  v98 = static Date.> infix(_:_:)(v96, v221);
  v99 = v222;
  if ((v98 & 1) != 0)
  {
    v100 = v220;
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v101 = sub_10001A9E8(v100, (uint64_t)qword_1011B6D28);
    v102 = v211;
    ((void (*)(char *, uint64_t, uint64_t))v99[2])(v211, v101, v100);
    sub_100030784((uint64_t)v225, (uint64_t)&v237);
    v104 = v226;
    v103 = v227;
    v105 = *(void (**)(char *, char *, unint64_t))(v227 + 16);
    v106 = v207;
    v105(v207, v226, v30);
    v107 = v209;
    v105(v209, v104, v30);
    v108 = v210;
    v109 = ((uint64_t (*)(char *, uint64_t, unint64_t))v105)(v210, v221, v30);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.default.getter(v110);
    LODWORD(isa) = v111;
    if (os_log_type_enabled(v110, v111))
    {
      v112 = swift_slowAlloc(42, -1);
      v113 = swift_slowAlloc(64, -1);
      v232 = v113;
      *(_DWORD *)v112 = 141558787;
      v235 = 1752392040;
      v236 = (_QWORD *)v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v112 + 4, v112 + 12);
      *(_WORD *)(v112 + 12) = 2081;
      v230 = (char *)(v112 + 14);
      v231 = v110;
      v115 = v238;
      v114 = v239;
      sub_10001AA44(&v237, v238);
      v116 = v208;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v114 + 8) + 8) + 32))(v115);
      v117 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v118 = v229;
      v119 = dispatch thunk of CustomStringConvertible.description.getter(v229, v117);
      v121 = v120;
      ((void (*)(char *, uint64_t))v233)(v116, v118);
      v235 = sub_100016940(v119, v121, (uint64_t *)&v236);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v230, v112 + 22);
      swift_bridgeObjectRelease();
      v122 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v237);
      *(_WORD *)(v112 + 22) = 2082;
      v123 = Date.debugDescription.getter(v122);
      v235 = sub_100016940(v123, v124, (uint64_t *)&v236);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v112 + 24, v112 + 32);
      swift_bridgeObjectRelease();
      v125 = *(void (**)(char *, unint64_t))(v103 + 8);
      v125(v106, v30);
      *(_WORD *)(v112 + 32) = 2050;
      v126 = v210;
      v127 = v209;
      v235 = Date.timeIntervalSince(_:)(v210);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v112 + 34, v112 + 42);
      v125(v127, v30);
      v125(v126, v30);
      v128 = v231;
      _os_log_impl((void *)&_mh_execute_header, v231, (os_log_type_t)isa, "Not fetching locations for beacon %{private,mask.hash}s.\nWaiting until %{public}s, %{public}f seconds due to locating in progress.", (uint8_t *)v112, 0x2Au);
      v129 = v232;
      swift_arrayDestroy(v232, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v112, -1, -1);

      v222[1](v211, v220);
LABEL_44:
      v125(v226, v30);
      v125(v224, v30);
      v125(v228, v30);
      v125(v223, v30);
      return 0;
    }

    v160 = *(void (**)(char *, unint64_t))(v103 + 8);
    v160(v107, v30);
    v160(v108, v30);
    v160(v106, v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v237);
    v222[1](v102, v100);
    v160(v104, v30);
    v160(v224, v30);
    v161 = v228;
    goto LABEL_49;
  }
  v130 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v97, v228, v30, v130) & 1) != 0)
  {
    v131 = v220;
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v132 = sub_10001A9E8(v131, (uint64_t)qword_1011B6D28);
    v133 = v206;
    ((void (*)(char *, uint64_t, uint64_t))v99[2])(v206, v132, v131);
    sub_100030784((uint64_t)v225, (uint64_t)&v237);
    v134 = v228;
    v135 = *(void (**)(char *, char *, unint64_t))(v227 + 16);
    v136 = v203;
    v135(v203, v228, v30);
    v137 = v204;
    v135((char *)v204, v134, v30);
    v138 = v205;
    v139 = ((uint64_t (*)(char *, uint64_t, unint64_t))v135)(v205, v221, v30);
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.default.getter(v140);
    v142 = v141;
    if (os_log_type_enabled(v140, v141))
    {
      v143 = swift_slowAlloc(42, -1);
      v144 = swift_slowAlloc(64, -1);
      isa = (Class)v144;
      *(_DWORD *)v143 = 141558787;
      v235 = 1752392040;
      v236 = (_QWORD *)v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v143 + 4, v143 + 12);
      *(_WORD *)(v143 + 12) = 2081;
      v230 = (char *)(v143 + 14);
      LODWORD(v232) = v142;
      v146 = v238;
      v145 = v239;
      sub_10001AA44(&v237, v238);
      v147 = *(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v145 + 8) + 8) + 32);
      v231 = v140;
      v148 = v208;
      v147(v146);
      v149 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v150 = v229;
      v151 = dispatch thunk of CustomStringConvertible.description.getter(v229, v149);
      v153 = v152;
      ((void (*)(char *, uint64_t))v233)(v148, v150);
      v235 = sub_100016940(v151, v153, (uint64_t *)&v236);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v230, v143 + 22);
      swift_bridgeObjectRelease();
      v154 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v237);
      *(_WORD *)(v143 + 22) = 2082;
      v155 = Date.debugDescription.getter(v154);
      v235 = sub_100016940(v155, v156, (uint64_t *)&v236);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v143 + 24, v143 + 32);
      swift_bridgeObjectRelease();
      v125 = *(void (**)(char *, unint64_t))(v227 + 8);
      v125(v136, v30);
      *(_WORD *)(v143 + 32) = 2050;
      v157 = v205;
      v235 = Date.timeIntervalSince(_:)(v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v143 + 34, v143 + 42);
      v125((char *)v137, v30);
      v125(v157, v30);
      v158 = v231;
      _os_log_impl((void *)&_mh_execute_header, v231, (os_log_type_t)v232, "Not fetching locations for beacon %{private,mask.hash}s.\nWaiting until %{public}s, %{public}f seconds.", (uint8_t *)v143, 0x2Au);
      v159 = isa;
      swift_arrayDestroy(isa, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v159, -1, -1);
      swift_slowDealloc(v143, -1, -1);

      v222[1](v206, v220);
      goto LABEL_44;
    }

    v160 = *(void (**)(char *, unint64_t))(v227 + 8);
    v160((char *)v137, v30);
    v160(v138, v30);
    v160(v136, v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v237);
    v99[1](v133, v220);
    v160(v226, v30);
    v160(v224, v30);
    v161 = v134;
LABEL_49:
    v160(v161, v30);
    v160(v223, v30);
    return 0;
  }
  v162 = v225[3];
  v163 = v225[4];
  sub_10001AA44(v225, v162);
  v164 = (uint64_t)v202;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v163 + 8) + 8) + 32))(v162);
  v165 = v227;
  v166 = v201;
  (*(void (**)(char *, uint64_t, unint64_t))(v227 + 16))(v201, v97, v30);
  v78(v166, 0, 1, v30);
  v167 = (uint64_t)v166;
  v168 = v219;
  v169 = *(_QWORD **)(v219 + v84);
  v237 = v169;
  if (v94(v167, 1, v30) == 1)
  {
    swift_bridgeObjectRetain(v169);
    sub_100004048(v167, (uint64_t *)&unk_1010EA690);
    v170 = v200;
    sub_100103914(v164, v200);
    ((void (*)(uint64_t, uint64_t))v233)(v164, v229);
    sub_100004048(v170, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v173 = (uint64_t)v199;
    (*(void (**)(char *, uint64_t, unint64_t))(v165 + 32))(v199, v167, v30);
    swift_bridgeObjectRetain(v169);
    v174 = (uint64_t)v237;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v237);
    v236 = (_QWORD *)v174;
    sub_10010BA5C(v173, v164, isUniquelyReferenced_nonNull_native);
    v237 = v236;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v233)(v164, v229);
  }
  v176 = (uint64_t)v237;
  v177 = *(_QWORD *)(v168 + v84);
  *(_QWORD *)(v168 + v84) = v237;
  swift_bridgeObjectRetain(v176);
  v178 = sub_100327520(v177, v176);
  swift_bridgeObjectRelease();
  v179 = v225;
  if ((v178 & 1) == 0)
    sub_1007EEF64(13);
  swift_bridgeObjectRelease();
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  sub_10001A9E8(v220, (uint64_t)qword_1011B6D28);
  v180 = sub_100030784((uint64_t)v179, (uint64_t)&v237);
  v181 = Logger.logObject.getter(v180);
  v182 = static os_log_type_t.default.getter(v181);
  if (os_log_type_enabled(v181, v182))
  {
    v183 = swift_slowAlloc(22, -1);
    v184 = swift_slowAlloc(32, -1);
    v185 = v30;
    isa = (Class)v184;
    *(_DWORD *)v183 = 141558275;
    v235 = 1752392040;
    v236 = (_QWORD *)v184;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v183 + 4, v183 + 12);
    *(_WORD *)(v183 + 12) = 2081;
    v232 = v183 + 14;
    v187 = v238;
    v186 = v239;
    sub_10001AA44(&v237, v238);
    v188 = v208;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v186 + 8) + 8) + 32))(v187);
    v189 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v190 = v229;
    v191 = dispatch thunk of CustomStringConvertible.description.getter(v229, v189);
    v193 = v192;
    ((void (*)(char *, uint64_t))v233)(v188, v190);
    v235 = sub_100016940(v191, v193, (uint64_t *)&v236);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v232, v183 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v237);
    _os_log_impl((void *)&_mh_execute_header, v181, v182, "Added ACSN locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v183, 0x16u);
    v171 = 1;
    v194 = isa;
    swift_arrayDestroy(isa, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v194, -1, -1);
    swift_slowDealloc(v183, -1, -1);

    v195 = *(void (**)(char *, unint64_t))(v227 + 8);
    v195(v226, v185);
    v195(v224, v185);
    v195(v228, v185);
    v195(v223, v185);
  }
  else
  {

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v237);
    v196 = *(void (**)(char *, unint64_t))(v227 + 8);
    v196(v226, v30);
    v196(v224, v30);
    v196(v228, v30);
    v196(v223, v30);
    return 1;
  }
  return v171;
}

BOOL sub_100316B5C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  _BYTE v95[48];

  v83 = a6;
  v72 = a5;
  v91 = a4;
  v92 = a3;
  v94 = a2;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v7);
  v78 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v80 = *(_QWORD *)(v82 - 8);
  v9 = __chkstk_darwin(v82);
  v77 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v79 = (uint64_t)&v71 - v11;
  v81 = type metadata accessor for URL(0);
  v87 = *(_QWORD *)(v81 - 8);
  v12 = __chkstk_darwin(v81);
  v74 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v73 = (char *)&v71 - v15;
  __chkstk_darwin(v14);
  v89 = (char *)&v71 - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v18 = __chkstk_darwin(v17);
  v75 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v76 = (uint64_t)&v71 - v20;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v21);
  v86 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OwnedBeaconRecord(0);
  v84 = *(_QWORD *)(v23 - 8);
  v85 = v23;
  __chkstk_darwin(v23);
  v88 = (uint64_t)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v25);
  v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for SharedBeaconRecord(0);
  v93 = *(char **)(v28 - 8);
  __chkstk_darwin(v28);
  v90 = (uint64_t)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1[3];
  v34 = a1[4];
  sub_10001AA44(a1, v35);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 8) + 32))(v35);
  LOBYTE(v34) = sub_100A07660((uint64_t)v33, v94);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  if ((v34 & 1) == 0)
    return 0;
  sub_100030784((uint64_t)a1, (uint64_t)v95);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v37 = swift_dynamicCast(v27, v95, v36, v28, 6);
  v38 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v93 + 7);
  if ((v37 & 1) != 0)
  {
    v38(v27, 0, 1, v28);
    v39 = v90;
    sub_1000126EC((uint64_t)v27, v90, type metadata accessor for SharedBeaconRecord);
    v40 = sub_1001C0B1C(*(unsigned __int8 *)(v39 + *(int *)(v28 + 64)), v92);
    sub_1000126B0(v39, type metadata accessor for SharedBeaconRecord);
    return v40;
  }
  v38(v27, 1, 1, v28);
  sub_100004048((uint64_t)v27, (uint64_t *)&unk_1010EE180);
  if ((v91 & 1) == 0)
    return 0;
  sub_100030784((uint64_t)a1, (uint64_t)v95);
  v41 = (uint64_t)v86;
  v42 = v36;
  v43 = v85;
  v44 = swift_dynamicCast(v86, v95, v42, v85, 6);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56);
  if ((v44 & 1) == 0)
  {
    v45(v41, 1, 1, v43);
    sub_100004048(v41, (uint64_t *)&unk_1010F47C0);
    return 0;
  }
  v45(v41, 0, 1, v43);
  v46 = v41;
  v47 = v88;
  sub_1000126EC(v46, v88, type metadata accessor for OwnedBeaconRecord);
  v48 = *(_QWORD *)(v72 + 280);
  v94 = v47 + *(int *)(v43 + 20);
  v49 = *(_QWORD *)(v48 + 160);
  if (qword_1010EA118 != -1)
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  v50 = v81;
  v51 = sub_10001A9E8(v81, (uint64_t)qword_1011B7B10);
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
  v53 = v89;
  v52(v89, v51, v50);
  v54 = v73;
  v52(v73, (uint64_t)v53, v50);
  v55 = v82;
  v56 = (uint64_t)v77;
  v93 = &v77[*(int *)(v82 + 40)];
  v57 = (uint64_t)v93;
  v58 = type metadata accessor for DirectorySequence(0);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
  v59(v57, 1, 1, v58);
  v52((char *)v56, (uint64_t)v54, v50);
  *(_QWORD *)(v56 + *(int *)(v55 + 36)) = v49;
  v60 = v74;
  v52(v74, (uint64_t)v54, v50);
  swift_retain();
  v61 = (uint64_t)v78;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v60, 0, 0);
  v62 = *(void (**)(char *, uint64_t))(v87 + 8);
  v62(v54, v50);
  v59(v61, 0, 1, v58);
  sub_100004084(v61, (uint64_t)v93, (uint64_t *)&unk_1010F77A0);
  v63 = v79;
  sub_100005CF0(v56, v79, (uint64_t *)&unk_1011115B0);
  v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
  v65 = (uint64_t)v75;
  v64(v75, 1, 1, v55);
  sub_100004048(v65, (uint64_t *)&unk_1010F77C0);
  sub_100005CF0(v63, v65, (uint64_t *)&unk_1011115B0);
  v64((char *)v65, 0, 1, v55);
  sub_100005CF0(v65, v76, (uint64_t *)&unk_1010F77B0);
  v66 = ((uint64_t (*)(char *, uint64_t))v62)(v89, v50);
  __chkstk_darwin(v66);
  v67 = v94;
  *(&v71 - 2) = v83;
  *(&v71 - 1) = v67;
  sub_100A79994(sub_100330A84, (uint64_t)(&v71 - 4));
  v69 = *(_QWORD *)(v68 + 16);
  swift_bridgeObjectRelease();
  v40 = v69 != 0;
  sub_1000126B0(v88, type metadata accessor for OwnedBeaconRecord);
  return v40;
}

uint64_t sub_100317284(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void (*v17)();
  uint64_t v18;
  void (*v19)(void *, uint64_t, __n128);
  __n128 v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void (*v40)();
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  id v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  __int128 aBlock;
  uint64_t (*v80)(uint64_t);
  void *v81;
  void (*v82)();
  _QWORD *v83;
  _QWORD v84[3];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[2];

  v69 = a5;
  v70 = a4;
  v77 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v74 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v9 - 8);
  v73 = v9;
  __chkstk_darwin(v9);
  v71 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v78 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87[0] = (uint64_t)_swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (v14)
  {
    v68 = a2;
    v15 = a2 + 32;
    while (1)
    {
      sub_100030784(v15, (uint64_t)&aBlock);
      v16 = v81;
      v17 = v82;
      sub_10001AA44(&aBlock, (uint64_t)v81);
      v18 = *(_QWORD *)(*((_QWORD *)v17 + 1) + 8);
      v19 = *(void (**)(void *, uint64_t, __n128))(v18 + 32);
      v20 = swift_bridgeObjectRetain(a1);
      v19(v16, v18, v20);
      if (!*(_QWORD *)(a1 + 16))
        break;
      sub_100003FB0((uint64_t)v13);
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v11);
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
        goto LABEL_9;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
LABEL_4:
      v15 += 40;
      if (!--v14)
      {
        v32 = (_QWORD *)v87[0];
        v33 = v68;
        v34 = v77;
        goto LABEL_16;
      }
    }
    (*(void (**)(char *, uint64_t))(v78 + 8))(v13, v11);
    swift_bridgeObjectRelease();
LABEL_9:
    sub_10000F9FC(&aBlock, (uint64_t)v84);
    v23 = v87[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v87[0]) & 1) == 0)
    {
      sub_10009A628(0, *(_QWORD *)(v23 + 16) + 1, 1);
      v23 = v87[0];
    }
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
      sub_10009A628(v24 > 1, v25 + 1, 1);
    v26 = v85;
    v27 = v86;
    v28 = sub_10009F5D0((uint64_t)v84, v85);
    __chkstk_darwin(v28);
    v30 = (char *)&v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v31 + 16))(v30);
    sub_1004AA86C(v25, (uint64_t)v30, v87, v26, v27);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
    goto LABEL_4;
  }
  v32 = _swiftEmptyArrayStorage;
  v33 = a2;
  v34 = v77;
LABEL_16:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v87[0] = (uint64_t)_swiftEmptyArrayStorage;
  v36 = v32[2];
  if (v36)
  {
    v37 = 0;
    v38 = (uint64_t)(v32 + 4);
    while (v37 < v32[2])
    {
      sub_100030784(v38, (uint64_t)&aBlock);
      v39 = v81;
      v40 = v82;
      sub_10001AA44(&aBlock, (uint64_t)v81);
      if (((*((uint64_t (**)(void *, void (*)()))v40 + 14))(v39, v40) & 1) != 0)
      {
        sub_10000F9FC(&aBlock, (uint64_t)v84);
        v41 = v87[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v87[0]) & 1) == 0)
        {
          sub_10009A628(0, *(_QWORD *)(v41 + 16) + 1, 1);
          v41 = v87[0];
        }
        v43 = *(_QWORD *)(v41 + 16);
        v42 = *(_QWORD *)(v41 + 24);
        if (v43 >= v42 >> 1)
          sub_10009A628(v42 > 1, v43 + 1, 1);
        v44 = v85;
        v45 = v86;
        v46 = sub_10009F5D0((uint64_t)v84, v85);
        __chkstk_darwin(v46);
        v48 = (char *)&v68 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v49 + 16))(v48);
        sub_1004AA86C(v43, (uint64_t)v48, v87, v44, v45);
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v84);
      }
      else
      {
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      }
      ++v37;
      v38 += 40;
      if (v36 == v37)
      {
        v50 = (_QWORD *)v87[0];
        v34 = v77;
        goto LABEL_29;
      }
    }
    __break(1u);
  }
  else
  {
    v50 = _swiftEmptyArrayStorage;
LABEL_29:
    swift_release();
    v51 = sub_100307DCC((uint64_t)v50);
    v52 = sub_10001B664((uint64_t)v51);
    swift_bridgeObjectRelease();
    if (v50[2])
    {
      v53 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v53);
      v54 = v70;
      *(&v68 - 6) = (uint64_t)v34;
      *(&v68 - 5) = v54;
      v55 = v69;
      *(&v68 - 4) = (uint64_t)v50;
      *(&v68 - 3) = v55;
      *(&v68 - 2) = v52;
      static Transaction.named<A>(_:with:)("beaconManagerService.ExhaustiveOnlineFetch", 42, 2, sub_1003306A8, &v68 - 8);
      swift_release();
      v56 = v54;
    }
    else
    {
      swift_release();
      v56 = v70;
    }
    v57 = (_QWORD *)swift_allocObject(&unk_10106BE80, 48, 7);
    v57[2] = v34;
    v57[3] = v33;
    v57[4] = v52;
    v57[5] = v56;
    v82 = sub_1003306D4;
    v83 = v57;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v80 = sub_100016FB8;
    v81 = &unk_10106BE98;
    v58 = _Block_copy(&aBlock);
    v59 = v34;
    swift_retain();
    swift_bridgeObjectRetain(v33);
    v60 = v71;
    static DispatchQoS.unspecified.getter(v61);
    v84[0] = _swiftEmptyArrayStorage;
    v62 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v63 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v64 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v65 = v74;
    v66 = v63;
    v67 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)(v84, v66, v64, v76, v62);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v60, v65, v58);
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v67);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v60, v73);
    return swift_release();
  }
  return result;
}

uint64_t sub_10031790C(uint64_t a1, dispatch_group_t group, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v12;
  NSObject *v13;

  if (group)
    dispatch_group_enter(group);
  v12 = (_QWORD *)swift_allocObject(&unk_10106BF20, 48, 7);
  v12[2] = a3;
  v12[3] = group;
  v12[4] = a1;
  v12[5] = a6;
  swift_retain();
  v13 = group;
  swift_retain();
  swift_bridgeObjectRetain(a6);
  sub_1003181EC(a4, a5, (void (*)(void))sub_100330964, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_1003179C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a2 + 56);
  v15 = (_QWORD *)swift_allocObject(&unk_10106BF48, 48, 7);
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a2;
  aBlock[4] = sub_100330A08;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106BF60;
  v16 = _Block_copy(aBlock);
  v17 = a3;
  swift_retain();
  swift_bridgeObjectRetain(a5);
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v24);
  return swift_release();
}

void sub_100317BDC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  int64_t v22;
  void (*v23)(char *, uint64_t);
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  NSObject *v57;
  NSObject *v58;
  char *v59;
  __n128 v60;
  uint64_t v61;
  int64_t v62;
  char *v63;
  char *v64;
  char *v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;

  v58 = a1;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v65 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v69 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v58 - v12;
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  v17 = *(_QWORD *)(a3 + 56);
  v61 = a3 + 56;
  v18 = 1 << *(_BYTE *)(a3 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v68 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  v62 = (unint64_t)(v18 + 63) >> 6;
  v21 = swift_bridgeObjectRetain(a3);
  v22 = 0;
  v21.n128_u64[0] = 141558275;
  v60 = v21;
  v59 = (char *)&type metadata for Any + 8;
  v63 = v16;
  v64 = v13;
  while (1)
  {
    if (v20)
    {
      v67 = (v20 - 1) & v20;
      v24 = __clz(__rbit64(v20)) | (v22 << 6);
      goto LABEL_22;
    }
    v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    if (v25 >= v62)
      goto LABEL_34;
    v26 = *(_QWORD *)(v61 + 8 * v25);
    ++v22;
    if (!v26)
    {
      v22 = v25 + 1;
      if (v25 + 1 >= v62)
        goto LABEL_34;
      v26 = *(_QWORD *)(v61 + 8 * v22);
      if (!v26)
      {
        v22 = v25 + 2;
        if (v25 + 2 >= v62)
          goto LABEL_34;
        v26 = *(_QWORD *)(v61 + 8 * v22);
        if (!v26)
          break;
      }
    }
LABEL_21:
    v67 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v22 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v9 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v29(v16, *(_QWORD *)(a3 + 48) + v28 * v24, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, v8) == 1)
      goto LABEL_35;
    v66 = v22;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v16, v8);
    v30 = *(_QWORD *)(a4 + v68);
    swift_bridgeObjectRetain_n(v30, 2);
    v31 = sub_100003FB0((uint64_t)v13);
    v33 = v32;
    swift_bridgeObjectRelease();
    if ((v33 & 1) != 0)
    {
      v34 = a4;
      v35 = a3;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
      v70 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100A9C52C();
        v30 = v70;
      }
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(*(_QWORD *)(v30 + 48) + v31 * v28, v8);
      v30 = v70;
      v37 = *(_QWORD *)(v70 + 56);
      v38 = type metadata accessor for Date(0);
      v39 = *(_QWORD *)(v38 - 8);
      v40 = v37 + *(_QWORD *)(v39 + 72) * v31;
      v41 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v65, v40, v38);
      sub_100106ACC(v31, v30);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
      a3 = v35;
      a4 = v34;
    }
    else
    {
      v42 = type metadata accessor for Date(0);
      v41 = (uint64_t)v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v65, 1, 1, v42);
    }
    sub_100004048(v41, (uint64_t *)&unk_1010EA690);
    v43 = *(_QWORD *)(a4 + v68);
    *(_QWORD *)(a4 + v68) = v30;
    swift_bridgeObjectRetain(v30);
    v44 = sub_100327520(v43, v30);
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0)
      sub_1007EEF64(13);
    swift_bridgeObjectRelease();
    v45 = v69;
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v46 = type metadata accessor for Logger(0);
    sub_10001A9E8(v46, (uint64_t)qword_1011B6D28);
    v47 = v64;
    v48 = ((uint64_t (*)(char *, char *, uint64_t))v29)(v45, v64, v8);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(32, -1);
      v70 = v52;
      *(_DWORD *)v51 = v60.n128_u32[0];
      *(_QWORD *)(v51 + 4) = 1752392040;
      *(_WORD *)(v51 + 12) = 2081;
      v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v8, v53);
      *(_QWORD *)(v51 + 14) = sub_100016940(v54, v55, &v70);
      swift_bridgeObjectRelease();
      v56 = *(void (**)(char *, uint64_t))(v9 + 8);
      v56(v69, v8);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Removed ACSN locating state for beacon: %{private,mask.hash}s - exhaustive fetch.", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy(v52, 1, v59);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v56(v47, v8);
    }
    else
    {

      v23 = *(void (**)(char *, uint64_t))(v9 + 8);
      v23(v45, v8);
      v23(v47, v8);
    }
    v13 = v47;
    v16 = v63;
    v22 = v66;
    v20 = v67;
  }
  v27 = v25 + 3;
  if (v27 < v62)
  {
    v26 = *(_QWORD *)(v61 + 8 * v27);
    if (!v26)
    {
      while (1)
      {
        v22 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_39;
        if (v22 >= v62)
          goto LABEL_34;
        v26 = *(_QWORD *)(v61 + 8 * v22);
        ++v27;
        if (v26)
          goto LABEL_21;
      }
    }
    v22 = v27;
    goto LABEL_21;
  }
LABEL_34:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v16, 1, 1, v8);
LABEL_35:
  swift_release();
  v57 = v58;
  sub_1003306E0(a3);
  if (v57)
    dispatch_group_leave(v57);
}

uint64_t sub_1003181EC(uint64_t a1, _QWORD *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, char *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t My;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  ValueMetadata *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  void (*v69)(void);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  __int128 v81;
  ValueMetadata *v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char v89;

  v70 = a4;
  v69 = a3;
  v71 = a1;
  v5 = type metadata accessor for UUID(0);
  v75 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (void (*)(char *, char *))((char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v8);
  v72 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2[3];
  v11 = a2[4];
  sub_10001AA44(a2, v10);
  LODWORD(v73) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  v12 = a2[3];
  v13 = a2[4];
  sub_10001AA44(a2, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 48))(v12, v13);
  v16 = v15;
  v18 = v17;
  v20 = a2[3];
  v19 = a2[4];
  sub_10001AA44(a2, v20);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v20, v19);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v22 = sub_100C1B1E8(v84);
  swift_bridgeObjectRelease();
  My = type metadata accessor for Feature.FindMy(0);
  *((_QWORD *)&v85 + 1) = My;
  *(_QWORD *)&v86 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v24 = sub_100018F08(&v84);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v24, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v84);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v84);
  *(_QWORD *)&v84 = v22;
  BYTE8(v84) = v73 & 1;
  *(_QWORD *)&v85 = &off_101049CD0;
  BYTE8(v85) = v14;
  *(_QWORD *)&v86 = v16;
  *((_QWORD *)&v86 + 1) = v18;
  *(_QWORD *)&v87 = v21;
  BYTE8(v87) = My & 1;
  v88 = 0uLL;
  v89 = 1;
  v25 = *(_QWORD *)(v74 + 280);
  v82 = &_s13DefaultPolicyVN;
  v83 = sub_100067E14();
  v26 = swift_allocObject(&unk_10106BD18, 97, 7);
  *(_QWORD *)&v81 = v26;
  v27 = v87;
  *(_OWORD *)(v26 + 48) = v86;
  *(_OWORD *)(v26 + 64) = v27;
  *(_OWORD *)(v26 + 80) = v88;
  *(_BYTE *)(v26 + 96) = v89;
  v28 = v85;
  *(_OWORD *)(v26 + 16) = v84;
  *(_OWORD *)(v26 + 32) = v28;
  v29 = qword_1010E9CF0;
  swift_retain();
  swift_bridgeObjectRetain(&off_101049CD0);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  v30 = v18;
  if (v29 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v31 = qword_1011B7160;
  swift_retain();
  v32 = _swiftEmptyArrayStorage;
  v33 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
  sub_1003F1570(v25, &v81, v31, v33, v72);
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B6D28);
  swift_bridgeObjectRetain_n(&off_101049CD0, 2);
  swift_bridgeObjectRetain_n(v18, 2);
  swift_bridgeObjectRetain_n(v21, 2);
  v68 = v35;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v74 = v21;
  if (v39)
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v73 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v81 = v73;
    *(_DWORD *)v40 = 136446210;
    v67 = v40 + 4;
    swift_bridgeObjectRetain(&off_101049CD0);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v21);
    v41 = sub_1003254B4();
    v43 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v76 = sub_100016940(v41, v43, (uint64_t *)&v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v67, v40 + 12);
    swift_bridgeObjectRelease_n(v74, 2);
    swift_bridgeObjectRelease_n(v30, 2);
    swift_bridgeObjectRelease_n(&off_101049CD0, 2);
    v21 = v74;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Exhaustive fetch with internal policy %{public}s.", v40, 0xCu);
    v44 = v73;
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
    swift_bridgeObjectRelease_n(v18, 2);
    swift_bridgeObjectRelease_n(&off_101049CD0, 2);
  }
  v80 = _swiftEmptyArrayStorage;
  v45 = *(_QWORD *)(v71 + 16);
  swift_bridgeObjectRetain(v71);
  if (v45)
  {
    v47 = v46 + 32;
    v73 = v30;
    do
    {
      sub_100030784(v47, (uint64_t)&v81);
      v49 = v82;
      v48 = v83;
      sub_10001AA44(&v81, (uint64_t)v82);
      (*(void (**)(ValueMetadata *))(*(_QWORD *)(*(_QWORD *)(v48 + 8) + 8) + 32))(v49);
      v50 = qword_1011B7160;
      swift_bridgeObjectRetain(&off_101049CD0);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v21);
      LOBYTE(v50) = sub_10032C9AC(v7, (uint64_t)&v84, v50);
      (*(void (**)(_QWORD, uint64_t))(v75 + 8))(v7, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
      {
        sub_10000F9FC(&v81, (uint64_t)&v76);
        v51 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
        {
          sub_10009A628(0, v51[2] + 1, 1);
          v51 = v80;
        }
        v53 = v51[2];
        v52 = v51[3];
        if (v53 >= v52 >> 1)
          sub_10009A628(v52 > 1, v53 + 1, 1);
        v54 = v78;
        v55 = v79;
        v56 = sub_10009F5D0((uint64_t)&v76, v78);
        __chkstk_darwin(v56);
        v58 = (char *)&v66 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v59 + 16))(v58);
        sub_1004AA86C(v53, (uint64_t)v58, (uint64_t *)&v80, v54, v55);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v76);
        v30 = v73;
        v21 = v74;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v81);
      }
      v47 += 40;
      --v45;
    }
    while (v45);
    v32 = v80;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = v72;
  if (v32[2])
  {
    sub_100656AEC((uint64_t)v32, (uint64_t)v69, v70);
    swift_release();
  }
  else
  {
    v61 = swift_release();
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Skipping exhaustive fetch since all beacons located recently.", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    sub_1006B9ED8((uint64_t)_swiftEmptyArrayStorage);
    v69();
    swift_bridgeObjectRelease();
  }
  return sub_1000126B0((uint64_t)v60, type metadata accessor for LocationFetcher);
}

void sub_100318A64(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  NSObject *v59;
  NSObject *v60;
  char *v61;
  __n128 v62;
  char *v63;
  char *v64;
  int64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  _QWORD *v73;

  v60 = a1;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v69 = (char *)&v60 - v15;
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v68 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100307DCC(a2);
  v19 = sub_10001B664((uint64_t)v18);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a3 + 16) <= *(_QWORD *)(v19 + 16) >> 3)
  {
    v73 = (_QWORD *)v19;
    sub_10063AFB0(a3);
    v20 = v73;
  }
  else
  {
    v20 = sub_10063D7D8(a3, v19);
  }
  v21 = v20[7];
  v64 = (char *)(v20 + 7);
  v22 = 1 << *((_BYTE *)v20 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v72 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  v65 = (unint64_t)(v22 + 63) >> 6;
  v25 = swift_bridgeObjectRetain(v20);
  v26 = 0;
  v25.n128_u64[0] = 141558275;
  v62 = v25;
  v61 = (char *)&type metadata for Any + 8;
  v28 = v68;
  v27 = (uint64_t)v69;
  v63 = v14;
  v66 = v9;
  v67 = v20;
  while (1)
  {
    if (v24)
    {
      v70 = (v24 - 1) & v24;
      v71 = v26;
      v30 = __clz(__rbit64(v24)) | (v26 << 6);
      goto LABEL_25;
    }
    v31 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
LABEL_42:
      __break(1u);
      return;
    }
    if (v31 >= v65)
      goto LABEL_37;
    v32 = *(_QWORD *)&v64[8 * v31];
    v33 = v26 + 1;
    if (!v32)
    {
      v33 = v26 + 2;
      if (v26 + 2 >= v65)
        goto LABEL_37;
      v32 = *(_QWORD *)&v64[8 * v33];
      if (!v32)
      {
        v33 = v26 + 3;
        if (v26 + 3 >= v65)
          goto LABEL_37;
        v32 = *(_QWORD *)&v64[8 * v33];
        if (!v32)
          break;
      }
    }
LABEL_24:
    v70 = (v32 - 1) & v32;
    v71 = v33;
    v30 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_25:
    v35 = *(_QWORD *)(v11 + 72);
    v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    v36(v28, v20[6] + v35 * v30, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v28, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v28, 1, v10) == 1)
      goto LABEL_38;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v27, v28, v10);
    v37 = *(_QWORD *)(a4 + v72);
    swift_bridgeObjectRetain_n(v37, 2);
    v38 = sub_100003FB0(v27);
    v40 = v39;
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
      v73 = (_QWORD *)v37;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100A9C52C();
        v37 = (uint64_t)v73;
      }
      (*(void (**)(unint64_t, uint64_t))(v11 + 8))(*(_QWORD *)(v37 + 48) + v38 * v35, v10);
      v37 = (uint64_t)v73;
      v42 = v73[7];
      v43 = type metadata accessor for Date(0);
      v44 = *(_QWORD *)(v43 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v44 + 32))(v9, v42 + *(_QWORD *)(v44 + 72) * v38, v43);
      sub_100106ACC(v38, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v9, 0, 1, v43);
      v14 = v63;
    }
    else
    {
      v45 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v9, 1, 1, v45);
    }
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010EA690);
    v46 = *(_QWORD *)(a4 + v72);
    *(_QWORD *)(a4 + v72) = v37;
    swift_bridgeObjectRetain(v37);
    v47 = sub_100327520(v46, v37);
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
      sub_1007EEF64(13);
    swift_bridgeObjectRelease();
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v48 = type metadata accessor for Logger(0);
    sub_10001A9E8(v48, (uint64_t)qword_1011B6D28);
    v49 = v69;
    v50 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v14, v69, v10);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc(22, -1);
      v54 = swift_slowAlloc(32, -1);
      v73 = (_QWORD *)v54;
      *(_DWORD *)v53 = v62.n128_u32[0];
      *(_QWORD *)(v53 + 4) = 1752392040;
      *(_WORD *)(v53 + 12) = 2081;
      v55 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v10, v55);
      *(_QWORD *)(v53 + 14) = sub_100016940(v56, v57, (uint64_t *)&v73);
      swift_bridgeObjectRelease();
      v58 = *(void (**)(char *, uint64_t))(v11 + 8);
      v58(v14, v10);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Removed ACSN locating state for beacon: %{private,mask.hash}s - online fetch.", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v54, 1, v61);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

      v58(v49, v10);
    }
    else
    {

      v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v14, v10);
      v29(v49, v10);
    }
    v27 = (uint64_t)v49;
    v20 = v67;
    v28 = v68;
    v9 = v66;
    v24 = v70;
    v26 = v71;
  }
  v34 = v26 + 4;
  if (v26 + 4 < v65)
  {
    v32 = *(_QWORD *)&v64[8 * v34];
    if (!v32)
    {
      while (1)
      {
        v33 = v34 + 1;
        if (__OFADD__(v34, 1))
          goto LABEL_42;
        if (v33 >= v65)
          goto LABEL_37;
        v32 = *(_QWORD *)&v64[8 * v33];
        ++v34;
        if (v32)
          goto LABEL_24;
      }
    }
    v33 = v26 + 4;
    goto LABEL_24;
  }
LABEL_37:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v28, 1, 1, v10);
LABEL_38:
  swift_release();
  v59 = v60;
  sub_1003306E0((uint64_t)v20);
  swift_bridgeObjectRelease();
  if (v59)
    dispatch_group_leave(v59);
}

uint64_t sub_1003190C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char *v35;
  void (*v36)(_QWORD, _QWORD, _QWORD);
  __int128 v37;
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v54;
  uint64_t result;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  __int128 v59;
  char *v60;
  char *v61;
  void (*v62)(_QWORD, _QWORD, _QWORD);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66[3];
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;

  v57 = a3;
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v65 - 8);
  v9 = __chkstk_darwin(v65);
  v61 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v64 = (char *)&v56 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v56 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = _swiftEmptyArrayStorage;
  v60 = v7;
  if (v15)
  {
    v69 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v15, 0);
    v17 = a1 + 32;
    v16 = v69;
    do
    {
      sub_100030784(v17, (uint64_t)v66);
      v19 = v67;
      v18 = v68;
      sub_10001AA44(v66, v67);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) + 32))(v19);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_10009A578(0, v16[2] + 1, 1);
        v16 = v69;
      }
      v21 = v16[2];
      v20 = v16[3];
      if (v21 >= v20 >> 1)
      {
        sub_10009A578(v20 > 1, v21 + 1, 1);
        v16 = v69;
      }
      v16[2] = v21 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v21, v14, v65);
      v69 = v16;
      v17 += 40;
      --v15;
    }
    while (v15);
    v7 = v60;
  }
  v22 = v65;
  v23 = sub_10001B664((uint64_t)v16);
  swift_bridgeObjectRelease();
  v24 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating;
  v25 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating);
  if (*(_QWORD *)(v25 + 16) <= *(_QWORD *)(v23 + 16) >> 3)
  {
    v66[0] = v23;
    swift_bridgeObjectRetain(v25);
    sub_10063AFB0(v28);
    swift_bridgeObjectRelease();
    v27 = (void *)v66[0];
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a2
                                       + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating));
    v27 = sub_10063D7D8(v26, v23);
    swift_bridgeObjectRelease();
  }
  v29 = sub_100508DAC((uint64_t)v27);
  swift_bridgeObjectRelease();
  v66[0] = *(_QWORD *)(a2 + v24);
  v30 = v66[0];
  swift_retain();
  swift_bridgeObjectRetain(v30);
  sub_100BD1FDC((uint64_t)v29);
  swift_release();
  v31 = v66[0];
  v32 = *(_QWORD *)(a2 + v24);
  *(_QWORD *)(a2 + v24) = v66[0];
  swift_bridgeObjectRetain(v31);
  v33 = sub_10051E5DC(v32, v31);
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
    sub_1007EEF64(13);
  swift_bridgeObjectRelease();
  v34 = v29[2];
  v56 = v29;
  if (v34)
  {
    v35 = (char *)v29 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v63 = *(_QWORD *)(v8 + 72);
    v36 = *(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 16);
    swift_retain();
    *(_QWORD *)&v37 = 141558275;
    v59 = v37;
    v58 = (char *)&type metadata for Any + 8;
    v38 = v61;
    v39 = v64;
    v62 = v36;
    while (1)
    {
      v36(v7, v35, v22);
      v41 = *(char **)(v8 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v41)(v7, 0, 1, v22);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v22) == 1)
        break;
      v61 = v41;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v39, v7, v22);
      if (qword_1010E9B58 != -1)
        swift_once(&qword_1010E9B58, sub_1003087EC);
      v42 = type metadata accessor for Logger(0);
      sub_10001A9E8(v42, (uint64_t)qword_1011B6D28);
      v43 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v38, v39, v22);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = swift_slowAlloc(22, -1);
        v47 = swift_slowAlloc(32, -1);
        v66[0] = v47;
        *(_DWORD *)v46 = v59;
        *(_QWORD *)(v46 + 4) = 1752392040;
        *(_WORD *)(v46 + 12) = 2081;
        v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v49 = dispatch thunk of CustomStringConvertible.description.getter(v65, v48);
        *(_QWORD *)(v46 + 14) = sub_100016940(v49, v50, v66);
        swift_bridgeObjectRelease();
        v40 = *(void (**)(char *, uint64_t))(v8 + 8);
        v40(v38, v65);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Added disk locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy(v47, 1, v58);
        v51 = v47;
        v7 = v60;
        swift_slowDealloc(v51, -1, -1);
        v52 = v46;
        v22 = v65;
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        v40 = *(void (**)(char *, uint64_t))(v8 + 8);
        v40(v38, v22);
      }

      v39 = v64;
      v40(v64, v22);
      v36 = v62;
      v35 += v63;
      if (!--v34)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v61)(v7, 1, 1, v22);
        break;
      }
    }
  }
  else
  {
    v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    swift_retain();
    v53(v7, 1, 1, v22);
  }
  v54 = v56;
  result = swift_release();
  *v57 = v54;
  return result;
}

uint64_t sub_100319660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  __n128 v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  __n128 v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v40;
  uint64_t v42;
  char *v43;
  __n128 v44;
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v48)(_QWORD, _QWORD, _QWORD);
  uint64_t v49;
  uint64_t v50;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v45 = (char *)&v42 - v10;
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v46 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating;
  v50 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating);
  swift_bridgeObjectRetain(v50);
  sub_10063B6C0(a3);
  v14 = v50;
  v15 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a2 + v13) = v50;
  swift_bridgeObjectRetain(v14);
  v16 = sub_10051E5DC(v15, v14);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
    sub_1007EEF64(13);
  swift_bridgeObjectRelease();
  v17 = a3;
  v18 = *(_QWORD *)(a3 + 16);
  v42 = v17;
  if (v18)
  {
    v19 = v17 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v49 = *(_QWORD *)(v6 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16);
    v21 = swift_bridgeObjectRetain(v17);
    v21.n128_u64[0] = 141558275;
    v44 = v21;
    v43 = (char *)&type metadata for Any + 8;
    v23 = v45;
    v22 = v46;
    v48 = v20;
    while (1)
    {
      v20(v22, v19, v5);
      v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v26)(v22, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v22, 1, v5) == 1)
        break;
      v47 = v26;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v23, v22, v5);
      if (qword_1010E9B58 != -1)
        swift_once(&qword_1010E9B58, sub_1003087EC);
      v27 = type metadata accessor for Logger(0);
      sub_10001A9E8(v27, (uint64_t)qword_1011B6D28);
      v28 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v9, v23, v5);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v32 = v6;
        v33 = swift_slowAlloc(32, -1);
        v50 = v33;
        *(_DWORD *)v31 = v44.n128_u32[0];
        *(_QWORD *)(v31 + 4) = 1752392040;
        *(_WORD *)(v31 + 12) = 2081;
        v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of CustomStringConvertible.description.getter(v5, v34);
        *(_QWORD *)(v31 + 14) = sub_100016940(v35, v36, &v50);
        swift_bridgeObjectRelease();
        v24 = *(void (**)(char *, uint64_t))(v32 + 8);
        v24(v9, v5);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Shared fetch - Removed disk locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v33, 1, v43);
        v37 = v33;
        v6 = v32;
        v23 = v45;
        swift_slowDealloc(v37, -1, -1);
        v38 = v31;
        v22 = v46;
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        v24 = *(void (**)(char *, uint64_t))(v6 + 8);
        v24(v9, v5);
      }

      v24(v23, v5);
      v20 = v48;
      v19 += v49;
      if (!--v18)
      {
        v47(v22, 1, 1, v5, v25);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    v40 = swift_bridgeObjectRetain(v17);
    v39(v46, 1, 1, v5, v40);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100319A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v23[5];

  v14 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v23[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a2 + 280);
  sub_100030784(a3, (uint64_t)v23);
  v18 = qword_1010E9CF0;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  if (v18 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v19 = qword_1011B7160;
  swift_retain();
  sub_1003F1570(v17, v23, v19, a4, v16);
  v20 = (_QWORD *)swift_allocObject(&unk_10106BE58, 40, 7);
  v20[2] = a1;
  v20[3] = a6;
  v20[4] = a7;
  swift_retain();
  swift_retain();
  sub_100656AEC(a5, (uint64_t)sub_100330668, (uint64_t)v20);
  swift_release();
  return sub_1000126B0((uint64_t)v16, type metadata accessor for LocationFetcher);
}

uint64_t sub_100319B8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t My;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33[3];
  ValueMetadata *v34;
  unint64_t v35;
  void (*v36)(_QWORD *);

  v36 = a4;
  v30 = a3;
  v8 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v12 = objc_msgSend(v11, "bundleIdentifier");

  if (v12)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = sub_1005CC484();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v29 = v5;
  v17 = sub_100C1B1E8(v33[0]);
  swift_bridgeObjectRelease();
  My = type metadata accessor for Feature.FindMy(0);
  v34 = (ValueMetadata *)My;
  v35 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v19 = sub_100018F08(v33);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v19, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  v20 = isFeatureEnabled(_:)(v33);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  v21 = *(_QWORD *)(a2 + 280);
  v34 = &_s13DefaultPolicyVN;
  v35 = sub_100067E14();
  v22 = swift_allocObject(&unk_10106BD18, 97, 7);
  v33[0] = v22;
  *(_QWORD *)(v22 + 16) = v17;
  *(_BYTE *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = &off_101049CF8;
  *(_BYTE *)(v22 + 40) = 0;
  *(_QWORD *)(v22 + 48) = v13;
  *(_QWORD *)(v22 + 56) = v15;
  *(_QWORD *)(v22 + 64) = v16;
  *(_BYTE *)(v22 + 72) = v20 & 1;
  *(_QWORD *)(v22 + 80) = 0;
  *(_QWORD *)(v22 + 88) = 0;
  *(_BYTE *)(v22 + 96) = 1;
  v23 = qword_1010E9CF0;
  swift_retain();
  if (v23 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v24 = qword_1011B7160;
  swift_retain();
  v25 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
  sub_1003F1570(v21, v33, v24, v25, v10);
  sub_10080B648(v30, (uint64_t)&v31);
  if (v32)
  {
    sub_10000F9FC(&v31, (uint64_t)v33);
    v26 = sub_10001A9A8(&qword_1010F7A80);
    v27 = swift_allocObject(v26, 72, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
    sub_100030784((uint64_t)v33, v27 + 32);
    swift_retain();
    sub_100420368(v27, v10, v36, a5);
    swift_bridgeObjectRelease();
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  }
  else
  {
    sub_100004048((uint64_t)&v31, (uint64_t *)&unk_1010EE310);
    v36(_swiftEmptyArrayStorage);
  }
  return sub_1000126B0((uint64_t)v10, type metadata accessor for LocationFetcher);
}

uint64_t sub_100319EE0(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  id v27;
  Class isa;
  Class v29;
  Class v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD v37[3];
  void (*v38)(_QWORD *);
  uint64_t v39;
  _QWORD *v40;

  v6 = (int *)type metadata accessor for RawSearchResult(0);
  v7 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6);
  v9 = (unsigned __int8 *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  __chkstk_darwin(v10);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000FC3E8(a1);
  if (!v13)
    goto LABEL_12;
  v14 = v13;
  v15 = *(_QWORD *)(v13 + 16);
  v16 = type metadata accessor for BeaconEstimatedLocation(0);
  v17 = *(_QWORD *)(v16 - 8);
  if (v15)
  {
    sub_10005972C(v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), (uint64_t)v12, type metadata accessor for BeaconEstimatedLocation);
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, v18, 1, v16);
  swift_bridgeObjectRelease();
  type metadata accessor for BeaconEstimatedLocation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F7810);
    goto LABEL_12;
  }
  v19 = *(_QWORD **)&v12[*(int *)(v16 + 52)];
  swift_bridgeObjectRetain(v19);
  sub_1000126B0((uint64_t)v12, type metadata accessor for BeaconEstimatedLocation);
  if (!v19)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v19 = _swiftEmptyArrayStorage;
    v20 = _swiftEmptyArrayStorage[2];
    if (!v20)
      goto LABEL_13;
    goto LABEL_9;
  }
  v20 = v19[2];
  if (!v20)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    a2(_swiftEmptyArrayStorage);
    return swift_bridgeObjectRelease();
  }
LABEL_9:
  v37[2] = a3;
  v38 = a2;
  v40 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v20);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v37[1] = v19;
  v22 = (uint64_t)v19 + ((v21 + 32) & ~v21);
  v39 = *(_QWORD *)(v7 + 72);
  do
  {
    sub_10005972C(v22, (uint64_t)v9, type metadata accessor for RawSearchResult);
    v23 = *v9;
    v24 = *(double *)&v9[v6[6]];
    v25 = *(double *)&v9[v6[7]];
    v26 = *(double *)&v9[v6[8]];
    v27 = objc_allocWithZone((Class)SPRawSearchResult);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v29 = Data._bridgeToObjectiveC()().super.isa;
    v30 = Date._bridgeToObjectiveC()().super.isa;
    v31 = objc_msgSend(v27, "initWithHashedPublicKey:publicKey:status:timestamp:latitude:longitude:horizontalAccuracy:", isa, v29, v23, v30, v24, v25, v26);

    v32 = sub_1000126B0((uint64_t)v9, type metadata accessor for RawSearchResult);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v32);
    v33 = v40[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33);
    v34 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v31);
    specialized ContiguousArray._endMutation()(v34);
    v22 += v39;
    --v20;
  }
  while (v20);
  v35 = v40;
  swift_bridgeObjectRelease();
  v38(v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10031A1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47[6];

  v42 = a1;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v43 = v13;
  v44 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - v14;
  if (qword_1010E9930 != -1)
    swift_once(&qword_1010E9930, sub_1000AEA0C);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B6730);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17 = v41(v15, a2, v10);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(25, -1);
    v39 = v9;
    v21 = v20;
    v37 = swift_slowAlloc(32, -1);
    v47[0] = v37;
    *(_DWORD *)v21 = 16777987;
    LOBYTE(v45) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 1, v21 + 4, v21 + 5);
    *(_WORD *)(v21 + 5) = 2160;
    *(_QWORD *)&v45 = 1752392040;
    v40 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8, v21 + 7, v21 + 15);
    *(_WORD *)(v21 + 15) = 2081;
    v38 = v11;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v10, v22);
    *(_QWORD *)&v45 = sub_100016940(v23, v24, v47);
    a4 = v40;
    v11 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8, v21 + 17, v21 + 25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "        OwnerSessionProtocol: updateBatteryStatus %hhufor beacon %{private,mask.hash}s.", (uint8_t *)v21, 0x19u);
    v25 = v37;
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v26 = v21;
    v9 = v39;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }

  sub_10080B648(a2, (uint64_t)&v45);
  if (v46)
  {
    sub_10000F9FC(&v45, (uint64_t)v47);
    v27 = sub_100DC5E3C(v47);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
    __asm { BR              X10 }
  }
  sub_100004048((uint64_t)&v45, (uint64_t *)&unk_1010EE310);
  v28 = sub_100DC731C(v42);
  if (v28 == 7)
    v29 = 0;
  else
    v29 = v28;
  v30 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
  v31 = v44;
  v41(v44, a2, v10);
  v32 = *(unsigned __int8 *)(v11 + 80);
  v33 = (v32 + 48) & ~v32;
  v34 = v33 + v43;
  v35 = (char *)swift_allocObject(&unk_10106CC68, v33 + v43 + 1, v32 | 7);
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = 0;
  *((_QWORD *)v35 + 4) = a3;
  *((_QWORD *)v35 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v35[v33], v31, v10);
  v35[v34] = v29;
  swift_retain();
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_1010F7AA0, (uint64_t)v35);
  return swift_release();
}

uint64_t sub_10031A624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;

  *(_BYTE *)(v7 + 192) = a7;
  *(_QWORD *)(v7 + 144) = a5;
  *(_QWORD *)(v7 + 152) = a6;
  *(_QWORD *)(v7 + 136) = a4;
  return swift_task_switch(sub_10031A644, 0, 0);
}

uint64_t sub_10031A644()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBE8 + dword_1010EBBE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBEC);
    *(_QWORD *)(v0 + 160) = v2;
    *v2 = v0;
    v2[1] = sub_10031A730;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10031A730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10031A78C, 0, 0);
}

uint64_t sub_10031A78C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void (*v4)(void *);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_101118704);
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = sub_10031A8A8;
    return sub_100BE5B24(*(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 192));
  }
  else
  {
    v4 = *(void (**)(void *))(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for UpdateBatteryLevelError(0);
    v6 = v5;
    *(_QWORD *)(v0 + 128) = 3;
    v7 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v8 = sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v7, v6, v8);
    v9 = *(void **)(v0 + 120);
    v4(v9);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10031A8A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10031A94C;
  else
    v3 = sub_10031A90C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10031A90C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD))(v0 + 136))(0);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031A94C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(void (**)(uint64_t))(v0 + 136);
  swift_errorRetain(v1);
  v3(v1);
  swift_release(v2);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031A9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v60 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v59 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v58 = (char *)&v50 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v50 - v16;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B6F48);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v19(v17, a1, v7);
  v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v15, a2, v7);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v57 = v21;
  v56 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(42, -1);
    v53 = a2;
    v24 = v23;
    v51 = swift_slowAlloc(96, -1);
    v63 = v51;
    *(_DWORD *)v24 = 136446979;
    v62 = sub_100016940(0xD00000000000003ELL, 0x8000000100ED1490, &v63);
    v55 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2082;
    v50 = v15;
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = v19;
    v26 = v25;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v25);
    v62 = sub_100016940(v27, v28, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    v54 = a1;
    v29 = v8;
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v30(v17, v7);
    *(_WORD *)(v24 + 22) = 2160;
    v62 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 24, v24 + 32);
    *(_WORD *)(v24 + 32) = 2081;
    v31 = v50;
    v32 = v26;
    v19 = v52;
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v7, v32);
    v62 = sub_100016940(v33, v34, &v63);
    a4 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease();
    v30(v31, v7);
    v8 = v29;
    a1 = v54;
    v35 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v56, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s", (uint8_t *)v24, 0x2Au);
    v36 = v51;
    swift_arrayDestroy(v51, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    v37 = v24;
    a2 = v53;
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {
    v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v17, v7);
    v38(v15, v7);

  }
  type metadata accessor for Transaction(0);
  v39 = v58;
  v19(v58, a2, v7);
  v40 = v59;
  v19(v59, a1, v7);
  v41 = *(unsigned __int8 *)(v8 + 80);
  v42 = (v41 + 40) & ~v41;
  v43 = v8;
  v44 = (v9 + v41 + v42) & ~v41;
  v45 = (char *)swift_allocObject(&unk_10106CAD8, v44 + v9, v41 | 7);
  v46 = v60;
  *((_QWORD *)v45 + 2) = v61;
  *((_QWORD *)v45 + 3) = v46;
  *((_QWORD *)v45 + 4) = a4;
  v47 = &v45[v42];
  v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v48(v47, v39, v7);
  v48(&v45[v44], v40, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.startBTFinding", 35, 2, &unk_1010F7A60, v45);
  return swift_release();
}

uint64_t sub_10031AE14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5[38] = a4;
  v5[39] = a5;
  v5[36] = a2;
  v5[37] = a3;
  v5[35] = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v6);
  v5[41] = swift_task_alloc(v6);
  v7 = type metadata accessor for AccessoryCommand(0);
  v5[42] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[43] = swift_task_alloc(v8);
  v5[44] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v5[45] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[46] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[47] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[48] = swift_task_alloc(v12);
  v5[49] = swift_task_alloc(v12);
  v5[50] = swift_task_alloc(v12);
  v5[51] = swift_task_alloc(v12);
  v5[52] = swift_task_alloc(v12);
  v5[53] = swift_task_alloc(v12);
  v5[54] = swift_task_alloc(v12);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v5[55] = v13;
  v5[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10031AF5C, 0, 0);
}

uint64_t sub_10031AF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 456) = v3;
    *v3 = v0;
    v3[1] = sub_10031B05C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10031B05C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10031B0B8, 0, 0);
}

uint64_t sub_10031B0B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(void);
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (__cdecl *v23)();
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 464);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v23 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 472) = v3;
      *v3 = v0;
      v3[1] = sub_10031B310;
      return v23();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startBTFinding!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(void (**)(void))(v0 + 288);

    v10 = sub_10028FA08();
    v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0, 0);
    *v12 = 11;
    v9();
    swift_errorRelease(v11);
    v13 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 432);
    v16 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 416);
    v18 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 400);
    v19 = *(_QWORD *)(v0 + 384);
    v21 = *(_QWORD *)(v0 + 344);
    v20 = *(_QWORD *)(v0 + 352);
    v22 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 320);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10031B310(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10031B36C, 0, 0);
}

uint64_t sub_10031B36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(void);
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v1)
    return swift_task_switch(sub_10031B564, *(_QWORD *)(v0 + 480), 0);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6F48);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor to startBTFinding!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(void (**)(void))(v0 + 288);

  v9 = sub_10028FA08();
  v10 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v9, 0, 0);
  *v11 = 11;
  v8();
  swift_errorRelease(v10);
  swift_release();
  v12 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 344);
  v19 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 328);
  v22 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031B564()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[60];
  v2 = v0[54];
  v4 = v0[46];
  v3 = v0[47];
  v5 = v0[45];
  v6 = v0[38];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[61] = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10106CB00, v9 + v3, v8 | 7);
  v0[62] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[63] = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[64] = v13;
  *v13 = v0;
  v13[1] = sub_10031B648;
  return unsafeBlocking<A>(_:)(v0[56], sub_100336654, v10, v0[55]);
}

uint64_t sub_10031B648()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  swift_release();
  return swift_task_switch(sub_10031B6A8, 0, 0);
}

uint64_t sub_10031B6A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v48;

  v1 = v0[56];
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    v3 = 0;
  }
  else
  {
    sub_1009A2CF8();
    v5 = v4;
    v6 = SPBeaconTypeHele;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11)
      v3 = 1;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    v13 = v0[56];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000126B0(v13, type metadata accessor for OwnedBeaconRecord);
  }
  v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[61];
  v15 = v0[53];
  v16 = v0[45];
  v17 = v0[46];
  v19 = v0[40];
  v18 = v0[41];
  v20 = v0[38];
  v14(v18, v0[39], v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
  v14(v15, v20, v16);
  sub_10000F9B8(v18, v19, &qword_1010ED860);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16);
  if ((_DWORD)v21 == 1)
  {
    v23 = v0[40];
    v22 = v0[41];
    UUID.init()(v21);
    sub_100004048(v22, &qword_1010ED860);
    sub_100004048(v23, &qword_1010ED860);
  }
  else
  {
    v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[63];
    v25 = v0[52];
    v26 = v0[45];
    v27 = v0[40];
    sub_100004048(v0[41], &qword_1010ED860);
    v24(v25, v27, v26);
  }
  v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[63];
  v29 = v0[53];
  v31 = v0[44];
  v30 = v0[45];
  v32 = (int *)v0[42];
  v28(v31, v0[52], v30);
  v28(v31 + v32[5], v29, v30);
  v33 = v31 + v32[6];
  *(_QWORD *)v33 = 120;
  *(_BYTE *)(v33 + 8) = 2;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v34 = v0[43];
  v35 = v0[44];
  v36 = type metadata accessor for Logger(0);
  v0[65] = sub_10001A9E8(v36, (uint64_t)qword_1011B6F48);
  v37 = sub_10005972C(v35, v34, type metadata accessor for AccessoryCommand);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = v0[43];
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v48 = v43;
    *(_DWORD *)v42 = 136315138;
    sub_100C58714();
    v0[34] = sub_100016940(v44, v45, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v41, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Executing startBTFinding command: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[43], type metadata accessor for AccessoryCommand);
  }

  v46 = (_QWORD *)swift_task_alloc(dword_10111F17C);
  v0[66] = v46;
  *v46 = v0;
  v46[1] = sub_10031BA8C;
  return sub_100D4F944(v0[44]);
}

uint64_t sub_10031BA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10031BE54;
  else
    v3 = sub_10031BAF0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10031BAF0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *log;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 304);
  v1(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 312), v3);
  v5 = v1(v2, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    log = v6;
    v8 = *(_QWORD *)(v0 + 408);
    v32 = *(_QWORD *)(v0 + 400);
    v9 = *(_QWORD *)(v0 + 360);
    v30 = *(_QWORD *)(v0 + 368);
    v10 = swift_slowAlloc(42, -1);
    v34 = swift_slowAlloc(96, -1);
    v36 = v34;
    *(_DWORD *)v10 = 136446979;
    *(_QWORD *)(v0 + 240) = sub_100016940(0xD00000000000003ELL, 0x8000000100ED1490, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2082;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(_QWORD *)(v0 + 248) = sub_100016940(v12, v13, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    v14 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v14(v8, v9);
    *(_WORD *)(v10 + 22) = 2160;
    *(_QWORD *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(_QWORD *)(v0 + 264) = sub_100016940(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    v14(v32, v9);
    v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v7, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!", (uint8_t *)v10, 0x2Au);
    swift_arrayDestroy(v34, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 400);
    v18 = *(_QWORD *)(v0 + 360);
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 368) + 8);
    v19(*(_QWORD *)(v0 + 408), v18);
    v19(v17, v18);
  }

  (*(void (**)(_QWORD))(v0 + 288))(0);
  swift_release();
  swift_release();
  sub_1000126B0(*(_QWORD *)(v0 + 352), type metadata accessor for AccessoryCommand);
  v20 = *(_QWORD *)(v0 + 424);
  v21 = *(_QWORD *)(v0 + 432);
  v23 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 392);
  v24 = *(_QWORD *)(v0 + 400);
  v26 = *(_QWORD *)(v0 + 384);
  v28 = *(_QWORD *)(v0 + 344);
  v27 = *(_QWORD *)(v0 + 352);
  v33 = *(_QWORD *)(v0 + 328);
  v35 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031BE54()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 304);
  v2(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 312), v4);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v39 = *(_QWORD *)(v0 + 536);
    v9 = *(_QWORD *)(v0 + 392);
    v37 = *(_QWORD *)(v0 + 384);
    v10 = *(_QWORD *)(v0 + 360);
    v36 = *(_QWORD *)(v0 + 368);
    v11 = swift_slowAlloc(52, -1);
    v38 = (uint64_t *)swift_slowAlloc(8, -1);
    v41 = swift_slowAlloc(96, -1);
    v43 = v41;
    *(_DWORD *)v11 = 136447235;
    *(_QWORD *)(v0 + 200) = sub_100016940(0xD00000000000003ELL, 0x8000000100ED1490, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(_QWORD *)(v0 + 208) = sub_100016940(v13, v14, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    v15 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v15(v9, v10);
    *(_WORD *)(v11 + 22) = 2160;
    *(_QWORD *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v11 + 24, v11 + 32);
    *(_WORD *)(v11 + 32) = 2081;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(_QWORD *)(v0 + 224) = sub_100016940(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v11 + 34, v11 + 42);
    swift_bridgeObjectRelease();
    v15(v37, v10);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain(v39);
    v18 = _swift_stdlib_bridgeErrorToNSError(v39);
    *(_QWORD *)(v0 + 232) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v11 + 44, v11 + 52);
    *v38 = v18;
    swift_errorRelease(v39);
    swift_errorRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s failed with error: %{public}@!", (uint8_t *)v11, 0x34u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v38, 1, v19);
    swift_slowDealloc(v38, -1, -1);
    swift_arrayDestroy(v41, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v20 = *(_QWORD *)(v0 + 536);
    v21 = *(_QWORD *)(v0 + 384);
    v22 = *(_QWORD *)(v0 + 360);
    v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 368) + 8);
    v23(*(_QWORD *)(v0 + 392), v22);
    v23(v21, v22);
    swift_errorRelease(v20);
    swift_errorRelease(v20);

  }
  v24 = *(_QWORD *)(v0 + 536);
  v25 = *(void (**)(uint64_t))(v0 + 288);
  swift_errorRetain(v24);
  v25(v24);
  swift_release();
  swift_release();
  swift_errorRelease(v24);
  swift_errorRelease(v24);
  sub_1000126B0(*(_QWORD *)(v0 + 352), type metadata accessor for AccessoryCommand);
  v26 = *(_QWORD *)(v0 + 424);
  v27 = *(_QWORD *)(v0 + 432);
  v29 = *(_QWORD *)(v0 + 408);
  v28 = *(_QWORD *)(v0 + 416);
  v31 = *(_QWORD *)(v0 + 392);
  v30 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 384);
  v34 = *(_QWORD *)(v0 + 344);
  v33 = *(_QWORD *)(v0 + 352);
  v40 = *(_QWORD *)(v0 + 328);
  v42 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031C2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v60 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v59 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v58 = (char *)&v50 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v50 - v16;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B6F48);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v19(v17, a1, v7);
  v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v15, a2, v7);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v57 = v21;
  v56 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(42, -1);
    v53 = a2;
    v24 = v23;
    v51 = swift_slowAlloc(96, -1);
    v63 = v51;
    *(_DWORD *)v24 = 136446979;
    v62 = sub_100016940(0xD00000000000003DLL, 0x8000000100ED1500, &v63);
    v55 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2082;
    v50 = v15;
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = v19;
    v26 = v25;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v25);
    v62 = sub_100016940(v27, v28, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    v54 = a1;
    v29 = v8;
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v30(v17, v7);
    *(_WORD *)(v24 + 22) = 2160;
    v62 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 24, v24 + 32);
    *(_WORD *)(v24 + 32) = 2081;
    v31 = v50;
    v32 = v26;
    v19 = v52;
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v7, v32);
    v62 = sub_100016940(v33, v34, &v63);
    a4 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease();
    v30(v31, v7);
    v8 = v29;
    a1 = v54;
    v35 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v56, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s", (uint8_t *)v24, 0x2Au);
    v36 = v51;
    swift_arrayDestroy(v51, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    v37 = v24;
    a2 = v53;
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {
    v38 = *(void (**)(char *, uint64_t))(v8 + 8);
    v38(v17, v7);
    v38(v15, v7);

  }
  type metadata accessor for Transaction(0);
  v39 = v58;
  v19(v58, a2, v7);
  v40 = v59;
  v19(v59, a1, v7);
  v41 = *(unsigned __int8 *)(v8 + 80);
  v42 = (v41 + 40) & ~v41;
  v43 = v8;
  v44 = (v9 + v41 + v42) & ~v41;
  v45 = (char *)swift_allocObject(&unk_10106CB28, v44 + v9, v41 | 7);
  v46 = v60;
  *((_QWORD *)v45 + 2) = v61;
  *((_QWORD *)v45 + 3) = v46;
  *((_QWORD *)v45 + 4) = a4;
  v47 = &v45[v42];
  v48 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v48(v47, v39, v7);
  v48(&v45[v44], v40, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.stopBTFinding", 34, 2, &unk_1010F7A70, v45);
  return swift_release();
}

uint64_t sub_10031C704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5[38] = a4;
  v5[39] = a5;
  v5[36] = a2;
  v5[37] = a3;
  v5[35] = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v6);
  v5[41] = swift_task_alloc(v6);
  v7 = type metadata accessor for AccessoryCommand(0);
  v5[42] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[43] = swift_task_alloc(v8);
  v5[44] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v5[45] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[46] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[47] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[48] = swift_task_alloc(v12);
  v5[49] = swift_task_alloc(v12);
  v5[50] = swift_task_alloc(v12);
  v5[51] = swift_task_alloc(v12);
  v5[52] = swift_task_alloc(v12);
  v5[53] = swift_task_alloc(v12);
  v5[54] = swift_task_alloc(v12);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v5[55] = v13;
  v5[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10031C84C, 0, 0);
}

uint64_t sub_10031C84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 456) = v3;
    *v3 = v0;
    v3[1] = sub_10031C94C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10031C94C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10031C9A8, 0, 0);
}

uint64_t sub_10031C9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(void);
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (__cdecl *v23)();
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 464);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v23 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 472) = v3;
      *v3 = v0;
      v3[1] = sub_10031CC00;
      return v23();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startBTFinding!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(void (**)(void))(v0 + 288);

    v10 = sub_10028FA08();
    v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0, 0);
    *v12 = 11;
    v9();
    swift_errorRelease(v11);
    v13 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 432);
    v16 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 416);
    v18 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 400);
    v19 = *(_QWORD *)(v0 + 384);
    v21 = *(_QWORD *)(v0 + 344);
    v20 = *(_QWORD *)(v0 + 352);
    v22 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 320);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10031CC00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10031CC5C, 0, 0);
}

uint64_t sub_10031CC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(void);
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v1)
    return swift_task_switch(sub_10031CE54, *(_QWORD *)(v0 + 480), 0);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6F48);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor to startBTFinding!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(void (**)(void))(v0 + 288);

  v9 = sub_10028FA08();
  v10 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v9, 0, 0);
  *v11 = 11;
  v8();
  swift_errorRelease(v10);
  swift_release();
  v12 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 408);
  v14 = *(_QWORD *)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 392);
  v16 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 344);
  v19 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 328);
  v22 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031CE54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[60];
  v2 = v0[54];
  v4 = v0[46];
  v3 = v0[47];
  v5 = v0[45];
  v6 = v0[38];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[61] = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10106CB50, v9 + v3, v8 | 7);
  v0[62] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[63] = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[64] = v13;
  *v13 = v0;
  v13[1] = sub_10031CF38;
  return unsafeBlocking<A>(_:)(v0[56], sub_100336654, v10, v0[55]);
}

uint64_t sub_10031CF38()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  swift_release();
  return swift_task_switch(sub_10031CF98, 0, 0);
}

uint64_t sub_10031CF98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v48;

  v1 = v0[56];
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    v3 = 0;
  }
  else
  {
    sub_1009A2CF8();
    v5 = v4;
    v6 = SPBeaconTypeHele;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11)
      v3 = 1;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    v13 = v0[56];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000126B0(v13, type metadata accessor for OwnedBeaconRecord);
  }
  v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[61];
  v15 = v0[53];
  v16 = v0[45];
  v17 = v0[46];
  v19 = v0[40];
  v18 = v0[41];
  v20 = v0[38];
  v14(v18, v0[39], v16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v16);
  v14(v15, v20, v16);
  sub_10000F9B8(v18, v19, &qword_1010ED860);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16);
  if ((_DWORD)v21 == 1)
  {
    v23 = v0[40];
    v22 = v0[41];
    UUID.init()(v21);
    sub_100004048(v22, &qword_1010ED860);
    sub_100004048(v23, &qword_1010ED860);
  }
  else
  {
    v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[63];
    v25 = v0[52];
    v26 = v0[45];
    v27 = v0[40];
    sub_100004048(v0[41], &qword_1010ED860);
    v24(v25, v27, v26);
  }
  v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[63];
  v29 = v0[53];
  v31 = v0[44];
  v30 = v0[45];
  v32 = (int *)v0[42];
  v28(v31, v0[52], v30);
  v28(v31 + v32[5], v29, v30);
  v33 = v31 + v32[6];
  *(_QWORD *)v33 = 2;
  *(_BYTE *)(v33 + 8) = 3;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v34 = v0[43];
  v35 = v0[44];
  v36 = type metadata accessor for Logger(0);
  v0[65] = sub_10001A9E8(v36, (uint64_t)qword_1011B6F48);
  v37 = sub_10005972C(v35, v34, type metadata accessor for AccessoryCommand);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = v0[43];
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v48 = v43;
    *(_DWORD *)v42 = 136315138;
    sub_100C58714();
    v0[34] = sub_100016940(v44, v45, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v41, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Executing stopBTFinding command: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[43], type metadata accessor for AccessoryCommand);
  }

  v46 = (_QWORD *)swift_task_alloc(dword_10111F17C);
  v0[66] = v46;
  *v46 = v0;
  v46[1] = sub_10031D37C;
  return sub_100D4F944(v0[44]);
}

uint64_t sub_10031D37C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10031D744;
  else
    v3 = sub_10031D3E0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10031D3E0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *log;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  v2 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 304);
  v1(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 312), v3);
  v5 = v1(v2, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    log = v6;
    v8 = *(_QWORD *)(v0 + 408);
    v32 = *(_QWORD *)(v0 + 400);
    v9 = *(_QWORD *)(v0 + 360);
    v30 = *(_QWORD *)(v0 + 368);
    v10 = swift_slowAlloc(42, -1);
    v34 = swift_slowAlloc(96, -1);
    v36 = v34;
    *(_DWORD *)v10 = 136446979;
    *(_QWORD *)(v0 + 240) = sub_100016940(0xD00000000000003DLL, 0x8000000100ED1500, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2082;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(_QWORD *)(v0 + 248) = sub_100016940(v12, v13, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    v14 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v14(v8, v9);
    *(_WORD *)(v10 + 22) = 2160;
    *(_QWORD *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(_QWORD *)(v0 + 264) = sub_100016940(v15, v16, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    v14(v32, v9);
    v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v7, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!", (uint8_t *)v10, 0x2Au);
    swift_arrayDestroy(v34, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 400);
    v18 = *(_QWORD *)(v0 + 360);
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 368) + 8);
    v19(*(_QWORD *)(v0 + 408), v18);
    v19(v17, v18);
  }

  (*(void (**)(_QWORD))(v0 + 288))(0);
  swift_release();
  swift_release();
  sub_1000126B0(*(_QWORD *)(v0 + 352), type metadata accessor for AccessoryCommand);
  v20 = *(_QWORD *)(v0 + 424);
  v21 = *(_QWORD *)(v0 + 432);
  v23 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 392);
  v24 = *(_QWORD *)(v0 + 400);
  v26 = *(_QWORD *)(v0 + 384);
  v28 = *(_QWORD *)(v0 + 344);
  v27 = *(_QWORD *)(v0 + 352);
  v33 = *(_QWORD *)(v0 + 328);
  v35 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031D744()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 304);
  v2(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 312), v4);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v39 = *(_QWORD *)(v0 + 536);
    v9 = *(_QWORD *)(v0 + 392);
    v37 = *(_QWORD *)(v0 + 384);
    v10 = *(_QWORD *)(v0 + 360);
    v36 = *(_QWORD *)(v0 + 368);
    v11 = swift_slowAlloc(52, -1);
    v38 = (uint64_t *)swift_slowAlloc(8, -1);
    v41 = swift_slowAlloc(96, -1);
    v43 = v41;
    *(_DWORD *)v11 = 136447235;
    *(_QWORD *)(v0 + 200) = sub_100016940(0xD00000000000003DLL, 0x8000000100ED1500, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2082;
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(_QWORD *)(v0 + 208) = sub_100016940(v13, v14, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    v15 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v15(v9, v10);
    *(_WORD *)(v11 + 22) = 2160;
    *(_QWORD *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v11 + 24, v11 + 32);
    *(_WORD *)(v11 + 32) = 2081;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
    *(_QWORD *)(v0 + 224) = sub_100016940(v16, v17, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v11 + 34, v11 + 42);
    swift_bridgeObjectRelease();
    v15(v37, v10);
    *(_WORD *)(v11 + 42) = 2114;
    swift_errorRetain(v39);
    v18 = _swift_stdlib_bridgeErrorToNSError(v39);
    *(_QWORD *)(v0 + 232) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v11 + 44, v11 + 52);
    *v38 = v18;
    swift_errorRelease(v39);
    swift_errorRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s failed with error: %{public}@!", (uint8_t *)v11, 0x34u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v38, 1, v19);
    swift_slowDealloc(v38, -1, -1);
    swift_arrayDestroy(v41, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v20 = *(_QWORD *)(v0 + 536);
    v21 = *(_QWORD *)(v0 + 384);
    v22 = *(_QWORD *)(v0 + 360);
    v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 368) + 8);
    v23(*(_QWORD *)(v0 + 392), v22);
    v23(v21, v22);
    swift_errorRelease(v20);
    swift_errorRelease(v20);

  }
  v24 = *(_QWORD *)(v0 + 536);
  v25 = *(void (**)(uint64_t))(v0 + 288);
  swift_errorRetain(v24);
  v25(v24);
  swift_release();
  swift_release();
  swift_errorRelease(v24);
  swift_errorRelease(v24);
  sub_1000126B0(*(_QWORD *)(v0 + 352), type metadata accessor for AccessoryCommand);
  v26 = *(_QWORD *)(v0 + 424);
  v27 = *(_QWORD *)(v0 + 432);
  v29 = *(_QWORD *)(v0 + 408);
  v28 = *(_QWORD *)(v0 + 416);
  v31 = *(_QWORD *)(v0 + 392);
  v30 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 384);
  v34 = *(_QWORD *)(v0 + 344);
  v33 = *(_QWORD *)(v0 + 352);
  v40 = *(_QWORD *)(v0 + 328);
  v42 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10031DB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  int v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v10 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WildModeAssociationRecord(0);
  v28 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_10106C7E0, 24, 7);
  *(_QWORD *)(v16 + 16) = a5;
  v27 = *(_QWORD *)(a4 + 280);
  sub_10080B648(a2, (uint64_t)&v29);
  if (v30)
  {
    sub_10000F9FC(&v29, (uint64_t)v31);
    v26 = v15;
    v17 = a2;
    v18 = a3;
    v19 = v32;
    v20 = v33;
    sub_10001AA44(v31, v32);
    v21 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 144);
    v22 = v20;
    a3 = v18;
    a2 = v17;
    v15 = v26;
    LOBYTE(v19) = v21(v19, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
    if ((v19 & 1) == 0)
      goto LABEL_9;
  }
  else
  {
    sub_100004048((uint64_t)&v29, (uint64_t *)&unk_1010EE310);
  }
  sub_10081C0CC(a2, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v12, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v12, &qword_101102FB0);
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
    v23 = v15[*(int *)(v13 + 52)];
    sub_1000126B0((uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
    if (v23 != 3)
    {
LABEL_9:
      sub_10031DDFC(a1, a2, a3, (uint64_t)sub_10001D1F0, v16);
      return swift_release();
    }
  }
  sub_1005D6EFC(a1, a2, a3, sub_10001D1F0, v16, 62.0);
  return swift_release();
}

uint64_t sub_10031DDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD aBlock[7];

  v75 = a1;
  v64 = a4;
  v65 = a5;
  v76 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v69 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v67 = *(_QWORD *)(v9 - 8);
  v68 = v9;
  __chkstk_darwin(v9);
  v66 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v62 - 8);
  v11 = *(_QWORD *)(v61 + 64);
  v12 = __chkstk_darwin(v62);
  v73 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v72 = (char *)&v57 - v14;
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v60 = qword_1011B7D50;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 152, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E221E0;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v17 + 64) = v21;
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  v22 = UUID.uuidString.getter(v21);
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v21;
  *(_QWORD *)(v17 + 72) = v22;
  *(_QWORD *)(v17 + 80) = v23;
  v70 = v7;
  v71 = v6;
  v63 = a3;
  v24 = 0xE800000000000000;
  v25 = 0x746C75616665642ELL;
  v26 = v15;
  switch(a3)
  {
    case 0:
      break;
    case 1:
      v25 = 0x676E69676E61722ELL;
      break;
    case 2:
      v24 = 0xE900000000000067;
      goto LABEL_10;
    case 3:
      v24 = 0x8000000100ED1070;
      v25 = 0xD000000000000010;
      break;
    case 4:
      v24 = 0xEF64656D7269666ELL;
      v25 = 0x6F4365756575712ELL;
      break;
    case 5:
      v24 = 0xEE0074726F685367;
LABEL_10:
      v25 = 0x6E696B636172742ELL;
      break;
    default:
      v24 = 0xE700000000000000;
      v25 = 0x6E776F6E6B6E75;
      v26 = v15;
      break;
  }
  *(_QWORD *)(v17 + 136) = &type metadata for String;
  *(_QWORD *)(v17 + 144) = v21;
  *(_QWORD *)(v17 + 112) = v25;
  *(_QWORD *)(v17 + 120) = v24;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v60, "#Durian: Command playSound commandIdentifier: %@ beaconIdentifier: %@ context: %@", 81, 2, v17);
  swift_bridgeObjectRelease();
  v27 = v61;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v29 = v62;
  v28(v72, v76, v62);
  v28(v73, v75, v29);
  v30 = *(unsigned __int8 *)(v27 + 80);
  v31 = (v30 + 24) & ~v30;
  v59 = v30 | 7;
  v32 = (v11 + v30 + v31) & ~v30;
  v58 = v32;
  v33 = (v11 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_10106C808, v34 + 16, v30 | 7);
  v60 = v35;
  *(_QWORD *)(v35 + 16) = v74;
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
  v37 = v72;
  v36(v35 + v31, v72, v29);
  v38 = v73;
  v36(v35 + v32, v73, v29);
  v39 = v64;
  *(_QWORD *)(v35 + v33) = v63;
  v40 = (_QWORD *)(v35 + v34);
  v41 = v65;
  *v40 = v39;
  v40[1] = v41;
  v42 = v74;
  v64 = *(_QWORD *)(v74 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue);
  v28(v37, v76, v29);
  v43 = v38;
  v28(v38, v75, v29);
  v44 = swift_allocObject(&unk_10106C830, v33 + 16, v59);
  *(_QWORD *)(v44 + 16) = v42;
  v36(v44 + v31, v37, v29);
  v36(v44 + v58, v43, v29);
  v45 = (uint64_t (**)())(v44 + v33);
  v46 = v60;
  *v45 = sub_100336160;
  v45[1] = (uint64_t (*)())v46;
  aBlock[4] = sub_1003361C8;
  aBlock[5] = v44;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106C848;
  v47 = _Block_copy(aBlock);
  swift_retain_n(v42, 2);
  swift_retain();
  v48 = swift_retain();
  v49 = v66;
  static DispatchQoS.unspecified.getter(v48);
  v77 = _swiftEmptyArrayStorage;
  v50 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v51 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v52 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v53 = v69;
  v54 = v51;
  v55 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v54, v52, v71, v50);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v53, v47);
  _Block_release(v47);
  swift_release();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v53, v55);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v49, v68);
  return swift_release();
}

uint64_t sub_10031E398(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v30;
  void (*v31)(char *, uint64_t *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;

  v34 = a5;
  v35 = a6;
  v36 = a3;
  v37 = a4;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v32 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
  v31 = *(void (**)(char *, uint64_t *, uint64_t))(v15 + 16);
  v31(v13, a2, v11);
  v16 = type metadata accessor for TagCommandManager();
  v43 = v16;
  v44 = &off_101085150;
  v42[0] = v14;
  v17 = type metadata accessor for SoundPlaybackCoordinator(0);
  v18 = (char *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = sub_10009F5D0((uint64_t)v42, v16);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = *v21;
  v24 = v14;
  v25 = sub_10032D468(v23, (uint64_t)v13, v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);

  v43 = type metadata accessor for BeaconManagerService(0);
  v44 = &off_10106BAE8;
  v42[0] = a1;
  v39 = v42;
  v40 = v25;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_100336214, v38, v8);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  swift_retain();
  sub_1004BD7C8(a2, a1, (uint64_t)v25);
  swift_release();
  v31(v13, a2, v11);
  v26 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier, v42, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
  v41 = *v26;
  *v26 = 0x8000000000000000;
  sub_10010BD1C((uint64_t)v25, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  *v26 = v41;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v11);
  swift_endAccess(v42);
  v28 = swift_allocObject(&unk_10106C8F8, 32, 7);
  *(_QWORD *)(v28 + 16) = v34;
  *(_QWORD *)(v28 + 24) = v35;
  swift_retain();
  sub_1008D64F0(v36, v37, (uint64_t)sub_10033622C, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_10031E6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[6];

  v33 = a2;
  v34 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v37 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v15 = qword_1011B7D50;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
  v19 = String.init<A>(describing:)(aBlock, v18);
  v21 = v20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "#Durian: Command playSound completed with error (%@)", 52, 2, v17);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v22 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v23 = (_QWORD *)swift_allocObject(&unk_10106C920, 40, 7);
  v24 = v34;
  v23[2] = v33;
  v23[3] = v24;
  v23[4] = a1;
  aBlock[4] = sub_100016FE4;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106C938;
  v25 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v40 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v30 = v37;
  v31 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v39, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v30, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
  return swift_release();
}

uint64_t sub_10031EA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, __n128), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __n128 v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _BYTE v23[24];

  v10 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v10);
  v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10081C0CC(a2, (uint64_t)v12);
  v13 = type metadata accessor for WildModeAssociationRecord(0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
  v15 = sub_100004048((uint64_t)v12, &qword_101102FB0);
  if (v14 == 1)
  {
    v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
    v16 = swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier, v23, 0, 0);
    v18 = *v17;
    if (*(_QWORD *)(v18 + 16))
    {
      swift_bridgeObjectRetain(v18);
      sub_100003FB0(a2);
      if ((v19 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        v20 = (_QWORD *)swift_allocObject(&unk_10106C880, 40, 7);
        v20[2] = a1;
        v20[3] = a4;
        v20[4] = a5;
        swift_retain();
        swift_retain();
        sub_1008D69B4(a3, (uint64_t)sub_1003361E4, (uint64_t)v20);
        swift_release();
        return swift_release();
      }
      v15 = swift_bridgeObjectRelease();
    }
  }
  return a4(v15, v16);
}

uint64_t sub_10031EBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_10106C8A8, 32, 7);
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  aBlock[4] = sub_10001D858;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106C8C0;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_10031EDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v17;

  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10080B950(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F47C0);
    return sub_1005DAB88(a1, a2, a3, a4, 62.0);
  }
  sub_1000126EC((uint64_t)v10, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  sub_1009A2848();
  if ((v15 & 1) != 0)
  {
    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    return sub_1005DAB88(a1, a2, a3, a4, 62.0);
  }
  sub_10031EF3C(a1, a2, a3, a4);
  return sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10031EF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[2];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD aBlock[7];

  v55 = a4;
  v52 = a2;
  v53 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  __chkstk_darwin(v5);
  v59 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  __chkstk_darwin(v7);
  v56 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49[0] = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v49[0] - 8);
  v9 = *(_QWORD *)(v50 + 64);
  v10 = __chkstk_darwin(v49[0]);
  v51 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v49 - v12;
  v14 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v15 = qword_1011B7D50;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 112, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v17 + 64) = v21;
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  v22 = v52;
  v23 = UUID.uuidString.getter(v21);
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v21;
  *(_QWORD *)(v17 + 72) = v23;
  *(_QWORD *)(v17 + 80) = v24;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "#Durian: Command stopSound commandIdentifier: %@ beaconIdentifier: %@", 69, 2, v17);
  swift_bridgeObjectRelease();
  v25 = v54;
  v49[1] = *(_QWORD *)(v54 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue);
  v26 = v50;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  v28 = v49[0];
  v27(v13, v22, v49[0]);
  v29 = v51;
  v27(v51, a1, v28);
  v30 = *(unsigned __int8 *)(v26 + 80);
  v31 = (v30 + 24) & ~v30;
  v32 = (v9 + v30 + v31) & ~v30;
  v33 = (v9 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject(&unk_10106C970, v33 + 16, v30 | 7);
  *(_QWORD *)(v34 + 16) = v25;
  v35 = v34 + v31;
  v36 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  v36(v35, v13, v28);
  v36(v34 + v32, v29, v28);
  v37 = (_QWORD *)(v34 + v33);
  v38 = v55;
  *v37 = v53;
  v37[1] = v38;
  aBlock[4] = sub_100336310;
  aBlock[5] = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106C988;
  v39 = _Block_copy(aBlock);
  swift_retain();
  v40 = swift_retain();
  v41 = v56;
  static DispatchQoS.unspecified.getter(v40);
  v62 = _swiftEmptyArrayStorage;
  v42 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v43 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v44 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v45 = v59;
  v46 = v43;
  v47 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v46, v44, v61, v42);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v41, v45, v39);
  _Block_release(v39);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v47);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v41, v58);
  return swift_release();
}

uint64_t sub_10031F314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  __n128 v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  void (*v35)(char *, uint64_t, uint64_t, __n128);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _UNKNOWN **v46;
  char v47[24];

  v42 = a3;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F7A10);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v39 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  v16 = swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier, v47, 0, 0);
  if (!*(_QWORD *)(*v15 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(*v15);
  sub_100003FB0(a2);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v38 = a4;
    v18 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
    v35 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
    v35(v14, a2, v11, v16);
    v19 = type metadata accessor for TagCommandManager();
    v45 = v19;
    v46 = &off_101085150;
    v44[0] = v18;
    v20 = type metadata accessor for SoundPlaybackCoordinator(0);
    v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v37 = a5;
    v22 = (char *)v21;
    v23 = sub_10009F5D0((uint64_t)v44, v19);
    v36 = v12;
    __chkstk_darwin(v23);
    v25 = (uint64_t *)((char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    v27 = *v25;
    v28 = v18;
    v29 = sub_10032D468(v27, (uint64_t)v14, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);

    v45 = type metadata accessor for BeaconManagerService(0);
    v46 = &off_10106BAE8;
    v44[0] = a1;
    __chkstk_darwin(v45);
    *(&v35 - 2) = (void (*)(char *, uint64_t, uint64_t, __n128))v44;
    *(&v35 - 1) = (void (*)(char *, uint64_t, uint64_t, __n128))v29;
    swift_retain();
    v30 = v39;
    v31 = v41;
    OS_dispatch_queue.sync<A>(execute:)(sub_100336F68, &v35 - 4, v41);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v31);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
    ((void (*)(char *, uint64_t, uint64_t))v35)(v14, a2, v11);
    swift_beginAccess(v15, v44, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v43 = *v15;
    *v15 = 0x8000000000000000;
    sub_10010BD1C((uint64_t)v29, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    *v15 = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v11);
    swift_endAccess(v44);
    v33 = swift_allocObject(&unk_10106C9C0, 32, 7);
    *(_QWORD *)(v33 + 16) = v38;
    *(_QWORD *)(v33 + 24) = v37;
    swift_retain();
    sub_1008D69B4(v42, (uint64_t)sub_100336384, v33);
    swift_release();
    return swift_release();
  }
  swift_retain();
  swift_bridgeObjectRelease();
  sub_1008D69B4(v42, a4, a5);
  return swift_release();
}

uint64_t sub_10031F6C4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v5 = qword_1011B7D50;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v13 = a1;
  swift_errorRetain(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
  v9 = String.init<A>(describing:)(&v13, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "#Durian: Command stopSound completed with error (%@)", 52, 2, v7);
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_10031F7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE v32[12];
  int v33;
  uint64_t v34;
  uint64_t (*v35)(_BYTE *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = v3;
  v39 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v38 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v12 = &v32[-v11];
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B6F48);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v15 = v14(v12, a1, v7);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(32, -1);
    v35 = v14;
    v20 = v19;
    v34 = swift_slowAlloc(64, -1);
    v41 = v34;
    *(_DWORD *)v20 = 136446723;
    v33 = v18;
    v40 = sub_100016940(0xD000000000000024, 0x8000000100ED1430, &v41);
    v37 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2160;
    v40 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    v36 = a1;
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v7, v21);
    v40 = sub_100016940(v22, v23, &v41);
    a1 = v36;
    v4 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v33, "%{public}s beaconIdentifier: %{private,mask.hash}s", (uint8_t *)v20, 0x20u);
    v24 = v34;
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v25 = v20;
    v14 = v35;
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v12, v7);
  }

  type metadata accessor for Transaction(0);
  v26 = v38;
  v14(v38, a1, v7);
  v27 = *(unsigned __int8 *)(v8 + 80);
  v28 = (v27 + 40) & ~v27;
  v29 = (char *)swift_allocObject(&unk_10106CA88, v28 + v9, v27 | 7);
  v30 = v39;
  *((_QWORD *)v29 + 2) = v4;
  *((_QWORD *)v29 + 3) = v30;
  *((_QWORD *)v29 + 4) = a3;
  (*(void (**)(char *, _BYTE *, uint64_t))(v8 + 32))(&v29[v28], v26, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.unpair.beaconIdentifier", 44, 2, &unk_1010F7A48, v29);
  return swift_release();
}

uint64_t sub_10031FB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4[35] = a3;
  v4[36] = a4;
  v4[33] = a1;
  v4[34] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v5);
  v4[38] = swift_task_alloc(v5);
  v6 = type metadata accessor for AccessoryCommand(0);
  v4[39] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[40] = swift_task_alloc(v7);
  v4[41] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v4[42] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[43] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v4[44] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[45] = swift_task_alloc(v11);
  v4[46] = swift_task_alloc(v11);
  v4[47] = swift_task_alloc(v11);
  v4[48] = swift_task_alloc(v11);
  v4[49] = swift_task_alloc(v11);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v4[50] = v12;
  v4[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10031FC70, 0, 0);
}

uint64_t sub_10031FC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 416) = v3;
    *v3 = v0;
    v3[1] = sub_10031FD70;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10031FD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10031FDCC, 0, 0);
}

uint64_t sub_10031FDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(void);
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (__cdecl *v22)();

  v1 = *(_QWORD *)(v0 + 424);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v22 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 432) = v3;
      *v3 = v0;
      v3[1] = sub_100320008;
      return v22();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to startBTFinding!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(void (**)(void))(v0 + 272);

    v10 = sub_10028FA08();
    v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0, 0);
    *v12 = 11;
    v9();
    swift_errorRelease(v11);
    v13 = *(_QWORD *)(v0 + 384);
    v14 = *(_QWORD *)(v0 + 392);
    v16 = *(_QWORD *)(v0 + 368);
    v15 = *(_QWORD *)(v0 + 376);
    v17 = *(_QWORD *)(v0 + 360);
    v19 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 328);
    v21 = *(_QWORD *)(v0 + 296);
    v20 = *(_QWORD *)(v0 + 304);
    swift_task_dealloc(*(_QWORD *)(v0 + 408));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100320008(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  *(_QWORD *)(*(_QWORD *)v1 + 440) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100320064, 0, 0);
}

uint64_t sub_100320064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(void);
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 440);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v1)
    return swift_task_switch(sub_100320240, *(_QWORD *)(v0 + 440), 0);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6F48);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor to startBTFinding!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(void (**)(void))(v0 + 272);

  v9 = sub_10028FA08();
  v10 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v9, 0, 0);
  *v11 = 11;
  v8();
  swift_errorRelease(v10);
  swift_release();
  v12 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100320240()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[55];
  v2 = v0[49];
  v4 = v0[43];
  v3 = v0[44];
  v5 = v0[42];
  v6 = v0[36];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[56] = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10106CAB0, v9 + v3, v8 | 7);
  v0[57] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[58] = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[59] = v13;
  *v13 = v0;
  v13[1] = sub_100320324;
  return unsafeBlocking<A>(_:)(v0[51], sub_100336654, v10, v0[50]);
}

uint64_t sub_100320324()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 472));
  swift_release();
  return swift_task_switch(sub_100320384, 0, 0);
}

uint64_t sub_100320384()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v48;

  v1 = v0[51];
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    v3 = 0;
  }
  else
  {
    sub_1009A2CF8();
    v5 = v4;
    v6 = SPBeaconTypeHele;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    if (v7 == v10 && v9 == v11)
      v3 = 1;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    v13 = v0[51];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000126B0(v13, type metadata accessor for OwnedBeaconRecord);
  }
  v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[56];
  v15 = v0[48];
  v16 = v0[42];
  v17 = v0[43];
  v19 = v0[37];
  v18 = v0[38];
  v20 = v0[36];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 1, 1, v16);
  v14(v15, v20, v16);
  sub_10000F9B8(v18, v19, &qword_1010ED860);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16);
  if ((_DWORD)v21 == 1)
  {
    v23 = v0[37];
    v22 = v0[38];
    UUID.init()(v21);
    sub_100004048(v22, &qword_1010ED860);
    sub_100004048(v23, &qword_1010ED860);
  }
  else
  {
    v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[58];
    v25 = v0[47];
    v26 = v0[42];
    v27 = v0[37];
    sub_100004048(v0[38], &qword_1010ED860);
    v24(v25, v27, v26);
  }
  v28 = (void (*)(uint64_t, uint64_t, uint64_t))v0[58];
  v29 = v0[48];
  v31 = v0[41];
  v30 = v0[42];
  v32 = (int *)v0[39];
  v28(v31, v0[47], v30);
  v28(v31 + v32[5], v29, v30);
  v33 = v31 + v32[6];
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 0;
  *(_BYTE *)(v31 + v32[7]) = v3 & 1;
  *(_BYTE *)(v31 + v32[8]) = 1;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v34 = v0[40];
  v35 = v0[41];
  v36 = type metadata accessor for Logger(0);
  v0[60] = sub_10001A9E8(v36, (uint64_t)qword_1011B6F48);
  v37 = sub_10005972C(v35, v34, type metadata accessor for AccessoryCommand);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = v0[40];
  if (v40)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v48 = v43;
    *(_DWORD *)v42 = 136315138;
    sub_100C58714();
    v0[32] = sub_100016940(v44, v45, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v41, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Executing startBTFinding command: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[40], type metadata accessor for AccessoryCommand);
  }

  v46 = (_QWORD *)swift_task_alloc(dword_10111F17C);
  v0[61] = v46;
  *v46 = v0;
  v46[1] = sub_100320754;
  return sub_100D4F944(v0[41]);
}

uint64_t sub_100320754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100320A64;
  else
    v3 = sub_1003207B8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003207B8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 448))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 336));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 368);
    v5 = *(_QWORD *)(v0 + 336);
    v20 = *(_QWORD *)(v0 + 344);
    v6 = swift_slowAlloc(32, -1);
    v21 = swift_slowAlloc(64, -1);
    v22 = v21;
    *(_DWORD *)v6 = 136446723;
    *(_QWORD *)(v0 + 232) = sub_100016940(0xD000000000000024, 0x8000000100ED1430, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2160;
    *(_QWORD *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v6 + 14, v6 + 22);
    *(_WORD *)(v6 + 22) = 2081;
    v7 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    *(_QWORD *)(v0 + 248) = sub_100016940(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v6 + 24, v6 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 336));
  }

  (*(void (**)(_QWORD))(v0 + 272))(0);
  swift_release();
  swift_release();
  sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for AccessoryCommand);
  v10 = *(_QWORD *)(v0 + 384);
  v11 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 360);
  v16 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100320A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  NSObject *log;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 496);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 448))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 336));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 496);
    log = v3;
    v6 = *(_QWORD *)(v0 + 360);
    v7 = *(_QWORD *)(v0 + 336);
    v27 = *(_QWORD *)(v0 + 344);
    v8 = swift_slowAlloc(42, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    v30 = swift_slowAlloc(64, -1);
    v31 = v30;
    *(_DWORD *)v8 = 136446979;
    *(_QWORD *)(v0 + 200) = sub_100016940(0xD000000000000024, 0x8000000100ED1430, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2160;
    *(_QWORD *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2081;
    v9 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    *(_QWORD *)(v0 + 216) = sub_100016940(v10, v11, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v6, v7);
    *(_WORD *)(v8 + 32) = 2114;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 224) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v8 + 34, v8 + 42);
    *v29 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    v3 = log;
    _os_log_impl((void *)&_mh_execute_header, log, v4, "%{public}s beaconIdentifier: %{private,mask.hash}s\nfailed with error: %{public}@!", (uint8_t *)v8, 0x2Au);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v29, 1, v13);
    swift_slowDealloc(v29, -1, -1);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 496);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 336));
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  v15 = *(_QWORD *)(v0 + 496);
  v16 = *(void (**)(uint64_t))(v0 + 272);
  swift_errorRetain(v15);
  v16(v15);
  swift_release();
  swift_release();
  swift_errorRelease(v15);
  swift_errorRelease(v15);
  sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for AccessoryCommand);
  v17 = *(_QWORD *)(v0 + 384);
  v18 = *(_QWORD *)(v0 + 392);
  v20 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 360);
  v23 = *(_QWORD *)(v0 + 320);
  v22 = *(_QWORD *)(v0 + 328);
  v25 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100320DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[8];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v30 = a4;
  v28 = a3;
  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v9 = qword_1011B7D50;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  v29 = a1;
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v11 + 64) = v15;
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v14;
  v16 = UUID.uuidString.getter(v15);
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v15;
  *(_QWORD *)(v11 + 72) = v16;
  *(_QWORD *)(v11 + 80) = v17;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "#Accessory: Command updateAccessoryFirmware commandIdentifier: %@ accessoryUUID: %@", 83, 2, v11);
  result = swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v5 + 176);
  if (v19)
  {
    v20 = swift_retain();
    v21 = static os_log_type_t.default.getter(v20);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v22 = qword_1011B7DE0;
    v23 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    v24 = UUID.uuidString.getter(v23);
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = v15;
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = v25;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "#Accessory - updateAccessoryFirmware called for %@", 50, 2, v23);
    swift_bridgeObjectRelease();
    v26 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v26);
    v27[2] = v19;
    v27[3] = v28;
    v27[4] = v30;
    v27[5] = v29;
    v27[6] = a2;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryFirmwareUpdate.initiateUpdate", 68, 2, sub_100336534, v27, &type metadata for () + 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10032103C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t My;
  _QWORD *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(void **);
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[5];

  v5 = v4;
  v60 = a3;
  v61 = a4;
  v58 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v57 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v56 = (char *)&v52 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v52 - v13;
  if (qword_1010EA320 != -1)
    swift_once(&qword_1010EA320, sub_100B5E35C);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B7E10);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16 = v55(v14, a2, v7);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  v59 = a2;
  if (v19)
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(32, -1);
    v52 = v15;
    v22 = v21;
    *(_DWORD *)v20 = 141558275;
    v62 = 1752392040;
    v63[0] = v21;
    v53 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v54 = v4;
    v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v7, v23);
    v62 = sub_100016940(v24, v25, v63);
    v8 = v53;
    v5 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "#Durian: Client asking to connect to beacon with UUID - %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v26 = v22;
    v15 = v52;
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    a2 = v59;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }

  My = type metadata accessor for Feature.FindMy(0);
  v63[3] = My;
  v63[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v29 = sub_100018F08(v63);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v29, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v63);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
  if ((My & 1) != 0)
  {
    v54 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager);
    v30 = (void (*)(char *, uint64_t, uint64_t))v55;
    v31 = v56;
    v55(v56, a2, v7);
    v33 = v57;
    v32 = v58;
    v30(v57, v58, v7);
    v34 = *(unsigned __int8 *)(v8 + 80);
    v35 = (v34 + 16) & ~v34;
    v36 = (v9 + v34 + v35) & ~v34;
    v37 = (v9 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = (void (*)(void **))swift_allocObject(&unk_10106CA38, v37 + 16, v34 | 7);
    v39 = (char *)v38 + v35;
    v40 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v40(v39, v31, v7);
    v40((char *)v38 + v36, v33, v7);
    v41 = (_QWORD *)((char *)v38 + v37);
    v42 = v61;
    *v41 = v60;
    v41[1] = v42;
    swift_retain();
    sub_1005D5B28(v59, v32, (void (*)(void **))sub_1003363E4, v38);
  }
  else
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v43 = sub_10001A9E8(v15, (uint64_t)qword_1011B6F48);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Connecting legacy when spPlaySoundAll is off!", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    sub_1006679CC(a2);
    v47 = swift_allocObject(&unk_10106C9E8, 32, 7);
    v48 = v60;
    v49 = v61;
    *(_QWORD *)(v47 + 16) = v60;
    *(_QWORD *)(v47 + 24) = v49;
    swift_retain();
    Future.addFailure(block:)(sub_1003363D0, v47);
    swift_release();
    swift_release();
    v50 = swift_allocObject(&unk_10106CA10, 32, 7);
    *(_QWORD *)(v50 + 16) = v48;
    *(_QWORD *)(v50 + 24) = v49;
    swift_retain();
    Future.addSuccess(block:)(sub_1003363D8, v50);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100321570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v5 = v4;
  v48 = a3;
  v49 = a4;
  v50 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v46 = (char *)&v41 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v41 - v13;
  if (qword_1010EA320 != -1)
    swift_once(&qword_1010EA320, sub_100B5E35C);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B7E10);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16 = v45(v14, a2, v7);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v44 = a2;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v43 = v21;
    *(_DWORD *)v20 = 141558275;
    v51 = 1752392040;
    v52 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v42 = v20 + 14;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v51 = sub_100016940(v23, v24, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v42, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "#Durian: Client asking to disconnect from beacon with UUID - %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
    v25 = v43;
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v26 = v20;
    a2 = v44;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }

  v44 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager);
  v27 = (void (*)(char *, uint64_t, uint64_t))v45;
  v28 = v46;
  v45(v46, a2, v7);
  v29 = v47;
  v30 = v50;
  v27(v47, v50, v7);
  v31 = *(unsigned __int8 *)(v8 + 80);
  v32 = (v31 + 16) & ~v31;
  v33 = (v9 + v31 + v32) & ~v31;
  v34 = (v9 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = a2;
  v36 = swift_allocObject(&unk_10106CA60, v34 + 16, v31 | 7);
  v37 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v37(v36 + v32, v28, v7);
  v37(v36 + v33, v29, v7);
  v38 = (_QWORD *)(v36 + v34);
  v39 = v49;
  *v38 = v48;
  v38[1] = v39;
  swift_retain();
  sub_1005D6A54(v35, v30, (uint64_t)sub_1003364A0, v36);
  return swift_release();
}

uint64_t sub_1003218DC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  unint64_t v58;
  os_log_t v59;
  uint64_t v60;
  void (*v62)(char *, uint64_t);
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  os_log_t v65;
  void (*v66)(uint64_t);
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v67 = a6;
  v68 = a3;
  v69 = a5;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v64 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v64 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v64 - v22;
  if (a1)
  {
    v66 = a4;
    swift_errorRetain(a1);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B6F48);
    v25 = v12;
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v26(v18, a2, v11);
    v26(v15, v68, v11);
    swift_errorRetain(a1);
    v27 = swift_errorRetain(a1);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v31 = swift_slowAlloc(42, -1);
      v32 = swift_slowAlloc(96, -1);
      v68 = v32;
      *(_DWORD *)v31 = 141558787;
      v70 = 1752392040;
      v71 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v65) = v30;
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v11, v64);
      v70 = sub_100016940(v33, v34, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease();
      v35 = *(void (**)(char *, uint64_t))(v25 + 8);
      v35(v18, v11);
      *(_WORD *)(v31 + 22) = 2082;
      v70 = a1;
      swift_errorRetain(a1);
      v36 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v37 = String.init<A>(describing:)(&v70, v36);
      v70 = sub_100016940(v37, v38, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v31 + 32) = 2082;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v11, v64);
      v70 = sub_100016940(v39, v40, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 34, v31 + 42);
      swift_bridgeObjectRelease();
      v35(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v65, v67, (uint8_t *)v31, 0x2Au);
      v41 = v68;
      swift_arrayDestroy(v68, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      v62 = *(void (**)(char *, uint64_t))(v25 + 8);
      v62(v18, v11);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v62(v15, v11);
    }

    swift_errorRetain(a1);
    v66(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v67 = a7;
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v42 = type metadata accessor for Logger(0);
    sub_10001A9E8(v42, (uint64_t)qword_1011B6F48);
    v43 = v12;
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v44(v23, a2, v11);
    v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v21, v68, v11);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      v49 = swift_slowAlloc(32, -1);
      LODWORD(v66) = v48;
      v50 = v49;
      v51 = swift_slowAlloc(64, -1);
      v68 = v51;
      *(_DWORD *)v50 = 141558531;
      v70 = 1752392040;
      v71 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2081;
      v52 = a4;
      v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = v46;
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v11, v53);
      v70 = sub_100016940(v54, v55, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      v56 = *(void (**)(char *, uint64_t))(v43 + 8);
      v56(v23, v11);
      *(_WORD *)(v50 + 22) = 2082;
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v11, v53);
      v70 = sub_100016940(v57, v58, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v50 + 24, v50 + 32);
      swift_bridgeObjectRelease();
      v56(v21, v11);
      v59 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, v67, (uint8_t *)v50, 0x20u);
      v60 = v68;
      swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      return ((uint64_t (*)(_QWORD))v52)(0);
    }
    else
    {
      v63 = *(void (**)(char *, uint64_t))(v43 + 8);
      v63(v23, v11);
      v63(v21, v11);

      return ((uint64_t (*)(_QWORD))a4)(0);
    }
  }
}

uint64_t sub_100321F18(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  _BYTE v13[8];

  v4 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v5 = qword_1011B7D50;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  swift_getErrorValue(a1, v13, v12);
  v8 = Error.localizedDescription.getter(v12[1], v12[2]);
  v10 = v9;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "#Durian: Error while connecting to beacon. Error - %@", 53, 2, v7);
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_100322034(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D50, "#Durian: Connection successful for beacon.", 42, 2, _swiftEmptyArrayStorage);
  return a2(0);
}

uint64_t sub_1003220C4(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  result = sub_1003692E4(*a2, v7);
  if ((result & 0x100) == 0)
  {
    result = sub_1001C0B1C(result, a4);
    if ((result & 1) != 0)
    {
      sub_10036B3DC(v6, v7);
      v10 = v9;
      v12 = v11;
      v13 = (_QWORD *)*a1;
      result = swift_isUniquelyReferenced_nonNull_native(*a1);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1007C77D4(0, v13[2] + 1, 1, v13);
        v13 = (_QWORD *)result;
      }
      v14 = v13[2];
      v15 = v13[3];
      v16 = v14 + 1;
      if (v14 >= v15 >> 1)
      {
        v18 = v13;
        v19 = v13[2];
        result = (uint64_t)sub_1007C77D4((_QWORD *)(v15 > 1), v14 + 1, 1, v18);
        v14 = v19;
        v13 = (_QWORD *)result;
      }
      v13[2] = v16;
      v17 = &v13[2 * v14];
      v17[4] = v10;
      v17[5] = v12;
      *a1 = v13;
    }
  }
  return result;
}

uint64_t sub_1003221AC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint64_t result;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[7];
  uint64_t v17;
  uint64_t v18[2];

  type metadata accessor for Transaction(0);
  v9 = swift_allocObject(&unk_10106BD90, 24, 7);
  swift_weakInit(v9 + 16, v4);
  v16[2] = v9;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  static Transaction.named<A>(_:with:)("requestLiveLocationForFriend", 28, 2, sub_100336014, v16);
  v10 = swift_release();
  v11 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v12 = qword_1011B7D28;
  result = os_log_type_enabled((os_log_t)qword_1011B7D28, v11);
  if ((_DWORD)result)
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v18[0] = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    v17 = sub_100016940(a1, a2, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v11, "requestLiveLocation(forFriend:completion:) friend: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    return swift_slowDealloc(v14, -1, -1);
  }
  return result;
}

uint64_t sub_10032239C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __n128 v28;
  void (*v29)(char *, uint64_t);
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  __n128 v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76[3];
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;

  v70 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v68 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v67 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v62 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v62 - v12;
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = _swiftEmptyArrayStorage;
  v69 = v16;
  if (!v17)
  {
    v24 = v70;
    v25 = _swiftEmptyArrayStorage[2];
    if (v25)
      goto LABEL_9;
LABEL_25:
    v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    v59 = swift_bridgeObjectRetain(v18);
    v58(v16, 1, 1, v5, v59);
    goto LABEL_27;
  }
  v79 = _swiftEmptyArrayStorage;
  sub_10009A578(0, v17, 0);
  v19 = a1 + 32;
  v18 = v79;
  do
  {
    sub_100030784(v19, (uint64_t)v76);
    v21 = v77;
    v20 = v78;
    sub_10001AA44(v76, v77);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8) + 32))(v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v76);
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
    {
      sub_10009A578(0, v18[2] + 1, 1);
      v18 = v79;
    }
    v23 = v18[2];
    v22 = v18[3];
    if (v23 >= v22 >> 1)
    {
      sub_10009A578(v22 > 1, v23 + 1, 1);
      v18 = v79;
    }
    v18[2] = v23 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v23, v13, v5);
    v79 = v18;
    v19 += 40;
    --v17;
  }
  while (v17);
  v16 = v69;
  v24 = v70;
  v25 = v18[2];
  if (!v25)
    goto LABEL_25;
LABEL_9:
  v26 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  v27 = (char *)v18 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v71 = *(_QWORD *)(v6 + 72);
  v75 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v28 = swift_bridgeObjectRetain(v18);
  v28.n128_u64[0] = 141558275;
  v64 = v28;
  v63 = (char *)&type metadata for Any + 8;
  v74 = v5;
  v66 = v26;
  while (1)
  {
    v75(v16, v27, v5);
    v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v65)(v16, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) == 1)
      break;
    v72 = v27;
    v73 = v25;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v16, v5);
    v31 = *(_QWORD *)(v24 + v26);
    swift_bridgeObjectRetain_n(v31, 2);
    v32 = sub_100003FB0((uint64_t)v11);
    v34 = v33;
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
      v76[0] = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100A9C52C();
        v31 = v76[0];
      }
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(*(_QWORD *)(v31 + 48) + v32 * v71, v5);
      v31 = v76[0];
      v36 = *(_QWORD *)(v76[0] + 56);
      v37 = type metadata accessor for Date(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = v36 + *(_QWORD *)(v38 + 72) * v32;
      v40 = (uint64_t)v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v68, v39, v37);
      sub_100106ACC(v32, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v37);
      v24 = v70;
    }
    else
    {
      v41 = type metadata accessor for Date(0);
      v40 = (uint64_t)v68;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v68, 1, 1, v41);
    }
    sub_100004048(v40, (uint64_t *)&unk_1010EA690);
    v42 = *(_QWORD *)(v24 + v26);
    *(_QWORD *)(v24 + v26) = v31;
    swift_bridgeObjectRetain(v31);
    v43 = sub_100327520(v42, v31);
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0)
      sub_1007EEF64(13);
    v44 = v11;
    swift_bridgeObjectRelease();
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v45 = type metadata accessor for Logger(0);
    sub_10001A9E8(v45, (uint64_t)qword_1011B6D28);
    v46 = v67;
    v47 = v74;
    v48 = ((uint64_t (*)(char *, char *, uint64_t))v75)(v67, v44, v74);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(32, -1);
      v76[0] = v52;
      *(_DWORD *)v51 = v64.n128_u32[0];
      *(_QWORD *)(v51 + 4) = 1752392040;
      *(_WORD *)(v51 + 12) = 2081;
      v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v47, v53);
      *(_QWORD *)(v51 + 14) = sub_100016940(v54, v55, v76);
      swift_bridgeObjectRelease();
      v56 = *(void (**)(char *, uint64_t))(v6 + 8);
      v56(v46, v47);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Shared fetch - Removed ACSN locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy(v52, 1, v63);
      swift_slowDealloc(v52, -1, -1);
      v57 = v51;
      v24 = v70;
      swift_slowDealloc(v57, -1, -1);

      v56(v44, v47);
    }
    else
    {

      v29 = *(void (**)(char *, uint64_t))(v6 + 8);
      v29(v46, v47);
      v29(v44, v47);
    }
    v11 = v44;
    v27 = &v72[v71];
    v25 = v73 - 1;
    v5 = v74;
    v16 = v69;
    v26 = v66;
    if (v73 == 1)
    {
      v65(v69, 1, 1, v74, v30);
      break;
    }
  }
LABEL_27:
  swift_bridgeObjectRelease();
  v60 = sub_10001B664((uint64_t)v18);
  swift_bridgeObjectRelease();
  sub_1003306E0(v60);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100322A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __n128 v28;
  void (*v29)(char *, uint64_t);
  __n128 v30;
  uint64_t Strong;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  char *v70;
  __n128 v71;
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82[3];
  _QWORD v83[3];
  uint64_t v84;
  uint64_t v85;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v76 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v75 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v72 = (char *)&v69 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v69 - v13;
  v15 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = a3 + 16;
  v18 = *(_QWORD *)(a2 + 16);
  v19 = _swiftEmptyArrayStorage;
  if (v18)
  {
    v82[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10009A578(0, v18, 0);
    v20 = a2 + 32;
    v19 = (_QWORD *)v82[0];
    do
    {
      sub_100030784(v20, (uint64_t)v83);
      v22 = v84;
      v21 = v85;
      sub_10001AA44(v83, v84);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8) + 32))(v22);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v83);
      if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
      {
        sub_10009A578(0, v19[2] + 1, 1);
        v19 = (_QWORD *)v82[0];
      }
      v24 = v19[2];
      v23 = v19[3];
      if (v24 >= v23 >> 1)
      {
        sub_10009A578(v23 > 1, v24 + 1, 1);
        v19 = (_QWORD *)v82[0];
      }
      v19[2] = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v24, v14, v7);
      v82[0] = (uint64_t)v19;
      v20 += 40;
      --v18;
    }
    while (v18);
  }
  v25 = (uint64_t)v72;
  v26 = v19[2];
  if (v26)
  {
    v27 = (char *)v19 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    swift_bridgeObjectRetain(v19);
    v28 = swift_beginAccess(v77, v83, 0, 0);
    v78 = *(_QWORD *)(v8 + 72);
    v81 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v28.n128_u64[0] = 141558275;
    v71 = v28;
    v70 = (char *)&type metadata for Any + 8;
    v73 = v17;
    v81(v17, v27, v7);
    while (1)
    {
      v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v74)(v17, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7) == 1)
        break;
      v79 = v27;
      v80 = v26;
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v25, v17, v7);
      Strong = swift_weakLoadStrong(v77);
      if (Strong)
      {
        v32 = Strong;
        v33 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
        v34 = *(_QWORD *)(Strong + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
        swift_bridgeObjectRetain_n(v34, 2);
        v35 = sub_100003FB0(v25);
        v37 = v36;
        swift_bridgeObjectRelease();
        if ((v37 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
          v82[0] = v34;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100A9C52C();
            v34 = v82[0];
          }
          (*(void (**)(unint64_t, uint64_t))(v8 + 8))(*(_QWORD *)(v34 + 48) + v35 * v78, v7);
          v34 = v82[0];
          v39 = v7;
          v40 = *(_QWORD *)(v82[0] + 56);
          v41 = type metadata accessor for Date(0);
          v42 = *(_QWORD *)(v41 - 8);
          v43 = v40 + *(_QWORD *)(v42 + 72) * v35;
          v7 = v39;
          v44 = v76;
          (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v76, v43, v41);
          v45 = v35;
          v46 = (uint64_t)v44;
          sub_100106ACC(v45, v34);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v41);
          v25 = (uint64_t)v72;
        }
        else
        {
          v49 = type metadata accessor for Date(0);
          v46 = (uint64_t)v76;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v76, 1, 1, v49);
        }
        sub_100004048(v46, (uint64_t *)&unk_1010EA690);
        v50 = *(_QWORD *)(v32 + v33);
        *(_QWORD *)(v32 + v33) = v34;
        swift_bridgeObjectRetain(v34);
        v51 = sub_100327520(v50, v34);
        swift_bridgeObjectRelease();
        if ((v51 & 1) == 0)
          sub_1007EEF64(13);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v47 = type metadata accessor for Date(0);
        v48 = (uint64_t)v76;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v76, 1, 1, v47);
        sub_100004048(v48, (uint64_t *)&unk_1010EA690);
      }
      v52 = v75;
      if (qword_1010E9B58 != -1)
        swift_once(&qword_1010E9B58, sub_1003087EC);
      v53 = type metadata accessor for Logger(0);
      sub_10001A9E8(v53, (uint64_t)qword_1011B6D28);
      v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v52, v25, v7);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.default.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        v57 = v52;
        v58 = swift_slowAlloc(22, -1);
        v59 = swift_slowAlloc(32, -1);
        v82[0] = v59;
        *(_DWORD *)v58 = v71.n128_u32[0];
        *(_QWORD *)(v58 + 4) = 1752392040;
        *(_WORD *)(v58 + 12) = 2081;
        v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v61 = dispatch thunk of CustomStringConvertible.description.getter(v7, v60);
        *(_QWORD *)(v58 + 14) = sub_100016940(v61, v62, v82);
        swift_bridgeObjectRelease();
        v29 = *(void (**)(char *, uint64_t))(v8 + 8);
        v63 = v57;
        v25 = (uint64_t)v72;
        v29(v63, v7);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Local findable fetch - Removed ACSN locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy(v59, 1, v70);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);

      }
      else
      {

        v29 = *(void (**)(char *, uint64_t))(v8 + 8);
        v29(v52, v7);
      }
      v29((char *)v25, v7);
      v17 = v73;
      v27 = &v79[v78];
      v26 = v80 - 1;
      if (v80 == 1)
      {
        v74(v73, 1, 1, v7, v30);
        break;
      }
      v81(v73, v27, v7);
    }
  }
  else
  {
    v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
    v65 = swift_bridgeObjectRetain(v19);
    v64(v17, 1, 1, v7, v65);
  }
  swift_bridgeObjectRelease();
  v66 = v77;
  swift_beginAccess(v77, v82, 0, 0);
  if (swift_weakLoadStrong(v66))
  {
    v67 = sub_10001B664((uint64_t)v19);
    swift_bridgeObjectRelease();
    sub_1003306E0(v67);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100323100(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier, v13, 33, 0);
  swift_bridgeObjectRetain(*v3);
  v4 = sub_100003FB0(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v8 = *v3;
    v12 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100A9C9E4();
      v8 = v12;
    }
    v9 = *(_QWORD *)(v8 + 48);
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v4, v10);
    sub_100106AF0(v4, v12);
    *v3 = v12;
    swift_bridgeObjectRelease();
  }
  swift_endAccess(v13);
  return swift_release();
}

uint64_t sub_10032320C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  void (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _BYTE v75[24];
  uint64_t v76;

  v70 = a4;
  v71 = a5;
  v69 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v69);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F7970);
  v64 = *(_QWORD *)(v10 - 8);
  v65 = v10;
  __chkstk_darwin(v10);
  v63 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F7978);
  v67 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  __chkstk_darwin(v12);
  v66 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v14 - 8);
  v73 = (char *)v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SharedBeaconRecord(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v75, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v61 = a1;
    v25 = result;
    swift_retain();
    v60 = a3;
    sub_10080CD54(a3, (uint64_t)v19);
    swift_release();
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
    v62 = v25;
    if (v26 == 1)
    {
      sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EE180);
      if (qword_1010E9B48 != -1)
        swift_once(&qword_1010E9B48, sub_100308748);
      v27 = type metadata accessor for Logger(0);
      sub_10001A9E8(v27, (uint64_t)qword_1011B6D08);
      v29 = v72;
      v28 = (uint64_t)v73;
      v30 = (*(uint64_t (**)(char *, uint64_t, char *))(v72 + 16))(v16, v60, v73);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v34 = swift_slowAlloc(32, -1);
        v76 = v34;
        *(_DWORD *)v33 = 136315138;
        v69 = (uint64_t)(v33 + 4);
        v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v36 = dispatch thunk of CustomStringConvertible.description.getter(v28, v35);
        v74 = sub_100016940(v36, v37, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v69, v33 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v28);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "requestLiveLocation could not find SharedBeaconRecord for: %s", v33, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v28);
      }

      v70(0, 0);
      return swift_release();
    }
    else
    {
      v38 = sub_1000126EC((uint64_t)v19, (uint64_t)v23, type metadata accessor for SharedBeaconRecord);
      result = Transaction.subscriptionCleaner.getter(v38);
      v39 = *(_QWORD *)(v25 + 40);
      if (v39)
      {
        v40 = result;
        (*(void (**)(char *, char *, char *))(v72 + 16))(v9, &v23[*(int *)(v20 + 20)], v73);
        result = swift_storeEnumTagMultiPayload(v9, v69, 2);
        v41 = *(_QWORD *)(v39 + 432);
        v73 = v23;
        if (v41)
        {
          swift_retain();
          swift_retain();
          v42 = dispatch thunk of AsynchronousCache.value(for:)(v9);
          swift_release();
          v76 = v42;
          v43 = sub_10001A9A8(&qword_1010F7980);
          v44 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
          v45 = Publisher.eraseToAnyPublisher()(v43, v44);
          swift_release();
          sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconSharingSessionContext);
          swift_release();
          v76 = v45;
          v46 = sub_10001A9A8(&qword_1010F7990);
          v47 = v63;
          Publisher.map<A>(_:)(sub_100323884, 0, v43, v46, v44);
          swift_release();
          v48 = sub_10001A9A8(&qword_1010F7998);
          v49 = sub_1000193A4(&qword_1010F79A0, &qword_1010F7970, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
          v50 = sub_1000193A4(&qword_1010F79A8, &qword_1010F7998, (const char *)&protocol conformance descriptor for Just<A>);
          v51 = v65;
          v52 = v66;
          Publisher.catch<A>(_:)(sub_100323894, 0, v65, v48, v49, v50);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v51);
          v53 = (_QWORD *)swift_allocObject(&unk_10106C790, 48, 7);
          v54 = v70;
          v55 = v71;
          v53[2] = v40;
          v53[3] = v54;
          v56 = v61;
          v53[4] = v55;
          v53[5] = v56;
          v57 = sub_1000193A4(&qword_1010F79B0, &qword_1010F7978, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
          swift_unknownObjectRetain(v40);
          swift_retain();
          swift_retain();
          v58 = v68;
          Publisher<>.sink(receiveValue:)(sub_100336080, v53, v68, v57);
          swift_release();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v52, v58);
          AnyCancellable.store(in:)(v56);
          swift_unknownObjectRelease(v40);
          swift_release();
          swift_release();
          return sub_1000126B0((uint64_t)v73, type metadata accessor for SharedBeaconRecord);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100323884@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 0;
  return swift_retain(v2);
}

void sub_100323898(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v9 = sub_10001A9A8(&qword_1010F79B8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F79C0);
  __chkstk_darwin(v13);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v44 = v14;
    v45 = a5;
    v48 = *(_QWORD *)(v17 + qword_1011B6D00);
    sub_100336050(v17, 0);
    swift_retain();
    v28 = sub_10001A9A8(&qword_1010F79D0);
    v43 = a2;
    v29 = v28;
    v30 = sub_10001A9A8(&qword_1010F79D8);
    v42 = a4;
    v31 = v30;
    v32 = sub_1000193A4(&qword_1010F79E0, &qword_1010F79D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100323D08, 0, v29, v31, v32);
    swift_release();
    v33 = sub_10001A9A8(&qword_1010F79E8);
    v34 = sub_1000193A4(&qword_1010F79F0, &qword_1010F79B8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v35 = sub_1000193A4(&qword_1010F79F8, &qword_1010F79E8, (const char *)&protocol conformance descriptor for Just<A>);
    Publisher.catch<A>(_:)(sub_100323D0C, 0, v9, v33, v34, v35);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v36 = (_QWORD *)swift_allocObject(&unk_10106C7B8, 40, 7);
    v38 = v42;
    v37 = v43;
    v39 = v46;
    v36[2] = v43;
    v36[3] = v39;
    v36[4] = v38;
    v40 = sub_1000193A4(&qword_1010F7A00, (uint64_t *)&unk_1010F79C0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_unknownObjectRetain(v37);
    swift_retain();
    Publisher<>.sink(receiveValue:)(sub_1003360A0, v36, v13, v40);
    swift_release();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v13);
    AnyCancellable.store(in:)(v45);
    swift_release();
    v26 = v17;
    v27 = 0;
    goto LABEL_7;
  }
  sub_100165D28(*(_QWORD *)a1);
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B6D08);
  sub_100165D28(v17);
  v19 = sub_100165D28(v17);
  v46 = Logger.logObject.getter(v19);
  v20 = static os_log_type_t.error.getter(v46);
  if (os_log_type_enabled(v46, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v47 = v17;
    v48 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = sub_1000FE094();
    v24 = Error.localizedDescription.getter(&type metadata for MessagingError, v23);
    v47 = sub_100016940(v24, v25, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    sub_100336044(v17, 1);
    sub_100336044(v17, 1);
    _os_log_impl((void *)&_mh_execute_header, v46, v20, "ERROR retrieving messagingSession: %s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v26 = v17;
    v27 = 1;
LABEL_7:
    sub_100336044(v26, v27);
    return;
  }
  sub_100336044(v17, 1);
  sub_100336044(v17, 1);
  sub_100165D38(v17);

}

void sub_100323D10(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = sub_10001A9A8(&qword_1010F7A08);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F79D8);
  __chkstk_darwin(v8);
  v10 = (unint64_t *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v10, &qword_1010F79D8);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = *v10;
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B6D08);
    sub_100165D28(v11);
    v13 = sub_100165D28(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = sub_1000FE094();
      v19 = swift_allocError(&type metadata for MessagingError, v18, 0, 0);
      *v20 = v11;
      sub_100165D28(v11);
      v21 = _swift_stdlib_bridgeErrorToNSError(v19);
      v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v16 + 4, v16 + 12);
      *v17 = v21;
      sub_100165D38(v11);
      sub_100165D38(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "TRACE received error: %@", v16, 0xCu);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v22);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      sub_100165D38(v11);
    }
    else
    {
      sub_100165D38(v11);
      sub_100165D38(v11);
      sub_100165D38(v11);

    }
  }
  else
  {
    sub_100005CF0((uint64_t)v10, (uint64_t)v7, &qword_1010F7A08);
    v23 = sub_1008AA2D0();
    a3(v23);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v7, &qword_1010F7A08);
  }
}

uint64_t sub_100324184(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(_QWORD, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];
  uint64_t v63;

  v59 = a1;
  v11 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F7970);
  v55 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F7978);
  v58 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v57 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v62, 0, 0);
  result = swift_weakLoadStrong(a2);
  v60 = result;
  if (result)
  {
    v52 = v17;
    v53 = a5;
    v54 = a6;
    swift_bridgeObjectRetain(a4);
    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(a3, a4);
    if (v22)
    {
      v23 = v20;
      v24 = v21;
      v25 = v22;
      result = Transaction.subscriptionCleaner.getter(v20);
      v51 = result;
      v26 = *(_QWORD *)(v60 + 40);
      if (v26)
      {
        *v13 = v23;
        *((_QWORD *)v13 + 1) = v24;
        *((_QWORD *)v13 + 2) = v25;
        result = swift_storeEnumTagMultiPayload(v13, v11, 1);
        if (*(_QWORD *)(v26 + 432))
        {
          swift_retain();
          swift_bridgeObjectRetain(v25);
          swift_retain();
          v27 = dispatch thunk of AsynchronousCache.value(for:)(v13);
          swift_release();
          v63 = v27;
          v28 = sub_10001A9A8(&qword_1010F7980);
          v29 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
          v30 = Publisher.eraseToAnyPublisher()(v28, v29);
          swift_release();
          sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconSharingSessionContext);
          swift_release();
          swift_bridgeObjectRelease();
          v63 = v30;
          v31 = sub_10001A9A8(&qword_1010F7990);
          Publisher.map<A>(_:)(sub_100336F7C, 0, v28, v31, v29);
          swift_release();
          v32 = sub_10001A9A8(&qword_1010F7998);
          v33 = sub_1000193A4(&qword_1010F79A0, &qword_1010F7970, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
          v34 = sub_1000193A4(&qword_1010F79A8, &qword_1010F7998, (const char *)&protocol conformance descriptor for Just<A>);
          v36 = v56;
          v35 = v57;
          Publisher.catch<A>(_:)(sub_100323894, 0, v56, v32, v33, v34);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v16, v36);
          v37 = (_QWORD *)swift_allocObject(&unk_10106C740, 48, 7);
          v38 = v51;
          v39 = v53;
          v40 = v54;
          v37[2] = v51;
          v37[3] = v39;
          v41 = v59;
          v37[4] = v40;
          v37[5] = v41;
          v42 = sub_1000193A4(&qword_1010F79B0, &qword_1010F7978, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
          swift_unknownObjectRetain(v38);
          swift_retain();
          swift_retain();
          v43 = v52;
          Publisher<>.sink(receiveValue:)(sub_100336038, v37, v52, v42);
          swift_release();
          (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v43);
          AnyCancellable.store(in:)(v41);
          swift_release();
          swift_unknownObjectRelease(v38);
          return swift_release();
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v44 = type metadata accessor for Logger(0);
    sub_10001A9E8(v44, (uint64_t)qword_1011B6D08);
    swift_bridgeObjectRetain_n(a4, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v63 = v49;
      *(_DWORD *)v48 = 136315138;
      swift_bridgeObjectRetain(a4);
      v61 = sub_100016940(a3, a4, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "requestLiveLocation could not create MessagingDestination for: %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    v53(0, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1003246C4(unint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  char v4;

  v3 = *a1;
  v4 = 1;
  sub_100165D28(v3);
  v1 = sub_10001A9A8(&qword_1010F7990);
  return Just.init(_:)(&v3, v1);
}

unint64_t sub_100324718(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(_QWORD, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;

  v44 = a2;
  v45 = a3;
  v8 = sub_10001A9A8(&qword_1010F79B8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F79C0);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)a1;
  LODWORD(v17) = *(unsigned __int8 *)(a1 + 8);
  if ((v17 & 1) != 0)
  {
    sub_100165D28(*(_QWORD *)a1);
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B6D08);
    sub_100165D28(v16);
    v19 = sub_100165D28(v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v46 = v16;
      v47 = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = sub_1000FE094();
      v25 = Error.localizedDescription.getter(&type metadata for MessagingError, v24);
      v46 = sub_100016940(v25, v26, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      sub_100336044(v16, 1);
      sub_100336044(v16, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "ERROR retrieving messagingSession: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_100336044(v16, 1);
      sub_100336044(v16, 1);
    }

    v45(0, 0);
  }
  else
  {
    v40 = a4;
    v47 = *(_QWORD *)(v16 + qword_1011B6D00);
    v42 = v13;
    sub_100336050(v16, 0);
    swift_retain();
    v27 = sub_10001A9A8(&qword_1010F79D0);
    v41 = a5;
    v28 = v27;
    v29 = sub_10001A9A8(&qword_1010F79D8);
    v43 = v17;
    v30 = v29;
    v31 = sub_1000193A4(&qword_1010F79E0, &qword_1010F79D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100323D08, 0, v28, v30, v31);
    swift_release();
    v32 = sub_10001A9A8(&qword_1010F79E8);
    v17 = sub_1000193A4(&qword_1010F79F0, &qword_1010F79B8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v33 = sub_1000193A4(&qword_1010F79F8, &qword_1010F79E8, (const char *)&protocol conformance descriptor for Just<A>);
    v34 = v17;
    LOBYTE(v17) = v43;
    Publisher.catch<A>(_:)(sub_100323D0C, 0, v8, v32, v34, v33);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v35 = (_QWORD *)swift_allocObject(&unk_10106C768, 40, 7);
    v37 = v44;
    v36 = v45;
    v35[2] = v44;
    v35[3] = v36;
    v35[4] = v40;
    v38 = sub_1000193A4(&qword_1010F7A00, (uint64_t *)&unk_1010F79C0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_unknownObjectRetain(v37);
    swift_retain();
    Publisher<>.sink(receiveValue:)(sub_100336070, v35, v12, v38);
    swift_release();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v12);
    AnyCancellable.store(in:)(v41);
    swift_release();
  }
  return sub_100336044(v16, v17);
}

uint64_t sub_100324B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  sub_10000F9B8(a1, a2, &qword_1010F7A08);
  v3 = sub_10001A9A8(&qword_1010F79D8);
  return swift_storeEnumTagMultiPayload(a2, v3, 0);
}

uint64_t sub_100324BC0(unint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v7;

  v2 = sub_10001A9A8(&qword_1010F79D8);
  __chkstk_darwin(v2);
  v4 = (unint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *a1;
  *v4 = v5;
  swift_storeEnumTagMultiPayload(v4, v2, 1);
  sub_100165D28(v5);
  return Just.init(_:)(v4, v2);
}

unint64_t sub_100324C58(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = sub_10001A9A8(&qword_1010F7A08);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F79D8);
  __chkstk_darwin(v8);
  v10 = (unint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v10, &qword_1010F79D8);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = *v10;
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B6D08);
    sub_100165D28(v11);
    v13 = sub_100165D28(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = sub_1000FE094();
      v19 = swift_allocError(&type metadata for MessagingError, v18, 0, 0);
      *v20 = v11;
      sub_100165D28(v11);
      v21 = _swift_stdlib_bridgeErrorToNSError(v19);
      v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v16 + 4, v16 + 12);
      *v17 = v21;
      sub_100165D38(v11);
      sub_100165D38(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "readMessagePublisher error: %@", v16, 0xCu);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v22);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_100165D38(v11);
      sub_100165D38(v11);
    }

    ((void (*)(_QWORD, _QWORD))a3)(0, 0);
    return sub_100165D38(v11);
  }
  else
  {
    sub_100005CF0((uint64_t)v10, (uint64_t)v7, &qword_1010F7A08);
    v23 = sub_1008AA2D0();
    a3(v23);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v7, &qword_1010F7A08);
  }
}

uint64_t sub_1003250D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a4;
  return swift_task_switch(sub_1003250F0, 0, 0);
}

uint64_t sub_1003250F0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBA0 + dword_1010EBBA0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBA4);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_1003251DC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003251DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100325238, 0, 0);
}

uint64_t sub_100325238()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 136))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1011055CC);
    *(_QWORD *)(v0 + 144) = v2;
    *v2 = v0;
    v2[1] = sub_1003252AC;
    return sub_100713078(*(_QWORD *)(v0 + 120));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003252AC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100325300, 0, 0);
}

uint64_t sub_100325300()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_100325330(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F0D8(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10032AB44(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1003253B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 16);
  v13 = v1;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v11 = 1;
    return v11 & 1;
  }
  v3 = (unsigned __int8 *)(v1 + 32);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = v2 - 1;
  while (1)
  {
    v5 = v4;
    v7 = *v3++;
    v6 = v7;
    if (v7 != 1)
      break;
    v8 = 0xE900000000000079;
    v9 = 0x7261646E6F636553;
LABEL_7:
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, 0x7972616D697250, 0xE700000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      v4 = v5 - 1;
      if (v5)
        continue;
    }
    v11 = v10 ^ 1;
    goto LABEL_12;
  }
  if (v6 == 2)
  {
    v8 = 0xEF736E6F69746163;
    v9 = 0x6F4C657275636553;
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  v11 = 0;
LABEL_12:
  sub_1001AE6D8(&v13);
  sub_1001AE6D8(&v13);
  return v11 & 1;
}

uint64_t sub_1003254B4()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;

  _StringGuts.grow(_:)(55);
  v1._object = (void *)0x8000000100ED0C30;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0xEC000000203A6B73;
  v3._countAndFlagsBits = 0x69446D6F7266202CLL;
  String.append(_:)(v3);
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x6E6575716573202CLL;
  v7._object = (void *)0xED0000203A736563;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  v9._countAndFlagsBits = Array.description.getter(v8, &type metadata for BeaconKeyManager.KeySequence);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8236;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  _StringGuts.grow(_:)(71);
  v11._countAndFlagsBits = 0x6974737561687865;
  v11._object = (void *)0xEC000000203A6576;
  String.append(_:)(v11);
  v12 = sub_1003253B0();
  v13 = (v12 & 1) == 0;
  if ((v12 & 1) != 0)
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if (v13)
    v15 = 0xE500000000000000;
  else
    v15 = 0xE400000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x8000000100ED0C50;
  v17._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD00000000000001FLL;
  v19._object = (void *)0x8000000100ED0C70;
  String.append(_:)(v19);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(0xE000000000000000);
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1003257C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL8 v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v44 - v9;
  v11 = sub_10001A9A8(&qword_1010F7AB0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (unsigned __int8 *)&v44 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v48 = a2;
  v49 = 0;
  v47 = a1;
  v20 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v18;
  v45 = v19;
  v46 = (unint64_t)(v21 + 63) >> 6;
  v44 = v46 - 1;
  while (1)
  {
    if (v23)
    {
      v24 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v25 = v24 | (v49 << 6);
LABEL_8:
      v26 = *(_BYTE *)(*(_QWORD *)(v47 + 48) + v25);
      v27 = *(_QWORD *)(v47 + 56) + *(_QWORD *)(v5 + 72) * v25;
      v28 = sub_10001A9A8(&qword_1010F7AB8);
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v5 + 16))(&v14[*(int *)(v28 + 48)], v27, v4);
      *v14 = v26;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 0, 1, v28);
      v29 = v48;
      goto LABEL_27;
    }
    v30 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    v29 = v48;
    if (v30 < v46)
    {
      v31 = *(_QWORD *)(v45 + 8 * v30);
      if (v31)
        goto LABEL_12;
      v32 = v49 + 2;
      ++v49;
      if (v30 + 1 < v46)
      {
        v31 = *(_QWORD *)(v45 + 8 * v32);
        if (v31)
          goto LABEL_15;
        v49 = v30 + 1;
        if (v30 + 2 < v46)
        {
          v31 = *(_QWORD *)(v45 + 8 * (v30 + 2));
          if (v31)
          {
            v30 += 2;
            goto LABEL_12;
          }
          v32 = v30 + 3;
          v49 = v30 + 2;
          if (v30 + 3 < v46)
            break;
        }
      }
    }
LABEL_26:
    v33 = sub_10001A9A8(&qword_1010F7AB8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
    v23 = 0;
LABEL_27:
    sub_100005CF0((uint64_t)v14, (uint64_t)v17, &qword_1010F7AB0);
    v34 = sub_10001A9A8(&qword_1010F7AB8);
    v35 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v17, 1, v34);
    v36 = v35 == 1;
    if (v35 == 1)
      return v36;
    v37 = &v17[*(int *)(v34 + 48)];
    v38 = *v17;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v10, v37, v4);
    v39 = sub_100518D70(v38);
    if ((v40 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      return 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v29 + 56) + *(_QWORD *)(v5 + 72) * v39, v4);
    v41 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v42 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v10, v4, v41);
    v43 = *(void (**)(char *, uint64_t))(v5 + 8);
    v43(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v43)(v10, v4);
    if ((v42 & 1) == 0)
      return v36;
  }
  v31 = *(_QWORD *)(v45 + 8 * v32);
  if (v31)
  {
LABEL_15:
    v30 = v32;
LABEL_12:
    v23 = (v31 - 1) & v31;
    v25 = __clz(__rbit64(v31)) + (v30 << 6);
    v49 = v30;
    goto LABEL_8;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v46)
    {
      v49 = v44;
      goto LABEL_26;
    }
    v31 = *(_QWORD *)(v45 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100325BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = type metadata accessor for FeatureSupportMatrix(0);
  v5 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v58 = v5;
  v6 = __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v51 - v9);
  v11 = sub_10001A9A8(&qword_1010F7840);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v51 - v16;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v55 = a1;
  v56 = 0;
  v18 = *(_QWORD *)(a1 + 64);
  v53 = a1 + 64;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v54 = (unint64_t)(v19 + 63) >> 6;
  v52 = v54 - 1;
  while (1)
  {
    if (v21)
    {
      v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v23 = v22 | (v56 << 6);
LABEL_8:
      v24 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v23);
      v25 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v58 + 72) * v23;
      v26 = sub_10001A9A8(&qword_1010F7848);
      sub_10005972C(v25, (uint64_t)&v14[*(int *)(v26 + 48)], type metadata accessor for FeatureSupportMatrix);
      *v14 = v24;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 0, 1, v26);
      goto LABEL_27;
    }
    v27 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v27 < v54)
    {
      v28 = *(_QWORD *)(v53 + 8 * v27);
      if (v28)
        goto LABEL_12;
      v29 = v56 + 2;
      ++v56;
      if (v27 + 1 < v54)
      {
        v28 = *(_QWORD *)(v53 + 8 * v29);
        if (v28)
          goto LABEL_15;
        v56 = v27 + 1;
        if (v27 + 2 < v54)
        {
          v28 = *(_QWORD *)(v53 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_12;
          }
          v29 = v27 + 3;
          v56 = v27 + 2;
          if (v27 + 3 < v54)
            break;
        }
      }
    }
LABEL_26:
    v30 = sub_10001A9A8(&qword_1010F7848);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 1, 1, v30);
    v21 = 0;
LABEL_27:
    sub_100005CF0((uint64_t)v14, (uint64_t)v17, &qword_1010F7840);
    v31 = sub_10001A9A8(&qword_1010F7848);
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v17, 1, v31);
    v33 = v32 == 1;
    if (v32 == 1)
      return v33;
    v34 = (uint64_t)&v17[*(int *)(v31 + 48)];
    v35 = *v17;
    sub_1000126EC(v34, (uint64_t)v10, type metadata accessor for FeatureSupportMatrix);
    v36 = sub_100518DB4(v35);
    if ((v37 & 1) == 0)
      goto LABEL_46;
    sub_10005972C(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v58 + 72) * v36, (uint64_t)v8, type metadata accessor for FeatureSupportMatrix);
    if (*(unsigned __int8 *)v8 != *(unsigned __int8 *)v10 || (sub_100326244(v8[1], v10[1]) & 1) == 0)
    {
LABEL_45:
      sub_1000126B0((uint64_t)v8, type metadata accessor for FeatureSupportMatrix);
LABEL_46:
      sub_1000126B0((uint64_t)v10, type metadata accessor for FeatureSupportMatrix);
      return 0;
    }
    v38 = v8[2];
    v39 = v10[2];
    if (v38)
    {
      if (!v39)
        goto LABEL_45;
      swift_bridgeObjectRetain(v10[2]);
      v40 = swift_bridgeObjectRetain(v38);
      v41 = sub_100326244(v40, v39);
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(v39);
      if ((v41 & 1) == 0)
        goto LABEL_45;
    }
    else if (v39)
    {
      goto LABEL_45;
    }
    if ((sub_1003263D8(v8[3], v10[3]) & 1) == 0)
      goto LABEL_45;
    v42 = v8[4];
    v43 = v10[4];
    if (v42)
    {
      if (!v43)
        goto LABEL_45;
      swift_bridgeObjectRetain(v10[4]);
      v44 = swift_bridgeObjectRetain(v42);
      v45 = sub_1003263D8(v44, v43);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v43);
      if ((v45 & 1) == 0)
        goto LABEL_45;
    }
    else if (v43)
    {
      goto LABEL_45;
    }
    v46 = *(int *)(v57 + 36);
    v47 = (char *)v8 + v46;
    v48 = (char *)v10 + v46;
    v49 = sub_100330BA4();
    v50 = sub_100330BE8();
    LOBYTE(v47) = static CustomCodableKeyDictionary<>.== infix(_:_:)(v47, v48, &type metadata for FeatureSupportMatrixProductType, &type metadata for Bool, v49, v50, &protocol witness table for Bool, &protocol witness table for Bool, &protocol witness table for Bool);
    sub_1000126B0((uint64_t)v8, type metadata accessor for FeatureSupportMatrix);
    result = sub_1000126B0((uint64_t)v10, type metadata accessor for FeatureSupportMatrix);
    a1 = v55;
    if ((v47 & 1) == 0)
      return v33;
  }
  v28 = *(_QWORD *)(v53 + 8 * v29);
  if (v28)
  {
LABEL_15:
    v27 = v29;
LABEL_12:
    v21 = (v28 - 1) & v28;
    v23 = __clz(__rbit64(v28)) + (v27 << 6);
    v56 = v27;
    goto LABEL_8;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v54)
    {
      v56 = v52;
      goto LABEL_26;
    }
    v28 = *(_QWORD *)(v53 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_12;
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_1003260A8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = sub_100518DA0(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0 || *(double *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100326244(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = sub_100518DA0(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1003263D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  int64_t v65;
  _BOOL4 v66;
  uint64_t v67;

  v4 = type metadata accessor for SystemVersionNumber(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v63 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v56 - v8;
  v10 = sub_10001A9A8(&qword_1010F7860);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v64 = (uint64_t *)((char *)&v56 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v65 = 0;
  v60 = a1;
  v61 = v5;
  v18 = *(_QWORD *)(a1 + 64);
  v17 = a1 + 64;
  v16 = v18;
  v19 = 1 << *(_BYTE *)(v17 - 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v16;
  v58 = v17;
  v59 = (unint64_t)(v19 + 63) >> 6;
  v57 = v59 - 1;
  v22 = (uint64_t *)&unk_1010F7868;
  v62 = a2;
  v67 = v4;
  while (1)
  {
    if (v21)
    {
      v23 = __clz(__rbit64(v21));
      v24 = (v21 - 1) & v21;
      v25 = v23 | (v65 << 6);
LABEL_8:
      v26 = (uint64_t *)(*(_QWORD *)(v60 + 48) + 16 * v25);
      v28 = *v26;
      v27 = v26[1];
      v29 = *(_QWORD *)(v60 + 56) + *(_QWORD *)(v5 + 72) * v25;
      v30 = sub_10001A9A8(v22);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v13[*(int *)(v30 + 48)], v29, v67);
      *(_QWORD *)v13 = v28;
      *((_QWORD *)v13 + 1) = v27;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 0, 1, v30);
      swift_bridgeObjectRetain(v27);
      goto LABEL_27;
    }
    v31 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v31 < v59)
    {
      v32 = *(_QWORD *)(v58 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v65 + 2;
      ++v65;
      if (v31 + 1 < v59)
      {
        v32 = *(_QWORD *)(v58 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v65 = v31 + 1;
        if (v31 + 2 < v59)
        {
          v32 = *(_QWORD *)(v58 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v33 = v31 + 3;
          v65 = v31 + 2;
          if (v31 + 3 < v59)
            break;
        }
      }
    }
LABEL_26:
    v34 = sub_10001A9A8(v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v13, 1, 1, v34);
    v24 = 0;
LABEL_27:
    v35 = v64;
    sub_100005CF0((uint64_t)v13, (uint64_t)v64, &qword_1010F7860);
    v36 = sub_10001A9A8(v22);
    v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36);
    v66 = v37 == 1;
    if (v37 == 1)
      return v66;
    v38 = v24;
    v39 = v22;
    v40 = v13;
    v41 = (char *)v35 + *(int *)(v36 + 48);
    v42 = *v35;
    v43 = v35[1];
    v5 = v61;
    v44 = v67;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v9, v41, v67);
    v45 = v42;
    v46 = v62;
    v47 = v9;
    v48 = sub_100518DA0(v45, v43);
    v50 = v49;
    swift_bridgeObjectRelease(v43);
    if ((v50 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v47, v44);
      return 0;
    }
    v51 = *(_QWORD *)(v46 + 56) + *(_QWORD *)(v5 + 72) * v48;
    v52 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v63, v51, v44);
    v53 = sub_100006204(&qword_1010F7870, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v54 = dispatch thunk of static Equatable.== infix(_:_:)(v52, v47, v44, v53);
    v55 = *(void (**)(char *, uint64_t))(v5 + 8);
    v55(v52, v44);
    result = ((uint64_t (*)(char *, uint64_t))v55)(v47, v44);
    v9 = v47;
    v13 = v40;
    v22 = v39;
    v21 = v38;
    if ((v54 & 1) == 0)
      return v66;
  }
  v32 = *(_QWORD *)(v58 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v24 = (v32 - 1) & v32;
    v25 = __clz(__rbit64(v32)) + (v31 << 6);
    v65 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v59)
    {
      v65 = v57;
      goto LABEL_26;
    }
    v32 = *(_QWORD *)(v58 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100326820(uint64_t a1, uint64_t a2)
{
  return sub_100326848(a1, a2, &qword_1010F7778, (uint64_t *)&unk_1010F7780);
}

uint64_t sub_100326834(uint64_t a1, uint64_t a2)
{
  return sub_100326848(a1, a2, (uint64_t *)&unk_1010F7820, &qword_1010F2B78);
}

uint64_t sub_100326848(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  int64_t v50;
  _BOOL4 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v8 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  __chkstk_darwin(v8);
  v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a3;
  v10 = sub_10001A9A8(a3);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v16 = (char *)&v44 - v15;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v50 = 0;
  v47 = a1;
  v17 = *(_QWORD *)(a1 + 64);
  v45 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v44 = v46 - 1;
  v21 = v53;
  v22 = (uint64_t)v48;
  while (1)
  {
    if (v20)
    {
      v23 = __clz(__rbit64(v20));
      v24 = (v20 - 1) & v20;
      v25 = v23 | (v50 << 6);
LABEL_8:
      v26 = v47;
      (*(void (**)(char *, unint64_t, uint64_t))(v53 + 16))(v13, *(_QWORD *)(v47 + 48) + *(_QWORD *)(v53 + 72) * v25, v54);
      v27 = *(_BYTE *)(*(_QWORD *)(v26 + 56) + v25);
      v28 = sub_10001A9A8(a4);
      v13[*(int *)(v28 + 48)] = v27;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 0, 1, v28);
      goto LABEL_27;
    }
    v29 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v29 < v46)
    {
      v30 = *(_QWORD *)(v45 + 8 * v29);
      if (v30)
        goto LABEL_12;
      v31 = v50 + 2;
      ++v50;
      if (v29 + 1 < v46)
      {
        v30 = *(_QWORD *)(v45 + 8 * v31);
        if (v30)
          goto LABEL_15;
        v50 = v29 + 1;
        if (v29 + 2 < v46)
        {
          v30 = *(_QWORD *)(v45 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_12;
          }
          v31 = v29 + 3;
          v50 = v29 + 2;
          if (v29 + 3 < v46)
            break;
        }
      }
    }
LABEL_26:
    v32 = sub_10001A9A8(a4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 1, 1, v32);
    v24 = 0;
LABEL_27:
    sub_100005CF0((uint64_t)v13, (uint64_t)v16, v49);
    v33 = sub_10001A9A8(a4);
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v16, 1, v33);
    v51 = v34 == 1;
    if (v34 != 1)
    {
      v35 = v24;
      v36 = v13;
      v37 = a4;
      v38 = *(int *)(v33 + 48);
      v39 = v54;
      (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v22, v16, v54);
      v40 = v16[v38];
      v41 = sub_100003FB0(v22);
      v52 = v42;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v22, v39);
      if ((v52 & 1) != 0)
      {
        v43 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v41) == v40;
        a4 = v37;
        v13 = v36;
        v20 = v35;
        if (v43)
          continue;
      }
    }
    return v51;
  }
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
  {
LABEL_15:
    v29 = v31;
LABEL_12:
    v24 = (v30 - 1) & v30;
    v25 = __clz(__rbit64(v30)) + (v29 << 6);
    v50 = v29;
    goto LABEL_8;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v46)
    {
      v50 = v44;
      goto LABEL_26;
    }
    v30 = *(_QWORD *)(v45 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_12;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100326BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  _BOOL4 v57;
  uint64_t *v58;
  unint64_t v59;

  v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v55 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v50 - v8;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = __chkstk_darwin(v11);
  v16 = (uint64_t *)((char *)&v50 - v15);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v56 = 0;
  v54 = a1;
  v19 = *(_QWORD *)(a1 + 64);
  v18 = a1 + 64;
  v17 = v19;
  v20 = 1 << *(_BYTE *)(v18 - 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v17;
  v52 = v18;
  v53 = (unint64_t)(v20 + 63) >> 6;
  v51 = v53 - 1;
  v23 = (uint64_t *)&unk_1010F9880;
  v58 = (uint64_t *)((char *)&v50 - v15);
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v25 = (v22 - 1) & v22;
      v26 = v24 | (v56 << 6);
LABEL_8:
      v27 = *(_QWORD *)(v54 + 56);
      v28 = (uint64_t *)(*(_QWORD *)(v54 + 48) + 16 * v26);
      v29 = *v28;
      v30 = v28[1];
      *v13 = *v28;
      v13[1] = v30;
      v31 = v27 + *(_QWORD *)(v5 + 72) * v26;
      v32 = sub_10001A9A8(v23);
      sub_10005972C(v31, (uint64_t)v13 + *(int *)(v32 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 0, 1, v32);
      sub_10001BBBC(v29, v30);
      v16 = v58;
      goto LABEL_30;
    }
    v33 = v56 + 1;
    if (__OFADD__(v56, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v33 < v53)
    {
      v34 = *(_QWORD *)(v52 + 8 * v33);
      if (v34)
        goto LABEL_12;
      v35 = v56 + 2;
      ++v56;
      if (v33 + 1 < v53)
      {
        v34 = *(_QWORD *)(v52 + 8 * v35);
        if (v34)
          goto LABEL_15;
        v56 = v33 + 1;
        if (v33 + 2 < v53)
        {
          v34 = *(_QWORD *)(v52 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_12;
          }
          v56 = v33 + 2;
          if (v33 + 3 < v53)
          {
            v34 = *(_QWORD *)(v52 + 8 * (v33 + 3));
            if (v34)
            {
              v33 += 3;
              goto LABEL_12;
            }
            v35 = v33 + 4;
            v56 = v33 + 3;
            if (v33 + 4 < v53)
              break;
          }
        }
      }
    }
LABEL_29:
    v36 = sub_10001A9A8(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v13, 1, 1, v36);
    v25 = 0;
LABEL_30:
    sub_100005CF0((uint64_t)v13, (uint64_t)v16, (uint64_t *)&unk_1010F7830);
    v37 = sub_10001A9A8(v23);
    v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v16, 1, v37);
    v57 = v38 == 1;
    if (v38 == 1)
      return v57;
    v59 = v25;
    v39 = v23;
    v40 = v13;
    v41 = (uint64_t)v16 + *(int *)(v37 + 48);
    v42 = *v16;
    v43 = v16[1];
    sub_1000126EC(v41, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    v44 = sub_100518E4C(v42, v43);
    v45 = (uint64_t)v9;
    v47 = v46;
    sub_10001BC14(v42, v43);
    if ((v47 & 1) == 0)
    {
      sub_1000126B0(v45, type metadata accessor for OwnedBeaconGroup.PairingState);
      return 0;
    }
    v48 = v55;
    sub_10005972C(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v5 + 72) * v44, v55, type metadata accessor for OwnedBeaconGroup.PairingState);
    v49 = sub_10036D51C(v48, v45);
    sub_1000126B0(v48, type metadata accessor for OwnedBeaconGroup.PairingState);
    result = sub_1000126B0(v45, type metadata accessor for OwnedBeaconGroup.PairingState);
    v9 = (char *)v45;
    v13 = v40;
    v23 = v39;
    v16 = v58;
    v22 = v59;
    if ((v49 & 1) == 0)
      return v57;
  }
  v34 = *(_QWORD *)(v52 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v33 = v35;
LABEL_12:
    v25 = (v34 - 1) & v34;
    v26 = __clz(__rbit64(v34)) + (v33 << 6);
    v56 = v33;
    goto LABEL_8;
  }
  while (1)
  {
    v33 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v33 >= v53)
    {
      v56 = v51;
      goto LABEL_29;
    }
    v34 = *(_QWORD *)(v52 + 8 * v33);
    ++v35;
    if (v34)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100327010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  unint64_t v45;
  uint64_t (*v46)(char *, unint64_t, uint64_t, __n128);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  int64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  char *v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;

  v67 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v67 - 8);
  v5 = __chkstk_darwin(v67);
  v65 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v66 = (char *)&v52 - v8;
  __chkstk_darwin(v7);
  v62 = (char *)&v52 - v9;
  v10 = sub_10001A9A8(&qword_1010F7878);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v16 = (char *)&v52 - v15;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v60 = 0;
  v17 = *(_QWORD *)(a1 + 64);
  v56 = a2;
  v57 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v58 = (unint64_t)(v18 + 63) >> 6;
  v59 = (char *)&v52 - v15;
  v52 = v58 - 1;
  v53 = v13;
  v54 = v4;
  v55 = a1;
  if ((v19 & v17) == 0)
    goto LABEL_8;
LABEL_6:
  v21 = __clz(__rbit64(v20));
  v22 = (v20 - 1) & v20;
  v23 = v21 | (v60 << 6);
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v13, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * v23, v67);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = sub_10001A9A8(&qword_1010F7880);
  v26 = *(_QWORD *)(v24 + 8 * v23);
  *(_QWORD *)&v13[*(int *)(v25 + 48)] = v26;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 0, 1, v25);
  swift_bridgeObjectRetain(v26);
  while (1)
  {
    sub_100005CF0((uint64_t)v13, (uint64_t)v16, &qword_1010F7878);
    v31 = sub_10001A9A8(&qword_1010F7880);
    v32 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v16, 1, v31) == 1)
      return v32;
    v61 = v22;
    v33 = *(int *)(v31 + 48);
    v34 = (uint64_t)v62;
    v35 = v67;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v62, v16, v67);
    v36 = *(_QWORD *)&v16[v33];
    v37 = sub_100003FB0(v34);
    v39 = v38;
    v40 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v40(v34, v35);
    if ((v39 & 1) == 0
      || (v41 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v37), v42 = *(_QWORD *)(v41 + 16), v42 != *(_QWORD *)(v36 + 16)))
    {
LABEL_44:
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v42 && v41 != v36)
      break;
    result = swift_bridgeObjectRelease();
LABEL_40:
    v16 = v59;
    v20 = v61;
    if (v61)
      goto LABEL_6;
LABEL_8:
    v27 = v60 + 1;
    if (__OFADD__(v60, 1))
      goto LABEL_49;
    if (v27 < v58)
    {
      v28 = *(_QWORD *)(v57 + 8 * v27);
      if (v28)
        goto LABEL_11;
      v29 = v60 + 2;
      ++v60;
      if (v27 + 1 < v58)
      {
        v28 = *(_QWORD *)(v57 + 8 * v29);
        if (v28)
          goto LABEL_14;
        v60 = v27 + 1;
        if (v27 + 2 < v58)
        {
          v28 = *(_QWORD *)(v57 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_11;
          }
          v60 = v27 + 2;
          if (v27 + 3 < v58)
          {
            v28 = *(_QWORD *)(v57 + 8 * (v27 + 3));
            if (v28)
            {
              v27 += 3;
              goto LABEL_11;
            }
            v29 = v27 + 4;
            v60 = v27 + 3;
            if (v27 + 4 < v58)
            {
              v28 = *(_QWORD *)(v57 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  v27 = v29 + 1;
                  if (__OFADD__(v29, 1))
                    goto LABEL_50;
                  if (v27 >= v58)
                  {
                    v60 = v52;
                    goto LABEL_28;
                  }
                  v28 = *(_QWORD *)(v57 + 8 * v27);
                  ++v29;
                  if (v28)
                    goto LABEL_11;
                }
              }
LABEL_14:
              v27 = v29;
LABEL_11:
              v22 = (v28 - 1) & v28;
              v23 = __clz(__rbit64(v28)) + (v27 << 6);
              v60 = v27;
              goto LABEL_7;
            }
          }
        }
      }
    }
LABEL_28:
    v30 = sub_10001A9A8(&qword_1010F7880);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 1, 1, v30);
    v22 = 0;
  }
  v64 = v36;
  v43 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v44 = swift_bridgeObjectRetain(v41);
  v45 = 0;
  v63 = *(_QWORD *)(v4 + 72);
  v46 = *(uint64_t (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16);
  while (1)
  {
    v47 = v66;
    result = v46(v66, v41 + v43, v67, v44);
    if (v45 >= *(_QWORD *)(v64 + 16))
      break;
    v48 = v65;
    v49 = v67;
    ((void (*)(char *, unint64_t, uint64_t))v46)(v65, v64 + v43, v67);
    v50 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v48, v49, v50);
    v40((uint64_t)v48, v49);
    v40((uint64_t)v47, v49);
    if ((v51 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    ++v45;
    v43 += v63;
    if (v42 == v45)
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      a1 = v55;
      a2 = v56;
      v13 = v53;
      v4 = v54;
      goto LABEL_40;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_100327520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char v46;
  char v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int64_t v62;
  _BOOL4 v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v60 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v53 - v8;
  v10 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  __chkstk_darwin(v10);
  v61 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F7748);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v13);
  v18 = (char *)&v53 - v17;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v58 = v15;
  v59 = a2;
  v62 = 0;
  v57 = a1;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v19;
  v55 = v20;
  v56 = (unint64_t)(v22 + 63) >> 6;
  v54 = v56 - 1;
  while (1)
  {
    if (v24)
    {
      v25 = __clz(__rbit64(v24));
      v26 = (v24 - 1) & v24;
      v27 = v25 | (v62 << 6);
LABEL_8:
      v28 = v57;
      (*(void (**)(char *, unint64_t, uint64_t))(v65 + 16))(v15, *(_QWORD *)(v57 + 48) + *(_QWORD *)(v65 + 72) * v27, v66);
      v29 = *(_QWORD *)(v28 + 56) + *(_QWORD *)(v5 + 72) * v27;
      v30 = sub_10001A9A8(&qword_1010F7750);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v15[*(int *)(v30 + 48)], v29, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 0, 1, v30);
      goto LABEL_30;
    }
    v31 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v31 < v56)
    {
      v32 = *(_QWORD *)(v55 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v62 + 2;
      ++v62;
      if (v31 + 1 < v56)
      {
        v32 = *(_QWORD *)(v55 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v62 = v31 + 1;
        if (v31 + 2 < v56)
        {
          v32 = *(_QWORD *)(v55 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v62 = v31 + 2;
          if (v31 + 3 < v56)
          {
            v32 = *(_QWORD *)(v55 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3;
              goto LABEL_12;
            }
            v33 = v31 + 4;
            v62 = v31 + 3;
            if (v31 + 4 < v56)
              break;
          }
        }
      }
    }
LABEL_29:
    v34 = sub_10001A9A8(&qword_1010F7750);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 1, 1, v34);
    v26 = 0;
LABEL_30:
    sub_100005CF0((uint64_t)v15, (uint64_t)v18, &qword_1010F7748);
    v35 = sub_10001A9A8(&qword_1010F7750);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v18, 1, v35);
    v63 = v36 == 1;
    if (v36 == 1)
      return v63;
    v64 = v26;
    v37 = &v18[*(int *)(v35 + 48)];
    v39 = v65;
    v38 = v66;
    v40 = v5;
    v41 = (uint64_t)v61;
    v42 = v18;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v61, v18, v66);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v9, v37, v4);
    v43 = v59;
    v44 = v9;
    v45 = sub_100003FB0(v41);
    v47 = v46;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
    if ((v47 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v44, v4);
      return 0;
    }
    v48 = *(_QWORD *)(v43 + 56) + *(_QWORD *)(v40 + 72) * v45;
    v49 = v60;
    (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v60, v48, v4);
    v50 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v51 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v44, v4, v50);
    v52 = *(void (**)(char *, uint64_t))(v40 + 8);
    v52(v49, v4);
    result = ((uint64_t (*)(char *, uint64_t))v52)(v44, v4);
    v9 = v44;
    v5 = v40;
    v15 = v58;
    v18 = v42;
    v24 = v64;
    if ((v51 & 1) == 0)
      return v63;
  }
  v32 = *(_QWORD *)(v55 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v26 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v62 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v56)
    {
      v62 = v54;
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(v55 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1003279EC(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[6];
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_1003080E0(a1, &qword_1010F77E8, (uint64_t)sub_100330ADC, &qword_1010F77D0, (unint64_t *)&unk_1010F77D8);
  if (v4)
  {
    v14[2] = v2;
    v14[3] = __chkstk_darwin(v4);
    v14[4] = a2;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100330AC0, v14, v5, &type metadata for () + 1, &type metadata for () + 1);
    swift_release();
  }
  else
  {
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B71C8);
    sub_100012368(a2);
    v7 = sub_100012368(a2);
    v15 = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(32, -1);
      *(_DWORD *)v9 = 141558275;
      v16 = 1752392040;
      v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2081;
      v11 = a2[6];
      if (v11)
      {
        v12 = a2[5];
        v13 = a2[6];
      }
      else
      {
        v13 = 0xE700000000000000;
        v12 = 0x6E776F6E6B6E75;
      }
      swift_bridgeObjectRetain(v11);
      v16 = sub_100016940(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease();
      sub_1000122FC(a2);
      sub_1000122FC(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v8, "Failed to store wrapped connection for context %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {
      sub_1000122FC(a2);
      sub_1000122FC(a2);

    }
  }
}

void sub_100327C80(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char isUniquelyReferenced_nonNull_native;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47[4];
  uint64_t v48;
  uint64_t v49;

  v30 = *a3;
  v6 = *((_QWORD *)a3 + 5);
  v34 = *((_QWORD *)a3 + 6);
  v35 = v6;
  v7 = a3[56];
  LOBYTE(v6) = a3[57];
  v33 = *((_OWORD *)a3 + 4);
  v32 = *((_QWORD *)a3 + 10);
  v31 = a3[88];
  v8 = v7 & 1;
  v29 = v6 & 1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_OWORD *)(a3 + 8);
  v27 = *(_OWORD *)(a3 + 24);
  XPCSession.identifier.getter(v11);
  swift_beginAccess(a1 + 80, v47, 33, 0);
  swift_retain();
  sub_100012368(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 80));
  v48 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0x8000000000000000;
  v36 = a2;
  v37 = v30;
  v38 = v28;
  v39 = v27;
  v40 = v35;
  v41 = v34;
  v42 = v8;
  v43 = v29;
  v44 = v33;
  v45 = v32;
  v46 = v31 & 1;
  sub_10010B5C4((uint64_t)&v36, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 80) = v48;
  swift_bridgeObjectRelease();
  v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  v15(v13, v9);
  swift_endAccess(v47);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B71C8);
  v17 = swift_retain_n(a2, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(32, -1);
    v47[0] = v35;
    *(_DWORD *)v20 = 141558275;
    v48 = 1752392040;
    *(_QWORD *)&v33 = v15;
    v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v34 = v20 + 14;
    XPCSession.identifier.getter(v21);
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v9, v22);
    v25 = v24;
    ((void (*)(char *, uint64_t))v33)(v13, v9);
    v48 = sub_100016940(v23, v25, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v34, v20 + 22);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Added new location fetch subscription %{private,mask.hash}s.", (uint8_t *)v20, 0x16u);
    v26 = v35;
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
}

uint64_t sub_100328040@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100328088(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void ***v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void ***v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **aBlock;
  _QWORD v58[5];
  char v59[24];
  uint64_t v60;

  v4 = objc_msgSend(a1, "invalidationHandler");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_10106C038, 24, 7);
    *(_QWORD *)(v6 + 16) = v5;
    v7 = sub_100330B08;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v59, 0, 0);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10000B458(v11, (uint64_t)v10, (uint64_t *)&unk_1010F77F0, (unint64_t *)&unk_10111C070);
  v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    v55 = v13;
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B8010);
    v15 = (void **)v10;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      aBlock = v15;
      v51 = v6;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v18 + 4, v18 + 12);
      *v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already have a session for %@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_10001D8A8((uint64_t)v7, v51);
    }
    else
    {

      sub_10001D8A8((uint64_t)v7, v6);
    }
    return v55;
  }
  else
  {
    v22 = sub_10001A9A8((uint64_t *)&unk_1010F77F0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v10;
    v56 = XPCSession.init(connection:)();
    if (v56)
    {
      v24 = swift_allocObject(&unk_10106BFC0, 24, 7);
      swift_weakInit(v24 + 16, a2);
      v25 = (_QWORD *)swift_allocObject(&unk_10106BFE8, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v7;
      v25[5] = v6;
      v58[3] = sub_100330AFC;
      v58[4] = v25;
      aBlock = _NSConcreteStackBlock;
      v58[0] = 1107296256;
      v58[1] = sub_100016FB8;
      v58[2] = &unk_10106C000;
      v26 = _Block_copy(&aBlock);
      v27 = v23;
      sub_10001D898((uint64_t)v7, v6);
      swift_release();
      objc_msgSend(v27, "setInvalidationHandler:", v26);
      _Block_release(v26);
      v28 = *(_QWORD *)(a2 + 32);
      if ((v28 & 0xC000000000000001) != 0)
      {
        if (v28 < 0)
          v29 = *(_QWORD *)(a2 + 32);
        else
          v29 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
        v30 = __CocoaSet.count.getter(v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)(v28 + 16);
      }
      v31 = v56;
      v54 = (uint64_t)v7;
      swift_beginAccess(a2 + 32, &aBlock, 33, 0);
      swift_retain();
      sub_100A0FBB0(&v60, v56);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v40 = type metadata accessor for Logger(0);
      sub_10001A9E8(v40, (uint64_t)qword_1011B8010);
      v41 = swift_retain();
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc(22, -1);
        *(_DWORD *)v44 = 134218240;
        aBlock = (void **)v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 4, v44 + 12);
        *(_WORD *)(v44 + 12) = 2048;
        v45 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          if (v45 < 0)
            v46 = *v8;
          else
            v46 = v45 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v8);
          v47 = __CocoaSet.count.getter(v46);
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = *(_QWORD *)(v45 + 16);
        }
        aBlock = (void **)v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 14, v44 + 22);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Session count: %ld -> %ld", (uint8_t *)v44, 0x16u);
        swift_slowDealloc(v44, -1, -1);

        v31 = v56;
      }
      else
      {

        swift_release();
      }
      v48 = *v8;
      if ((*v8 & 0xC000000000000001) != 0)
      {
        if (v48 < 0)
          v49 = *v8;
        else
          v49 = v48 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v49);
      }
      else
      {
        swift_bridgeObjectRetain(*v8);
      }
      sub_10001D8A8(v54, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v52 = v6;
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v32 = type metadata accessor for Logger(0);
      sub_10001A9E8(v32, (uint64_t)qword_1011B8010);
      v33 = (void **)v23;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v36 = 138412290;
        aBlock = v33;
        v53 = (uint64_t)v7;
        v38 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v36 + 4, v36 + 12);
        *v37 = v33;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to make XPCSession from %@", v36, 0xCu);
        v39 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v37, 1, v39);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        sub_10001D8A8(v53, v52);
      }
      else
      {
        sub_10001D8A8((uint64_t)v7, v52);

      }
      return 0;
    }
  }
  return v31;
}

uint64_t sub_100328798(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void ***v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void ***v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **aBlock;
  _QWORD v58[5];
  char v59[24];
  uint64_t v60;

  v4 = objc_msgSend(a1, "invalidationHandler");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_10106CD08, 24, 7);
    *(_QWORD *)(v6 + 16) = v5;
    v7 = sub_100336E3C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v59, 0, 0);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10000B458(v11, (uint64_t)v10, &qword_1010EF800, (unint64_t *)&qword_1010FB780);
  v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    v55 = v13;
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B8010);
    v15 = (void **)v10;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      aBlock = v15;
      v51 = v6;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v18 + 4, v18 + 12);
      *v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already have a session for %@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_10001D8A8((uint64_t)v7, v51);
    }
    else
    {

      sub_10001D8A8((uint64_t)v7, v6);
    }
    return v55;
  }
  else
  {
    v22 = sub_10001A9A8(&qword_1010EF800);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v10;
    v56 = XPCSession.init(connection:)();
    if (v56)
    {
      v24 = swift_allocObject(&unk_10106CC90, 24, 7);
      swift_weakInit(v24 + 16, a2);
      v25 = (_QWORD *)swift_allocObject(&unk_10106CCB8, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v7;
      v25[5] = v6;
      v58[3] = sub_100336C58;
      v58[4] = v25;
      aBlock = _NSConcreteStackBlock;
      v58[0] = 1107296256;
      v58[1] = sub_100016FB8;
      v58[2] = &unk_10106CCD0;
      v26 = _Block_copy(&aBlock);
      v27 = v23;
      sub_10001D898((uint64_t)v7, v6);
      swift_release();
      objc_msgSend(v27, "setInvalidationHandler:", v26);
      _Block_release(v26);
      v28 = *(_QWORD *)(a2 + 32);
      if ((v28 & 0xC000000000000001) != 0)
      {
        if (v28 < 0)
          v29 = *(_QWORD *)(a2 + 32);
        else
          v29 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
        v30 = __CocoaSet.count.getter(v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)(v28 + 16);
      }
      v31 = v56;
      v54 = (uint64_t)v7;
      swift_beginAccess(a2 + 32, &aBlock, 33, 0);
      swift_retain();
      sub_100A12CEC(&v60, v56);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v40 = type metadata accessor for Logger(0);
      sub_10001A9E8(v40, (uint64_t)qword_1011B8010);
      v41 = swift_retain();
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc(22, -1);
        *(_DWORD *)v44 = 134218240;
        aBlock = (void **)v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 4, v44 + 12);
        *(_WORD *)(v44 + 12) = 2048;
        v45 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          if (v45 < 0)
            v46 = *v8;
          else
            v46 = v45 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v8);
          v47 = __CocoaSet.count.getter(v46);
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = *(_QWORD *)(v45 + 16);
        }
        aBlock = (void **)v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 14, v44 + 22);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Session count: %ld -> %ld", (uint8_t *)v44, 0x16u);
        swift_slowDealloc(v44, -1, -1);

        v31 = v56;
      }
      else
      {

        swift_release();
      }
      v48 = *v8;
      if ((*v8 & 0xC000000000000001) != 0)
      {
        if (v48 < 0)
          v49 = *v8;
        else
          v49 = v48 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v49);
      }
      else
      {
        swift_bridgeObjectRetain(*v8);
      }
      sub_10001D8A8(v54, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v52 = v6;
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v32 = type metadata accessor for Logger(0);
      sub_10001A9E8(v32, (uint64_t)qword_1011B8010);
      v33 = (void **)v23;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v36 = 138412290;
        aBlock = v33;
        v53 = (uint64_t)v7;
        v38 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v36 + 4, v36 + 12);
        *v37 = v33;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to make XPCSession from %@", v36, 0xCu);
        v39 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v37, 1, v39);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        sub_10001D8A8(v53, v52);
      }
      else
      {
        sub_10001D8A8((uint64_t)v7, v52);

      }
      return 0;
    }
  }
  return v31;
}

uint64_t sub_100328EA8(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void ***v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void ***v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **aBlock;
  _QWORD v58[5];
  char v59[24];
  uint64_t v60;

  v4 = objc_msgSend(a1, "invalidationHandler");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_10106C380, 24, 7);
    *(_QWORD *)(v6 + 16) = v5;
    v7 = sub_100336E3C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v59, 0, 0);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10000B458(v11, (uint64_t)v10, (uint64_t *)&unk_1010F78E0, (unint64_t *)&qword_101110130);
  v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    v55 = v13;
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B8010);
    v15 = (void **)v10;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      aBlock = v15;
      v51 = v6;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v18 + 4, v18 + 12);
      *v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already have a session for %@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_10001D8A8((uint64_t)v7, v51);
    }
    else
    {

      sub_10001D8A8((uint64_t)v7, v6);
    }
    return v55;
  }
  else
  {
    v22 = sub_10001A9A8((uint64_t *)&unk_1010F78E0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v10;
    v56 = XPCSession.init(connection:)();
    if (v56)
    {
      v24 = swift_allocObject(&unk_10106C308, 24, 7);
      swift_weakInit(v24 + 16, a2);
      v25 = (_QWORD *)swift_allocObject(&unk_10106C330, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v7;
      v25[5] = v6;
      v58[3] = sub_100330D58;
      v58[4] = v25;
      aBlock = _NSConcreteStackBlock;
      v58[0] = 1107296256;
      v58[1] = sub_100016FB8;
      v58[2] = &unk_10106C348;
      v26 = _Block_copy(&aBlock);
      v27 = v23;
      sub_10001D898((uint64_t)v7, v6);
      swift_release();
      objc_msgSend(v27, "setInvalidationHandler:", v26);
      _Block_release(v26);
      v28 = *(_QWORD *)(a2 + 32);
      if ((v28 & 0xC000000000000001) != 0)
      {
        if (v28 < 0)
          v29 = *(_QWORD *)(a2 + 32);
        else
          v29 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
        v30 = __CocoaSet.count.getter(v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)(v28 + 16);
      }
      v31 = v56;
      v54 = (uint64_t)v7;
      swift_beginAccess(a2 + 32, &aBlock, 33, 0);
      swift_retain();
      sub_100A12FEC(&v60, v56);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v40 = type metadata accessor for Logger(0);
      sub_10001A9E8(v40, (uint64_t)qword_1011B8010);
      v41 = swift_retain();
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc(22, -1);
        *(_DWORD *)v44 = 134218240;
        aBlock = (void **)v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 4, v44 + 12);
        *(_WORD *)(v44 + 12) = 2048;
        v45 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          if (v45 < 0)
            v46 = *v8;
          else
            v46 = v45 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v8);
          v47 = __CocoaSet.count.getter(v46);
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = *(_QWORD *)(v45 + 16);
        }
        aBlock = (void **)v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 14, v44 + 22);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Session count: %ld -> %ld", (uint8_t *)v44, 0x16u);
        swift_slowDealloc(v44, -1, -1);

        v31 = v56;
      }
      else
      {

        swift_release();
      }
      v48 = *v8;
      if ((*v8 & 0xC000000000000001) != 0)
      {
        if (v48 < 0)
          v49 = *v8;
        else
          v49 = v48 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v49);
      }
      else
      {
        swift_bridgeObjectRetain(*v8);
      }
      sub_10001D8A8(v54, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v52 = v6;
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v32 = type metadata accessor for Logger(0);
      sub_10001A9E8(v32, (uint64_t)qword_1011B8010);
      v33 = (void **)v23;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v36 = 138412290;
        aBlock = v33;
        v53 = (uint64_t)v7;
        v38 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v36 + 4, v36 + 12);
        *v37 = v33;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to make XPCSession from %@", v36, 0xCu);
        v39 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v37, 1, v39);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        sub_10001D8A8(v53, v52);
      }
      else
      {
        sub_10001D8A8((uint64_t)v7, v52);

      }
      return 0;
    }
  }
  return v31;
}

uint64_t sub_1003295B8(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void ***v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void ***v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **aBlock;
  _QWORD v58[5];
  char v59[24];
  uint64_t v60;

  v4 = objc_msgSend(a1, "invalidationHandler");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_10106C150, 24, 7);
    *(_QWORD *)(v6 + 16) = v5;
    v7 = sub_100336E3C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v59, 0, 0);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10000B458(v11, (uint64_t)v10, (uint64_t *)&unk_1010F49A0, &qword_101117070);
  v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    v55 = v13;
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B8010);
    v15 = (void **)v10;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      aBlock = v15;
      v51 = v6;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v18 + 4, v18 + 12);
      *v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already have a session for %@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_10001D8A8((uint64_t)v7, v51);
    }
    else
    {

      sub_10001D8A8((uint64_t)v7, v6);
    }
    return v55;
  }
  else
  {
    v22 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v10;
    v56 = XPCSession.init(connection:)();
    if (v56)
    {
      v24 = swift_allocObject(&unk_10106C0D8, 24, 7);
      swift_weakInit(v24 + 16, a2);
      v25 = (_QWORD *)swift_allocObject(&unk_10106C100, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v7;
      v25[5] = v6;
      v58[3] = sub_100330C4C;
      v58[4] = v25;
      aBlock = _NSConcreteStackBlock;
      v58[0] = 1107296256;
      v58[1] = sub_100016FB8;
      v58[2] = &unk_10106C118;
      v26 = _Block_copy(&aBlock);
      v27 = v23;
      sub_10001D898((uint64_t)v7, v6);
      swift_release();
      objc_msgSend(v27, "setInvalidationHandler:", v26);
      _Block_release(v26);
      v28 = *(_QWORD *)(a2 + 32);
      if ((v28 & 0xC000000000000001) != 0)
      {
        if (v28 < 0)
          v29 = *(_QWORD *)(a2 + 32);
        else
          v29 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
        v30 = __CocoaSet.count.getter(v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)(v28 + 16);
      }
      v31 = v56;
      v54 = (uint64_t)v7;
      swift_beginAccess(a2 + 32, &aBlock, 33, 0);
      swift_retain();
      sub_100A132EC(&v60, v56);
      swift_endAccess(&aBlock);
      swift_release();
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v40 = type metadata accessor for Logger(0);
      sub_10001A9E8(v40, (uint64_t)qword_1011B8010);
      v41 = swift_retain();
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc(22, -1);
        *(_DWORD *)v44 = 134218240;
        aBlock = (void **)v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 4, v44 + 12);
        *(_WORD *)(v44 + 12) = 2048;
        v45 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          if (v45 < 0)
            v46 = *v8;
          else
            v46 = v45 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v8);
          v47 = __CocoaSet.count.getter(v46);
          swift_bridgeObjectRelease();
        }
        else
        {
          v47 = *(_QWORD *)(v45 + 16);
        }
        aBlock = (void **)v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v44 + 14, v44 + 22);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Session count: %ld -> %ld", (uint8_t *)v44, 0x16u);
        swift_slowDealloc(v44, -1, -1);

        v31 = v56;
      }
      else
      {

        swift_release();
      }
      v48 = *v8;
      if ((*v8 & 0xC000000000000001) != 0)
      {
        if (v48 < 0)
          v49 = *v8;
        else
          v49 = v48 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v49);
      }
      else
      {
        swift_bridgeObjectRetain(*v8);
      }
      sub_10001D8A8(v54, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v52 = v6;
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v32 = type metadata accessor for Logger(0);
      sub_10001A9E8(v32, (uint64_t)qword_1011B8010);
      v33 = (void **)v23;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v36 = 138412290;
        aBlock = v33;
        v53 = (uint64_t)v7;
        v38 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v58, v36 + 4, v36 + 12);
        *v37 = v33;

        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to make XPCSession from %@", v36, 0xCu);
        v39 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v37, 1, v39);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);

        sub_10001D8A8(v53, v52);
      }
      else
      {
        sub_10001D8A8((uint64_t)v7, v52);

      }
      return 0;
    }
  }
  return v31;
}

uint64_t sub_100329CC8(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v16;
  char v17[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    goto LABEL_3;
  v7 = result;
  v8 = *(NSObject **)(result + 16);
  v9 = swift_allocObject(&unk_10106CE48, 32, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_10106CE70, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100336D28;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10005CBA4;
  v16 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106CE88;
  v11 = _Block_copy(aBlock);
  v12 = v16;
  swift_retain();
  v13 = a2;
  swift_retain();
  swift_release(v12);
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 110, 87, 27, 1);
  swift_release(v7);
  swift_release(v9);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a3)
      return a3();
  }
  return result;
}

uint64_t sub_100329E44(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];
  _BYTE v15[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    goto LABEL_3;
  v7 = result;
  v8 = *(NSObject **)(result + 16);
  v9 = swift_allocObject(&unk_10106C060, 32, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_10106C088, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100330B18;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106C0A0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  v12 = a2;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 110, 87, 27, 1);
  swift_release();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a3)
      return a3();
  }
  return result;
}

uint64_t sub_100329FC0(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v16;
  char v17[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    goto LABEL_3;
  v7 = result;
  v8 = *(NSObject **)(result + 16);
  v9 = swift_allocObject(&unk_10106C290, 32, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_10106C2B8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100330CF8;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10005CBA4;
  v16 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106C2D0;
  v11 = _Block_copy(aBlock);
  v12 = v16;
  swift_retain();
  v13 = a2;
  swift_retain();
  swift_release(v12);
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 110, 87, 27, 1);
  swift_release(v7);
  swift_release(v9);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a3)
      return a3();
  }
  return result;
}

uint64_t sub_10032A13C(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v16;
  char v17[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    goto LABEL_3;
  v7 = result;
  v8 = *(NSObject **)(result + 16);
  v9 = swift_allocObject(&unk_10106C510, 32, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_10106C538, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100335B34;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10005CBA4;
  v16 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106C550;
  v11 = _Block_copy(aBlock);
  v12 = v16;
  swift_retain();
  v13 = a2;
  swift_retain();
  swift_release(v12);
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 110, 87, 27, 1);
  swift_release(v7);
  swift_release(v9);
  result = swift_release(v10);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a3)
      return a3();
  }
  return result;
}

uint64_t sub_10032A2B8(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];
  _BYTE v15[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    goto LABEL_3;
  v7 = result;
  v8 = *(NSObject **)(result + 16);
  v9 = swift_allocObject(&unk_10106CD30, 32, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_10106CD58, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100336C68;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106CD70;
  v11 = _Block_copy(aBlock);
  swift_retain();
  v12 = a2;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 110, 87, 27, 1);
  swift_release();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a3)
      return a3();
  }
  return result;
}

uint64_t sub_10032A434(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];
  _BYTE v15[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    goto LABEL_3;
  v7 = result;
  v8 = *(NSObject **)(result + 16);
  v9 = swift_allocObject(&unk_10106C3A8, 32, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_10106C3D0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100330D68;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106C3E8;
  v11 = _Block_copy(aBlock);
  swift_retain();
  v12 = a2;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 110, 87, 27, 1);
  swift_release();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a3)
      return a3();
  }
  return result;
}

uint64_t sub_10032A5B0(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];
  _BYTE v15[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (!result)
    goto LABEL_3;
  v7 = result;
  v8 = *(NSObject **)(result + 16);
  v9 = swift_allocObject(&unk_10106C178, 32, 7);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_10106C1A0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100330C80;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106C1B8;
  v11 = _Block_copy(aBlock);
  swift_retain();
  v12 = a2;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 110, 87, 27, 1);
  swift_release();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    if (a3)
      return a3();
  }
  return result;
}

void sub_10032A72C(uint64_t *a1, void *a2)
{
  sub_10032A79C(a1, a2, (uint64_t *)&unk_1010F7B10, (unint64_t *)&unk_1010EE140, sub_100C810AC);
}

void sub_10032A748(uint64_t *a1, void *a2)
{
  sub_10032A79C(a1, a2, &qword_1010F1580, &qword_1010F1588, sub_100C83A70);
}

void sub_10032A764(uint64_t *a1, void *a2)
{
  sub_10032A79C(a1, a2, &qword_1010EF800, (unint64_t *)&qword_1010FB780, sub_100C83C6C);
}

void sub_10032A780(uint64_t *a1, void *a2)
{
  sub_10032A79C(a1, a2, (uint64_t *)&unk_1010F78E0, (unint64_t *)&qword_101110130, sub_100C83E68);
}

void sub_10032A79C(uint64_t *a1, void *a2, uint64_t *a3, unint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  _BYTE v36[24];
  char v37[24];

  v10 = a1 + 4;
  swift_beginAccess(a1 + 4, v37, 0, 0);
  v11 = a1[4];
  v12 = a2;
  swift_bridgeObjectRetain(v11);
  sub_10000B458(v13, (uint64_t)v12, a3, a4);
  v15 = v14;
  swift_bridgeObjectRelease();

  if (v15)
  {
    v16 = *v10;
    if ((*v10 & 0xC000000000000001) != 0)
    {
      if (v16 < 0)
        v17 = *v10;
      else
        v17 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v10);
      v18 = __CocoaSet.count.getter(v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = *(_QWORD *)(v16 + 16);
    }
    swift_beginAccess(v10, &v35, 33, 0);
    v19 = a5(v15);
    swift_endAccess(&v35);
    swift_release(v19);
    (*(void (**)(uint64_t))(*a1 + 200))(v15);
    v20 = a1[4];
    if ((v20 & 0xC000000000000001) != 0)
    {
      if (v20 < 0)
        v21 = a1[4];
      else
        v21 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1[4]);
      v22 = __CocoaSet.count.getter(v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 16);
    }
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B8010);
    v24 = swift_retain();
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      *(_DWORD *)v27 = 134218240;
      v35 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2048;
      v28 = *v10;
      if ((v28 & 0xC000000000000001) != 0)
      {
        if (v28 < 0)
          v29 = v28;
        else
          v29 = v28 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v28);
        v30 = __CocoaSet.count.getter(v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = *(_QWORD *)(v28 + 16);
      }
      v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v27 + 14, v27 + 22);
      swift_release(a1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Session count: %ld -> %ld", (uint8_t *)v27, 0x16u);
      swift_slowDealloc(v27, -1, -1);

      if (v22)
        goto LABEL_29;
    }
    else
    {

      v31 = swift_release(a1);
      if (v22)
      {
LABEL_29:
        swift_release(v15);
        return;
      }
    }
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Final session removed", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    (*(void (**)(void))(*a1 + 192))();
    sub_1003084E0();
    goto LABEL_29;
  }
}

uint64_t sub_10032AAE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010F76E4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  v4[15] = a1;
  v4[16] = v1;
  return swift_task_switch(sub_1000087E0, 0, 0);
}

Swift::Int sub_10032AB44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for BeaconEstimatedLocation(0);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_10032B540(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v112 = v16;
      if (v18 >= 2)
      {
        v113 = *v133;
        do
        {
          v114 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v113)
            goto LABEL_146;
          v115 = *(_QWORD *)&v112[16 * v114 + 32];
          v116 = *(_QWORD *)&v112[16 * v18 + 24];
          v117 = v128;
          sub_10032B77C(v113 + *(_QWORD *)(v127 + 72) * v115, v113 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v112[16 * v18 + 16], v113 + *(_QWORD *)(v127 + 72) * v116, v126);
          v128 = v117;
          if (v117)
            break;
          if (v116 < v115)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
            v112 = sub_10088F088((uint64_t)v112);
          if (v114 >= *((_QWORD *)v112 + 2))
            goto LABEL_136;
          v118 = &v112[16 * v114 + 32];
          *(_QWORD *)v118 = v115;
          *((_QWORD *)v118 + 1) = v116;
          v119 = *((_QWORD *)v112 + 2);
          if (v18 > v119)
            goto LABEL_137;
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((_QWORD *)v112 + 2) = v119 - 1;
          v18 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v121[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_10005972C(*v133 + v22 * v20, v131, type metadata accessor for BeaconEstimatedLocation);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_10005972C(v24, v132, type metadata accessor for BeaconEstimatedLocation);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 40), v25 + *(int *)(v134 + 40));
    sub_1000126B0(v25, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0(v23, type metadata accessor for BeaconEstimatedLocation);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_10005972C(v28 + v30, v131, type metadata accessor for BeaconEstimatedLocation);
      v33 = v132;
      sub_10005972C(v28 + v27, v132, type metadata accessor for BeaconEstimatedLocation);
      v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 40), v33 + *(int *)(v134 + 40));
      sub_1000126B0(v33, type metadata accessor for BeaconEstimatedLocation);
      sub_1000126B0(v32, type metadata accessor for BeaconEstimatedLocation);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_10088E710(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_10088E710((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_10032B77C(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1000126EC(v129 + v56, v124, type metadata accessor for BeaconEstimatedLocation);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1000126EC(v124, v59, type metadata accessor for BeaconEstimatedLocation);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_10005972C(v44, v131, type metadata accessor for BeaconEstimatedLocation);
          v47 = v132;
          sub_10005972C(v136 + v40 + v42, v132, type metadata accessor for BeaconEstimatedLocation);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 40), v47 + *(int *)(v134 + 40));
          sub_1000126B0(v47, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v45, type metadata accessor for BeaconEstimatedLocation);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1000126EC(v49, v135, type metadata accessor for BeaconEstimatedLocation);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_1000126EC(v135, v50, type metadata accessor for BeaconEstimatedLocation);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10032B540(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = type metadata accessor for BeaconEstimatedLocation(0);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10005972C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for BeaconEstimatedLocation);
      v19 = v27;
      sub_10005972C(v33 + v16 + v18, v27, type metadata accessor for BeaconEstimatedLocation);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 40)], v19 + *(int *)(v30 + 40));
      sub_1000126B0(v19, type metadata accessor for BeaconEstimatedLocation);
      result = sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconEstimatedLocation);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_1000126EC(v22, v31, type metadata accessor for BeaconEstimatedLocation);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v30);
      result = sub_1000126EC(v31, v23, type metadata accessor for BeaconEstimatedLocation);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10032B77C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for BeaconEstimatedLocation(0);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10005972C(v25 + v27, (uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_10005972C(a2 + v27, v44, type metadata accessor for BeaconEstimatedLocation);
          v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 40), v32 + *(int *)(v45 + 40));
          v34 = v32;
          v11 = (char *)v31;
          sub_1000126B0(v34, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v31, type metadata accessor for BeaconEstimatedLocation);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_10005972C(a2, (uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
        sub_10005972C(a4, v20, type metadata accessor for BeaconEstimatedLocation);
        v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 40)], v20 + *(int *)(v45 + 40));
        sub_1000126B0(v20, type metadata accessor for BeaconEstimatedLocation);
        sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconEstimatedLocation);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_10088E8D4(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10032BC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[5];
  _QWORD v21[5];

  v10 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[3] = a4;
  v21[4] = a5;
  v13 = sub_100018F08(v21);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v13, a2, a4);
  v14 = *(_QWORD *)(a3 + 280);
  sub_100030784((uint64_t)v21, (uint64_t)v20);
  v15 = qword_1010E9CF0;
  swift_retain();
  if (v15 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v16 = qword_1011B7160;
  swift_retain();
  v17 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
  sub_1003F1570(v14, v20, v16, v17, v12);
  v18 = swift_allocObject(&unk_10106BF98, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_1003F193C(a1, (uint64_t)sub_100067F00, v18);
  swift_release();
  sub_1000126B0((uint64_t)v12, type metadata accessor for LocationFetcher);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
}

void sub_10032BD98(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  id v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  ValueMetadata *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  NSObject *v53;
  _QWORD *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  char *v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t (**v80)(uint64_t);
  void *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  id v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD v135[3];
  char v136[8];
  __int128 aBlock;
  uint64_t (*v138)(uint64_t);
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  ValueMetadata *v144;
  unint64_t v145;

  v124 = a4;
  v112 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v14 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for DispatchWorkItemFlags(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v121 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for DispatchQoS(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocationFetcher(0);
  v117 = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(v117 + 64);
  v19 = __chkstk_darwin(v17);
  v116 = (uint64_t)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v128 = (char *)&v104 - v20;
  v110 = type metadata accessor for DispatchTime(0);
  v109 = *(_QWORD *)(v110 - 8);
  v21 = __chkstk_darwin(v110);
  v108 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v107 = (char *)&v104 - v23;
  v24 = type metadata accessor for DispatchPredicate(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v144 = &_s13DefaultPolicyVN;
  v145 = sub_100067E14();
  v28 = swift_allocObject(&unk_10106BD18, 97, 7);
  v143 = v28;
  v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v28 + 64) = v29;
  *(_OWORD *)(v28 + 80) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(v28 + 96) = *(_BYTE *)(a2 + 80);
  v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v28 + 32) = v30;
  v31 = *(void **)(a5 + 96);
  *v27 = v31;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for DispatchPredicate.onQueue(_:), v24);
  sub_100067E8C((_QWORD *)a2);
  v32 = v31;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v27);
  (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v27, v24);
  if ((a2 & 1) != 0)
  {
    v33 = sub_100314CC4(a1, a6);
    v35 = v33;
    v132 = v33[2];
    if (!v132)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v143);
      return;
    }
    v36 = a5;
    v129 = 0;
    v131 = v33 + 4;
    v115 = v18 + 7;
    v114 = a3 & (a7 > 0.0);
    v37 = 0;
    v113 = &type metadata for () + 1;
    *(_QWORD *)&v34 = 136315138;
    v106 = v34;
    v105 = (char *)&type metadata for Any + 8;
    v130 = a5;
    v127 = v33;
    while (v37 < v35[2])
    {
      v42 = &v131[2 * v37];
      v43 = *v42;
      v44 = *((unsigned __int8 *)v42 + 8);
      if (v44)
      {
        if (v44 == 1)
        {
          v38 = v144;
          v39 = v145;
          v40 = sub_10001AA44(&v143, (uint64_t)v144);
          swift_bridgeObjectRetain(v43);
          sub_10032BC2C(v41, (uint64_t)v40, v36, (uint64_t)v38, v39);
          swift_bridgeObjectRelease();
        }
        else
        {
          v133 = v37;
          v134 = v43;
          v45 = *(_QWORD *)(v43 + 16);
          if (v45)
          {
            v142 = (uint64_t)_swiftEmptyArrayStorage;
            swift_bridgeObjectRetain(v43);
            sub_10009A628(0, v45, 0);
            v46 = (_QWORD *)v142;
            v47 = v43 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
            v48 = *(_QWORD *)(v111 + 72);
            v49 = (void *)v112;
            do
            {
              sub_10005972C(v47, (uint64_t)v14, type metadata accessor for LocalFindableAccessoryRecord);
              v142 = (uint64_t)v46;
              v51 = v46[2];
              v50 = v46[3];
              if (v51 >= v50 >> 1)
              {
                sub_10009A628(v50 > 1, v51 + 1, 1);
                v49 = (void *)v112;
                v46 = (_QWORD *)v142;
              }
              v139 = v49;
              v140 = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
              v52 = sub_100018F08(&aBlock);
              sub_10005972C((uint64_t)v14, (uint64_t)v52, type metadata accessor for LocalFindableAccessoryRecord);
              v46[2] = v51 + 1;
              sub_10000F9FC(&aBlock, (uint64_t)&v46[5 * v51 + 4]);
              sub_1000126B0((uint64_t)v14, type metadata accessor for LocalFindableAccessoryRecord);
              v47 += v48;
              --v45;
            }
            while (v45);
            v36 = v130;
          }
          else
          {
            swift_bridgeObjectRetain(v43);
            v46 = _swiftEmptyArrayStorage;
          }
          v67 = *(_QWORD *)(v36 + 280);
          sub_100030784((uint64_t)&v143, (uint64_t)&aBlock);
          v68 = qword_1010E9CF0;
          swift_retain();
          if (v68 != -1)
            swift_once(&qword_1010E9CF0, sub_10058CADC);
          v69 = qword_1011B7160;
          swift_retain();
          v70 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
          v71 = v128;
          sub_1003F1570(v67, &aBlock, v69, v70, v128);
          v72 = swift_allocObject(&unk_10106BD90, 24, 7);
          swift_weakInit(v72 + 16, v36);
          v73 = swift_allocObject(&unk_10106BDB8, 32, 7);
          *(_QWORD *)(v73 + 16) = v46;
          *(_QWORD *)(v73 + 24) = v72;
          v125 = v72;
          v126 = *((_QWORD *)v71 + 2);
          v74 = v116;
          sub_10005972C((uint64_t)v71, v116, type metadata accessor for LocationFetcher);
          v75 = *(unsigned __int8 *)(v117 + 80);
          v76 = (v75 + 16) & ~v75;
          v77 = (v115 + v76) & 0xFFFFFFFFFFFFFFF8;
          v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8;
          v79 = swift_allocObject(&unk_10106BDE0, v78 + 16, v75 | 7);
          sub_1000126EC(v74, v79 + v76, type metadata accessor for LocationFetcher);
          *(_QWORD *)(v79 + v77) = v46;
          v80 = (uint64_t (**)(uint64_t))(v79 + v78);
          *v80 = sub_100330490;
          v80[1] = (uint64_t (*)(uint64_t))v73;
          v140 = (uint64_t)sub_10033059C;
          v141 = v79;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          v138 = sub_100016FB8;
          v139 = &unk_10106BDF8;
          v81 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain_n(v46, 2);
          swift_retain();
          v82 = swift_retain();
          v83 = v118;
          static DispatchQoS.unspecified.getter(v82);
          v142 = (uint64_t)_swiftEmptyArrayStorage;
          v84 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v85 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v86 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          v87 = v121;
          v88 = v123;
          v89 = v84;
          v36 = v130;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v142, v85, v86, v123, v89);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v83, v87, v81);
          _Block_release(v81);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v87, v88);
          (*(void (**)(char *, uint64_t))(v119 + 8))(v83, v120);
          swift_release();
          swift_release();
          sub_1000126B0((uint64_t)v128, type metadata accessor for LocationFetcher);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          v35 = v127;
          v37 = v133;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v43);
        v133 = v37;
        if ((v114 & 1) != 0)
        {
          v53 = dispatch_group_create();
          dispatch_group_enter(v53);
        }
        else
        {
          v53 = 0;
        }
        sub_100030784((uint64_t)&v143, (uint64_t)&aBlock);
        v54 = (_QWORD *)swift_allocObject(&unk_10106BE30, 80, 7);
        v54[2] = v43;
        v54[3] = v53;
        v54[4] = v36;
        sub_10000F9FC(&aBlock, (uint64_t)(v54 + 5));
        v55 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v55);
        *(&v104 - 6) = v36;
        *(&v104 - 5) = (uint64_t)&v143;
        *(&v104 - 4) = v124;
        *(&v104 - 3) = v43;
        *(&v104 - 2) = (uint64_t)sub_100330628;
        *(&v104 - 1) = (uint64_t)v54;
        v56 = v53;
        v134 = v43;
        swift_bridgeObjectRetain(v43);
        swift_retain();
        v57 = v129;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconManagerService.fetchLocations", 65, 2, sub_100330638, &v104 - 8);
        v129 = v57;
        swift_release();
        if (v53)
        {
          v58 = v56;
          v59 = v108;
          static DispatchTime.now()(v58);
          v60 = v107;
          + infix(_:_:)(v59, a7);
          v61 = *(void (**)(char *, uint64_t))(v109 + 8);
          v62 = v59;
          v63 = v110;
          v61(v62, v110);
          v64 = OS_dispatch_group.wait(timeout:)(v60);

          v65 = v64 & 1;
          v66 = v60;
          v35 = v127;
          v61(v66, v63);
          v37 = v133;
        }
        else
        {
          v65 = 0;
          v37 = v133;
          v35 = v127;
        }
        if ((static DispatchTimeoutResult.== infix(_:_:)(v65, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease();

        }
        else
        {
          type metadata accessor for SPOwnerSessionError(0);
          v91 = v90;
          v142 = 4;
          v92 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
          v93 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
          v94 = _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v142, v92, v91, v93);
          v95 = (void *)aBlock;
          swift_willThrow(v94);

          if (qword_1010E9B58 != -1)
            swift_once(&qword_1010E9B58, sub_1003087EC);
          v96 = type metadata accessor for Logger(0);
          sub_10001A9E8(v96, (uint64_t)qword_1011B6D28);
          v97 = v95;
          v98 = Logger.logObject.getter(v97);
          v99 = static os_log_type_t.error.getter(v98);
          if (os_log_type_enabled(v98, v99))
          {
            v100 = swift_slowAlloc(12, -1);
            v101 = swift_slowAlloc(32, -1);
            *(_QWORD *)&aBlock = v101;
            *(_DWORD *)v100 = v106;
            swift_getErrorValue(v97, v136, v135);
            v102 = Error.localizedDescription.getter(v135[1], v135[2]);
            *(_QWORD *)(v100 + 4) = sub_100016940(v102, v103, (uint64_t *)&aBlock);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "Failed to fetch owned beacons locations %s", (uint8_t *)v100, 0xCu);
            swift_arrayDestroy(v101, 1, v105);
            swift_slowDealloc(v101, -1, -1);
            swift_slowDealloc(v100, -1, -1);

            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();

          }
          v129 = 0;
        }
        v36 = v130;
      }
      if (++v37 == v132)
        goto LABEL_34;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10032C9AC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  void (*v62)(uint64_t, char *);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  void *v96;
  char *v97;
  uint64_t (*v98)(uint64_t);
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (**v105)(uint64_t, uint64_t);
  void (*v106)(char *, char *);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD v110[2];

  v106 = a1;
  v101 = type metadata accessor for UUID(0);
  v105 = *(void (***)(uint64_t, uint64_t))(v101 - 8);
  v6 = __chkstk_darwin(v101);
  v100 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v97 = (char *)&v88 - v8;
  v9 = type metadata accessor for BeaconObservation(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v94 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (void (**)(uint64_t, uint64_t))((char *)&v88 - v13);
  v15 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v15);
  v103 = (uint64_t)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v17);
  v99 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Date(0);
  v98 = *(uint64_t (**)(uint64_t))(v102 - 8);
  v19 = __chkstk_darwin(v102);
  v104 = (uint64_t)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (unint64_t)&v88 - v21;
  v23 = *(_QWORD *)(a2 + 16);
  v110[0] = v23;
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v3 = (char *)&v88 - v21;
    v25 = (unsigned __int8 *)(v23 + 32);
    sub_100004F74(v110);
    sub_100067E8C((_QWORD *)a2);
    sub_100004F74(v110);
    while (1)
    {
      v27 = *v25++;
      v26 = v27;
      if (v27 == 1)
      {
        v28 = 0xE900000000000079;
        v29 = 0x7261646E6F636553;
      }
      else
      {
        if (v26 != 2)
        {
          swift_bridgeObjectRelease();
LABEL_36:
          sub_1001AE6D8(v110);
          sub_1001AE6D8(v110);
          v51 = (_QWORD *)a2;
LABEL_56:
          sub_100330970(v51);
          return 0;
        }
        v28 = 0xEF736E6F69746163;
        v29 = 0x6F4C657275636553;
      }
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, 0x7972616D697250, 0xE700000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0)
        goto LABEL_36;
      if (!--v24)
      {
        sub_1001AE6D8(v110);
        sub_1001AE6D8(v110);
        v22 = (unint64_t)v3;
        goto LABEL_11;
      }
    }
  }
  sub_100067E8C((_QWORD *)a2);
LABEL_11:
  v95 = (_QWORD *)a2;
  v31 = *(_BYTE *)(a2 + 8);
  v96 = objc_autoreleasePoolPush();
  v32 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, a3, v32);
  v33 = v109;
  if (v109[2] && (v34 = sub_100003FB0((uint64_t)v106), (v35 & 1) != 0))
  {
    v92 = 0;
    v36 = (uint64_t)_swiftEmptyArrayStorage;
    v37 = *(_QWORD *)(v33[7] + 8 * v34);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease();
    v38 = sub_100508D98(v37);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v38);
    v40 = v39;
    swift_release();
    v109 = _swiftEmptyArrayStorage;
    v41 = *(char **)(v40 + 16);
    if (v41)
    {
      v93 = (char *)v22;
      v22 = 0;
      v42 = 405;
      if ((v31 & 1) == 0)
        v42 = 403;
      v91 = v42;
      v43 = type metadata accessor for BeaconObservation;
      while (v22 < *(_QWORD *)(v40 + 16))
      {
        v3 = (char *)((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        v44 = *(_QWORD *)(v10 + 72);
        sub_10005972C((uint64_t)&v3[v40 + v44 * v22], (uint64_t)v14, type metadata accessor for BeaconObservation);
        v45 = *((unsigned __int8 *)v14 + *(int *)(v9 + 24));
        v46 = v45 - 4 >= 0x28 && v45 >= 2;
        if (v46 && (v45 != 2 ? (v47 = 405) : (v47 = 403), v47 == v91))
        {
          sub_1000126EC((uint64_t)v14, v94, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
            sub_10009AAC8(0, *(_QWORD *)(v36 + 16) + 1, 1);
          v36 = (uint64_t)v109;
          v49 = v109[2];
          v48 = v109[3];
          v50 = v49 + 1;
          if (v49 >= v48 >> 1)
          {
            v90 = v49 + 1;
            v89 = v49;
            sub_10009AAC8(v48 > 1, v49 + 1, 1);
            v50 = v90;
            v49 = v89;
            v36 = (uint64_t)v109;
          }
          *(_QWORD *)(v36 + 16) = v50;
          sub_1000126EC(v94, (uint64_t)&v3[v36 + v49 * v44], type metadata accessor for BeaconObservation);
        }
        else
        {
          sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconObservation);
        }
        if (v41 == (char *)++v22)
        {
          v36 = (uint64_t)v109;
          v22 = (unint64_t)v93;
          goto LABEL_37;
        }
      }
      __break(1u);
      goto LABEL_59;
    }
LABEL_37:
    swift_release();
    v14 = v105;
    v43 = v98;
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = (uint64_t)_swiftEmptyArrayStorage;
    v14 = v105;
    v43 = v98;
  }
  objc_autoreleasePoolPop(v96);
  v52 = v103;
  sub_100A797E8(v36, v103);
  v53 = v52;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v52, 1, v9) == 1)
  {
    sub_100004048(v52, &qword_1010EF660);
    v54 = (uint64_t)v99;
    v3 = (char *)v102;
    v55 = (*((uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v43 + 7))(v99, 1, 1, v102);
    v9 = (uint64_t)v100;
    v10 = v101;
LABEL_41:
    static Date.distantPast.getter(v55);
    sub_100004048(v54, (uint64_t *)&unk_1010EA690);
    goto LABEL_43;
  }
  v56 = v52 + *(int *)(v9 + 20);
  v54 = (uint64_t)v99;
  v3 = (char *)v102;
  (*((void (**)(char *, uint64_t, uint64_t))v43 + 2))(v99, v56, v102);
  sub_1000126B0(v53, type metadata accessor for BeaconObservation);
  (*((void (**)(uint64_t, _QWORD, uint64_t, char *))v43 + 7))(v54, 0, 1, v3);
  v55 = (*((uint64_t (**)(uint64_t, uint64_t, char *))v43 + 6))(v54, 1, v3);
  v9 = (uint64_t)v100;
  v10 = v101;
  if ((_DWORD)v55 == 1)
    goto LABEL_41;
  (*((void (**)(unint64_t, uint64_t, char *))v43 + 4))(v22, v54, v3);
LABEL_43:
  if (qword_1010E9D08 != -1)
LABEL_59:
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B0A0((uint64_t)v109);
  v58 = v57;
  swift_bridgeObjectRelease();
  v59 = v58 * 3.0;
  v60 = v104;
  static Date.trustedNow.getter(v104);
  v61 = Date.timeIntervalSince(_:)(v60);
  v62 = (void (*)(uint64_t, char *))*((_QWORD *)v43 + 1);
  v62(v60, v3);
  if (v59 >= fabs(v61))
  {
    if (qword_1010E9B58 != -1)
      swift_once(&qword_1010E9B58, sub_1003087EC);
    v76 = type metadata accessor for Logger(0);
    sub_10001A9E8(v76, (uint64_t)qword_1011B6D28);
    v77 = ((uint64_t (*)(uint64_t, void (*)(char *, char *), uint64_t))v14[2])(v9, v106, v10);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.default.getter(v78);
    if (os_log_type_enabled(v78, v79))
    {
      v80 = swift_slowAlloc(22, -1);
      v106 = (void (*)(char *, char *))v62;
      v81 = v80;
      v82 = (_QWORD *)swift_slowAlloc(32, -1);
      v93 = (char *)v22;
      v83 = v82;
      v109 = v82;
      *(_DWORD *)v81 = 141558275;
      v107 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v81 + 4, v81 + 12);
      *(_WORD *)(v81 + 12) = 2081;
      v84 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v85 = dispatch thunk of CustomStringConvertible.description.getter(v10, v84);
      v107 = sub_100016940(v85, v86, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v81 + 14, v81 + 22);
      swift_bridgeObjectRelease();
      v105[1](v9, v10);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Not allowed to exhaustively fetch beacon %{private,mask.hash}s based on policy.", (uint8_t *)v81, 0x16u);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v81, -1, -1);

      v106(v93, v3);
    }
    else
    {

      v14[1](v9, v10);
      v62(v22, v3);
    }
    v51 = v95;
    goto LABEL_56;
  }
  if (qword_1010E9B58 != -1)
    swift_once(&qword_1010E9B58, sub_1003087EC);
  v63 = type metadata accessor for Logger(0);
  sub_10001A9E8(v63, (uint64_t)qword_1011B6D28);
  v64 = v97;
  v65 = ((uint64_t (*)(char *, void (*)(char *, char *), uint64_t))v14[2])(v97, v106, v10);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter(v66);
  if (os_log_type_enabled(v66, v67))
  {
    v68 = swift_slowAlloc(22, -1);
    v106 = (void (*)(char *, char *))v62;
    v69 = v68;
    v70 = (_QWORD *)swift_slowAlloc(32, -1);
    v93 = (char *)v22;
    v71 = v70;
    v109 = v70;
    *(_DWORD *)v69 = 141558275;
    v107 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v69 + 4, v69 + 12);
    *(_WORD *)(v69 + 12) = 2081;
    v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v73 = dispatch thunk of CustomStringConvertible.description.getter(v10, v72);
    v107 = sub_100016940(v73, v74, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v69 + 14, v69 + 22);
    swift_bridgeObjectRelease();
    v105[1]((uint64_t)v64, v10);
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Allowed to exhaustively fetch beacon %{private,mask.hash}s based on policy.", (uint8_t *)v69, 0x16u);
    v75 = 1;
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v69, -1, -1);

    v106(v93, v3);
    sub_100330970(v95);
  }
  else
  {

    v14[1]((uint64_t)v64, v10);
    v62(v22, v3);
    sub_100330970(v95);
    return 1;
  }
  return v75;
}

char *sub_10032D468(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  _BYTE v29[4];
  unsigned int v30;
  uint64_t (*v31)(_BYTE *);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  _UNKNOWN **v37;

  v33 = a2;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  __chkstk_darwin(v11);
  v14 = &v29[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = type metadata accessor for TagCommandManager();
  v37 = &off_101085150;
  *(_QWORD *)&v35 = a1;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v30 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v31 = *(uint64_t (**)(_BYTE *))(v12 + 104);
  v15 = v31(v14);
  static DispatchQoS.unspecified.getter(v15);
  v34 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v17, v18, v5, v16);
  *((_QWORD *)a3 + 7) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100ED10D0, v10, v7, v14, 0);
  v19 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v31)(v14, v30, v32);
  static DispatchQoS.unspecified.getter(v19);
  v34 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v17, v18, v5, v16);
  *((_QWORD *)a3 + 8) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000043, 0x8000000100ED1110, v10, v7, v14, 0);
  *((_QWORD *)a3 + 9) = _swiftEmptyArrayStorage;
  *(_QWORD *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon] = 0;
  v20 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playFuture;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F7A20);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)&a3[v20] = Future.init()();
  v22 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopFuture;
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)&a3[v22] = Future.init()();
  v23 = &a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier];
  v24 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v26(v23, 1, 1, v24);
  v26(&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier], 1, 1, v24);
  *(_QWORD *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError] = 0;
  v27 = &a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer];
  *((_QWORD *)v27 + 4) = 0;
  *(_OWORD *)v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  sub_10000F9FC(&v35, (uint64_t)(a3 + 16));
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier], v33, v24);
  return a3;
}

uint64_t sub_10032D808()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  _StringGuts.grow(_:)(55);
  v0._object = (void *)0x8000000100ED0C30;
  v0._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0xEC000000203A6B73;
  v3._countAndFlagsBits = 0x69446D6F7266202CLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 1702195828;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x6E6575716573202CLL;
  v5._object = (void *)0xED0000203A736563;
  String.append(_:)(v5);
  v6._countAndFlagsBits = Array.description.getter(&_swiftEmptyArrayStorage, &type metadata for BeaconKeyManager.KeySequence);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(71);
  v9._countAndFlagsBits = 0x6974737561687865;
  v9._object = (void *)0xEC000000203A6576;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 1702195828;
  v10._object = (void *)0xE400000000000000;
  String.append(_:)(v10);
  v11._object = (void *)0x8000000100ED0C50;
  v11._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0xD00000000000001FLL;
  v14._object = (void *)0x8000000100ED0C70;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 1702195828;
  v15._object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRetain(0xE000000000000000);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(0xE000000000000000);
  return 0;
}

void sub_10032DA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v28 = a3;
  v29 = a4;
  v7 = sub_10001A9A8(&qword_1010F7808);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v26 - v11;
  v30 = a1;
  v13 = *(_QWORD *)(a2 + 64);
  v26 = a2 + 64;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v27 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v17 = 0;
  if (!v16)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(a2 + 48);
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v12, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * i, v24);
    v25 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * i);
    *(_QWORD *)&v12[*(int *)(v7 + 48)] = v25;
    sub_100005CF0((uint64_t)v12, (uint64_t)v10, &qword_1010F7808);
    swift_bridgeObjectRetain(v25);
    sub_1003132FC(&v30, (uint64_t)v10, v28, v29);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v10, &qword_1010F7808);
      swift_release();
      return;
    }
    sub_100004048((uint64_t)v10, &qword_1010F7808);
    if (v16)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v27)
      goto LABEL_26;
    v21 = *(_QWORD *)(v26 + 8 * v17);
    if (!v21)
      break;
LABEL_17:
    v16 = (v21 - 1) & v21;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v27)
    goto LABEL_26;
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 2;
  if (v17 + 2 >= v27)
    goto LABEL_26;
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 3;
  if (v17 + 3 >= v27)
    goto LABEL_26;
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 4;
  if (v17 + 4 >= v27)
  {
LABEL_26:
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v26 + 8 * v22);
  if (v21)
  {
LABEL_16:
    v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v27)
      goto LABEL_26;
    v21 = *(_QWORD *)(v26 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

_QWORD *sub_10032DD00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  _QWORD *v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v20;
  _QWORD v22[3];
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  char *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28[2];
  uint64_t v29;

  v29 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v25 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v12 = *(_QWORD *)(v5 + 72);
    v22[2] = v2;
    v23 = v12;
    v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v22[1] = a1;
    v13 = swift_bridgeObjectRetain(a1);
    v14 = _swiftEmptyArrayStorage;
    while (1)
    {
      v24(v9, v11, v4, v13);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v15)(v9, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
        break;
      v16 = (uint64_t)v25;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v25, v9, v4);
      sub_10080B648(v16, (uint64_t)&v26);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v16, v4);
      if (v27)
      {
        sub_10000F9FC(&v26, (uint64_t)v28);
        sub_10000F9FC(v28, (uint64_t)&v26);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = sub_10001BC00(0, v14[2] + 1, 1, v14);
        v18 = v14[2];
        v17 = v14[3];
        if (v18 >= v17 >> 1)
          v14 = sub_10001BC00((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
        v14[2] = v18 + 1;
        sub_10000F9FC(&v26, (uint64_t)&v14[5 * v18 + 4]);
      }
      else
      {
        sub_100004048((uint64_t)&v26, (uint64_t *)&unk_1010EE310);
      }
      v11 += v23;
      if (!--v10)
      {
        v15(v9, 1, 1, v4, v13);
        break;
      }
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
    v20 = swift_bridgeObjectRetain(a1);
    v14 = _swiftEmptyArrayStorage;
    v19(v9, 1, 1, v4, v20);
  }
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_10032DF84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v37;
  _QWORD v39[3];
  char *v40;
  __n128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52[3];
  void (*v53)(char *, uint64_t, uint64_t);

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v39 - v11;
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  v39[2] = a1;
  if (v16)
  {
    v39[1] = v3;
    v17 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v44 = *(_QWORD *)(v7 + 72);
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v18 = swift_bridgeObjectRetain(a1);
    v49 = _swiftEmptyArrayStorage;
    v18.n128_u64[0] = 141558275;
    v41 = v18;
    v40 = (char *)&type metadata for Any + 8;
    v45 = v12;
    v46 = v7;
    v42 = v15;
    v43 = a2;
    while (1)
    {
      v48 = v16;
      v53(v15, v17, v6);
      v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v47)(v15, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v15, v6);
      if (qword_1010E9B58 != -1)
        swift_once(&qword_1010E9B58, sub_1003087EC);
      v20 = type metadata accessor for Logger(0);
      sub_10001A9E8(v20, (uint64_t)qword_1011B6D28);
      v21 = ((uint64_t (*)(char *, char *, uint64_t))v53)(v10, v12, v6);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(22, -1);
        v25 = v10;
        v26 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v52[0] = v26;
        *(_DWORD *)v24 = v41.n128_u32[0];
        *(_QWORD *)(v24 + 4) = 1752392040;
        *(_WORD *)(v24 + 12) = 2081;
        v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v28 = dispatch thunk of CustomStringConvertible.description.getter(v6, v27);
        *(_QWORD *)(v24 + 14) = sub_100016940(v28, v29, (uint64_t *)v52);
        swift_bridgeObjectRelease();
        v30 = *(void (**)(char *, uint64_t))(v7 + 8);
        v30(v25, v6);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "One-shot location includes beaconID: %{private,mask.hash}s.", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy(v26, 1, v40);
        v31 = v26;
        v10 = v25;
        v15 = v42;
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v24, -1, -1);
      }
      else
      {
        v30 = *(void (**)(char *, uint64_t))(v7 + 8);
        v30(v10, v6);
      }

      v12 = v45;
      sub_10080B648((uint64_t)v45, (uint64_t)&v50);
      v30(v12, v6);
      if (v51)
      {
        sub_10000F9FC(&v50, (uint64_t)v52);
        sub_10000F9FC(v52, (uint64_t)&v50);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
        v7 = v46;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v49 = sub_10001BC00(0, v49[2] + 1, 1, v49);
        v34 = v49[2];
        v33 = v49[3];
        if (v34 >= v33 >> 1)
          v49 = sub_10001BC00((_QWORD *)(v33 > 1), v34 + 1, 1, v49);
        v35 = v49;
        v49[2] = v34 + 1;
        sub_10000F9FC(&v50, (uint64_t)&v35[5 * v34 + 4]);
      }
      else
      {
        sub_100004048((uint64_t)&v50, (uint64_t *)&unk_1010EE310);
        v7 = v46;
      }
      v17 += v44;
      v16 = v48 - 1;
      if (v48 == 1)
      {
        v47(v15, 1, 1, v6, v19);
        break;
      }
    }
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    v37 = swift_bridgeObjectRetain(a1);
    v49 = _swiftEmptyArrayStorage;
    v36(v15, 1, 1, v6, v37);
  }
  swift_bridgeObjectRelease();
  return v49;
}

_QWORD *sub_10032E408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v56[7];
  uint64_t v57;
  char *v58;
  char *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v57 = a2;
  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v56[3] = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6);
  v67 = (uint64_t)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for StableIdentifier(0);
  v9 = __chkstk_darwin(v68);
  v11 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)v56 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v56 - v16;
  __chkstk_darwin(v15);
  v65 = (uint64_t)v56 - v18;
  result = _swiftEmptyArrayStorage;
  v71 = (unint64_t)_swiftEmptyArrayStorage;
  v64 = *(_QWORD *)(a1 + 16);
  if (v64)
  {
    v62 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v61 = *(_QWORD *)(v7 + 72);
    v56[5] = v14 + 8;
    v58 = v11 + 8;
    v56[1] = a1;
    swift_bridgeObjectRetain(a1);
    v20 = 0;
    v59 = v14;
    v60 = v6;
    v66 = v17;
    v63 = v11;
    while (1)
    {
      v21 = v62 + v61 * v20;
      v22 = v21 + v6[6];
      v23 = v65;
      sub_10005972C(v22, v65, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v23, v68);
      sub_1000126B0(v23, type metadata accessor for StableIdentifier);
      sub_10005972C(v22, (uint64_t)v17, type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload != 1)
      {
        sub_10005972C((uint64_t)v17, (uint64_t)v14, type metadata accessor for StableIdentifier);
        v25 = swift_getEnumCaseMultiPayload(v14, v68);
        if (v25 == 3)
        {
          sub_10001A9A8((uint64_t *)&unk_1010F46F0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          if (v25 != 2)
          {
            sub_1000126B0((uint64_t)v14, type metadata accessor for StableIdentifier);
            sub_1000126B0((uint64_t)v17, type metadata accessor for StableIdentifier);
            sub_10005972C(v21, v67, type metadata accessor for OwnedBeaconRecord);
            v34 = 0;
            goto LABEL_16;
          }
          sub_10001A9A8(&qword_101106F40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v26 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v14, v26);
      }
      sub_1000126B0((uint64_t)v17, type metadata accessor for StableIdentifier);
      v27 = v67;
      sub_10005972C(v21, v67, type metadata accessor for OwnedBeaconRecord);
      v28 = v6[17];
      v29 = *(_QWORD *)(v27 + v6[16]);
      v30 = *(_QWORD *)(v27 + v28);
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v31 = sub_100C1B8B8(v70);
      swift_bridgeObjectRelease();
      v32 = sub_100CA7F40(v31);
      swift_bridgeObjectRelease();
      v70 = v32;
      sub_100A0A1F4(&v69, 8212);
      sub_100A0A1F4(&v69, 8213);
      sub_100A0A1F4(&v69, 8216);
      sub_100A0A1F4(&v69, 8219);
      sub_100A0A1F4(&v69, 8220);
      sub_100A0A1F4(&v69, 8223);
      v33 = v29 == 76 && sub_100A07598(v30, v70);
      v6 = v60;
      v17 = v66;
      swift_bridgeObjectRelease();
      v34 = !v33;
LABEL_16:
      sub_1000126B0(v67, type metadata accessor for OwnedBeaconRecord);
      v35 = v22;
      v36 = (uint64_t)v63;
      sub_10005972C(v35, (uint64_t)v63, type metadata accessor for StableIdentifier);
      v37 = swift_getEnumCaseMultiPayload(v36, v68);
      if (v37 == 3)
      {
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v37 != 2)
        {
          sub_1000126B0(v36, type metadata accessor for StableIdentifier);
          if (v34)
            goto LABEL_27;
          goto LABEL_3;
        }
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v38 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v36, v38);
      v39 = sub_1001EE37C(*(_QWORD *)(v21 + v6[16]), *(_QWORD *)(v21 + v6[17]));
      if (v40 >> 60 != 15)
      {
        v41 = v40;
        if (v34)
        {
          sub_10001EF3C(v39, v40);
          v17 = v66;
LABEL_27:
          v42 = sub_1002835F0(v21, *(_QWORD *)(v57 + 280));
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          v44 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v43 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v44 >= v43 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
          specialized Array._endMutation()(v45);
          goto LABEL_3;
        }
        v56[6] = v39;
        v56[4] = v2;
        v46 = Set.init(minimumCapacity:)(1);
        v47 = 0;
        for (i = v46 + 56; ; i = v46 + 56)
        {
          while (2)
          {
            v49 = (uint64_t)*(&off_101047FC0 + v47++ + 4);
            v50 = static Hasher._hash(seed:_:)(*(_QWORD *)(v46 + 40), v49);
            v51 = -1 << *(_BYTE *)(v46 + 32);
            v52 = v50 & ~v51;
            if (((*(_QWORD *)(i + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) != 0)
            {
              v53 = *(_QWORD *)(v46 + 48);
              if (*(_QWORD *)(v53 + 8 * v52) == v49)
              {
LABEL_32:
                if (v47 == 1)
                  goto LABEL_41;
                continue;
              }
              v54 = ~v51;
              while (1)
              {
                v52 = (v52 + 1) & v54;
                if (((*(_QWORD *)(i + ((v52 >> 3) & 0xFFFFFFFFFFFFF8)) >> v52) & 1) == 0)
                  break;
                if (*(_QWORD *)(v53 + 8 * v52) == v49)
                  goto LABEL_32;
              }
            }
            break;
          }
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
          v69 = v46;
          sub_100A1CF0C(v49, v52, isUniquelyReferenced_nonNull_native);
          v46 = v69;
          swift_bridgeObjectRelease();
          if (v47 == 1)
          {
LABEL_41:
            v70 = v46;
            sub_100A0A1F4(&v69, 8216);
            sub_100A0A1F4(&v69, 8220);
            __asm { BR              X9 }
          }
        }
      }
      v17 = v66;
      if (v34)
        goto LABEL_27;
LABEL_3:
      ++v20;
      v14 = v59;
      if (v20 == v64)
      {
        swift_bridgeObjectRelease();
        return (_QWORD *)v71;
      }
    }
  }
  return result;
}

_QWORD *sub_10032ED54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  __n128 v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, __n128);
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, __n128);
  char *v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v40 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v43 = (char *)v35 - v12;
  result = _swiftEmptyArrayStorage;
  v50 = _swiftEmptyArrayStorage;
  v38 = *(_QWORD *)(a1 + 16);
  if (v38)
  {
    v14 = 0;
    v35[1] = v2;
    v36 = a1 + 32;
    v37 = a2;
    do
    {
      v39 = v14;
      sub_100030784(v36 + 40 * v14, (uint64_t)&v47);
      v18 = v48;
      v17 = v49;
      sub_10001AA44(&v47, v48);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8) + 32))(v18);
      v19 = *(_QWORD *)(a2 + 16);
      if (v19)
      {
        v20 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
        v15 = swift_bridgeObjectRetain(a2);
        v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
        v41 = *(_QWORD *)(v9 + 72);
        v42 = v21;
        while (1)
        {
          v42(v7, v20, v8, v15);
          v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v16)(v7, 0, 1, v8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
            break;
          v22 = v40;
          (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v40, v7, v8);
          v23 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v24 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v43, v8, v23);
          v25 = *(void (**)(char *, uint64_t))(v9 + 8);
          v25(v22, v8);
          if ((v24 & 1) != 0)
          {
            a2 = v37;
            swift_bridgeObjectRelease();
            v25(v43, v8);
            sub_10000F9FC(&v47, (uint64_t)v44);
            v26 = v50;
            if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
            {
              sub_10009A628(0, v26[2] + 1, 1);
              v26 = v50;
            }
            v28 = v26[2];
            v27 = v26[3];
            if (v28 >= v27 >> 1)
              sub_10009A628(v27 > 1, v28 + 1, 1);
            v29 = v45;
            v30 = v46;
            v31 = sub_10009F5D0((uint64_t)v44, v45);
            __chkstk_darwin(v31);
            v33 = (char *)v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v34 + 16))(v33);
            sub_1004AA86C(v28, (uint64_t)v33, (uint64_t *)&v50, v29, v30);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
            goto LABEL_6;
          }
          v20 += v41;
          if (!--v19)
            goto LABEL_4;
        }
      }
      else
      {
        v15 = swift_bridgeObjectRetain(a2);
        v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56);
LABEL_4:
        v16(v7, 1, 1, v8, v15);
      }
      a2 = v37;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v47);
LABEL_6:
      v14 = v39 + 1;
    }
    while (v39 + 1 != v38);
    return v50;
  }
  return result;
}

uint64_t sub_10032F0E4(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  __int128 v35[2];
  _QWORD *v36;

  v7 = result;
  v8 = _swiftEmptyArrayStorage;
  v36 = _swiftEmptyArrayStorage;
  v31 = *(_QWORD *)(result + 16);
  if (v31)
  {
    v9 = a6;
    v11 = a3;
    v12 = a2;
    v13 = 0;
    v14 = result + 32;
    v8 = (_QWORD *)(a4 & 1);
    v29 = result;
    v30 = a6;
    v27 = a2;
    v28 = a3;
    HIDWORD(v26) = a4 & 1;
    while (v13 < *(_QWORD *)(v7 + 16))
    {
      sub_100030784(v14, (uint64_t)v35);
      v15 = sub_100316B5C(v35, v12, v11, (int)v8, a5, v9);
      if (v6)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v8;
      }
      if (v15)
      {
        sub_10000F9FC(v35, (uint64_t)v32);
        v16 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
        {
          sub_10009A628(0, v16[2] + 1, 1);
          v16 = v36;
        }
        v17 = a5;
        v19 = v16[2];
        v18 = v16[3];
        if (v19 >= v18 >> 1)
          sub_10009A628(v18 > 1, v19 + 1, 1);
        v20 = v33;
        v21 = v34;
        v22 = sub_10009F5D0((uint64_t)v32, v33);
        __chkstk_darwin(v22);
        v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v25 + 16))(v24);
        sub_1004AA86C(v19, (uint64_t)v24, (uint64_t *)&v36, v20, v21);
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
        a5 = v17;
        v7 = v29;
        v9 = v30;
        v12 = v27;
        v11 = v28;
        v8 = (_QWORD *)HIDWORD(v26);
      }
      else
      {
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
      }
      ++v13;
      v14 += 40;
      if (v31 == v13)
      {
        v8 = v36;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

_QWORD *sub_10032F2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD v66[3];
  uint64_t v67;
  _QWORD *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;

  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v60 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v58 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v62 = (char *)&v53 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v53 - v15;
  __chkstk_darwin(v14);
  result = _swiftEmptyArrayStorage;
  v72 = _swiftEmptyArrayStorage;
  v56 = *(_QWORD *)(a1 + 16);
  if (v56)
  {
    v19 = 0;
    v55 = a1 + 32;
    v63 = a2 + 56;
    v54 = a3;
    v64 = a2;
    v65 = (char *)&v53 - v17;
    do
    {
      v57 = v19;
      sub_100030784(v55 + 40 * v19, (uint64_t)&v69);
      v22 = v70;
      v21 = v71;
      sub_10001AA44(&v69, v70);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8) + 32))(v22);
      if (*(_QWORD *)(a2 + 16)
        && (v23 = *(_QWORD *)(a2 + 40),
            v24 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v25 = dispatch thunk of Hashable._rawHashValue(seed:)(v23, v8, v24), v26 = -1 << *(_BYTE *)(a2 + 32), v27 = v25 & ~v26, ((*(_QWORD *)(v63 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) != 0))
      {
        v28 = ~v26;
        v29 = *(_QWORD *)(v9 + 72);
        v30 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
        do
        {
          v30(v16, *(_QWORD *)(v64 + 48) + v29 * v27, v8);
          v31 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v32 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v65, v8, v31);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
          if ((v32 & 1) != 0)
            break;
          v27 = (v27 + 1) & v28;
        }
        while (((*(_QWORD *)(v63 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) != 0);
      }
      else
      {
        v32 = 0;
      }
      v33 = *(void (**)(char *, uint64_t))(v9 + 8);
      v33(v65, v8);
      sub_100030784((uint64_t)&v69, (uint64_t)v66);
      if ((v32 & 1) != 0)
      {
        v61 = v33;
        v35 = v67;
        v34 = v68;
        sub_10001AA44(v66, v67);
        (*(void (**)(uint64_t))(*(_QWORD *)(v34[1] + 8) + 32))(v35);
        v36 = *(_QWORD *)(a3 + 16);
        if (v36)
        {
          v37 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
          v38 = swift_bridgeObjectRetain(a3);
          v59 = *(_QWORD *)(v9 + 72);
          v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
          v40 = v60;
          while (1)
          {
            v39(v40, v37, v8, v38);
            v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
            v41(v40, 0, 1, v8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v40, 1, v8) == 1)
              break;
            v42 = v58;
            (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v40, v8);
            v43 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v44 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v62, v8, v43);
            v61(v42, v8);
            if ((v44 & 1) != 0)
            {
              a3 = v54;
              swift_bridgeObjectRelease();
              v61(v62, v8);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
              a2 = v64;
              goto LABEL_4;
            }
            v40 = v60;
            v37 += v59;
            if (!--v36)
              goto LABEL_21;
          }
        }
        else
        {
          swift_bridgeObjectRetain(a3);
          v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
          v40 = v60;
LABEL_21:
          v41(v40, 1, 1, v8);
        }
        swift_bridgeObjectRelease();
        v61(v62, v8);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
        sub_10000F9FC(&v69, (uint64_t)v66);
        v45 = v72;
        if ((swift_isUniquelyReferenced_nonNull_native(v72) & 1) == 0)
        {
          sub_10009A628(0, v45[2] + 1, 1);
          v45 = v72;
        }
        a2 = v64;
        v47 = v45[2];
        v46 = v45[3];
        if (v47 >= v46 >> 1)
          sub_10009A628(v46 > 1, v47 + 1, 1);
        v48 = v67;
        v61 = (void (*)(char *, uint64_t))v68;
        v49 = sub_10009F5D0((uint64_t)v66, v67);
        __chkstk_darwin(v49);
        v51 = (char *)&v53 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v52 + 16))(v51);
        sub_1004AA86C(v47, (uint64_t)v51, (uint64_t *)&v72, v48, (uint64_t)v61);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
        a3 = v54;
        v20 = v57;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
        a2 = v64;
LABEL_4:
        v20 = v57;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v69);
      }
      v19 = v20 + 1;
    }
    while (v19 != v56);
    return v72;
  }
  return result;
}

_QWORD *sub_10032F868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __n128 v22;
  void (*v23)(char *, uint64_t, __n128);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _QWORD *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;

  v53 = a3;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v52 = (uint64_t)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v58 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - v12;
  result = _swiftEmptyArrayStorage;
  v66 = _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v57 = v3;
    v16 = a1 + 32;
    v51 = v9;
    v54 = v8;
    while (1)
    {
      sub_100030784(v16, (uint64_t)&v63);
      v17 = v64;
      v18 = v65;
      sub_10001AA44(&v63, v64);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) + 32))(v17);
      if (!*(_QWORD *)(a2 + 16))
        break;
      v19 = sub_100003FB0((uint64_t)v13);
      if ((v20 & 1) == 0)
        break;
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19);
      v22 = swift_bridgeObjectRetain(v21);
      v23 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
      v23(v13, v8, v22);
      v24 = *(_QWORD *)(v21 + 16);
      swift_bridgeObjectRelease();
      sub_100030784((uint64_t)&v63, (uint64_t)v60);
      if (v24)
        goto LABEL_12;
      v55 = *(_QWORD *)(v53 + 280);
      v25 = v61;
      v26 = v62;
      sub_10001AA44(v60, v61);
      (*(void (**)(uint64_t))(*(_QWORD *)(v26[1] + 8) + 32))(v25);
      if (qword_1010E9CF0 != -1)
        swift_once(&qword_1010E9CF0, sub_10058CADC);
      v27 = qword_1011B7160;
      v28 = objc_autoreleasePoolPush();
      v29 = sub_10001A9A8(&qword_1010F7770);
      v30 = v57;
      OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v27, v29);
      v57 = v30;
      v31 = v59;
      if (*(_QWORD *)(v59 + 16) && (v32 = sub_100003FB0(v58), (v33 & 1) != 0))
      {
        v56 = (void (*)(uint64_t, uint64_t))v23;
        v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRelease();
        v35 = sub_100508D98(v34);
        swift_bridgeObjectRelease();
        sub_10088FD00((uint64_t)v35);
        v37 = v36;
        swift_release();
      }
      else
      {
        v56 = (void (*)(uint64_t, uint64_t))v23;
        swift_bridgeObjectRelease();
        v37 = _swiftEmptyArrayStorage;
      }
      objc_autoreleasePoolPop(v28);
      v38 = v52;
      v39 = v58;
      v40 = sub_10082B1AC(v52, v58, (uint64_t)v37, 1);
      swift_bridgeObjectRelease();
      v8 = v54;
      v56(v39, v54);
      sub_100004048(v38, (uint64_t *)&unk_1010EA690);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
      if ((v40 & 1) == 0)
      {
        sub_10000F9FC(&v63, (uint64_t)v60);
        v41 = v66;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v66);
        v9 = v51;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10009A628(0, v41[2] + 1, 1);
          v41 = v66;
        }
        v44 = v41[2];
        v43 = v41[3];
        if (v44 >= v43 >> 1)
          sub_10009A628(v43 > 1, v44 + 1, 1);
        v45 = v61;
        v56 = (void (*)(uint64_t, uint64_t))v62;
        v46 = sub_10009F5D0((uint64_t)v60, v61);
        __chkstk_darwin(v46);
        v48 = (char *)&v50 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v49 + 16))(v48);
        sub_1004AA86C(v44, (uint64_t)v48, (uint64_t *)&v66, v45, (uint64_t)v56);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
        v8 = v54;
        goto LABEL_14;
      }
      v9 = v51;
LABEL_13:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v63);
LABEL_14:
      v16 += 40;
      if (!--v15)
        return v66;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    sub_100030784((uint64_t)&v63, (uint64_t)v60);
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
    goto LABEL_13;
  }
  return result;
}

char *sub_10032FCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;

  v3 = v2;
  v37 = sub_10001A9A8(&qword_1010ED860);
  v6 = __chkstk_darwin(v37);
  v36 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - v8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  v38 = (char *)&v29 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = (char *)_swiftEmptyArrayStorage;
  if (v15)
  {
    v33 = v13;
    v35 = v9;
    v39 = (char *)_swiftEmptyArrayStorage;
    sub_10009A578(0, v15, 0);
    v32 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v32;
    v18 = *(_QWORD *)(a2 + 280);
    v30 = *(_QWORD *)(v11 + 72);
    v31 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    v34 = v11;
    do
    {
      sub_1000181C8();
      v19 = swift_bridgeObjectRelease();
      __chkstk_darwin(v19);
      *(&v29 - 2) = v18;
      *(&v29 - 1) = v17;
      v20 = (uint64_t)v36;
      v21 = v3;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100330B8C);
      v22 = (uint64_t)v35;
      sub_100005CF0(v20, (uint64_t)v35, &qword_1010ED860);
      v23 = v33;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v33, v17, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v22, 1, v10) == 1)
      {
        v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
        v24(v38, v23, v10);
        sub_100004048(v22, &qword_1010ED860);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v23, v10);
        v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
        v24(v38, v22, v10);
      }
      v16 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      {
        sub_10009A578(0, *((_QWORD *)v16 + 2) + 1, 1);
        v16 = v39;
      }
      v26 = *((_QWORD *)v16 + 2);
      v25 = *((_QWORD *)v16 + 3);
      if (v26 >= v25 >> 1)
      {
        sub_10009A578(v25 > 1, v26 + 1, 1);
        v16 = v39;
      }
      *((_QWORD *)v16 + 2) = v26 + 1;
      v27 = v30;
      v24(&v16[v32 + v26 * v30], (uint64_t)v38, v10);
      v39 = v16;
      v17 += v27;
      --v15;
      v3 = v21;
      v11 = v34;
    }
    while (v15);
  }
  return v16;
}

uint64_t sub_10032FFA4(uint64_t a1)
{
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  Class isa;
  uint64_t v7[3];

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  KeyPath = swift_getKeyPath(&unk_100E36F18);
  sub_1000123D4(KeyPath, v7[0], v7);
  swift_bridgeObjectRelease();
  swift_release(KeyPath);
  v3 = v7[0];
  v4 = v7[1];
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a1 + 16))(a1, isa);

  return sub_10001BC14(v3, v4);
}

_QWORD *sub_100330084(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  __int128 v18[2];
  _QWORD *v19;

  v2 = _swiftEmptyArrayStorage;
  v19 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v3)
  {
    v4 = a1 + 32;
    do
    {
      sub_100030784(v4, (uint64_t)v18);
      if ((sub_100308FBC((uint64_t)v18) & 1) != 0)
      {
        sub_10000F9FC(v18, (uint64_t)v15);
        v5 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_10009A628(0, v5[2] + 1, 1);
          v5 = v19;
        }
        v7 = v5[2];
        v6 = v5[3];
        if (v7 >= v6 >> 1)
          sub_10009A628(v6 > 1, v7 + 1, 1);
        v8 = v16;
        v9 = v17;
        v10 = sub_10009F5D0((uint64_t)v15, v16);
        __chkstk_darwin(v10);
        v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v13 + 16))(v12);
        sub_1004AA86C(v7, (uint64_t)v12, (uint64_t *)&v19, v8, v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    v2 = v19;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100330224(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100312E44(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100330244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1011002FC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return sub_1005AED94(v2, v0 + 24);
}

uint64_t sub_1003302A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003302B0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1003190C4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1003302C8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1003302FC()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100330310(uint64_t a1)
{
  uint64_t v1;

  return sub_100319660(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100330318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v4 + 24));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003303FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8) + 80);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FB164);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004C28;
  return sub_1003FD088(v3, v4, v5, v6);
}

uint64_t sub_10033047C()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100330490(uint64_t a1)
{
  uint64_t v1;

  return sub_100322A08(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100330498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10033059C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100656E68((_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1003305EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100330628(uint64_t a1)
{
  uint64_t v1;

  return sub_100317284(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + 40);
}

uint64_t sub_100330638(uint64_t a1)
{
  uint64_t *v1;

  return sub_100319A24(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_100330658()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100330668(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  Transaction.capture()();
  return v3(a1);
}

uint64_t sub_1003306A8(uint64_t a1)
{
  uint64_t v1;

  return sub_10031790C(a1, *(dispatch_group_t *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1003306C8()
{
  return sub_1003309C0((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1003306D4()
{
  uint64_t v0;

  sub_100318A64(*(NSObject **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1003306E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_10106BED0, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = a1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_bridgeObjectRetain(a1);
  if (v9 == 1)
  {
    sub_100004048((uint64_t)v4, &qword_1010F46C0);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_10106BEF8, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_1010F7760;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  swift_task_create(v13, v20, &type metadata for () + 1, &unk_1010EE4A0, v19);
  return swift_release();
}

uint64_t sub_1003308B4()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003308C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F775C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[15] = v2;
  return swift_task_switch(sub_1003250F0, 0, 0);
}

uint64_t sub_100330928()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100330964(uint64_t a1)
{
  uint64_t v1;

  return sub_1003179C4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

_QWORD *sub_100330970(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[5];
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_1003309B4()
{
  return sub_1003309C0((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003309C0(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  swift_release(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, 48, 7);
}

void sub_100330A08()
{
  uint64_t v0;

  sub_100317BDC(*(NSObject **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100330A14()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100330A28(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, 32, 7);
}

uint64_t sub_100330A64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100315408(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1, *(double *)(v1 + 24));
}

uint64_t sub_100330A84(uint64_t a1)
{
  uint64_t v1;

  return sub_10081202C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100330AA0(_QWORD *a1)
{
  uint64_t v1;

  return sub_10031561C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(double *)(v1 + 16)) & 1;
}

void sub_100330AC0()
{
  uint64_t v0;

  sub_100327C80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 **)(v0 + 32));
}

uint64_t sub_100330ADC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100336CA8((uint64_t (*)(_QWORD, _QWORD))sub_100328088, a1);
}

uint64_t sub_100330AFC()
{
  uint64_t v0;

  return sub_100329E44(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_100330B08()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_100330B18()
{
  uint64_t v0;

  sub_10032A79C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)&unk_1010F77F0, (unint64_t *)&unk_10111C070, sub_100C82A60);
}

uint64_t sub_100330B48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100330B58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10080EB48(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100330B70(uint64_t a1)
{
  uint64_t v1;

  return sub_100312F6C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100330B8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10080EB9C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_100330BA4()
{
  unint64_t result;

  result = qword_1010F7850;
  if (!qword_1010F7850)
  {
    result = swift_getWitnessTable(byte_100E46B90, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1010F7850);
  }
  return result;
}

unint64_t sub_100330BE8()
{
  unint64_t result;

  result = qword_1010F7858;
  if (!qword_1010F7858)
  {
    result = swift_getWitnessTable(byte_100E46B50, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1010F7858);
  }
  return result;
}

uint64_t sub_100330C2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100336CA8((uint64_t (*)(_QWORD, _QWORD))sub_1003295B8, a1);
}

uint64_t sub_100330C4C()
{
  uint64_t v0;

  return sub_10032A5B0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_100330C58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100330C80()
{
  uint64_t v0;

  sub_10032A79C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)&unk_1010F49A0, &qword_101117070, sub_100C84064);
}

uint64_t sub_100330CB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100330CC0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100330CE8()
{
  uint64_t v0;

  return sub_100329FC0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

void sub_100330CF8()
{
  uint64_t v0;

  sub_10032A79C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)&unk_10111C390, &qword_1010F78C0, sub_100C83874);
}

uint64_t sub_100330D28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100330D38@<X0>(uint64_t *a1@<X8>)
{
  return sub_100336CA8((uint64_t (*)(_QWORD, _QWORD))sub_100328EA8, a1);
}

uint64_t sub_100330D58()
{
  uint64_t v0;

  return sub_10032A434(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

void sub_100330D68()
{
  uint64_t v0;

  sub_10032A79C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)&unk_1010F78E0, (unint64_t *)&qword_101110130, sub_100C83E68);
}

uint64_t sub_100330D98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100330DA8(char *a1, int64_t a2, void (*a3)(id, _QWORD), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t (*v51)();
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t (*v61)();
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint8_t *v67;
  _BYTE *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint8_t *v88;
  uint64_t result;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  char *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _UNKNOWN **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t (*v111)();
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  id v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  __n128 v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t (*v167)();
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  void *v172;
  uint64_t (*v173)();
  uint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  unsigned __int8 *v181;
  id v182;
  id v183;
  char *v184;
  char *v185;
  char *v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  void *v199;
  uint64_t (*v200)();
  uint64_t v201;
  uint64_t v202;
  char isUniquelyReferenced_nonNull_native;
  void (*v204)(uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  Class isa;
  id v211;
  uint64_t Configuration;
  uint64_t v213;
  unint64_t v214;
  uint64_t (*v215)();
  uint64_t v216;
  uint64_t v217;
  void (*v218)(id, _QWORD);
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  _BYTE *v223;
  char *v224;
  char *v225;
  int64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  __n128 v236;
  uint8_t *v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  __int128 aBlock;
  uint64_t (*v242)(uint64_t);
  void *v243;
  uint64_t (*v244)();
  uint64_t v245;
  _QWORD v246[4];
  _QWORD v247[4];
  uint64_t v248[4];
  uint64_t v249;
  char v250[8];
  uint64_t v251;
  _UNKNOWN **v252;
  uint64_t v253;
  _QWORD *v254;

  v217 = a4;
  v218 = a3;
  v226 = a2;
  v240 = type metadata accessor for UUID(0);
  v239 = *(_QWORD *)(v240 - 8);
  v5 = __chkstk_darwin(v240);
  v7 = (uint64_t)&Configuration - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&Configuration - v9;
  __chkstk_darwin(v8);
  v225 = (char *)&Configuration - v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F76D0);
  v13 = __chkstk_darwin(v12);
  v227 = (char *)&Configuration - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&Configuration - v15;
  v233 = type metadata accessor for Date(0);
  v219 = *(_QWORD *)(v233 - 8);
  v17 = __chkstk_darwin(v233);
  v231 = (char *)&Configuration - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v232 = (char *)&Configuration - v19;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v20);
  v235 = (char *)&Configuration - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for SharedBeaconRecord(0);
  v236.n128_u64[0] = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v228 = (char *)&Configuration - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Configuration = type metadata accessor for LocationFetchConfiguration(0);
  v213 = *(_QWORD *)(Configuration - 8);
  v23 = __chkstk_darwin(Configuration);
  v215 = (uint64_t (*)())((char *)&Configuration - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v214 = v24;
  __chkstk_darwin(v23);
  v26 = (unint64_t)&Configuration - v25;
  if (qword_1010E9B58 == -1)
    goto LABEL_2;
LABEL_150:
  swift_once(&qword_1010E9B58, sub_1003087EC);
LABEL_2:
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B6D28);
  sub_100012368(a1);
  v29 = sub_100012368(a1);
  v238 = (id)v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v223 = (_BYTE *)v26;
  v229 = v16;
  if (v32)
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v34;
    *(_DWORD *)v33 = 136446210;
    v237 = v33 + 4;
    sub_100012368(a1);
    v35 = sub_100C924F8();
    v37 = v36;
    sub_1000122FC(a1);
    v249 = sub_100016940(v35, v37, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v237, v33 + 12);
    swift_bridgeObjectRelease();
    sub_1000122FC(a1);
    sub_1000122FC(a1);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "One-shot location request with context %{public}s.", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    sub_1000122FC(a1);
    sub_1000122FC(a1);
  }

  v38 = v226;
  swift_retain();
  v39 = sub_10001A9A8(&qword_1010F76F0);
  unsafeFromAsyncTask<A>(_:)(&aBlock, &unk_1010F7A88, v38, v39);
  swift_release();
  v216 = aBlock;
  v222 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  LODWORD(v221) = *a1;
  if ((_DWORD)v221 == 2)
  {
    sub_1007C53E8();
    sub_100668048();
  }
  v40 = *((_QWORD *)a1 + 1);
  if (!*(_QWORD *)(v40 + 16))
  {
    v54 = sub_100017368();
    swift_bridgeObjectRetain(*((_QWORD *)a1 + 3));
    v56 = sub_100CA84A8(v55);
    swift_bridgeObjectRelease();
    v57 = sub_10047EBD8(v54, v56, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = v57[2];
    if (v58)
    {
      v249 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10009A578(0, v58, 0);
      v59 = (uint64_t)(v57 + 4);
      v49 = (_QWORD *)v249;
      do
      {
        sub_100030784(v59, (uint64_t)&aBlock);
        v60 = v243;
        v61 = v244;
        sub_10001AA44(&aBlock, (uint64_t)v243);
        (*(void (**)(void *))(*(_QWORD *)(*((_QWORD *)v61 + 1) + 8) + 32))(v60);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        {
          sub_10009A578(0, v49[2] + 1, 1);
          v49 = (_QWORD *)v249;
        }
        v63 = v49[2];
        v62 = v49[3];
        if (v63 >= v62 >> 1)
        {
          sub_10009A578(v62 > 1, v63 + 1, 1);
          v49 = (_QWORD *)v249;
        }
        v49[2] = v63 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v239 + 32))((unint64_t)v49+ ((*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80))+ *(_QWORD *)(v239 + 72) * v63, v10, v240);
        v249 = (uint64_t)v49;
        v59 += 40;
        --v58;
      }
      while (v58);
      goto LABEL_15;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    v49 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  swift_retain();
  swift_bridgeObjectRetain(v40);
  v42 = sub_10032FCB4(v41, v38);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v43 = sub_10032DD00((uint64_t)v42, v38);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain(*((_QWORD *)a1 + 3));
  v45 = sub_100CA84A8(v44);
  swift_bridgeObjectRelease();
  v46 = sub_10047EBD8((uint64_t)v43, v45, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = v46[2];
  if (!v47)
    goto LABEL_24;
  v249 = (uint64_t)_swiftEmptyArrayStorage;
  sub_10009A578(0, v47, 0);
  v48 = (uint64_t)(v46 + 4);
  v49 = (_QWORD *)v249;
  do
  {
    sub_100030784(v48, (uint64_t)&aBlock);
    v50 = v243;
    v51 = v244;
    sub_10001AA44(&aBlock, (uint64_t)v243);
    (*(void (**)(void *))(*(_QWORD *)(*((_QWORD *)v51 + 1) + 8) + 32))(v50);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
    {
      sub_10009A578(0, v49[2] + 1, 1);
      v49 = (_QWORD *)v249;
    }
    v53 = v49[2];
    v52 = v49[3];
    if (v53 >= v52 >> 1)
    {
      sub_10009A578(v52 > 1, v53 + 1, 1);
      v49 = (_QWORD *)v249;
    }
    v49[2] = v53 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v239 + 32))((unint64_t)v49+ ((*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80))+ *(_QWORD *)(v239 + 72) * v53, v7, v240);
    v249 = (uint64_t)v49;
    v48 += 40;
    --v47;
  }
  while (v47);
LABEL_15:
  swift_bridgeObjectRelease();
LABEL_25:
  v220 = *((_QWORD *)a1 + 4);
  v64 = v226;
  swift_retain();
  swift_bridgeObjectRetain(v49);
  v10 = 0;
  v66 = sub_10032DF84(v65, v64);
  swift_bridgeObjectRelease();
  swift_release();
  v67 = (uint8_t *)sub_100330084((uint64_t)v66);
  swift_bridgeObjectRelease();
  v68 = v223;
  sub_100C91CF0(v221);
  v70 = v68[1] == 1;
  v71 = (uint64_t)v229;
  v230 = a1;
  v7 = (uint64_t)v235;
  if (!v70)
    goto LABEL_43;
  v26 = (unint64_t)_swiftEmptyArrayStorage;
  v248[0] = (uint64_t)_swiftEmptyArrayStorage;
  a1 = (char *)*((_QWORD *)v67 + 2);
  swift_bridgeObjectRetain(v67);
  if (!a1)
    goto LABEL_42;
  v224 = 0;
  v72 = v67;
  v16 = 0;
  v237 = v72;
  v73 = (uint64_t)(v72 + 32);
  v74 = v234;
  do
  {
    if ((unint64_t)v16 >= *((_QWORD *)v237 + 2))
      goto LABEL_149;
    sub_100030784(v73, (uint64_t)&aBlock);
    sub_100030784((uint64_t)&aBlock, (uint64_t)&v249);
    v75 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v76 = swift_dynamicCast(v7, &v249, v75, v74, 6);
    v77 = *(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v236.n128_u64[0] + 56);
    if ((v76 & 1) != 0)
    {
      v77(v7, 0, 1, v74);
      v10 = v228;
      sub_1000126EC(v7, (uint64_t)v228, type metadata accessor for SharedBeaconRecord);
      v26 = v10[*(int *)(v74 + 64)];
      sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
      if ((_DWORD)v26 != 1)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        goto LABEL_30;
      }
    }
    else
    {
      v77(v7, 1, 1, v74);
      sub_100004048(v7, (uint64_t *)&unk_1010EE180);
    }
    sub_10000F9FC(&aBlock, (uint64_t)&v249);
    v78 = v248[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v248[0]) & 1) == 0)
    {
      sub_10009A628(0, *(_QWORD *)(v78 + 16) + 1, 1);
      v78 = v248[0];
    }
    v10 = *(char **)(v78 + 16);
    v79 = *(_QWORD *)(v78 + 24);
    if ((unint64_t)v10 >= v79 >> 1)
      sub_10009A628(v79 > 1, (int64_t)(v10 + 1), 1);
    v26 = v251;
    v80 = (uint64_t)v252;
    v81 = sub_10009F5D0((uint64_t)&v249, v251);
    __chkstk_darwin(v81);
    v83 = (char *)&Configuration - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v84 + 16))(v83);
    sub_1004AA86C((uint64_t)v10, (uint64_t)v83, v248, v26, v80);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v249);
    v71 = (uint64_t)v229;
    v74 = v234;
    v7 = (uint64_t)v235;
LABEL_30:
    ++v16;
    v73 += 40;
  }
  while (a1 != v16);
  v26 = v248[0];
  v64 = v226;
  v10 = v224;
  v67 = v237;
LABEL_42:
  swift_bridgeObjectRelease();
  sub_10030B02C(v26);
  v69 = swift_release();
  v68 = v223;
  a1 = v230;
LABEL_43:
  v70 = *v68 == 1;
  v234 = (unint64_t)v49;
  if (!v70)
  {
    v224 = v10;
    result = swift_bridgeObjectRelease();
    v215 = 0;
    v221 = 0;
    v90 = (uint64_t)v227;
    goto LABEL_56;
  }
  __chkstk_darwin(v69);
  v85 = v220;
  *(&Configuration - 4) = v64;
  *(&Configuration - 3) = v85;
  *(&Configuration - 2) = v86;
  swift_bridgeObjectRetain(v49);
  v87 = sub_100307258((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100336F80, (uint64_t)(&Configuration - 6), (uint64_t)v49);
  swift_bridgeObjectRelease();
  v90 = (uint64_t)v227;
  if ((_DWORD)v221)
  {
    swift_retain();
    v88 = (uint8_t *)sub_10032F868((uint64_t)v67, v87, v64);
    v224 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v67 = v88;
  }
  else
  {
    v224 = v10;
    swift_bridgeObjectRelease();
  }
  v91 = v67;
  v92 = *((_QWORD *)v67 + 2);
  if (v92)
  {
    v93 = (uint64_t)(v91 + 32);
    v237 = v91;
    v94 = swift_bridgeObjectRetain_n(v91, 2);
    v94.n128_u64[0] = 141558275;
    v236 = v94;
    v235 = (char *)&type metadata for Any + 8;
    v95 = v225;
    do
    {
      sub_100030784(v93, (uint64_t)&aBlock);
      v96 = sub_100030784((uint64_t)&aBlock, (uint64_t)&v249);
      v97 = Logger.logObject.getter(v96);
      v98 = static os_log_type_t.default.getter(v97);
      if (os_log_type_enabled(v97, v98))
      {
        v99 = swift_slowAlloc(22, -1);
        v100 = swift_slowAlloc(32, -1);
        v248[0] = v100;
        *(_DWORD *)v99 = v236.n128_u32[0];
        *(_QWORD *)(v99 + 4) = 1752392040;
        *(_WORD *)(v99 + 12) = 2081;
        v101 = v251;
        v102 = v252;
        sub_10001AA44(&v249, v251);
        (*(void (**)(uint64_t))(*((_QWORD *)v102[1] + 1) + 32))(v101);
        v103 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v104 = v240;
        v105 = dispatch thunk of CustomStringConvertible.description.getter(v240, v103);
        v107 = v106;
        v108 = v104;
        a1 = v230;
        (*(void (**)(char *, uint64_t))(v239 + 8))(v95, v108);
        *(_QWORD *)(v99 + 14) = sub_100016940(v105, v107, v248);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v249);
        _os_log_impl((void *)&_mh_execute_header, v97, v98, "One-shot location fetching ACSN for beacon without recent location: %{private,mask.hash}s.", (uint8_t *)v99, 0x16u);
        swift_arrayDestroy(v100, 1, v235);
        v109 = v100;
        v90 = (uint64_t)v227;
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v99, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v249);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v93 += 40;
      --v92;
    }
    while (v92);
    v91 = v237;
    swift_bridgeObjectRelease_n(v237, 2);
    v71 = (uint64_t)v229;
    v64 = v226;
  }
  v110 = *(NSObject **)(v64 + 96);
  v111 = v215;
  sub_10005972C((uint64_t)v223, (uint64_t)v215, type metadata accessor for LocationFetchConfiguration);
  v112 = *(unsigned __int8 *)(v213 + 80);
  v113 = (v112 + 128) & ~v112;
  v114 = swift_allocObject(&unk_10106CBF0, v113 + v214, v112 | 7);
  v115 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v114 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v114 + 64) = v115;
  *(_OWORD *)(v114 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v114 + 89) = *(_OWORD *)(a1 + 73);
  v116 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v114 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v114 + 32) = v116;
  *(_QWORD *)(v114 + 112) = v64;
  *(_QWORD *)(v114 + 120) = v91;
  sub_1000126EC((uint64_t)v111, v114 + v113, type metadata accessor for LocationFetchConfiguration);
  v117 = swift_allocObject(&unk_10106CC18, 32, 7);
  v215 = sub_10033029C;
  *(_QWORD *)(v117 + 16) = sub_10033029C;
  *(_QWORD *)(v117 + 24) = v114;
  v221 = v114;
  v244 = sub_10005CBA4;
  v245 = v117;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v242 = sub_10001D8B8;
  v243 = &unk_10106CC30;
  v118 = _Block_copy(&aBlock);
  sub_100012368(a1);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v110, v118);
  _Block_release(v118);
  LOBYTE(v118) = swift_isEscapingClosureAtFileLocation(v117, "", 150, 425, 44, 1);
  result = swift_release();
  if ((v118 & 1) == 0)
  {
LABEL_56:
    v119 = v232;
    v120 = static Date.distantPast.getter(result);
    __chkstk_darwin(v120);
    v121 = v226;
    v122 = v220;
    *(&Configuration - 4) = v226;
    *(&Configuration - 3) = v122;
    *(&Configuration - 2) = (uint64_t)v119;
    v7 = v234;
    swift_bridgeObjectRetain(v234);
    v10 = v224;
    v123 = sub_100307258((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100336F80, (uint64_t)(&Configuration - 6), v7);
    swift_bridgeObjectRelease_n(v7, 2);
    v124 = v121;
    v230 = *(char **)(v219 + 8);
    ((void (*)(char *, uint64_t))v230)(v119, v233);
    v254 = _swiftEmptyDictionarySingleton;
    swift_retain();
    sub_10032DA60((uint64_t)_swiftEmptyDictionarySingleton, v123, v121, (uint64_t *)&v254);
    v126 = v125;
    swift_release();
    v253 = v126;
    swift_bridgeObjectRelease();
    if ((a1[56] & 1) != 0 || (a1[57] & 1) != 0)
    {
      sub_100012368(a1);
      v127 = sub_100012368(a1);
      if (v222)
      {
        v128 = v222;
        v129 = Logger.logObject.getter(v128);
        v130 = static os_log_type_t.default.getter(v129);
        if (os_log_type_enabled(v129, v130))
        {
          v238 = v128;
          v131 = swift_slowAlloc(22, -1);
          v132 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v132;
          *(_DWORD *)v131 = 141558275;
          v249 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v131 + 4, v131 + 12);
          *(_WORD *)(v131 + 12) = 2081;
          v133 = *((_QWORD *)a1 + 6);
          if (v133)
          {
            v7 = *((_QWORD *)a1 + 5);
            v134 = *((_QWORD *)a1 + 6);
          }
          else
          {
            v7 = 0x6E776F6E6B6E75;
            v134 = 0xE700000000000000;
          }
          swift_bridgeObjectRetain(v133);
          v249 = sub_100016940(v7, v134, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v131 + 14, v131 + 22);
          swift_bridgeObjectRelease();
          sub_1000122FC(a1);
          sub_1000122FC(a1);
          _os_log_impl((void *)&_mh_execute_header, v129, v130, "Subscribing context for %{private,mask.hash}s.", (uint8_t *)v131, 0x16u);
          swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v132, -1, -1);
          swift_slowDealloc(v131, -1, -1);

          v90 = (uint64_t)v227;
          v71 = (uint64_t)v229;
          v124 = v226;
          v128 = v238;
        }
        else
        {
          sub_1000122FC(a1);
          sub_1000122FC(a1);

          v71 = (uint64_t)v229;
        }
        v142 = *(_QWORD *)(v124 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
        sub_1003279EC(v128, a1);
        type metadata accessor for Transaction(0);
        v143 = swift_allocObject(&unk_10106CBC8, 113, 7);
        *(_QWORD *)(v143 + 16) = v142;
        v144 = *((_OWORD *)a1 + 3);
        *(_OWORD *)(v143 + 56) = *((_OWORD *)a1 + 2);
        *(_OWORD *)(v143 + 72) = v144;
        *(_OWORD *)(v143 + 88) = *((_OWORD *)a1 + 4);
        *(_OWORD *)(v143 + 97) = *(_OWORD *)(a1 + 73);
        v145 = *((_OWORD *)a1 + 1);
        *(_OWORD *)(v143 + 24) = *(_OWORD *)a1;
        *(_OWORD *)(v143 + 40) = v145;
        sub_100012368(a1);
        swift_retain();
        static Transaction.asyncTask(name:block:)("LocationFetchService.addConnection", 34, 2, &unk_1010F7A90, v143);

        swift_release();
      }
      else
      {
        v135 = Logger.logObject.getter(v127);
        v136 = static os_log_type_t.default.getter(v135);
        if (os_log_type_enabled(v135, v136))
        {
          v137 = swift_slowAlloc(32, -1);
          v138 = swift_slowAlloc(64, -1);
          *(_QWORD *)&aBlock = v138;
          *(_DWORD *)v137 = 141558531;
          v249 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v137 + 4, v137 + 12);
          *(_WORD *)(v137 + 12) = 2081;
          v139 = *((_QWORD *)a1 + 6);
          if (v139)
          {
            v140 = *((_QWORD *)a1 + 5);
            v141 = *((_QWORD *)a1 + 6);
          }
          else
          {
            v140 = 0x6E776F6E6B6E75;
            v141 = 0xE700000000000000;
          }
          v7 = v137 + 14;
          swift_bridgeObjectRetain(v139);
          v249 = sub_100016940(v140, v141, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v137 + 14, v137 + 22);
          swift_bridgeObjectRelease();
          sub_1000122FC(a1);
          sub_1000122FC(a1);
          *(_WORD *)(v137 + 22) = 2080;
          v249 = 0;
          v146 = sub_10001A9A8(&qword_1010F7708);
          v147 = String.init<A>(describing:)(&v249, v146);
          v249 = sub_100016940(v147, v148, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v137 + 24, v137 + 32);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "Did not subscribe context for %{private,mask.hash}s,\nconnection: %s. No connection.", (uint8_t *)v137, 0x20u);
          swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v138, -1, -1);
          swift_slowDealloc(v137, -1, -1);

          v90 = (uint64_t)v227;
          v71 = (uint64_t)v229;
        }
        else
        {
          sub_1000122FC(a1);
          sub_1000122FC(a1);

          v90 = (uint64_t)v227;
        }
      }
    }
    v149 = v254[8];
    v224 = (char *)(v254 + 8);
    v150 = 1 << *((_BYTE *)v254 + 32);
    v151 = -1;
    if (v150 < 64)
      v151 = ~(-1 << v150);
    v152 = v151 & v149;
    v26 = (unint64_t)(v150 + 63) >> 6;
    v214 = v26 - 1;
    v153 = swift_bridgeObjectRetain(v254);
    v154 = 0;
    v226 = v26;
    v219 = v26 - 5;
    v16 = (char *)&qword_1010F76F8;
    v228 = (char *)v155;
    v220 = v155 + 104;
    if (!v152)
    {
LABEL_80:
      v162 = v154 + 1;
      if (__OFADD__(v154, 1))
        goto LABEL_148;
      if (v162 < v226)
      {
        v163 = *(_QWORD *)&v224[8 * v162];
        if (v163)
        {
LABEL_83:
          v157 = (v163 - 1) & v163;
          v158 = __clz(__rbit64(v163)) + (v162 << 6);
          v154 = v162;
          goto LABEL_79;
        }
        if ((uint64_t)(v154 + 2) >= v226)
        {
          ++v154;
        }
        else
        {
          v163 = *(_QWORD *)&v224[8 * v154 + 16];
          if (v163)
          {
            v162 = v154 + 2;
            goto LABEL_83;
          }
          if ((uint64_t)(v154 + 3) >= v226)
          {
            v154 += 2;
          }
          else
          {
            v163 = *(_QWORD *)&v224[8 * v154 + 24];
            if (v163)
            {
              v162 = v154 + 3;
              goto LABEL_83;
            }
            v162 = v154 + 4;
            if ((uint64_t)(v154 + 4) >= v226)
            {
              v154 += 3;
            }
            else
            {
              v163 = *(_QWORD *)&v224[8 * v162];
              if (v163)
                goto LABEL_83;
              while (v219 != v154)
              {
                v163 = *(_QWORD *)(v220 + 8 * v154++);
                if (v163)
                {
                  v162 = v154 + 4;
                  goto LABEL_83;
                }
              }
              v154 = v214;
            }
          }
        }
      }
      v164 = sub_10001A9A8(&qword_1010F76F8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(v90, 1, 1, v164);
      v157 = 0;
      goto LABEL_89;
    }
    while (1)
    {
      v156 = __clz(__rbit64(v152));
      v157 = (v152 - 1) & v152;
      v158 = v156 | (v154 << 6);
LABEL_79:
      v159 = (uint64_t)v228;
      (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v239 + 16))(v90, *((_QWORD *)v228 + 6) + *(_QWORD *)(v239 + 72) * v158, v240, v153);
      v160 = *(_QWORD *)(v159 + 56) + 40 * v158;
      v161 = sub_10001A9A8(&qword_1010F76F8);
      sub_100030784(v160, v90 + *(int *)(v161 + 48));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v90, 0, 1, v161);
LABEL_89:
      sub_100005CF0(v90, v71, (uint64_t *)&unk_1010F76D0);
      v165 = sub_10001A9A8(&qword_1010F76F8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 48))(v71, 1, v165) == 1)
      {
        swift_release();
        v208 = v253;
        v209 = objc_allocWithZone((Class)SPLocationFetchResult);
        sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
        sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v208);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v211 = objc_msgSend(v209, "initWithResults:", isa);

        v218(v211, 0);
        swift_bridgeObjectRelease();

        swift_release();
        sub_1000126B0((uint64_t)v223, type metadata accessor for LocationFetchConfiguration);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_10001D8A8((uint64_t)v215, v221);
      }
      v235 = (char *)v157;
      v236.n128_u64[0] = v154;
      sub_10000F9FC((__int128 *)(v71 + *(int *)(v165 + 48)), (uint64_t)&aBlock);
      v166 = v243;
      v167 = v244;
      sub_10001AA44(&aBlock, (uint64_t)v243);
      v168 = (*((uint64_t (**)(void *, uint64_t (*)()))v167 + 2))(v166, v167);
      sub_100307A98(v168, &v253);
      v7 = v169;
      v237 = (uint8_t *)v10;
      swift_bridgeObjectRelease();
      v16 = (char *)((unint64_t)v7 >> 62);
      if ((unint64_t)v7 >> 62)
      {
        if (v7 < 0)
          v207 = v7;
        else
          v207 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v26 = _CocoaArrayWrapper.endIndex.getter(v207);
        if (!v26)
        {
LABEL_76:
          swift_bridgeObjectRelease_n(v7, 2);
          goto LABEL_77;
        }
      }
      else
      {
        v26 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v7);
        if (!v26)
          goto LABEL_76;
      }
      v234 = v7 & 0xC000000000000001;
      if ((v7 & 0xC000000000000001) != 0)
      {
        v170 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
      }
      else
      {
        if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_147;
        v170 = (char *)*(id *)(v7 + 32);
      }
      a1 = v170;
      swift_bridgeObjectRelease();
      if (v16)
      {
        if (v7 < 0)
          v171 = v7;
        else
          v171 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v26 = _CocoaArrayWrapper.endIndex.getter(v171);
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v172 = v243;
      v173 = v244;
      sub_10001AA44(&aBlock, (uint64_t)v243);
      if (v26 != (*((unsigned __int8 (**)(void *, uint64_t (*)()))v173 + 3))(v172, v173))
      {

        swift_bridgeObjectRelease();
LABEL_127:
        v71 = (uint64_t)v229;
LABEL_77:
        v10 = (char *)v237;
        v16 = (char *)&qword_1010F76F8;
        v154 = v236.n128_u64[0];
        v152 = (unint64_t)v235;
        (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v71, v240);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if (!v152)
          goto LABEL_80;
        continue;
      }
      if (v16)
      {
        if (v7 < 0)
          v176 = v7;
        else
          v176 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v177 = a1;
        v174 = _CocoaArrayWrapper.endIndex.getter(v176);
        if (v174)
        {
LABEL_110:
          v178 = 4;
          while (1)
          {
            v26 = v178 - 4;
            v179 = v234
                 ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v178 - 4, v7)
                 : (char *)*(id *)(v7 + 8 * v178);
            v16 = v179;
            if (__OFADD__(v26, 1))
              break;
            v238 = (id)(v178 - 3);
            v251 = sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
            v252 = &off_1010B9400;
            v249 = (uint64_t)a1;
            v180 = a1;
            v181 = a1;
            v182 = objc_msgSend(v16, "timestamp");
            a1 = v232;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v182);

            v183 = objc_msgSend(v181, "timestamp");
            v184 = v231;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v183);

            v26 = static Date.== infix(_:_:)(a1, v184);
            v185 = v184;
            v10 = (char *)v233;
            v186 = v230;
            ((void (*)(char *, uint64_t))v230)(v185, v233);
            ((void (*)(char *, char *))v186)(a1, v10);
            sub_100030784((uint64_t)&v249, (uint64_t)v248);
            if ((v26 & 1) == 0)
            {
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v248);
              sub_100030784((uint64_t)&v249, (uint64_t)v247);
LABEL_123:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v247);
              sub_100030784((uint64_t)&v249, (uint64_t)v246);
LABEL_124:
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v246);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v249);
              swift_bridgeObjectRelease_n(v7, 2);

LABEL_126:
              v90 = (uint64_t)v227;
              goto LABEL_127;
            }
            v26 = v16;
            objc_msgSend((id)v26, "longitude");
            v188 = v187;
            objc_msgSend((id)*sub_10001AA44(v248, v248[3]), "longitude");
            v190 = v189;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v248);
            sub_100030784((uint64_t)&v249, (uint64_t)v247);
            if (v188 != v190)
              goto LABEL_123;
            v26 = (unint64_t)(id)v26;
            objc_msgSend((id)v26, "latitude");
            v192 = v191;
            objc_msgSend((id)*sub_10001AA44(v247, v247[3]), "latitude");
            v194 = v193;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v247);
            sub_100030784((uint64_t)&v249, (uint64_t)v246);
            if (v192 != v194)
              goto LABEL_124;
            v26 = (unint64_t)(id)v26;
            objc_msgSend((id)v26, "horizontalAccuracy");
            v196 = v195;
            objc_msgSend((id)*sub_10001AA44(v246, v246[3]), "horizontalAccuracy");
            v198 = v197;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v246);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v249);

            if (v196 != v198)
            {

              swift_bridgeObjectRelease_n(v7, 2);
              goto LABEL_126;
            }
            ++v178;
            a1 = v180;
            if (v238 == (id)v174)
              goto LABEL_120;
          }
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
      }
      else
      {
        v174 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v7);
        v175 = a1;
        if (v174)
          goto LABEL_110;
      }
LABEL_120:

      swift_bridgeObjectRelease_n(v7, 2);
      v199 = v243;
      v200 = v244;
      sub_10001AA44(&aBlock, (uint64_t)v243);
      v201 = (uint64_t)v225;
      (*((void (**)(void *, uint64_t (*)()))v200 + 1))(v199, v200);
      v26 = a1;
      v202 = v253;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v253);
      v249 = v202;
      sub_10010B5A8(v26, v201, isUniquelyReferenced_nonNull_native);
      v253 = v249;
      swift_bridgeObjectRelease();
      v204 = *(void (**)(uint64_t, uint64_t))(v239 + 8);
      v205 = v201;
      v206 = v240;
      v204(v205, v240);

      v71 = (uint64_t)v229;
      v204((uint64_t)v229, v206);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v90 = (uint64_t)v227;
      v10 = (char *)v237;
      v16 = (char *)&qword_1010F76F8;
      v154 = v236.n128_u64[0];
      v152 = (unint64_t)v235;
      if (!v235)
        goto LABEL_80;
    }
  }
  __break(1u);
  return result;
}

void sub_100332CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  void (*v16)(_BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _BYTE v27[16];
  __int128 v28;
  uint64_t v29;
  _QWORD v30[5];

  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8);
  v13 = &v27[-v12];
  static SystemInfo.lockState.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v14 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v15 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, v14);
  v16 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v16(v13, v6);
  if ((v15 & 1) != 0)
  {
    type metadata accessor for SPOwnerSessionError(0);
    v18 = v17;
    v19 = 16;
  }
  else
  {
    sub_10080B648(a1, (uint64_t)&v28);
    if (v29)
    {
      sub_10000F9FC(&v28, (uint64_t)v30);
      v20 = objc_autoreleasePoolPush();
      sub_1004869E4(a2, v30, &v28);
      objc_autoreleasePoolPop(v20);
      v26 = (void *)v28;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(a3 + 16))(a3, v28, 0);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
      return;
    }
    sub_100004048((uint64_t)&v28, (uint64_t *)&unk_1010EE310);
    type metadata accessor for SPOwnerSessionError(0);
    v18 = v21;
    v19 = 2;
  }
  *(_QWORD *)&v28 = v19;
  v22 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v23 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(v30, &v28, v22, v18, v23);
  v24 = (void *)v30[0];
  v25 = (void *)_convertErrorToNSError(_:)(v30[0]);
  (*(void (**)(uint64_t, _QWORD, void *))(a3 + 16))(a3, 0, v25);

}

void sub_100332F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  Class isa;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[5];

  v5 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v26 - v11;
  static SystemInfo.lockState.getter(v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v5);
  v13 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v14 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v9, v5, v13);
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  v15(v12, v5);
  if ((v14 & 1) != 0)
  {
    type metadata accessor for SPOwnerSessionError(0);
    v17 = v16;
    v18 = 16;
  }
  else
  {
    sub_1008259D0(a1, (uint64_t)&v26);
    if (v27)
    {
      sub_10000F9FC(&v26, (uint64_t)v28);
      v19 = (void *)sub_10081EBB0((uint64_t)v28);
      sub_10047EEE4((uint64_t)v28);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
      sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v19, "setTaskInformation:", isa);

      (*(void (**)(uint64_t, void *, _QWORD))(a3 + 16))(a3, v19, 0);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      return;
    }
    sub_100004048((uint64_t)&v26, (uint64_t *)&unk_101107010);
    type metadata accessor for SPOwnerSessionError(0);
    v17 = v21;
    v18 = 17;
  }
  *(_QWORD *)&v26 = v18;
  v22 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v23 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(v28, &v26, v22, v17, v23);
  v24 = (void *)v28[0];
  v25 = (void *)_convertErrorToNSError(_:)(v28[0]);
  (*(void (**)(uint64_t, _QWORD, void *))(a3 + 16))(a3, 0, v25);

}

void sub_100333218(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  _QWORD v40[5];

  v6 = type metadata accessor for SharedBeaconRecord(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v37 - v16;
  v18 = swift_allocObject(&unk_10106CB78, 24, 7);
  *(_QWORD *)(v18 + 16) = a3;
  v37 = a1;
  sub_100030784(a1, (uint64_t)v40);
  _Block_copy(a3);
  _Block_copy(a3);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v17, v40, v19, v12, 0))
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    _Block_copy(a3);
    swift_retain();
    sub_10028E1AC((uint64_t)v15, 1, a2, a3);
    _Block_release(a3);
    swift_release();
    v20 = (uint64_t)v15;
    v21 = type metadata accessor for OwnedBeaconRecord;
LABEL_5:
    sub_1000126B0(v20, v21);
    goto LABEL_9;
  }
  v22 = swift_dynamicCast(v11, v40, v19, v6, 0);
  if ((v22 & 1) != 0)
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    v23 = swift_allocObject(&unk_10106CBA0, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_10001D1EC;
    *(_QWORD *)(v23 + 24) = v18;
    swift_retain();
    sub_100274B28((uint64_t)v9, (uint64_t)sub_10001D858, v23);
    swift_release();
    v20 = (uint64_t)v9;
    v21 = type metadata accessor for SharedBeaconRecord;
    goto LABEL_5;
  }
  v24 = static os_log_type_t.error.getter(v22);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v25 = qword_1011B7D50;
  v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v27 = swift_allocObject(v26, 72, 7);
  *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
  sub_100030784(v37, (uint64_t)v39);
  v28 = String.init<A>(describing:)(v39, v19);
  v30 = v29;
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  *(_QWORD *)(v27 + 64) = sub_10001AA00();
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Unhandle beacon type: %@", 24, 2, v27);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0);
  v32 = v31;
  v38 = 0;
  v33 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v34 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(v39, &v38, v33, v32, v34);
  v35 = (void *)v39[0];
  v36 = (void *)_convertErrorToNSError(_:)(v39[0]);
  ((void (**)(_QWORD, void *))a3)[2](a3, v36);

LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  swift_release();
  _Block_release(a3);
}

uint64_t sub_1003335BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  NSString v46;
  Class isa;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE v59[72];

  v6 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1;
  v21 = v20;
  v23 = v22;
  sub_10000F9B8(v19, (uint64_t)v15, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v15, 1, v21) == 1)
  {
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    v24 = *(_QWORD *)(a2 + 280);
    v25 = *(_QWORD *)(v24 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v26 = type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v24, v25, &type metadata for () + 1, v26);
    sub_100DD850C(0);
    swift_release();
    return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v18, v15, v21);
    v28 = *(_QWORD *)(a2 + 280);
    sub_10080B950((uint64_t)v18, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      v29 = v21;
      v30 = sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F47C0);
      v31 = static os_log_type_t.error.getter(v30);
      v56 = a3;
      if (qword_1010EA270 != -1)
        swift_once(&qword_1010EA270, sub_100B5DAF0);
      v32 = qword_1011B7D50;
      v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v34 = swift_allocObject(v33, 72, 7);
      v55 = xmmword_100E22B00;
      *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
      v35 = UUID.uuidString.getter(v34);
      v37 = v36;
      *(_QWORD *)(v34 + 56) = &type metadata for String;
      *(_QWORD *)(v34 + 64) = sub_10001AA00();
      *(_QWORD *)(v34 + 32) = v35;
      *(_QWORD *)(v34 + 40) = v37;
      os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Unable to find owned beacon record for UUID: %@", 47, 2, v34);
      swift_bridgeObjectRelease();
      v38 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
      inited = swift_initStackObject(v38, v59);
      *(_OWORD *)(inited + 16) = v55;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v40;
      v57 = 0;
      v58 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      v57 = 0xD00000000000002DLL;
      v58 = 0x8000000100ED1590;
      v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v41);
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43 = v58;
      *(_QWORD *)(inited + 48) = v57;
      *(_QWORD *)(inited + 56) = v43;
      v44 = sub_1006B8DC4(inited);
      sub_10047B41C(v44);
      swift_bridgeObjectRelease();
      v45 = objc_allocWithZone((Class)NSError);
      v46 = String._bridgeToObjectiveC()();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v48 = objc_msgSend(v45, "initWithDomain:code:userInfo:", v46, 500, isa);

      v49 = v48;
      v50 = (void *)_convertErrorToNSError(_:)(v49);
      (*(void (**)(uint64_t, void *))(v56 + 16))(v56, v50);

      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v18, v29);
    }
    else
    {
      sub_1000126EC((uint64_t)v8, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      v51 = *(_QWORD *)(v28 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
      v52 = type metadata accessor for BeaconKeyManager(0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v28, v51, &type metadata for () + 1, v52);
      v53 = v57;
      v54 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v54);
      *((_QWORD *)&v55 - 6) = v53;
      *((_QWORD *)&v55 - 5) = v12;
      *((_BYTE *)&v55 - 32) = 2;
      *((_QWORD *)&v55 - 3) = 0;
      *((_QWORD *)&v55 - 2) = 0;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.checkForMissingKeyMaps.forbeacon", 62, 2, sub_100336884, &v55 - 4, &type metadata for () + 1);
      swift_release();
      (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v18, v21);
    }
  }
}

void sub_100333B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;

  v45 = a3;
  v44 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  sub_10080B950(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F47C0);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B77E8);
    v18 = v44;
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v44);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      *(_DWORD *)v22 = 141558275;
      v46 = 1752392040;
      v47 = (void *)v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v18, v24);
      v46 = sub_100016940(v25, v26, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to get keySync/keyAlignment record for beacon: %{private,mask.hash}s.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
    }

    type metadata accessor for SPOwnerSessionError(0);
    v37 = v36;
    v46 = 2;
    v38 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v39 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&v47, &v46, v38, v37, v39);
    v40 = v47;
    v41 = (void *)_convertErrorToNSError(_:)(v47);
    (*(void (**)(uint64_t, void *))(v45 + 16))(v45, v41);

  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v27 = type metadata accessor for Logger(0);
    sub_10001A9E8(v27, (uint64_t)qword_1011B77E8);
    v28 = sub_10005972C((uint64_t)v16, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(32, -1);
      *(_DWORD *)v31 = 141558275;
      v46 = 1752392040;
      v47 = (void *)v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      v43 = v31 + 14;
      v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v44, v33);
      v46 = sub_100016940(v34, v35, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v43, v31 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Forcing KeyAlignmentRecord update for beacon: %{private,mask.hash}s.", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    }

    sub_100819EE8((uint64_t)v16);
    (*(void (**)(uint64_t, _QWORD))(v45 + 16))(v45, 0);
    sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_1003340CC(uint64_t a1, void *a2, char a3, uint64_t a4, void (*a5)(_QWORD *, void *))
{
  unsigned int v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  _BYTE *v25;
  void *v26;
  __int128 v27;
  ValueMetadata *v28;
  unint64_t v29;
  _QWORD v30[5];

  sub_10080B648(a1, (uint64_t)&v27);
  if (!v28)
  {
    sub_100004048((uint64_t)&v27, (uint64_t *)&unk_1010EE310);
    v11 = sub_10028FA08();
    v12 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v11, 0, 0);
    *v13 = 10;
    v14 = (void *)_convertErrorToNSError(_:)(v12);
    a5(_swiftEmptyArrayStorage, v14);

    return swift_errorRelease(v12);
  }
  sub_10000F9FC(&v27, (uint64_t)v30);
  v8 = objc_msgSend(a2, "sequence");
  if (v8 == 1)
  {
    v9 = objc_msgSend(a2, "index");
    v28 = &type metadata for PrimaryIndex;
    v10 = sub_100336BAC();
    goto LABEL_9;
  }
  if (v8 == 2)
  {
    v9 = objc_msgSend(a2, "index");
    v28 = &type metadata for PrimaryWildIndex;
    v10 = sub_100336B68();
    goto LABEL_9;
  }
  if (v8 != 3)
  {
    v24 = sub_10028FA08();
    v12 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v24, 0, 0);
    *v25 = 4;
    v26 = (void *)_convertErrorToNSError(_:)(v12);
    a5(_swiftEmptyArrayStorage, v26);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
    return swift_errorRelease(v12);
  }
  v9 = objc_msgSend(a2, "index");
  v28 = &type metadata for SecondaryIndex;
  v10 = sub_100336B24();
LABEL_9:
  v29 = v10;
  *(_QWORD *)&v27 = v9;
  v15 = sub_1008193D8((uint64_t)v30, &v27, a3);
  if (v15)
    v16 = v15;
  else
    v16 = _swiftEmptyArrayStorage;
  v17 = v16[2];
  if (v17)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v17);
    v18 = 0;
    do
    {
      v19 = v18 + 1;
      v20 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", v16[v18 + 4]);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v20);
      specialized ContiguousArray._endMutation()(v22);
      v18 = v19;
    }
    while (v17 != v19);
  }
  swift_bridgeObjectRelease();
  a5(_swiftEmptyArrayStorage, 0);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v27);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
}

void sub_100334388(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Class isa;
  uint64_t v38;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v4 = (void *)sub_100C1B0B8(v38);
  swift_bridgeObjectRelease();
  v5 = SPServiceStateEnabled;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  if (v6 == v9 && v8 == v10)
  {

    v13 = swift_bridgeObjectRelease_n(v8, 2);
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);

    swift_bridgeObjectRelease();
    v13 = swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v14 = static os_log_type_t.default.getter(v13);
      if (qword_1010E9B50 != -1)
        swift_once(&qword_1010E9B50, sub_100308774);
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B6D20, "BA service not enabled - not persisting connections.", 52, 2, _swiftEmptyArrayStorage);
      goto LABEL_20;
    }
  }
  if (!*(_QWORD *)(a1 + 200))
  {
    v29 = static os_log_type_t.error.getter(v13);
    if (qword_1010E9B50 != -1)
      swift_once(&qword_1010E9B50, sub_100308774);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B6D20, "Persisting connections disabled - missing observer.", 51, 2, _swiftEmptyArrayStorage);
LABEL_20:
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    {
LABEL_25:
      sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
      sub_100336ACC();
      goto LABEL_26;
    }
LABEL_27:
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      sub_1003BEBA0((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_25;
  }
  v15 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v38, v15);
  v16 = swift_release();
  if ((v38 & 1) == 0)
  {
    v30 = static os_log_type_t.default.getter(v16);
    if (qword_1010E9B50 != -1)
      swift_once(&qword_1010E9B50, sub_100308774);
    v31 = qword_1011B6D20;
    v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v33 = swift_allocObject(v32, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
    LOBYTE(v38) = 0;
    v34 = String.init<A>(describing:)(&v38, &type metadata for PersistentConnectionObserver.PersistentConnectionPolicy);
    v36 = v35;
    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = sub_10001AA00();
    *(_QWORD *)(v33 + 32) = v34;
    *(_QWORD *)(v33 + 40) = v36;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Persisting connections disabled by policy %@.", 45, 2, v33);
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      goto LABEL_25;
    goto LABEL_27;
  }
  v17 = sub_1000188D0();
  swift_retain();
  v18 = sub_10032E408((uint64_t)v17, a1);
  swift_bridgeObjectRelease();
  v19 = swift_release();
  v20 = static os_log_type_t.default.getter(v19);
  if (qword_1010E9B50 != -1)
    swift_once(&qword_1010E9B50, sub_100308774);
  v21 = qword_1011B6D20;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v24 = sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
  swift_bridgeObjectRetain(v18);
  v26 = Array.description.getter(v25, v24);
  v28 = v27;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_10001AA00();
  *(_QWORD *)(v23 + 32) = v26;
  *(_QWORD *)(v23 + 40) = v28;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Persisting connections to beacons: %@.", 38, 2, v23);
  swift_bridgeObjectRelease();
  sub_100CA864C((uint64_t)v18);
  swift_bridgeObjectRelease();
  sub_100336ACC();
LABEL_26:
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();

}

void sub_100334830(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  void *v52;
  void (**v53)(_QWORD, _QWORD);
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  const void *v91;
  uint64_t v92;
  _BYTE v93[24];
  uint64_t v94;

  v79 = a5;
  v80 = a8;
  v77 = a7;
  v81 = a3;
  v82 = a6;
  v88 = a2;
  v89 = a4;
  v90 = a9;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v11);
  v85 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for LostModeRecord(0);
  v84 = *(_QWORD *)(v87 - 8);
  v13 = __chkstk_darwin(v87);
  v76 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v86 = (char *)&v75 - v16;
  __chkstk_darwin(v15);
  v78 = (uint64_t)&v75 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v18);
  v83 = (uint64_t)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a10);
  v91 = a10;
  v24 = _Block_copy(a10);
  v25 = static os_log_type_t.default.getter(v24);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v26 = qword_1011B7DC8;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v28 = swift_allocObject(v27, 72, 7);
  v75 = xmmword_100E22B00;
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  v29 = UUID.uuidString.getter(v28);
  v92 = a1;
  v31 = v30;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v32 = sub_10001AA00();
  *(_QWORD *)(v28 + 64) = v32;
  *(_QWORD *)(v28 + 32) = v29;
  *(_QWORD *)(v28 + 40) = v31;
  v33 = v92;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Command lost mode uuid: %@", 26, 2, v28);
  swift_bridgeObjectRelease();
  v34 = v90;
  sub_10080B648(v33, (uint64_t)v93);
  v35 = v94;
  sub_100004048((uint64_t)v93, (uint64_t *)&unk_1010EE310);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v33, v20);
  if (v35)
  {
    v36 = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  else
  {
    v37 = v83;
    sub_10081EDA8((uint64_t)v23, v83);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    v38 = type metadata accessor for OwnedBeaconGroup(0);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38);
    v36 = sub_100004048(v37, (uint64_t *)&unk_1010FF7F0);
    if (v39 == 1)
    {
      v40 = static os_log_type_t.error.getter(v36);
      if (qword_1010EA270 != -1)
        swift_once(&qword_1010EA270, sub_100B5DAF0);
      v41 = qword_1011B7D50;
      v42 = swift_allocObject(v27, 72, 7);
      *(_OWORD *)(v42 + 16) = v75;
      v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v20, v43);
      *(_QWORD *)(v42 + 56) = &type metadata for String;
      *(_QWORD *)(v42 + 64) = v32;
      *(_QWORD *)(v42 + 32) = v44;
      *(_QWORD *)(v42 + 40) = v45;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Could not find beacon/group for given UUID - %@", 47, 2, v42);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  v46 = v89;
  v47 = v88;
  if ((v88 & 1) != 0 && !v89)
  {
    v48 = static os_log_type_t.error.getter(v36);
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, qword_1011B7DC8, "Lost mode cannot be enabled without a message", 45, 2, _swiftEmptyArrayStorage);
LABEL_12:
    v49 = sub_10033638C();
    v50 = swift_allocError(&type metadata for BeaconManagerCommandError, v49, 0, 0);
    *v51 = 0;
    v52 = (void *)_convertErrorToNSError(_:)(v50);
    v53 = (void (**)(_QWORD, _QWORD))v91;
    (*((void (**)(const void *, void *))v91 + 2))(v91, v52);

    swift_errorRelease(v50);
    goto LABEL_34;
  }
  v54 = sub_100889F60(v33);
  v53 = (void (**)(_QWORD, _QWORD))v91;
  if (v54[2])
  {
    v56 = v84;
    v55 = v85;
    sub_10005972C((uint64_t)v54 + ((*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80)), v85, type metadata accessor for LostModeRecord);
    v57 = 0;
    v59 = (uint64_t)v86;
    v58 = (int *)v87;
  }
  else
  {
    v57 = 1;
    v59 = (uint64_t)v86;
    v58 = (int *)v87;
    v56 = v84;
    v55 = v85;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v56 + 56))(v55, v57, 1, v58);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v56 + 48))(v55, 1, v58) != 1)
  {
    v60 = v78;
    sub_1000126EC(v55, v78, type metadata accessor for LostModeRecord);
    v61 = (_QWORD *)(v60 + v58[9]);
    v62 = v61[1];
    if (v62)
    {
      if (v46)
      {
        if (*v61 != v81 || v62 != v46)
        {
          v63 = _stringCompareWithSmolCheck(_:_:expecting:)(*v61, v62, v81, v46, 0);
          sub_10005972C(v60, v59, type metadata accessor for LostModeRecord);
          if ((v63 & 1) == 0)
            goto LABEL_26;
          goto LABEL_36;
        }
LABEL_35:
        sub_10005972C(v60, v59, type metadata accessor for LostModeRecord);
LABEL_36:
        v65 = (_QWORD *)(v59 + v58[8]);
        v66 = v65[1];
        if (!v66)
        {
          v67 = v82;
          swift_bridgeObjectRetain(v82);
          sub_1000126B0(v59, type metadata accessor for LostModeRecord);
          if (!v67)
            goto LABEL_43;
          swift_bridgeObjectRelease();
LABEL_27:
          v64 = v76;
          sub_10005972C(v60, v76, type metadata accessor for LostModeRecord);
          goto LABEL_28;
        }
        if (v82)
        {
          if (*v65 != v79 || v66 != v82)
          {
            v68 = _stringCompareWithSmolCheck(_:_:expecting:)(*v65, v66, v79, v82, 0);
            sub_1000126B0(v59, type metadata accessor for LostModeRecord);
            v64 = v76;
            v60 = v78;
            sub_10005972C(v78, v76, type metadata accessor for LostModeRecord);
            if ((v68 & 1) == 0)
              goto LABEL_28;
            goto LABEL_45;
          }
          sub_1000126B0(v59, type metadata accessor for LostModeRecord);
LABEL_43:
          v64 = v76;
          sub_10005972C(v60, v76, type metadata accessor for LostModeRecord);
LABEL_45:
          v69 = (_QWORD *)(v64 + v58[7]);
          v70 = v69[1];
          if (!v70)
          {
            v72 = v80;
            swift_bridgeObjectRetain(v80);
            v71 = sub_1000126B0(v64, type metadata accessor for LostModeRecord);
            if (!v72)
              goto LABEL_53;
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
          if (v80)
          {
            if (*v69 == v77 && v70 == v80)
            {
              v71 = sub_1000126B0(v64, type metadata accessor for LostModeRecord);
LABEL_53:
              v74 = static os_log_type_t.default.getter(v71);
              os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, qword_1011B7DC8, "Lost mode info has not changed. Nothing to do.", 46, 2, _swiftEmptyArrayStorage);
              v53[2](v53, 0);
              sub_1000126B0(v60, type metadata accessor for LostModeRecord);
              goto LABEL_34;
            }
            v73 = _stringCompareWithSmolCheck(_:_:expecting:)(*v69, v70, v77, v80, 0);
            v71 = sub_1000126B0(v64, type metadata accessor for LostModeRecord);
            if ((v73 & 1) != 0)
              goto LABEL_53;
LABEL_29:
            sub_1000126B0(v60, type metadata accessor for LostModeRecord);
            goto LABEL_30;
          }
LABEL_28:
          sub_1000126B0(v64, type metadata accessor for LostModeRecord);
          goto LABEL_29;
        }
LABEL_26:
        sub_1000126B0(v59, type metadata accessor for LostModeRecord);
        goto LABEL_27;
      }
    }
    else if (!v46)
    {
      goto LABEL_35;
    }
    sub_10005972C(v60, v59, type metadata accessor for LostModeRecord);
    goto LABEL_26;
  }
  sub_100004048(v55, (uint64_t *)&unk_1010F47F0);
LABEL_30:
  _Block_copy(v53);
  if ((v47 & 1) != 0)
    sub_10068F834(v33, v77, v80, v79, v82, v81, v46, v34, v53);
  else
    sub_10068FCE8(v33, v34, (void (**)(const void *, void *))v53);
  _Block_release(v53);
LABEL_34:
  _Block_release(v53);
  _Block_release(v53);
}

uint64_t sub_100335064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *v29;
  uint64_t v31;

  v10 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for KeySyncRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a4 + 280);
  sub_10081AECC(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v18 = sub_100004048((uint64_t)v12, &qword_1010F7AE0);
    v19 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v20 = qword_1011B7D28;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "KeySyncRecord for beacon %@ does not exit!", 42, 2, v22);
    swift_bridgeObjectRelease();
    v26 = sub_10028FA08();
    v27 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v26, 0, 0);
    *v28 = 1;
    v29 = (void *)_convertErrorToNSError(_:)(v27);
    (*(void (**)(uint64_t, void *))(a5 + 16))(a5, v29);

    return swift_errorRelease(v27);
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v16, type metadata accessor for KeySyncRecord);
    sub_100857538((uint64_t)v16, a2, a3, (uint64_t)_swiftEmptyArrayStorage, v17);
    (*(void (**)(uint64_t, _QWORD))(a5 + 16))(a5, 0);
    return sub_1000126B0((uint64_t)v16, type metadata accessor for KeySyncRecord);
  }
}

uint64_t sub_1003352B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, char *, uint64_t);
  void (*v57)(char *, uint64_t, uint64_t);
  __int128 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD aBlock[7];

  v60 = type metadata accessor for BeaconObservation(0);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v62 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v3);
  v63 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v5);
  v72 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v70 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  __chkstk_darwin(v7);
  v64 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v9 - 8);
  v69 = v9;
  __chkstk_darwin(v9);
  v67 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v74 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v74);
  v59 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v56 - v18;
  v20 = static os_log_type_t.default.getter(v17);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v21 = qword_1011B7D50;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v22, 72, 7);
  v58 = xmmword_100E22B00;
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v24 = UUID.uuidString.getter(v23);
  v26 = v25;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_10001AA00();
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "SoundPlaybackCoordinator reported allCommandsCompleted %@.", 58, 2, v23);
  swift_bridgeObjectRelease();
  v27 = v73;
  v28 = v74;
  v57 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v57(v19, a1, v74);
  v29 = *(unsigned __int8 *)(v14 + 80);
  v30 = (v29 + 24) & ~v29;
  v31 = swift_allocObject(&unk_10106C420, v30 + v15, v29 | 7);
  *(_QWORD *)(v31 + 16) = v27;
  v56 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v56(v31 + v30, v19, v28);
  aBlock[4] = sub_100335968;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106C438;
  v32 = _Block_copy(aBlock);
  v33 = swift_retain();
  static DispatchQoS.unspecified.getter(v33);
  v75 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v37 = v67;
  v38 = v35;
  v39 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v38, v36, v69, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v37, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v37, v39);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v13, v66);
  swift_release();
  v40 = v72;
  sub_10080B950(a1, v72);
  v41 = v71;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v40, 1, v71) == 1)
    return sub_100004048(v40, (uint64_t *)&unk_1010F47C0);
  v43 = v64;
  sub_1000126EC(v40, v64, type metadata accessor for OwnedBeaconRecord);
  v44 = v43 + *(int *)(v41 + 28);
  v45 = v63;
  sub_10000F9B8(v44, v63, &qword_1010ED860);
  v46 = v74;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v45, 1, v74) == 1)
  {
    sub_1000126B0(v43, type metadata accessor for OwnedBeaconRecord);
    return sub_100004048(v45, &qword_1010ED860);
  }
  else
  {
    v73 = v14;
    v47 = v59;
    v56((uint64_t)v59, (char *)v45, v46);
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v48 = qword_1011B7160;
    v49 = (uint64_t)v62;
    v57(v62, (uint64_t)v47, v46);
    v50 = v60;
    static Date.trustedNow.getter(v49 + *(int *)(v60 + 20));
    *(_BYTE *)(v49 + *(int *)(v50 + 24)) = 29;
    v51 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v52 = *(unsigned __int8 *)(v61 + 80);
    v53 = (v52 + 32) & ~v52;
    v54 = swift_allocObject(v51, v53 + *(_QWORD *)(v61 + 72), v52 | 7);
    *(_OWORD *)(v54 + 16) = v58;
    sub_10005972C(v49, v54 + v53, type metadata accessor for BeaconObservation);
    v55 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v55);
    *(&v56 - 4) = (void (*)(uint64_t, char *, uint64_t))v48;
    *(&v56 - 3) = (void (*)(uint64_t, char *, uint64_t))v54;
    *(&v56 - 2) = 0;
    *(&v56 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v56 - 6, &type metadata for () + 1);
    swift_bridgeObjectRelease();
    sub_1000126B0(v49, type metadata accessor for BeaconObservation);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v46);
    return sub_1000126B0(v43, type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_100335968()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100323100(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100335998(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;

  v2 = sub_10001A9A8(&qword_101102FB0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static os_log_type_t.default.getter(v3);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v7 = qword_1011B7D50;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "SoundPlaybackCoordinator reported soundPlaybackStateChanged %@.", 63, 2, v9);
  swift_bridgeObjectRelease();
  sub_10081C0CC(a1, (uint64_t)v5);
  v13 = type metadata accessor for WildModeAssociationRecord(0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13);
  sub_100004048((uint64_t)v5, &qword_101102FB0);
  if (v14 == 1)
    return sub_1007EEF64(10);
  else
    return sub_1007F4EB8();
}

uint64_t sub_100335B24()
{
  uint64_t v0;

  return sub_10032A13C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

void sub_100335B34()
{
  uint64_t v0;

  sub_10032A79C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), &qword_1010F1580, &qword_1010F1588, sub_100C83A70);
}

uint64_t sub_100335B64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100335B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100335C54()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10030AC90(v0[2], v0[3], v0[4], (uint64_t)v0 + v2, *(uint64_t *)((char *)v0 + v3), *(uint64_t *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100335CB0(uint64_t a1)
{
  uint64_t v1;

  return sub_100310B90(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100335CC8()
{
  unint64_t result;

  result = qword_1010F7920;
  if (!qword_1010F7920)
  {
    result = swift_getWitnessTable("9f#", &type metadata for LocationSource);
    atomic_store(result, &qword_1010F7920);
  }
  return result;
}

uint64_t sub_100335D0C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100335D40()
{
  uint64_t *v0;

  return sub_100310DA4(v0[2], v0[3], v0[4]);
}

uint64_t sub_100335D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100335E3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = *(_QWORD *)((char *)v1 + v5);
  v11 = *(_QWORD *)((char *)v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  v12 = (uint64_t)v1 + v4;
  v13 = (_QWORD *)swift_task_alloc(dword_1010F792C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004C28;
  return sub_10030B524(a1, v6, v7, v8, v9, v12, v10, v11);
}

uint64_t *sub_100335F28@<X0>(uint64_t **a1@<X8>)
{
  uint64_t v1;

  return sub_100A83AE0(*(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100335F38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A83A78(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_100335F78()
{
  uint64_t v0;

  return sub_10031099C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD **)(v0 + 40), *(_QWORD **)(v0 + 48), *(_QWORD **)(v0 + 56));
}

void sub_100335F8C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100A83AB4((_QWORD *)(v1 + 24), a1);
}

id sub_100335F98()
{
  uint64_t v0;

  return sub_100310220(*(double *)(v0 + 24), *(double *)(v0 + 80), *(double *)(v0 + 88), *(_QWORD *)(v0 + 16), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD **)(v0 + 64), *(_QWORD **)(v0 + 72), *(void **)(v0 + 96), *(void **)(v0 + 104));
}

uint64_t sub_100335FD4()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100335FF8()
{
  uint64_t v0;

  return sub_100308EFC(*(_QWORD **)(v0 + 16), v0 + 24);
}

uint64_t sub_100336004()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100336014(uint64_t a1)
{
  uint64_t v1;

  return sub_100324184(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(_QWORD, _QWORD))(v1 + 40), *(_QWORD *)(v1 + 48));
}

unint64_t sub_100336038(uint64_t a1)
{
  uint64_t v1;

  return sub_100324718(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

unint64_t sub_100336044(unint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_100165D38(result);
  else
    return swift_release();
}

unint64_t sub_100336050(unint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_100165D28(result);
  else
    return swift_retain();
}

uint64_t sub_10033605C()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

unint64_t sub_100336070(uint64_t a1)
{
  uint64_t v1;

  return sub_100324C58(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24));
}

void sub_100336080(uint64_t a1)
{
  uint64_t v1;

  sub_100323898(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10033608C()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

void sub_1003360A0(uint64_t a1)
{
  uint64_t v1;

  sub_100323D10(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1003360AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_100336160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;
  return sub_10031E398(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + v3), v0 + v5, *(_QWORD *)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1003361C8()
{
  return sub_10033631C((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))sub_10031EA18);
}

uint64_t sub_1003361D4()
{
  return sub_10000765C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003361E4(uint64_t a1)
{
  uint64_t *v1;

  return sub_10031EBB0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003361F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100336214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1008DBEB8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10033622C(uint64_t a1)
{
  uint64_t v1;

  return sub_10031E6B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100336234()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100336264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_100336310()
{
  return sub_10033631C(sub_10031F314);
}

uint64_t sub_10033631C(uint64_t (*a1)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  return a1(*(_QWORD *)(v1 + 16), v1 + v4, v1 + ((v5 + v3 + v4) & ~v3), *(_QWORD *)(v1 + ((v5 + ((v5 + v3 + v4) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + ((v5 + v3 + v4) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100336384(uint64_t a1)
{
  uint64_t v1;

  return sub_10031F6C4(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

unint64_t sub_10033638C()
{
  unint64_t result;

  result = qword_1010F7A30;
  if (!qword_1010F7A30)
  {
    result = swift_getWitnessTable("Ya#", &type metadata for BeaconManagerCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F7A30);
  }
  return result;
}

uint64_t sub_1003363D0(uint64_t a1)
{
  uint64_t v1;

  return sub_100321F18(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1003363D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100322034(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1003363E4(uint64_t a1)
{
  return sub_1003364B4(a1, "Connect to %{private,mask.hash}s failed with error %{public}s. CommandId: %{public}s", "Connect to %{private,mask.hash}s completed successfully. CommandId: %{public}s.");
}

uint64_t sub_1003363FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1003364A0(uint64_t a1)
{
  return sub_1003364B4(a1, "Disconnect from %{private,mask.hash}s failed with error %{public}s. CommandId: %{public}s", "Disconnect from %{private,mask.hash}s completed successfully. CommandId: %{public}s.");
}

uint64_t sub_1003364B4(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  return sub_1003218DC(a1, v3 + v9, v3 + ((v10 + v8 + v9) & ~v8), *(void (**)(uint64_t))(v3 + ((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), a2, a3);
}

uint64_t sub_100336534(uint64_t a1)
{
  uint64_t *v1;

  return sub_100BF679C(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100336554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003365D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F7A44);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_10031FB44(v3, v4, v5, v6);
}

uint64_t sub_10033665C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v0[2];
  v6 = v0[3];
  v7 = v0[4];
  v8 = (uint64_t)v0 + v4;
  v9 = (uint64_t)v0 + ((*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3);
  v10 = (_QWORD *)swift_task_alloc(dword_1010F7A5C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004A74;
  return sub_10031AE14(v5, v6, v7, v8, v9);
}

uint64_t sub_100336704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1003367A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v0[2];
  v6 = v0[3];
  v7 = v0[4];
  v8 = (uint64_t)v0 + v4;
  v9 = (uint64_t)v0 + ((*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3);
  v10 = (_QWORD *)swift_task_alloc(dword_1010F7A6C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004A74;
  return sub_10031C704(v5, v6, v7, v8, v9);
}

uint64_t sub_100336844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A828D0(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_100336884(uint64_t a1)
{
  uint64_t v1;

  return sub_100DDFE28(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1003368AC()
{
  uint64_t v0;
  uint64_t Configuration;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Configuration = type metadata accessor for LocationFetchConfiguration(0);
  v2 = *(_QWORD *)(Configuration - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 128) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v7 = v0 + *(int *)(Configuration + 28) + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100336970()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationFetchConfiguration(0) - 8) + 80);
  return sub_100313134((unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), v0 + ((v1 + 128) & ~v1));
}

uint64_t sub_1003369A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003369B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100336A34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_BYTE *)(v0 + v3 + *(_QWORD *)(v2 + 64));
  v6 = swift_task_alloc(dword_1010F7A9C);
  v7 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_BYTE *)(v6 + 192) = v5;
  *(_QWORD *)(v6 + 152) = v4;
  *(_OWORD *)(v6 + 136) = v7;
  return swift_task_switch(sub_10031A644, 0, 0);
}

unint64_t sub_100336ACC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F7AC0;
  if (!qword_1010F7AC0)
  {
    v1 = sub_10000F4A0(255, &qword_1010F2158, SPBeacon_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1010F7AC0);
  }
  return result;
}

unint64_t sub_100336B24()
{
  unint64_t result;

  result = qword_1010F7AE8;
  if (!qword_1010F7AE8)
  {
    result = swift_getWitnessTable(aA_15, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_1010F7AE8);
  }
  return result;
}

unint64_t sub_100336B68()
{
  unint64_t result;

  result = qword_1010F7AF0;
  if (!qword_1010F7AF0)
  {
    result = swift_getWitnessTable(byte_100E47D54, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1010F7AF0);
  }
  return result;
}

unint64_t sub_100336BAC()
{
  unint64_t result;

  result = qword_1010F7AF8;
  if (!qword_1010F7AF8)
  {
    result = swift_getWitnessTable(asc_100E6D8F4, &type metadata for PrimaryIndex);
    atomic_store(result, (unint64_t *)&qword_1010F7AF8);
  }
  return result;
}

uint64_t sub_100336BF0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100336C38@<X0>(uint64_t *a1@<X8>)
{
  return sub_100336CA8((uint64_t (*)(_QWORD, _QWORD))sub_100328798, a1);
}

uint64_t sub_100336C58()
{
  uint64_t v0;

  return sub_10032A2B8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

void sub_100336C68()
{
  uint64_t v0;

  sub_10032A79C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), &qword_1010EF800, (unint64_t *)&qword_1010FB780, sub_100C83C6C);
}

uint64_t sub_100336C98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100336CA8@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = a1(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t sub_100336CDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100336D18()
{
  uint64_t v0;

  return sub_100329CC8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

void sub_100336D28()
{
  uint64_t v0;

  sub_10032A79C(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24), (uint64_t *)&unk_1010F7B10, (unint64_t *)&unk_1010EE140, sub_100C810AC);
}

uint64_t sub_100336D58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t _s10FetchGroupOwCP(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for BeaconKeyService.KeyStreamChange(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *_s10FetchGroupOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t *_s10FetchGroupOwta(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100336E1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100336E24(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *_s10FetchGroupOMa()
{
  return &_s10FetchGroupON;
}

uint64_t sub_100336F68@<X0>(uint64_t a1@<X8>)
{
  return sub_100336214(a1);
}

uint64_t sub_100336F80(_QWORD *a1, uint64_t a2)
{
  return sub_100330224(a1, a2);
}

uint64_t *sub_100336F94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_100337028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100337070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1003370D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100337154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003371B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10033721C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100337228);
}

uint64_t sub_100337228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ServerStatusCode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1003372A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003372B4);
}

uint64_t sub_1003372B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ServerStatusCode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for LostModeResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F7B98;
  if (!qword_1010F7B98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeResponse);
  return result;
}

uint64_t sub_10033736C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ServerStatusCode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E36F98;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1003373DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  char v31;

  v25 = a2;
  v28 = type metadata accessor for ServerStatusCode(0);
  v26 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v29 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = sub_10001A9A8(&qword_1010F7BD0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LostModeResponse(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100337708();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LostModeResponse.CodingKeys, &type metadata for LostModeResponse.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = v5;
  v14 = (uint64_t)v10;
  v15 = v26;
  v31 = 0;
  v16 = sub_100145A34();
  v17 = v28;
  v18 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v28, &v31, v27, v28, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v29, v17);
  v30 = 1;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v18);
  v22 = (uint64_t *)(v14 + *(int *)(v8 + 20));
  *v22 = v19;
  v22[1] = v21;
  sub_10033774C(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_100337790(v14);
}

uint64_t sub_100337634()
{
  _BYTE *v0;

  if (*v0)
    return 0x4D6572756C696166;
  else
    return 0x6F43737574617473;
}

uint64_t sub_100337680@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100337970(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003376A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100337708();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003376CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100337708();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003376F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003373DC(a1, a2);
}

unint64_t sub_100337708()
{
  unint64_t result;

  result = qword_1010F7BD8;
  if (!qword_1010F7BD8)
  {
    result = swift_getWitnessTable(byte_100E3709C, &type metadata for LostModeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7BD8);
  }
  return result;
}

uint64_t sub_10033774C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LostModeResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100337790(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LostModeResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for LostModeResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100337818 + 4 * byte_100E36F75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10033784C + 4 * byte_100E36F70[v4]))();
}

uint64_t sub_10033784C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100337854(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10033785CLL);
  return result;
}

uint64_t sub_100337868(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100337870);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100337874(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10033787C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeResponse.CodingKeys()
{
  return &type metadata for LostModeResponse.CodingKeys;
}

unint64_t sub_10033789C()
{
  unint64_t result;

  result = qword_1010F7BE0;
  if (!qword_1010F7BE0)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7BE0);
  }
  return result;
}

unint64_t sub_1003378E4()
{
  unint64_t result;

  result = qword_1010F7BE8;
  if (!qword_1010F7BE8)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7BE8);
  }
  return result;
}

unint64_t sub_10033792C()
{
  unint64_t result;

  result = qword_1010F7BF0;
  if (!qword_1010F7BF0)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7BF0);
  }
  return result;
}

uint64_t sub_100337970(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    v5 = 0xEA00000000006564;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473, 0xEA00000000006564, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4D6572756C696166 && a2 == 0xEE00656761737365)
  {
    swift_bridgeObjectRelease(0xEE00656761737365);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4D6572756C696166, 0xEE00656761737365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100337A90(uint64_t a1)
{
  return sub_100337AD8(a1, qword_1011B6D40, 0xD000000000000014, 0x8000000100ED1950);
}

uint64_t sub_100337AB4(uint64_t a1)
{
  return sub_100337AD8(a1, qword_1011B6D58, 0xD000000000000017, 0x8000000100ED1BB0);
}

uint64_t sub_100337AD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_1000234D8(v7, a2);
  sub_10001A9E8(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x8000000100EC5B70, a3, a4);
}

uint64_t sub_100337B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for ServerInteractionControllerKeeper();
  v1 = swift_allocObject(v0, 120, 15);
  result = swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = _swiftEmptyArrayStorage;
  qword_1011B6D70 = v1;
  return result;
}

uint64_t sub_100337B90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[4];
  _BYTE v24[24];

  sub_100337E30();
  v3 = (_QWORD *)(v1 + 112);
  swift_beginAccess(v1 + 112, v24, 0, 0);
  v4 = *(_QWORD *)(v1 + 112);
  swift_retain();
  swift_bridgeObjectRetain(v4);
  v6 = sub_10033CC7C(v5, a1);
  swift_bridgeObjectRelease();
  result = swift_release();
  if ((v6 & 1) == 0)
  {
    if (qword_1010E9B68 != -1)
      swift_once(&qword_1010E9B68, sub_100337AB4);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B6D58);
    v9 = swift_retain_n(a1, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      *(_DWORD *)v12 = 136315138;
      v23[0] = v13;
      v14 = type metadata accessor for UUID(0);
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      v22 = sub_100016940(v16, v17, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v12 + 4, v12 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Add new controller %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    swift_beginAccess(v3, v23, 33, 0);
    v18 = swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
    v20 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v20 >= v19 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, a1);
    specialized Array._endMutation()(v21);
    return swift_endAccess(v23);
  }
  return result;
}

void sub_100337E30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = (uint64_t *)(v0 + 112);
  swift_beginAccess(v0 + 112, &v69, 33, 0);
  v2 = *(_QWORD *)(v0 + 112);
  if ((unint64_t)v2 >> 62)
    goto LABEL_83;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v2);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    v9 = *v1;
    if ((unint64_t)*v1 >> 62)
    {
      if (v9 < 0)
        v63 = *v1;
      else
        v63 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v1);
      v4 = _CocoaArrayWrapper.endIndex.getter(v63);
      swift_bridgeObjectRelease();
    }
    else
    {
      v4 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    goto LABEL_12;
  }
LABEL_3:
  v4 = 0;
  while (1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
    }
    else
    {
      v5 = *(_QWORD *)(v2 + 8 * v4 + 32);
      swift_retain();
    }
    v6 = *(void **)(v5 + qword_1010F7CE0);
    objc_msgSend(v6, "lock");
    v7 = *(unsigned __int8 *)(v5 + qword_1010F7CE8);
    objc_msgSend(v6, "unlock");
    if (v7 == 1)
      break;
    swift_release();
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      if (v2 < 0)
        v61 = v2;
      else
        v61 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v2);
      v3 = _CocoaArrayWrapper.endIndex.getter(v61);
      if (!v3)
        goto LABEL_10;
      goto LABEL_3;
    }
    ++v4;
    if (v8 == v3)
      goto LABEL_10;
  }
  if (qword_1010E9B68 != -1)
    swift_once(&qword_1010E9B68, sub_100337AB4);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B6D58);
  v21 = swift_retain_n(v5, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = v1;
    v25 = swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v68 = v26;
    *(_DWORD *)v25 = 136315138;
    v20 = v5 + qword_1011B6D78;
    v27 = type metadata accessor for UUID(0);
    v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
    *(_QWORD *)(v25 + 4) = sub_100016940(v29, v30, &v68);
    swift_release_n(v5, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Removing controller with %s", (uint8_t *)v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v31 = v25;
    v1 = v24;
    swift_slowDealloc(v31, -1, -1);
    swift_bridgeObjectRelease();
    swift_release();

  }
  else
  {
    swift_bridgeObjectRelease();

    swift_release_n(v5, 3);
  }
  v32 = v4 + 1;
  v33 = &qword_1010F7000;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_103:
    if (v20 < 0)
      v65 = v20;
    else
      v65 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v66 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease();
    if (v32 != v66)
      goto LABEL_28;
    goto LABEL_12;
  }
  v20 = *v1;
  if ((unint64_t)*v1 >> 62)
    goto LABEL_103;
  if (v32 != *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    v34 = v4 + 5;
    v67 = v1;
    while (1)
    {
      v35 = v34 - 4;
      v36 = *v1;
      if ((*v1 & 0xC000000000000001) != 0)
      {
        v37 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v36);
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0)
          goto LABEL_73;
        if (v35 >= *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_74;
        v37 = *(_QWORD *)(v36 + 8 * v34);
        swift_retain();
      }
      v38 = *(void **)(v37 + v33[412]);
      objc_msgSend(v38, "lock");
      v39 = *(unsigned __int8 *)(v37 + qword_1010F7CE8);
      objc_msgSend(v38, "unlock");
      if (v39 != 1)
        break;
      v40 = swift_retain_n(v37, 2);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.default.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        v43 = swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        v68 = v44;
        *(_DWORD *)v43 = 136315138;
        v45 = type metadata accessor for UUID(0);
        v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
        *(_QWORD *)(v43 + 4) = sub_100016940(v47, v48, &v68);
        swift_release_n(v37, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Removing controller with %s", (uint8_t *)v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);
        swift_release();

      }
      else
      {

        swift_release_n(v37, 3);
      }
      v1 = v67;
      v33 = &qword_1010F7000;
LABEL_60:
      v2 = v34 - 3;
      if (__OFADD__(v35, 1))
        goto LABEL_75;
      v58 = *v1;
      if ((unint64_t)*v1 >> 62)
      {
        if (v58 < 0)
          v60 = *v1;
        else
          v60 = v58 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v1);
        v59 = _CocoaArrayWrapper.endIndex.getter(v60);
        swift_bridgeObjectRelease();
      }
      else
      {
        v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      ++v34;
      if (v2 == v59)
        goto LABEL_12;
    }
    swift_release();
    if (v35 == v4)
    {
LABEL_55:
      if (__OFADD__(v4++, 1))
        goto LABEL_76;
      goto LABEL_60;
    }
    v49 = *v1;
    if ((*v1 & 0xC000000000000001) != 0)
    {
      v50 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *v1);
      v49 = *v1;
      if ((*v1 & 0xC000000000000001) == 0)
      {
LABEL_41:
        if ((v35 & 0x8000000000000000) != 0)
          goto LABEL_79;
        if (v35 >= *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_80;
        v51 = *(_QWORD *)(v49 + 8 * v34);
        swift_retain();
        goto LABEL_44;
      }
    }
    else
    {
      if (v4 < 0)
        goto LABEL_77;
      if ((unint64_t)v4 >= *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_78;
      v50 = *(_QWORD *)(v49 + 8 * v4 + 32);
      swift_retain();
      if ((v49 & 0xC000000000000001) == 0)
        goto LABEL_41;
    }
    v51 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v49);
    v49 = *v1;
LABEL_44:
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v49);
    *v1 = v49;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v49 < 0 || (v49 & 0x4000000000000000) != 0)
    {
      v49 = sub_1008C5DD0(v49);
      *v1 = v49;
    }
    *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v51;
    v53 = swift_release();
    specialized Array._endMutation()(v53);
    v54 = *v1;
    v55 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *v1 = v54;
    if (!v55 || v54 < 0 || (v54 & 0x4000000000000000) != 0)
    {
      v54 = sub_1008C5DD0(v54);
      *v1 = v54;
    }
    if ((v35 & 0x8000000000000000) != 0)
      goto LABEL_81;
    if (v35 >= *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_82;
    *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFF8) + 8 * v34) = v50;
    v56 = swift_release();
    specialized Array._endMutation()(v56);
    goto LABEL_55;
  }
LABEL_12:
  v10 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v10 < 0)
      v62 = *v1;
    else
      v62 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease();
    if (v11 >= v4)
    {
LABEL_14:
      sub_1007796F4(v4, v11);
      swift_endAccess(&v69);
      if (qword_1010E9B68 == -1)
        goto LABEL_15;
      goto LABEL_93;
    }
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11 >= v4)
      goto LABEL_14;
  }
  __break(1u);
LABEL_93:
  swift_once(&qword_1010E9B68, sub_100337AB4);
LABEL_15:
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B6D58);
  v13 = swift_retain();
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134217984;
    v17 = *v1;
    if ((unint64_t)*v1 >> 62)
    {
      if (v17 < 0)
        v64 = *v1;
      else
        v64 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v1);
      v18 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease();
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v69 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v16 + 4, v16 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Active controllers count after cleanup is %ld", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release();
  }
}

uint64_t type metadata accessor for ServerInteractionControllerKeeper()
{
  return objc_opt_self(_TtC12searchpartyd33ServerInteractionControllerKeeper);
}

uint64_t type metadata accessor for ServerInteractionController(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F7CF0, (uint64_t)&nominal type descriptor for ServerInteractionController);
}

uint64_t sub_100338714(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[6];

  v2 = qword_1011B6D80;
  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = "(";
  v5[2] = &unk_100E37168;
  result = type metadata accessor for UUID(319);
  if (v4 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[5] = &unk_100E37180;
    result = swift_initClassMetadata2(a1, 0, 6, v5, a1 + v2);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1003387C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + qword_1010F7CD0));
  swift_unownedRelease(*(_QWORD *)(v0 + qword_1010F7CD8));
  v1 = v0 + qword_1011B6D78;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

}

uint64_t sub_100338840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  sub_100253E58();
  v2 = swift_retain_n(v0, 2);
  v3 = static OS_os_log.default.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = type metadata accessor for ServerInteractionController(0);
    swift_retain();
    v8 = String.init<A>(describing:)(&v15, v7);
    v15 = sub_100016940(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ServerInteractionController deinit (%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    v10 = swift_release_n(v1, 2);
  }
  v11 = FMNServerInteractionController.deinit(v10);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v11 + qword_1010F7CD0));
  swift_unownedRelease(*(_QWORD *)(v11 + qword_1010F7CD8));
  v12 = v11 + qword_1011B6D78;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);

  return v11;
}

uint64_t sub_100338A40()
{
  uint64_t v0;

  v0 = sub_100338840();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100338A60(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100338AC8, 0, 0);
}

uint64_t sub_100338AC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  v5 = *(void **)(v3 + qword_1010F7CE0);
  objc_msgSend(v5, "lock");
  *(_BYTE *)(v3 + qword_1010F7CE8) = 0;
  objc_msgSend(v5, "unlock");
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v7 = swift_allocObject(&unk_10106D0F8, 24, 7);
  swift_weakInit(v7 + 16, v3);
  v8 = (_QWORD *)swift_allocObject(&unk_10106D260, 40, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v7;
  sub_100691AC0(v1, (uint64_t)&unk_1010F7E48, (uint64_t)v8);
  swift_release();
  v9 = (_QWORD *)swift_task_alloc(48);
  v0[7] = v9;
  v9[2] = v3;
  v9[3] = v4;
  v9[4] = v2;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v10;
  v11 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *v10 = v0;
  v10[1] = sub_100338C3C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0x71657228646E6573, 0xEE00293A74736575, sub_10033D308, v9, v11);
}

uint64_t sub_100338C3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100338CBC, 0, 0);
  v5 = *(_QWORD *)(v3 + 48);
  swift_task_dealloc(*(_QWORD *)(v3 + 56));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100338CBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100338CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[5];
  _QWORD v87[4];

  v76 = a4;
  v71 = a1;
  v75 = sub_10001A9A8(&qword_1010F7E50);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v72 = v6;
  v73 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLComponents(0);
  v70 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10033C338(a3, (uint64_t)v87);
  v77 = a2;
  sub_100030784(a2 + qword_1010F7CD0, (uint64_t)v86);
  if (qword_1010E9B60 != -1)
    swift_once(&qword_1010E9B60, sub_100337A90);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6D40);
  sub_100030784((uint64_t)v86, (uint64_t)&v83);
  v15 = sub_100030784((uint64_t)v87, (uint64_t)v80);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v69 = v10;
  if (v18)
  {
    v19 = swift_slowAlloc(22, -1);
    v67 = v14;
    v20 = v19;
    v21 = swift_slowAlloc(64, -1);
    v79 = v21;
    *(_DWORD *)v20 = 136315394;
    v68 = v9;
    v22 = v84;
    v23 = v85;
    sub_10001AA44(&v83, v84);
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v22, v23);
    v24 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v10, v24);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v10);
    v78 = sub_100016940(v25, v27, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    *(_WORD *)(v20 + 12) = 2080;
    v29 = v81;
    v28 = v82;
    sub_10001AA44(v80, v81);
    v30 = dispatch thunk of FMNRequestContentRepresentable.headerDictionary.getter(v29, v28);
    v31 = Dictionary.description.getter(v30, &type metadata for String, &type metadata for String, &protocol witness table for String);
    v33 = v32;
    swift_bridgeObjectRelease();
    v78 = sub_100016940(v31, v33, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v20 + 14, v20 + 22);
    v9 = v68;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SendRequest: %s headerDictionary - %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
  }

  sub_100030784((uint64_t)v86, (uint64_t)&v83);
  v34 = sub_100030784((uint64_t)v87, (uint64_t)v80);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v79 = v38;
    *(_DWORD *)v37 = 136315394;
    v39 = v84;
    v40 = v85;
    sub_10001AA44(&v83, v84);
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v39, v40);
    v41 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
    v42 = v69;
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v69, v41);
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v42);
    v78 = sub_100016940(v43, v45, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    *(_WORD *)(v37 + 12) = 2080;
    v46 = v81;
    v47 = v82;
    sub_10001AA44(v80, v81);
    v48 = dispatch thunk of FMNRequestContentRepresentable.body.getter(v46, v47);
    v50 = v49;
    static String.Encoding.utf8.getter(v48);
    v51 = String.init(data:encoding:)(v48, v50, v9);
    v53 = v52;
    sub_10001BC14(v48, v50);
    if (v53)
      v54 = v51;
    else
      v54 = 0;
    if (v53)
      v55 = v53;
    else
      v55 = 0xE000000000000000;
    v78 = sub_100016940(v54, v55, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "SendRequest: %s body - %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
  }

  v56 = swift_allocObject(&unk_10106D0F8, 24, 7);
  swift_weakInit(v56 + 16, v77);
  v57 = v74;
  v58 = v73;
  v59 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v71, v75);
  sub_100030784((uint64_t)v86, (uint64_t)&v83);
  v60 = *(unsigned __int8 *)(v57 + 80);
  v61 = (v60 + 16) & ~v60;
  v62 = (v72 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v62 + 47) & 0xFFFFFFFFFFFFFFF8;
  v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = swift_allocObject(&unk_10106D288, v64 + 8, v60 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v65 + v61, v58, v59);
  sub_10000F9FC(&v83, v65 + v62);
  *(_QWORD *)(v65 + v63) = v56;
  *(_QWORD *)(v65 + v64) = v76;
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v86, v87, 0x6170686372616573, 0xEC00000064797472, 0, sub_10033D3AC, v65);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v86);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v87);
  return swift_release();
}

uint64_t sub_10033945C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  int v69;
  _BOOL4 v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  void (*v82)(_BYTE *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  int v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void (*v104)(_BYTE *, uint64_t);
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t result;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _BYTE v126[12];
  int v127;
  uint64_t v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t (*v131)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  void (*v140)(_BYTE *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  char v145[8];
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[3];
  uint64_t v149;
  uint64_t v150;

  v142 = a4;
  v143 = a3;
  v141 = a2;
  v5 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v5);
  v7 = &v126[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v8);
  v132 = &v126[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for URLComponents(0);
  v137 = *(_QWORD *)(v10 - 8);
  v138 = v10;
  __chkstk_darwin(v10);
  v136 = &v126[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v126[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v139 = &v126[-v18];
  v19 = __chkstk_darwin(v17);
  v134 = &v126[-v20];
  v21 = __chkstk_darwin(v19);
  v23 = &v126[-v22];
  __chkstk_darwin(v21);
  v25 = &v126[-v24];
  v26 = sub_10001A9A8(&qword_1010F7DF0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (uint64_t *)&v126[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16))(v29, a1, v26);
  v30 = (*(uint64_t (**)(uint64_t *, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == enum case for LegacyResult.success<A>(_:))
  {
    v130 = v7;
    (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v29, v26);
    v31 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v13 + 32))(v25, v29, v12);
    v32 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v31);
    sub_10033CD94(v32);
    swift_bridgeObjectRelease();
    v33 = v25;
    if (qword_1010E9B60 != -1)
      swift_once(&qword_1010E9B60, sub_100337A90);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B6D40);
    sub_100030784(v143, (uint64_t)v148);
    v36 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 16);
    v37 = v36(v23, v25, v12);
    v133 = v35;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter(v38);
    v40 = os_log_type_enabled(v38, v39);
    v135 = v25;
    v131 = v36;
    v129 = v16;
    if (v40)
    {
      v41 = swift_slowAlloc(22, -1);
      v128 = swift_slowAlloc(32, -1);
      v147 = v128;
      *(_DWORD *)v41 = 136315394;
      v140 = (void (*)(_BYTE *, uint64_t))(v41 + 4);
      v42 = v149;
      v43 = v150;
      sub_10001AA44(v148, v149);
      v44 = v136;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v42, v43);
      v45 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v46 = v138;
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v138, v45);
      v49 = v48;
      (*(void (**)(_BYTE *, uint64_t))(v137 + 8))(v44, v46);
      v146 = sub_100016940(v47, v49, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v140, v41 + 12);
      swift_bridgeObjectRelease();
      v50 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v148);
      *(_WORD *)(v41 + 12) = 2048;
      v51 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v50);
      v140 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
      v140(v23, v12);
      v146 = v51;
      v33 = v135;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v41 + 14, v41 + 22);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "SendRequest %s Received Response: status - %ld", (uint8_t *)v41, 0x16u);
      v52 = v128;
      swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      v53 = v41;
      v36 = v131;
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      v140 = *(void (**)(_BYTE *, uint64_t))(v13 + 8);
      v140(v23, v12);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v148);
    }

    sub_100030784(v143, (uint64_t)v148);
    v65 = v134;
    v66 = v36(v134, v33, v12);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.info.getter(v67);
    v69 = v68;
    v70 = os_log_type_enabled(v67, v68);
    v71 = v139;
    if (v70)
    {
      v72 = swift_slowAlloc(22, -1);
      v128 = swift_slowAlloc(64, -1);
      v147 = v128;
      *(_DWORD *)v72 = 136315394;
      v73 = v149;
      v74 = v150;
      sub_10001AA44(v148, v149);
      v75 = v136;
      v127 = v69;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v73, v74);
      v76 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v77 = v138;
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v138, v76);
      v80 = v79;
      v81 = v75;
      v82 = v140;
      (*(void (**)(_BYTE *, uint64_t))(v137 + 8))(v81, v77);
      v146 = sub_100016940(v78, v80, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      v83 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v148);
      *(_WORD *)(v72 + 12) = 2080;
      v84 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v83);
      v85 = Dictionary.description.getter(v84, &type metadata for String, &type metadata for String, &protocol witness table for String);
      v87 = v86;
      swift_bridgeObjectRelease();
      v146 = sub_100016940(v85, v87, &v147);
      v33 = v135;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v72 + 14, v72 + 22);
      v36 = v131;
      swift_bridgeObjectRelease();
      v82(v65, v12);
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v127, "SendRequest %s Received Response: header - %s", (uint8_t *)v72, 0x16u);
      v88 = v128;
      swift_arrayDestroy(v128, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      v89 = v72;
      v71 = v139;
      swift_slowDealloc(v89, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v148);
      v140(v65, v12);
    }

    sub_100030784(v143, (uint64_t)v148);
    v90 = v36(v71, v33, v12);
    v91 = Logger.logObject.getter(v90);
    v92 = static os_log_type_t.info.getter(v91);
    v93 = v92;
    if (os_log_type_enabled(v91, v92))
    {
      v94 = v71;
      v95 = swift_slowAlloc(22, -1);
      v143 = swift_slowAlloc(64, -1);
      v147 = v143;
      *(_DWORD *)v95 = 136315394;
      v133 = v95 + 4;
      v96 = v149;
      v97 = v150;
      sub_10001AA44(v148, v149);
      v98 = v136;
      LODWORD(v134) = v93;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v96, v97);
      v99 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v100 = v138;
      v101 = dispatch thunk of CustomStringConvertible.description.getter(v138, v99);
      v103 = v102;
      v104 = v140;
      (*(void (**)(_BYTE *, uint64_t))(v137 + 8))(v98, v100);
      v146 = sub_100016940(v101, v103, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v133, v95 + 12);
      swift_bridgeObjectRelease();
      v105 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v148);
      *(_WORD *)(v95 + 12) = 2080;
      v106 = v94;
      v107 = FMNServerInteractionController.FMNResponseFields.data.getter(v105);
      v109 = v108;
      v110 = v132;
      static String.Encoding.utf8.getter(v107);
      v111 = String.init(data:encoding:)(v107, v109, v110);
      v113 = v112;
      sub_10001BC14(v107, v109);
      if (v113)
        v114 = v111;
      else
        v114 = 0;
      v36 = v131;
      if (v113)
        v115 = v113;
      else
        v115 = 0xE000000000000000;
      v146 = sub_100016940(v114, v115, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v95 + 14, v95 + 22);
      swift_bridgeObjectRelease();
      v104(v106, v12);
      _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v134, "SendRequest %s Received Response: body - %s", (uint8_t *)v95, 0x16u);
      v116 = v143;
      swift_arrayDestroy(v143, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v95, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v148);
      v140(v71, v12);
    }

    v7 = v130;
    v64 = v142;
    v117 = v129;
    v118 = v135;
    v36(v129, v135, v12);
    v119 = sub_10001A9A8(&qword_1010F7E50);
    CheckedContinuation.resume(returning:)(v117, v119);
    v140(v118, v12);
  }
  else
  {
    if (v30 != enum case for LegacyResult.failure<A>(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v26, v26);
      __break(1u);
      return result;
    }
    (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v29, v26);
    v54 = *v29;
    v55 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v56 = swift_allocObject(v55, 72, 7);
    *(_OWORD *)(v56 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v54, v145, v144);
    v57 = Error.localizedDescription.getter(v144[1], v144[2]);
    v59 = v58;
    *(_QWORD *)(v56 + 56) = &type metadata for String;
    *(_QWORD *)(v56 + 64) = sub_10001AA00();
    *(_QWORD *)(v56 + 32) = v57;
    *(_QWORD *)(v56 + 40) = v59;
    v60 = sub_100253E58();
    v61 = (void *)static OS_os_log.default.getter(v60);
    v62 = static os_log_type_t.default.getter(v61);
    os_log(_:dso:log:type:_:)("ServerInteractionController Error calling server: %@", 52, 2, &_mh_execute_header, v61, v62, v56);

    swift_bridgeObjectRelease();
    v148[0] = v54;
    v63 = sub_10001A9A8(&qword_1010F7E50);
    CheckedContinuation.resume(throwing:)(v148, v63);
    v64 = v142;
  }
  swift_beginAccess(v64 + 16, v148, 0, 0);
  result = swift_weakLoadStrong(v64 + 16);
  if (result)
  {
    v121 = result;
    v122 = *(void **)(result + qword_1010F7CE0);
    objc_msgSend(v122, "lock");
    *(_BYTE *)(v121 + qword_1010F7CE8) = 1;
    objc_msgSend(v122, "unlock");
    v123 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 56))(v7, 1, 1, v123);
    v124 = swift_allocObject(&unk_10106D0F8, 24, 7);
    swift_weakInit(v124 + 16, v121);
    v125 = (_QWORD *)swift_allocObject(&unk_10106D2B0, 40, 7);
    v125[2] = 0;
    v125[3] = 0;
    v125[4] = v124;
    sub_100691C0C((uint64_t)v7, (uint64_t)&unk_1010F7E58, (uint64_t)v125);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10033A034(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  void (*v23)(_QWORD *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(_QWORD *);
  int v44;
  _QWORD v45[3];
  _BYTE v46[8];
  _BYTE v47[24];

  v42 = a5;
  v43 = a2;
  v44 = a4;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v41 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F7E30);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10001A9A8(&qword_1010F7DF0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  v19 = (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 88))(v18, v15);
  if (v19 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
    v20 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v18, v8);
    v21 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v20);
    sub_10033CD94(v21);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *, char *, uint64_t))(v9 + 16))(v14, v11, v8);
    swift_storeEnumTagMultiPayload(v14, v12, 0);
    v43(v14);
    sub_100004048((uint64_t)v14, &qword_1010F7E30);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v44 & 1) == 0)
      return result;
    goto LABEL_6;
  }
  v23 = v43;
  if (v19 != enum case for LegacyResult.failure<A>(_:))
  {
    result = _diagnoseUnexpectedEnumCase<A>(type:)(v15, v15);
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
  v24 = *v18;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
  swift_getErrorValue(v24, v46, v45);
  v27 = Error.localizedDescription.getter(v45[1], v45[2]);
  v29 = v28;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_10001AA00();
  *(_QWORD *)(v26 + 32) = v27;
  *(_QWORD *)(v26 + 40) = v29;
  v30 = sub_100253E58();
  v31 = (void *)static OS_os_log.default.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  os_log(_:dso:log:type:_:)("ServerInteractionController Error calling server: %@", 52, 2, &_mh_execute_header, v31, v32, v26);
  swift_bridgeObjectRelease();

  *v14 = v24;
  swift_storeEnumTagMultiPayload(v14, v12, 1);
  swift_errorRetain(v24);
  v23(v14);
  swift_errorRelease(v24);
  result = sub_100004048((uint64_t)v14, &qword_1010F7E30);
  if ((v44 & 1) != 0)
  {
LABEL_6:
    v33 = v42 + 16;
    swift_beginAccess(v42 + 16, v47, 0, 0);
    result = swift_weakLoadStrong(v33);
    if (result)
    {
      v34 = result;
      v35 = *(void **)(result + qword_1010F7CE0);
      objc_msgSend(v35, "lock");
      *(_BYTE *)(v34 + qword_1010F7CE8) = 1;
      objc_msgSend(v35, "unlock");
      v36 = type metadata accessor for TaskPriority(0);
      v37 = (uint64_t)v41;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v41, 1, 1, v36);
      v38 = swift_allocObject(&unk_10106D0F8, 24, 7);
      swift_weakInit(v38 + 16, v34);
      v39 = (_QWORD *)swift_allocObject(&unk_10106D210, 40, 7);
      v39[2] = 0;
      v39[3] = 0;
      v39[4] = v38;
      sub_100691C0C(v37, (uint64_t)&unk_1010F7E38, (uint64_t)v39);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10033A474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_BYTE *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void (*v84)(_BYTE *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  _BYTE *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _BYTE v119[4];
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(_BYTE *, uint64_t);
  _BYTE *v125;
  uint64_t (*v126)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  _QWORD v136[3];
  char v137[8];
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[3];
  uint64_t v141;
  uint64_t v142;

  v135 = a3;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v134 = &v119[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v125 = &v119[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for URLComponents(0);
  v132 = *(_QWORD *)(v11 - 8);
  v133 = v11;
  __chkstk_darwin(v11);
  v131 = &v119[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v129 = &v119[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v15);
  v128 = &v119[-v18];
  v19 = __chkstk_darwin(v17);
  v21 = &v119[-v20];
  __chkstk_darwin(v19);
  v23 = &v119[-v22];
  v24 = sub_10001A9A8(&qword_1010F7E30);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)&v119[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = a4 + 16;
  sub_10033D258(a1, (uint64_t)v26);
  if (swift_getEnumCaseMultiPayload(v26, v24) == 1)
  {
    v28 = *v26;
    v29 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v30 = swift_allocObject(v29, 72, 7);
    *(_OWORD *)(v30 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v28, v137, v136);
    v31 = Error.localizedDescription.getter(v136[1], v136[2]);
    v33 = v32;
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    *(_QWORD *)(v30 + 64) = sub_10001AA00();
    *(_QWORD *)(v30 + 32) = v31;
    *(_QWORD *)(v30 + 40) = v33;
    v34 = sub_100253E58();
    v35 = (void *)static OS_os_log.default.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    os_log(_:dso:log:type:_:)("ServerInteractionController Error calling server: %@", 52, 2, &_mh_execute_header, v35, v36, v30);
    swift_bridgeObjectRelease();

    Future.finish(error:)(v28);
    swift_errorRelease(v28);
    v37 = (uint64_t)v134;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v14 + 32))(v23, v26, v13);
    if (qword_1010E9B60 != -1)
      swift_once(&qword_1010E9B60, sub_100337A90);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B6D40);
    sub_100030784(v135, (uint64_t)v140);
    v40 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 16);
    v130 = v23;
    v126 = v40;
    v41 = v40(v21, v23, v13);
    v127 = v39;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.info.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v123 = a2;
    v122 = v27;
    if (v44)
    {
      v45 = swift_slowAlloc(22, -1);
      v121 = v13;
      v46 = v45;
      v47 = swift_slowAlloc(32, -1);
      v139 = v47;
      *(_DWORD *)v46 = 136315394;
      v124 = (void (*)(_BYTE *, uint64_t))(v46 + 4);
      v49 = v141;
      v48 = v142;
      sub_10001AA44(v140, v141);
      v50 = v131;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v49, v48);
      v51 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v52 = v133;
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v133, v51);
      v55 = v54;
      (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v50, v52);
      v138 = sub_100016940(v53, v55, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v124, v46 + 12);
      swift_bridgeObjectRelease();
      v56 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      *(_WORD *)(v46 + 12) = 2048;
      v57 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v56);
      v58 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
      v59 = v121;
      v124 = v58;
      v58(v21, v121);
      v138 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v46 + 14, v46 + 22);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "SendRequest %s Received Response: status - %ld", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      v60 = v59;
    }
    else
    {
      v124 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
      v124(v21, v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);

      v60 = v13;
    }
    sub_100030784(v135, (uint64_t)v140);
    v61 = v128;
    v62 = v130;
    v63 = v126(v128, v130, v60);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.info.getter(v64);
    v66 = v65;
    if (os_log_type_enabled(v64, v65))
    {
      v67 = swift_slowAlloc(22, -1);
      v121 = swift_slowAlloc(64, -1);
      v139 = v121;
      *(_DWORD *)v67 = 136315394;
      v68 = v141;
      v69 = v142;
      sub_10001AA44(v140, v141);
      v70 = v131;
      v120 = v66;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v68, v69);
      v71 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v72 = v60;
      v73 = v61;
      v74 = v133;
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v133, v71);
      v77 = v76;
      (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v70, v74);
      v138 = sub_100016940(v75, v77, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease();
      v78 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      *(_WORD *)(v67 + 12) = 2080;
      v79 = v73;
      v60 = v72;
      v80 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v78);
      v81 = Dictionary.description.getter(v80, &type metadata for String, &type metadata for String, &protocol witness table for String);
      v83 = v82;
      swift_bridgeObjectRelease();
      v138 = sub_100016940(v81, v83, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v67 + 14, v67 + 22);
      swift_bridgeObjectRelease();
      v84 = v124;
      v124(v79, v72);
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v120, "SendRequest %s Received Response: header - %s", (uint8_t *)v67, 0x16u);
      v85 = v121;
      swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      v86 = v67;
      v62 = v130;
      swift_slowDealloc(v86, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      v84 = v124;
      v124(v61, v60);
    }

    v87 = v129;
    sub_100030784(v135, (uint64_t)v140);
    v88 = v126(v87, v62, v60);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.info.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      v91 = swift_slowAlloc(22, -1);
      v135 = swift_slowAlloc(64, -1);
      v139 = v135;
      *(_DWORD *)v91 = 136315394;
      v129 = (_BYTE *)(v91 + 4);
      v92 = v141;
      v93 = v142;
      sub_10001AA44(v140, v141);
      v94 = v131;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v92, v93);
      v95 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v96 = v133;
      v97 = dispatch thunk of CustomStringConvertible.description.getter(v133, v95);
      v99 = v98;
      (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v94, v96);
      v138 = sub_100016940(v97, v99, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v129, v91 + 12);
      swift_bridgeObjectRelease();
      v100 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      *(_WORD *)(v91 + 12) = 2080;
      v101 = FMNServerInteractionController.FMNResponseFields.data.getter(v100);
      v103 = v102;
      v104 = v125;
      static String.Encoding.utf8.getter(v101);
      v105 = String.init(data:encoding:)(v101, v103, v104);
      v106 = v87;
      v108 = v107;
      sub_10001BC14(v101, v103);
      if (v108)
        v109 = v105;
      else
        v109 = 0;
      v84 = v124;
      if (v108)
        v110 = v108;
      else
        v110 = 0xE000000000000000;
      v138 = sub_100016940(v109, v110, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v91 + 14, v91 + 22);
      swift_bridgeObjectRelease();
      v84(v106, v60);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "SendRequest %s Received Response: body - %s", (uint8_t *)v91, 0x16u);
      v111 = v135;
      swift_arrayDestroy(v135, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      v112 = v91;
      v62 = v130;
      swift_slowDealloc(v112, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      v84(v87, v60);
    }

    v37 = (uint64_t)v134;
    v27 = v122;
    Future.finish(result:)(v62);
    v84(v62, v60);
  }
  swift_beginAccess(v27, v140, 0, 0);
  result = swift_weakLoadStrong(v27);
  if (result)
  {
    v114 = result;
    v115 = *(void **)(result + qword_1010F7CE0);
    objc_msgSend(v115, "lock");
    *(_BYTE *)(v114 + qword_1010F7CE8) = 1;
    objc_msgSend(v115, "unlock");
    v116 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v37, 1, 1, v116);
    v117 = swift_allocObject(&unk_10106D0F8, 24, 7);
    swift_weakInit(v117 + 16, v114);
    v118 = (_QWORD *)swift_allocObject(&unk_10106D238, 40, 7);
    v118[2] = 0;
    v118[3] = 0;
    v118[4] = v117;
    sub_100691C0C(v37, (uint64_t)&unk_1010F7E40, (uint64_t)v118);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_10033AF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Strong;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72[2];
  _BYTE v73[24];
  _BYTE v74[24];

  v68 = a6;
  v69 = a4;
  v70 = a5;
  v71 = a2;
  v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F7DE8);
  __chkstk_darwin(v15);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010F7DF0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = a3 + 16;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v19 + 16))(v21, a1, v18);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 88))(v21, v18);
  if (v23 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v21, v18);
    v24 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v9 + 32))(v11, v21, v8);
    v25 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v24);
    if ((unint64_t)(v25 - 600) < 0xFFFFFFFFFFFFFF9CLL)
    {
      v26 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v25);
      sub_10033CD94(v26);
      swift_bridgeObjectRelease();
      Future.finish(result:)(v11);
      swift_beginAccess(v22, v72, 0, 0);
      Strong = swift_weakLoadStrong(v22);
      if (Strong)
      {
        v28 = Strong;
        v29 = *(void **)(Strong + qword_1010F7CE0);
        objc_msgSend(v29, "lock");
        *(_BYTE *)(v28 + qword_1010F7CE8) = 1;
        objc_msgSend(v29, "unlock");
        v30 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 1, 1, v30);
        v31 = swift_allocObject(&unk_10106D0F8, 24, 7);
        swift_weakInit(v31 + 16, v28);
        v32 = (_QWORD *)swift_allocObject(&unk_10106D148, 40, 7);
        v32[2] = 0;
        v32[3] = 0;
        v32[4] = v31;
        sub_100691C0C((uint64_t)v14, (uint64_t)&unk_1010F7E00, (uint64_t)v32);
        swift_release();
        swift_release();
      }
      goto LABEL_14;
    }
    v43 = static os_log_type_t.error.getter(v25);
    v44 = sub_100253E58();
    v45 = (void *)static OS_os_log.default.getter(v44);
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v45, "ServerInteractionController: Server success with 500 error code, retrying.", 74, 2, _swiftEmptyArrayStorage);

    swift_beginAccess(v22, v74, 0, 0);
    if (!swift_weakLoadStrong(v22))
    {
LABEL_14:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return;
    }
    v46 = type metadata accessor for FMNRedirectHostStore(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v17, 1, 1, v46);
    v47 = swift_allocObject(&unk_10106D0F8, 24, 7);
    swift_beginAccess(v22, v73, 0, 0);
    v48 = swift_weakLoadStrong(v22);
    swift_weakInit(v47 + 16, v48);
    swift_release();
    v49 = v69;
    sub_100030784(v69, (uint64_t)v72);
    v50 = (_QWORD *)swift_allocObject(&unk_10106D120, 80, 7);
    v50[2] = v71;
    sub_10000F9FC(v72, (uint64_t)(v50 + 3));
    v51 = v68;
    v50[8] = v47;
    v50[9] = v51;
    swift_retain();
    swift_retain();
    dispatch thunk of FMNServerInteractionController.retryRequest(consolidatedContent:redirectedHostStore:responseHandler:retryCount:)(v49, v70, v17, sub_10033C860, v50, 0);
    swift_release();
    swift_release();
    sub_100004048((uint64_t)v17, &qword_1010F7DE8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_19;
  }
  if (v23 != enum case for LegacyResult.failure<A>(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)(v18, v18);
    __break(1u);
    return;
  }
  (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v21, v18);
  v33 = *v21;
  v34 = (void *)_convertErrorToNSError(_:)(*v21);
  v35 = objc_msgSend(v34, "domain");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
  if (v36 == v39 && v38 == v40)
  {
    swift_bridgeObjectRelease_n(v38, 2);
  }
  else
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
    {
LABEL_20:

      Future.finish(error:)(v33);
      swift_beginAccess(v22, v72, 0, 0);
      v61 = swift_weakLoadStrong(v22);
      if (v61)
      {
        v62 = v61;
        v63 = *(void **)(v61 + qword_1010F7CE0);
        objc_msgSend(v63, "lock");
        *(_BYTE *)(v62 + qword_1010F7CE8) = 1;
        objc_msgSend(v63, "unlock");
        v64 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v14, 1, 1, v64);
        v65 = swift_allocObject(&unk_10106D0F8, 24, 7);
        swift_weakInit(v65 + 16, v62);
        v66 = (_QWORD *)swift_allocObject(&unk_10106D170, 40, 7);
        v66[2] = 0;
        v66[3] = 0;
        v66[4] = v65;
        sub_100691C0C((uint64_t)v14, (uint64_t)&unk_1010F7E08, (uint64_t)v66);
        swift_release();
        swift_errorRelease(v33);
        swift_release();
      }
      else
      {
        swift_errorRelease(v33);
      }
      return;
    }
  }
  if (objc_msgSend(v34, "code") != (id)-1001)
    goto LABEL_20;
  v52 = static os_log_type_t.error.getter(-1001);
  v53 = sub_100253E58();
  v54 = (void *)static OS_os_log.default.getter(v53);
  os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v54, "ServerInteractionController: Timed Out Error, retrying.", 55, 2, _swiftEmptyArrayStorage);

  swift_beginAccess(v22, v74, 0, 0);
  if (swift_weakLoadStrong(v22))
  {
    v55 = type metadata accessor for FMNRedirectHostStore(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v17, 1, 1, v55);
    v56 = swift_allocObject(&unk_10106D0F8, 24, 7);
    swift_beginAccess(v22, v73, 0, 0);
    v57 = swift_weakLoadStrong(v22);
    swift_weakInit(v56 + 16, v57);
    swift_release();
    v58 = v69;
    sub_100030784(v69, (uint64_t)v72);
    v59 = (_QWORD *)swift_allocObject(&unk_10106D198, 80, 7);
    v59[2] = v71;
    sub_10000F9FC(v72, (uint64_t)(v59 + 3));
    v60 = v68;
    v59[8] = v56;
    v59[9] = v60;
    swift_retain();
    swift_retain();
    dispatch thunk of FMNServerInteractionController.retryRequest(consolidatedContent:redirectedHostStore:responseHandler:retryCount:)(v58, v70, v17, sub_10033D204, v59, 0);
    swift_errorRelease(v33);
    swift_release();
    swift_release();

    sub_100004048((uint64_t)v17, &qword_1010F7DE8);
LABEL_19:
    swift_release();
    return;
  }
  swift_errorRelease(v33);

}

uint64_t sub_10033B780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  int v73;
  _BOOL4 v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t (*v138)(char *, char *, uint64_t);
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[3];
  char v151[8];
  uint64_t v152;
  uint64_t v153;
  _QWORD v154[3];
  uint64_t v155;
  uint64_t v156;

  v141 = a8;
  v148 = a4;
  v149 = a3;
  v147 = a2;
  v12 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v12);
  v140 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v14);
  v137 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URLComponents(0);
  v144 = *(_QWORD *)(v16 - 8);
  v145 = v16;
  __chkstk_darwin(v16);
  v143 = (char *)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v146 = (char *)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v142 = (char *)&v132 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v132 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v132 - v27;
  v29 = sub_10001A9A8(&qword_1010F7DF0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (uint64_t *)((char *)&v132 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 16))(v32, a1, v29);
  v33 = (*(uint64_t (**)(uint64_t *, uint64_t))(v30 + 88))(v32, v29);
  if (v33 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v30 + 96))(v32, v29);
    v34 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v19 + 32))(v28, v32, v18);
    v35 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v34);
    sub_10033CD94(v35);
    swift_bridgeObjectRelease();
    if (qword_1010E9B60 != -1)
      swift_once(&qword_1010E9B60, sub_100337A90);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_10001A9E8(v36, (uint64_t)qword_1011B6D40);
    sub_100030784(v149, (uint64_t)v154);
    v138 = *(uint64_t (**)(char *, char *, uint64_t))(v19 + 16);
    v38 = v138(v26, v28, v18);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter(v39);
    v41 = v40;
    v42 = os_log_type_enabled(v39, v40);
    v139 = v28;
    if (v42)
    {
      v43 = swift_slowAlloc(22, -1);
      v136 = swift_slowAlloc(32, -1);
      v153 = v136;
      *(_DWORD *)v43 = 136315394;
      v134 = v43 + 4;
      LODWORD(v135) = v41;
      v45 = v155;
      v44 = v156;
      sub_10001AA44(v154, v155);
      v46 = v18;
      v47 = v37;
      v48 = v143;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v45, v44);
      v49 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v50 = v145;
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v145, v49);
      v53 = v52;
      v54 = v48;
      v37 = v47;
      v18 = v46;
      (*(void (**)(char *, uint64_t))(v144 + 8))(v54, v50);
      v152 = sub_100016940(v51, v53, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v134, v43 + 12);
      swift_bridgeObjectRelease();
      v55 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      *(_WORD *)(v43 + 12) = 2048;
      v56 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v55);
      v57 = *(void (**)(char *, uint64_t))(v19 + 8);
      v57(v26, v46);
      v152 = v56;
      v28 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v43 + 14, v43 + 22);
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v135, "SendRequest %s Received Response: status - %ld", (uint8_t *)v43, 0x16u);
      v58 = v136;
      swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      v57 = *(void (**)(char *, uint64_t))(v19 + 8);
      v57(v26, v18);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
    }

    sub_100030784(v149, (uint64_t)v154);
    v69 = v142;
    v70 = v138(v142, v28, v18);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.info.getter(v71);
    v73 = v72;
    v74 = os_log_type_enabled(v71, v72);
    v75 = v146;
    if (v74)
    {
      v76 = swift_slowAlloc(22, -1);
      v135 = swift_slowAlloc(64, -1);
      v153 = v135;
      *(_DWORD *)v76 = 136315394;
      v133 = v76 + 4;
      v136 = v37;
      v77 = v155;
      v78 = v156;
      sub_10001AA44(v154, v155);
      LODWORD(v134) = v73;
      v79 = v57;
      v80 = v143;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v77, v78);
      v81 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v82 = v145;
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v145, v81);
      v85 = v84;
      (*(void (**)(char *, uint64_t))(v144 + 8))(v80, v82);
      v152 = sub_100016940(v83, v85, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v133, v76 + 12);
      swift_bridgeObjectRelease();
      v86 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      *(_WORD *)(v76 + 12) = 2080;
      v87 = v142;
      v88 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v86);
      v89 = Dictionary.description.getter(v88, &type metadata for String, &type metadata for String, &protocol witness table for String);
      v91 = v90;
      swift_bridgeObjectRelease();
      v92 = v89;
      v28 = v139;
      v152 = sub_100016940(v92, v91, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v76 + 14, v76 + 22);
      swift_bridgeObjectRelease();
      v93 = v87;
      v57 = v79;
      v79(v93, v18);
      _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v134, "SendRequest %s Received Response: header - %s", (uint8_t *)v76, 0x16u);
      v94 = v135;
      swift_arrayDestroy(v135, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1, -1);
      v95 = v76;
      v75 = v146;
      swift_slowDealloc(v95, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      v57(v69, v18);
    }

    sub_100030784(v149, (uint64_t)v154);
    v96 = v138(v75, v28, v18);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.info.getter(v97);
    v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      v100 = swift_slowAlloc(22, -1);
      v149 = swift_slowAlloc(64, -1);
      v153 = v149;
      *(_DWORD *)v100 = 136315394;
      v138 = (uint64_t (*)(char *, char *, uint64_t))(v100 + 4);
      v101 = v155;
      v102 = v156;
      sub_10001AA44(v154, v155);
      LODWORD(v142) = v99;
      v103 = v57;
      v104 = v143;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v101, v102);
      v105 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
      v106 = v75;
      v107 = v145;
      v108 = dispatch thunk of CustomStringConvertible.description.getter(v145, v105);
      v110 = v109;
      v111 = v104;
      v57 = v103;
      (*(void (**)(char *, uint64_t))(v144 + 8))(v111, v107);
      v152 = sub_100016940(v108, v110, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v138, v100 + 12);
      swift_bridgeObjectRelease();
      v112 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      *(_WORD *)(v100 + 12) = 2080;
      v113 = FMNServerInteractionController.FMNResponseFields.data.getter(v112);
      v115 = v114;
      v116 = v137;
      static String.Encoding.utf8.getter(v113);
      v117 = String.init(data:encoding:)(v113, v115, v116);
      v119 = v118;
      sub_10001BC14(v113, v115);
      if (v119)
        v120 = v117;
      else
        v120 = 0;
      if (v119)
        v121 = v119;
      else
        v121 = 0xE000000000000000;
      v152 = sub_100016940(v120, v121, &v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v100 + 14, v100 + 22);
      swift_bridgeObjectRelease();
      v57(v106, v18);
      _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v142, "SendRequest %s Received Response: body - %s", (uint8_t *)v100, 0x16u);
      v122 = v149;
      swift_arrayDestroy(v149, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1, -1);
      swift_slowDealloc(v100, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v154);
      v57(v75, v18);
    }

    v123 = v139;
    Future.finish(result:)(v139);
    v57(v123, v18);
  }
  else
  {
    if (v33 != enum case for LegacyResult.failure<A>(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v29, v29);
      __break(1u);
      return result;
    }
    v59 = (*(uint64_t (**)(uint64_t *, uint64_t))(v30 + 96))(v32, v29);
    v60 = *v32;
    v61 = static os_log_type_t.error.getter(v59);
    v62 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v63 = swift_allocObject(v62, 72, 7);
    *(_OWORD *)(v63 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v60, v151, v150);
    v64 = Error.localizedDescription.getter(v150[1], v150[2]);
    v66 = v65;
    *(_QWORD *)(v63 + 56) = &type metadata for String;
    *(_QWORD *)(v63 + 64) = sub_10001AA00();
    *(_QWORD *)(v63 + 32) = v64;
    *(_QWORD *)(v63 + 40) = v66;
    v67 = sub_100253E58();
    v68 = (void *)static OS_os_log.default.getter(v67);
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v68, a6, a7, 2, v63);
    swift_bridgeObjectRelease();

    Future.finish(error:)(v60);
    swift_errorRelease(v60);
  }
  v124 = v148 + 16;
  swift_beginAccess(v148 + 16, v154, 0, 0);
  result = swift_weakLoadStrong(v124);
  if (result)
  {
    v126 = result;
    v127 = *(void **)(result + qword_1010F7CE0);
    objc_msgSend(v127, "lock");
    *(_BYTE *)(v126 + qword_1010F7CE8) = 1;
    objc_msgSend(v127, "unlock");
    v128 = type metadata accessor for TaskPriority(0);
    v129 = (uint64_t)v140;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v140, 1, 1, v128);
    v130 = swift_allocObject(&unk_10106D0F8, 24, 7);
    swift_weakInit(v130 + 16, v126);
    v131 = (_QWORD *)swift_allocObject(v141, 40, 7);
    v131[2] = 0;
    v131[3] = 0;
    v131[4] = v130;
    sub_100691C0C(v129, a9, (uint64_t)v131);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10033C338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v4 = sub_100C1ADC8(v12[0]);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
    return sub_100030784(a1, a2);
  sub_100030784(a1, (uint64_t)v12);
  v5 = v13;
  v6 = v14;
  sub_10001AA44(v12, v13);
  v7 = dispatch thunk of FMNRequestContentRepresentable.headerDictionary.getter(v5, v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD000000000000018, 0x8000000100ED1B90, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v9 = v13;
  v10 = v14;
  sub_10009F5D0((uint64_t)v12, v13);
  dispatch thunk of FMNRequestContentRepresentable.headerDictionary.setter(v7, v9, v10);
  sub_100030784((uint64_t)v12, a2);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_10033C494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch(sub_10033C4AC, 0, 0);
}

uint64_t sub_10033C4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(Strong + qword_1010F7CD8);
  *(_QWORD *)(v0 + 56) = v3;
  swift_unownedRetainStrong(v3);
  return swift_task_switch(sub_10033C538, v3, 0);
}

uint64_t sub_10033C538()
{
  uint64_t v0;

  sub_100337B90(*(_QWORD *)(v0 + 48));
  swift_release();
  return swift_task_switch(sub_1000BB7E4, 0, 0);
}

uint64_t sub_10033C57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch(sub_10033C594, 0, 0);
}

uint64_t sub_10033C594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
  {
    v3 = *(_QWORD *)(Strong + qword_1010F7CD8);
    *(_QWORD *)(v0 + 64) = v3;
    swift_unownedRetainStrong(v3);
    swift_release();
    return swift_task_switch(sub_10033C638, v3, 0);
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10033C638()
{
  sub_100337E30();
  swift_release();
  return swift_task_switch(sub_10033C67C, 0, 0);
}

uint64_t sub_10033C67C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10033C698()
{
  _swift_stdlib_reportUnimplementedInitializer("searchpartyd.ServerInteractionController", 40, "init(authenticationProvider:mockingPreferences:urlSessionFactory:)", 66, 0);
  __break(1u);
}

uint64_t sub_10033C6C4()
{
  return type metadata accessor for ServerInteractionController(0);
}

uint64_t type metadata accessor for SearchPartyURLSessionFactory(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F7D48, (uint64_t)&nominal type descriptor for SearchPartyURLSessionFactory);
}

uint64_t sub_10033C6E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033C740(a1, a2, a3, qword_1011B6D90);
}

void sub_10033C6EC()
{
  _swift_stdlib_reportUnimplementedInitializer("searchpartyd.SearchPartyURLSessionFactory", 41, "init(mockSessionCreationBlock:preferences:)", 43, 0);
  __break(1u);
}

uint64_t sub_10033C718()
{
  return type metadata accessor for SearchPartyURLSessionFactory(0);
}

uint64_t type metadata accessor for FindMyAppURLSessionFactory(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F7D98, (uint64_t)&nominal type descriptor for FindMyAppURLSessionFactory);
}

uint64_t sub_10033C734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10033C740(a1, a2, a3, qword_1011B6DA0);
}

uint64_t sub_10033C740(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE v5[8];

  return swift_initClassMetadata2(a1, 0, 0, v5, a1 + *a4);
}

uint64_t sub_10033C778(void *a1, uint64_t a2)
{
  NSString v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t);

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:", v4);

  v5 = type metadata accessor for SearchPartyURLSessionFactory(0);
  v6 = (uint64_t (*)(void *, uint64_t))method lookup function for FMNURLSessionFactory(v5, &method descriptor for FMNURLSessionFactory.session(_:_:));
  return v6(a1, a2);
}

uint64_t sub_10033C814()
{
  uint64_t v0;

  v0 = FMNURLSessionFactory.deinit();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_10033C830()
{
  return type metadata accessor for FindMyAppURLSessionFactory(0);
}

uint64_t sub_10033C838()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033C860(uint64_t a1)
{
  uint64_t *v1;

  return sub_10033B780(a1, v1[2], (uint64_t)(v1 + 3), v1[8], v1[9], "ServerInteractionController: Error calling server on Retry: %@", 62, (uint64_t)&unk_10106D1E8, (uint64_t)&unk_1010F7E20);
}

uint64_t sub_10033C8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[5];

  v10 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v39 - v18;
  v42[3] = a4;
  v42[4] = a5;
  v20 = sub_100018F08(v42);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v20, a1, a4);
  v21 = qword_1010F7CC8;
  v22 = type metadata accessor for FMNAuthenticationProvider(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = swift_retain();
  *(_QWORD *)(a3 + v21) = FMNAuthenticationProvider.init()(v23);
  v24 = qword_1010F7CD8;
  if (qword_1010E9B70 != -1)
    swift_once(&qword_1010E9B70, sub_100337B4C);
  *(_QWORD *)(a3 + v24) = qword_1011B6D70;
  v25 = swift_unownedRetain();
  UUID.init()(v25);
  v26 = qword_1010F7CE0;
  v27 = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  *(_QWORD *)(a3 + v26) = v27;
  *(_BYTE *)(a3 + qword_1010F7CE8) = 0;
  static SystemInfo.lockState.getter(v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  v28 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v41, v13, v28);
  dispatch thunk of RawRepresentable.rawValue.getter(&v40, v13, v28);
  v30 = v40;
  v29 = v41;
  v31 = *(void (**)(char *, uint64_t))(v14 + 8);
  v31(v17, v13);
  v31(v19, v13);
  if (v29 == v30)
  {
    v32 = sub_100253E58();
    v33 = (void *)static OS_os_log.default.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    os_log(_:dso:log:type:_:)("ServerInteractionController preventing auto-renew credentials before first unlock.", 82, 2, &_mh_execute_header, v33, v34, _swiftEmptyArrayStorage);

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter(0);
    swift_release();
  }
  sub_100030784((uint64_t)v42, a3 + qword_1010F7CD0);
  swift_release();
  v35 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v12, 1, 1, v35);
  v36 = swift_retain();
  v37 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)(v36, &protocol witness table for FMNAuthenticationProvider, v12, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return v37;
}

uint64_t sub_10033CBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ServerInteractionController(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return sub_10033C8A8((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t sub_10033CC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    a2 += qword_1011B6D78;
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_12;
LABEL_9:
      v9 = static UUID.== infix(_:_:)(v7 + qword_1011B6D78, a2);
      swift_release(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(a1 + 8 * v5);
    swift_retain(v7);
    v8 = v5 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_9;
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
  v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9 & 1;
}

void sub_10033CD94(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned __int8 v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  char v27;
  char v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[3];

  if (!*(_QWORD *)(a1 + 16)
    || (v2 = sub_100518DA0(0xD00000000000001FLL, 0x8000000100ED1970), (v3 & 1) == 0)
    || ((v4 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v2),
         v5 = *v4,
         v6 = v4[1],
         v7 = HIBYTE(v6) & 0xF,
         v8 = *v4 & 0xFFFFFFFFFFFFLL,
         (v6 & 0x2000000000000000) != 0)
      ? (v9 = HIBYTE(v6) & 0xF)
      : (v9 = *v4 & 0xFFFFFFFFFFFFLL),
        !v9))
  {
LABEL_61:
    v29 = sub_100253E58();
    v30 = (void *)static OS_os_log.default.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:type:_:)("ServerInteractionController did not find serial-number header.", 62, 2, &_mh_execute_header, v30, v31, _swiftEmptyArrayStorage);

    return;
  }
  if ((v6 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v4[1]);
    v13 = sub_100C71800(v5, v6, 10);
    v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
      goto LABEL_40;
    goto LABEL_61;
  }
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0)
      v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(*v4, v4[1]);
    v11 = sub_100C71610(v10, v8, 10);
    if ((v12 & 1) == 0)
    {
      v13 = (uint64_t)v11;
LABEL_40:
      sub_100710308(v13);
      return;
    }
    goto LABEL_61;
  }
  v32[0] = *v4;
  v32[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v5 == 43)
  {
    if (v7)
    {
      if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        v13 = (BYTE1(v5) - 48);
        if (v7 == 2)
          goto LABEL_38;
        if ((BYTE2(v5) - 48) <= 9u)
        {
          v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
          v15 = v7 - 3;
          if (v15)
          {
            v16 = (unsigned __int8 *)v32 + 3;
            while (1)
            {
              v17 = *v16 - 48;
              if (v17 > 9)
                goto LABEL_35;
              if (!is_mul_ok(v13, 0xAuLL))
                goto LABEL_35;
              v18 = __CFADD__(10 * v13, v17);
              v13 = 10 * v13 + v17;
              if (v18)
                goto LABEL_35;
              v14 = 0;
              ++v16;
              if (!--v15)
                goto LABEL_39;
            }
          }
          goto LABEL_38;
        }
      }
      goto LABEL_35;
    }
  }
  else
  {
    if (v5 != 45)
    {
      if (v7 && (v5 - 48) <= 9u)
      {
        v13 = (v5 - 48);
        if (v7 == 1)
          goto LABEL_38;
        if ((BYTE1(v5) - 48) <= 9u)
        {
          v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
          v19 = v7 - 2;
          if (v19)
          {
            v20 = (unsigned __int8 *)v32 + 2;
            while (1)
            {
              v21 = *v20 - 48;
              if (v21 > 9)
                goto LABEL_35;
              if (!is_mul_ok(v13, 0xAuLL))
                goto LABEL_35;
              v18 = __CFADD__(10 * v13, v21);
              v13 = 10 * v13 + v21;
              if (v18)
                goto LABEL_35;
              v14 = 0;
              ++v20;
              if (!--v19)
                goto LABEL_39;
            }
          }
          goto LABEL_38;
        }
      }
LABEL_35:
      v13 = 0;
      goto LABEL_36;
    }
    if (v7)
    {
      if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        v13 = 0;
        if (BYTE1(v5) != 48)
        {
LABEL_36:
          v14 = 1;
          goto LABEL_39;
        }
        if (v7 == 2)
        {
          v14 = 0;
          v13 = -(uint64_t)(BYTE1(v5) - 48);
          goto LABEL_39;
        }
        v22 = BYTE2(v5) - 48;
        if ((BYTE2(v5) - 48) <= 9u && is_mul_ok(-(uint64_t)(BYTE1(v5) - 48), 0xAuLL))
        {
          v23 = -10 * (BYTE1(v5) - 48);
          v13 = v23 - v22;
          if (v23 >= v22)
          {
            v24 = v7 - 3;
            if (v24)
            {
              v25 = (unsigned __int8 *)v32 + 3;
              while (1)
              {
                v26 = *v25 - 48;
                if (v26 > 9)
                  goto LABEL_35;
                if (!is_mul_ok(v13, 0xAuLL))
                  goto LABEL_35;
                v18 = 10 * v13 >= (unint64_t)v26;
                v13 = 10 * v13 - v26;
                if (!v18)
                  goto LABEL_35;
                v14 = 0;
                ++v25;
                if (!--v24)
                  goto LABEL_39;
              }
            }
LABEL_38:
            v14 = 0;
LABEL_39:
            if ((v14 & 1) == 0)
              goto LABEL_40;
            goto LABEL_61;
          }
        }
      }
      goto LABEL_35;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10033D100(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F7DFC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch(sub_10033C594, 0, 0);
}

uint64_t sub_10033D168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F7DFC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch(sub_10033C594, 0, 0);
}

uint64_t sub_10033D1D0()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10033D204(uint64_t a1)
{
  uint64_t *v1;

  return sub_10033B780(a1, v1[2], (uint64_t)(v1 + 3), v1[8], v1[9], "ServerInteractionController Error calling server on Retry: %@", 61, (uint64_t)&unk_10106D1C0, (uint64_t)&unk_1010F7E10);
}

uint64_t sub_10033D258(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F7E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033D2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F7E2C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[5] = v2;
  return swift_task_switch(sub_10033C4AC, 0, 0);
}

uint64_t sub_10033D308(uint64_t a1)
{
  uint64_t *v1;

  return sub_100338CF8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10033D314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1010F7E50);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));
  swift_release();
  return swift_deallocObject(v0, ((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10033D3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_10001A9A8(&qword_1010F7E50) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10033945C(a1, v1 + v4, v1 + v5, *(_QWORD *)(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8)));
}

void sub_10033D420(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t found;
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  _QWORD v70[2];
  id v71;

  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v64 - v8;
  v69 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v69 - 8);
  v11 = __chkstk_darwin(v69);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v68 = (char *)&v64 - v15;
  v16 = CKRecord.recordType.getter(v14);
  if (v16 == 0xD000000000000015 && v17 == 0x8000000100E372D0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000015, 0x8000000100E372D0, 0);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      v54 = sub_10033E6F8();
      v27 = swift_allocError(&type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError, v54, 0, 0);
      *v55 = 0;
      goto LABEL_13;
    }
  }
  v67 = a2;
  v19 = objc_msgSend(a1, "recordID");
  v20 = objc_msgSend(v19, "recordName");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  UUID.init(uuidString:)(v21, v23);
  swift_bridgeObjectRelease();
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v25 = v69;
  if (v24(v9, 1, v69) == 1)
  {
    sub_1001C0844((uint64_t)v9);
    v26 = sub_10033E6F8();
    v27 = swift_allocError(&type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError, v26, 0, 0);
    *v28 = 1;
LABEL_13:
    swift_willThrow(v27);

    return;
  }
  v29 = v9;
  v30 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v30(v68, v29, v25);
  v31 = objc_msgSend(a1, "encryptedValues");
  v32 = String._bridgeToObjectiveC()();
  v66 = v31;
  v33 = objc_msgSend(v31, "objectForKeyedSubscript:", v32);

  if (v33
    && (v71 = v33,
        v35 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        v34 = swift_dynamicCast(v70, &v71, v35, &type metadata for String, 6),
        (v34 & 1) != 0))
  {
    UUID.init(uuidString:)(v70[0], v70[1]);
    swift_bridgeObjectRelease();
    v36 = v69;
    if (v24(v7, 1, v69) == 1)
    {
      v37 = sub_1001C0844((uint64_t)v7);
      v38 = static os_log_type_t.error.getter(v37);
      v39 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v40 = swift_allocObject(v39, 72, 7);
      *(_OWORD *)(v40 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v40 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
      *(_QWORD *)(v40 + 64) = sub_100088600();
      *(_QWORD *)(v40 + 32) = a1;
      sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v41 = a1;
      v42 = (void *)static OS_os_log.default.getter(v41);
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v42, "beaconIdentifier is not a valid UUID - %@", 41, 2, v40);
      swift_bridgeObjectRelease();

      v43 = sub_10033E6F8();
      v44 = swift_allocError(&type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError, v43, 0, 0);
      *v45 = 2;
      swift_willThrow(v44);
      swift_unknownObjectRelease(v66);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v68, v36);
    }
    else
    {
      v30(v13, v7, v36);
      v65 = objc_autoreleasePoolPush();
      v56 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
      objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v56);
      objc_msgSend(v56, "finishEncoding");
      v57 = objc_msgSend(v56, "encodedData");
      v58 = v36;
      v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v61 = v60;

      objc_autoreleasePoolPop(v65);
      swift_unknownObjectRelease(v66);

      v62 = v67;
      *v67 = v59;
      v62[1] = v61;
      found = type metadata accessor for NotifyWhenFoundRecord(0);
      v30((char *)v62 + *(int *)(found + 20), v68, v58);
      v30((char *)v62 + *(int *)(found + 24), v13, v58);
    }
  }
  else
  {
    v46 = static os_log_type_t.error.getter(v34);
    v47 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v48 = swift_allocObject(v47, 72, 7);
    *(_OWORD *)(v48 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v48 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v48 + 64) = sub_100088600();
    *(_QWORD *)(v48 + 32) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v49 = a1;
    v50 = (void *)static OS_os_log.default.getter(v49);
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v50, "Invalid subscriptionIdentifier - %@", 35, 2, v48);
    swift_bridgeObjectRelease();

    v51 = sub_10033E6F8();
    v52 = swift_allocError(&type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError, v51, 0, 0);
    *v53 = 3;
    swift_willThrow(v52);
    swift_unknownObjectRelease(v66);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v68, v69);
  }
}

uint64_t sub_10033DA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6DB0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6DB0);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016, 0x8000000100ED1BD0, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

unint64_t sub_10033DB28()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x696669746E656469;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_10033DB88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10033EF4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033DBAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033E634();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033DBD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033E634();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10033DBFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Data.hash(into:)(v4, *v0, v0[1]);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10033DCB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  Data.hash(into:)(a1, *v1, v1[1]);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  return dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
}

Swift::Int sub_10033DD48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Data.hash(into:)(v4, *v0, v0[1]);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10033DDF8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v6 & 1) != 0 && (static UUID.== infix(_:_:)((char *)a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
    return static UUID.== infix(_:_:)((char *)a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24));
  else
    return 0;
}

uint64_t sub_10033DE6C(id *a1)
{
  id v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t found;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v1 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v1);
  CKRecordKeyValueSetting.subscript.getter(&v14, 0xD000000000000010, 0x8000000100EC28D0, ObjectType, &type metadata for String);
  v4 = v14;
  v3 = v15;
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v6 = UUID.uuidString.getter(found);
  if (!v3)
  {
    v10 = swift_bridgeObjectRelease();
LABEL_9:
    v11 = UUID.uuidString.getter(v10);
    v16 = &type metadata for String;
    v17 = &protocol witness table for String;
    v14 = v11;
    v15 = v12;
    CKRecordKeyValueSetting.subscript.setter(&v14, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
    return swift_unknownObjectRelease(v1);
  }
  if (v4 != v6 || v3 != v7)
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v6, v7, 0);
    swift_bridgeObjectRelease();
    v10 = swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      return swift_unknownObjectRelease(v1);
    goto LABEL_9;
  }
  swift_unknownObjectRelease(v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10033DFC8(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t found;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F7E88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10033E634();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotifyWhenFoundRecord.CodingKeys, &type metadata for NotifyWhenFoundRecord.CodingKeys, v11, v9, v10);
  v19 = *v3;
  v20 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v5, &type metadata for Data, v12);
  if (!v2)
  {
    found = type metadata accessor for NotifyWhenFoundRecord(0);
    v14 = (char *)v3 + *(int *)(found + 20);
    LOBYTE(v19) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
    v17 = (char *)v3 + *(int *)(found + 24);
    LOBYTE(v19) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10033E178@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t found;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD v31[2];
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  char v41;

  v33 = a2;
  v3 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)v31 - v7;
  v36 = sub_10001A9A8(&qword_1010F7E78);
  v9 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  __chkstk_darwin(found);
  v14 = (_OWORD *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = a1[3];
  v16 = a1[4];
  v38 = a1;
  sub_10001AA44(a1, v15);
  v17 = sub_10033E634();
  v37 = v11;
  v18 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotifyWhenFoundRecord.CodingKeys, &type metadata for NotifyWhenFoundRecord.CodingKeys, v17, v15, v16);
  if (v18)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  v19 = v9;
  v39 = found;
  v32 = v6;
  v20 = v35;
  v41 = 0;
  v21 = sub_100036994();
  v22 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for Data, &v41, v36, &type metadata for Data, v21);
  v23 = (uint64_t)v14;
  *v14 = v40;
  LOBYTE(v40) = 1;
  v24 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v25 = v8;
  v26 = v8;
  v27 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v20, &v40, v22, v20, v24);
  v28 = v23 + *(int *)(v39 + 20);
  v31[0] = *(_QWORD *)(v34 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v31[0])(v28, v25, v20);
  LOBYTE(v40) = 2;
  v29 = v32;
  v31[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v20, &v40, v22, v20, v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v37, v22);
  ((void (*)(uint64_t, _QWORD *, uint64_t))v31[0])(v23 + *(int *)(v39 + 24), v29, v20);
  sub_10033E678(v23, v33);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return sub_10033E6BC(v23);
}

uint64_t sub_10033E4AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1010E9B78 != -1)
    swift_once(&qword_1010E9B78, sub_10033DA58);
  v0 = type metadata accessor for URL(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6DB0);
  v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10033E538@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10033E178(a1, a2);
}

uint64_t sub_10033E54C(_QWORD *a1)
{
  return sub_10033DFC8(a1);
}

uint64_t sub_10033E560(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1010F7E60, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_100E3728C);
  result = sub_100006204(&qword_1010F7E68, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_100E37264);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for NotifyWhenFoundRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F7F00;
  if (!qword_1010F7F00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyWhenFoundRecord);
  return result;
}

uint64_t sub_10033E5F8(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010F7E70, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_100E372B4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10033E634()
{
  unint64_t result;

  result = qword_1010F7E80;
  if (!qword_1010F7E80)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7E80);
  }
  return result;
}

uint64_t sub_10033E678(uint64_t a1, uint64_t a2)
{
  uint64_t found;

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(found - 8) + 16))(a2, a1, found);
  return a2;
}

uint64_t sub_10033E6BC(uint64_t a1)
{
  uint64_t found;

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(found - 8) + 8))(a1, found);
  return a1;
}

unint64_t sub_10033E6F8()
{
  unint64_t result;

  result = qword_1010F7E98;
  if (!qword_1010F7E98)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7E98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10033E788 + 4 * byte_100E37255[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10033E7BC + 4 * byte_100E37250[v4]))();
}

uint64_t sub_10033E7BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10033E7C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10033E7CCLL);
  return result;
}

uint64_t sub_10033E7D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10033E7E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10033E7E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10033E7EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError()
{
  return &type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError;
}

uint64_t storeEnumTagSinglePayload for NotifyWhenFoundRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10033E854 + 4 * byte_100E3725F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10033E888 + 4 * byte_100E3725A[v4]))();
}

uint64_t sub_10033E888(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10033E890(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10033E898);
  return result;
}

uint64_t sub_10033E8A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10033E8ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10033E8B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10033E8B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundRecord.CodingKeys()
{
  return &type metadata for NotifyWhenFoundRecord.CodingKeys;
}

uint64_t *sub_10033E8D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v12);
  }
  return a1;
}

uint64_t sub_10033E998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 24), v5);
}

uint64_t *sub_10033EA14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v11);
  return a1;
}

uint64_t *sub_10033EAAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v13);
  return a1;
}

char *sub_10033EB4C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

uint64_t *sub_10033EBD8(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + *(int *)(a3 + 24), &a2[*(int *)(a3 + 24)], v11);
  return a1;
}

uint64_t sub_10033EC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033EC7C);
}

uint64_t sub_10033EC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10033ED04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033ED10);
}

char *sub_10033ED10(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10033ED8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = &unk_100E37340;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 3, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10033EE00()
{
  return sub_100006204(&qword_1010F7F40, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_100E37358);
}

unint64_t sub_10033EE30()
{
  unint64_t result;

  result = qword_1010F7F48;
  if (!qword_1010F7F48)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7F48);
  }
  return result;
}

unint64_t sub_10033EE78()
{
  unint64_t result;

  result = qword_1010F7F50;
  if (!qword_1010F7F50)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7F50);
  }
  return result;
}

unint64_t sub_10033EEC0()
{
  unint64_t result;

  result = qword_1010F7F58;
  if (!qword_1010F7F58)
  {
    result = swift_getWitnessTable("9a#", &type metadata for NotifyWhenFoundRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7F58);
  }
  return result;
}

unint64_t sub_10033EF08()
{
  unint64_t result;

  result = qword_1010F7F60;
  if (!qword_1010F7F60)
  {
    result = swift_getWitnessTable("!a#", &type metadata for NotifyWhenFoundRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7F60);
  }
  return result;
}

uint64_t sub_10033EF4C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100EC28D0)
  {
    swift_bridgeObjectRelease(0x8000000100EC28D0);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_10033F0A8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F0D4(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 174)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F13C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F168(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 65)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F1CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F1F8(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 57)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F260(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F28C(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 28)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F2F4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F320(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 72)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F384(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F3B0(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 16)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F414(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F440(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 6)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F4A4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F4D0(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 12)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F534(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F560(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 113)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F5C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10033F64C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10033F6D4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10033F760(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F78C(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 100)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F7F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F81C(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 89)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F880(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F8AC(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 60)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F910(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F93C(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 114)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033F9A0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033F9CC(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 85)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void sub_10033FA30(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10033FA5C(uint64_t result, unint64_t a2)
{
  uint64_t *v2;

  if (BYTE6(a2) != 32)
  {
    sub_10001BC14(result, a2);
    result = 0;
    a2 = 0xF000000000000000;
  }
  *v2 = result;
  v2[1] = a2;
  return result;
}

void *SharingCircleWildAdvertisementKey.length.unsafeMutableAddressor()
{
  return &static SharingCircleWildAdvertisementKey.length;
}

uint64_t sub_10033FACC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033FC20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033FAF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033FC20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharingCircleWildAdvertisementKey.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_10001A9A8(&qword_1010F7F68);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_10033FC20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingCircleWildAdvertisementKey.CodingKeys, &type metadata for SharingCircleWildAdvertisementKey.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_1002FC00C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for KeyRepresentableInternal, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_10033FC20()
{
  unint64_t result;

  result = qword_1010F7F70;
  if (!qword_1010F7F70)
  {
    result = swift_getWitnessTable("m_#", &type metadata for SharingCircleWildAdvertisementKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7F70);
  }
  return result;
}

_QWORD *SharingCircleWildAdvertisementKey.init(from:)(_QWORD *a1)
{
  return sub_100340040(a1);
}

_QWORD *sub_10033FC78@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_100340040(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10033FCA0(_QWORD *a1)
{
  uint64_t *v1;

  return SharingCircleWildAdvertisementKey.encode(to:)(a1, *v1, v1[1]);
}

void sub_10033FCB8(uint64_t *a1)
{
  sub_10033FA30(*a1, a1[1]);
}

uint64_t sub_10033FCD4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10033FD00 + 4 * byte_100E37570[*v0]))(0x7865646E69, 0xE500000000000000);
}

uint64_t sub_10033FD00()
{
  return 0x654B63696C627570;
}

uint64_t sub_10033FD1C()
{
  return 0x4B65746176697270;
}

uint64_t sub_10033FD38()
{
  return 0x6553646572616873;
}

uint64_t sub_10033FD58()
{
  return 0x64656D7265746E69;
}

uint64_t sub_10033FD7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003401A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033FDA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100340164();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033FDC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100340164();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharingCircleWildDiversifiedKey.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F7F78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100340164();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharingCircleWildDiversifiedKey.CodingKeys, &type metadata for SharingCircleWildDiversifiedKey.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v20, v5);
  if (!v2)
  {
    v20 = *(_OWORD *)(v3 + 1);
    v19 = 1;
    v13 = sub_1002FD29C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for PublicKey, v13);
    v20 = *(_OWORD *)(v3 + 3);
    v19 = 2;
    v14 = sub_100068134();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for PrivateKey, v14);
    v20 = *(_OWORD *)(v3 + 5);
    v19 = 3;
    v15 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for SharedSecretKey, v15);
    v20 = *(_OWORD *)(v3 + 7);
    v19 = 4;
    v16 = sub_1002FDD74();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for IntermediateKey, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 SharingCircleWildDiversifiedKey.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_100340410(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10034002C(_QWORD *a1)
{
  return SharingCircleWildDiversifiedKey.encode(to:)(a1);
}

_QWORD *sub_100340040(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_10001A9A8(&qword_1010F7FF0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_10033FC20();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingCircleWildAdvertisementKey.CodingKeys, &type metadata for SharingCircleWildAdvertisementKey.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_100301E24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for KeyRepresentableInternal, v12, v3, &type metadata for KeyRepresentableInternal, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_100340164()
{
  unint64_t result;

  result = qword_1010F7F80;
  if (!qword_1010F7F80)
  {
    result = swift_getWitnessTable(byte_100E378EC, &type metadata for SharingCircleWildDiversifiedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7F80);
  }
  return result;
}

uint64_t sub_1003401A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079)
  {
    v7 = 0xE900000000000079;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    v8 = 0xEA00000000007965;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    v9 = 0xEC00000074657263;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x64656D7265746E69 && a2 == 0xEF79654B65746169)
  {
    swift_bridgeObjectRelease(0xEF79654B65746169);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x64656D7265746E69, 0xEF79654B65746169, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100340410@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;

  v5 = sub_10001A9A8(&qword_1010F7FE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100340164();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SharingCircleWildDiversifiedKey.CodingKeys, &type metadata for SharingCircleWildDiversifiedKey.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  LOBYTE(v44) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
  v46 = 1;
  v13 = sub_1002FD258();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for PublicKey, &v46, v5, &type metadata for PublicKey, v13);
  v43 = v12;
  v14 = v44;
  v15 = v45;
  v46 = 2;
  sub_10001BBBC(v44, v45);
  v16 = sub_10007CB0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for PrivateKey, &v46, v5, &type metadata for PrivateKey, v16);
  v41 = v14;
  v42 = v15;
  v46 = 3;
  v17 = v44;
  v18 = v45;
  sub_10001BBBC(v44, v45);
  v19 = sub_1001EC3A8();
  v40 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for SharedSecretKey, &v46, v5, &type metadata for SharedSecretKey, v19);
  v39 = v17;
  v40 = v18;
  v46 = 4;
  v37 = v45;
  v38 = v44;
  sub_10001BBBC(v44, v45);
  v20 = sub_1002FDD30();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for IntermediateKey, &v46, v5, &type metadata for IntermediateKey, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v44;
  v21 = v45;
  v35 = v45;
  v36 = v44;
  sub_10001BBBC(v41, v42);
  v23 = v39;
  v24 = v40;
  sub_10001BBBC(v39, v40);
  v26 = v37;
  v25 = v38;
  sub_10001BBBC(v38, v37);
  sub_10001BBBC(v22, v21);
  v27 = v25;
  sub_10001BC14(v25, v26);
  sub_10001BC14(v23, v24);
  v29 = v41;
  v28 = v42;
  sub_10001BC14(v41, v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001BC14(v29, v28);
  sub_10001BC14(v23, v24);
  v30 = v27;
  sub_10001BC14(v27, v26);
  v32 = v35;
  v31 = v36;
  result = sub_10001BC14(v36, v35);
  *a2 = v43;
  a2[1] = v29;
  a2[2] = v42;
  a2[3] = v23;
  a2[4] = v24;
  a2[5] = v30;
  a2[6] = v26;
  a2[7] = v31;
  a2[8] = v32;
  return result;
}

unint64_t sub_100340800(uint64_t a1)
{
  unint64_t result;

  result = sub_100340824();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100340824()
{
  unint64_t result;

  result = qword_1010F7F88;
  if (!qword_1010F7F88)
  {
    result = swift_getWitnessTable("Ub#", &type metadata for SharingCircleWildAdvertisementKey);
    atomic_store(result, (unint64_t *)&qword_1010F7F88);
  }
  return result;
}

unint64_t sub_100340868(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1003408A4();
  a1[2] = sub_1003408E8();
  a1[3] = sub_10034092C();
  result = sub_100340970();
  a1[4] = result;
  return result;
}

unint64_t sub_1003408A4()
{
  unint64_t result;

  result = qword_1010F7F90;
  if (!qword_1010F7F90)
  {
    result = swift_getWitnessTable("Ab#", &type metadata for SharingCircleWildAdvertisementKey);
    atomic_store(result, (unint64_t *)&qword_1010F7F90);
  }
  return result;
}

unint64_t sub_1003408E8()
{
  unint64_t result;

  result = qword_1010F7F98;
  if (!qword_1010F7F98)
  {
    result = swift_getWitnessTable(")b#", &type metadata for SharingCircleWildAdvertisementKey);
    atomic_store(result, (unint64_t *)&qword_1010F7F98);
  }
  return result;
}

unint64_t sub_10034092C()
{
  unint64_t result;

  result = qword_1010F7FA0;
  if (!qword_1010F7FA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharingCircleWildAdvertisementKey, &type metadata for SharingCircleWildAdvertisementKey);
    atomic_store(result, (unint64_t *)&qword_1010F7FA0);
  }
  return result;
}

unint64_t sub_100340970()
{
  unint64_t result;

  result = qword_1010F7FA8;
  if (!qword_1010F7FA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharingCircleWildAdvertisementKey, &type metadata for SharingCircleWildAdvertisementKey);
    atomic_store(result, (unint64_t *)&qword_1010F7FA8);
  }
  return result;
}

unint64_t sub_1003409B8()
{
  unint64_t result;

  result = qword_1010F7FB0;
  if (!qword_1010F7FB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharingCircleWildAdvertisementKey, &type metadata for SharingCircleWildAdvertisementKey);
    atomic_store(result, (unint64_t *)&qword_1010F7FB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildAdvertisementKey()
{
  return &type metadata for SharingCircleWildAdvertisementKey;
}

uint64_t destroy for SharingCircleWildDiversifiedKey(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_10001BC14(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_10001BC14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return sub_10001BC14(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

_QWORD *initializeWithCopy for SharingCircleWildDiversifiedKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  sub_10001BBBC(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = a2[3];
  v7 = a2[4];
  sub_10001BBBC(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  v8 = a2[5];
  v9 = a2[6];
  sub_10001BBBC(v8, v9);
  a1[5] = v8;
  a1[6] = v9;
  v11 = a2[7];
  v10 = a2[8];
  sub_10001BBBC(v11, v10);
  a1[7] = v11;
  a1[8] = v10;
  return a1;
}

_QWORD *assignWithCopy for SharingCircleWildDiversifiedKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_10001BBBC(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[3];
  v9 = a2[4];
  sub_10001BBBC(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[5];
  v13 = a2[6];
  sub_10001BBBC(v12, v13);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001BC14(v14, v15);
  v17 = a2[7];
  v16 = a2[8];
  sub_10001BBBC(v17, v16);
  v18 = a1[7];
  v19 = a1[8];
  a1[7] = v17;
  a1[8] = v16;
  sub_10001BC14(v18, v19);
  return a1;
}

uint64_t assignWithTake for SharingCircleWildDiversifiedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v10;
  sub_10001BC14(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingCircleWildDiversifiedKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SharingCircleWildDiversifiedKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildDiversifiedKey()
{
  return &type metadata for SharingCircleWildDiversifiedKey;
}

uint64_t storeEnumTagSinglePayload for SharingCircleWildDiversifiedKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100340CF0 + 4 * byte_100E3757A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100340D24 + 4 * byte_100E37575[v4]))();
}

uint64_t sub_100340D24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340D2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100340D34);
  return result;
}

uint64_t sub_100340D40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100340D48);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100340D4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340D54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildDiversifiedKey.CodingKeys()
{
  return &type metadata for SharingCircleWildDiversifiedKey.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SharingCircleWildAdvertisementKey.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100340DB0 + 4 * byte_100E3757F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100340DD0 + 4 * byte_100E37584[v4]))();
}

_BYTE *sub_100340DB0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100340DD0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100340DD8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100340DE0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100340DE8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100340DF0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildAdvertisementKey.CodingKeys()
{
  return &type metadata for SharingCircleWildAdvertisementKey.CodingKeys;
}

unint64_t sub_100340E10()
{
  unint64_t result;

  result = qword_1010F7FB8;
  if (!qword_1010F7FB8)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7FB8);
  }
  return result;
}

unint64_t sub_100340E58()
{
  unint64_t result;

  result = qword_1010F7FC0;
  if (!qword_1010F7FC0)
  {
    result = swift_getWitnessTable(byte_100E378C4, &type metadata for SharingCircleWildDiversifiedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7FC0);
  }
  return result;
}

unint64_t sub_100340EA0()
{
  unint64_t result;

  result = qword_1010F7FC8;
  if (!qword_1010F7FC8)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7FC8);
  }
  return result;
}

unint64_t sub_100340EE8()
{
  unint64_t result;

  result = qword_1010F7FD0;
  if (!qword_1010F7FD0)
  {
    atomic_store(result, (unint64_t *)&qword_1010F7FD0);
  }
  return result;
}

unint64_t sub_100340F30()
{
  unint64_t result;

  result = qword_1010F7FD8;
  if (!qword_1010F7FD8)
  {
    result = swift_getWitnessTable("\ra#", &type metadata for SharingCircleWildAdvertisementKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7FD8);
  }
  return result;
}

unint64_t sub_100340F78()
{
  unint64_t result;

  result = qword_1010F7FE0;
  if (!qword_1010F7FE0)
  {
    result = swift_getWitnessTable(byte_100E377A4, &type metadata for SharingCircleWildAdvertisementKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F7FE0);
  }
  return result;
}

uint64_t sub_100340FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = sub_10001A9A8(&qword_1010F7FF8);
  v6[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Destination(0);
  v6[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[11] = swift_task_alloc(v10);
  v6[12] = swift_task_alloc(v10);
  return swift_task_switch(sub_100341058, 0, 0);
}

uint64_t sub_100341058()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[10];
    swift_bridgeObjectRetain(v1);
    v5 = (_QWORD *)(v4 + 48);
    v6 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v8 = v0[8];
      v7 = v0[9];
      v9 = *(v5 - 1);
      v10 = *v5;
      v11 = swift_bridgeObjectRetain(*v5);
      Destination.init(stringRepresentation:)(v9, v10, v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v8, 1, v7) == 1)
      {
        sub_100341C10(v0[8]);
      }
      else
      {
        v13 = (char *)v0[11];
        v12 = (char *)v0[12];
        v14 = v0[9];
        v15 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
        v15(v12, (char *)v0[8], v14);
        v15(v13, v12, v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
          v6 = (char *)sub_1007C86EC(0, *((_QWORD *)v6 + 2) + 1, 1, (unint64_t)v6);
        v17 = *((_QWORD *)v6 + 2);
        v16 = *((_QWORD *)v6 + 3);
        if (v17 >= v16 >> 1)
          v6 = (char *)sub_1007C86EC(v16 > 1, v17 + 1, 1, (unint64_t)v6);
        v18 = (char *)v0[11];
        v19 = v0[9];
        *((_QWORD *)v6 + 2) = v17 + 1;
        v15(&v6[((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v17], v18, v19);
      }
      v5 += 3;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = (char *)_swiftEmptyArrayStorage;
  }
  v21 = v0[6];
  v20 = v0[7];
  swift_bridgeObjectRelease();
  v22 = swift_allocObject(&unk_10106D8F0, 32, 7);
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = v20;
  v23 = async function pointer to CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)[1];
  swift_retain();
  v24 = (_QWORD *)swift_task_alloc(v23);
  v0[13] = v24;
  *v24 = v0;
  v24[1] = sub_100341240;
  return CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)(v0[2], v0[3], v0[4], v6, sub_100341C74, v22);
}

uint64_t sub_100341240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003412FC;
  else
    v3 = sub_1003412A4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003412A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003412FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100341358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  BOOL v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  BOOL v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v75 = a4;
  v7 = sub_10001A9A8(&qword_1010F7FF8);
  __chkstk_darwin(v7);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Destination(0);
  v76 = *(_QWORD *)(v10 - 8);
  v77 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v74 - v15;
  v74 = a1;
  v17 = Destination.destination.getter(v14);
  v19 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v17, v18);
  if (!v21)
  {
    if (qword_1010EA230 != -1)
      swift_once(&qword_1010EA230, sub_100B5D824);
    v46 = type metadata accessor for Logger(0);
    sub_10001A9E8(v46, (uint64_t)qword_1011B7D00);
    v48 = v76;
    v47 = v77;
    v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16);
    v50 = v74;
    v51 = v49(v16, v74, v77);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.fault.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      v79 = v55;
      *(_DWORD *)v54 = 136315138;
      v56 = sub_100006204(&qword_1010F8000, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v77, v56);
      v78 = sub_100016940(v57, v58, &v79);
      v47 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v16, v47);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to convert %s to MessageDestination!", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v16, v47);
    }

    v72 = v75;
    v73 = v50;
    return v49(v72, v73, v47);
  }
  v22 = v19;
  v23 = v20;
  v24 = v21;
  v25 = Destination.destination.getter(v19);
  v27 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v25, v26);
  if (!v29)
  {
    swift_bridgeObjectRelease();
    if (qword_1010EA230 != -1)
      swift_once(&qword_1010EA230, sub_100B5D824);
    v59 = type metadata accessor for Logger(0);
    sub_10001A9E8(v59, (uint64_t)qword_1011B7D00);
    v60 = v76;
    v47 = v77;
    v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16);
    v61 = v49(v13, a2, v77);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.fault.getter(v62);
    v64 = os_log_type_enabled(v62, v63);
    v65 = v74;
    if (v64)
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v79 = v67;
      *(_DWORD *)v66 = 136315138;
      v68 = sub_100006204(&qword_1010F8000, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v77, v68);
      v78 = sub_100016940(v69, v70, &v79);
      v47 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v66 + 4, v66 + 12);
      v65 = v74;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v47);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unable to convert %s to MessageDestination!", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v47);
    }

    v72 = v75;
    v73 = v65;
    return v49(v72, v73, v47);
  }
  a3(v22, v23, v24, v27, v28, v29);
  v31 = v30;
  v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = swift_bridgeObjectRetain(v33);
  Destination.init(stringRepresentation:)(v31, v33, v34);
  v36 = v76;
  v35 = v77;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v9, 1, v77) == 1)
  {
    sub_100341C10((uint64_t)v9);
    if (qword_1010EA230 != -1)
      swift_once(&qword_1010EA230, sub_100B5D824);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B7D00);
    swift_bridgeObjectRetain(v33);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.fault.getter(v39);
    v41 = os_log_type_enabled(v39, v40);
    v42 = v74;
    if (v41)
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v79 = v44;
      *(_DWORD *)v43 = 136315138;
      swift_bridgeObjectRetain(v33);
      v78 = sub_100016940(v31, v33, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease_n(v33, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to convert %s to Destination!", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      v45 = v44;
      v35 = v77;
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v33, 2);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, v42, v35);
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 32))(v75, v9, v35);
  }
}

void *sub_1003419D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;

  v6 = sub_10001A9A8(&qword_1010F7FF8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Destination(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_bridgeObjectRetain(a3);
  Destination.init(stringRepresentation:)(a2, a3, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100341C10((uint64_t)v8);
    v14 = type metadata accessor for GenericError(0);
    v15 = sub_100006204((unint64_t *)&qword_1010ECC40, (uint64_t (*)(uint64_t))&type metadata accessor for GenericError, (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v14, v15, 0, 0);
    v17 = v16;
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v24 = 0xD000000000000012;
    v25 = 0x8000000100ED1C50;
    swift_bridgeObjectRetain(a3);
    v18._countAndFlagsBits = a2;
    v18._object = a3;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x8000000100ED1C70;
    v19._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v19);
    v20 = v25;
    *v17 = v24;
    v17[1] = v20;
    v21 = (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v17, enum case for GenericError.error(_:), v14);
    swift_willThrow(v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v22 = CorrelationIdentifierMap.correlationIdentifier(for:)(v12);
    if (!v3)
      a3 = (void *)v22;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return a3;
}

uint64_t sub_100341C10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F7FF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100341C50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100341C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;

  return sub_100341358(a1, a2, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16), a3);
}

uint64_t sub_100341C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100341C98);
}

uint64_t sub_100341C98(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100341D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100341D20);
}

char *sub_100341D20(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsUnpairEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F8068;
  if (!qword_1010F8068)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsUnpairEndPoint);
  return result;
}

uint64_t *sub_100341DD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v9 = a1;
      v10 = a3;
      v11 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = a2[2];
      a1[1] = a2[1];
      a1[2] = v8;
      swift_bridgeObjectRetain(v8);
      v9 = a1;
      v10 = a3;
      v11 = 1;
    }
    else
    {
      v14 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
      v9 = a1;
      v10 = a3;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100341ECC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
LABEL_4:
    v4 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100341F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    v8 = a1;
    v9 = a3;
    v10 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v7;
    swift_bridgeObjectRetain(v7);
    v8 = a1;
    v9 = a3;
    v10 = 1;
  }
  else
  {
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
    v8 = a1;
    v9 = a3;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

uint64_t sub_100342004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_1003420EC(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v8 = a1;
      v9 = a3;
      v10 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1003420EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeaconSharingSessionContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BeaconSharingSessionContext(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F8110;
  if (!qword_1010F8110)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconSharingSessionContext);
  return result;
}

void *sub_100342164(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100342228(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1003420EC((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1003422FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E37A10;
    v4[2] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10034236C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  char *v48;

  v41 = a2;
  v40 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v40 - 8);
  v4 = __chkstk_darwin(v40);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  v9 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = v48;
  dispatch thunk of Decoder.unkeyedContainer()(v45, v12, v13);
  if (!v14)
  {
    v48 = v6;
    v38 = v11;
    v39 = v8;
    v37 = v3;
    v15 = v41;
    v16 = v46;
    v17 = v47;
    sub_10009F5D0((uint64_t)v45, v46);
    v18 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v16, v17);
    if (v18 == 2)
    {
      v26 = v46;
      v27 = v47;
      sub_10009F5D0((uint64_t)v45, v46);
      v28 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v40, v40, v28, v26, v27);
      v24 = (uint64_t)v38;
      (*(void (**)(_BYTE *, char *, uint64_t))(v37 + 32))(v38, v48, v40);
      v25 = 2;
      goto LABEL_14;
    }
    v20 = v40;
    if (v18 == 1)
    {
      v29 = v46;
      v30 = v47;
      sub_10009F5D0((uint64_t)v45, v46);
      v31 = sub_1000A8368();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for MessagingDestination, &type metadata for MessagingDestination, v31, v29, v30);
      v32 = v43;
      v33 = v44;
      v24 = (uint64_t)v38;
      *v38 = v42;
      *(_QWORD *)(v24 + 8) = v32;
      *(_QWORD *)(v24 + 16) = v33;
      v25 = 1;
      goto LABEL_14;
    }
    if (!v18)
    {
      v21 = v46;
      v22 = v47;
      sub_10009F5D0((uint64_t)v45, v46);
      v23 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v20, v20, v23, v21, v22);
      v24 = (uint64_t)v38;
      (*(void (**)(_BYTE *, char *, uint64_t))(v37 + 32))(v38, v39, v40);
      v25 = 0;
LABEL_14:
      swift_storeEnumTagMultiPayload(v24, v9, v25);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
      sub_100342F04(v24, v15);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    }
    v34 = sub_100342EC0();
    v35 = swift_allocError(&type metadata for BeaconSharingSessionContext.Error, v34, 0, 0);
    swift_willThrow(v35);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100342688(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v43 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v43 - 8);
  v5 = __chkstk_darwin(v43);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  dispatch thunk of Encoder.unkeyedContainer()(v47, v14, v13);
  sub_100342E7C(v2, (uint64_t)v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if (!EnumCaseMultiPayload)
  {
    v25 = v4;
    v26 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v27 = v43;
    v26(v9, v12, v43);
    v28 = v48;
    v29 = v49;
    sub_10009F5D0((uint64_t)v47, v48);
    v30 = v50;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(2, v28, v29);
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v27);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
    }
    v31 = v48;
    v32 = v49;
    sub_10009F5D0((uint64_t)v47, v48);
    v33 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v9, v27, v33, v31, v32);
    v7 = v9;
LABEL_12:
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v27);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
  }
  if (EnumCaseMultiPayload != 1)
  {
    v25 = v4;
    v34 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v27 = v43;
    v34(v7, v12, v43);
    v35 = v48;
    v36 = v49;
    sub_10009F5D0((uint64_t)v47, v48);
    v37 = v50;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(2, v35, v36);
    if (!v37)
    {
      v38 = v48;
      v39 = v49;
      sub_10009F5D0((uint64_t)v47, v48);
      v40 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v7, v27, v40, v38, v39);
    }
    goto LABEL_12;
  }
  v16 = *v12;
  v18 = *((_QWORD *)v12 + 1);
  v17 = *((_QWORD *)v12 + 2);
  v19 = v48;
  v20 = v49;
  sub_10009F5D0((uint64_t)v47, v48);
  v21 = v50;
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(1, v19, v20);
  if (!v21)
  {
    v44[0] = v16;
    v45 = v18;
    v46 = v17;
    v22 = v48;
    v23 = v49;
    sub_10009F5D0((uint64_t)v47, v48);
    v24 = sub_1000A82E0();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v44, &type metadata for MessagingDestination, v24, v22, v23);
  }
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
}

uint64_t sub_1003429A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int EnumCaseMultiPayload;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v8);
  v10 = (unsigned __int8 *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100342E7C(v2, (uint64_t)v10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v12 = *v10;
      v13 = *((_QWORD *)v10 + 1);
      v14 = *((_QWORD *)v10 + 2);
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v12);
      swift_bridgeObjectRetain(v14);
      String.hash(into:)(a1, v13, v14);
      return swift_bridgeObjectRelease_n(v14, 2);
    }
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v10, v4);
    v16 = 2;
  }
  else
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, v10, v4);
    v16 = 0;
  }
  Hasher._combine(_:)(v16);
  v17 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100342B28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10034236C(a1, a2);
}

uint64_t sub_100342B3C(_QWORD *a1)
{
  return sub_100342688(a1);
}

Swift::Int sub_100342B50()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1003429A0((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100342B90()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1003429A0((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100342BCC()
{
  return sub_100006204(&qword_1010F8148, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A28);
}

uint64_t sub_100342BF8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_100006204(&qword_1010F8150, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37AB8);
  a1[2] = sub_100006204(&qword_1010F8158, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A90);
  result = sub_100006204(&qword_1010F8160, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A50);
  a1[3] = result;
  return result;
}

uint64_t sub_100342C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v21;
  unint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100342E7C(v1, (uint64_t)v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    v15 = 0x6E696D6F636E692ELL;
    v16 = 0xEA00000000002867;
LABEL_6:
    v21 = v15;
    v22 = v16;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v17);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v14 = v21;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v15 = 0xD000000000000015;
    v16 = 0x8000000100ED1C90;
    goto LABEL_6;
  }
  v10 = *((_QWORD *)v8 + 1);
  v11 = (void *)*((_QWORD *)v8 + 2);
  v21 = 0x6369766544656D2ELL;
  v22 = 0xEA00000000002865;
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease_n(v11, 2);
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v21;
}

uint64_t sub_100342E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconSharingSessionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100342EC0()
{
  unint64_t result;

  result = qword_1010F8168;
  if (!qword_1010F8168)
  {
    result = swift_getWitnessTable(byte_100E37B94, &type metadata for BeaconSharingSessionContext.Error);
    atomic_store(result, (unint64_t *)&qword_1010F8168);
  }
  return result;
}

uint64_t sub_100342F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconSharingSessionContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100342F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for BeaconSharingSessionContext(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (unsigned __int8 *)&v38 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v38 - v17;
  v19 = sub_10001A9A8(&qword_1010F8170);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (unsigned __int8 *)&v22[*(int *)(v20 + 48)];
  sub_100342E7C(a1, (uint64_t)v22);
  sub_100342E7C(a2, (uint64_t)v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v10);
  if (!EnumCaseMultiPayload)
  {
    sub_100342E7C((uint64_t)v22, (uint64_t)v18);
    if (swift_getEnumCaseMultiPayload(v23, v10))
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v39);
      goto LABEL_17;
    }
    v34 = v38;
    v35 = v39;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v38 + 32))(v9, v23, v39);
    v32 = static UUID.== infix(_:_:)(v18, v9);
    v36 = *(void (**)(char *, uint64_t))(v34 + 8);
    v36(v9, v35);
    v36(v18, v35);
LABEL_20:
    sub_1003420EC((uint64_t)v22);
    return v32 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_100342E7C((uint64_t)v22, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload(v23, v10) != 2)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
      goto LABEL_17;
    }
    v30 = v38;
    v31 = v39;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v38 + 32))(v7, v23, v39);
    v32 = static UUID.== infix(_:_:)(v13, v7);
    v33 = *(void (**)(char *, uint64_t))(v30 + 8);
    v33(v7, v31);
    v33(v13, v31);
    goto LABEL_20;
  }
  sub_100342E7C((uint64_t)v22, (uint64_t)v16);
  v26 = *((_QWORD *)v16 + 1);
  v25 = *((_QWORD *)v16 + 2);
  if (swift_getEnumCaseMultiPayload(v23, v10) == 1)
  {
    if (*v16 == *v23)
    {
      v27 = *((_QWORD *)v23 + 1);
      if (v26 == v27 && v25 == *((_QWORD *)v23 + 2))
      {
        swift_bridgeObjectRelease_n(v25, 2);
LABEL_25:
        sub_1003420EC((uint64_t)v22);
        v32 = 1;
        return v32 & 1;
      }
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, v27, *((_QWORD *)v23 + 2), 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
        goto LABEL_25;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1003420EC((uint64_t)v22);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_17:
  sub_100343288((uint64_t)v22);
LABEL_18:
  v32 = 0;
  return v32 & 1;
}

uint64_t sub_100343288(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F8170);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingSessionContext.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100343308 + 4 * byte_100E379E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100343328 + 4 * byte_100E379E5[v4]))();
}

_BYTE *sub_100343308(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100343328(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100343330(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100343338(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100343340(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100343348(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingSessionContext.Error()
{
  return &type metadata for BeaconSharingSessionContext.Error;
}

unint64_t sub_100343368()
{
  unint64_t result;

  result = qword_1010F8178;
  if (!qword_1010F8178)
  {
    result = swift_getWitnessTable("e^#", &type metadata for BeaconSharingSessionContext.Error);
    atomic_store(result, (unint64_t *)&qword_1010F8178);
  }
  return result;
}

char *sub_1003433AC()
{
  uint64_t v0;
  void *v1;
  char *v2;
  uint64_t v3;
  id v4;
  char *v5;
  char *v6;
  void *v7;
  id v8;
  char v10[24];

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = *(char **)(v0 + 32);
  }
  else
  {
    v3 = v0;
    v4 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
    v5 = (char *)CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, 0, 1);
    v6 = &v5[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
    swift_beginAccess(&v5[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate], v10, 1, 0);
    *((_QWORD *)v6 + 1) = &off_10106DA68;
    swift_unknownObjectWeakAssign(v6, v3);
    v7 = *(void **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = v5;
    v2 = v5;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

unint64_t sub_100343468()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v3 = sub_10001A9A8(&qword_1010F0E48);
    inited = swift_initStackObject(v3, &v11);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(kFMIPStateDidChangeNotification);
    v7 = v6;
    v8 = swift_allocObject(&unk_10106DAB8, 24, 7);
    swift_weakInit(v8 + 16, v0);
    v9 = swift_allocObject(&unk_10106DD10, 32, 7);
    *(_QWORD *)(v9 + 16) = sub_1003452BC;
    *(_QWORD *)(v9 + 24) = v8;
    *(_QWORD *)(inited + 32) = v5;
    *(_QWORD *)(inited + 40) = v7;
    *(_QWORD *)(inited + 48) = sub_10015A05C;
    *(_QWORD *)(inited + 56) = v9;
    v2 = sub_1006B9680(inited);
    *(_QWORD *)(v0 + 48) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_100343564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.FMIPStateManager.fmipstatechange", 62, 2, sub_100345228, v4, &type metadata for () + 1);
    return swift_release();
  }
  return result;
}

id sub_1003435F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v12[2];
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v1 = v0;
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "BOOLForKey:", v4);

  v5 = objc_msgSend(v2, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "objectForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v13, v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_100147814((uint64_t)v13, (uint64_t)v14);
  if (v15)
  {
    v8 = sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
    if ((swift_dynamicCast(v12, v14, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
    {
      v9 = v12[0];
      v10 = objc_msgSend(v12[0], "BOOLValue");

      return v10;
    }
  }
  else
  {
    sub_10014785C((uint64_t)v14);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_1003451D4, v1, &type metadata for Bool);
  if (v14[0] == 1)
  {
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.FMIPStateManager.fmipstatechange", 62, 2, sub_100345228, v1, (char *)&type metadata for () + 8);
  }
  return 0;
}

_QWORD *sub_1003437F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v23[2];
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = _swiftEmptyArrayStorage;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v23[0] = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v23, v14, v15, v2, v13);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100ED1D30, v7, v4, v11, 0);
  v1[4] = 0;
  v1[5] = 0;
  v1[6] = 0;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v23[0] = 0x7365547265646E75;
  v23[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v24, v23, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
    v16 = sub_100343468();
    v17 = type metadata accessor for DarwinNotificationHelper(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v1[5] = DarwinNotificationHelper.init(notificationHandlers:)(v16);
    swift_release();
  }
  v18 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v19 = (void *)static OS_os_log.default.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:type:_:)("FMIPStateManager darwin handlers set", 36, 2, &_mh_execute_header, v19, v20, _swiftEmptyArrayStorage);

  return v1;
}

void sub_100343AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v4 = swift_allocObject(&unk_10106DC70, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = (void *)objc_opt_self(FMDFMIPManager);
  swift_retain();
  swift_retain();
  v6 = objc_msgSend(v5, "sharedInstance");
  v7 = swift_allocObject(&unk_10106DC98, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_10034526C;
  *(_QWORD *)(v7 + 24) = v4;
  v9[4] = sub_10034529C;
  v9[5] = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_10002683C;
  v9[3] = &unk_10106DCB0;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v6, "fmipStateWithCompletion:", v8);
  _Block_release(v8);
  swift_release();

}

void sub_100343C18(uint64_t a1, char a2)
{
  void *v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  NSString v23;
  uint64_t v24;
  id v25;
  _OWORD v26[2];
  _QWORD v27[4];

  if ((a2 & 1) == 0)
  {
    v3 = (void *)objc_opt_self(NSUserDefaults);
    v4 = objc_msgSend(v3, "standardUserDefaults");
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "objectForKey:", v5);

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)(v26, v6);
      swift_unknownObjectRelease(v6);
    }
    else
    {
      memset(v26, 0, sizeof(v26));
    }
    sub_100147814((uint64_t)v26, (uint64_t)v27);
    if (v27[3])
    {
      v17 = sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
      if ((swift_dynamicCast(&v25, v27, (char *)&type metadata for Any + 8, v17, 6) & 1) != 0)
      {
        v18 = v25;
        if (objc_msgSend(v25, "BOOLValue") == (a1 & 1))
        {

          goto LABEL_13;
        }
LABEL_12:
        v19 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
        v20 = (void *)static OS_os_log.default.getter(v19);
        v21 = static os_log_type_t.default.getter(v20);
        os_log(_:dso:log:type:_:)("FMIPStateManager: FMIP State changed", 36, 2, &_mh_execute_header, v20, v21, _swiftEmptyArrayStorage);

        v22 = objc_msgSend(v3, "standardUserDefaults");
        v23 = String._bridgeToObjectiveC()();
        objc_msgSend(v22, "setBool:forKey:", a1 & 1, v23);

        LOBYTE(v22) = sub_1003435F8();
        v24 = swift_allocObject(&unk_10106DCE8, 17, 7);
        *(_BYTE *)(v24 + 16) = v22 & 1;
        sub_100344648((uint64_t)sub_1003452B4, v24);

        swift_release();
        goto LABEL_13;
      }
    }
    else
    {
      sub_10014785C((uint64_t)v27);
    }
    v18 = 0;
    goto LABEL_12;
  }
  v7 = swift_errorRetain(a1);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.default.getter(v9);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v27[0] = a1;
  swift_errorRetain(a1);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v14 = String.init<A>(describing:)(v27, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v10, "FMIPStateManager error getting fmip state: %@", 45, 2, v12);

  swift_bridgeObjectRelease();
  sub_10010F948(a1, 1);
LABEL_13:
  Transaction.capture()();
}

uint64_t sub_100343F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v5 = sub_10001A9A8(&qword_1010ED508);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100030784(a1, (uint64_t)aBlock);
  v8 = swift_allocObject(&unk_10106DAB8, 24, 7);
  swift_weakInit(v8 + 16, v2);
  v9 = sub_10001A9A8(&qword_1010F82E8);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_1003450E0, v8, v9);
  v10 = *(NSObject **)(v2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 24) & ~v11;
  v13 = swift_allocObject(&unk_10106DBF8, v12 + v7, v11 | 7);
  *(_QWORD *)(v13 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v14 = swift_allocObject(&unk_10106DC20, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100345174;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106DC38;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 95, 102, 32, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10034415C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_100344324(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1003441DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t *v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _BYTE v15[24];

  v4 = sub_10001A9A8(&qword_1010ED508);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v8 = (unint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v15, 33, 0);
  v9 = *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)(a1 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_1007C973C(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
    *v8 = v9;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    v9 = sub_1007C973C(v11 > 1, v12 + 1, 1, v9);
    *v8 = v9;
  }
  *(_QWORD *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess(v15);
}

uint64_t sub_100344324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = sub_10001A9A8(&qword_1010ED508);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_10106DB80, v8 + v5, v7 | 7);
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v10 = swift_allocObject(&unk_10106DBA8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1003450A8;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10106DBC0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 95, 110, 32, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1003444D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];
  _BYTE v7[24];

  swift_beginAccess(a1 + 16, v7, 1, 0);
  v4 = *(_QWORD *)(a1 + 16);
  v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)(a1 + 16) = sub_10008B984((uint64_t (*)(char *))sub_1003450C4, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_100344550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001A9A8(&qword_1010ED508);
  v5 = sub_1000193A4(&qword_1010F82E0, &qword_1010ED508, (const char *)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1003445D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = sub_10001A9A8(&qword_1010ED508);
  Subscription.subscriber.getter(v7, v3);
  v4 = v8;
  v5 = v9;
  sub_10001AA44(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a2, v4, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
}

uint64_t sub_100344648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(v2 + 24);
  v12 = swift_allocObject(&unk_10106DAB8, 24, 7);
  swift_weakInit(v12 + 16, v2);
  v13 = (_QWORD *)swift_allocObject(&unk_10106DAE0, 40, 7);
  v13[2] = v12;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_100344FDC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106DAF8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  return swift_release();
}

uint64_t sub_100344880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD aBlock[6];
  char v74[8];
  char v75[12];

  v62 = a3;
  v61 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v68 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v66 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v65 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_10001A9A8(&qword_1010ED508);
  v67 = *(_QWORD *)(v71 - 8);
  v10 = *(_QWORD *)(v67 + 64);
  v11 = __chkstk_darwin(v71);
  v64 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v69 = (char *)&v48 - v12;
  a1 += 16;
  swift_beginAccess(a1, v75, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v14 = result;
    v58 = v8;
    v15 = v4;
    swift_beginAccess(result + 16, v74, 0, 0);
    v16 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRetain(v16);
    v17 = v16;
    swift_release();
    v18 = *(_QWORD *)(v16 + 16);
    if (v18)
    {
      v57 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v19 = *(unsigned __int8 *)(v67 + 80);
      v20 = (v19 + 32) & ~v19;
      v48 = v17;
      v21 = (char *)(v17 + v20);
      v56 = v20;
      v55 = v20 + v10;
      v54 = *(_QWORD *)(v67 + 72);
      v53 = v19 | 7;
      v52 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
      v51 = enum case for DispatchQoS.QoSClass.default(_:);
      v50 = v15;
      v22 = v67;
      v49 = v6;
      v23 = v71;
      do
      {
        v70 = v21;
        v24 = v69;
        v25 = v52;
        v52(v69, v21, v23);
        v26 = v66;
        v27 = v65;
        v28 = v58;
        (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, v51, v58);
        v29 = static OS_dispatch_queue.global(qos:)(v27);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
        v30 = v64;
        v25(v64, v24, v71);
        v31 = swift_allocObject(&unk_10106DB30, v55, v53);
        v32 = v62;
        *(_QWORD *)(v31 + 16) = v61;
        *(_QWORD *)(v31 + 24) = v32;
        (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v31 + v56, v30, v71);
        aBlock[4] = sub_100345060;
        aBlock[5] = v31;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_10106DB48;
        v33 = _Block_copy(aBlock);
        v34 = swift_retain();
        static DispatchQoS.unspecified.getter(v34);
        v72 = _swiftEmptyArrayStorage;
        v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v37 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v38 = v18;
        v39 = v49;
        v40 = v50;
        v41 = v35;
        v42 = v63;
        v43 = v60;
        v44 = v68;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v36, v37, v50, v41);
        v45 = (void *)v29;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v39, v33);
        v23 = v71;
        v46 = v33;
        v47 = v59;
        v22 = v67;
        _Block_release(v46);

        (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v40);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v47);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v69, v23);
        swift_release();
        v21 = &v70[v54];
        v18 = v38 - 1;
      }
      while (v38 != 1);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100344D84(uint64_t a1, uint64_t a2, uint64_t (*a3)(BOOL))
{
  if (!a2)
    return a3(a1 == 1);
  swift_errorRetain(a2);
  ((void (*)(uint64_t, uint64_t))a3)(a2, 1);
  return swift_errorRelease(a2);
}

uint64_t sub_100344DE8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for FMIPStateManager()
{
  return objc_opt_self(_TtC12searchpartyd16FMIPStateManager);
}

uint64_t sub_100344E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = sub_10001A9A8(&qword_1010ED508);
  Subscription.subscriber.getter(v7, v3);
  v4 = v8;
  v5 = v9;
  sub_10001AA44(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v4, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
}

uint64_t sub_100344EC0()
{
  char *v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;

  v0 = sub_1003433AC();
  v5[2] = v0;
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001C786C, v5, v1);

  v2 = (v6 - 3) < 2;
  v3 = swift_allocObject(&unk_10106DA90, 17, 7);
  *(_BYTE *)(v3 + 16) = v2;
  sub_100344648((uint64_t)sub_100344F84, v3);
  return swift_release();
}

uint64_t sub_100344F74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100344F84(uint64_t a1)
{
  uint64_t v1;

  return sub_100344E4C(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100344F8C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100344FB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100344FDC()
{
  uint64_t *v0;

  return sub_100344880(v0[2], v0[3], v0[4]);
}

uint64_t sub_100344FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010ED508);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100345060()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED508) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1003450A8()
{
  return sub_100345180(sub_1003444D4);
}

uint64_t sub_1003450B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

BOOL sub_1003450C4(uint64_t a1)
{
  uint64_t v1;

  return sub_100344550(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1003450E0(uint64_t a1)
{
  uint64_t v1;

  return sub_10034415C(a1, v1);
}

uint64_t sub_1003450FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010ED508);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100345174()
{
  return sub_100345180(sub_1003441DC);
}

uint64_t sub_100345180(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED508) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_1003451C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003451D4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 16, v4, 0, 0);
  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) != 0;
  return result;
}

void sub_100345228(uint64_t a1)
{
  uint64_t v1;

  sub_100343AE8(a1, v1);
}

uint64_t sub_100345240()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10034526C(uint64_t a1, char a2)
{
  sub_100343C18(a1, a2 & 1);
}

uint64_t sub_100345278()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10034529C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100344D84(a1, a2, *(uint64_t (**)(BOOL))(v2 + 16));
}

uint64_t sub_1003452A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003452B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1003445D4(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1003452BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100343564(a1, v1);
}

uint64_t sub_1003452DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1003452F4, 0, 0);
}

uint64_t sub_1003452F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[2];
  *(_QWORD *)(v0 + 32) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 40) = 0;
    v4 = v1[4];
    v3 = v1[5];
    swift_bridgeObjectRetain(v1);
    ObjectType = swift_getObjectType(v4);
    v6 = *(int **)(v3 + 32);
    v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 48) = v7;
    *v7 = v0;
    v7[1] = sub_1003453A0;
    return v9(ObjectType, v3);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003453A0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_1003453F4, 0, 0);
}

uint64_t sub_1003453F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 40) + 1;
  if (v1 == *(_QWORD *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 40) = v1;
    v3 = *(_QWORD *)(v0 + 16) + 16 * v1;
    v4 = *(_QWORD *)(v3 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 32));
    v6 = *(int **)(v4 + 32);
    v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 48) = v7;
    *v7 = v0;
    v7[1] = sub_1003453A0;
    return v8(ObjectType, v4);
  }
}

uint64_t sub_1003454AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1003454C8, 0, 0);
}

uint64_t sub_1003454C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  int *v10;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[2];
  *(_QWORD *)(v0 + 48) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 56) = 0;
    v3 = v1[4];
    *(_QWORD *)(v0 + 64) = v3;
    v4 = v1[5];
    swift_bridgeObjectRetain(v1);
    ObjectType = swift_getObjectType(v3);
    v6 = *(int **)(v4 + 40);
    v7 = v6[1];
    v10 = (int *)((char *)v6 + *v6);
    swift_unknownObjectRetain(v3);
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 72) = v8;
    *v8 = v0;
    v8[1] = sub_100345598;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v10)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), ObjectType, v4);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100345598()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_1003455EC, 0, 0);
}

uint64_t sub_1003455EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 56) + 1;
    *(_QWORD *)(v0 + 56) = v4;
    v5 = *(_QWORD *)(v0 + 16) + 16 * v4;
    v6 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v0 + 64) = v6;
    v7 = *(_QWORD *)(v5 + 40);
    ObjectType = swift_getObjectType(v6);
    v9 = *(int **)(v7 + 40);
    v10 = v9[1];
    v12 = (int *)((char *)v9 + *v9);
    swift_unknownObjectRetain(v6);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 72) = v11;
    *v11 = v0;
    v11[1] = sub_100345598;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), ObjectType, v7);
  }
}

uint64_t sub_1003456D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1003456F0, 0, 0);
}

uint64_t sub_1003456F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[2];
  *(_QWORD *)(v0 + 32) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 40) = 0;
    v4 = v1[4];
    v3 = v1[5];
    swift_bridgeObjectRetain(v1);
    ObjectType = swift_getObjectType(v4);
    v6 = *(int **)(v3 + 48);
    v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 48) = v7;
    *v7 = v0;
    v7[1] = sub_10034579C;
    return v9(ObjectType, v3);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10034579C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_1003457F0, 0, 0);
}

uint64_t sub_1003457F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 40) + 1;
  if (v1 == *(_QWORD *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 40) = v1;
    v3 = *(_QWORD *)(v0 + 16) + 16 * v1;
    v4 = *(_QWORD *)(v3 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 32));
    v6 = *(int **)(v4 + 48);
    v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 48) = v7;
    *v7 = v0;
    v7[1] = sub_10034579C;
    return v8(ObjectType, v4);
  }
}

ValueMetadata *type metadata accessor for AirPodsSendBeaconGroupDataCommandPayload()
{
  return &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
}

uint64_t sub_1003458B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100345954(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_1003458E4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100345910();
  result = sub_10024D5D8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100345910()
{
  unint64_t result;

  result = qword_1010F8308;
  if (!qword_1010F8308)
  {
    result = swift_getWitnessTable("Ua#", &type metadata for AirPodsSendBeaconGroupDataCommandPayload);
    atomic_store(result, &qword_1010F8308);
  }
  return result;
}

uint64_t sub_100345954(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v18, v3, v4);
  v5 = v19;
  v6 = v20;
  sub_10009F5D0((uint64_t)v18, v19);
  v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v5, v6);
  if (!v1)
  {
    v8 = static MACAddress.length.getter(v7);
    if ((unint64_t)(v8 - 0x2000000000000000) >> 62 == 3)
    {
      if (!__OFADD__(4 * v8, 80))
      {
        if (!__OFADD__(4 * v8 + 80, 4))
        {
          v9 = 4 * v8 + 88;
          if (!__OFADD__(4 * v8 + 84, 4))
          {
            v10 = v19;
            v11 = v20;
            sub_10009F5D0((uint64_t)v18, v19);
            dispatch thunk of BinaryDecodingContaining.decode(length:)(v9, v10, v11);
            v13 = v12;
            v14 = sub_100035530();
            v15 = DataProtocol.intValue.getter(&type metadata for Data, v14);
            v16 = static MACAddress.length.getter(v15);
            if (!__OFADD__(v16, 20))
            {
              if (!__OFADD__(v16 + 20, 1))
              {
                if (!__OFADD__(v16 + 21, 1))
                {
                  if ((unsigned __int128)(v15 * (__int128)(v16 + 22)) >> 64 == (v15 * (v16 + 22)) >> 63)
                    __asm { BR              X10 }
LABEL_19:
                  __break(1u);
                  JUMPOUT(0x100345BE4);
                }
LABEL_18:
                __break(1u);
                goto LABEL_19;
              }
LABEL_17:
              __break(1u);
              goto LABEL_18;
            }
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v1;
}

unint64_t sub_100345C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EC010;
  if (!qword_1010EC010)
  {
    v1 = type metadata accessor for BinaryDecodingError(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for BinaryDecodingError, v1);
    atomic_store(result, (unint64_t *)&qword_1010EC010);
  }
  return result;
}

uint64_t sub_100345C48(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  __int128 v26;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F85D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10035383C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys, &type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys, v11, v9, v10);
  v26 = *v3;
  v25 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for PencilUnpairData.DeviceUnpairData(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v26) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    v17 = (uint64_t *)((char *)v3 + v13[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v26) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v26, v5);
    v20 = (uint64_t *)((char *)v3 + v13[7]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v26) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100345E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100353CDC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100345E64()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100345E9C + 4 * byte_100E37D10[*v0]))(0x754E6C6169726573, 0xEC0000007265626DLL);
}

uint64_t sub_100345E9C()
{
  return 0x6449616E6D66;
}

uint64_t sub_100345EB0()
{
  return 0x49746375646F7270;
}

uint64_t sub_100345ECC()
{
  return 0x6449726F646E6576;
}

uint64_t sub_100345EE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10034FB20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100345F08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035383C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100345F30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035383C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100345F58(_QWORD *a1)
{
  return sub_100345C48(a1);
}

uint64_t sub_100345F6C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F85A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100353738();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PencilUnpairData.CodingKeys, &type metadata for PencilUnpairData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v32 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v31 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    v16 = v3[4];
    v17 = v3[5];
    v30 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v30, v5);
    v18 = v3[6];
    v19 = v3[7];
    v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v29, v5);
    v28 = *((_BYTE *)v3 + 64);
    v27 = 4;
    v20 = sub_10035377C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for PencilUnpairContext, v20);
    v26 = v3[9];
    v25 = 5;
    v21 = sub_10001A9A8(&qword_1010F85C0);
    v22 = sub_1003537C0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10034615C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100346190 + 4 * byte_100E37D14[*v0]))(0x69634572656E776FLL, 0xE900000000000064);
}

uint64_t sub_100346190()
{
  return 0x69684372656E776FLL;
}

unint64_t sub_1003461B0()
{
  return 0xD000000000000011;
}

uint64_t sub_1003461CC()
{
  return 1684628597;
}

uint64_t sub_1003461DC()
{
  return 0x6F4365766F6D6572;
}

uint64_t sub_100346200()
{
  return 0x73656369766564;
}

uint64_t sub_100346218@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100350104(a1, a2);
  *a3 = result;
  return result;
}

void sub_10034623C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100346248(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100353738();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100346270(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100353738();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100346298(_QWORD *a1)
{
  return sub_100345F6C(a1);
}

uint64_t sub_1003462AC()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(base64Encoded:options:)(0xD000000000000058, 0x8000000100ED1F20, 0);
  qword_1011B6DC8 = result;
  qword_1011B6DD0 = v1;
  return result;
}

uint64_t sub_1003462E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v3[14] = *v2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  v3[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint(0);
  v3[16] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v6);
  v3[18] = swift_task_alloc(v6);
  return swift_task_switch(sub_100346384, 0, 0);
}

uint64_t sub_100346384(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v22)(uint64_t, uint64_t);

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v3 = v1[17];
  v4 = v1[18];
  v5 = v1[15];
  v6 = v1[16];
  v7 = (uint64_t *)v1[12];
  v8 = v1[13];
  v9 = qword_1011B7DF0;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = 0xD000000000000028;
  *(_QWORD *)(v11 + 40) = 0x8000000100ED1ED0;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v9, "%@", 2, 2, v11);
  swift_bridgeObjectRelease();
  v12 = enum case for FMNAccountType.w2Accessory(_:);
  v13 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v4, v12, v13);
  *(_BYTE *)(v4 + *(int *)(v6 + 20)) = 0;
  v14 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
  v16 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v5);
  v17 = type metadata accessor for ServerInteractionController(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  sub_10005972C(v4, v3, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  v1[19] = sub_10041D354(v3, v16, v18);
  v19 = *(_QWORD *)(v8 + 16);
  swift_retain();
  sub_1001B0340(v7);
  v22 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F19C0 + dword_1010F19C0);
  v20 = (_QWORD *)swift_task_alloc(unk_1010F19C4);
  v1[20] = v20;
  *v20 = v1;
  v20[1] = sub_1003465B0;
  return v22(v1[12], v19);
}

uint64_t sub_1003465B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 160);
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100346610, 0, 0);
}

uint64_t sub_100346610()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t *v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t *v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint64_t *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t *v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint64_t *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int8x16_t *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x16_t v97;
  uint64_t v98[2];

  if (*(_QWORD *)(v0 + 168))
  {
    v96 = *(_QWORD *)(v0 + 168);
    v95 = v0 + 80;
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v1 = *(uint64_t **)(v0 + 96);
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_1011B7AE0);
    sub_1001B0340(v1);
    v3 = sub_1001B0340(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(uint64_t **)(v0 + 96);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v98[0] = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = Data.hexString.getter(v7[8], v7[9]);
      *(_QWORD *)(v0 + 80) = sub_100016940(v10, v11, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v95, v0 + 88, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      sub_1001B0834(v7);
      sub_1001B0834(v7);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Auth nonce: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      sub_1001B0834(v7);
      sub_1001B0834(v7);
    }

    v26 = *(uint64_t **)(v0 + 96);
    sub_1001B0340(v26);
    v27 = sub_1001B0340(v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter(v28);
    v30 = os_log_type_enabled(v28, v29);
    v31 = *(uint64_t **)(v0 + 96);
    if (v30)
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v98[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = Data.hexString.getter(v31[30], v31[31]);
      *(_QWORD *)(v0 + 72) = sub_100016940(v34, v35, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v95, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease();
      sub_1001B0834(v31);
      sub_1001B0834(v31);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Session nonce: %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      sub_1001B0834(v31);
      sub_1001B0834(v31);
    }

    v36 = *(uint64_t **)(v0 + 96);
    sub_1001B0340(v36);
    v37 = sub_1001B0340(v36);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.debug.getter(v38);
    v40 = os_log_type_enabled(v38, v39);
    v41 = *(uint64_t **)(v0 + 96);
    if (v40)
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v98[0] = v43;
      *(_DWORD *)v42 = 136315138;
      v44 = Data.hexString.getter(v41[10], v41[11]);
      *(_QWORD *)(v0 + 64) = sub_100016940(v44, v45, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease();
      sub_1001B0834(v41);
      sub_1001B0834(v41);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "serialNumber: %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      sub_1001B0834(v41);
      sub_1001B0834(v41);
    }

    v46 = *(uint64_t **)(v0 + 96);
    sub_1001B0340(v46);
    v47 = sub_1001B0340(v46);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.debug.getter(v48);
    v50 = os_log_type_enabled(v48, v49);
    v51 = *(uint64_t **)(v0 + 96);
    if (v50)
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      v98[0] = v53;
      *(_DWORD *)v52 = 136315138;
      v54 = Data.hexString.getter(v51[12], v51[13]);
      *(_QWORD *)(v0 + 56) = sub_100016940(v54, v55, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease();
      sub_1001B0834(v51);
      sub_1001B0834(v51);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "altserialNumber: %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      sub_1001B0834(v51);
      sub_1001B0834(v51);
    }

    v56 = *(uint64_t **)(v0 + 96);
    sub_1001B0340(v56);
    v57 = sub_1001B0340(v56);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.debug.getter(v58);
    v60 = os_log_type_enabled(v58, v59);
    v61 = *(uint64_t **)(v0 + 96);
    if (v60)
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      v98[0] = v63;
      *(_DWORD *)v62 = 136315138;
      v64 = Data.hexString.getter(v61[18], v61[19]);
      *(_QWORD *)(v0 + 48) = sub_100016940(v64, v65, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease();
      sub_1001B0834(v61);
      sub_1001B0834(v61);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "SeedK1: %s", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      sub_1001B0834(v61);
      sub_1001B0834(v61);
    }

    v66 = *(uint64_t **)(v0 + 96);
    sub_1001B0340(v66);
    v67 = sub_1001B0340(v66);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.debug.getter(v68);
    v70 = os_log_type_enabled(v68, v69);
    v71 = *(uint64_t **)(v0 + 96);
    if (v70)
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v98[0] = v73;
      *(_DWORD *)v72 = 136315138;
      v74 = Data.hexString.getter(v71[24], v71[25]);
      *(_QWORD *)(v0 + 40) = sub_100016940(v74, v75, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      sub_1001B0834(v71);
      sub_1001B0834(v71);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "accessoryAttestation: %s", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);
    }
    else
    {
      sub_1001B0834(v71);
      sub_1001B0834(v71);
    }

    v76 = *(uint64_t **)(v0 + 96);
    sub_1001B0340(v76);
    v77 = sub_1001B0340(v76);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.debug.getter(v78);
    v80 = os_log_type_enabled(v78, v79);
    v81 = *(uint64_t **)(v0 + 96);
    if (v80)
    {
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = swift_slowAlloc(32, -1);
      v98[0] = v83;
      *(_DWORD *)v82 = 136315138;
      v84 = Data.hexString.getter(v81[26], v81[27]);
      *(_QWORD *)(v0 + 32) = sub_100016940(v84, v85, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v82 + 4, v82 + 12);
      swift_bridgeObjectRelease();
      sub_1001B0834(v81);
      sub_1001B0834(v81);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "accessorySignature: %s", v82, 0xCu);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v82, -1, -1);
    }
    else
    {
      sub_1001B0834(*(uint64_t **)(v0 + 96));
      sub_1001B0834(v81);
    }

    v86 = *(_QWORD *)(v0 + 176);
    v87 = *(_QWORD *)(v0 + 184);
    v88 = *(_QWORD *)(v0 + 168);
    v89 = *(_QWORD **)(v0 + 152);
    v90 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRetain(v96);
    v97 = *(int8x16_t *)(v0 + 96);
    sub_10001BBBC(v86, v87);
    v91 = sub_10034CA70(v96, v86, v87, 0, v89);
    *(_QWORD *)(v0 + 192) = v91;
    sub_100153D94(v88, v86, v87);
    v92 = (int8x16_t *)swift_task_alloc(64);
    *(_QWORD *)(v0 + 200) = v92;
    v92[1].i64[0] = v91;
    v92[1].i64[1] = (uint64_t)v89;
    v92[2] = vextq_s8(v97, v97, 8uLL);
    v92[3].i64[0] = v90;
    v93 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 208) = v93;
    v94 = type metadata accessor for PencilPairingLockCheckResponse(0);
    *v93 = v0;
    v93[1] = sub_10034718C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 88), 0, 0, 0xD000000000000028, 0x8000000100ED1ED0, sub_100350FA0, v92, v94);
  }
  else
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7AE0);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, " Could not create pairing lock request.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = *(_QWORD *)(v0 + 144);

    type metadata accessor for SPPairingSessionError(0);
    v19 = v18;
    *(_QWORD *)(v0 + 24) = 6;
    v20 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    v22 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v20, v19, v21);
    swift_willThrow(v22);
    swift_release();
    sub_1000126B0(v17, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
    v23 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10034718C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(_QWORD *)(v2 + 200));
  if (v0)
    v4 = sub_100347294;
  else
    v4 = sub_1003471F8;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003471F8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  swift_release();
  swift_release();
  sub_100153D94(v3, v2, v1);
  sub_1000126B0(v4, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100347294()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  swift_release();
  swift_release();
  sub_100153D94(v3, v2, v1);
  sub_1000126B0(v4, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100347324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  v28 = a5;
  v29 = a6;
  v26 = a1;
  v27 = a4;
  v8 = sub_10001A9A8(&qword_1010F8370);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v12(v11, a1, v8);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = v14 + v10;
  v16 = v13 | 7;
  v17 = swift_allocObject(&unk_10106DF90, v15, v13 | 7);
  *(_QWORD *)(v17 + 16) = a3;
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v25(v17 + v14, v11, v8);
  swift_retain();
  Future.addFailure(block:)(sub_100351028, v17);
  swift_release();
  swift_release();
  v12(v11, v26, v8);
  v18 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 311) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_10106DFB8, v20 + 8, v16);
  *(_QWORD *)(v21 + 16) = a3;
  v25(v21 + v14, v11, v8);
  v22 = v28;
  *(_QWORD *)(v21 + v18) = v27;
  memcpy((void *)(v21 + v19), v22, 0x130uLL);
  *(_QWORD *)(v21 + v20) = v29;
  swift_retain();
  swift_retain();
  sub_1001B0340((uint64_t *)v22);
  Future.addSuccess(block:)(sub_1003511CC, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_1003474EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7AE0);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v17 = a1;
    v18 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_errorRetain(a1);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(&v17, v8);
    v17 = sub_100016940(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, " Error in verify pairing request. Error - %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  type metadata accessor for SPPairingSessionError(0);
  v12 = v11;
  v17 = 5;
  v13 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v14 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v18, &v17, v13, v12, v14);
  v17 = v18;
  v15 = sub_10001A9A8(&qword_1010F8370);
  return CheckedContinuation.resume(throwing:)(&v17, v15);
}

uint64_t sub_100347734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t (**v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  uint8_t *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  void *v188;
  NSString v189;
  id v190;
  char *v191;
  void (*v192)(char *, char *, uint64_t);
  uint64_t v193;
  char *v194;
  void (*v195)(char *, char *, uint64_t);
  char *v196;
  char *v197;
  uint64_t v198;
  NSObject *v199;
  os_log_type_t v200;
  int v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t (*v207)(char *, uint64_t);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  os_log_type_t v223;
  uint8_t *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t *v236;
  NSObject *v237;
  os_log_type_t v238;
  uint8_t *v239;
  uint8_t *v240;
  uint64_t v241;
  uint8_t *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint8_t *v250;
  uint8_t *v251;
  uint64_t v252;
  uint64_t v253;
  NSObject *v254;
  os_log_type_t v255;
  uint8_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t (*v272)(char *, uint64_t);
  char *v273;
  char *v274;
  uint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  uint64_t v279;
  char *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  void (**v285)(char *, uint64_t);
  uint8_t *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _BYTE v294[16];
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE v298[16];

  v281 = a5;
  v289 = a3;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v278 = (char *)&v271 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = type metadata accessor for Date(0);
  v279 = *(_QWORD *)(v282 - 8);
  v8 = __chkstk_darwin(v282);
  v274 = (char *)&v271 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v280 = (char *)&v271 - v11;
  v12 = __chkstk_darwin(v10);
  v273 = (char *)&v271 - v13;
  v14 = __chkstk_darwin(v12);
  v277 = (char *)&v271 - v15;
  __chkstk_darwin(v14);
  v276 = (char *)&v271 - v16;
  v17 = sub_10001A9A8(&qword_1010F8378);
  v18 = __chkstk_darwin(v17);
  v285 = (void (**)(char *, uint64_t))((char *)&v271 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v284 = (char *)&v271 - v20;
  v287 = type metadata accessor for PencilPairingLockCheckResponse(0);
  v21 = __chkstk_darwin(v287);
  v275 = (uint64_t)&v271 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v288 = (char *)&v271 - v23;
  v24 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v271 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v291 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v27 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v291 - 8);
  v28 = __chkstk_darwin(v291);
  v30 = (char *)&v271 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v271 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v271 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v271 - v37;
  v39 = sub_10001A9A8(&qword_1010F8380);
  v40 = __chkstk_darwin(v39);
  v283 = (uint64_t)&v271 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v286 = (uint8_t *)&v271 - v43;
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v271 - v45;
  v47 = __chkstk_darwin(v44);
  v49 = (char *)&v271 - v48;
  v292 = a1;
  v50 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v47);
  v51 = (uint64_t)v49;
  ServerStatusCode.init(rawValue:)(v50);
  v52 = type metadata accessor for ServerStatusCode(0);
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52);
  v290 = v51;
  if (v54 == 1)
    goto LABEL_2;
  sub_10035123C(v51, (uint64_t)v46);
  v272 = *(uint64_t (**)(char *, uint64_t))(v53 + 88);
  v65 = v272(v46, v52);
  if (v65 == enum case for ServerStatusCode.success(_:))
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v66 = type metadata accessor for Logger(0);
    v67 = (uint8_t *)sub_10001A9E8(v66, (uint64_t)qword_1011B7AE0);
    v68 = v291;
    v69 = v27[2](v38, v292, v291);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.default.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v286 = v67;
      v74 = v73;
      v295 = v73;
      *(_DWORD *)v72 = 136446210;
      v285 = (void (**)(char *, uint64_t))v27;
      v75 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v68, v75);
      v293 = sub_100016940(v76, v77, &v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      v285[1](v38, v68);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Pairing success: %{public}s", v72, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      v78 = v74;
      v67 = v286;
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v72, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v27[1])(v38, v68);
    }

    v98 = FMNServerInteractionController.FMNResponseFields.data.getter(v97);
    v100 = v99;
    static String.Encoding.utf8.getter(v98);
    v101 = String.init(data:encoding:)(v98, v100, v26);
    v103 = v102;
    sub_10001BC14(v98, v100);
    v104 = (uint64_t)v288;
    if (v103)
    {
      swift_bridgeObjectRetain(v103);
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.default.getter(v106);
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc(12, -1);
        v109 = swift_slowAlloc(32, -1);
        v295 = v109;
        *(_DWORD *)v108 = 136315138;
        swift_bridgeObjectRetain(v103);
        v293 = sub_100016940(v101, v103, &v295);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v108 + 4, v108 + 12);
        swift_bridgeObjectRelease_n(v103, 3);
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "Response data: %s", v108, 0xCu);
        swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v108, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v103, 2);
      }
    }
    v120 = type metadata accessor for JSONDecoder(0);
    v121 = swift_allocObject(v120, *(unsigned int *)(v120 + 48), *(unsigned __int16 *)(v120 + 52));
    v122 = JSONDecoder.init()(v121);
    v123 = FMNServerInteractionController.FMNResponseFields.data.getter(v122);
    v125 = v124;
    v126 = sub_100006204(&qword_1010F8388, type metadata accessor for PencilPairingLockCheckResponse, (uint64_t)&unk_100E3F938);
    v292 = v122;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v287, v123, v125, v287, v126);
    v127 = sub_10001BC14(v123, v125);
    v128 = (uint64_t)v284;
    FMNServerInteractionController.FMNResponseFields.metadata.getter(v127);
    v129 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
    v130 = *(_QWORD *)(v129 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129) == 1)
    {
      v131 = sub_100004048(v128, &qword_1010F8378);
    }
    else
    {
      v147 = FMNServerInteractionController.InternalServerMetadata.dateEpoch.getter();
      v148 = v128;
      v149 = v147;
      v151 = v150;
      v131 = (*(uint64_t (**)(uint64_t, uint64_t))(v130 + 8))(v148, v129);
      if ((v151 & 1) == 0)
      {
        v152 = Logger.logObject.getter(v131);
        v153 = static os_log_type_t.default.getter(v152);
        if (os_log_type_enabled(v152, v153))
        {
          v154 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v154 = 134217984;
          v295 = v149;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v295, &v296, v154 + 4, v154 + 12);
          _os_log_impl((void *)&_mh_execute_header, v152, v153, "Server epoch: %lld", v154, 0xCu);
          swift_slowDealloc(v154, -1, -1);
        }

        v155 = v281;
        v156 = v287;
        goto LABEL_75;
      }
    }
    v157 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v131);
    if (*(_QWORD *)(v157 + 16) && (v158 = sub_100518DA0(1702125892, 0xE400000000000000), (v159 & 1) != 0))
    {
      v160 = (uint64_t *)(*(_QWORD *)(v157 + 56) + 16 * v158);
      v162 = *v160;
      v161 = v160[1];
      swift_bridgeObjectRetain_n(v161, 3);
      v163 = swift_bridgeObjectRelease();
      v164 = Logger.logObject.getter(v163);
      v165 = static os_log_type_t.default.getter(v164);
      if (os_log_type_enabled(v164, v165))
      {
        v166 = (uint8_t *)swift_slowAlloc(12, -1);
        v167 = swift_slowAlloc(32, -1);
        v286 = v67;
        v168 = v167;
        v295 = v167;
        *(_DWORD *)v166 = 136446210;
        swift_bridgeObjectRetain(v161);
        v293 = sub_100016940(v162, v161, &v295);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v166 + 4, v166 + 12);
        swift_bridgeObjectRelease_n(v161, 3);
        _os_log_impl((void *)&_mh_execute_header, v164, v165, "Server date: %{public}s", v166, 0xCu);
        swift_arrayDestroy(v168, 1, (char *)&type metadata for Any + 8);
        v169 = v168;
        v67 = v286;
        swift_slowDealloc(v169, -1, -1);
        swift_slowDealloc(v166, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v161, 2);
      }
      v185 = v282;
      v186 = v280;
      v187 = v279;
      if (qword_1010E9EB0 != -1)
        swift_once(&qword_1010E9EB0, sub_1006F0F9C);
      v188 = (void *)qword_1011B7548;
      v189 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v190 = objc_msgSend(v188, "dateFromString:", v189);

      if (v190)
      {
        v191 = v277;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v190);

        v192 = *(void (**)(char *, char *, uint64_t))(v187 + 32);
        v193 = (uint64_t)v278;
        v192(v278, v191, v185);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v187 + 56))(v193, 0, 1, v185);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v193, 1, v185) != 1)
        {
          v194 = v276;
          v192(v276, (char *)v193, v185);
          v195 = *(void (**)(char *, char *, uint64_t))(v187 + 16);
          v196 = v273;
          v195(v273, v194, v185);
          v195(v186, v194, v185);
          v197 = v274;
          v198 = ((uint64_t (*)(char *, char *, uint64_t))v195)(v274, v194, v185);
          v199 = Logger.logObject.getter(v198);
          v200 = static os_log_type_t.default.getter(v199);
          v201 = v200;
          if (os_log_type_enabled(v199, v200))
          {
            v202 = v197;
            v203 = swift_slowAlloc(32, -1);
            v291 = swift_slowAlloc(64, -1);
            v295 = v291;
            *(_DWORD *)v203 = 136446722;
            v286 = v67;
            v204 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            LODWORD(v285) = v201;
            v205 = dispatch thunk of CustomStringConvertible.description.getter(v185, v204);
            v293 = sub_100016940(v205, v206, &v295);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v203 + 4, v203 + 12);
            swift_bridgeObjectRelease();
            v207 = *(uint64_t (**)(char *, uint64_t))(v187 + 8);
            v208 = v207(v196, v282);
            *(_WORD *)(v203 + 12) = 2048;
            v209 = Date.epoch.getter(v208);
            v207(v186, v282);
            v293 = v209;
            v210 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v203 + 14, v203 + 22);
            *(_WORD *)(v203 + 22) = 2082;
            v211 = v202;
            v293 = Date.epoch.getter(v210);
            v212 = sub_100059CC8();
            v213 = FixedWidthInteger.data.getter(&type metadata for Int64, v212);
            v215 = v214;
            v216 = Data.hexString.getter(v213, v214);
            v218 = v217;
            v219 = v215;
            v185 = v282;
            sub_10001BC14(v213, v219);
            v293 = sub_100016940(v216, v218, &v295);
            v67 = v286;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v203 + 24, v203 + 32);
            v104 = (uint64_t)v288;
            swift_bridgeObjectRelease();
            v207(v211, v185);
            _os_log_impl((void *)&_mh_execute_header, v199, (os_log_type_t)v285, "pairingEpoch: %{public}s [%lld/%{public}s]", (uint8_t *)v203, 0x20u);
            v220 = v291;
            swift_arrayDestroy(v291, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v220, -1, -1);
            swift_slowDealloc(v203, -1, -1);
          }
          else
          {
            v207 = *(uint64_t (**)(char *, uint64_t))(v187 + 8);
            v207(v186, v185);
            v207(v196, v185);
            v207(v197, v185);
          }

          v155 = v281;
          v156 = v287;
          v231 = v276;
          v149 = Date.epoch.getter(v232);
          v207(v231, v185);
LABEL_75:
          *(_QWORD *)(v104 + *(int *)(v156 + 44)) = v149;
          sub_1001B0340(v155);
          v233 = sub_1003503B4(v155, v104);
          v235 = v234;
          v236 = sub_1001B0834(v155);
          v237 = Logger.logObject.getter(v236);
          v238 = static os_log_type_t.default.getter(v237);
          if (os_log_type_enabled(v237, v238))
          {
            v239 = (uint8_t *)swift_slowAlloc(12, -1);
            v287 = swift_slowAlloc(32, -1);
            v295 = v287;
            v291 = v235;
            *(_DWORD *)v239 = 136315138;
            v240 = v239 + 12;
            v285 = (void (**)(char *, uint64_t))(v239 + 4);
            v286 = v239;
            swift_beginAccess(v104, &v293, 0, 0);
            v241 = *((_QWORD *)v288 + 6);
            v242 = v67;
            v243 = v233;
            v244 = *((_QWORD *)v288 + 7);
            sub_10001BBBC(v241, v244);
            v245 = Data.hexString.getter(v241, v244);
            v247 = v246;
            v248 = v241;
            v104 = (uint64_t)v288;
            v249 = v244;
            v233 = v243;
            v67 = v242;
            sub_10001BC14(v248, v249);
            v297 = sub_100016940(v245, v247, &v295);
            v250 = v240;
            v235 = v291;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v285, v250);
            swift_bridgeObjectRelease();
            v251 = v286;
            _os_log_impl((void *)&_mh_execute_header, v237, v238, "S3: %s", v286, 0xCu);
            v252 = v287;
            swift_arrayDestroy(v287, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v252, -1, -1);
            swift_slowDealloc(v251, -1, -1);
          }

          sub_10001BBBC(v233, v235);
          v253 = sub_10001BBBC(v233, v235);
          v254 = Logger.logObject.getter(v253);
          v255 = static os_log_type_t.debug.getter(v254);
          if (os_log_type_enabled(v254, v255))
          {
            v256 = (uint8_t *)swift_slowAlloc(12, -1);
            v257 = swift_slowAlloc(32, -1);
            v286 = v67;
            v258 = v257;
            v295 = v257;
            *(_DWORD *)v256 = 136315138;
            v291 = (uint64_t)(v256 + 4);
            v259 = Data.hexString.getter(v233, v235);
            v297 = sub_100016940(v259, v260, &v295);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v291, v256 + 12);
            swift_bridgeObjectRelease();
            sub_10001BC14(v233, v235);
            sub_10001BC14(v233, v235);
            _os_log_impl((void *)&_mh_execute_header, v254, v255, "dataForSignatureVerification: %s", v256, 0xCu);
            swift_arrayDestroy(v258, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v258, -1, -1);
            swift_slowDealloc(v256, -1, -1);
          }
          else
          {
            sub_10001BC14(v233, v235);
            sub_10001BC14(v233, v235);
          }

          swift_beginAccess(v104, &v295, 0, 0);
          v261 = *(_QWORD *)(v104 + 48);
          v262 = *(_QWORD *)(v104 + 56);
          sub_10001BBBC(v261, v262);
          v263 = sub_1003509B8(v233, v235, v261, v262);
          v264 = sub_10001BC14(v261, v262);
          v265 = static os_log_type_t.default.getter(v264);
          if (qword_1010EA310 != -1)
            swift_once(&qword_1010EA310, sub_100B5E2C8);
          v266 = qword_1011B7DF0;
          v267 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v268 = swift_allocObject(v267, 72, 7);
          *(_OWORD *)(v268 + 16) = xmmword_100E22B00;
          *(_QWORD *)(v268 + 56) = &type metadata for Bool;
          *(_QWORD *)(v268 + 64) = &protocol witness table for Bool;
          *(_BYTE *)(v268 + 32) = v263 & 1;
          os_log(_:dso:log:_:_:)(v265, &_mh_execute_header, v266, "Signature S3 verified? %d", v271);
          swift_bridgeObjectRelease();
          v269 = v275;
          sub_10005972C(v104, v275, type metadata accessor for PencilPairingLockCheckResponse);
          v270 = sub_10001A9A8(&qword_1010F8370);
          CheckedContinuation.resume(returning:)(v269, v270);
          swift_release();
          sub_10001BC14(v233, v235);
          v229 = v104;
          goto LABEL_71;
        }
      }
      else
      {
        v193 = (uint64_t)v278;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v187 + 56))(v278, 1, 1, v185);
      }
      v221 = sub_100004048(v193, (uint64_t *)&unk_1010EA690);
      v222 = Logger.logObject.getter(v221);
      v223 = static os_log_type_t.error.getter(v222);
      if (os_log_type_enabled(v222, v223))
      {
        v224 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v224 = 0;
        _os_log_impl((void *)&_mh_execute_header, v222, v223, "Unable to parse server Date!", v224, 2u);
        swift_slowDealloc(v224, -1, -1);
      }

      type metadata accessor for SPPairingSessionError(0);
      v175 = v225;
      v176 = 25;
    }
    else
    {
      v170 = swift_bridgeObjectRelease();
      v171 = Logger.logObject.getter(v170);
      v172 = static os_log_type_t.error.getter(v171);
      if (os_log_type_enabled(v171, v172))
      {
        v173 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v173 = 0;
        _os_log_impl((void *)&_mh_execute_header, v171, v172, "Server response is missing Date header!", v173, 2u);
        swift_slowDealloc(v173, -1, -1);
      }

      type metadata accessor for SPPairingSessionError(0);
      v175 = v174;
      v176 = 23;
    }
    v293 = v176;
    v226 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v227 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v295, &v293, v226, v175, v227);
    v293 = v295;
    v228 = sub_10001A9A8(&qword_1010F8370);
    CheckedContinuation.resume(throwing:)(&v293, v228);
    swift_release();
    v229 = v104;
LABEL_71:
    sub_1000126B0(v229, type metadata accessor for PencilPairingLockCheckResponse);
    return sub_100004048(v290, &qword_1010F8380);
  }
  if (v65 == enum case for ServerStatusCode.forbidden(_:))
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v85 = type metadata accessor for Logger(0);
    v86 = sub_10001A9E8(v85, (uint64_t)qword_1011B7AE0);
    v87 = v291;
    v88 = v27[2](v33, v292, v291);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.error.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      v91 = swift_slowAlloc(12, -1);
      v288 = (char *)v86;
      v92 = (uint8_t *)v91;
      v287 = swift_slowAlloc(32, -1);
      v295 = v287;
      *(_DWORD *)v92 = 136446210;
      v284 = (char *)(v92 + 4);
      v93 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v87, v93);
      v293 = sub_100016940(v94, v95, &v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v284, v92 + 12);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v27[1])(v33, v87);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Pairing not allowed! %{public}s", v92, 0xCu);
      v96 = v287;
      swift_arrayDestroy(v287, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v92, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v27[1])(v33, v87);
    }

    v132 = (uint64_t)v285;
    FMNServerInteractionController.FMNResponseFields.metadata.getter(v133);
    v134 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
    v135 = *(_QWORD *)(v134 - 8);
    v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v132, 1, v134);
    v137 = v286;
    if (v136 == 1)
    {
      sub_100004048(v132, &qword_1010F8378);
      (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v137, 1, 1, v52);
    }
    else
    {
      FMNServerInteractionController.InternalServerMetadata.errorCode.getter();
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v132, v134);
      (*(void (**)(uint8_t *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v137, 0, 1, v52);
      v141 = v283;
      sub_10035123C((uint64_t)v137, v283);
      v142 = v272((char *)v141, v52);
      if ((_DWORD)v142 == enum case for ServerStatusCode.preconditionFailed(_:))
      {
        v143 = Logger.logObject.getter(v142);
        v144 = static os_log_type_t.error.getter(v143);
        if (os_log_type_enabled(v143, v144))
        {
          v145 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v145 = 0;
          _os_log_impl((void *)&_mh_execute_header, v143, v144, "Pairing has been completed by another device!", v145, 2u);
          swift_slowDealloc(v145, -1, -1);
        }

        type metadata accessor for SPPairingSessionError(0);
        v139 = v146;
        v140 = 22;
        goto LABEL_57;
      }
      if ((_DWORD)v142 == enum case for ServerStatusCode.locked(_:))
      {
        v178 = Logger.logObject.getter(v142);
        v179 = static os_log_type_t.error.getter(v178);
        if (os_log_type_enabled(v178, v179))
        {
          v180 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v180 = 0;
          _os_log_impl((void *)&_mh_execute_header, v178, v179, " ⍻ Pairing is pending from another device!", v180, 2u);
          swift_slowDealloc(v180, -1, -1);
        }

        type metadata accessor for SPPairingSessionError(0);
        v139 = v181;
        v140 = 21;
        goto LABEL_57;
      }
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v141, v52);
    }
    type metadata accessor for SPPairingSessionError(0);
    v139 = v138;
    v140 = 1;
LABEL_57:
    v293 = v140;
    v182 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v183 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v295, &v293, v182, v139, v183);
    v293 = v295;
    v184 = sub_10001A9A8(&qword_1010F8370);
    CheckedContinuation.resume(throwing:)(&v293, v184);
    sub_100004048((uint64_t)v137, &qword_1010F8380);
    return sub_100004048(v290, &qword_1010F8380);
  }
  if (v65 == enum case for ServerStatusCode.serverConflict(_:))
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v110 = type metadata accessor for Logger(0);
    sub_10001A9E8(v110, (uint64_t)qword_1011B7AE0);
    v111 = v291;
    v112 = v27[2](v36, v292, v291);
    v113 = Logger.logObject.getter(v112);
    v114 = static os_log_type_t.error.getter(v113);
    if (os_log_type_enabled(v113, v114))
    {
      v115 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = swift_slowAlloc(32, -1);
      v295 = v116;
      *(_DWORD *)v115 = 136446210;
      v117 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v118 = dispatch thunk of CustomStringConvertible.description.getter(v111, v117);
      v293 = sub_100016940(v118, v119, &v295);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v115 + 4, v115 + 12);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v27[1])(v36, v111);
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "Linked to another Apple ID. %{public}s", v115, 0xCu);
      swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v115, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v27[1])(v36, v111);
    }

    type metadata accessor for SPPairingSessionError(0);
    v80 = v177;
    v81 = 18;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v46, v52);
LABEL_2:
  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v55 = type metadata accessor for Logger(0);
  sub_10001A9E8(v55, (uint64_t)qword_1011B7AE0);
  v56 = v291;
  v57 = v27[2](v30, v292, v291);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.error.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(12, -1);
    v61 = swift_slowAlloc(32, -1);
    v295 = v61;
    *(_DWORD *)v60 = 136446210;
    v62 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v63 = dispatch thunk of CustomStringConvertible.description.getter(v56, v62);
    v293 = sub_100016940(v63, v64, &v295);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v293, v294, v60 + 4, v60 + 12);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v27[1])(v30, v56);
    _os_log_impl((void *)&_mh_execute_header, v58, v59, " Pairing lock failed: %{public}s", v60, 0xCu);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v27[1])(v30, v56);
  }

  type metadata accessor for SPPairingSessionError(0);
  v80 = v79;
  v81 = 1;
LABEL_13:
  v293 = v81;
  v82 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v83 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v295, &v293, v82, v80, v83);
  v293 = v295;
  v84 = sub_10001A9A8(&qword_1010F8370);
  CheckedContinuation.resume(throwing:)(&v293, v84);
  return sub_100004048(v290, &qword_1010F8380);
}

uint64_t sub_100349580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  v3[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FMNAccountType(0);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v3[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessoryIdentityPairingLockAckEndPoint(0);
  v3[11] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v8);
  v3[13] = swift_task_alloc(v8);
  return swift_task_switch(sub_10034963C, 0, 0);
}

uint64_t sub_10034963C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t);

  v1 = v0[12];
  v2 = (_QWORD *)v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[8];
  v7 = v0[6];
  v6 = v0[7];
  v19 = (_QWORD *)v0[5];
  v8 = enum case for FMNAccountType.w2Accessory(_:);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[9] + 104);
  v9(v3, enum case for FMNAccountType.w2Accessory(_:), v5);
  v10 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v10, 56, 7);
  *v2 = sub_100C511C4(v3);
  v9((uint64_t)v2 + *(int *)(v4 + 20), v8, v5);
  v11 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v6);
  v14 = type metadata accessor for ServerInteractionController(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  sub_10005972C((uint64_t)v2, v1, type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  v0[14] = sub_10041D370(v1, v13, v15);
  v16 = *(_QWORD *)(v7 + 16);
  swift_retain();
  sub_100350D10(v19);
  v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101116120 + dword_101116120);
  v17 = (_QWORD *)swift_task_alloc(unk_101116124);
  v0[15] = v17;
  *v17 = v0;
  v17[1] = sub_1003497D8;
  return v20(v0[5], v16);
}

uint64_t sub_1003497D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 120);
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100349838, 0, 0);
}

uint64_t sub_100349838()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 136);
    v2 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD **)(v0 + 112);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
    sub_10001BBBC(v3, v2);
    v5 = sub_10034CD00(v1, v3, v2, 0, v4);
    *(_QWORD *)(v0 + 152) = v5;
    sub_100153D94(v1, v3, v2);
    v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 160) = v6;
    v7 = type metadata accessor for PencilPairingLockAckResponse(0);
    *v6 = v0;
    v6[1] = sub_100349AAC;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 32), 0, 0, 0xD00000000000001ALL, 0x8000000100ED1EB0, sub_100350E54, v5, v7);
  }
  else
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7AE0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, " Could not create pairing ack request", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 104);

    type metadata accessor for SPPairingSessionError(0);
    v16 = v15;
    *(_QWORD *)(v0 + 24) = 6;
    v17 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v18 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    v19 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v17, v16, v18);
    swift_willThrow(v19);
    swift_release();
    sub_1000126B0(v14, type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100349AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100349BB8;
  else
    v3 = sub_100349B10;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100349B10()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  swift_release();
  swift_release();
  sub_100153D94(v3, v2, v1);
  sub_1000126B0(v4, type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100349BB8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 104);
  swift_release();
  swift_release();
  sub_100153D94(v3, v2, v1);
  sub_1000126B0(v4, type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100349C54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, char *, uint64_t);
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  v2 = sub_10001A9A8(&qword_1010F8348);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v6(v5, a1, v2);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = v8 + v4;
  v10 = v7 | 7;
  v11 = swift_allocObject(&unk_10106DEF0, v9, v7 | 7);
  v12 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 32);
  v12(v11 + v8, v5, v2);
  Future.addFailure(block:)(sub_100350E68, v11);
  swift_release();
  swift_release();
  v6(v5, v16, v2);
  v13 = swift_allocObject(&unk_10106DF18, v9, v10);
  v12(v13 + v8, v5, v2);
  Future.addSuccess(block:)(sub_100350ED4, v13);
  swift_release();
  return swift_release();
}

uint64_t sub_100349DA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7AE0);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v17 = a1;
    v18 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_errorRetain(a1);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(&v17, v8);
    v17 = sub_100016940(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, " Ack pairing failed. %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  type metadata accessor for SPPairingSessionError(0);
  v12 = v11;
  v17 = 5;
  v13 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v14 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v18, &v17, v13, v12, v14);
  v17 = v18;
  v15 = sub_10001A9A8(&qword_1010F8348);
  return CheckedContinuation.resume(throwing:)(&v17, v15);
}

uint64_t sub_100349FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint8_t *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = type metadata accessor for PencilPairingLockAckResponse(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v56 - v8;
  v10 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v56 - v16;
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v15) == 200)
  {
    v61 = v4;
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7AE0);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a1, v10);
    v60 = v19;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v59 = v7;
    if (v23)
    {
      v24 = swift_slowAlloc(12, -1);
      v58 = v9;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v62 = a2;
      v27 = v26;
      v64 = v26;
      *(_DWORD *)v25 = 136446210;
      v57 = v25 + 4;
      v28 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v10, v28);
      v63 = sub_100016940(v29, v30, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v57, v25 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, " Ack pairing success: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v31 = v25;
      v9 = v58;
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }

    v41 = type metadata accessor for JSONDecoder(0);
    v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
    v43 = JSONDecoder.init()(v42);
    v44 = FMNServerInteractionController.FMNResponseFields.data.getter(v43);
    v46 = v45;
    v47 = sub_100006204(&qword_1010F8350, type metadata accessor for PencilPairingLockAckResponse, (uint64_t)&unk_100E5F798);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v61, v44, v46, v61, v47);
    sub_10001BC14(v44, v46);
    v53 = (uint64_t)v59;
    sub_10005972C((uint64_t)v9, (uint64_t)v59, type metadata accessor for PencilPairingLockAckResponse);
    v54 = sub_10001A9A8(&qword_1010F8348);
    CheckedContinuation.resume(returning:)(v53, v54);
    swift_release();
    return sub_1000126B0((uint64_t)v9, type metadata accessor for PencilPairingLockAckResponse);
  }
  else
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B7AE0);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v64 = v37;
      v62 = a2;
      *(_DWORD *)v36 = 136446210;
      v38 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v10, v38);
      v63 = sub_100016940(v39, v40, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, " Ack pairing failed. Response %{public}s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }

    type metadata accessor for SPPairingSessionError(0);
    v49 = v48;
    v63 = 1;
    v50 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v51 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v64, &v63, v50, v49, v51);
    v63 = v64;
    v52 = sub_10001A9A8(&qword_1010F8348);
    return CheckedContinuation.resume(throwing:)(&v63, v52);
  }
}

uint64_t sub_10034A764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch(sub_10034A77C, 0, 0);
}

uint64_t sub_10034A77C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (_QWORD *)v0[4];
  v2 = *(_QWORD *)(v0[5] + 16);
  swift_retain();
  sub_100350B58(v1);
  v5 = (char *)&dword_10110C138 + dword_10110C138;
  v3 = (_QWORD *)swift_task_alloc(unk_10110C13C);
  v0[6] = v3;
  *v3 = v0;
  v3[1] = sub_10034A7FC;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[4], v2);
}

uint64_t sub_10034A7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  v4[7] = a1;
  v4[8] = a2;
  v4[9] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10034A85C, 0, 0);
}

uint64_t sub_10034A85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 32);
    v5 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 80) = v5;
    v5[2] = v4;
    v5[3] = v1;
    v5[4] = v3;
    v5[5] = v2;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 88) = v6;
    *v6 = v0;
    v6[1] = sub_10034AA50;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000024, 0x8000000100ED1E80, sub_100350BC0, v5, &type metadata for () + 1);
  }
  else
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7AE0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not create unpair command", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    type metadata accessor for SPPairingSessionError(0);
    v14 = v13;
    *(_QWORD *)(v0 + 24) = 6;
    v15 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v16 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    v17 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v15, v14, v16);
    swift_willThrow(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10034AA50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10034AAF4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 80));
    v4 = sub_10034AABC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10034AABC()
{
  uint64_t v0;

  sub_100153D94(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034AAF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  sub_100153D94(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034AB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v87 = a3;
  v89 = a1;
  v8 = sub_10001A9A8(&qword_1010F8318);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v11);
  v86 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for FMNAccountType(0);
  v82 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v83 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PencilUnpairEndPoint(0);
  v15 = __chkstk_darwin(v14);
  v85 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v74 - v17;
  v19 = type metadata accessor for PencilUnpairData.DeviceUnpairData(0);
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(v23 + 16))
  {
    v81 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    v24 = v23 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v80 = v14;
    v88 = v18;
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7AE0);
    v26 = sub_10005972C(v24, (uint64_t)v22, type metadata accessor for PencilUnpairData.DeviceUnpairData);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      v30 = swift_slowAlloc(22, -1);
      v77 = a4;
      v31 = v30;
      v32 = swift_slowAlloc(32, -1);
      v76 = v32;
      *(_DWORD *)v31 = 141558275;
      v90 = 1752392040;
      v91 = v32;
      v79 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2081;
      v74 = v31 + 14;
      v75 = v29;
      v33 = v9;
      v34 = *v22;
      v35 = v22[1];
      sub_10001BBBC(*v22, v35);
      v36 = a5;
      v37 = Data.description.getter(v34, v35);
      v78 = v10;
      v39 = v38;
      v40 = v35;
      v9 = v33;
      sub_10001BC14(v34, v40);
      v41 = v37;
      a5 = v36;
      v90 = sub_100016940(v41, v39, &v91);
      v8 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v74, v31 + 22);
      v10 = v78;
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v22, type metadata accessor for PencilUnpairData.DeviceUnpairData);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v75, "Removing pairing lock for Serial Number - %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
      v42 = v76;
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      v43 = v31;
      a4 = v77;
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v22, type metadata accessor for PencilUnpairData.DeviceUnpairData);
    }

    v49 = enum case for FMNAccountType.w2Accessory(_:);
    v50 = (uint64_t)v83;
    v51 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 104);
    v52 = v84;
    v51(v83, enum case for FMNAccountType.w2Accessory(_:), v84);
    v53 = type metadata accessor for AccountURLComponents();
    swift_allocObject(v53, 56, 7);
    v54 = sub_100C511C4(v50);
    v55 = v88;
    *(_QWORD *)v88 = v54;
    v51(&v55[*(int *)(v80 + 20)], v49, v52);
    v56 = type metadata accessor for SearchPartyURLSessionFactory(0);
    swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
    v57 = type metadata accessor for FMNMockingPreferences(0);
    v58 = v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v86, 1, 1, v57);
    v59 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v58);
    v60 = type metadata accessor for ServerInteractionController(0);
    v61 = swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    v62 = v85;
    sub_10005972C((uint64_t)v55, v85, type metadata accessor for PencilUnpairEndPoint);
    v63 = (char *)sub_10041D82C(v62, v59, v61);
    v86 = v63;
    v64 = v87;
    swift_bridgeObjectRetain(v87);
    sub_10001BBBC(a4, a5);
    sub_10034CF90(v64, a4, a5, 0, v63);
    swift_bridgeObjectRelease();
    sub_10001BC14(a4, a5);
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v66 = v81;
    v65(v81, v89, v8);
    v67 = *(unsigned __int8 *)(v9 + 80);
    v68 = (v67 + 16) & ~v67;
    v69 = v68 + v10;
    v70 = v67 | 7;
    v71 = swift_allocObject(&unk_10106DE28, v68 + v10, v67 | 7);
    v72 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
    v72(v71 + v68, v66, v8);
    Future.addFailure(block:)(sub_100350C14, v71);
    swift_release();
    swift_release();
    v65(v66, v89, v8);
    v73 = swift_allocObject(&unk_10106DE50, v69, v70);
    v72(v73 + v68, v66, v8);
    Future.addSuccess(block:)(sub_100350C34, v73);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return sub_1000126B0((uint64_t)v88, type metadata accessor for PencilUnpairEndPoint);
  }
  else
  {
    type metadata accessor for SPPairingSessionError(0);
    v45 = v44;
    v90 = 6;
    v46 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v47 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v91, &v90, v46, v45, v47);
    v90 = v91;
    return CheckedContinuation.resume(throwing:)(&v90, v8);
  }
}

uint64_t sub_10034B19C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7AE0);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(a1);
    v8 = _swift_stdlib_bridgeErrorToNSError(a1);
    v17 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Remove pairing lock command failed. Error - %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  type metadata accessor for SPPairingSessionError(0);
  v11 = v10;
  v16 = 6;
  v12 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v13 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v17, &v16, v12, v11, v13);
  v16 = v17;
  v14 = sub_10001A9A8(&qword_1010F8318);
  return CheckedContinuation.resume(throwing:)(&v16, v14);
}

uint64_t sub_10034B3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *v31;
  char *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v41 - v9;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v46 = type metadata accessor for Logger(0);
  sub_10001A9E8(v46, (uint64_t)qword_1011B7DF8);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11 = v45(v10, a1, v4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v44 = a2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v43 = v8;
    v17 = v16;
    v48 = v16;
    *(_DWORD *)v15 = 136446210;
    v42 = a1;
    v18 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    v47 = sub_100016940(v19, v20, &v48);
    a1 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v10, v4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Remove pairing lock response %{public}s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v22 = v17;
    v8 = v43;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v10, v4);
  }

  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v23) == 200)
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v24 = sub_10001A9E8(v46, (uint64_t)qword_1011B7AE0);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Remove pairing lock was successful.", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v28 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(returning:)(v28, v28);
  }
  else
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    sub_10001A9E8(v46, (uint64_t)qword_1011B7AE0);
    v30 = v45(v8, a1, v4);
    v31 = Logger.logObject.getter(v30);
    v32 = v8;
    v33 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v34 = 134217984;
      v35 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v34);
      v21(v32, v4);
      v48 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v34 + 4, v34 + 12);
      _os_log_impl((void *)&_mh_execute_header, v31, v33, "Remove pairing lock failed. Status code - %ld", v34, 0xCu);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      v21(v32, v4);
    }

    type metadata accessor for SPPairingSessionError(0);
    v37 = v36;
    v47 = 1;
    v38 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v39 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v48, &v47, v38, v37, v39);
    v47 = v48;
    v40 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(throwing:)(&v47, v40);
  }
}

uint64_t sub_10034B880(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for NFCTapRequest;
  v14 = sub_1003515E0();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E238, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8408, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E260, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034BB10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v26[2];
  __int128 v27[2];
  _QWORD v28[5];
  _QWORD v29[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[3] = &type metadata for AccessoryInfoRequest;
  v14 = sub_1003513AC();
  v29[0] = a1;
  v29[1] = a2;
  v29[4] = v14;
  v29[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E058, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  v19 = sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F83A8, (uint64_t)v18);
  swift_release(v19);
  v20 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = Future.init()();
  sub_10033C338((uint64_t)v29, (uint64_t)v28);
  v22 = (uint64_t)a5 + qword_1010F7CD0;
  v23 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v23 + 16, a5);
  sub_100030784(v22, (uint64_t)v27);
  sub_100030784((uint64_t)v28, (uint64_t)v26);
  v24 = (_QWORD *)swift_allocObject(&unk_10106E080, 120, 7);
  v24[2] = v21;
  v24[3] = v23;
  sub_10000F9FC(v27, (uint64_t)(v24 + 4));
  sub_10000F9FC(v26, (uint64_t)(v24 + 9));
  v24[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v22, v28, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v24);
  swift_release(v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  swift_release(v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  return v21;
}

uint64_t sub_10034BDA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for UnpairRequest;
  v14 = sub_100351444();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E0F8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F83C8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E120, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034C030(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for PairingLockCheckRequest;
  v14 = sub_100351840();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E4B8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8488, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E4E0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034C2C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AccessoryPairingLockCheckRequest;
  v14 = sub_100351970();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E5F8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F84C8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E620, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034C550(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AccessoryUnpairRequest;
  v14 = sub_100351924();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E5A8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F84B8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E5D0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034C7E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AccessoryPairingLockAckRequest;
  v14 = sub_1003518D8();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E558, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F84A8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E580, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034CA70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for PencilPairingLockCheckRequest;
  v14 = sub_100351360();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E008, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8398, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E030, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034CD00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for PencilPairingLockAckRequest;
  v14 = sub_100350EE8();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106DF40, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8360, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106DF68, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034CF90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for PencilUnpairRequest;
  v14 = sub_100350C48();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106DEA0, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F7E48, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106DEC8, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100350CB8, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034D220(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for SecureLocationsConfigRequest;
  v14 = sub_1003516C4();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E328, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8438, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E350, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034D4B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for SecureLocationsFetchRequest;
  v14 = sub_100351710();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E378, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8448, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E3A0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034D740(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for SecureLocationsLabelledLocationsRequest;
  v14 = sub_1003517A8();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E418, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8468, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E440, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034D9D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for SecureLocationsSubmitRequest;
  v14 = sub_1003517F4();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E468, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8478, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E490, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034DC60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for SecureLocationsUnsubscribeRequest;
  v14 = sub_10035188C();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E508, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8498, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E530, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034DEF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for SecureLocationsPushAckRequest;
  v14 = sub_10035175C();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E3C8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8458, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E3F0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034E180(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for PairingLockAckRequest;
  v14 = sub_100351594();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E1E8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F83F8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E210, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034E410(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsLEPairingLockCheckRequest;
  v14 = sub_100351A08();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E698, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F84E8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E6C0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034E6A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsSWPairingLockCheckRequest;
  v14 = sub_100351AA0();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E738, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8508, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E760, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034E930(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsPairingLockCheckRequest;
  v14 = sub_100351678();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E2D8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8428, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E300, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034EBC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsUnpairRequest;
  v14 = sub_100351490();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E148, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F83D8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E170, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034EE50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsPairingLockAckRequest;
  v14 = sub_10035162C();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E288, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F8418, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E2B0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034F0E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsLEPairingLockAckRequest;
  v14 = sub_1003519BC();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E648, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F84D8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E670, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034F370(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsSWPairingLockAckRequest;
  v14 = sub_100351A54();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E6E8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F84F8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E710, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034F600(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AccountCheckRequest;
  v14 = sub_1003513F8();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E0A8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F83B8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E0D0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034F890(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25[2];
  __int128 v26[2];
  _QWORD v27[5];
  _QWORD v28[5];

  v10 = *a5;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for PairingLockUpdateRequest;
  v14 = sub_1003514DC();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v14;
  v28[2] = a3;
  v15 = *(void **)((char *)a5 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v15, "lock");
  *((_BYTE *)a5 + qword_1010F7CE8) = 0;
  objc_msgSend(v15, "unlock");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v17 + 16, a5);
  v18 = (_QWORD *)swift_allocObject(&unk_10106E198, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F83E8, (uint64_t)v18);
  swift_release();
  v19 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  sub_10033C338((uint64_t)v28, (uint64_t)v27);
  v21 = (uint64_t)a5 + qword_1010F7CD0;
  v22 = swift_allocObject(&unk_10106DE78, 24, 7);
  swift_weakInit(v22 + 16, a5);
  sub_100030784(v21, (uint64_t)v26);
  sub_100030784((uint64_t)v27, (uint64_t)v25);
  v23 = (_QWORD *)swift_allocObject(&unk_10106E1C0, 120, 7);
  v23[2] = v20;
  v23[3] = v22;
  sub_10000F9FC(v26, (uint64_t)(v23 + 4));
  sub_10000F9FC(v25, (uint64_t)(v23 + 9));
  v23[14] = v10;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v21, v27, 0x6170686372616573, 0xEB00000000797472, a4, sub_100353D20, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v20;
}

uint64_t sub_10034FB20(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v5 = 0xEC0000007265626DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v8 = 0xE900000000000064;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10034FCF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[9];
  unint64_t v30;

  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PencilUnpairData.DeviceUnpairData(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v11 = sub_1001EE37C(*(_QWORD *)(a1 + v10[10]), *(_QWORD *)(a1 + v10[11]));
  if (v12 >> 60 != 15)
  {
    v17 = v11;
    v29[3] = a2;
    v29[5] = v9;
    v29[6] = v2;
    v18 = (uint64_t *)(a1 + v10[7]);
    v19 = a1;
    v20 = *v18;
    v21 = v18[1];
    v22 = v10[9];
    v29[4] = v19;
    v23 = v19 + v22;
    v30 = v12;
    v24 = type metadata accessor for UUID(0);
    v25 = *(_QWORD *)(v24 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v7, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v7, 0, 1, v24);
    v29[7] = v21;
    v29[8] = v20;
    sub_10001BBBC(v20, v21);
    v26 = sub_1001EDBAC(v17, v30);
    v28 = v27;
    Data.hexString.getter(v26, v27);
    sub_10001BC14(v26, v28);
    __asm { BR              X11 }
  }
  v13 = sub_100350CCC();
  v14 = swift_allocError(&type metadata for PencilPairingService.Error, v13, 0, 0);
  *(_OWORD *)v15 = xmmword_100E2E410;
  *(_BYTE *)(v15 + 16) = 3;
  swift_willThrow(v14);
  return sub_1000126B0(a1, type metadata accessor for LocalFindableAccessoryRecord);
}

uint64_t sub_100350104(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v5 = 0xE900000000000064;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v7 = 0xEB00000000644970;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 1684628597 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628597, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6F4365766F6D6572 && a2 == 0xED0000747865746ELL)
  {
    v10 = 0xED0000747865746ELL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4365766F6D6572, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1003503B4(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  unint64_t v82;
  _QWORD v83[3];
  uint64_t v84;
  _UNKNOWN **v85;
  _QWORD v86[3];
  ValueMetadata *v87;
  _UNKNOWN **v88;

  v87 = &type metadata for PencilPairingCheckData;
  v88 = &off_10106E988;
  v86[0] = swift_allocObject(&unk_10106DFE0, 320, 7);
  memcpy((void *)(v86[0] + 16), a1, 0x130uLL);
  v84 = type metadata accessor for PencilPairingLockCheckResponse(0);
  v85 = &off_10107A100;
  v4 = sub_100018F08(v83);
  sub_10005972C(a2, (uint64_t)v4, type metadata accessor for PencilPairingLockCheckResponse);
  v5 = sub_1001B0340((uint64_t *)a1);
  v6 = static os_log_type_t.debug.getter(v5);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v7 = qword_1011B7DF0;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = sub_10001AA44(v86, (uint64_t)&type metadata for PencilPairingCheckData);
  v11 = v10[30];
  v12 = v10[31];
  sub_10001BBBC(v11, v12);
  v13 = Data.hexString.getter(v11, v12);
  v15 = v14;
  sub_10001BC14(v11, v12);
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v9 + 64) = v16;
  *(_QWORD *)(v9 + 32) = v13;
  *(_QWORD *)(v9 + 40) = v15;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "nonce: %@", 9, 2, v9);
  v17 = swift_bridgeObjectRelease();
  v18 = static os_log_type_t.debug.getter(v17);
  v19 = qword_1011B7DF0;
  v20 = v8;
  v21 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = sub_10001AA44(v83, v84);
  v23 = *v22;
  v24 = v22[1];
  sub_10001BBBC(*v22, v24);
  v25 = Data.hexString.getter(v23, v24);
  v27 = v26;
  sub_10001BC14(v23, v24);
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = v16;
  *(_QWORD *)(v21 + 32) = v25;
  *(_QWORD *)(v21 + 40) = v27;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "serialNumber: %@", 16, 2, v21);
  v28 = swift_bridgeObjectRelease();
  v29 = static os_log_type_t.debug.getter(v28);
  v30 = qword_1011B7DF0;
  v31 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v32 = sub_10001AA44(v83, v84);
  v33 = v32[2];
  v34 = v32[3];
  sub_10001BBBC(v33, v34);
  v35 = Data.hexString.getter(v33, v34);
  v37 = v36;
  sub_10001BC14(v33, v34);
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = v16;
  *(_QWORD *)(v31 + 32) = v35;
  *(_QWORD *)(v31 + 40) = v37;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "altSerialNumber: %@", 19, 2, v31);
  v38 = swift_bridgeObjectRelease();
  v39 = static os_log_type_t.debug.getter(v38);
  v40 = qword_1011B7DF0;
  v41 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
  v42 = sub_10001AA44(v86, (uint64_t)v87);
  v43 = v42[18];
  v44 = v42[19];
  sub_10001BBBC(v43, v44);
  v45 = Data.hexString.getter(v43, v44);
  v47 = v46;
  sub_10001BC14(v43, v44);
  *(_QWORD *)(v41 + 56) = &type metadata for String;
  *(_QWORD *)(v41 + 64) = v16;
  *(_QWORD *)(v41 + 32) = v45;
  *(_QWORD *)(v41 + 40) = v47;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "SeedK1: %@", 10, 2, v41);
  v48 = swift_bridgeObjectRelease();
  v49 = static os_log_type_t.debug.getter(v48);
  v50 = qword_1011B7DF0;
  v51 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
  v52 = sub_10001AA44(v83, v84);
  v53 = v52[4];
  v54 = v52[5];
  sub_10001BBBC(v53, v54);
  v55 = Data.hexString.getter(v53, v54);
  v57 = v56;
  sub_10001BC14(v53, v54);
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  *(_QWORD *)(v51 + 64) = v16;
  *(_QWORD *)(v51 + 32) = v55;
  *(_QWORD *)(v51 + 40) = v57;
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "SeedS: %@", 9, 2, v51);
  swift_bridgeObjectRelease();
  v58 = sub_10001AA44(v86, (uint64_t)v87);
  v59 = v58[30];
  v60 = v58[31];
  v81 = v59;
  v82 = v60;
  v61 = sub_10001AA44(v83, v84);
  v62 = *v61;
  v63 = v61[1];
  sub_10001BBBC(v59, v60);
  sub_10001BBBC(v62, v63);
  Data.append(_:)(v62, v63);
  sub_10001BC14(v62, v63);
  v64 = sub_10001AA44(v83, v84);
  v65 = v64[2];
  v66 = v64[3];
  sub_10001BBBC(v65, v66);
  Data.append(_:)(v65, v66);
  sub_10001BC14(v65, v66);
  v67 = sub_10001AA44(v86, (uint64_t)v87);
  v68 = v67[18];
  v69 = v67[19];
  sub_10001BBBC(v68, v69);
  Data.append(_:)(v68, v69);
  sub_10001BC14(v68, v69);
  v70 = sub_10001AA44(v83, v84);
  v71 = v70[4];
  v72 = v70[5];
  sub_10001BBBC(v71, v72);
  Data.append(_:)(v71, v72);
  v73 = sub_10001BC14(v71, v72);
  v74 = static os_log_type_t.default.getter(v73);
  v75 = qword_1011B7DF0;
  v76 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v76 + 16) = xmmword_100E22B00;
  sub_10001BBBC(v81, v82);
  v77 = Data.hexString.getter(v81, v82);
  v79 = v78;
  sub_10001BC14(v81, v82);
  *(_QWORD *)(v76 + 56) = &type metadata for String;
  *(_QWORD *)(v76 + 64) = v16;
  *(_QWORD *)(v76 + 32) = v77;
  *(_QWORD *)(v76 + 40) = v79;
  os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v75, " dataForSignatureVerification: %@", 33, 2, v76);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v86);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v83);
  return v81;
}

uint64_t sub_1003509B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char v14;
  uint64_t v15;
  __CFString *v16;

  if (qword_1010E9B80 != -1)
    swift_once(&qword_1010E9B80, sub_1003462AC);
  v8 = qword_1011B6DD0;
  if ((unint64_t)qword_1011B6DD0 >> 60 == 15)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7E28);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "verifyPencilSignature: Missing SignatureVerificationKey!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = 0;
  }
  else
  {
    v15 = qword_1011B6DC8;
    sub_10001BD08(qword_1011B6DC8, qword_1011B6DD0);
    v16 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
    v14 = sub_1007DFE84(v15, v8, a1, a2, a3, a4, v16);

    sub_10001EF3C(v15, v8);
  }
  return v14 & 1;
}

_QWORD *sub_100350B58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[7];
  v5 = a1[9];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_100350BC0(uint64_t a1)
{
  uint64_t v1;

  return sub_10034AB34(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t type metadata accessor for PencilUnpairData.DeviceUnpairData(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F8568;
  if (!qword_1010F8568)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PencilUnpairData.DeviceUnpairData);
  return result;
}

uint64_t sub_100350C08()
{
  return sub_1000076EC(&qword_1010F8318);
}

uint64_t sub_100350C14(uint64_t a1)
{
  return sub_100350E7C(a1, &qword_1010F8318, (uint64_t (*)(uint64_t, uint64_t))sub_10034B19C);
}

uint64_t sub_100350C28()
{
  return sub_1000076EC(&qword_1010F8318);
}

uint64_t sub_100350C34(uint64_t a1)
{
  return sub_100350E7C(a1, &qword_1010F8318, sub_10034B3C8);
}

unint64_t sub_100350C48()
{
  unint64_t result;

  result = qword_1010F8320;
  if (!qword_1010F8320)
  {
    result = swift_getWitnessTable("Ed$", &type metadata for PencilUnpairRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8320);
  }
  return result;
}

uint64_t sub_100350C8C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100350CB8(uint64_t a1)
{
  uint64_t *v1;

  sub_10033AF98(a1, v1[2], v1[3], (uint64_t)(v1 + 4), (uint64_t)(v1 + 9), v1[14]);
}

unint64_t sub_100350CCC()
{
  unint64_t result;

  result = qword_1010F8330;
  if (!qword_1010F8330)
  {
    result = swift_getWitnessTable(aE_8, &type metadata for PencilPairingService.Error);
    atomic_store(result, (unint64_t *)&qword_1010F8330);
  }
  return result;
}

_QWORD *sub_100350D10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[15];
  v14 = a1[14];
  v15 = a1[17];
  v16 = a1[16];
  v17 = a1[19];
  v18 = a1[18];
  v19 = a1[21];
  v20 = a1[20];
  v21 = a1[23];
  v22 = a1[22];
  v23 = a1[25];
  v24 = a1[24];
  v25 = a1[27];
  v26 = a1[29];
  v27 = a1[28];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BD08(v20, v19);
  sub_10001BBBC(v22, v21);
  sub_10001BBBC(v24, v23);
  swift_bridgeObjectRetain(v25);
  sub_10001BD08(v27, v26);
  return a1;
}

uint64_t sub_100350E54(uint64_t a1)
{
  return sub_100349C54(a1);
}

uint64_t sub_100350E5C()
{
  return sub_1000076EC(&qword_1010F8348);
}

uint64_t sub_100350E68(uint64_t a1)
{
  return sub_100350E7C(a1, &qword_1010F8348, (uint64_t (*)(uint64_t, uint64_t))sub_100349DA8);
}

uint64_t sub_100350E7C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(a2) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_100350EC8()
{
  return sub_1000076EC(&qword_1010F8348);
}

uint64_t sub_100350ED4(uint64_t a1)
{
  return sub_100350E7C(a1, &qword_1010F8348, sub_100349FF0);
}

unint64_t sub_100350EE8()
{
  unint64_t result;

  result = qword_1010F8358;
  if (!qword_1010F8358)
  {
    result = swift_getWitnessTable(aE_9, &type metadata for PencilPairingLockAckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8358);
  }
  return result;
}

uint64_t sub_100350F30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1010F7E2C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_10033C494(a1, v4, v5, v6);
}

uint64_t sub_100350FA0(uint64_t a1)
{
  uint64_t v1;

  return sub_100347324(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100350FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010F8370);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100351028(uint64_t a1)
{
  sub_10001A9A8(&qword_1010F8370);
  return sub_1003474EC(a1);
}

uint64_t sub_10035106C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = sub_10001A9A8(&qword_1010F8370);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  v6 = (uint64_t *)(v0 + v5);
  v7 = *(_QWORD *)(v0 + v5 + 8);
  if (v7 >> 60 != 15)
    sub_10001BC14(*v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v6[8], v6[9]);
  sub_10001BC14(v6[10], v6[11]);
  sub_10001BC14(v6[12], v6[13]);
  swift_bridgeObjectRelease();
  sub_10001BC14(v6[18], v6[19]);
  sub_10001BC14(v6[20], v6[21]);
  sub_10001BC14(v6[22], v6[23]);
  sub_10001BC14(v6[24], v6[25]);
  sub_10001BC14(v6[26], v6[27]);
  v8 = v6[29];
  if (v8 >> 60 != 15)
    sub_10001BC14(v6[28], v8);
  sub_10001BC14(v6[30], v6[31]);
  sub_10001BC14(v6[32], v6[33]);
  swift_bridgeObjectRelease();
  v9 = v6[37];
  if (v9 >> 60 != 15)
    sub_10001BC14(v6[36], v9);
  return swift_deallocObject(v0, ((v5 + 311) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1003511CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_10001A9A8(&qword_1010F8370) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100347734(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), (uint64_t *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10035123C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F8380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100351284()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = v0[3];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[2], v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[10], v0[11]);
  sub_10001BC14(v0[12], v0[13]);
  sub_10001BC14(v0[14], v0[15]);
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[20], v0[21]);
  sub_10001BC14(v0[22], v0[23]);
  sub_10001BC14(v0[24], v0[25]);
  sub_10001BC14(v0[26], v0[27]);
  sub_10001BC14(v0[28], v0[29]);
  v2 = v0[31];
  if (v2 >> 60 != 15)
    sub_10001BC14(v0[30], v2);
  sub_10001BC14(v0[32], v0[33]);
  sub_10001BC14(v0[34], v0[35]);
  swift_bridgeObjectRelease();
  v3 = v0[39];
  if (v3 >> 60 != 15)
    sub_10001BC14(v0[38], v3);
  return swift_deallocObject(v0, 320, 7);
}

unint64_t sub_100351360()
{
  unint64_t result;

  result = qword_1010F8390;
  if (!qword_1010F8390)
  {
    result = swift_getWitnessTable(byte_100E2A938, &type metadata for PencilPairingLockCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8390);
  }
  return result;
}

unint64_t sub_1003513AC()
{
  unint64_t result;

  result = qword_1010F83A0;
  if (!qword_1010F83A0)
  {
    result = swift_getWitnessTable(a1_8, &type metadata for AccessoryInfoRequest);
    atomic_store(result, (unint64_t *)&qword_1010F83A0);
  }
  return result;
}

unint64_t sub_1003513F8()
{
  unint64_t result;

  result = qword_1010F83B0;
  if (!qword_1010F83B0)
  {
    result = swift_getWitnessTable(aE_10, &type metadata for AccountCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F83B0);
  }
  return result;
}

unint64_t sub_100351444()
{
  unint64_t result;

  result = qword_1010F83C0;
  if (!qword_1010F83C0)
  {
    result = swift_getWitnessTable(asc_100E6818C, &type metadata for UnpairRequest);
    atomic_store(result, (unint64_t *)&qword_1010F83C0);
  }
  return result;
}

unint64_t sub_100351490()
{
  unint64_t result;

  result = qword_1010F83D0;
  if (!qword_1010F83D0)
  {
    result = swift_getWitnessTable(byte_100E48ED8, &type metadata for AirPodsUnpairRequest);
    atomic_store(result, (unint64_t *)&qword_1010F83D0);
  }
  return result;
}

unint64_t sub_1003514DC()
{
  unint64_t result;

  result = qword_1010F83E0;
  if (!qword_1010F83E0)
  {
    result = swift_getWitnessTable(byte_100E68914, &type metadata for PairingLockUpdateRequest);
    atomic_store(result, (unint64_t *)&qword_1010F83E0);
  }
  return result;
}

uint64_t sub_100351524(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1010F7E2C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_10033C494(a1, v4, v5, v6);
}

unint64_t sub_100351594()
{
  unint64_t result;

  result = qword_1010F83F0;
  if (!qword_1010F83F0)
  {
    result = swift_getWitnessTable(byte_100E4E490, &type metadata for PairingLockAckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F83F0);
  }
  return result;
}

unint64_t sub_1003515E0()
{
  unint64_t result;

  result = qword_1010F8400;
  if (!qword_1010F8400)
  {
    result = swift_getWitnessTable(byte_100E48A90, &type metadata for NFCTapRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8400);
  }
  return result;
}

unint64_t sub_10035162C()
{
  unint64_t result;

  result = qword_1010F8410;
  if (!qword_1010F8410)
  {
    result = swift_getWitnessTable(byte_100E5B938, &type metadata for AirPodsPairingLockAckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8410);
  }
  return result;
}

unint64_t sub_100351678()
{
  unint64_t result;

  result = qword_1010F8420;
  if (!qword_1010F8420)
  {
    result = swift_getWitnessTable(asc_100E454B8, &type metadata for AirPodsPairingLockCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8420);
  }
  return result;
}

unint64_t sub_1003516C4()
{
  unint64_t result;

  result = qword_1010F8430;
  if (!qword_1010F8430)
  {
    result = swift_getWitnessTable(byte_100E40FE4, &type metadata for SecureLocationsConfigRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8430);
  }
  return result;
}

unint64_t sub_100351710()
{
  unint64_t result;

  result = qword_1010F8440;
  if (!qword_1010F8440)
  {
    result = swift_getWitnessTable(byte_100E3A42C, &type metadata for SecureLocationsFetchRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8440);
  }
  return result;
}

unint64_t sub_10035175C()
{
  unint64_t result;

  result = qword_1010F8450;
  if (!qword_1010F8450)
  {
    result = swift_getWitnessTable("Mh$", &type metadata for SecureLocationsPushAckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8450);
  }
  return result;
}

unint64_t sub_1003517A8()
{
  unint64_t result;

  result = qword_1010F8460;
  if (!qword_1010F8460)
  {
    result = swift_getWitnessTable(byte_100E644C4, &type metadata for SecureLocationsLabelledLocationsRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8460);
  }
  return result;
}

unint64_t sub_1003517F4()
{
  unint64_t result;

  result = qword_1010F8470;
  if (!qword_1010F8470)
  {
    result = swift_getWitnessTable("Q<#", &type metadata for SecureLocationsSubmitRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8470);
  }
  return result;
}

unint64_t sub_100351840()
{
  unint64_t result;

  result = qword_1010F8480;
  if (!qword_1010F8480)
  {
    result = swift_getWitnessTable("ad$", &type metadata for PairingLockCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8480);
  }
  return result;
}

unint64_t sub_10035188C()
{
  unint64_t result;

  result = qword_1010F8490;
  if (!qword_1010F8490)
  {
    result = swift_getWitnessTable(byte_100E51B94, &type metadata for SecureLocationsUnsubscribeRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8490);
  }
  return result;
}

unint64_t sub_1003518D8()
{
  unint64_t result;

  result = qword_1010F84A0;
  if (!qword_1010F84A0)
  {
    result = swift_getWitnessTable(byte_100E70D38, &type metadata for AccessoryPairingLockAckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F84A0);
  }
  return result;
}

unint64_t sub_100351924()
{
  unint64_t result;

  result = qword_1010F84B0;
  if (!qword_1010F84B0)
  {
    result = swift_getWitnessTable(byte_100E2F128, &type metadata for AccessoryUnpairRequest);
    atomic_store(result, (unint64_t *)&qword_1010F84B0);
  }
  return result;
}

unint64_t sub_100351970()
{
  unint64_t result;

  result = qword_1010F84C0;
  if (!qword_1010F84C0)
  {
    result = swift_getWitnessTable(byte_100E6D4FC, &type metadata for AccessoryPairingLockCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F84C0);
  }
  return result;
}

unint64_t sub_1003519BC()
{
  unint64_t result;

  result = qword_1010F84D0;
  if (!qword_1010F84D0)
  {
    result = swift_getWitnessTable(byte_100E29A38, &type metadata for AirPodsLEPairingLockAckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F84D0);
  }
  return result;
}

unint64_t sub_100351A08()
{
  unint64_t result;

  result = qword_1010F84E0;
  if (!qword_1010F84E0)
  {
    result = swift_getWitnessTable(byte_100E528FC, &type metadata for AirPodsLEPairingLockCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F84E0);
  }
  return result;
}

unint64_t sub_100351A54()
{
  unint64_t result;

  result = qword_1010F84F0;
  if (!qword_1010F84F0)
  {
    result = swift_getWitnessTable(aQ_11, &type metadata for AirPodsSWPairingLockAckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F84F0);
  }
  return result;
}

unint64_t sub_100351AA0()
{
  unint64_t result;

  result = qword_1010F8500;
  if (!qword_1010F8500)
  {
    result = swift_getWitnessTable(asc_100E62F3C, &type metadata for AirPodsSWPairingLockCheckRequest);
    atomic_store(result, (unint64_t *)&qword_1010F8500);
  }
  return result;
}

uint64_t sub_100351AEC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 32));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 120, 7);
}

uint64_t destroy for PencilPairingCheckData(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;

  v2 = a1[1];
  if (v2 >> 60 != 15)
    sub_10001BC14(*a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[8], a1[9]);
  sub_10001BC14(a1[10], a1[11]);
  sub_10001BC14(a1[12], a1[13]);
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[18], a1[19]);
  sub_10001BC14(a1[20], a1[21]);
  sub_10001BC14(a1[22], a1[23]);
  sub_10001BC14(a1[24], a1[25]);
  sub_10001BC14(a1[26], a1[27]);
  v3 = a1[29];
  if (v3 >> 60 != 15)
    sub_10001BC14(a1[28], v3);
  sub_10001BC14(a1[30], a1[31]);
  sub_10001BC14(a1[32], a1[33]);
  result = swift_bridgeObjectRelease();
  v5 = a1[37];
  if (v5 >> 60 != 15)
    return sub_10001BC14(a1[36], v5);
  return result;
}

uint64_t initializeWithCopy for PencilPairingCheckData(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  uint64_t v37;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a2[8];
  v10 = a2[9];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  sub_10001BBBC(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a2[10];
  v12 = a2[11];
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = a2[12];
  v14 = a2[13];
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  v15 = a2[16];
  v16 = a2[17];
  *(_QWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 136) = v16;
  v17 = a2[18];
  v18 = a2[19];
  swift_bridgeObjectRetain(v15);
  sub_10001BBBC(v17, v18);
  *(_QWORD *)(a1 + 144) = v17;
  *(_QWORD *)(a1 + 152) = v18;
  v19 = a2[20];
  v20 = a2[21];
  sub_10001BBBC(v19, v20);
  *(_QWORD *)(a1 + 160) = v19;
  *(_QWORD *)(a1 + 168) = v20;
  v21 = a2[22];
  v22 = a2[23];
  sub_10001BBBC(v21, v22);
  *(_QWORD *)(a1 + 176) = v21;
  *(_QWORD *)(a1 + 184) = v22;
  v23 = a2[24];
  v24 = a2[25];
  sub_10001BBBC(v23, v24);
  *(_QWORD *)(a1 + 192) = v23;
  *(_QWORD *)(a1 + 200) = v24;
  v25 = a2[26];
  v26 = a2[27];
  sub_10001BBBC(v25, v26);
  *(_QWORD *)(a1 + 208) = v25;
  *(_QWORD *)(a1 + 216) = v26;
  v27 = a2 + 28;
  v28 = a2[29];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 224) = *(_OWORD *)v27;
  }
  else
  {
    v29 = *v27;
    sub_10001BBBC(*v27, a2[29]);
    *(_QWORD *)(a1 + 224) = v29;
    *(_QWORD *)(a1 + 232) = v28;
  }
  v30 = a2[30];
  v31 = a2[31];
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 240) = v30;
  *(_QWORD *)(a1 + 248) = v31;
  v32 = a2[32];
  v33 = a2[33];
  sub_10001BBBC(v32, v33);
  *(_QWORD *)(a1 + 256) = v32;
  *(_QWORD *)(a1 + 264) = v33;
  v34 = a2[35];
  *(_QWORD *)(a1 + 272) = a2[34];
  *(_QWORD *)(a1 + 280) = v34;
  v35 = a2 + 36;
  v36 = a2[37];
  swift_bridgeObjectRetain(v34);
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 288) = *v35;
  }
  else
  {
    v37 = *(_QWORD *)v35;
    sub_10001BBBC(v37, v36);
    *(_QWORD *)(a1 + 288) = v37;
    *(_QWORD *)(a1 + 296) = v36;
  }
  return a1;
}

uint64_t assignWithCopy for PencilPairingCheckData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      v5 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 8) = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)a2;
  sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v4;
  sub_10001BC14(v7, v8);
LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v12, v13);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v16, v17);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v17;
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a2 + 96);
  v21 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v20, v21);
  v22 = *(_QWORD *)(a1 + 96);
  v23 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v20;
  *(_QWORD *)(a1 + 104) = v21;
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v24;
  v25 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v26 = *(_QWORD *)(a2 + 144);
  v27 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v26, v27);
  v28 = *(_QWORD *)(a1 + 144);
  v29 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v26;
  *(_QWORD *)(a1 + 152) = v27;
  sub_10001BC14(v28, v29);
  v30 = *(_QWORD *)(a2 + 160);
  v31 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v30, v31);
  v32 = *(_QWORD *)(a1 + 160);
  v33 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v30;
  *(_QWORD *)(a1 + 168) = v31;
  sub_10001BC14(v32, v33);
  v34 = *(_QWORD *)(a2 + 176);
  v35 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v34, v35);
  v36 = *(_QWORD *)(a1 + 176);
  v37 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v34;
  *(_QWORD *)(a1 + 184) = v35;
  sub_10001BC14(v36, v37);
  v38 = *(_QWORD *)(a2 + 192);
  v39 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v38, v39);
  v40 = *(_QWORD *)(a1 + 192);
  v41 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v38;
  *(_QWORD *)(a1 + 200) = v39;
  sub_10001BC14(v40, v41);
  v42 = *(_QWORD *)(a2 + 208);
  v43 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v42, v43);
  v44 = *(_QWORD *)(a1 + 208);
  v45 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v42;
  *(_QWORD *)(a1 + 216) = v43;
  sub_10001BC14(v44, v45);
  v46 = (uint64_t *)(a2 + 224);
  v47 = *(_QWORD *)(a2 + 232);
  if (*(_QWORD *)(a1 + 232) >> 60 == 15)
  {
    if (v47 >> 60 != 15)
    {
      v48 = *v46;
      sub_10001BBBC(*v46, *(_QWORD *)(a2 + 232));
      *(_QWORD *)(a1 + 224) = v48;
      *(_QWORD *)(a1 + 232) = v47;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v47 >> 60 == 15)
  {
    sub_1000DC964(a1 + 224);
LABEL_13:
    *(_OWORD *)(a1 + 224) = *(_OWORD *)v46;
    goto LABEL_15;
  }
  v49 = *v46;
  sub_10001BBBC(*v46, *(_QWORD *)(a2 + 232));
  v50 = *(_QWORD *)(a1 + 224);
  v51 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v49;
  *(_QWORD *)(a1 + 232) = v47;
  sub_10001BC14(v50, v51);
LABEL_15:
  v52 = *(_QWORD *)(a2 + 240);
  v53 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v52, v53);
  v54 = *(_QWORD *)(a1 + 240);
  v55 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v52;
  *(_QWORD *)(a1 + 248) = v53;
  sub_10001BC14(v54, v55);
  v56 = *(_QWORD *)(a2 + 256);
  v57 = *(_QWORD *)(a2 + 264);
  sub_10001BBBC(v56, v57);
  v58 = *(_QWORD *)(a1 + 256);
  v59 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v56;
  *(_QWORD *)(a1 + 264) = v57;
  sub_10001BC14(v58, v59);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v60 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease();
  v61 = (uint64_t *)(a2 + 288);
  v62 = *(_QWORD *)(a2 + 296);
  if (*(_QWORD *)(a1 + 296) >> 60 != 15)
  {
    if (v62 >> 60 != 15)
    {
      v64 = *v61;
      sub_10001BBBC(*v61, v62);
      v65 = *(_QWORD *)(a1 + 288);
      v66 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 288) = v64;
      *(_QWORD *)(a1 + 296) = v62;
      sub_10001BC14(v65, v66);
      return a1;
    }
    sub_10015B504(a1 + 288);
    goto LABEL_20;
  }
  if (v62 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 288) = *(_OWORD *)v61;
    return a1;
  }
  v63 = *v61;
  sub_10001BBBC(*v61, v62);
  *(_QWORD *)(a1 + 288) = v63;
  *(_QWORD *)(a1 + 296) = v62;
  return a1;
}

void *initializeWithTake for PencilPairingCheckData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x130uLL);
}

uint64_t assignWithTake for PencilPairingCheckData(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >> 60 == 15)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v4);
LABEL_6:
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v14, v15);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 152);
  v17 = *(_QWORD *)(a1 + 144);
  v18 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = v16;
  sub_10001BC14(v17, v18);
  v19 = *(_QWORD *)(a1 + 160);
  v20 = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v19, v20);
  v21 = *(_QWORD *)(a1 + 176);
  v22 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v21, v22);
  v23 = *(_QWORD *)(a1 + 192);
  v24 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  sub_10001BC14(v23, v24);
  v25 = *(_QWORD *)(a1 + 208);
  v26 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001BC14(v25, v26);
  v27 = (_OWORD *)(a2 + 224);
  v28 = *(_QWORD *)(a1 + 232);
  if (v28 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 224) = *v27;
    goto LABEL_11;
  }
  v29 = *(_QWORD *)(a2 + 232);
  if (v29 >> 60 == 15)
  {
    sub_1000DC964(a1 + 224);
    goto LABEL_9;
  }
  v30 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)v27;
  *(_QWORD *)(a1 + 232) = v29;
  sub_10001BC14(v30, v28);
LABEL_11:
  v31 = *(_QWORD *)(a1 + 240);
  v32 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001BC14(v31, v32);
  v33 = *(_QWORD *)(a1 + 256);
  v34 = *(_QWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  sub_10001BC14(v33, v34);
  v35 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v35;
  swift_bridgeObjectRelease();
  v36 = (_QWORD *)(a2 + 288);
  v37 = *(_QWORD *)(a1 + 296);
  if (v37 >> 60 != 15)
  {
    v38 = *(_QWORD *)(a2 + 296);
    if (v38 >> 60 != 15)
    {
      v39 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 288) = *v36;
      *(_QWORD *)(a1 + 296) = v38;
      sub_10001BC14(v39, v37);
      return a1;
    }
    sub_10015B504(a1 + 288);
  }
  *(_OWORD *)(a1 + 288) = *(_OWORD *)v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingCheckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 304))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 304) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 128) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 304) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCheckData()
{
  return &type metadata for PencilPairingCheckData;
}

uint64_t destroy for PencilPairingAckData(_QWORD *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[6], a1[7]);
  sub_10001BC14(a1[8], a1[9]);
  sub_10001BC14(a1[10], a1[11]);
  sub_10001BC14(a1[12], a1[13]);
  sub_10001BC14(a1[14], a1[15]);
  sub_10001BC14(a1[16], a1[17]);
  sub_10001BC14(a1[18], a1[19]);
  v2 = a1[21];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[20], v2);
  sub_10001BC14(a1[22], a1[23]);
  sub_10001BC14(a1[24], a1[25]);
  result = swift_bridgeObjectRelease();
  v4 = a1[29];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[28], v4);
  return result;
}

uint64_t initializeWithCopy for PencilPairingAckData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2[6];
  v8 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a2[8];
  v10 = a2[9];
  sub_10001BBBC(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a2[10];
  v12 = a2[11];
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = a2[12];
  v14 = a2[13];
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = a2[14];
  v16 = a2[15];
  sub_10001BBBC(v15, v16);
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v16;
  v17 = a2[16];
  v18 = a2[17];
  sub_10001BBBC(v17, v18);
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v18;
  v19 = a2[18];
  v20 = a2[19];
  sub_10001BBBC(v19, v20);
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v20;
  v21 = a2 + 20;
  v22 = a2[21];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)v21;
  }
  else
  {
    v23 = *v21;
    sub_10001BBBC(*v21, a2[21]);
    *(_QWORD *)(a1 + 160) = v23;
    *(_QWORD *)(a1 + 168) = v22;
  }
  v24 = a2[22];
  v25 = a2[23];
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 176) = v24;
  *(_QWORD *)(a1 + 184) = v25;
  v26 = a2[24];
  v27 = a2[25];
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 192) = v26;
  *(_QWORD *)(a1 + 200) = v27;
  v28 = a2[27];
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = v28;
  v29 = a2 + 28;
  v30 = a2[29];
  swift_bridgeObjectRetain(v28);
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 224) = *v29;
  }
  else
  {
    v31 = *(_QWORD *)v29;
    sub_10001BBBC(v31, v30);
    *(_QWORD *)(a1 + 224) = v31;
    *(_QWORD *)(a1 + 232) = v30;
  }
  return a1;
}

_QWORD *assignWithCopy for PencilPairingAckData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[6];
  v8 = a2[7];
  sub_10001BBBC(v7, v8);
  v9 = a1[6];
  v10 = a1[7];
  a1[6] = v7;
  a1[7] = v8;
  sub_10001BC14(v9, v10);
  v11 = a2[8];
  v12 = a2[9];
  sub_10001BBBC(v11, v12);
  v13 = a1[8];
  v14 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  sub_10001BC14(v13, v14);
  v15 = a2[10];
  v16 = a2[11];
  sub_10001BBBC(v15, v16);
  v17 = a1[10];
  v18 = a1[11];
  a1[10] = v15;
  a1[11] = v16;
  sub_10001BC14(v17, v18);
  v19 = a2[12];
  v20 = a2[13];
  sub_10001BBBC(v19, v20);
  v21 = a1[12];
  v22 = a1[13];
  a1[12] = v19;
  a1[13] = v20;
  sub_10001BC14(v21, v22);
  v23 = a2[14];
  v24 = a2[15];
  sub_10001BBBC(v23, v24);
  v25 = a1[14];
  v26 = a1[15];
  a1[14] = v23;
  a1[15] = v24;
  sub_10001BC14(v25, v26);
  v27 = a2[16];
  v28 = a2[17];
  sub_10001BBBC(v27, v28);
  v29 = a1[16];
  v30 = a1[17];
  a1[16] = v27;
  a1[17] = v28;
  sub_10001BC14(v29, v30);
  v31 = a2[18];
  v32 = a2[19];
  sub_10001BBBC(v31, v32);
  v33 = a1[18];
  v34 = a1[19];
  a1[18] = v31;
  a1[19] = v32;
  sub_10001BC14(v33, v34);
  v35 = a2 + 20;
  v36 = a2[21];
  if (a1[21] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_10001BBBC(*v35, a2[21]);
      a1[20] = v37;
      a1[21] = v36;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v36 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 20));
LABEL_6:
    *((_OWORD *)a1 + 10) = *(_OWORD *)v35;
    goto LABEL_8;
  }
  v38 = *v35;
  sub_10001BBBC(*v35, a2[21]);
  v39 = a1[20];
  v40 = a1[21];
  a1[20] = v38;
  a1[21] = v36;
  sub_10001BC14(v39, v40);
LABEL_8:
  v41 = a2[22];
  v42 = a2[23];
  sub_10001BBBC(v41, v42);
  v43 = a1[22];
  v44 = a1[23];
  a1[22] = v41;
  a1[23] = v42;
  sub_10001BC14(v43, v44);
  v45 = a2[24];
  v46 = a2[25];
  sub_10001BBBC(v45, v46);
  v47 = a1[24];
  v48 = a1[25];
  a1[24] = v45;
  a1[25] = v46;
  sub_10001BC14(v47, v48);
  a1[26] = a2[26];
  v49 = a2[27];
  a1[27] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease();
  v50 = a2 + 28;
  v51 = a2[29];
  if (a1[29] >> 60 != 15)
  {
    if (v51 >> 60 != 15)
    {
      v53 = *v50;
      sub_10001BBBC(*v50, v51);
      v54 = a1[28];
      v55 = a1[29];
      a1[28] = v53;
      a1[29] = v51;
      sub_10001BC14(v54, v55);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 28));
    goto LABEL_13;
  }
  if (v51 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 14) = *(_OWORD *)v50;
    return a1;
  }
  v52 = *v50;
  sub_10001BBBC(*v50, v51);
  a1[28] = v52;
  a1[29] = v51;
  return a1;
}

__n128 initializeWithTake for PencilPairingAckData(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

_QWORD *assignWithTake for PencilPairingAckData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[6];
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v7, v8);
  v9 = a1[8];
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v9, v10);
  v11 = a1[10];
  v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v11, v12);
  v13 = a1[12];
  v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v13, v14);
  v15 = a1[14];
  v16 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v15, v16);
  v17 = a1[16];
  v18 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v17, v18);
  v19 = a1[18];
  v20 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v19, v20);
  v21 = (_OWORD *)(a2 + 160);
  v22 = a1[21];
  if (v22 >> 60 == 15)
    goto LABEL_4;
  v23 = *(_QWORD *)(a2 + 168);
  if (v23 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 20));
LABEL_4:
    *((_OWORD *)a1 + 10) = *v21;
    goto LABEL_6;
  }
  v24 = a1[20];
  a1[20] = *(_QWORD *)v21;
  a1[21] = v23;
  sub_10001BC14(v24, v22);
LABEL_6:
  v25 = a1[22];
  v26 = a1[23];
  *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v25, v26);
  v27 = a1[24];
  v28 = a1[25];
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  sub_10001BC14(v27, v28);
  v29 = *(_QWORD *)(a2 + 216);
  a1[26] = *(_QWORD *)(a2 + 208);
  a1[27] = v29;
  swift_bridgeObjectRelease();
  v30 = (_QWORD *)(a2 + 224);
  v31 = a1[29];
  if (v31 >> 60 != 15)
  {
    v32 = *(_QWORD *)(a2 + 232);
    if (v32 >> 60 != 15)
    {
      v33 = a1[28];
      a1[28] = *v30;
      a1[29] = v32;
      sub_10001BC14(v33, v31);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 28));
  }
  *((_OWORD *)a1 + 14) = *(_OWORD *)v30;
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingAckData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 240))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingAckData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 240) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingAckData()
{
  return &type metadata for PencilPairingAckData;
}

uint64_t destroy for PencilUnpairData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for PencilUnpairData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for PencilUnpairData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for InitialPairingInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for PencilUnpairData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilUnpairData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilUnpairData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairData()
{
  return &type metadata for PencilUnpairData;
}

uint64_t *sub_100352F00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = a3[6];
    v17 = a3[7];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_100353034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1003530CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = a3[6];
  v15 = a3[7];
  v16 = (uint64_t *)((char *)a1 + v14);
  v17 = (uint64_t *)((char *)a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = (uint64_t *)((char *)a1 + v15);
  v20 = (uint64_t *)((char *)a2 + v15);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t *sub_1003531D4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = a3[6];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = a3[7];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100353358(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

uint64_t *sub_100353438(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[6];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[7];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100353594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003535A0);
}

uint64_t sub_1003535A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100353628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100353634);
}

uint64_t sub_100353634(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A9A8(&qword_1010ED860);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_1003536B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E37E18;
  sub_100252558(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100E37E30;
    v4[3] = &unk_100E37E30;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

unint64_t sub_100353738()
{
  unint64_t result;

  result = qword_1010F85B0;
  if (!qword_1010F85B0)
  {
    result = swift_getWitnessTable("}j#", &type metadata for PencilUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F85B0);
  }
  return result;
}

unint64_t sub_10035377C()
{
  unint64_t result;

  result = qword_1010F85B8;
  if (!qword_1010F85B8)
  {
    result = swift_getWitnessTable(byte_100E38134, &type metadata for PencilUnpairContext);
    atomic_store(result, (unint64_t *)&qword_1010F85B8);
  }
  return result;
}

unint64_t sub_1003537C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010F85C8;
  if (!qword_1010F85C8)
  {
    v1 = sub_10001F784(&qword_1010F85C0);
    v2 = sub_100006204(&qword_1010F85D0, type metadata accessor for PencilUnpairData.DeviceUnpairData, (uint64_t)&unk_100E37E48);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F85C8);
  }
  return result;
}

unint64_t sub_10035383C()
{
  unint64_t result;

  result = qword_1010F85E0;
  if (!qword_1010F85E0)
  {
    result = swift_getWitnessTable(byte_100E380E4, &type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F85E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PencilUnpairData.DeviceUnpairData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1003538CC + 4 * byte_100E37D1F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100353900 + 4 * byte_100E37D1A[v4]))();
}

uint64_t sub_100353900(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100353908(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100353910);
  return result;
}

uint64_t sub_10035391C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100353924);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100353928(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100353930(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairData.DeviceUnpairData.CodingKeys()
{
  return &type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PencilUnpairData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100353998 + 4 * byte_100E37D29[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1003539CC + 4 * byte_100E37D24[v4]))();
}

uint64_t sub_1003539CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003539D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003539DCLL);
  return result;
}

uint64_t sub_1003539E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003539F0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1003539F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003539FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairData.CodingKeys()
{
  return &type metadata for PencilUnpairData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PencilUnpairContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100353A64 + 4 * byte_100E37D33[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100353A98 + 4 * byte_100E37D2E[v4]))();
}

uint64_t sub_100353A98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100353AA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100353AA8);
  return result;
}

uint64_t sub_100353AB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100353ABCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100353AC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100353AC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairContext()
{
  return &type metadata for PencilUnpairContext;
}

unint64_t sub_100353AE8()
{
  unint64_t result;

  result = qword_1010F85E8;
  if (!qword_1010F85E8)
  {
    result = swift_getWitnessTable("]l#", &type metadata for PencilUnpairContext);
    atomic_store(result, (unint64_t *)&qword_1010F85E8);
  }
  return result;
}

unint64_t sub_100353B30()
{
  unint64_t result;

  result = qword_1010F85F0;
  if (!qword_1010F85F0)
  {
    result = swift_getWitnessTable(byte_100E38004, &type metadata for PencilUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F85F0);
  }
  return result;
}

unint64_t sub_100353B78()
{
  unint64_t result;

  result = qword_1010F85F8;
  if (!qword_1010F85F8)
  {
    result = swift_getWitnessTable(byte_100E380BC, &type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F85F8);
  }
  return result;
}

unint64_t sub_100353BC0()
{
  unint64_t result;

  result = qword_1010F8600;
  if (!qword_1010F8600)
  {
    result = swift_getWitnessTable(byte_100E3802C, &type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8600);
  }
  return result;
}

unint64_t sub_100353C08()
{
  unint64_t result;

  result = qword_1010F8608;
  if (!qword_1010F8608)
  {
    result = swift_getWitnessTable("uk#", &type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8608);
  }
  return result;
}

unint64_t sub_100353C50()
{
  unint64_t result;

  result = qword_1010F8610;
  if (!qword_1010F8610)
  {
    result = swift_getWitnessTable("El#", &type metadata for PencilUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8610);
  }
  return result;
}

unint64_t sub_100353C98()
{
  unint64_t result;

  result = qword_1010F8618;
  if (!qword_1010F8618)
  {
    result = swift_getWitnessTable("-l#", &type metadata for PencilUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8618);
  }
  return result;
}

unint64_t sub_100353CDC()
{
  unint64_t result;

  result = qword_1010F8620;
  if (!qword_1010F8620)
  {
    result = swift_getWitnessTable(byte_100E37ED4, &type metadata for PencilUnpairContext);
    atomic_store(result, (unint64_t *)&qword_1010F8620);
  }
  return result;
}

uint64_t sub_100353D24@<X0>(uint64_t a1@<X8>)
{
  return sub_100353D4C(a1);
}

uint64_t sub_100353D38@<X0>(uint64_t a1@<X8>)
{
  return sub_100353D4C(a1);
}

uint64_t sub_100353D4C@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "valueForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100005CF0((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_1010F6390);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F6390);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

_QWORD *sub_100353E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;

  v4 = v3;
  v3[2] = 0;
  v8 = sub_10001A9A8(&qword_1010F87D8);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = PassthroughSubject.init()();
  v3[4] = 0;
  v3[5] = 0;
  v3[3] = v9;
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v10 = *(_QWORD *)(qword_1011B8588 + 48);
  v11 = swift_retain(v10);
  AnyCurrentValuePublisher.value.getter(&v28, v11);
  swift_release(v10);
  *((_BYTE *)v4 + 48) = v28;
  sub_100005CF0(a1, (uint64_t)(v4 + 9), &qword_101106350);
  v4[7] = a2;
  v4[8] = a3;
  v28 = v4[3];
  v12 = v28;
  v13 = swift_allocObject(&unk_10106EC48, 24, 7);
  swift_weakInit(v13 + 16, v4);
  v14 = sub_1000193A4(&qword_1010F87E0, &qword_1010F87D8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain(a3);
  swift_retain(v12);
  v15 = Publisher<>.sink(receiveValue:)(sub_100354F54, v13, v8, v14);
  swift_release(v13);
  swift_release(v28);
  v16 = v4[4];
  v4[4] = v15;
  swift_release(v16);
  v17 = *(_QWORD *)(qword_1011B8588 + 48);
  v18 = swift_retain(v17);
  v19 = AnyCurrentValuePublisher.publisher.getter(v18);
  swift_release(v17);
  v28 = v19;
  v20 = swift_allocObject(&unk_10106EC48, 24, 7);
  swift_weakInit(v20 + 16, v4);
  v21 = sub_10001A9A8(&qword_1010F2080);
  v22 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v23 = Publisher<>.sink(receiveValue:)(sub_100354F5C, v20, v21, v22);
  swift_release(v20);
  swift_release(v28);
  v24 = v4[5];
  v4[5] = v23;
  swift_release(v24);
  v25 = sub_100354CD4();
  LOBYTE(v20) = v26;
  swift_release(a3);
  sub_10010F948(v25, v20 & 1);
  return v4;
}

uint64_t sub_1003540EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v10, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v7 = result;
    static Date.trustedNow.getter((uint64_t)v5);
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 0, 1, v8);
    sub_100354F64((uint64_t)v5);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1003541BC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE v13[24];

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    if (v7 != *(unsigned __int8 *)(result + 48))
    {
      *(_BYTE *)(result + 48) = v7;
      v10 = type metadata accessor for Date(0);
      v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
      v11(v6, 1, 1, v10);
      sub_100354F64((uint64_t)v6);
      v11(v6, 1, 1, v10);
      sub_100354F64((uint64_t)v6);
    }
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_1003542D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  char v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)&v20 - v4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  sub_100353D24((uint64_t)v5);
  v13 = (uint64_t (*)(char *, uint64_t, uint64_t))v7[6];
  if (v13(v5, 1, v6) == 1)
  {
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010EA690);
    v14 = 0;
  }
  else
  {
    v15 = (void (*)(char *, char *, uint64_t))v7[4];
    v15(v12, v5, v6);
    sub_100353D38((uint64_t)v3);
    v16 = v13(v3, 1, v6);
    if ((_DWORD)v16 == 1)
    {
      static Date.distantPast.getter(v16);
      sub_100004048((uint64_t)v3, (uint64_t *)&unk_1010EA690);
    }
    else
    {
      v15(v10, v3, v6);
    }
    v17 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v14 = dispatch thunk of static Comparable.< infix(_:_:)(v12, v10, v6, v17) ^ 1;
    v18 = (void (*)(char *, uint64_t))v7[1];
    v18(v10, v6);
    v18(v12, v6);
  }
  return v14 & 1;
}

uint64_t sub_1003544A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  uint64_t aBlock;
  unint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v0 - 8);
  v52 = v0;
  __chkstk_darwin(v0);
  v50 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v54 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v54 - 8);
  v11 = __chkstk_darwin(v54);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v46 - v14;
  v16 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  __chkstk_darwin(v16);
  v53 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  aBlock = 0x7365547265646E75;
  v58 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v56, &aBlock, sub_10001F628, 0, &type metadata for Bool);
  v18 = swift_bridgeObjectRelease(v58);
  if ((v56 & 1) != 0)
  {
    static DispatchTime.now()(v18);
    *v9 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.seconds(_:), v6);
    + infix(_:_:)(v13, v9);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
    v47 = *(void (**)(char *, _QWORD))(v10 + 8);
    v47(v13, v54);
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
    v19 = (void *)static OS_dispatch_queue.global(qos:)(v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v20 = v55;
    v61 = sub_10035513C;
    v62 = v55;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_100016FB8;
    v60 = &unk_10106EC88;
    v21 = _Block_copy(&aBlock);
    v22 = swift_retain(v20);
    v23 = v53;
    static DispatchQoS.unspecified.getter(v22);
    v56 = &_swiftEmptyArrayStorage;
    v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v26 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v27 = v50;
    v28 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v25, v26, v52, v24);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v23, v27, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v28);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v49);
    v47(v15, v54);
    return swift_release(v62);
  }
  else
  {
    v30 = v55;
    v31 = *(_QWORD *)(v55 + 72);
    if (v31 == 2)
    {
      v32 = static os_log_type_t.default.getter(v18);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      return os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7D40, "Not scheduling coalesced cloudkit activity - no criteria.", 57, 2, &_swiftEmptyArrayStorage);
    }
    else
    {
      v34 = *(_QWORD *)(v55 + 96);
      v33 = *(_QWORD *)(v55 + 104);
      v35 = v31 & 1;
      v36 = (v31 >> 8) & 1;
      v54 = *(_OWORD *)(v55 + 80);
      v37 = (uint64_t)v53;
      static DispatchQoS.background.getter(v18);
      v38 = swift_allocObject(&unk_10106EC48, 24, 7);
      swift_weakInit(v38 + 16, v30);
      v39 = swift_allocObject(&unk_10106EC70, 64, 7);
      *(_QWORD *)(v39 + 16) = v38;
      *(_BYTE *)(v39 + 24) = v35;
      *(_BYTE *)(v39 + 25) = v36;
      *(_OWORD *)(v39 + 32) = v54;
      *(_QWORD *)(v39 + 48) = v34;
      *(_QWORD *)(v39 + 56) = v33;
      v40 = swift_allocObject(&unk_10106EC48, 24, 7);
      swift_weakInit(v40 + 16, v30);
      v41 = type metadata accessor for XPCActivity();
      swift_allocObject(v41, 112, 7);
      v42 = sub_100734F68(0xD00000000000002FLL, (void *)0x8000000100ED21E0, v37, (uint64_t)sub_100355128, v39, (uint64_t)sub_100355134, v40);
      swift_release(v39);
      swift_release(v40);
      v43 = *(_QWORD *)(v30 + 16);
      *(_QWORD *)(v30 + 16) = v42;
      v44 = swift_release(v43);
      v45 = static os_log_type_t.default.getter(v44);
      if (qword_1010EA260 != -1)
        swift_once(&qword_1010EA260, sub_100B5DA30);
      return os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_1011B7D40, "Scheduled coalesced cloudkit activity.", 38, 2, &_swiftEmptyArrayStorage);
    }
  }
}

uint64_t sub_100354A58(uint64_t a1)
{
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("CloudKitCoalescer.Immediate-Test", 32, 2, sub_100355144, a1, (char *)&type metadata for () + 8);
}

uint64_t sub_100354AC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _QWORD v24[5];

  v6 = *a3;
  v7 = a3[1];
  v8 = *((_QWORD *)a3 + 1);
  v21 = *((_QWORD *)a3 + 3);
  v22 = *((_QWORD *)a3 + 2);
  v20 = *((_QWORD *)a3 + 4);
  sub_100005CF0(a1, (uint64_t)v24, &qword_101106350);
  v9 = v24[0];
  v10 = v24[1];
  v11 = v24[2];
  v12 = v24[3];
  a2 += 16;
  v13 = v24[4];
  swift_beginAccess(a2, v23, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v15 = result;
    v19 = v8;
    v16 = v6 & 1;
    v17 = v7 & 1;
    v18 = sub_1003542D4();
    result = swift_release(v15);
    if ((v18 & 1) != 0)
    {
      v9 = v16 | (v17 << 8);
      v10 = v19;
      v11 = v22;
      v12 = v21;
      v13 = v20;
    }
  }
  *a4 = v9;
  a4[1] = v10;
  a4[2] = v11;
  a4[3] = v12;
  a4[4] = v13;
  return result;
}

uint64_t sub_100354BBC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v10 = static os_log_type_t.default.getter(v9);
      if (qword_1010EA260 != -1)
      {
        v12 = v10;
        swift_once(&qword_1010EA260, sub_100B5DA30);
        v10 = v12;
      }
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7D40, "CloudKitCoalescer task allowed to execute now - XPCActivity.", 60, 2, &_swiftEmptyArrayStorage);
      v11 = *(_QWORD *)(v8 + 24);
      v13 = a2;
      swift_retain(v11);
      PassthroughSubject.send(_:)(&v13);
      swift_release(v11);
      sub_100732A0C();
    }
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_100354CD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = sub_1003542D4();
  if ((v1 & 1) != 0)
  {
    if (((*(uint64_t (**)(void))(v0 + 56))() & 1) != 0)
    {
      type metadata accessor for Transaction(0);
      static Transaction.named<A>(_:with:)("CloudKitCoalescer.Immediate", 27, 2, sub_1003550E0, v0, (char *)&type metadata for () + 8);
      return 0;
    }
    else
    {
      sub_1003544A0();
      return 1;
    }
  }
  else
  {
    v3 = static os_log_type_t.default.getter(v1);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D40, "CloudKitCoalescer no need to run - last execution is after last request.", 72, 2, &_swiftEmptyArrayStorage);
    v4 = sub_10035509C();
    return swift_allocError(&type metadata for CloudKitCoalescer.CloudKitCoalescerError, v4, 0, 0);
  }
}

uint64_t sub_100354DF0(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7D40, a3, a4, 2, &_swiftEmptyArrayStorage);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = a1;
  swift_retain(v9);
  PassthroughSubject.send(_:)(&v11);
  return swift_release(v9);
}

uint64_t sub_100354EB8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[8]);
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for CloudKitCoalescer()
{
  return objc_opt_self(_TtC12searchpartyd17CloudKitCoalescer);
}

uint64_t sub_100354F1C(uint64_t a1)
{
  return sub_100354F64(a1);
}

uint64_t sub_100354F30()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100354F54(uint64_t a1)
{
  uint64_t v1;

  return sub_1003540EC(a1, v1);
}

uint64_t sub_100354F5C(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_1003541BC(a1, v1);
}

uint64_t sub_100354F64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  NSString v9;
  uint64_t v11;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10001F674(a1, (uint64_t)v4);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v9);

  swift_unknownObjectRelease(isa);
  return sub_100004048(a1, (uint64_t *)&unk_1010EA690);
}

unint64_t sub_10035509C()
{
  unint64_t result;

  result = qword_1010F87E8;
  if (!qword_1010F87E8)
  {
    result = swift_getWitnessTable(byte_100E382C0, &type metadata for CloudKitCoalescer.CloudKitCoalescerError);
    atomic_store(result, (unint64_t *)&qword_1010F87E8);
  }
  return result;
}

uint64_t sub_1003550E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100354DF0(a1, v1, "CloudKitCoalescer task allowed to execute now.", 46);
}

uint64_t sub_100355104()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100355128@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100354AC0(a1, *(_QWORD *)(v2 + 16), (char *)(v2 + 24), a2);
}

uint64_t sub_100355134(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100354BBC(a1, a2, a3, v3);
}

uint64_t sub_10035513C()
{
  uint64_t v0;

  return sub_100354A58(v0);
}

uint64_t sub_100355144(uint64_t a1)
{
  uint64_t v1;

  return sub_100354DF0(a1, v1, "CloudKitCoalescer Test task allowed to execute now.", 51);
}

uint64_t storeEnumTagSinglePayload for CloudKitCoalescer.CloudKitCoalescerError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1003551A8 + 4 * byte_100E381B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1003551C8 + 4 * byte_100E381B5[v4]))();
}

_BYTE *sub_1003551A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1003551C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003551D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003551D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003551E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003551E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CloudKitCoalescer.CloudKitCoalescerError()
{
  return &type metadata for CloudKitCoalescer.CloudKitCoalescerError;
}

unint64_t sub_100355208()
{
  unint64_t result;

  result = qword_1010F87F0;
  if (!qword_1010F87F0)
  {
    result = swift_getWitnessTable(byte_100E38298, &type metadata for CloudKitCoalescer.CloudKitCoalescerError);
    atomic_store(result, (unint64_t *)&qword_1010F87F0);
  }
  return result;
}

uint64_t sub_10035524C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_10035525C + *((int *)qword_1003552B8 + (a4 >> 62))))();
}

uint64_t sub_100355270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (BYTE6(a4) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a2 + 1 < a1)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x1003552B8);
  }
  return Data._Representation.subscript.getter();
}

uint64_t sub_1003552C8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  __int16 v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  __int16 v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  unint64_t v45;
  __int16 v46;
  char v47;
  uint64_t v48;
  unint64_t v49;

  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = v4;
  __chkstk_darwin(v4);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v9._countAndFlagsBits = 0x3A656372756F733CLL;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  v45 = a2;
  v10 = sub_10035524C(0, 0, a1, a2);
  v12 = v11;
  static Endianness.current.getter(v10);
  sub_100059570();
  FixedWidthInteger.init(data:ofEndianness:)(&v46, v10, v12, v8);
  v13 = v46;
  if (HIBYTE(v46))
    v13 = 0;
  LOBYTE(v46) = v13;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x49726F646E657620;
  v15._object = (void *)0xEB00000000203A64;
  String.append(_:)(v15);
  v16 = sub_10035524C(1, 2, a1, a2);
  v18 = v17;
  v19 = enum case for Endianness.little(_:);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v43 = v6;
  v44 = v20;
  v21 = v6;
  v20(v8, enum case for Endianness.little(_:), v6);
  sub_100112060();
  FixedWidthInteger.init(data:ofEndianness:)(&v46, v16, v18, v8);
  v22 = v46;
  if (v47)
    v22 = 0;
  v46 = v22;
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x746375646F727020;
  v24._object = (void *)0xEC000000203A6449;
  String.append(_:)(v24);
  v25 = v45;
  v26 = sub_10035524C(3, 4, a1, v45);
  v28 = v27;
  v29 = v21;
  v30 = v44;
  v44(v8, v19, v29);
  FixedWidthInteger.init(data:ofEndianness:)(&v46, v26, v28, v8);
  v31 = v46;
  if (v47)
    v31 = 0;
  v46 = v31;
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._object = (void *)0x8000000100ED22F0;
  v33._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v33);
  v34 = sub_10035524C(5, 6, a1, v25);
  v36 = v35;
  v30(v8, v19, v43);
  FixedWidthInteger.init(data:ofEndianness:)(&v46, v34, v36, v8);
  v37 = v46;
  if (v47)
    v37 = 0;
  v46 = v37;
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._object = (void *)0xEB00000000203A65;
  v39._countAndFlagsBits = 0x756C615677617220;
  String.append(_:)(v39);
  v40._countAndFlagsBits = Data.hexString.getter(a1, v25);
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 62;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  return v48;
}

void sub_100355688(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1003556AC(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 7)
  {
    sub_10001BC14(result, a2);
    return 0;
  }
  return result;
}

uint64_t sub_100355708(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10035524C(1, 2, a1, a2);
  v10 = v9;
  v11 = enum case for Endianness.little(_:);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v12(v7, enum case for Endianness.little(_:), v4);
  sub_100112060();
  FixedWidthInteger.init(data:ofEndianness:)((uint64_t *)((char *)&v21 + 4), v8, v10, v7);
  v20 = WORD2(v21);
  LODWORD(v10) = BYTE6(v21);
  v13 = sub_10035524C(3, 4, a1, a2);
  v15 = v14;
  v12(v7, v11, v4);
  FixedWidthInteger.init(data:ofEndianness:)(&v21, v13, v15, v7);
  if ((_DWORD)v10)
    v16 = 0;
  else
    v16 = v20;
  if (BYTE2(v21))
    v17 = 0;
  else
    v17 = (unsigned __int16)v21;
  result = sub_1001EE37C(v16, v17);
  if (v19 >> 60 == 15)
    __break(1u);
  return result;
}

uint64_t sub_10035587C()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for Descriptor()
{
  return objc_opt_self(_TtC12searchpartyd10Descriptor);
}

Swift::Int sub_1003558C8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NSObject.hash(into:)(v1);
  return Hasher._finalize()();
}

void sub_10035590C(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(*(_QWORD *)v1 + 24);
  NSObject.hash(into:)(a1);

}

Swift::Int sub_100355954()
{
  uint64_t v0;
  id v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v1 = *(id *)(*(_QWORD *)v0 + 24);
  NSObject.hash(into:)(v3);

  return Hasher._finalize()();
}

BOOL sub_1003559A0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 24) == *(_QWORD *)(*(_QWORD *)a2 + 24);
}

uint64_t sub_1003559BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  id v23;
  id v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  _OWORD v29[2];
  uint64_t v30;
  unint64_t v31;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + 24);
  *(_QWORD *)&v29[0] = 0;
  *((_QWORD *)&v29[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v30 = 60;
  v31 = 0xE100000000000000;
  *(_QWORD *)&v29[0] = v0;
  v6 = type metadata accessor for Descriptor();
  v8 = sub_100006C64((unint64_t *)&unk_1010F88C0, v7, (uint64_t (*)(uint64_t))type metadata accessor for Descriptor, (uint64_t)&unk_100E38320);
  v9._countAndFlagsBits = CustomDebugStringConvertible.typeDescription.getter(v6, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 32;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = CustomDebugStringConvertible<>.addressDescription.getter(v6, v8);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v13 = objc_msgSend(v5, "UUID");
  sub_1008C5174();

  v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v14);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v16._countAndFlagsBits = 23328;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17 = objc_msgSend(v5, "description");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 2112093;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  v23 = objc_msgSend(v5, "value");
  if (v23)
  {
    v24 = v23;
    _bridgeAnyObjectToAny(_:)(v29, v23);
    swift_unknownObjectRelease(v24);
  }
  else
  {
    memset(v29, 0, sizeof(v29));
  }
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F6390);
  v26._countAndFlagsBits = String.init<A>(describing:)(v29, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 62;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  return v30;
}

uint64_t sub_100355C40()
{
  return sub_1003559BC();
}

uint64_t sub_100355C60(uint64_t a1, uint64_t a2)
{
  return sub_100006C64(&qword_1010F88B8, a2, (uint64_t (*)(uint64_t))type metadata accessor for Descriptor, (uint64_t)&unk_100E38348);
}

id CurrentLocationMonitor.__allocating_init(mode:desiredAccuracy:)(char a1, uint64_t a2, char a3)
{
  objc_class *v3;
  char v5;
  int v6;
  id v7;

  v5 = a1 & 1;
  v6 = a3 & 1;
  v7 = objc_allocWithZone(v3);
  return CurrentLocationMonitor.init(mode:desiredAccuracy:)(v5, a2, v6);
}

uint64_t CurrentLocationMonitor.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t CurrentLocationMonitor.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t (*CurrentLocationMonitor.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_100355DFC;
}

void sub_100355E00(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *CurrentLocationMonitor.currentLocation.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t sub_100355EAC@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v5[5];
  int v6;

  v5[2] = *a1;
  type metadata accessor for CLAuthorizationStatus(0);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_100357274, v5, v3);
  *a2 = v6;
  return result;
}

uint64_t CurrentLocationMonitor.currentAuthorizationStatus.getter()
{
  uint64_t v0;
  _DWORD v2[12];

  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100356508, v2, v0);
  return v2[11];
}

uint64_t sub_100355F7C@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus);
  return result;
}

id CurrentLocationMonitor.init(mode:desiredAccuracy:)(char a1, uint64_t a2, int a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSString v24;
  id v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  id v31;
  id v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  _QWORD aBlock[6];
  objc_super v60;

  v4 = v3;
  v49 = a3;
  v48 = a2;
  v57 = a1 & 1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  __chkstk_darwin(v5);
  v53 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
  *((_QWORD *)v17 + 1) = 0;
  swift_unknownObjectWeakInit(v17, 0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager] = 0;
  v56 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  v18 = v4;
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v7, v19);
  v50 = v12;
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x8000000100EC56C0, v12, v9, v16, 0);
  *(_QWORD *)&v4[v56] = v22;
  *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts] = 0;
  v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] = 0;
  v23 = objc_allocWithZone((Class)NSBundle);
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "initWithPath:", v24);

  if (v25)
  {
    v26 = objc_msgSend((id)objc_opt_self(CLLocationManager), "authorizationStatusForBundle:", v25);

  }
  else
  {
    v26 = 0;
  }
  v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode] = v57;
  LODWORD(aBlock[0]) = v26;
  v27 = sub_10001A9A8(&qword_1010F8910);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v28 = CurrentValueSubject.init(_:)(aBlock);
  *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusSubject] = v28;
  aBlock[0] = v28;
  v29 = sub_1000193A4(&qword_1010F8920, &qword_1010F8910, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  *(_QWORD *)&v18[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusPublisher] = Publisher.eraseToAnyPublisher()(v27, v29);

  v30 = (objc_class *)type metadata accessor for CurrentLocationMonitor();
  v60.receiver = v18;
  v60.super_class = v30;
  v31 = objc_msgSendSuper2(&v60, "init");
  v32 = objc_allocWithZone((Class)NSBundle);
  v33 = v31;
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(v32, "initWithPath:", v34);

  if (v35)
  {
    v36 = swift_allocObject(&unk_10106EDF8, 41, 7);
    *(_QWORD *)(v36 + 16) = v33;
    *(_QWORD *)(v36 + 24) = v35;
    *(_QWORD *)(v36 + 32) = v48;
    *(_BYTE *)(v36 + 40) = v49 & 1;
    aBlock[4] = sub_10001E300;
    aBlock[5] = v36;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_10106EE10;
    v37 = _Block_copy(aBlock);
    v38 = v33;
    v39 = v35;
    v40 = v50;
    static DispatchQoS.unspecified.getter(v39);
    v58 = _swiftEmptyArrayStorage;
    v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v44 = v53;
    v45 = v42;
    v46 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v45, v43, v55, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v37);

    _Block_release(v37);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v46);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
    swift_release();
  }
  else
  {

  }
  return v33;
}

void sub_100356508(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(*(_QWORD *)(v1 + 16)
                  + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus);
}

uint64_t type metadata accessor for CurrentLocationMonitor()
{
  return objc_opt_self(_TtC12searchpartyd22CurrentLocationMonitor);
}

uint64_t sub_100356540()
{
  uint64_t v0;

  return swift_deallocObject(v0, 41, 7);
}

Swift::Void __swiftcall CurrentLocationMonitor.requestLocation()()
{
  sub_10035663C((uint64_t)&unk_10106EE48, (uint64_t)sub_100356618, (uint64_t)&unk_10106EE60);
}

id sub_100356588(uint64_t a1)
{
  uint64_t v2;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010E9B88 != -1)
    swift_once(&qword_1010E9B88, sub_100356FDC);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B6DD8, "requesting location", 19, 2, _swiftEmptyArrayStorage);
  return objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager), "requestLocation");
}

id sub_100356618()
{
  uint64_t v0;

  return sub_100356588(*(_QWORD *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.startMonitor()()
{
  sub_10035663C((uint64_t)&unk_10106EE98, (uint64_t)sub_10001E324, (uint64_t)&unk_10106EEB0);
}

uint64_t sub_10035663C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue];
  v14 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v14 + 16) = v3;
  aBlock[4] = a2;
  v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a3;
  v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

Swift::Void __swiftcall CurrentLocationMonitor.stopMonitor()()
{
  sub_10035663C((uint64_t)&unk_10106EEE8, (uint64_t)sub_1003569D4, (uint64_t)&unk_10106EF00);
}

id sub_100356844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  uint64_t v12;
  char **v13;
  int v14;

  v3 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts);
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v1 = a1;
    *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts) = v6;
    v2 = static os_log_type_t.default.getter(a1);
    if (qword_1010E9B88 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_1010E9B88, sub_100356FDC);
LABEL_3:
  v7 = qword_1011B6DD8;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  v10 = *(_QWORD *)(v1 + v3);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v9 + 56) = &type metadata for Int;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 32) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v7, "startCounts = %d", v14);
  result = (id)swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v1 + v3))
  {
    v12 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_1011B6DD8, "stopping location monitor", 25, 2, _swiftEmptyArrayStorage);
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode))
      v13 = &selRef_stopMonitoringSignificantLocationChanges;
    else
      v13 = &selRef_stopUpdatingLocation;
    result = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager), *v13);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted) = 0;
  }
  return result;
}

uint64_t sub_1003569B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1003569D4()
{
  uint64_t v0;

  return sub_100356844(*(_QWORD *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.startMonitorIfNeeded()()
{
  sub_10035663C((uint64_t)&unk_10106EF38, (uint64_t)sub_100356AAC, (uint64_t)&unk_10106EF50);
}

_BYTE *sub_1003569F8(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted;
  if ((result[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] & 1) == 0)
  {
    v2 = result;
    v3 = static os_log_type_t.default.getter(result);
    if (qword_1010E9B88 != -1)
      swift_once(&qword_1010E9B88, sub_100356FDC);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B6DD8, "startMonitorIfNeeded starting location monitor", 46, 2, _swiftEmptyArrayStorage);
    result = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager], "startUpdatingLocation");
    v2[v1] = 1;
  }
  return result;
}

_BYTE *sub_100356AAC()
{
  uint64_t v0;

  return sub_1003569F8(*(_BYTE **)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.forceStopMonitor()()
{
  sub_10035663C((uint64_t)&unk_10106EF88, (uint64_t)sub_100356B84, (uint64_t)&unk_10106EFA0);
}

_BYTE *sub_100356AD0(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted;
  if (result[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] == 1)
  {
    v2 = result;
    v3 = static os_log_type_t.default.getter(result);
    if (qword_1010E9B88 != -1)
      swift_once(&qword_1010E9B88, sub_100356FDC);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B6DD8, "force stopping location monitor", 31, 2, _swiftEmptyArrayStorage);
    result = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager], "stopUpdatingLocation");
    v2[v1] = 0;
  }
  return result;
}

_BYTE *sub_100356B84()
{
  uint64_t v0;

  return sub_100356AD0(*(_BYTE **)(v0 + 16));
}

id CurrentLocationMonitor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void CurrentLocationMonitor.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("searchpartyd.CurrentLocationMonitor", 35, "init()", 6, 0);
  __break(1u);
}

id CurrentLocationMonitor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CurrentLocationMonitor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100356CAC()
{
  uint64_t v0;
  _DWORD v2[12];

  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100357274, v2, v0);
  return v2[11];
}

void sub_100356D10(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

Swift::Void __swiftcall CurrentLocationMonitor.locationManager(_:didUpdateLocations:)(CLLocationManager _, Swift::OpaquePointer didUpdateLocations)
{
  sub_10000FA14((uint64_t)_._internal);
}

uint64_t CurrentLocationMonitor.locationManager(_:didFailWithError:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = static os_log_type_t.error.getter(a1);
  if (qword_1010E9B88 != -1)
    swift_once(&qword_1010E9B88, sub_100356FDC);
  v4 = qword_1011B6DD8;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  v12 = a2;
  swift_errorRetain(a2);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v8 = String.init<A>(describing:)(&v12, v7);
  v10 = v9;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "failed with error - %{public}@", 30, 2, v6);
  return swift_bridgeObjectRelease();
}

uint64_t CurrentLocationMonitor.locationManager(_:didChangeAuthorization:)(uint64_t a1, uint64_t a2)
{
  return sub_1000096E0(a2);
}

uint64_t sub_100356FDC()
{
  uint64_t result;

  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000016, 0x8000000100ED2570);
  qword_1011B6DD8 = result;
  return result;
}

unint64_t sub_100357054()
{
  unint64_t result;

  result = qword_1010F8930;
  if (!qword_1010F8930)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for CurrentLocationMonitor.Mode, &type metadata for CurrentLocationMonitor.Mode);
    atomic_store(result, (unint64_t *)&qword_1010F8930);
  }
  return result;
}

id sub_100357098@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;
  _BYTE v6[24];

  v3 = (void **)(*a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1003570F0(int *a1)
{
  return sub_10000EAC8(*a1);
}

uint64_t storeEnumTagSinglePayload for CurrentLocationMonitor.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100357160 + 4 * byte_100E383B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100357194 + 4 * byte_100E383B0[v4]))();
}

uint64_t sub_100357194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035719C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003571A4);
  return result;
}

uint64_t sub_1003571B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003571B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003571BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003571C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CurrentLocationMonitor.Mode()
{
  return &type metadata for CurrentLocationMonitor.Mode;
}

uint64_t sub_1003571E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 28, 7);
}

uint64_t sub_100357204()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100357274(_DWORD *a1@<X8>)
{
  sub_100356508(a1);
}

uint64_t sub_100357288(_QWORD *a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;

  v9 = sub_10001A9A8(a3);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v13);
  v15 = a4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a5, a5, v15, v13, v14);
  v20 = a2;
  v16 = sub_100200B34();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, v17, v9, &type metadata for AcceptanceState, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_10035738C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100357784(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003573B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100357B28();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100357410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100357B28();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10035745C(_QWORD *a1@<X8>)
{
  *a1 = &off_101049E38;
}

uint64_t sub_10035746C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003574A4 + 4 * byte_100E384B0[*v0]))(0x70656363616E752ELL, 0xEB00000000646574);
}

uint64_t sub_1003574A4()
{
  return 0x657470656363612ELL;
}

uint64_t sub_1003574C0()
{
  return 0x747365757165722ELL;
}

uint64_t sub_1003574DC()
{
  return 0x746E65732ELL;
}

unint64_t sub_1003574F0()
{
  return 0xD000000000000013;
}

uint64_t sub_10035750C()
{
  return 0x64656C6961662ELL;
}

uint64_t sub_100357524()
{
  return 0x6E61747065636361;
}

uint64_t sub_10035754C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100357B6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100357574(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100357B6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10035759C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1003579F4(a1, &qword_1010F8A10, (uint64_t (*)(void))sub_100357B6C, (uint64_t)&type metadata for OwnerCircleMemberState.CodingKeys);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1003575DC(_QWORD *a1)
{
  char *v1;

  return sub_100357288(a1, *v1, &qword_1010F8A20, (uint64_t (*)(void))sub_100357B6C, (uint64_t)&type metadata for OwnerCircleMemberState.CodingKeys);
}

uint64_t sub_10035760C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E61747065636361 && a2 == 0xEF65746174536563)
  {
    result = swift_bridgeObjectRelease(0xEF65746174536563);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E61747065636361, 0xEF65746174536563, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1003576C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003579B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003576EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003579B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100357714@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1003579F4(a1, &qword_1010F8A00, (uint64_t (*)(void))sub_1003579B0, (uint64_t)&type metadata for MemberCircleMemberState.CodingKeys);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100357754(_QWORD *a1)
{
  char *v1;

  return sub_100357288(a1, *v1, &qword_1010F89F0, (uint64_t (*)(void))sub_1003579B0, (uint64_t)&type metadata for MemberCircleMemberState.CodingKeys);
}

unint64_t sub_100357784(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

ValueMetadata *type metadata accessor for OwnerCircleMemberState()
{
  return &type metadata for OwnerCircleMemberState;
}

ValueMetadata *type metadata accessor for AcceptanceState()
{
  return &type metadata for AcceptanceState;
}

uint64_t _s12searchpartyd15AcceptanceStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100357808 + 4 * byte_100E384BB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10035783C + 4 * byte_100E384B6[v4]))();
}

uint64_t sub_10035783C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100357844(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10035784CLL);
  return result;
}

uint64_t sub_100357858(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100357860);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100357864(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035786C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MemberCircleMemberState()
{
  return &type metadata for MemberCircleMemberState;
}

unint64_t sub_10035788C()
{
  unint64_t result;

  result = qword_1010F89C8;
  if (!qword_1010F89C8)
  {
    result = swift_getWitnessTable("\to#", &type metadata for MemberCircleMemberState);
    atomic_store(result, (unint64_t *)&qword_1010F89C8);
  }
  return result;
}

unint64_t sub_1003578D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F89D0;
  if (!qword_1010F89D0)
  {
    v1 = sub_10001F784(&qword_1010F89D8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010F89D0);
  }
  return result;
}

unint64_t sub_100357924()
{
  unint64_t result;

  result = qword_1010F89E0;
  if (!qword_1010F89E0)
  {
    result = swift_getWitnessTable("\tn#", &type metadata for OwnerCircleMemberState);
    atomic_store(result, (unint64_t *)&qword_1010F89E0);
  }
  return result;
}

unint64_t sub_10035796C()
{
  unint64_t result;

  result = qword_1010F89E8;
  if (!qword_1010F89E8)
  {
    result = swift_getWitnessTable("1n#", &type metadata for AcceptanceState);
    atomic_store(result, (unint64_t *)&qword_1010F89E8);
  }
  return result;
}

unint64_t sub_1003579B0()
{
  unint64_t result;

  result = qword_1010F89F8;
  if (!qword_1010F89F8)
  {
    result = swift_getWitnessTable("Mk#", &type metadata for MemberCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F89F8);
  }
  return result;
}

unint64_t sub_1003579F4(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_10001A9A8(a2);
  v22 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v13 = sub_10001AA44(a1, v11);
  v14 = a3();
  v15 = a4;
  v16 = a4;
  v17 = (unint64_t)v13;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v15, v16, v14, v11, v12);
  if (v4)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v18 = sub_100200A70();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v23, &type metadata for AcceptanceState, v19, v8, &type metadata for AcceptanceState, v18);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
    v17 = v23;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v17;
}

unint64_t sub_100357B28()
{
  unint64_t result;

  result = qword_1010F8A08;
  if (!qword_1010F8A08)
  {
    result = swift_getWitnessTable(byte_100E385E8, &type metadata for AcceptanceState);
    atomic_store(result, (unint64_t *)&qword_1010F8A08);
  }
  return result;
}

unint64_t sub_100357B6C()
{
  unint64_t result;

  result = qword_1010F8A18;
  if (!qword_1010F8A18)
  {
    result = swift_getWitnessTable(byte_100E3895C, &type metadata for OwnerCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8A18);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerCircleMemberState.CodingKeys()
{
  return &type metadata for OwnerCircleMemberState.CodingKeys;
}

uint64_t _s12searchpartyd22OwnerCircleMemberStateV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100357C04 + 4 * byte_100E384C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100357C24 + 4 * byte_100E384C5[v4]))();
}

_BYTE *sub_100357C04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100357C24(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100357C2C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100357C34(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100357C3C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100357C44(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MemberCircleMemberState.CodingKeys()
{
  return &type metadata for MemberCircleMemberState.CodingKeys;
}

unint64_t sub_100357C64()
{
  unint64_t result;

  result = qword_1010F8A28;
  if (!qword_1010F8A28)
  {
    result = swift_getWitnessTable(byte_100E3887C, &type metadata for MemberCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8A28);
  }
  return result;
}

unint64_t sub_100357CAC()
{
  unint64_t result;

  result = qword_1010F8A30;
  if (!qword_1010F8A30)
  {
    result = swift_getWitnessTable(byte_100E38934, &type metadata for OwnerCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8A30);
  }
  return result;
}

unint64_t sub_100357CF4()
{
  unint64_t result;

  result = qword_1010F8A38;
  if (!qword_1010F8A38)
  {
    result = swift_getWitnessTable(byte_100E388A4, &type metadata for OwnerCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8A38);
  }
  return result;
}

unint64_t sub_100357D3C()
{
  unint64_t result;

  result = qword_1010F8A40;
  if (!qword_1010F8A40)
  {
    result = swift_getWitnessTable(byte_100E388CC, &type metadata for OwnerCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8A40);
  }
  return result;
}

unint64_t sub_100357D84()
{
  unint64_t result;

  result = qword_1010F8A48;
  if (!qword_1010F8A48)
  {
    result = swift_getWitnessTable("Ul#", &type metadata for MemberCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8A48);
  }
  return result;
}

unint64_t sub_100357DCC()
{
  unint64_t result;

  result = qword_1010F8A50;
  if (!qword_1010F8A50)
  {
    result = swift_getWitnessTable(byte_100E38814, &type metadata for MemberCircleMemberState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8A50);
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingCompleteCommandPayload()
{
  return &type metadata for PairingCompleteCommandPayload;
}

unint64_t sub_100357E20(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100357E4C();
  result = sub_100357E90();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100357E4C()
{
  unint64_t result;

  result = qword_1010F8A58;
  if (!qword_1010F8A58)
  {
    result = swift_getWitnessTable("=k#", &type metadata for PairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F8A58);
  }
  return result;
}

unint64_t sub_100357E90()
{
  unint64_t result;

  result = qword_1010F8A60;
  if (!qword_1010F8A60)
  {
    result = swift_getWitnessTable("ik#", &type metadata for PairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F8A60);
  }
  return result;
}

uint64_t sub_100357ED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = enum case for FMNAccountType.pairingLock(_:);
  v3 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for PairingLockAckEndPoint(0);
  URLComponents.init()(v4);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B4E0(v6);
  swift_bridgeObjectRelease();
  return URLComponents.host.setter();
}

uint64_t type metadata accessor for PairingLockAckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F8AC0;
  if (!qword_1010F8AC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairingLockAckEndPoint);
  return result;
}

uint64_t sub_100358030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035803C);
}

uint64_t sub_10035803C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1003580B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003580BC);
}

uint64_t sub_1003580BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

ValueMetadata *type metadata accessor for CirclesStoppedEnvelopeV1()
{
  return &type metadata for CirclesStoppedEnvelopeV1;
}

ValueMetadata *type metadata accessor for CirclesUpdatedEnvelopeV1()
{
  return &type metadata for CirclesUpdatedEnvelopeV1;
}

char *sub_100358158(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v13(&a2[v10], 1, v7))
    {
      v14 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v9(&a1[a3[6]], &a2[a3[6]], v7);
    v16 = a3[7];
    v17 = &a1[v16];
    v18 = &a2[v16];
    if (v13(&a2[v16], 1, v7))
    {
      v19 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v9(v17, v18, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    }
    v20 = a3[8];
    v21 = a3[9];
    v22 = &a1[v20];
    v23 = &a2[v20];
    v24 = *((_QWORD *)v23 + 1);
    *v22 = *(_QWORD *)v23;
    v22[1] = v24;
    v25 = &a1[v21];
    v26 = &a2[v21];
    v27 = *((_QWORD *)v26 + 1);
    *v25 = *(_QWORD *)v26;
    v25[1] = v27;
    v28 = a3[11];
    *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
    *(_DWORD *)&a1[v28] = *(_DWORD *)&a2[v28];
    v29 = a3[12];
    v30 = a3[13];
    v31 = &a1[v29];
    v32 = &a2[v29];
    v33 = *((_QWORD *)v32 + 1);
    *v31 = *(_QWORD *)v32;
    v31[1] = v33;
    *(_QWORD *)&a1[v30] = *(_QWORD *)&a2[v30];
    v34 = a3[14];
    v35 = a3[15];
    v36 = &a1[v34];
    v37 = &a2[v34];
    v38 = *((_QWORD *)v37 + 1);
    *v36 = *(_QWORD *)v37;
    v36[1] = v38;
    v39 = (uint64_t *)&a1[v35];
    v40 = *(_QWORD *)&a2[v35];
    v41 = *(_QWORD *)&a2[v35 + 8];
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v38);
    sub_10001BBBC(v40, v41);
    *v39 = v40;
    v39[1] = v41;
    v42 = a3[16];
    v43 = a3[17];
    v44 = *(_QWORD *)&a2[v42];
    *(_QWORD *)&a1[v42] = v44;
    a1[v43] = a2[v43];
    swift_bridgeObjectRetain(v44);
  }
  return a1;
}

uint64_t sub_100358398(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = a1 + a2[5];
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4))
    v6(v7, v4);
  v6(a1 + a2[6], v4);
  v9 = a1 + a2[7];
  if (!v8(v9, 1, v4))
    v6(v9, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + a2[15]), *(_QWORD *)(a1 + a2[15] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003584A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v12(a2 + v9, 1, v6))
  {
    v13 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v8(a1 + a3[6], a2 + a3[6], v6);
  v14 = a3[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12(a2 + v14, 1, v6))
  {
    v17 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v15, (uint64_t)v16, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[8];
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v18);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (_QWORD *)(a1 + v19);
  v24 = (_QWORD *)(a2 + v19);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + v26) = *(_DWORD *)(a2 + v26);
  v27 = a3[12];
  v28 = a3[13];
  v29 = (_QWORD *)(a1 + v27);
  v30 = (_QWORD *)(a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  v32 = a3[14];
  v33 = a3[15];
  v34 = (_QWORD *)(a1 + v32);
  v35 = (_QWORD *)(a2 + v32);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = (uint64_t *)(a1 + v33);
  v38 = *(_QWORD *)(a2 + v33);
  v39 = *(_QWORD *)(a2 + v33 + 8);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v36);
  sub_10001BBBC(v38, v39);
  *v37 = v38;
  v37[1] = v39;
  v40 = a3[16];
  v41 = a3[17];
  v42 = *(_QWORD *)(a2 + v40);
  *(_QWORD *)(a1 + v40) = v42;
  *(_BYTE *)(a1 + v41) = *(_BYTE *)(a2 + v41);
  swift_bridgeObjectRetain(v42);
  return a1;
}

char *sub_1003586B8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v8(v17, v18, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v18, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
LABEL_13:
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  v26 = a3[9];
  v27 = &a1[v26];
  v28 = &a2[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v29 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease();
  *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  v30 = a3[12];
  v31 = &a1[v30];
  v32 = &a2[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  v34 = a3[14];
  v35 = &a1[v34];
  v36 = &a2[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v37 = *((_QWORD *)v36 + 1);
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease();
  v38 = a3[15];
  v39 = (uint64_t *)&a1[v38];
  v40 = (uint64_t *)&a2[v38];
  v41 = *v40;
  v42 = v40[1];
  sub_10001BBBC(*v40, v42);
  v43 = *v39;
  v44 = v39[1];
  *v39 = v41;
  v39[1] = v42;
  sub_10001BC14(v43, v44);
  v45 = a3[16];
  v46 = *(_QWORD *)&a2[v45];
  *(_QWORD *)&a1[v45] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

char *sub_1003589C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v12(&a2[v9], 1, v6))
  {
    v13 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  if (v12(&a2[v14], 1, v6))
  {
    v17 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  v18 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  v19 = a3[11];
  *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
  *(_DWORD *)&a1[v19] = *(_DWORD *)&a2[v19];
  v20 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  v21 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  v22 = a3[17];
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  a1[v22] = a2[v22];
  return a1;
}

char *sub_100358B80(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    v15 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v8(v10, v11, v6);
LABEL_7:
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = v12(&a1[v16], 1, v6);
  v20 = v12(v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v8(v17, v18, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
LABEL_13:
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = (uint64_t *)&a2[v22];
  v26 = *v24;
  v25 = v24[1];
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v27 = a3[9];
  v28 = &a1[v27];
  v29 = (uint64_t *)&a2[v27];
  v31 = *v29;
  v30 = v29[1];
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease();
  v32 = a3[11];
  *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
  *(_DWORD *)&a1[v32] = *(_DWORD *)&a2[v32];
  v33 = a3[12];
  v34 = &a1[v33];
  v35 = (uint64_t *)&a2[v33];
  v37 = *v35;
  v36 = v35[1];
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v38 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  v39 = &a1[v38];
  v40 = (uint64_t *)&a2[v38];
  v42 = *v40;
  v41 = v40[1];
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  v43 = a3[15];
  v44 = *(_QWORD *)&a1[v43];
  v45 = *(_QWORD *)&a1[v43 + 8];
  *(_OWORD *)&a1[v43] = *(_OWORD *)&a2[v43];
  sub_10001BC14(v44, v45);
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  swift_bridgeObjectRelease();
  a1[a3[17]] = a2[a3[17]];
  return a1;
}

uint64_t sub_100358E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100358E34);
}

uint64_t sub_100358E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100358EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100358EF0);
}

uint64_t sub_100358EF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_10001A9A8(&qword_1010ED860);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CircleTrustEnvelopeV1(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F8B50, (uint64_t)&nominal type descriptor for CircleTrustEnvelopeV1);
}

void sub_100358FB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  void *v18;
  char *v19;
  void *v20;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v7 = v4;
    sub_100252558(319);
    if (v6 <= 0x3F)
    {
      v8 = *(_QWORD *)(v5 - 8) + 64;
      v9 = v4;
      v10 = v8;
      v11 = &unk_100E38B68;
      v12 = &unk_100E38B68;
      v13 = (char *)&value witness table for Builtin.Int32 + 64;
      v14 = (char *)&value witness table for Builtin.Int32 + 64;
      v15 = &unk_100E38B68;
      v16 = (char *)&value witness table for Builtin.Int64 + 64;
      v17 = &unk_100E38B80;
      v18 = &unk_100E38B98;
      v19 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v20 = &unk_100E38BB0;
      swift_initStructMetadata(a1, 256, 14, &v7, a1 + 16);
    }
  }
}

uint64_t sub_100359090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035909C);
}

uint64_t sub_1003590A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003590AC);
}

uint64_t type metadata accessor for CircleTrustAckEnvelopeV1(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F8C10, (uint64_t)&nominal type descriptor for CircleTrustAckEnvelopeV1);
}

uint64_t sub_1003590C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003590D0);
}

uint64_t sub_1003590D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003590E0);
}

uint64_t type metadata accessor for CircleTrustAcceptEnvelopeV1(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F8CA0, (uint64_t)&nominal type descriptor for CircleTrustAcceptEnvelopeV1);
}

uint64_t sub_1003590F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100359104);
}

uint64_t sub_100359108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100359114);
}

uint64_t type metadata accessor for CircleTrustDeclineEnvelopeV1(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F8D30, (uint64_t)&nominal type descriptor for CircleTrustDeclineEnvelopeV1);
}

uint64_t sub_10035912C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100359138);
}

uint64_t sub_10035913C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100359148);
}

uint64_t type metadata accessor for CircleTrustRequestEnvelopeV1(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F8DC0, (uint64_t)&nominal type descriptor for CircleTrustRequestEnvelopeV1);
}

uint64_t sub_100359160(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003591A0 + 4 * byte_100E38AE0[a1]))(0x6564496572616873, 0xEF7265696669746ELL);
}

unint64_t sub_1003591A0()
{
  return 0xD000000000000015;
}

uint64_t sub_1003591E8()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1003591FC()
{
  return 0x65566D6574737973;
}

uint64_t sub_100359220()
{
  return 0x6449726F646E6576;
}

uint64_t sub_100359238()
{
  return 0x49746375646F7270;
}

uint64_t sub_100359254()
{
  return 0x614E6E6F63616562;
}

uint64_t sub_100359270()
{
  return 1701605234;
}

uint64_t sub_100359280()
{
  return 0x696A6F6D65;
}

uint64_t sub_100359294()
{
  return 0x616B63615079656BLL;
}

uint64_t sub_1003592B4()
{
  return 0x5064657473757274;
}

uint64_t sub_1003592D4()
{
  return 0x7079546572616873;
}

uint64_t sub_1003592F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v38;
  char v39;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F8E88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10035A9DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CircleTrustEnvelopeV1.CodingKeys, &type metadata for CircleTrustEnvelopeV1.CodingKeys, v11, v9, v10);
  LOBYTE(v38) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v38, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for CircleTrustEnvelopeV1(0);
    v15 = v3 + v14[5];
    LOBYTE(v38) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v38, v5, v12, v13);
    v16 = v3 + v14[6];
    LOBYTE(v38) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v38, v5, v12, v13);
    v17 = v3 + v14[7];
    LOBYTE(v38) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v38, v5, v12, v13);
    v18 = (uint64_t *)(v3 + v14[8]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v38) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v38, v5);
    v21 = (uint64_t *)(v3 + v14[9]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v38) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v38, v5);
    v24 = *(unsigned int *)(v3 + v14[10]);
    LOBYTE(v38) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v38, v5);
    v25 = *(unsigned int *)(v3 + v14[11]);
    LOBYTE(v38) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v38, v5);
    v26 = (uint64_t *)(v3 + v14[12]);
    v27 = *v26;
    v28 = v26[1];
    LOBYTE(v38) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v28, &v38, v5);
    v29 = *(_QWORD *)(v3 + v14[13]);
    LOBYTE(v38) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v29, &v38, v5);
    v30 = (uint64_t *)(v3 + v14[14]);
    v31 = *v30;
    v32 = v30[1];
    LOBYTE(v38) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v38, v5);
    v38 = *(_OWORD *)(v3 + v14[15]);
    v39 = 11;
    v33 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v39, v5, &type metadata for Data, v33);
    *(_QWORD *)&v38 = *(_QWORD *)(v3 + v14[16]);
    v39 = 12;
    v34 = sub_10001A9A8(&qword_1010F8E18);
    v35 = sub_10035B3C8(&qword_1010F8E90, &qword_1010F8E98, (uint64_t)&unk_100E4CED8, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v39, v5, v34, v35);
    LOBYTE(v38) = *(_BYTE *)(v3 + v14[17]);
    v39 = 13;
    v36 = sub_1000A8324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v39, v5, &type metadata for ShareType, v36);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100359700@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, _QWORD *, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  int *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  void (*v51)(char *, _QWORD *, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char v63;

  v53 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v50 - v7;
  v9 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v9 - 8);
  v61 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v50 - v13);
  v55 = sub_10001A9A8(&qword_1010F8E08);
  v15 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = (int *)type metadata accessor for CircleTrustEnvelopeV1(0);
  __chkstk_darwin(v58);
  v59 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v19 = a1[4];
  v56 = a1;
  sub_10001AA44(a1, v20);
  v21 = sub_10035A9DC();
  v54 = v17;
  v22 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CircleTrustEnvelopeV1.CodingKeys, &type metadata for CircleTrustEnvelopeV1.CodingKeys, v21, v20, v19);
  if (v22)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
  v52 = v12;
  v57 = v15;
  LOBYTE(v62) = 0;
  v23 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v61, &v62, v55, v61, v23);
  v24 = v59;
  v25 = *(void (**)(char *, _QWORD *, uint64_t))(v60 + 32);
  v26 = v14;
  v27 = v61;
  v25(v59, v26, v61);
  LOBYTE(v62) = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v62, v55, v27, v23);
  v51 = v25;
  v28 = v58;
  sub_1001C0884((uint64_t)v8, (uint64_t)&v24[v58[5]]);
  LOBYTE(v62) = 2;
  v29 = v52;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v52, v61, &v62, v55, v61, v23);
  v30 = v61;
  v51(&v24[v28[6]], v29, v61);
  LOBYTE(v62) = 3;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &v62, v55, v30, v23);
  sub_1001C0884((uint64_t)v6, (uint64_t)&v24[v28[7]]);
  LOBYTE(v62) = 4;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v62, v55);
  v32 = (uint64_t *)&v24[v28[8]];
  *v32 = v31;
  v32[1] = v33;
  LOBYTE(v62) = 5;
  v34 = KeyedDecodingContainer.decode(_:forKey:)(&v62, v55);
  v35 = (uint64_t *)&v24[v28[9]];
  *v35 = v34;
  v35[1] = v36;
  LOBYTE(v62) = 6;
  *(_DWORD *)&v24[v28[10]] = KeyedDecodingContainer.decode(_:forKey:)(&v62, v55);
  LOBYTE(v62) = 7;
  *(_DWORD *)&v24[v28[11]] = KeyedDecodingContainer.decode(_:forKey:)(&v62, v55);
  LOBYTE(v62) = 8;
  v37 = KeyedDecodingContainer.decode(_:forKey:)(&v62, v55);
  v38 = (uint64_t *)&v24[v28[12]];
  *v38 = v37;
  v38[1] = v39;
  LOBYTE(v62) = 9;
  v40 = KeyedDecodingContainer.decode(_:forKey:)(&v62, v55);
  *(_QWORD *)&v59[v58[13]] = v40;
  LOBYTE(v62) = 10;
  v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v62, v55);
  v42 = (uint64_t *)&v59[v58[14]];
  *v42 = v41;
  v42[1] = v43;
  v63 = 11;
  v44 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v62, &type metadata for Data, &v63, v55, &type metadata for Data, v44);
  *(_OWORD *)&v59[v58[15]] = v62;
  v45 = sub_10001A9A8(&qword_1010F8E18);
  v63 = 12;
  v46 = sub_10035B3C8(&qword_1010F8E20, &qword_1010F8E28, (uint64_t)&unk_100E4CF00, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v62, v45, &v63, v55, v45, v46);
  *(_QWORD *)&v59[v58[16]] = v62;
  v63 = 13;
  v47 = sub_1000A83AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v62, &type metadata for ShareType, &v63, v55, &type metadata for ShareType, v47);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v55);
  v48 = (uint64_t)v59;
  v59[v58[17]] = v62;
  sub_10035AA20(v48, v53);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
  return sub_10035AA64(v48);
}

uint64_t sub_100359F70(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v9 = sub_10001A9A8(a3);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v13);
  v15 = a4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a5, a5, v15, v13, v14);
  v21 = a2;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  v17 = sub_10035B44C((unint64_t *)&qword_101114210, &qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, v18, v9, v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10035A0A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a6;
  v30 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_10001A9A8(a2);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a3;
  v15 = a3(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v25 - v16;
  v19 = a1[3];
  v18 = a1[4];
  sub_10001AA44(a1, v19);
  v20 = a4();
  v21 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(a5, a5, v20, v19, v18);
  if (!v21)
  {
    v22 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v30, v23, v12, v30, v22);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
    (*(void (**)(char *, _QWORD *, uint64_t))(v25 + 32))(v17, v29, v30);
    sub_1000126EC((uint64_t)v17, v26, v27);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_10035A26C()
{
  unsigned __int8 *v0;

  return sub_100359160(*v0);
}

uint64_t sub_10035A274@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10035AB28(a1, a2);
  *a3 = result;
  return result;
}

void sub_10035A298(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_10035A2A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035A9DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035A2CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035A9DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035A2F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100359700(a1, a2);
}

uint64_t sub_10035A308(_QWORD *a1)
{
  return sub_1003592F4(a1);
}

uint64_t sub_10035A31C()
{
  return 0x6564496572616873;
}

uint64_t sub_10035A344(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035AAA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035A36C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035AAA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035A394@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035A0A0(a1, &qword_1010F8E30, type metadata accessor for CircleTrustAckEnvelopeV1, (uint64_t (*)(void))sub_10035AAA0, (uint64_t)&type metadata for CircleTrustAckEnvelopeV1.CodingKeys, a2);
}

uint64_t sub_10035A3C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10035A4A4(a1, a2, a3, &qword_1010F8EB0, (uint64_t (*)(void))sub_10035AAA0, (uint64_t)&type metadata for CircleTrustAckEnvelopeV1.CodingKeys);
}

uint64_t sub_10035A3F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035AAE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035A41C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035AAE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035A444@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035A0A0(a1, &qword_1010F8E40, type metadata accessor for CircleTrustAcceptEnvelopeV1, (uint64_t (*)(void))sub_10035AAE4, (uint64_t)&type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys, a2);
}

uint64_t sub_10035A478(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10035A4A4(a1, a2, a3, &qword_1010F8EA8, (uint64_t (*)(void))sub_10035AAE4, (uint64_t)&type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys);
}

uint64_t sub_10035A4A4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v9 = v6;
  v11 = sub_10001A9A8(a4);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v15);
  v17 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v17, v15, v16);
  v18 = type metadata accessor for UUID(0);
  v19 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v9, v20, v11, v18, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10035A5BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035A998();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035A5E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035A998();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035A60C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035A0A0(a1, &qword_1010F8E50, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t (*)(void))sub_10035A998, (uint64_t)&type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys, a2);
}

uint64_t sub_10035A640(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10035A4A4(a1, a2, a3, &qword_1010F8DF8, (uint64_t (*)(void))sub_10035A998, (uint64_t)&type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys);
}

unint64_t sub_10035A66C()
{
  return 0xD000000000000011;
}

uint64_t sub_10035A688(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035B118();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035A6B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035B118();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10035A6D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10035B1E0(a1, &qword_1010F8E58, (uint64_t (*)(void))sub_10035B118, (uint64_t)&type metadata for CirclesUpdatedEnvelopeV1.CodingKeys);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10035A718(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100359F70(a1, *v1, &qword_1010F8EB8, (uint64_t (*)(void))sub_10035B118, (uint64_t)&type metadata for CirclesUpdatedEnvelopeV1.CodingKeys);
}

uint64_t sub_10035A748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10035B15C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10035A770(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035B340();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035A798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035B340();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10035A7C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10035B1E0(a1, &qword_1010F8E68, (uint64_t (*)(void))sub_10035B340, (uint64_t)&type metadata for CirclesStoppedEnvelopeV1.CodingKeys);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10035A800(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100359F70(a1, *v1, &qword_1010F8EA0, (uint64_t (*)(void))sub_10035B340, (uint64_t)&type metadata for CirclesStoppedEnvelopeV1.CodingKeys);
}

uint64_t sub_10035A830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6564496572616873 && a2 == 0xEF7265696669746ELL)
  {
    result = swift_bridgeObjectRelease(0xEF7265696669746ELL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6564496572616873, 0xEF7265696669746ELL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10035A8E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035B384();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035A910(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10035B384();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035A938@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035A0A0(a1, &qword_1010F8E78, type metadata accessor for CircleTrustRequestEnvelopeV1, (uint64_t (*)(void))sub_10035B384, (uint64_t)&type metadata for CircleTrustRequestEnvelopeV1.CodingKeys, a2);
}

uint64_t sub_10035A96C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10035A4A4(a1, a2, a3, &qword_1010F8EC0, (uint64_t (*)(void))sub_10035B384, (uint64_t)&type metadata for CircleTrustRequestEnvelopeV1.CodingKeys);
}

unint64_t sub_10035A998()
{
  unint64_t result;

  result = qword_1010F8E00;
  if (!qword_1010F8E00)
  {
    result = swift_getWitnessTable("\re#", &type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8E00);
  }
  return result;
}

unint64_t sub_10035A9DC()
{
  unint64_t result;

  result = qword_1010F8E10;
  if (!qword_1010F8E10)
  {
    result = swift_getWitnessTable("]e#", &type metadata for CircleTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8E10);
  }
  return result;
}

uint64_t sub_10035AA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CircleTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10035AA64(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CircleTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10035AAA0()
{
  unint64_t result;

  result = qword_1010F8E38;
  if (!qword_1010F8E38)
  {
    result = swift_getWitnessTable(byte_100E394D4, &type metadata for CircleTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8E38);
  }
  return result;
}

unint64_t sub_10035AAE4()
{
  unint64_t result;

  result = qword_1010F8E48;
  if (!qword_1010F8E48)
  {
    result = swift_getWitnessTable(byte_100E39484, &type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8E48);
  }
  return result;
}

uint64_t sub_10035AB28(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0x6564496572616873 && a2 == 0xEF7265696669746ELL)
  {
    v5 = 0xEF7265696669746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6564496572616873, 0xEF7265696669746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015)
  {
    v7 = 0x8000000100ED26A0;
    if (a2 == 0x8000000100ED26A0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED26A0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100EC28D0)
  {
    v8 = 0x8000000100EC28D0;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000015)
  {
    v9 = 0x8000000100ED26C0;
    if (a2 == 0x8000000100ED26C0)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED26C0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372)
  {
    v11 = 0xED00006E6F697372;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566D6574737973, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v13 = 0xE900000000000064;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x614E6E6F63616562 && a2 == 0xEA0000000000656DLL)
  {
    v14 = 0xEA0000000000656DLL;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E6E6F63616562, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v15 = 0xE400000000000000;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0x696A6F6D65 && a2 == 0xE500000000000000)
  {
    v16 = 0xE500000000000000;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696A6F6D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_66;
  }
  if (a1 == 0x616B63615079656BLL && a2 == 0xEB00000000736567)
  {
    v17 = 0xEB00000000736567;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x616B63615079656BLL, 0xEB00000000736567, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0x5064657473757274 && a2 == 0xEC00000073726565)
  {
    v18 = 0xEC00000073726565;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5064657473757274, 0xEC00000073726565, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0x7079546572616873 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 13;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7079546572616873, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

unint64_t sub_10035B118()
{
  unint64_t result;

  result = qword_1010F8E60;
  if (!qword_1010F8E60)
  {
    result = swift_getWitnessTable("Mf#", &type metadata for CirclesUpdatedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8E60);
  }
  return result;
}

uint64_t sub_10035B15C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000100ED26E0)
  {
    swift_bridgeObjectRelease(0x8000000100ED26E0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED26E0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_10035B1E0(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v8 = sub_10001A9A8(a2);
  v23 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v13 = sub_10001AA44(a1, v11);
  v14 = a3();
  v15 = a4;
  v16 = a4;
  v17 = v13;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v15, v16, v14, v11, v12);
  if (v4)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v18 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    v19 = sub_10035B44C((unint64_t *)&qword_10111F690, (unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, v18, v20, v8, v18, v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
    v17 = v24;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v17;
}

unint64_t sub_10035B340()
{
  unint64_t result;

  result = qword_1010F8E70;
  if (!qword_1010F8E70)
  {
    result = swift_getWitnessTable(byte_100E393E4, &type metadata for CirclesStoppedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8E70);
  }
  return result;
}

unint64_t sub_10035B384()
{
  unint64_t result;

  result = qword_1010F8E80;
  if (!qword_1010F8E80)
  {
    result = swift_getWitnessTable(byte_100E39394, &type metadata for CircleTrustRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8E80);
  }
  return result;
}

uint64_t sub_10035B3C8(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F8E18);
    v10 = sub_100006204(a2, type metadata accessor for PeerTrustEnvelopeV1, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10035B44C(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784((uint64_t *)&unk_1010F7730);
    v10 = sub_100006204(a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustRequestEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustRequestEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CirclesStoppedEnvelopeV1.CodingKeys()
{
  return &type metadata for CirclesStoppedEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CirclesUpdatedEnvelopeV1.CodingKeys()
{
  return &type metadata for CirclesUpdatedEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CircleTrustAcceptEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CircleTrustAckEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustAckEnvelopeV1.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CircleTrustEnvelopeV1.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CircleTrustEnvelopeV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_10035B600 + 4 * byte_100E38AF3[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10035B634 + 4 * byte_100E38AEE[v4]))();
}

uint64_t sub_10035B634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035B63C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10035B644);
  return result;
}

uint64_t sub_10035B650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10035B658);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_10035B65C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035B664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustEnvelopeV1.CodingKeys;
}

uint64_t _s12searchpartyd28CircleTrustRequestEnvelopeV1V10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10035B6C0 + 4 * byte_100E38AF8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10035B6E0 + 4 * byte_100E38AFD[v4]))();
}

_BYTE *sub_10035B6C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10035B6E0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10035B6E8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10035B6F0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10035B6F8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10035B700(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustDeclineEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys;
}

unint64_t sub_10035B720()
{
  unint64_t result;

  result = qword_1010F8EC8;
  if (!qword_1010F8EC8)
  {
    result = swift_getWitnessTable("Uk#", &type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8EC8);
  }
  return result;
}

unint64_t sub_10035B768()
{
  unint64_t result;

  result = qword_1010F8ED0;
  if (!qword_1010F8ED0)
  {
    result = swift_getWitnessTable(byte_100E38FD4, &type metadata for CircleTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8ED0);
  }
  return result;
}

unint64_t sub_10035B7B0()
{
  unint64_t result;

  result = qword_1010F8ED8;
  if (!qword_1010F8ED8)
  {
    result = swift_getWitnessTable(byte_100E3908C, &type metadata for CircleTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8ED8);
  }
  return result;
}

unint64_t sub_10035B7F8()
{
  unint64_t result;

  result = qword_1010F8EE0;
  if (!qword_1010F8EE0)
  {
    result = swift_getWitnessTable("-i#", &type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8EE0);
  }
  return result;
}

unint64_t sub_10035B840()
{
  unint64_t result;

  result = qword_1010F8EE8;
  if (!qword_1010F8EE8)
  {
    result = swift_getWitnessTable("uh#", &type metadata for CirclesUpdatedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8EE8);
  }
  return result;
}

unint64_t sub_10035B888()
{
  unint64_t result;

  result = qword_1010F8EF0;
  if (!qword_1010F8EF0)
  {
    result = swift_getWitnessTable(byte_100E392B4, &type metadata for CirclesStoppedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8EF0);
  }
  return result;
}

unint64_t sub_10035B8D0()
{
  unint64_t result;

  result = qword_1010F8EF8;
  if (!qword_1010F8EF8)
  {
    result = swift_getWitnessTable(byte_100E3936C, &type metadata for CircleTrustRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8EF8);
  }
  return result;
}

unint64_t sub_10035B918()
{
  unint64_t result;

  result = qword_1010F8F00;
  if (!qword_1010F8F00)
  {
    result = swift_getWitnessTable("Mg#", &type metadata for CircleTrustRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F00);
  }
  return result;
}

unint64_t sub_10035B960()
{
  unint64_t result;

  result = qword_1010F8F08;
  if (!qword_1010F8F08)
  {
    result = swift_getWitnessTable("5g#", &type metadata for CircleTrustRequestEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F08);
  }
  return result;
}

unint64_t sub_10035B9A8()
{
  unint64_t result;

  result = qword_1010F8F10;
  if (!qword_1010F8F10)
  {
    result = swift_getWitnessTable(byte_100E39224, &type metadata for CirclesStoppedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F10);
  }
  return result;
}

unint64_t sub_10035B9F0()
{
  unint64_t result;

  result = qword_1010F8F18;
  if (!qword_1010F8F18)
  {
    result = swift_getWitnessTable(byte_100E3924C, &type metadata for CirclesStoppedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F18);
  }
  return result;
}

unint64_t sub_10035BA38()
{
  unint64_t result;

  result = qword_1010F8F20;
  if (!qword_1010F8F20)
  {
    result = swift_getWitnessTable(byte_100E3916C, &type metadata for CirclesUpdatedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F20);
  }
  return result;
}

unint64_t sub_10035BA80()
{
  unint64_t result;

  result = qword_1010F8F28;
  if (!qword_1010F8F28)
  {
    result = swift_getWitnessTable(byte_100E39194, &type metadata for CirclesUpdatedEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F28);
  }
  return result;
}

unint64_t sub_10035BAC8()
{
  unint64_t result;

  result = qword_1010F8F30;
  if (!qword_1010F8F30)
  {
    result = swift_getWitnessTable("ui#", &type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F30);
  }
  return result;
}

unint64_t sub_10035BB10()
{
  unint64_t result;

  result = qword_1010F8F38;
  if (!qword_1010F8F38)
  {
    result = swift_getWitnessTable("]i#", &type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F38);
  }
  return result;
}

unint64_t sub_10035BB58()
{
  unint64_t result;

  result = qword_1010F8F40;
  if (!qword_1010F8F40)
  {
    result = swift_getWitnessTable("-j#", &type metadata for CircleTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F40);
  }
  return result;
}

unint64_t sub_10035BBA0()
{
  unint64_t result;

  result = qword_1010F8F48;
  if (!qword_1010F8F48)
  {
    result = swift_getWitnessTable(byte_100E39024, &type metadata for CircleTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F48);
  }
  return result;
}

unint64_t sub_10035BBE8()
{
  unint64_t result;

  result = qword_1010F8F50;
  if (!qword_1010F8F50)
  {
    result = swift_getWitnessTable(byte_100E38F44, &type metadata for CircleTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F50);
  }
  return result;
}

unint64_t sub_10035BC30()
{
  unint64_t result;

  result = qword_1010F8F58;
  if (!qword_1010F8F58)
  {
    result = swift_getWitnessTable(byte_100E38F6C, &type metadata for CircleTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F58);
  }
  return result;
}

unint64_t sub_10035BC78()
{
  unint64_t result;

  result = qword_1010F8F60;
  if (!qword_1010F8F60)
  {
    result = swift_getWitnessTable(byte_100E38E8C, &type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F60);
  }
  return result;
}

unint64_t sub_10035BCC0()
{
  unint64_t result;

  result = qword_1010F8F68;
  if (!qword_1010F8F68)
  {
    result = swift_getWitnessTable(byte_100E38EB4, &type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F8F68);
  }
  return result;
}

_QWORD *sub_10035BD08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, int *, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v20;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    v7 = *(int *)(a3 + 36);
    v8 = (char *)a2 + v7;
    v9 = (char *)(a1 + v7);
    *(_QWORD *)(a1 + 48) = a2[6];
    v10 = (int *)type metadata accessor for BeaconLocationUpdate(0);
    v11 = *((_QWORD *)v10 - 1);
    v12 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v11 + 48);
    swift_bridgeObjectRetain(v5);
    v13 = swift_bridgeObjectRetain(v6);
    if (v12(v8, 1, v10, v13))
    {
      v14 = sub_10001A9A8(&qword_1010F8F70);
      memcpy(v9, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v16 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v8, v16);
      *(_QWORD *)&v9[v10[5]] = *(_QWORD *)&v8[v10[5]];
      *(_QWORD *)&v9[v10[6]] = *(_QWORD *)&v8[v10[6]];
      *(_QWORD *)&v9[v10[7]] = *(_QWORD *)&v8[v10[7]];
      v17 = v10[8];
      v18 = *(_QWORD *)&v8[v17];
      *(_QWORD *)&v9[v17] = v18;
      v9[v10[9]] = v8[v10[9]];
      v19 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v11 + 56);
      v20 = swift_bridgeObjectRetain(v18);
      v19(v9, 0, 1, v10, v20);
    }
  }
  return v3;
}

uint64_t sub_10035BE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for BeaconLocationUpdate(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10035BF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, int *, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  v6 = *(int *)(a3 + 36);
  v7 = (char *)(a2 + v6);
  v8 = (char *)(a1 + v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v9 = (int *)type metadata accessor for BeaconLocationUpdate(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  if (v11(v7, 1, v9, v12))
  {
    v13 = sub_10001A9A8(&qword_1010F8F70);
    memcpy(v8, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v8, v7, v14);
    *(_QWORD *)&v8[v9[5]] = *(_QWORD *)&v7[v9[5]];
    *(_QWORD *)&v8[v9[6]] = *(_QWORD *)&v7[v9[6]];
    *(_QWORD *)&v8[v9[7]] = *(_QWORD *)&v7[v9[7]];
    v15 = v9[8];
    v16 = *(_QWORD *)&v7[v15];
    *(_QWORD *)&v8[v15] = v16;
    v8[v9[9]] = v7[v9[9]];
    v17 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v10 + 56);
    v18 = swift_bridgeObjectRetain(v16);
    v17(v8, 0, 1, v9, v18);
  }
  return a1;
}

uint64_t sub_10035C044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(int *)(a3 + 36);
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = (int *)type metadata accessor for BeaconLocationUpdate(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v23 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v9, v10, v23);
      *(_QWORD *)&v9[v11[5]] = *(_QWORD *)&v10[v11[5]];
      *(_QWORD *)&v9[v11[6]] = *(_QWORD *)&v10[v11[6]];
      *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
      v24 = v11[8];
      v25 = *(_QWORD *)&v10[v24];
      *(_QWORD *)&v9[v24] = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease();
      v9[v11[9]] = v10[v11[9]];
      return a1;
    }
    sub_10035C248((uint64_t)v9);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v21 = sub_10001A9A8(&qword_1010F8F70);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v16 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v9, v10, v16);
  *(_QWORD *)&v9[v11[5]] = *(_QWORD *)&v10[v11[5]];
  *(_QWORD *)&v9[v11[6]] = *(_QWORD *)&v10[v11[6]];
  *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
  v17 = v11[8];
  v18 = *(_QWORD *)&v10[v17];
  *(_QWORD *)&v9[v17] = v18;
  v9[v11[9]] = v10[v11[9]];
  v19 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v12 + 56);
  v20 = swift_bridgeObjectRetain(v18);
  v19(v9, 0, 1, v11, v20);
  return a1;
}

uint64_t sub_10035C248(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeaconLocationUpdate(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10035C284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(int *)(a3 + 36);
  v5 = (char *)(a1 + v4);
  v6 = (char *)(a2 + v4);
  v7 = (int *)type metadata accessor for BeaconLocationUpdate(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_10001A9A8(&qword_1010F8F70);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v5, v6, v10);
    *(_QWORD *)&v5[v7[5]] = *(_QWORD *)&v6[v7[5]];
    *(_QWORD *)&v5[v7[6]] = *(_QWORD *)&v6[v7[6]];
    *(_QWORD *)&v5[v7[7]] = *(_QWORD *)&v6[v7[7]];
    *(_QWORD *)&v5[v7[8]] = *(_QWORD *)&v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_10035C3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int *v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(int *)(a3 + 36);
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = (int *)type metadata accessor for BeaconLocationUpdate(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      v19 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v9, v10, v19);
      *(_QWORD *)&v9[v11[5]] = *(_QWORD *)&v10[v11[5]];
      *(_QWORD *)&v9[v11[6]] = *(_QWORD *)&v10[v11[6]];
      *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
      *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
      swift_bridgeObjectRelease();
      v9[v11[9]] = v10[v11[9]];
      return a1;
    }
    sub_10035C248((uint64_t)v9);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v17 = sub_10001A9A8(&qword_1010F8F70);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  v16 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v9, v10, v16);
  *(_QWORD *)&v9[v11[5]] = *(_QWORD *)&v10[v11[5]];
  *(_QWORD *)&v9[v11[6]] = *(_QWORD *)&v10[v11[6]];
  *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
  *(_QWORD *)&v9[v11[8]] = *(_QWORD *)&v10[v11[8]];
  v9[v11[9]] = v10[v11[9]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_10035C580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035C58C);
}

uint64_t sub_10035C58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A9A8(&qword_1010F8F70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_10035C60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10035C618);
}

uint64_t sub_10035C618(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010F8F70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for Intent(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F8FD0;
  if (!qword_1010F8FD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Intent);
  return result;
}

void sub_10035C6CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E395E0;
  v4[1] = &unk_100E395F8;
  v4[2] = &unk_100E39610;
  v4[3] = &unk_100E39628;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10035C76C(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_10035C76C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010F8FE0)
  {
    v2 = type metadata accessor for BeaconLocationUpdate(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010F8FE0);
  }
}

uint64_t storeEnumTagSinglePayload for IntentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10035C80C + 4 * byte_100E395CD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10035C840 + 4 * byte_100E395C8[v4]))();
}

uint64_t sub_10035C840(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035C848(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10035C850);
  return result;
}

uint64_t sub_10035C85C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10035C864);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10035C868(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10035C870(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IntentType()
{
  return &type metadata for IntentType;
}

uint64_t sub_10035C88C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100514DA0(*a1, *a2);
}

Swift::Int sub_10035C898()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEA00000000007265;
  v3 = 0x7473696765726E75;
  if (v1 != 1)
  {
    v3 = 0x6E6F697461636F6CLL;
    v2 = 0xEE00657461647055;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x7265747369676572;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10035C948(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEA00000000007265;
  v3 = 0x7473696765726E75;
  if (*v1 != 1)
  {
    v3 = 0x6E6F697461636F6CLL;
    v2 = 0xEE00657461647055;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x7265747369676572;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10035C9D4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xEA00000000007265;
  v3 = 0x7473696765726E75;
  if (v1 != 1)
  {
    v3 = 0x6E6F697461636F6CLL;
    v2 = 0xEE00657461647055;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x7265747369676572;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE800000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10035CA80@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10035CB64(*a1);
  *a2 = result;
  return result;
}

void sub_10035CAAC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xEA00000000007265;
  v5 = 0x7473696765726E75;
  if (v2 != 1)
  {
    v5 = 0x6E6F697461636F6CLL;
    v4 = 0xEE00657461647055;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7265747369676572;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_10035CB20()
{
  unint64_t result;

  result = qword_1010F9020;
  if (!qword_1010F9020)
  {
    result = swift_getWitnessTable(byte_100E396C4, &type metadata for IntentType);
    atomic_store(result, (unint64_t *)&qword_1010F9020);
  }
  return result;
}

unint64_t sub_10035CB64(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049E60, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t destroy for AirPodsLESendPairingStatusCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t *initializeWithCopy for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v11 = a2[6];
  v10 = a2[7];
  sub_10001BBBC(v11, v10);
  a1[6] = v11;
  a1[7] = v10;
  return a1;
}

uint64_t *assignWithCopy for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v17 = a2[6];
  v16 = a2[7];
  sub_10001BBBC(v17, v16);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v17;
  a1[7] = v16;
  sub_10001BC14(v18, v19);
  return a1;
}

__n128 initializeWithTake for AirPodsLESendPairingStatusCommandPayload(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001BC14(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLESendPairingStatusCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLESendPairingStatusCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncryptAndSignEnvelope()
{
  return &type metadata for DeviceEventEncryptAndSignEnvelope;
}

uint64_t sub_10035CE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035CE4C);
}

uint64_t sub_10035CE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_10035CE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10035CE98);
}

uint64_t sub_10035CE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for DeviceEventFormat.LocationFormat(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F9080, (uint64_t)&nominal type descriptor for DeviceEventFormat.LocationFormat);
}

uint64_t sub_10035CEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035CEFC);
}

uint64_t sub_10035CEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10035CF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10035CF44);
}

uint64_t sub_10035CF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F9118, (uint64_t)&nominal type descriptor for DeviceEventFormat.AttachmentInfoFormat);
}

uint64_t *sub_10035CF98(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A9A8(&qword_1010F9150);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v11 = *(int *)(v7 + 28);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_10001A9A8(&qword_1010F9158);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v21 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v16, v17, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v22 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  }
  return a1;
}

uint64_t sub_10035D168(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = a1 + *(int *)(v4 + 28);
    v6 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  v10 = a1 + *(int *)(a2 + 28);
  v11 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

_QWORD *sub_10035D244(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010F9150);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v9 = *(int *)(v6 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_10001A9A8(&qword_1010F9158);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v14, v15, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v20 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  return a1;
}

_QWORD *sub_10035D3E8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      v11 = *(int *)(v6 + 28);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for DeviceEventFormat.LocationFormat);
LABEL_6:
    v15 = sub_10001A9A8(&qword_1010F9150);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v31 = *(int *)(v6 + 28);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
LABEL_7:
  v16 = a3[5];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      v35 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v17, v18, v35);
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v17, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v25 = sub_10001A9A8(&qword_1010F9158);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v17, v18, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

_QWORD *sub_10035D664(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010F9150);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v9 = *(int *)(v6 + 28);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = a3[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_10001A9A8(&qword_1010F9158);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v14, v15, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v20 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

_QWORD *sub_10035D808(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v11 = *(int *)(v6 + 28);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for DeviceEventFormat.LocationFormat);
LABEL_6:
    v15 = sub_10001A9A8(&qword_1010F9150);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  v31 = *(int *)(v6 + 28);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
LABEL_7:
  v16 = a3[5];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      v35 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v17, v18, v35);
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v17, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v25 = sub_10001A9A8(&qword_1010F9158);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v17, v18, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  v26 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
  return a1;
}

uint64_t sub_10035DA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035DA7C);
}

uint64_t sub_10035DA7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v6 = sub_10001A9A8(&qword_1010F9150);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = sub_10001A9A8(&qword_1010F9158);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 247)
  {
    v11 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if (*(unsigned __int8 *)(a1 + a3[6]) <= 8u)
    v13 = 8;
  else
    v13 = *(unsigned __int8 *)(a1 + a3[6]);
  v14 = v13 - 8;
  if (*(unsigned __int8 *)(a1 + a3[6]) >= 8u)
    return v14;
  else
    return 0;
}

uint64_t sub_10035DB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10035DB60);
}

uint64_t sub_10035DB60(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_10001A9A8(&qword_1010F9150);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_10001A9A8(&qword_1010F9158);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 247)
      {
        *(_BYTE *)(a1 + a4[6]) = a2 + 8;
        return result;
      }
      v10 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DeviceEventFormat(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F91B8, (uint64_t)&nominal type descriptor for DeviceEventFormat);
}

void sub_10035DC40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  sub_100149C5C(319, &qword_1010F91C8, type metadata accessor for DeviceEventFormat.LocationFormat);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100149C5C(319, (unint64_t *)&unk_1010F91D0, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_100E397B8;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_10035DD08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for BeaconPayloadv1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_10035DDF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_10035DE70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_10035DEF0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_10035DF4C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10035DFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10035DFC8);
}

uint64_t sub_10035DFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10035E050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10035E05C);
}

char *sub_10035E05C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DeviceEventEncodedInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F9260, (uint64_t)&nominal type descriptor for DeviceEventEncodedInfo);
}

uint64_t sub_10035E0EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E397E8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for DeviceEventEncodedPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DeviceEventEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for DeviceEventEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DeviceEventEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceEventEncodedPayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceEventEncodedPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayload()
{
  return &type metadata for DeviceEventEncodedPayload;
}

uint64_t sub_10035E338(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  __int128 v17;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9340);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1003603DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys, &type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys, v11, v9, v10);
  v17 = *v3;
  v16 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v17 = v3[1];
    v16 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v12);
    v17 = v3[2];
    v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v12);
    v17 = v3[3];
    v16 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v12);
    LOBYTE(v17) = 4;
    v13 = sub_100360420();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v17, v5, &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10035E528(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  char v28;

  v25 = a5;
  v27 = a4;
  v9 = sub_10001A9A8(&qword_1010F9400);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_1003610C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncodedPayload.CodingKeys, &type metadata for DeviceEventEncodedPayload.CodingKeys, v15, v14, v13);
  v26[0] = a2;
  v26[1] = a3;
  v28 = 0;
  v16 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v28, v9, &type metadata for Data, v16);
  if (!v5)
  {
    v17 = v25;
    v18 = BYTE1(v27);
    LOBYTE(v26[0]) = v27;
    v28 = 1;
    v19 = sub_10036118C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v28, v9, &type metadata for OwnSubmitPayloadTypes.KeyType, v19);
    LOBYTE(v26[0]) = v18;
    v28 = 2;
    v20 = sub_1003611D0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v28, v9, &type metadata for OwnSubmitPayloadTypes.Mode, v20);
    v26[0] = v17;
    v28 = 3;
    v21 = sub_10001A9A8(&qword_1010F93F0);
    v22 = sub_100361214(&qword_1010F9418, &qword_1010F92A0, (uint64_t)&unk_100E3986C, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v28, v9, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10035E728(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F93C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100360C20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncodedInfo.CodingKeys, &type metadata for DeviceEventEncodedInfo.CodingKeys, v11, v9, v10);
  v19 = *v3;
  v18 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (char *)v3 + *(int *)(type metadata accessor for DeviceEventEncodedInfo(0) + 20);
    LOBYTE(v19) = 1;
    v14 = type metadata accessor for Date(0);
    v15 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v19, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10035E894@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;

  v25 = a2;
  v27 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v26 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010F93B8);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DeviceEventEncodedInfo(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100360C20();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncodedInfo.CodingKeys, &type metadata for DeviceEventEncodedInfo.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v22 = v5;
  v23 = a1;
  v14 = v10;
  v15 = v26;
  v16 = v27;
  v30 = 0;
  v17 = sub_100036994();
  v18 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for Data, &v30, v28, &type metadata for Data, v17);
  *(_OWORD *)v14 = v29;
  LOBYTE(v29) = 1;
  v19 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v16, &v29, v18, v16, v19);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v18);
  (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 32))(&v14[*(int *)(v8 + 20)], v15, v16);
  sub_10005972C((uint64_t)v14, v25, type metadata accessor for DeviceEventEncodedInfo);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  return sub_1000126B0((uint64_t)v14, type metadata accessor for DeviceEventEncodedInfo);
}

Swift::Int sub_10035EB10()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x4D43475F534541, 0xE700000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10035EB60(uint64_t a1)
{
  return String.hash(into:)(a1, 0x4D43475F534541, 0xE700000000000000);
}

Swift::Int sub_10035EB78()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x4D43475F534541, 0xE700000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10035EBC4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049EC8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10035EC14(_QWORD *a1@<X8>)
{
  *a1 = 0x4D43475F534541;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_10035EC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100361F64();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10035EC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100361F64();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10035ECD8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10035ED0C + 4 * byte_100E396F0[*v0]))(0x727574616E676973, 0xE900000000000065);
}

uint64_t sub_10035ED0C()
{
  return 0x6574707972636E65;
}

uint64_t sub_10035ED30()
{
  return 6775156;
}

uint64_t sub_10035ED40()
{
  return 0x65636E6F6ELL;
}

uint64_t sub_10035ED54()
{
  return 0x687469726F676C61;
}

uint64_t sub_10035ED6C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100360464(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10035ED90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003603DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035EDB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003603DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10035EDE0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_10036069C(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10035EE20(_QWORD *a1)
{
  return sub_10035E338(a1);
}

uint64_t sub_10035EE34()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10035EE58 + 4 * byte_100E396F5[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10035EE58()
{
  return 0x6570795479656BLL;
}

uint64_t sub_10035EE70()
{
  return 1701080941;
}

uint64_t sub_10035EE80()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10035EEA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100360C64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10035EEC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003610C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035EEEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003610C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035EF14()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_10035EF1C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10035EF24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  result = sub_100360E0C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_10035EF5C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10035E528(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int16 *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10035EF7C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10035EFA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100361C3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10035EFCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360C20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035EFF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360C20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035F01C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10035F05C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035E894(a1, a2);
}

uint64_t sub_10035F070(_QWORD *a1)
{
  return sub_10035E728(a1);
}

uint64_t sub_10035F084(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1010F9298, type metadata accessor for DeviceEventEncodedInfo, (uint64_t)&unk_100E39894);
  result = sub_100006204(&qword_1010F92A0, type metadata accessor for DeviceEventEncodedInfo, (uint64_t)&unk_100E3986C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

Swift::Int sub_10035F0E0()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10035F124()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10035F14C()
{
  unsigned __int8 *v0;
  Swift::UInt32 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10035F18C@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100361D30(*a1);
  *a2 = result;
  return result;
}

void sub_10035F1B4(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_10035F1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100361F20();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10035F21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100361F20();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10035F268(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9318);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100360354();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEventFormat.CodingKeys, &type metadata for DeviceEventFormat.CodingKeys, v11, v9, v10);
  v28 = 0;
  v12 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v13 = sub_100006204(&qword_1010F9328, type metadata accessor for DeviceEventFormat.LocationFormat, (uint64_t)&unk_100E39928);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v28, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for DeviceEventFormat(0);
    v15 = v3 + v14[5];
    v27 = 1;
    v16 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
    v17 = sub_100006204(&qword_1010F9330, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat, (uint64_t)&unk_100E398D8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v27, v5, v16, v17);
    v26 = *(_BYTE *)(v3 + v14[6]);
    v25 = 2;
    v18 = sub_100360398();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for DeviceEventFormat.Source, v18);
    v19 = v3 + v14[7];
    v24 = 3;
    v20 = type metadata accessor for Date(0);
    v21 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v24, v5, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10035F494@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  _BYTE v41[2];
  char v42;
  char v43;

  v33 = a2;
  v34 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F9158);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F9150);
  __chkstk_darwin(v8);
  v35 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10001A9A8(&qword_1010F9368);
  v10 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for DeviceEventFormat(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  v38 = a1;
  sub_10001AA44(a1, v17);
  v18 = sub_100360354();
  v36 = v12;
  v19 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEventFormat.CodingKeys, &type metadata for DeviceEventFormat.CodingKeys, v18, v17, v16);
  if (v19)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  v20 = v10;
  v21 = (uint64_t)v15;
  v22 = v4;
  v23 = v34;
  v24 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v43 = 0;
  v25 = sub_100006204(&qword_1010F9370, type metadata accessor for DeviceEventFormat.LocationFormat, (uint64_t)&unk_100E39950);
  v26 = (uint64_t)v35;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v43, v37, v24, v25);
  sub_100005CF0(v26, v21, &qword_1010F9150);
  v27 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  v42 = 1;
  v28 = sub_100006204(&qword_1010F9378, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat, (uint64_t)&unk_100E39900);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v42, v37, v27, v28);
  sub_100005CF0((uint64_t)v7, v21 + v13[5], &qword_1010F9158);
  v41[0] = 2;
  v29 = sub_100360B54();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for DeviceEventFormat.Source, v41, v37, &type metadata for DeviceEventFormat.Source, v29);
  *(_BYTE *)(v21 + v13[6]) = v41[1];
  v40 = 3;
  v30 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v23, &v40, v37, v23, v30);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v36, v37);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v32 + 32))(v21 + v13[7], v22, v23);
  sub_10005972C(v21, v33, type metadata accessor for DeviceEventFormat);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return sub_1000126B0(v21, type metadata accessor for DeviceEventFormat);
}

uint64_t sub_10035F8AC(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9398);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100360B98();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEventFormat.LocationFormat.CodingKeys, &type metadata for DeviceEventFormat.LocationFormat.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    v13 = v3[1];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v5, v13);
    v14 = v3[2];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v5, v14);
    v15 = (char *)v3 + *(int *)(type metadata accessor for DeviceEventFormat.LocationFormat(0) + 28);
    v20 = 3;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10035FA50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v21 = a2;
  v24 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v23 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_1010F9388);
  v4 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  __chkstk_darwin(v7);
  v9 = (double *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_100360B98();
  v13 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEventFormat.LocationFormat.CodingKeys, &type metadata for DeviceEventFormat.LocationFormat.CodingKeys, v12, v10, v11);
  if (!v13)
  {
    v26 = v7;
    v14 = v4;
    v16 = v23;
    v15 = v24;
    v30 = 0;
    v17 = v25;
    *v9 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v25);
    v29 = 1;
    v9[1] = KeyedDecodingContainer.decode(_:forKey:)(&v29, v17);
    v28 = 2;
    v9[2] = KeyedDecodingContainer.decode(_:forKey:)(&v28, v17);
    v27 = 3;
    v19 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v27, v17, v15, v19);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    v20 = v21;
    (*(void (**)(char *, _QWORD *, uint64_t))(v22 + 32))((char *)v9 + *(int *)(v26 + 28), v16, v15);
    sub_1000126EC((uint64_t)v9, v20, type metadata accessor for DeviceEventFormat.LocationFormat);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_10035FCD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001A9A8(&qword_1010F93A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100360BDC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys, &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_1000126EC((uint64_t)v11, v20, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_10035FE9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10035FECC + 4 * byte_100E396F9[*v0]))(0x6E6F697461636F6CLL, 0xE800000000000000);
}

uint64_t sub_10035FECC()
{
  return 0x656D686361747461;
}

uint64_t sub_10035FEF0()
{
  return 0x656372756F73;
}

uint64_t sub_10035FF04()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10035FF20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100361D40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10035FF44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360354();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10035FF6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360354();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10035FF94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035F494(a1, a2);
}

uint64_t sub_10035FFA8(_QWORD *a1)
{
  return sub_10035F268(a1);
}

uint64_t sub_10035FFBC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10035FFEC + 4 * byte_100E396FD[*v0]))(0x656475746974616CLL, 0xE800000000000000);
}

uint64_t sub_10035FFEC()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_100360008()
{
  return 0xD000000000000012;
}

uint64_t sub_100360024()
{
  return 0x6D617473656D6974;
}

uint64_t sub_100360044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360B98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036006C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360B98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100360094@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035FA50(a1, a2);
}

uint64_t sub_1003600A8(_QWORD *a1)
{
  return sub_10035F8AC(a1);
}

unint64_t sub_1003600BC()
{
  return 0xD000000000000010;
}

uint64_t sub_1003600D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100361FA8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100360100(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360BDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100360128(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100360BDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100360150@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10035FCD0(a1, a2);
}

uint64_t sub_100360164(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010F93B0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_100360BDC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys, &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for UUID(0);
  v12 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100360274()
{
  return sub_100006204(&qword_1010F92A8, type metadata accessor for DeviceEventEncodedInfo, (uint64_t)&unk_100E398BC);
}

unint64_t sub_1003602A0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1003602CC();
  result = sub_100360310();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003602CC()
{
  unint64_t result;

  result = qword_1010F9308;
  if (!qword_1010F9308)
  {
    result = swift_getWitnessTable("-i#", &type metadata for DeviceEventEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_1010F9308);
  }
  return result;
}

unint64_t sub_100360310()
{
  unint64_t result;

  result = qword_1010F9310;
  if (!qword_1010F9310)
  {
    result = swift_getWitnessTable("Ei#", &type metadata for DeviceEventEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_1010F9310);
  }
  return result;
}

unint64_t sub_100360354()
{
  unint64_t result;

  result = qword_1010F9320;
  if (!qword_1010F9320)
  {
    result = swift_getWitnessTable(byte_100E3A210, &type metadata for DeviceEventFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9320);
  }
  return result;
}

unint64_t sub_100360398()
{
  unint64_t result;

  result = qword_1010F9338;
  if (!qword_1010F9338)
  {
    result = swift_getWitnessTable("y_#", &type metadata for DeviceEventFormat.Source);
    atomic_store(result, (unint64_t *)&qword_1010F9338);
  }
  return result;
}

unint64_t sub_1003603DC()
{
  unint64_t result;

  result = qword_1010F9348;
  if (!qword_1010F9348)
  {
    atomic_store(result, (unint64_t *)&qword_1010F9348);
  }
  return result;
}

unint64_t sub_100360420()
{
  unint64_t result;

  result = qword_1010F9350;
  if (!qword_1010F9350)
  {
    result = swift_getWitnessTable(byte_100E3A170, &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm);
    atomic_store(result, (unint64_t *)&qword_1010F9350);
  }
  return result;
}

uint64_t sub_100360464(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464)
  {
    v7 = 0xED00006174614464;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xED00006174614464, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 6775156 && a2 == 0xE300000000000000)
  {
    v8 = 0xE300000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6775156, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6F6ELL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease(0xE90000000000006DLL);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x687469726F676C61, 0xE90000000000006DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10036069C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;

  v5 = sub_10001A9A8(&qword_1010F9358);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1003603DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys, &type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v45 = 0;
  v12 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v45, v5, &type metadata for Data, v12);
  v40 = a2;
  v14 = v43;
  v13 = v44;
  v45 = 1;
  sub_10001BBBC(v43, v44);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v45, v5, &type metadata for Data, v12);
  v36 = v13;
  v37 = v14;
  v16 = v43;
  v15 = v44;
  v45 = 2;
  sub_10001BBBC(v43, v44);
  v35 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v45, v5, &type metadata for Data, v12);
  v38 = v15;
  v39 = v16;
  v18 = v43;
  v17 = v44;
  v45 = 3;
  sub_10001BBBC(v43, v44);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v45, v5, &type metadata for Data, v12);
  v41 = v18;
  v42 = v17;
  v19 = v43;
  v20 = v44;
  LOBYTE(v43) = 4;
  sub_10001BBBC(v19, v44);
  v21 = sub_100360B10();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v22, &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm, &v43, v5, &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm, v21);
  v34 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = v19;
  v24 = v36;
  sub_10001BBBC(v37, v36);
  v26 = v38;
  v25 = v39;
  sub_10001BBBC(v39, v38);
  v28 = v41;
  v27 = v42;
  sub_10001BBBC(v41, v42);
  sub_10001BBBC(v23, v20);
  sub_10001BC14(v23, v20);
  sub_10001BC14(v28, v27);
  sub_10001BC14(v25, v26);
  v29 = v37;
  sub_10001BC14(v37, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001BC14(v29, v24);
  sub_10001BC14(v25, v26);
  sub_10001BC14(v28, v27);
  v30 = v34;
  result = sub_10001BC14(v34, v20);
  v32 = v40;
  *v40 = v29;
  v32[1] = v24;
  v32[2] = v25;
  v32[3] = v26;
  v32[4] = v28;
  v32[5] = v27;
  v32[6] = v30;
  v32[7] = v20;
  return result;
}

unint64_t sub_100360B10()
{
  unint64_t result;

  result = qword_1010F9360;
  if (!qword_1010F9360)
  {
    atomic_store(result, (unint64_t *)&qword_1010F9360);
  }
  return result;
}

unint64_t sub_100360B54()
{
  unint64_t result;

  result = qword_1010F9380;
  if (!qword_1010F9380)
  {
    atomic_store(result, (unint64_t *)&qword_1010F9380);
  }
  return result;
}

unint64_t sub_100360B98()
{
  unint64_t result;

  result = qword_1010F9390;
  if (!qword_1010F9390)
  {
    result = swift_getWitnessTable("9a#", &type metadata for DeviceEventFormat.LocationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9390);
  }
  return result;
}

unint64_t sub_100360BDC()
{
  unint64_t result;

  result = qword_1010F93A8;
  if (!qword_1010F93A8)
  {
    result = swift_getWitnessTable(byte_100E3A080, &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F93A8);
  }
  return result;
}

unint64_t sub_100360C20()
{
  unint64_t result;

  result = qword_1010F93C0;
  if (!qword_1010F93C0)
  {
    result = swift_getWitnessTable(byte_100E3A030, &type metadata for DeviceEventEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F93C0);
  }
  return result;
}

uint64_t sub_100360C64(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795479656BLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    swift_bridgeObjectRelease(0xEC0000006F666E49);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100360E0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  char v21;

  v3 = sub_10001A9A8(&qword_1010F93D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1003610C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEventEncodedPayload.CodingKeys, &type metadata for DeviceEventEncodedPayload.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v21 = 0;
    v10 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for Data, &v21, v3, &type metadata for Data, v10);
    v7 = v18;
    v12 = v19;
    v21 = 1;
    sub_10001BBBC(v18, v19);
    v13 = sub_100361104();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for OwnSubmitPayloadTypes.KeyType, &v21, v3, &type metadata for OwnSubmitPayloadTypes.KeyType, v13);
    v21 = 2;
    v14 = sub_100361148();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for OwnSubmitPayloadTypes.Mode, &v21, v3, &type metadata for OwnSubmitPayloadTypes.Mode, v14);
    v20 = v18;
    v15 = sub_10001A9A8(&qword_1010F93F0);
    v21 = 3;
    v16 = sub_100361214(&qword_1010F93F8, &qword_1010F9298, (uint64_t)&unk_100E39894, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v15, &v21, v3, v15, v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v17 = v18;
    sub_10001BBBC(v7, v12);
    swift_bridgeObjectRetain(v17);
    sub_10001BC14(v7, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_10001BC14(v7, v12);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1003610C0()
{
  unint64_t result;

  result = qword_1010F93D8;
  if (!qword_1010F93D8)
  {
    result = swift_getWitnessTable(")b#", &type metadata for DeviceEventEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F93D8);
  }
  return result;
}

unint64_t sub_100361104()
{
  unint64_t result;

  result = qword_1010F93E0;
  if (!qword_1010F93E0)
  {
    result = swift_getWitnessTable(byte_100E25980, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_1010F93E0);
  }
  return result;
}

unint64_t sub_100361148()
{
  unint64_t result;

  result = qword_1010F93E8;
  if (!qword_1010F93E8)
  {
    result = swift_getWitnessTable(byte_100E25958, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_1010F93E8);
  }
  return result;
}

unint64_t sub_10036118C()
{
  unint64_t result;

  result = qword_1010F9408;
  if (!qword_1010F9408)
  {
    result = swift_getWitnessTable(byte_100E25930, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_1010F9408);
  }
  return result;
}

unint64_t sub_1003611D0()
{
  unint64_t result;

  result = qword_1010F9410;
  if (!qword_1010F9410)
  {
    result = swift_getWitnessTable(a9_4, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_1010F9410);
  }
  return result;
}

uint64_t sub_100361214(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F93F0);
    v10 = sub_100006204(a2, type metadata accessor for DeviceEventEncodedInfo, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayload.CodingKeys()
{
  return &type metadata for DeviceEventEncodedPayload.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DeviceEventEncodedInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003612F8 + 4 * byte_100E39706[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10036132C + 4 * byte_100E39701[v4]))();
}

uint64_t sub_10036132C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100361334(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036133CLL);
  return result;
}

uint64_t sub_100361348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100361350);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100361354(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036135C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedInfo.CodingKeys()
{
  return &type metadata for DeviceEventEncodedInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.AttachmentInfoFormat.CodingKeys()
{
  return &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.LocationFormat.CodingKeys()
{
  return &type metadata for DeviceEventFormat.LocationFormat.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DeviceEventEncryptAndSignEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1003613E8 + 4 * byte_100E39710[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10036141C + 4 * byte_100E3970B[v4]))();
}

uint64_t sub_10036141C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100361424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10036142CLL);
  return result;
}

uint64_t sub_100361438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100361440);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100361444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10036144C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncryptAndSignEnvelope.CodingKeys()
{
  return &type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys;
}

uint64_t _s12searchpartyd25DeviceEventEncodedPayloadV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1003614B4 + 4 * byte_100E3971A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003614E8 + 4 * byte_100E39715[v4]))();
}

uint64_t sub_1003614E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003614F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003614F8);
  return result;
}

uint64_t sub_100361504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10036150CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100361510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100361518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.CodingKeys()
{
  return &type metadata for DeviceEventFormat.CodingKeys;
}

uint64_t _s12searchpartyd33DeviceEventEncryptAndSignEnvelopeV9AlgorithmOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100361574 + 4 * byte_100E3971F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100361594 + 4 * byte_100E39724[v4]))();
}

_BYTE *sub_100361574(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100361594(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10036159C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003615A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003615AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003615B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncryptAndSignEnvelope.Algorithm()
{
  return &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm;
}

uint64_t storeEnumTagSinglePayload for DeviceEventFormat.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10036161C + 4 * byte_100E3972E[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100361650 + 4 * byte_100E39729[v4]))();
}

uint64_t sub_100361650(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100361658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100361660);
  return result;
}

uint64_t sub_10036166C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100361674);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100361678(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100361680(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.Source()
{
  return &type metadata for DeviceEventFormat.Source;
}

unint64_t sub_1003616A0()
{
  unint64_t result;

  result = qword_1010F9420;
  if (!qword_1010F9420)
  {
    result = swift_getWitnessTable(byte_100E39AC8, &type metadata for DeviceEventFormat.Source);
    atomic_store(result, (unint64_t *)&qword_1010F9420);
  }
  return result;
}

unint64_t sub_1003616E8()
{
  unint64_t result;

  result = qword_1010F9428;
  if (!qword_1010F9428)
  {
    result = swift_getWitnessTable("qf#", &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm);
    atomic_store(result, (unint64_t *)&qword_1010F9428);
  }
  return result;
}

unint64_t sub_100361730()
{
  unint64_t result;

  result = qword_1010F9430;
  if (!qword_1010F9430)
  {
    result = swift_getWitnessTable(byte_100E39C20, &type metadata for DeviceEventFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9430);
  }
  return result;
}

unint64_t sub_100361778()
{
  unint64_t result;

  result = qword_1010F9438;
  if (!qword_1010F9438)
  {
    result = swift_getWitnessTable(byte_100E39CD8, &type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9438);
  }
  return result;
}

unint64_t sub_1003617C0()
{
  unint64_t result;

  result = qword_1010F9440;
  if (!qword_1010F9440)
  {
    result = swift_getWitnessTable("Id#", &type metadata for DeviceEventFormat.LocationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9440);
  }
  return result;
}

unint64_t sub_100361808()
{
  unint64_t result;

  result = qword_1010F9448;
  if (!qword_1010F9448)
  {
    result = swift_getWitnessTable(byte_100E39E48, &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9448);
  }
  return result;
}

unint64_t sub_100361850()
{
  unint64_t result;

  result = qword_1010F9450;
  if (!qword_1010F9450)
  {
    result = swift_getWitnessTable(byte_100E39F00, &type metadata for DeviceEventEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9450);
  }
  return result;
}

unint64_t sub_100361898()
{
  unint64_t result;

  result = qword_1010F9458;
  if (!qword_1010F9458)
  {
    result = swift_getWitnessTable("!b#", &type metadata for DeviceEventEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9458);
  }
  return result;
}

unint64_t sub_1003618E0()
{
  unint64_t result;

  result = qword_1010F9460;
  if (!qword_1010F9460)
  {
    result = swift_getWitnessTable(byte_100E39F28, &type metadata for DeviceEventEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9460);
  }
  return result;
}

unint64_t sub_100361928()
{
  unint64_t result;

  result = qword_1010F9468;
  if (!qword_1010F9468)
  {
    result = swift_getWitnessTable(byte_100E39F50, &type metadata for DeviceEventEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9468);
  }
  return result;
}

unint64_t sub_100361970()
{
  unint64_t result;

  result = qword_1010F9470;
  if (!qword_1010F9470)
  {
    result = swift_getWitnessTable("yc#", &type metadata for DeviceEventEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9470);
  }
  return result;
}

unint64_t sub_1003619B8()
{
  unint64_t result;

  result = qword_1010F9478;
  if (!qword_1010F9478)
  {
    result = swift_getWitnessTable("ac#", &type metadata for DeviceEventEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9478);
  }
  return result;
}

unint64_t sub_100361A00()
{
  unint64_t result;

  result = qword_1010F9480;
  if (!qword_1010F9480)
  {
    result = swift_getWitnessTable("1d#", &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9480);
  }
  return result;
}

unint64_t sub_100361A48()
{
  unint64_t result;

  result = qword_1010F9488;
  if (!qword_1010F9488)
  {
    result = swift_getWitnessTable(byte_100E39DE0, &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9488);
  }
  return result;
}

unint64_t sub_100361A90()
{
  unint64_t result;

  result = qword_1010F9490;
  if (!qword_1010F9490)
  {
    result = swift_getWitnessTable(byte_100E39D00, &type metadata for DeviceEventFormat.LocationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9490);
  }
  return result;
}

unint64_t sub_100361AD8()
{
  unint64_t result;

  result = qword_1010F9498;
  if (!qword_1010F9498)
  {
    result = swift_getWitnessTable(byte_100E39D28, &type metadata for DeviceEventFormat.LocationFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9498);
  }
  return result;
}

unint64_t sub_100361B20()
{
  unint64_t result;

  result = qword_1010F94A0;
  if (!qword_1010F94A0)
  {
    result = swift_getWitnessTable(byte_100E39C48, &type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F94A0);
  }
  return result;
}

unint64_t sub_100361B68()
{
  unint64_t result;

  result = qword_1010F94A8;
  if (!qword_1010F94A8)
  {
    result = swift_getWitnessTable(byte_100E39C70, &type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F94A8);
  }
  return result;
}

unint64_t sub_100361BB0()
{
  unint64_t result;

  result = qword_1010F94B0;
  if (!qword_1010F94B0)
  {
    result = swift_getWitnessTable("Yf#", &type metadata for DeviceEventFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F94B0);
  }
  return result;
}

unint64_t sub_100361BF8()
{
  unint64_t result;

  result = qword_1010F94B8;
  if (!qword_1010F94B8)
  {
    result = swift_getWitnessTable("Af#", &type metadata for DeviceEventFormat.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F94B8);
  }
  return result;
}

uint64_t sub_100361C3C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEA00000000007354)
  {
    swift_bridgeObjectRelease(0xEA00000000007354);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEA00000000007354, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100361D30(uint64_t result)
{
  if (result >= 8)
    return 8;
  else
    return result;
}

uint64_t sub_100361D40(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656D686361747461 && a2 == 0xEE006F666E49746ELL)
  {
    v7 = 0xEE006F666E49746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D686361747461, 0xEE006F666E49746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease(0xE900000000000070);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_100361F20()
{
  unint64_t result;

  result = qword_1010F94C0;
  if (!qword_1010F94C0)
  {
    result = swift_getWitnessTable("Ag#", &type metadata for DeviceEventFormat.Source);
    atomic_store(result, (unint64_t *)&qword_1010F94C0);
  }
  return result;
}

unint64_t sub_100361F64()
{
  unint64_t result;

  result = qword_1010F94C8;
  if (!qword_1010F94C8)
  {
    result = swift_getWitnessTable(byte_100E39AF0, &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm);
    atomic_store(result, (unint64_t *)&qword_1010F94C8);
  }
  return result;
}

uint64_t sub_100361FA8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000100ED2700)
  {
    swift_bridgeObjectRelease(0x8000000100ED2700);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100ED2700, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

id sub_10036202C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v1 = (void *)objc_opt_self(AKAccountManager);
  v2 = objc_msgSend(v1, "sharedInstance");
  v3 = objc_msgSend(v2, "altDSIDForAccount:", v0);

  if (!v3)
    return 0;
  v4 = objc_msgSend(v1, "sharedInstance");
  v5 = objc_msgSend(v4, "authKitAccountWithAltDSID:", v3);

  if (!v5)
    return 0;
  v6 = objc_msgSend(v1, "sharedInstance");
  v7 = objc_msgSend(v6, "securityLevelForAccount:", v5);

  return v7;
}

void *sub_100362120()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  id v7;
  void *v8;

  v1 = objc_msgSend(v0, "accountTypeWithAccountTypeIdentifier:", ACAccountTypeIdentifierIDMS);
  v2 = objc_msgSend(v0, "accountsWithAccountType:", v1);
  if (v2
    && (v3 = v2,
        v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8),
        v3,
        v5 = sub_100362808(v4, &qword_1010F94D8, ACAccount_ptr),
        swift_bridgeObjectRelease(),
        v5))
  {
    v6 = objc_msgSend(v0, "aa_primaryAppleAccount");
    v7 = v6;
    v8 = sub_100362A24((uint64_t)v5, v6);
    swift_bridgeObjectRelease();

    v1 = v7;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t sub_100362238()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  v1 = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
  v2 = objc_msgSend(v1, "additionalInfoForAccount:", v0);

  if (!v2)
  {
    v29 = static os_log_type_t.error.getter(v3);
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v30 = (void *)OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6E756F6363414341, 0xE900000000000074);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Could not obtain additional info.", 33, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v6 = static os_log_type_t.debug.getter(v5);
  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v7 = (void *)OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6E756F6363414341, 0xE900000000000074);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  swift_bridgeObjectRetain(v4);
  v11 = Dictionary.description.getter(v10, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  v13 = v12;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "additionalInfo: %@", 18, 2, v9);

  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v4 + 16) || (v14 = sub_100518DA0(0xD000000000000016, 0x8000000100ED2770), (v15 & 1) == 0))
  {
    v33 = 0u;
    v34 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  sub_100016A30(*(_QWORD *)(v4 + 56) + 32 * v14, (uint64_t)&v33);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_15:
    v17 = sub_10014785C((uint64_t)&v33);
    goto LABEL_16;
  }
  v16 = sub_10001A9A8(&qword_1010F94D0);
  v17 = swift_dynamicCast(&v32, &v33, (char *)&type metadata for Any + 8, v16, 6);
  if ((v17 & 1) == 0)
  {
LABEL_16:
    v27 = static os_log_type_t.error.getter(v17);
    v28 = (void *)OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6E756F6363414341, 0xE900000000000074);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Could not obtain obfuscatedPhoneNumbers.", 40, 2, _swiftEmptyArrayStorage);

    return 0;
  }
  v18 = v32;
  v19 = *(_QWORD *)(v32 + 16);
  if (!v19)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  v20 = 0;
  while (1)
  {
    v21 = *(_QWORD *)(v18 + 8 * v20 + 32);
    v22 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRetain(v21);
    if (v22)
    {
      v23 = sub_100518DA0(0x796C746E65636572, 0xEC00000064657355);
      if ((v24 & 1) != 0)
        break;
    }
    ++v20;
    v33 = 0u;
    v34 = 0u;
    swift_bridgeObjectRelease();
    sub_10014785C((uint64_t)&v33);
    if (v19 == v20)
      goto LABEL_20;
  }
  sub_100016A30(*(_QWORD *)(v21 + 56) + 32 * v23, (uint64_t)&v33);
  sub_10014785C((uint64_t)&v33);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v21 + 16) && (v25 = sub_100518DA0(0xD000000000000011, 0x8000000100ED27C0), (v26 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v21 + 56) + 32 * v25, (uint64_t)&v33);
  }
  else
  {
    v33 = 0u;
    v34 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v34 + 1))
  {
    sub_10014785C((uint64_t)&v33);
    return 0;
  }
  if (swift_dynamicCast(&v32, &v33, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v32;
  else
    return 0;
}

_QWORD *sub_1003626B0(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = &_swiftEmptyArrayStorage;
  sub_10009A2F4(0, v2, 0);
  v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_100016A30(i, (uint64_t)v13);
      if (!swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, &type metadata for String, 6))break;
      v5 = v11;
      v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10009A2F4(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10009A2F4(v7 > 1, v8 + 1, 1);
        v3 = v14;
      }
      v3[2] = v8 + 1;
      v9 = (char *)&v3[2 * v8];
      *((_QWORD *)v9 + 4) = v5;
      *((_QWORD *)v9 + 5) = v6;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    v12 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  return v3;
}

_QWORD *sub_1003627F4(uint64_t a1)
{
  return sub_100362808(a1, &qword_1010F5FD8, BluetoothDevice_ptr);
}

_QWORD *sub_100362808(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  _BYTE v15[32];
  _QWORD *v16;

  v16 = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v6);
  if (!v6)
    return v16;
  for (i = a1 + 32; ; i += 32)
  {
    sub_100016A30(i, (uint64_t)v15);
    v8 = sub_10000F4A0(0, a2, a3);
    v9 = swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v8, 6);
    if (!(_DWORD)v9)
      break;
    v10 = v14;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
    v11 = v16[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
    v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
    specialized ContiguousArray._endMutation()(v12);
    if (!--v6)
      return v16;
  }
  v14 = 0;
  swift_release(v16);

  return 0;
}

_QWORD *sub_100362918(uint64_t a1)
{
  return sub_100362808(a1, &qword_1010F94E0, IDSDevice_ptr);
}

_QWORD *sub_10036292C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  _BYTE v11[32];
  _QWORD *v12;

  v12 = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v12;
  for (i = a1 + 32; ; i += 32)
  {
    sub_100016A30(i, (uint64_t)v11);
    type metadata accessor for SecCertificate(0);
    v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6);
    if (!(_DWORD)v5)
      break;
    v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2)
      return v12;
  }
  v10 = 0;
  swift_release();

  return 0;
}

void *sub_100362A24(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;

  if ((unint64_t)a1 >> 62)
    goto LABEL_31;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v22 = v4;
    v5 = 4;
    v23 = a2;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(v6, "aa_altDSID");
      if (v9)
      {
        v10 = v9;
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v13 = v12;

        if (!a2)
          goto LABEL_17;
      }
      else
      {
        v11 = 0;
        v13 = 0;
        if (!a2)
        {
LABEL_17:
          v17 = 0;
          if (!v13)
            goto LABEL_24;
          goto LABEL_18;
        }
      }
      v14 = objc_msgSend(a2, "aa_altDSID");
      if (v14)
      {
        v15 = v14;
        a2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v17 = v16;

        if (!v13)
          goto LABEL_24;
      }
      else
      {
        a2 = 0;
        v17 = 0;
        if (!v13)
        {
LABEL_24:
          a2 = v23;
          if (!v17)
          {
LABEL_27:
            v19 = a1;
LABEL_29:
            swift_bridgeObjectRelease(v19);
            return v7;
          }

          swift_bridgeObjectRelease(v17);
          goto LABEL_6;
        }
      }
LABEL_18:
      if (v17)
      {
        if ((void *)v11 == a2 && v13 == v17)
        {
          swift_bridgeObjectRelease(a1);
          swift_bridgeObjectRelease(v13);
          v19 = v17;
          goto LABEL_29;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, a2, v17, 0);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v17);
        if ((v18 & 1) != 0)
          goto LABEL_27;

      }
      else
      {

        swift_bridgeObjectRelease(v13);
      }
      a2 = v23;
LABEL_6:
      ++v5;
      if (v8 == v22)
        goto LABEL_35;
    }
    __break(1u);
LABEL_31:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v20);
  }
LABEL_35:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100362C5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(_BYTE *, _QWORD);
  Swift::String v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v34 = a1;
  v1 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = &qword_1010FBA40;
    v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0);
    v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, v33) != 1)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v28 = v32;
      v27(v32, v3, v19);
      v29 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x6863746566;
      v30._object = (void *)0xE500000000000000;
      String.append(_:)(v30);
      v29(v35, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v17 = &qword_1010F2C10;
    v18 = (uint64_t)v3;
  }
  sub_100004048(v18, v17);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_100363008@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  id v30;
  unsigned int v31;
  NSString v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  void (*v45)(uint64_t *, _QWORD);
  Swift::String v46;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55[4];
  uint64_t v56;
  uint64_t v57;

  v54 = a1;
  v1 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v1);
  v52 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v53 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v51 = (char *)&v50 - v7;
  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for FMNAccountType.ownedDeviceLocations(_:), v8);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010FBA40);
    v19 = v3;
    v20 = v4;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    v21 = (uint64_t)v52;
    URLComponents.init(url:resolvingAgainstBaseURL:)(v18, 0);
    v19 = v3;
    v20 = v4;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v21, 1, v3) != 1)
    {
      v43 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      v44 = v51;
      v43(v51, v21, v3);
      v45 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(v55);
      v46._countAndFlagsBits = 0x68637465662F3276;
      v46._object = (void *)0xE800000000000000;
      String.append(_:)(v46);
      v45(v55, 0);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v54, v44, v3);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_100004048(v21, &qword_1010F2C10);
  }
  v22 = v53;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No url found in account bag.", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  URLComponents.init()(v28);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  v29 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v30 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v31 = objc_msgSend(v30, "isInternalBuild");

  if (v31
    && (v32 = String._bridgeToObjectiveC()(),
        v33 = objc_msgSend(v29, "stringForKey:", v32),
        v32,
        v33))
  {
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    v37 = swift_bridgeObjectRetain_n(v36, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v55[0] = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(v36);
      v56 = sub_100016940(v34, (unint64_t)v36, v55);
      v22 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Override url found in user defaults %s. ", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v36, 2);
    }
    v42 = v54;
    v55[0] = 47;
    v55[1] = 0xE100000000000000;
    v48._countAndFlagsBits = v34;
    v48._object = v36;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0x637465662F32762FLL;
    v49._object = (void *)0xE900000000000068;
    String.append(_:)(v49);
    URLComponents.path.setter();
  }
  else
  {

    URLComponents.path.setter();
    v42 = v54;
  }
  URLComponents.host.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v42, v22, v19);
}

void sub_100363668(char *a1)
{
  sub_100510E14(*a1);
}

void sub_100363674()
{
  char *v0;

  sub_10051FC2C(*v0);
}

void sub_10036367C(uint64_t a1)
{
  char *v1;

  sub_100514ED8(a1, *v1);
}

void sub_100363684(uint64_t a1)
{
  char *v1;

  sub_1005160A0(a1, *v1);
}

unint64_t sub_10036368C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100364124(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003636B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1003636F4 + 4 * byte_100E3A260[*v0]))();
}

void sub_1003636F4(_QWORD *a1@<X8>)
{
  *a1 = 1818322280;
  a1[1] = 0xE400000000000000;
}

void sub_100363708(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x8000000100EC2FA0;
}

void sub_100363728(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x8000000100EC2FC0;
}

uint64_t sub_10036374C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100366248();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003637A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100366248();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1003637F4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9688);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100365C88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsFetchData.CodingKeys, &type metadata for SecureLocationsFetchData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v23 = v3[2];
    v22 = 1;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v15 = sub_100365CCC((unint64_t *)&qword_1010F19E0, (uint64_t *)&unk_1010FF7C0, (uint64_t (*)(void))sub_100036A58, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v14, v15);
    v23 = v3[3];
    v22 = 2;
    type metadata accessor for SPSecureLocationSubscriptionMode(0);
    v17 = v16;
    v18 = sub_100365D30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v17, v18);
    sub_100005CF0((uint64_t)(v3 + 4), (uint64_t)&v24, &qword_1010F96A0);
    sub_100005CF0((uint64_t)&v24, (uint64_t)&v23, &qword_1010F96A0);
    v22 = 3;
    v19 = sub_100365D78();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v22, v5, &type metadata for SecureLocationsSubscriptionIntent, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003639F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100363A1C + 4 * byte_100E3A264[*v0]))(1682533734, 0xE400000000000000);
}

uint64_t sub_100363A1C()
{
  return 7562345;
}

uint64_t sub_100363A2C()
{
  return 1701080941;
}

uint64_t sub_100363A38()
{
  return 0x746E65746E69;
}

uint64_t sub_100363A4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10036416C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100363A70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365C88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100363A98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365C88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100363AC0(_QWORD *a1)
{
  return sub_1003637F4(a1);
}

uint64_t sub_100363AF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  _OWORD v19[7];
  uint64_t v20;
  char v21;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9618);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100365490();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsFetchBody.CodingKeys, &type metadata for SecureLocationsFetchBody.CodingKeys, v11, v9, v10);
  *(_QWORD *)&v19[0] = *(_QWORD *)v3;
  v21 = 0;
  v12 = sub_10001A9A8(&qword_1010F9628);
  v13 = sub_100365CCC(&qword_1010F9630, &qword_1010F9628, (uint64_t (*)(void))sub_1003654D4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, v12, v13);
  if (!v2)
  {
    v14 = *(_OWORD *)(v3 + 88);
    v19[4] = *(_OWORD *)(v3 + 72);
    v19[5] = v14;
    v19[6] = *(_OWORD *)(v3 + 104);
    v20 = *(_QWORD *)(v3 + 120);
    v15 = *(_OWORD *)(v3 + 24);
    v19[0] = *(_OWORD *)(v3 + 8);
    v19[1] = v15;
    v16 = *(_OWORD *)(v3 + 56);
    v19[2] = *(_OWORD *)(v3 + 40);
    v19[3] = v16;
    v21 = 1;
    v17 = sub_100365518();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, &type metadata for SecureLocationsClientContext, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100363C94()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43746E65696C63;
  else
    return 0x6863746566;
}

uint64_t sub_100363CD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10036555C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100363CFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365490();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100363D24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365490();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100363D4C(_QWORD *a1)
{
  return sub_100363AF8(a1);
}

uint64_t sub_100363D94(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _BYTE v24[8];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9670);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100365BA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsFetchResponseBody.CodingKeys, &type metadata for SecureLocationsFetchResponseBody.CodingKeys, v11, v9, v10);
  v23 = *v3;
  v22 = 0;
  v12 = sub_10001A9A8(&qword_1010F3E38);
  v13 = sub_100365CCC((unint64_t *)&qword_1010F3E40, &qword_1010F3E38, (uint64_t (*)(void))sub_100251620, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v12, v13);
  if (!v2)
  {
    v14 = v3[1];
    v15 = v3[2];
    LOBYTE(v23) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v23, v5);
    sub_100005CF0((uint64_t)(v3 + 3), (uint64_t)v24, &qword_1010F9678);
    sub_100005CF0((uint64_t)v24, (uint64_t)&v23, &qword_1010F9678);
    v22 = 2;
    v16 = sub_10001A9A8(&qword_1011063B0);
    v17 = sub_100365C28((unint64_t *)&qword_1010F9680, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v22, v5, v16, v17);
    v18 = v3[4];
    v19 = *((unsigned __int8 *)v3 + 40);
    LOBYTE(v23) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100363F9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100363FD8 + 4 * byte_100E3A268[*v0]))(0x6E6F697461636F6CLL, 0xEF64616F6C796150);
}

uint64_t sub_100363FD8()
{
  return 0x6F43737574617473;
}

uint64_t sub_100363FF4()
{
  return 0x6D4664656C696166;
}

uint64_t sub_100364014()
{
  return 0x65566769666E6F63;
}

uint64_t sub_100364038@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100365668(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036405C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365BA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100364084(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100365BA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1003640AC@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_10036588C(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1003640EC(_QWORD *a1)
{
  return sub_100363D94(a1);
}

unint64_t sub_100364124(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049F00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_10036416C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1682533734 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1682533734, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    v7 = 0xE300000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746E65746E69 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E69, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1003642EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 320) = a2;
  *(_QWORD *)(v3 + 328) = a3;
  *(_QWORD *)(v3 + 312) = a1;
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 336) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 352) = v4;
  *(_QWORD *)(v3 + 368) = *(_QWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 376) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v3 + 392) = v5;
  v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v3 + 408) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v3 + 424) = v6;
  *(_BYTE *)(v3 + 576) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(v3 + 440) = *(_QWORD *)(a2 + 112);
  v7 = type metadata accessor for HashAlgorithm(0);
  *(_QWORD *)(v3 + 448) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 456) = v8;
  *(_QWORD *)(v3 + 464) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10036438C, 0, 0);
}

id sub_10036438C()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t (__cdecl *v35)();

  if (*(_QWORD *)(*(_QWORD *)(v0 + 312) + 16))
  {
    v1 = (unint64_t *)(v0 + 272);
    v2 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 272) = v2;
    result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
    if (result)
    {
      v4 = result;
      v5 = objc_msgSend(result, "serverFriendlyDescription");

      if (v5)
      {
        v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
        v8 = v7;

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
        *v1 = 0x8000000000000000;
        sub_100109D28(v6, v8, 0xD000000000000011, 0x8000000100ECA2C0, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_100102BE0(0xD000000000000011, 0x8000000100ECA2C0);
        swift_bridgeObjectRelease();
        v2 = *v1;
      }
      v34 = *(_QWORD *)(v0 + 440);
      v33 = *(_BYTE *)(v0 + 576);
      v31 = *(_QWORD *)(v0 + 424);
      v32 = *(_QWORD *)(v0 + 432);
      v29 = *(_OWORD *)(v0 + 392);
      v30 = *(_OWORD *)(v0 + 408);
      v11 = *(_QWORD *)(v0 + 360);
      v12 = *(_QWORD *)(v0 + 368);
      v14 = *(_QWORD *)(v0 + 344);
      v13 = *(_QWORD *)(v0 + 352);
      v15 = *(_QWORD *)(v0 + 336);
      v16 = *(_QWORD *)(v0 + 312);
      v28 = *(_OWORD *)(v0 + 376);
      v17 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_100109D28(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v17);
      swift_bridgeObjectRelease();
      v18 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_100109D28(0xD000000000000010, 0x8000000100ECC390, 0x2D746E65746E6F43, 0xEC00000065707954, v18);
      *(_QWORD *)(v0 + 272) = v2;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 16) = v16;
      *(_QWORD *)(v0 + 24) = v15;
      *(_QWORD *)(v0 + 32) = v14;
      *(_QWORD *)(v0 + 40) = v13;
      *(_QWORD *)(v0 + 48) = v11;
      *(_QWORD *)(v0 + 56) = v12;
      *(_OWORD *)(v0 + 64) = v28;
      *(_OWORD *)(v0 + 80) = v29;
      *(_OWORD *)(v0 + 96) = v30;
      *(_QWORD *)(v0 + 112) = v31;
      *(_QWORD *)(v0 + 120) = v32;
      *(_BYTE *)(v0 + 128) = v33;
      *(_QWORD *)(v0 + 136) = v34;
      v19 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      *(_QWORD *)(v0 + 472) = JSONEncoder.init()(v20);
      v21 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 224) = v21;
      v22 = *(_OWORD *)(v0 + 128);
      *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v0 + 256) = v22;
      v23 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v0 + 160) = v23;
      v24 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v0 + 192) = v24;
      v25 = sub_100364AF8();
      *(_QWORD *)(v0 + 480) = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 144, &type metadata for SecureLocationsFetchBody, v25);
      *(_QWORD *)(v0 + 488) = v26;
      sub_100364B3C((uint64_t *)(v0 + 16));
      v35 = (uint64_t (__cdecl *)())((char *)&dword_1011152F0 + dword_1011152F0);
      v27 = (_QWORD *)swift_task_alloc(unk_1011152F4);
      *(_QWORD *)(v0 + 496) = v27;
      *v27 = v0;
      v27[1] = sub_10036475C;
      return (id)v35();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v10 = *(_QWORD **)(v0 + 320);
    swift_release();
    sub_100364BC0(v10);
    swift_bridgeObjectRelease();
    swift_task_dealloc(*(_QWORD *)(v0 + 464));
    return (id)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(0, 0, 0);
  }
  return result;
}

uint64_t sub_10036475C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 496);
  *(_QWORD *)(v3 + 504) = a1;
  *(_QWORD *)(v3 + 512) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1003647B8, 0, 0);
}

uint64_t sub_1003647B8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[63];
  v1 = v0[64];
  v4 = v0[60];
  v3 = v0[61];
  v6 = v0[57];
  v5 = v0[58];
  v7 = v0[56];
  v0[37] = v2;
  v0[38] = v1;
  sub_10001BBBC(v2, v1);
  sub_10001BBBC(v4, v3);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v9 = v0[37];
  v8 = v0[38];
  v0[65] = v9;
  v0[66] = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v9, v8);
  v12 = v11;
  v0[67] = v10;
  v0[68] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_1011152E8 + dword_1011152E8;
  v13 = (_QWORD *)swift_task_alloc(unk_1011152EC);
  v0[69] = v13;
  *v13 = v0;
  v13[1] = sub_1003648E4;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[41]);
}

uint64_t sub_1003648E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 552);
  *(_QWORD *)(*(_QWORD *)v2 + 560) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100364A54;
  }
  else
  {
    v7 = v4[68];
    v8 = v4[67];
    v4[71] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_100364964;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100364964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 272);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v11 = v3;
  *(_QWORD *)(v0 + 272) = 0x8000000000000000;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v11);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 520);
  v8 = v11;
  *(_QWORD *)(v0 + 272) = v11;
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(v7, v6);
  swift_release();
  v9 = *(_QWORD *)(v0 + 480);
  v10 = *(_QWORD *)(v0 + 488);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v9, v10);
}

uint64_t sub_100364A54()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 520);
  v6 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 488);
  swift_release();
  sub_10001BC14(v2, v1);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v6, v5);
  swift_release();
  v7 = *(_QWORD *)(v0 + 464);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100364AF8()
{
  unint64_t result;

  result = qword_1010F94F0;
  if (!qword_1010F94F0)
  {
    result = swift_getWitnessTable(byte_100E3A404, &type metadata for SecureLocationsFetchBody);
    atomic_store(result, (unint64_t *)&qword_1010F94F0);
  }
  return result;
}

uint64_t *sub_100364B3C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[12];
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *sub_100364BC0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[11];
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t destroy for SecureLocationsFetchResponseBody(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for SecureLocationsFetchResponseBody(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for SecureLocationsFetchResponseBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1[3];
  v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[4] = v10;
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for SecureLocationsFetchResponseBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchResponseBody(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchResponseBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchResponseBody()
{
  return &type metadata for SecureLocationsFetchResponseBody;
}

uint64_t destroy for SecureLocationsFetchBody(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[15]);
}

uint64_t initializeWithCopy for SecureLocationsFetchBody(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[6];
  v10 = a2[7];
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v11 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  v13 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v12;
  v14 = a2[15];
  *(_QWORD *)(a1 + 120) = v14;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t *assignWithCopy for SecureLocationsFetchBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[8];
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  a1[8] = v14;
  LOBYTE(v14) = *((_BYTE *)a2 + 88);
  a1[10] = a2[10];
  *((_BYTE *)a1 + 88) = v14;
  v15 = a2[12];
  v16 = a1[12];
  a1[12] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a2[13];
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  a1[13] = v17;
  v18 = a2[15];
  v19 = a1[15];
  a1[15] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

__n128 initializeWithTake for SecureLocationsFetchBody(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t *assignWithTake for SecureLocationsFetchBody(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  a1[5] = a2[5];
  swift_bridgeObjectRelease(a1[6]);
  v9 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_bridgeObjectRelease(v9);
  a1[8] = a2[8];
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  a1[10] = a2[10];
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  v10 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v10);
  a1[13] = a2[13];
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  v11 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchBody(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchBody()
{
  return &type metadata for SecureLocationsFetchBody;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchRequest()
{
  return &type metadata for SecureLocationsFetchRequest;
}

uint64_t destroy for SecureLocationsFetchData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchData()
{
  return &type metadata for SecureLocationsFetchData;
}

uint64_t sub_100365428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100365434);
}

uint64_t sub_100365438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100365444);
}

uint64_t type metadata accessor for SecureLocationsFetchEndpoint(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F9550, (uint64_t)&nominal type descriptor for SecureLocationsFetchEndpoint);
}

uint64_t sub_10036545C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100365468);
}

uint64_t sub_10036546C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100365478);
}

uint64_t type metadata accessor for OwnedDeviceFetchEndpoint(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F95E0, (uint64_t)&nominal type descriptor for OwnedDeviceFetchEndpoint);
}

unint64_t sub_100365490()
{
  unint64_t result;

  result = qword_1010F9620;
  if (!qword_1010F9620)
  {
    result = swift_getWitnessTable("\r_#", &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9620);
  }
  return result;
}

unint64_t sub_1003654D4()
{
  unint64_t result;

  result = qword_1010F9638;
  if (!qword_1010F9638)
  {
    result = swift_getWitnessTable("]c#", &type metadata for SecureLocationsFetchData);
    atomic_store(result, (unint64_t *)&qword_1010F9638);
  }
  return result;
}

unint64_t sub_100365518()
{
  unint64_t result;

  result = qword_1010F9640;
  if (!qword_1010F9640)
  {
    result = swift_getWitnessTable(byte_100E3BB34, &type metadata for SecureLocationsClientContext);
    atomic_store(result, (unint64_t *)&qword_1010F9640);
  }
  return result;
}

uint64_t sub_10036555C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6863746566 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6863746566, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease(0xED0000747865746ELL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100365668(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150)
  {
    v5 = 0xEF64616F6C796150;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF64616F6C796150, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    v7 = 0xEA00000000006564;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473, 0xEA00000000006564, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6D4664656C696166 && a2 == 0xEB00000000736449)
  {
    v8 = 0xEB00000000736449;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D4664656C696166, 0xEB00000000736449, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x65566769666E6F63 && a2 == 0xED00006E6F697372)
  {
    swift_bridgeObjectRelease(0xED00006E6F697372);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65566769666E6F63, 0xED00006E6F697372, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10036588C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v5 = sub_10001A9A8(&qword_1010F9648);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100365BA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsFetchResponseBody.CodingKeys, &type metadata for SecureLocationsFetchResponseBody.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v12 = sub_10001A9A8(&qword_1010F3E38);
  v31 = 0;
  v13 = sub_100365CCC((unint64_t *)&qword_1010F9658, &qword_1010F3E38, (uint64_t (*)(void))sub_100365BE4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v12, &v31, v5, v12, v13);
  v14 = v32;
  LOBYTE(v32) = 1;
  swift_bridgeObjectRetain(v14);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v17 = v16;
  v30 = v15;
  v18 = sub_10001A9A8(&qword_1011063B0);
  v31 = 2;
  v19 = sub_100365C28((unint64_t *)&qword_1010F9668, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v31, v5, v18, v19);
  v20 = v32;
  LOBYTE(v32) = 3;
  v29 = v20;
  swift_bridgeObjectRetain(v20);
  v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
  v22 = v8;
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v22, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v25 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v27 = v30;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v27;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v21;
  *(_BYTE *)(a2 + 40) = v24 & 1;
  return result;
}

unint64_t sub_100365BA0()
{
  unint64_t result;

  result = qword_1010F9650;
  if (!qword_1010F9650)
  {
    result = swift_getWitnessTable("]_#", &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9650);
  }
  return result;
}

unint64_t sub_100365BE4()
{
  unint64_t result;

  result = qword_1010F9660;
  if (!qword_1010F9660)
  {
    result = swift_getWitnessTable(byte_100E3E348, &type metadata for SecureLocationsEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_1010F9660);
  }
  return result;
}

uint64_t sub_100365C28(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_1011063B0);
    v8 = a2;
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100365C88()
{
  unint64_t result;

  result = qword_1010F9690;
  if (!qword_1010F9690)
  {
    result = swift_getWitnessTable(byte_100E3A7FC, &type metadata for SecureLocationsFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9690);
  }
  return result;
}

uint64_t sub_100365CCC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), const char *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_10001F784(a2);
    v9 = a3();
    result = swift_getWitnessTable(a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100365D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F9698;
  if (!qword_1010F9698)
  {
    type metadata accessor for SPSecureLocationSubscriptionMode(255);
    result = swift_getWitnessTable(protocol conformance descriptor for SPSecureLocationSubscriptionMode, v1);
    atomic_store(result, (unint64_t *)&qword_1010F9698);
  }
  return result;
}

unint64_t sub_100365D78()
{
  unint64_t result;

  result = qword_1010F96A8;
  if (!qword_1010F96A8)
  {
    result = swift_getWitnessTable(byte_100E3A7D4, &type metadata for SecureLocationsSubscriptionIntent);
    atomic_store(result, (unint64_t *)&qword_1010F96A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchData.CodingKeys()
{
  return &type metadata for SecureLocationsFetchData.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchResponseBody.CodingKeys()
{
  return &type metadata for SecureLocationsFetchResponseBody.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchBody.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100365E2C + 4 * byte_100E3A271[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100365E60 + 4 * byte_100E3A26C[v4]))();
}

uint64_t sub_100365E60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100365E68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100365E70);
  return result;
}

uint64_t sub_100365E7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100365E84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100365E88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100365E90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchBody.CodingKeys()
{
  return &type metadata for SecureLocationsFetchBody.CodingKeys;
}

uint64_t _s12searchpartyd33SecureLocationsSubscriptionIntentOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100365EF8 + 4 * byte_100E3A27B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100365F2C + 4 * byte_100E3A276[v4]))();
}

uint64_t sub_100365F2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100365F34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100365F3CLL);
  return result;
}

uint64_t sub_100365F48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100365F50);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100365F54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100365F5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubscriptionIntent()
{
  return &type metadata for SecureLocationsSubscriptionIntent;
}

unint64_t sub_100365F7C()
{
  unint64_t result;

  result = qword_1010F96B0;
  if (!qword_1010F96B0)
  {
    result = swift_getWitnessTable(byte_100E3A584, &type metadata for SecureLocationsSubscriptionIntent);
    atomic_store(result, (unint64_t *)&qword_1010F96B0);
  }
  return result;
}

unint64_t sub_100365FC4()
{
  unint64_t result;

  result = qword_1010F96B8;
  if (!qword_1010F96B8)
  {
    result = swift_getWitnessTable("=a#", &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F96B8);
  }
  return result;
}

unint64_t sub_10036600C()
{
  unint64_t result;

  result = qword_1010F96C0;
  if (!qword_1010F96C0)
  {
    result = swift_getWitnessTable(byte_100E3A6F4, &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F96C0);
  }
  return result;
}

unint64_t sub_100366054()
{
  unint64_t result;

  result = qword_1010F96C8;
  if (!qword_1010F96C8)
  {
    result = swift_getWitnessTable(byte_100E3A7AC, &type metadata for SecureLocationsFetchData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F96C8);
  }
  return result;
}

unint64_t sub_10036609C()
{
  unint64_t result;

  result = qword_1010F96D0;
  if (!qword_1010F96D0)
  {
    atomic_store(result, (unint64_t *)&qword_1010F96D0);
  }
  return result;
}

unint64_t sub_1003660E4()
{
  unint64_t result;

  result = qword_1010F96D8;
  if (!qword_1010F96D8)
  {
    atomic_store(result, (unint64_t *)&qword_1010F96D8);
  }
  return result;
}

unint64_t sub_10036612C()
{
  unint64_t result;

  result = qword_1010F96E0;
  if (!qword_1010F96E0)
  {
    result = swift_getWitnessTable("%a#", &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F96E0);
  }
  return result;
}

unint64_t sub_100366174()
{
  unint64_t result;

  result = qword_1010F96E8;
  if (!qword_1010F96E8)
  {
    result = swift_getWitnessTable("\ra#", &type metadata for SecureLocationsFetchResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F96E8);
  }
  return result;
}

unint64_t sub_1003661BC()
{
  unint64_t result;

  result = qword_1010F96F0;
  if (!qword_1010F96F0)
  {
    result = swift_getWitnessTable(byte_100E3A5AC, &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F96F0);
  }
  return result;
}

unint64_t sub_100366204()
{
  unint64_t result;

  result = qword_1010F96F8;
  if (!qword_1010F96F8)
  {
    result = swift_getWitnessTable(byte_100E3A5D4, &type metadata for SecureLocationsFetchBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F96F8);
  }
  return result;
}

unint64_t sub_100366248()
{
  unint64_t result;

  result = qword_1010F9700;
  if (!qword_1010F9700)
  {
    result = swift_getWitnessTable("%b#", &type metadata for SecureLocationsSubscriptionIntent);
    atomic_store(result, (unint64_t *)&qword_1010F9700);
  }
  return result;
}

unint64_t sub_10036628C(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v23 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_10001BBBC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v9 = a3[6];
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[9];
    *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
    v18 = (_QWORD *)(a1 + v17);
    v19 = (_QWORD *)(a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[10];
    v22 = *(_QWORD *)(a2 + v21);
    *(_QWORD *)(a1 + v21) = v22;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
  }
  return a1;
}

uint64_t sub_1003663A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100366434(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[10];
  v21 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_10036651C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v19 = a3[9];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = a3[10];
  v24 = *(_QWORD *)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10036662C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1003666F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003667E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003667EC);
}

uint64_t sub_1003667EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[9] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_100366894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003668A0);
}

uint64_t sub_1003668A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[9] + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100366944(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = &unk_100E3A948;
  v5[1] = &unk_100E3A960;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for MACAddress(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_100E3A978;
      v5[5] = &unk_100E3A990;
      v5[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.SerialNumber()
{
  return &type metadata for OwnedBeaconGroup.SerialNumber;
}

void sub_100366A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int EnumCaseMultiPayload;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  int64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char *v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v65 = a1;
  v2 = type metadata accessor for MACAddress(0);
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  __chkstk_darwin(v2);
  v58 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10001A9A8(&qword_1010F98B8);
  __chkstk_darwin(v64);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v61 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v71 = (uint64_t)&v56 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v56 - v14;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v17 = __chkstk_darwin(v16);
  v19 = (int64_t *)((char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v21 = (char *)&v56 - v20;
  v22 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  v23 = *(_QWORD *)(v22 + 64);
  v57 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v60 = (unint64_t)(v24 + 63) >> 6;
  v56 = v60 - 1;
  v62 = v22;
  swift_bridgeObjectRetain(v22);
  v69 = v11;
  v70 = 0;
  v68 = v7;
  v63 = v19;
  while (v26)
  {
    v28 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    v29 = v28 | (v70 << 6);
LABEL_8:
    v30 = *(_QWORD *)(v62 + 56);
    v31 = (uint64_t *)(*(_QWORD *)(v62 + 48) + 16 * v29);
    v32 = *v31;
    v33 = v31[1];
    *v19 = *v31;
    v19[1] = v33;
    v34 = v30 + *(_QWORD *)(v61 + 72) * v29;
    v35 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    sub_10005972C(v34, (uint64_t)v19 + *(int *)(v35 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v19, 0, 1, v35);
    sub_10001BBBC(v32, v33);
    v7 = v68;
LABEL_27:
    sub_100005CF0((uint64_t)v19, (uint64_t)v21, (uint64_t *)&unk_1010F7830);
    v40 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v21, 1, v40) == 1)
      goto LABEL_37;
    sub_10001BC14(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
    sub_1000126EC((uint64_t)&v21[*(int *)(v40 + 48)], (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v66);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
LABEL_37:
        v67 = 0;
LABEL_39:
        swift_release(v62);
        return;
      }
      v42 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v43 = (uint64_t)&v7[v42[12]];
      sub_10001EF3C(*(_QWORD *)&v7[v42[16]], *(_QWORD *)&v7[v42[16] + 8]);
      v67 = v7[v42[24]];
      sub_100005CF0(v43, (uint64_t)v15, (uint64_t *)&unk_1010F9890);
      v44 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v7, v44);
    }
    else
    {
      v67 = v7[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48)];
      sub_100005CF0((uint64_t)v7, (uint64_t)v15, (uint64_t *)&unk_1010F9890);
    }
    v45 = (uint64_t)v15;
    v47 = v71;
    v46 = v72;
    v48 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v71, v65, v73);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v48);
    v49 = (uint64_t)&v5[*(int *)(v64 + 48)];
    sub_100035464(v45, (uint64_t)v5);
    sub_100035464(v47, v49);
    v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
    if (v50((uint64_t)v5, 1, v48) == 1)
    {
      sub_100004048(v47, (uint64_t *)&unk_1010F9890);
      sub_100004048(v45, (uint64_t *)&unk_1010F9890);
      v27 = v50(v49, 1, v73);
      v15 = (char *)v45;
      v19 = v63;
      if (v27 == 1)
      {
        sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F9890);
        goto LABEL_39;
      }
LABEL_5:
      sub_100004048((uint64_t)v5, &qword_1010F98B8);
    }
    else
    {
      v15 = (char *)v45;
      sub_100035464((uint64_t)v5, (uint64_t)v69);
      if (v50(v49, 1, v73) == 1)
      {
        sub_100004048(v71, (uint64_t *)&unk_1010F9890);
        sub_100004048(v45, (uint64_t *)&unk_1010F9890);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v69, v73);
        v19 = v63;
        goto LABEL_5;
      }
      v51 = v72;
      v52 = v73;
      v53 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v58, v49, v73);
      v54 = sub_100006204(&qword_10111C3A0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v59 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v53, v52, v54);
      v55 = *(void (**)(char *, uint64_t))(v51 + 8);
      v7 = v68;
      v55(v53, v52);
      sub_100004048(v71, (uint64_t *)&unk_1010F9890);
      sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010F9890);
      v55(v69, v52);
      sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F9890);
      v19 = v63;
      if ((v59 & 1) != 0)
        goto LABEL_39;
    }
  }
  v36 = v70 + 1;
  if (__OFADD__(v70, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v36 >= v60)
  {
LABEL_26:
    v39 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v19, 1, 1, v39);
    v26 = 0;
    goto LABEL_27;
  }
  v37 = *(_QWORD *)(v57 + 8 * v36);
  if (v37)
  {
LABEL_12:
    v26 = (v37 - 1) & v37;
    v29 = __clz(__rbit64(v37)) + (v36 << 6);
    v70 = v36;
    goto LABEL_8;
  }
  v38 = v70 + 2;
  ++v70;
  if (v36 + 1 >= v60)
    goto LABEL_26;
  v37 = *(_QWORD *)(v57 + 8 * v38);
  if (v37)
    goto LABEL_15;
  v70 = v36 + 1;
  if (v36 + 2 >= v60)
    goto LABEL_26;
  v37 = *(_QWORD *)(v57 + 8 * (v36 + 2));
  if (v37)
  {
    v36 += 2;
    goto LABEL_12;
  }
  v38 = v36 + 3;
  v70 = v36 + 2;
  if (v36 + 3 >= v60)
    goto LABEL_26;
  v37 = *(_QWORD *)(v57 + 8 * v38);
  if (v37)
  {
LABEL_15:
    v36 = v38;
    goto LABEL_12;
  }
  while (1)
  {
    v36 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v36 >= v60)
    {
      v70 = v56;
      goto LABEL_26;
    }
    v37 = *(_QWORD *)(v57 + 8 * v36);
    ++v38;
    if (v37)
      goto LABEL_12;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_100367114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 40)));
  v3 = sub_100265568(v2);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_100367170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  int EnumCaseMultiPayload;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  NSObject *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  os_log_type_t v170;
  NSObject *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  void (*v176)(char *, uint64_t);
  uint64_t v177;
  os_log_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  NSObject *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  NSObject *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  NSObject *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  void (*v237)(char *, uint64_t);
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  void (*v245)(char *, uint64_t);
  os_log_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  NSObject *v252;
  os_log_type_t v253;
  uint64_t v254;
  NSObject *v255;
  NSObject *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  NSObject *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  void (*v273)(char *, uint64_t);
  os_log_t v274;
  void (*v275)(char *, uint64_t);
  void (*v276)(char *, uint64_t);
  void (*v277)(char *, uint64_t);
  char *v278;
  void (*v279)(char *, uint64_t);
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  __int128 v284;
  char *v285;
  __int128 v286;
  uint64_t v287;
  int v288;
  os_log_t v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  NSObject *v306;
  char *v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;

  v2 = v1;
  v323 = a1;
  v315 = type metadata accessor for UUID(0);
  v309 = *(_QWORD *)(v315 - 8);
  v3 = __chkstk_darwin(v315);
  v300 = (char *)&v280 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v302 = (char *)&v280 - v6;
  __chkstk_darwin(v5);
  v308 = (char *)&v280 - v7;
  v8 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v8);
  v307 = (char *)&v280 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MACAddress(0);
  v318 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v299 = (char *)&v280 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v298 = (char *)&v280 - v14;
  v15 = __chkstk_darwin(v13);
  v297 = (char *)&v280 - v16;
  __chkstk_darwin(v15);
  v296 = (char *)&v280 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v19 = __chkstk_darwin(v18);
  v312 = (uint64_t)&v280 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v311 = (uint64_t)&v280 - v22;
  v23 = __chkstk_darwin(v21);
  v303 = (uint64_t)&v280 - v24;
  __chkstk_darwin(v23);
  v310 = (uint64_t)&v280 - v25;
  v26 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v316 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v313 = (char *)&v280 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v29 = __chkstk_darwin(v28);
  v322 = (uint64_t *)((char *)&v280 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29);
  v321 = (uint64_t *)((char *)&v280 - v31);
  v32 = type metadata accessor for OwnedBeaconGroup(0);
  v33 = __chkstk_darwin(v32);
  v294 = (uint64_t)&v280 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v301 = (uint64_t)&v280 - v36;
  v37 = __chkstk_darwin(v35);
  v293 = (uint64_t)&v280 - v38;
  v39 = __chkstk_darwin(v37);
  v292 = (uint64_t)&v280 - v40;
  v41 = __chkstk_darwin(v39);
  v324 = (char *)&v280 - v42;
  v43 = __chkstk_darwin(v41);
  v325 = (uint64_t)&v280 - v44;
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v280 - v46;
  v48 = __chkstk_darwin(v45);
  v50 = (char *)&v280 - v49;
  v51 = __chkstk_darwin(v48);
  v53 = (char *)&v280 - v52;
  v54 = __chkstk_darwin(v51);
  v56 = (char *)&v280 - v55;
  __chkstk_darwin(v54);
  v58 = (char *)&v280 - v57;
  sub_10005972C(v1, (uint64_t)&v280 - v57, type metadata accessor for OwnedBeaconGroup);
  sub_10005972C(v1, (uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
  v305 = v53;
  sub_10005972C(v1, (uint64_t)v53, type metadata accessor for OwnedBeaconGroup);
  sub_10005972C(v1, (uint64_t)v50, type metadata accessor for OwnedBeaconGroup);
  v317 = v47;
  v59 = sub_10005972C(v1, (uint64_t)v47, type metadata accessor for OwnedBeaconGroup);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.default.getter(v60);
  v306 = v60;
  LODWORD(v295) = v61;
  v62 = os_log_type_enabled(v60, v61);
  v314 = v2;
  v63 = v315;
  v319 = v10;
  v320 = v26;
  v304 = v32;
  if (v62)
  {
    v64 = v26;
    v65 = swift_slowAlloc(78, -1);
    v66 = swift_slowAlloc(128, -1);
    *(_QWORD *)&v291 = v66;
    *(_DWORD *)v65 = 141559811;
    v326 = 1752392040;
    v327 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v65 + 4, v65 + 12);
    *(_WORD *)(v65 + 12) = 2081;
    v67 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v68 = dispatch thunk of CustomStringConvertible.description.getter(v63, v67);
    v70 = v69;
    v326 = sub_100016940(v68, v69, &v327);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease(v70);
    sub_1000126B0((uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v65 + 22) = 2160;
    v326 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v65 + 24, v65 + 32);
    *(_WORD *)(v65 + 32) = 2081;
    v71 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v72 = dispatch thunk of CustomStringConvertible.description.getter(v319, v71);
    v74 = v73;
    v326 = sub_100016940(v72, v73, &v327);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v65 + 34, v65 + 42);
    swift_bridgeObjectRelease(v74);
    sub_1000126B0((uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v65 + 42) = 2080;
    v75 = (uint64_t)v305;
    v76 = *(_QWORD *)&v305[*(int *)(v32 + 40)];
    v77 = sub_100059BCC();
    v78 = swift_bridgeObjectRetain(v76);
    v79 = Dictionary.description.getter(v78, &type metadata for OwnedBeaconGroup.SerialNumber, v64, v77);
    v81 = v80;
    swift_bridgeObjectRelease(v76);
    v326 = sub_100016940(v79, v81, &v327);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v65 + 44, v65 + 52);
    swift_bridgeObjectRelease(v81);
    sub_1000126B0(v75, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v65 + 52) = 1024;
    LODWORD(v76) = v50[*(int *)(v32 + 32)];
    sub_1000126B0((uint64_t)v50, type metadata accessor for OwnedBeaconGroup);
    LODWORD(v326) = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, (char *)&v326 + 4, v65 + 54, v65 + 58);
    *(_WORD *)(v65 + 58) = 2160;
    v82 = v314;
    v326 = 1752392040;
    v83 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v65 + 60, v65 + 68);
    *(_WORD *)(v65 + 68) = 2081;
    v84 = (uint64_t)v317;
    v85 = MACAddress.udid.getter(v83);
    v87 = v86;
    v326 = sub_100016940(v85, v86, &v327);
    v2 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v65 + 70, v65 + 78);
    swift_bridgeObjectRelease(v87);
    sub_1000126B0(v84, type metadata accessor for OwnedBeaconGroup);
    v88 = v306;
    _os_log_impl((void *)&_mh_execute_header, v306, (os_log_type_t)v295, "<id:%{private,mask.hash}s mac:%{private,mask.hash}s beaconMap:%s fmns:%{BOOL}d udid: %{private,mask.hash}s>", (uint8_t *)v65, 0x4Eu);
    v89 = v291;
    swift_arrayDestroy(v291, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v65, -1, -1);

  }
  else
  {
    sub_1000126B0((uint64_t)v50, type metadata accessor for OwnedBeaconGroup);

    sub_1000126B0((uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
    sub_1000126B0((uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
    sub_1000126B0((uint64_t)v305, type metadata accessor for OwnedBeaconGroup);
    sub_1000126B0((uint64_t)v317, type metadata accessor for OwnedBeaconGroup);
  }
  v91 = (uint64_t)v324;
  v90 = v325;
  sub_10005972C(v2, v325, type metadata accessor for OwnedBeaconGroup);
  v92 = sub_10005972C(v2, v91, type metadata accessor for OwnedBeaconGroup);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.default.getter(v93);
  if (os_log_type_enabled(v93, v94))
  {
    v95 = swift_slowAlloc(32, -1);
    v96 = swift_slowAlloc(32, -1);
    *(_DWORD *)v95 = 141558531;
    v326 = 1752392040;
    v327 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v95 + 4, v95 + 12);
    *(_WORD *)(v95 + 12) = 2081;
    v97 = v304;
    v98 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v99 = dispatch thunk of CustomStringConvertible.description.getter(v315, v98);
    v101 = v100;
    v326 = sub_100016940(v99, v100, &v327);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v95 + 14, v95 + 22);
    swift_bridgeObjectRelease(v101);
    sub_1000126B0(v90, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v95 + 22) = 2048;
    v102 = *(_QWORD *)(*(_QWORD *)(v91 + *(int *)(v97 + 40)) + 16);
    sub_1000126B0(v91, type metadata accessor for OwnedBeaconGroup);
    v326 = v102;
    v2 = v314;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, &v327, v95 + 24, v95 + 32);
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "BeaconMap for group: %{private,mask.hash}s (%ld)", (uint8_t *)v95, 0x20u);
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1, -1);
    swift_slowDealloc(v95, -1, -1);

    v103 = v97;
    v104 = (uint64_t)v313;
    v105 = v322;
  }
  else
  {
    sub_1000126B0(v91, type metadata accessor for OwnedBeaconGroup);

    sub_1000126B0(v90, type metadata accessor for OwnedBeaconGroup);
    v104 = (uint64_t)v313;
    v105 = v322;
    v103 = v304;
  }
  v106 = v309;
  v107 = v308;
  v108 = *(_QWORD *)(v2 + *(int *)(v103 + 40));
  v109 = *(_QWORD *)(v108 + 64);
  v295 = v108 + 64;
  v110 = 1 << *(_BYTE *)(v108 + 32);
  v111 = -1;
  if (v110 < 64)
    v111 = ~(-1 << v110);
  v112 = v111 & v109;
  v113 = (unint64_t)(v110 + 63) >> 6;
  v306 = &v327;
  v281 = v113 - 1;
  v114 = swift_bridgeObjectRetain(v108);
  v115 = v112;
  v116 = 0;
  v305 = (char *)v113;
  v282 = v113 - 5;
  v317 = (char *)v114;
  v283 = v114 + 104;
  *(_QWORD *)&v117 = 141558787;
  v286 = v117;
  v285 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v117 = 141559299;
  v290 = v117;
  *(_QWORD *)&v117 = 141559811;
  v284 = v117;
  *(_QWORD *)&v117 = 141558275;
  v291 = v117;
  v118 = v107;
  while (1)
  {
    if (v115)
    {
      v119 = v106;
      v120 = v118;
      v324 = (char *)((v115 - 1) & v115);
      v325 = v116;
      v121 = __clz(__rbit64(v115)) | (v116 << 6);
      goto LABEL_14;
    }
    v129 = v116 + 1;
    if (__OFADD__(v116, 1))
      break;
    if (v129 >= (uint64_t)v305)
    {
      v131 = v116;
LABEL_20:
      v132 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 56))(v105, 1, 1, v132);
      v324 = 0;
      v325 = v131;
      v128 = v321;
      goto LABEL_21;
    }
    v130 = *(_QWORD *)(v295 + 8 * v129);
    if (!v130)
    {
      v131 = v116 + 1;
      if (v116 + 2 >= (uint64_t)v305)
        goto LABEL_20;
      v130 = *(_QWORD *)(v295 + 8 * (v116 + 2));
      if (v130)
      {
        v129 = v116 + 2;
      }
      else
      {
        v131 = v116 + 2;
        if (v116 + 3 >= (uint64_t)v305)
          goto LABEL_20;
        v130 = *(_QWORD *)(v295 + 8 * (v116 + 3));
        if (v130)
        {
          v129 = v116 + 3;
        }
        else
        {
          v129 = v116 + 4;
          v131 = v116 + 3;
          if (v116 + 4 >= (uint64_t)v305)
            goto LABEL_20;
          v130 = *(_QWORD *)(v295 + 8 * v129);
          if (!v130)
          {
            while (v282 != v116)
            {
              v130 = *(_QWORD *)(v283 + 8 * v116++);
              if (v130)
              {
                v129 = v116 + 4;
                goto LABEL_18;
              }
            }
            v131 = v281;
            goto LABEL_20;
          }
        }
      }
    }
LABEL_18:
    v119 = v106;
    v120 = v118;
    v324 = (char *)((v130 - 1) & v130);
    v325 = v129;
    v121 = __clz(__rbit64(v130)) + (v129 << 6);
LABEL_14:
    v122 = *((_QWORD *)v317 + 7);
    v123 = (uint64_t *)(*((_QWORD *)v317 + 6) + 16 * v121);
    v124 = *v123;
    v125 = v123[1];
    *v105 = *v123;
    v105[1] = v125;
    v126 = v122 + *(_QWORD *)(v316 + 72) * v121;
    v127 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    sub_10005972C(v126, (uint64_t)v105 + *(int *)(v127 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v105, 0, 1, v127);
    sub_10001BBBC(v124, v125);
    v128 = v321;
    v118 = v120;
    v106 = v119;
LABEL_21:
    sub_100005CF0((uint64_t)v105, (uint64_t)v128, (uint64_t *)&unk_1010F7830);
    v133 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 48))(v128, 1, v133) == 1)
    {
      swift_release(v317);
      return;
    }
    v134 = v128;
    v135 = *v128;
    v136 = v134[1];
    sub_1000126EC((uint64_t)v134 + *(int *)(v133 + 48), v104, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v104, v320);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v138 = sub_10001A9A8(&qword_1010F5DC0);
        v139 = v104 + *(int *)(v138 + 48);
        sub_10001EF3C(*(_QWORD *)(v104 + *(int *)(v138 + 64)), *(_QWORD *)(v104 + *(int *)(v138 + 64) + 8));
        v140 = v315;
        (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v118, v104, v315);
        v141 = v139;
        v142 = v311;
        sub_100005CF0(v141, v311, (uint64_t *)&unk_1010F9890);
        v143 = v312;
        sub_100035464(v142, v312);
        v144 = v318;
        v145 = v319;
        v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v318 + 48))(v143, 1, v319);
        v147 = v140;
        v148 = v106;
        if (v146 != 1)
        {
          v208 = v298;
          (*(void (**)(char *, uint64_t, uint64_t))(v144 + 32))(v298, v312, v145);
          v209 = v118;
          v210 = v148;
          sub_10005972C(v314, v301, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v302, v209, v147);
          v211 = v299;
          (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v299, v208, v145);
          sub_10001BBBC(v135, v136);
          v212 = sub_10001BBBC(v135, v136);
          v213 = v144;
          v214 = Logger.logObject.getter(v212);
          v215 = static os_log_type_t.default.getter(v214);
          if (!os_log_type_enabled(v214, (os_log_type_t)v215))
          {

            v276 = *(void (**)(char *, uint64_t))(v213 + 8);
            v276(v211, v145);
            v277 = *(void (**)(char *, uint64_t))(v210 + 8);
            v277(v302, v147);
            sub_10001BC14(v135, v136);
            sub_10001BC14(v135, v136);
            sub_1000126B0(v301, type metadata accessor for OwnedBeaconGroup);
            sub_10001BC14(v135, v136);
            v276(v208, v145);
            sub_100004048(v311, (uint64_t *)&unk_1010F9890);
            v278 = v308;
            v277(v308, v147);
            v104 = (uint64_t)v313;
            v105 = v322;
            v106 = v210;
            v118 = v278;
            goto LABEL_53;
          }
          v288 = v215;
          v289 = v214;
          v216 = swift_slowAlloc(82, -1);
          v217 = swift_slowAlloc(128, -1);
          v287 = v217;
          *(_DWORD *)v216 = v284;
          v326 = 1752392040;
          v327 = v217;
          v218 = v306;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v306, v216 + 4, v216 + 12);
          *(_WORD *)(v216 + 12) = 2081;
          v219 = v147;
          v220 = v301;
          v221 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v222 = dispatch thunk of CustomStringConvertible.description.getter(v219, v221);
          v224 = v223;
          v326 = sub_100016940(v222, v223, &v327);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v218, v216 + 14, v216 + 22);
          swift_bridgeObjectRelease(v224);
          sub_1000126B0(v220, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v216 + 22) = 2160;
          v326 = 1752392040;
          v225 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v218, v216 + 24, v216 + 32);
          *(_WORD *)(v216 + 32) = 2081;
          v226 = v307;
          static String.Encoding.utf8.getter(v225);
          v227 = String.init(data:encoding:)(v135, v136, v226);
          if (!v228)
            v227 = Data.hexString.getter(v135, v136);
          v229 = v228;
          v230 = v309;
          v326 = sub_100016940(v227, v228, &v327);
          v231 = v306;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v306, v216 + 34, v216 + 42);
          swift_bridgeObjectRelease(v229);
          sub_10001BC14(v135, v136);
          sub_10001BC14(v135, v136);
          *(_WORD *)(v216 + 42) = 2160;
          v326 = 1752392040;
          v232 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v231, v216 + 44, v216 + 52);
          *(_WORD *)(v216 + 52) = 2081;
          v233 = v302;
          v234 = UUID.uuidString.getter(v232);
          v236 = v235;
          v326 = sub_100016940(v234, v235, &v327);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v231, v216 + 54, v216 + 62);
          swift_bridgeObjectRelease(v236);
          v237 = *(void (**)(char *, uint64_t))(v230 + 8);
          v238 = v315;
          v237(v233, v315);
          *(_WORD *)(v216 + 62) = 2160;
          v326 = 1752392040;
          v239 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v231, v216 + 64, v216 + 72);
          *(_WORD *)(v216 + 72) = 2081;
          v240 = v299;
          v241 = MACAddress.description.getter(v239);
          v243 = v242;
          v326 = sub_100016940(v241, v242, &v327);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v231, v216 + 74, v216 + 82);
          swift_bridgeObjectRelease(v243);
          v244 = v319;
          v245 = *(void (**)(char *, uint64_t))(v318 + 8);
          v245(v240, v319);
          v246 = v289;
          _os_log_impl((void *)&_mh_execute_header, v289, (os_log_type_t)v288, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: \"\npaired(%{private,mask.hash}s, %{private,mask.hash}s", (uint8_t *)v216, 0x52u);
          v247 = v287;
          swift_arrayDestroy(v287, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v247, -1, -1);
          swift_slowDealloc(v216, -1, -1);

          sub_10001BC14(v135, v136);
          v245(v298, v244);
          sub_100004048(v311, (uint64_t *)&unk_1010F9890);
          v118 = v308;
          v237(v308, v238);
          v104 = (uint64_t)v313;
          v105 = v322;
          goto LABEL_47;
        }
        sub_100004048(v312, (uint64_t *)&unk_1010F9890);
        v149 = v118;
        v150 = v294;
        sub_10005972C(v314, v294, type metadata accessor for OwnedBeaconGroup);
        v151 = v300;
        (*(void (**)(char *, char *, uint64_t))(v148 + 16))(v300, v149, v147);
        sub_10001BBBC(v135, v136);
        v152 = sub_10001BBBC(v135, v136);
        v153 = Logger.logObject.getter(v152);
        v154 = static os_log_type_t.default.getter(v153);
        if (!os_log_type_enabled(v153, (os_log_type_t)v154))
        {

          v275 = *(void (**)(char *, uint64_t))(v148 + 8);
          v275(v151, v147);
          sub_10001BC14(v135, v136);
          sub_10001BC14(v135, v136);
          sub_1000126B0(v150, type metadata accessor for OwnedBeaconGroup);
          sub_10001BC14(v135, v136);
          sub_100004048(v311, (uint64_t *)&unk_1010F9890);
          v275(v149, v147);
          v105 = v322;
          v118 = v149;
          goto LABEL_50;
        }
        v288 = v154;
        v289 = v153;
        v155 = swift_slowAlloc(62, -1);
        v156 = swift_slowAlloc(96, -1);
        v287 = v156;
        *(_DWORD *)v155 = v290;
        v326 = 1752392040;
        v327 = v156;
        v157 = v306;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v306, v155 + 4, v155 + 12);
        *(_WORD *)(v155 + 12) = 2081;
        v158 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v159 = dispatch thunk of CustomStringConvertible.description.getter(v147, v158);
        v161 = v160;
        v326 = sub_100016940(v159, v160, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v157, v155 + 14, v155 + 22);
        swift_bridgeObjectRelease(v161);
        sub_1000126B0(v150, type metadata accessor for OwnedBeaconGroup);
        *(_WORD *)(v155 + 22) = 2160;
        v326 = 1752392040;
        v162 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v157, v155 + 24, v155 + 32);
        *(_WORD *)(v155 + 32) = 2081;
        v163 = v307;
        static String.Encoding.utf8.getter(v162);
        v164 = String.init(data:encoding:)(v135, v136, v163);
        if (!v165)
          v164 = Data.hexString.getter(v135, v136);
        v166 = v165;
        v168 = v308;
        v167 = v309;
        v169 = v300;
        v170 = v288;
        v326 = sub_100016940(v164, v165, &v327);
        v171 = v306;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v306, v155 + 34, v155 + 42);
        swift_bridgeObjectRelease(v166);
        sub_10001BC14(v135, v136);
        sub_10001BC14(v135, v136);
        *(_WORD *)(v155 + 42) = 2160;
        v326 = 1752392040;
        v172 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v171, v155 + 44, v155 + 52);
        *(_WORD *)(v155 + 52) = 2081;
        v173 = UUID.uuidString.getter(v172);
        v175 = v174;
        v326 = sub_100016940(v173, v174, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v171, v155 + 54, v155 + 62);
        swift_bridgeObjectRelease(v175);
        v176 = *(void (**)(char *, uint64_t))(v167 + 8);
        v177 = v315;
        v176(v169, v315);
        v178 = v289;
        _os_log_impl((void *)&_mh_execute_header, v289, v170, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: paired(%{private,mask.hash}s, N/A)", (uint8_t *)v155, 0x3Eu);
        v179 = v287;
        swift_arrayDestroy(v287, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v179, -1, -1);
        swift_slowDealloc(v155, -1, -1);

        sub_10001BC14(v135, v136);
        sub_100004048(v311, (uint64_t *)&unk_1010F9890);
        v176(v168, v177);
        v118 = v168;
        v104 = (uint64_t)v313;
        v105 = v322;
        v106 = v167;
LABEL_53:
        v115 = (unint64_t)v324;
        v116 = v325;
      }
      else
      {
        sub_10001BBBC(v135, v136);
        v199 = sub_10001BBBC(v135, v136);
        v200 = Logger.logObject.getter(v199);
        v201 = static os_log_type_t.default.getter(v200);
        if (!os_log_type_enabled(v200, v201))
        {
          sub_10001BC14(v135, v136);

          sub_10001BC14(v135, v136);
          sub_10001BC14(v135, v136);
          v105 = v322;
          goto LABEL_11;
        }
        v202 = swift_slowAlloc(22, -1);
        v203 = swift_slowAlloc(32, -1);
        v327 = v203;
        *(_DWORD *)v202 = v291;
        *(_QWORD *)(v202 + 4) = 1752392040;
        *(_WORD *)(v202 + 12) = 2081;
        v204 = v307;
        static String.Encoding.utf8.getter(v203);
        v205 = String.init(data:encoding:)(v135, v136, v204);
        if (!v206)
          v205 = Data.hexString.getter(v135, v136);
        v207 = v206;
        *(_QWORD *)(v202 + 14) = sub_100016940(v205, v206, &v327);
        swift_bridgeObjectRelease(v207);
        sub_10001BC14(v135, v136);
        sub_10001BC14(v135, v136);
        _os_log_impl((void *)&_mh_execute_header, v200, v201, "  %{private,mask.hash}s: locked", (uint8_t *)v202, 0x16u);
        swift_arrayDestroy(v203, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v203, -1, -1);
        swift_slowDealloc(v202, -1, -1);
        sub_10001BC14(v135, v136);

LABEL_38:
        v104 = (uint64_t)v313;
        v105 = v322;
LABEL_11:
        v115 = (unint64_t)v324;
        v116 = v325;
      }
    }
    else
    {
      v180 = v310;
      sub_100005CF0(v104, v310, (uint64_t *)&unk_1010F9890);
      v181 = v303;
      sub_100035464(v180, v303);
      v182 = v318;
      v183 = v319;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v318 + 48))(v181, 1, v319) == 1)
      {
        v148 = v106;
        sub_100004048(v181, (uint64_t *)&unk_1010F9890);
        v184 = v293;
        sub_10005972C(v314, v293, type metadata accessor for OwnedBeaconGroup);
        sub_10001BBBC(v135, v136);
        v185 = sub_10001BBBC(v135, v136);
        v186 = Logger.logObject.getter(v185);
        v187 = static os_log_type_t.default.getter(v186);
        if (os_log_type_enabled(v186, v187))
        {
          v188 = swift_slowAlloc(42, -1);
          v189 = swift_slowAlloc(64, -1);
          v327 = v189;
          *(_DWORD *)v188 = v286;
          *(_QWORD *)(v188 + 4) = 1752392040;
          *(_WORD *)(v188 + 12) = 2081;
          v190 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v191 = dispatch thunk of CustomStringConvertible.description.getter(v315, v190);
          v193 = v192;
          *(_QWORD *)(v188 + 14) = sub_100016940(v191, v192, &v327);
          swift_bridgeObjectRelease(v193);
          v194 = sub_1000126B0(v184, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v188 + 22) = 2160;
          *(_QWORD *)(v188 + 24) = 1752392040;
          *(_WORD *)(v188 + 32) = 2081;
          v195 = v307;
          static String.Encoding.utf8.getter(v194);
          v196 = String.init(data:encoding:)(v135, v136, v195);
          if (!v197)
            v196 = Data.hexString.getter(v135, v136);
          v198 = v197;
          v118 = v308;
          v106 = v309;
          *(_QWORD *)(v188 + 34) = sub_100016940(v196, v197, &v327);
          swift_bridgeObjectRelease(v198);
          sub_10001BC14(v135, v136);
          sub_10001BC14(v135, v136);
          _os_log_impl((void *)&_mh_execute_header, v186, v187, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: unpaired(N/A)", (uint8_t *)v188, 0x2Au);
          swift_arrayDestroy(v189, 2, v285);
          swift_slowDealloc(v189, -1, -1);
          swift_slowDealloc(v188, -1, -1);

          sub_10001BC14(v135, v136);
          sub_100004048(v310, (uint64_t *)&unk_1010F9890);
          goto LABEL_38;
        }
        sub_10001BC14(v135, v136);
        sub_1000126B0(v184, type metadata accessor for OwnedBeaconGroup);
        sub_10001BC14(v135, v136);
        sub_10001BC14(v135, v136);

        sub_100004048(v310, (uint64_t *)&unk_1010F9890);
        v105 = v322;
LABEL_50:
        v115 = (unint64_t)v324;
        v116 = v325;
        v106 = v148;
      }
      else
      {
        v248 = v296;
        (*(void (**)(char *, uint64_t, uint64_t))(v182 + 32))(v296, v181, v183);
        v249 = v292;
        sub_10005972C(v314, v292, type metadata accessor for OwnedBeaconGroup);
        v250 = v297;
        (*(void (**)(char *, char *, uint64_t))(v182 + 16))(v297, v248, v183);
        sub_10001BBBC(v135, v136);
        v251 = sub_10001BBBC(v135, v136);
        v252 = Logger.logObject.getter(v251);
        v253 = static os_log_type_t.default.getter(v252);
        if (!os_log_type_enabled(v252, v253))
        {

          v279 = *(void (**)(char *, uint64_t))(v182 + 8);
          v279(v250, v183);
          sub_10001BC14(v135, v136);
          sub_10001BC14(v135, v136);
          sub_1000126B0(v249, type metadata accessor for OwnedBeaconGroup);
          sub_10001BC14(v135, v136);
          v279(v248, v183);
          sub_100004048(v310, (uint64_t *)&unk_1010F9890);
          v104 = (uint64_t)v313;
          v105 = v322;
          v118 = v308;
          v106 = v309;
          goto LABEL_53;
        }
        v254 = swift_slowAlloc(62, -1);
        v255 = swift_slowAlloc(96, -1);
        v289 = v255;
        *(_DWORD *)v254 = v290;
        v326 = 1752392040;
        v327 = (uint64_t)v255;
        v256 = v306;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v306, v254 + 4, v254 + 12);
        *(_WORD *)(v254 + 12) = 2081;
        v257 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v258 = dispatch thunk of CustomStringConvertible.description.getter(v315, v257);
        v260 = v259;
        v326 = sub_100016940(v258, v259, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v256, v254 + 14, v254 + 22);
        swift_bridgeObjectRelease(v260);
        sub_1000126B0(v249, type metadata accessor for OwnedBeaconGroup);
        *(_WORD *)(v254 + 22) = 2160;
        v326 = 1752392040;
        v261 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v256, v254 + 24, v254 + 32);
        *(_WORD *)(v254 + 32) = 2081;
        v262 = v307;
        static String.Encoding.utf8.getter(v261);
        v263 = String.init(data:encoding:)(v135, v136, v262);
        if (!v264)
          v263 = Data.hexString.getter(v135, v136);
        v265 = v264;
        v104 = (uint64_t)v313;
        v326 = sub_100016940(v263, v264, &v327);
        v266 = v306;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v306, v254 + 34, v254 + 42);
        swift_bridgeObjectRelease(v265);
        sub_10001BC14(v135, v136);
        sub_10001BC14(v135, v136);
        *(_WORD *)(v254 + 42) = 2160;
        v326 = 1752392040;
        v267 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v266, v254 + 44, v254 + 52);
        *(_WORD *)(v254 + 52) = 2081;
        v268 = v297;
        v269 = MACAddress.description.getter(v267);
        v271 = v270;
        v326 = sub_100016940(v269, v270, &v327);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v326, v266, v254 + 54, v254 + 62);
        swift_bridgeObjectRelease(v271);
        v272 = v319;
        v273 = *(void (**)(char *, uint64_t))(v318 + 8);
        v273(v268, v319);
        _os_log_impl((void *)&_mh_execute_header, v252, v253, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: unpaired(%{private,mask.hash}s", (uint8_t *)v254, 0x3Eu);
        v274 = v289;
        swift_arrayDestroy(v289, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v274, -1, -1);
        swift_slowDealloc(v254, -1, -1);

        sub_10001BC14(v135, v136);
        v273(v296, v272);
        sub_100004048(v310, (uint64_t *)&unk_1010F9890);
        v105 = v322;
        v118 = v308;
LABEL_47:
        v115 = (unint64_t)v324;
        v116 = v325;
        v106 = v309;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1003690A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  char v21;
  char v22;
  uint64_t v24;
  _QWORD *v25;

  v1 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v24 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v24 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  if (*(_BYTE *)(v0 + *(int *)(v14 + 32)) == 1)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v14 + 40)));
    v16 = sub_100508A58(v15);
    swift_bridgeObjectRelease();
    v17 = v16[2];
    if (v17)
    {
      v18 = (uint64_t)v16 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v19 = *(_QWORD *)(v2 + 72);
      v25 = v16;
      swift_retain();
      while (1)
      {
        sub_10005972C(v18, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v1);
        sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_10005972C((uint64_t)v13, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
        if (!EnumCaseMultiPayload)
          break;
        swift_storeEnumTagMultiPayload(v5, v1, 2);
        v21 = sub_1003739B0((uint64_t)v8, (uint64_t)v5);
        sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
        if ((v21 & 1) != 0)
          goto LABEL_11;
        v18 += v19;
        if (!--v17)
        {
          swift_release_n(v25, 2);
          v22 = 1;
          return v22 & 1;
        }
      }
      sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
LABEL_11:
      swift_release_n(v25, 2);
      v22 = 0;
    }
    else
    {
      swift_release(v16);
      v22 = 1;
    }
  }
  else
  {
    v22 = sub_10036F59C() ^ 1;
  }
  return v22 & 1;
}

uint64_t sub_1003692E4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  int v20;
  int EnumCaseMultiPayload;
  int *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  _BYTE v28[16];

  v5 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v5);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v28[-v13];
  v15 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(_QWORD *)(v15 + 16))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_7:
    sub_100004048((uint64_t)v7, &qword_1010EF198);
    goto LABEL_8;
  }
  sub_10001BBBC(a1, a2);
  v16 = sub_100518E4C(a1, a2);
  if ((v17 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v15 + 56) + *(_QWORD *)(v9 + 72) * v16, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v18, 1, v8);
  sub_10001BC14(a1, a2);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    goto LABEL_7;
  sub_1000126EC((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1000126EC((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v8);
  if (!EnumCaseMultiPayload)
  {
    v27 = &v12[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48)];
    v19 = *v27;
    v20 = v27[1];
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F9890);
    return v19 | (v20 << 8);
  }
  if (EnumCaseMultiPayload == 1)
  {
    v23 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v24 = (uint64_t)&v12[v23[12]];
    sub_10001EF3C(*(_QWORD *)&v12[v23[16]], *(_QWORD *)&v12[v23[16] + 8]);
    v25 = &v12[v23[24]];
    v19 = *v25;
    v20 = v25[1];
    sub_100004048(v24, (uint64_t *)&unk_1010F9890);
    v26 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v12, v26);
    return v19 | (v20 << 8);
  }
LABEL_8:
  v19 = 0;
  v20 = 1;
  return v19 | (v20 << 8);
}

uint64_t sub_100369558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;

  v58 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v3 = __chkstk_darwin(v58);
  v57 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v56 = (char *)&v47 - v6;
  v7 = __chkstk_darwin(v5);
  v55 = (uint64_t *)((char *)&v47 - v8);
  v9 = __chkstk_darwin(v7);
  v54 = (uint64_t *)((char *)&v47 - v10);
  __chkstk_darwin(v9);
  v53 = (uint64_t *)((char *)&v47 - v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v47 = v1;
  v61 = _swiftEmptyArrayStorage;
  sub_10009A364(0, v12, 0);
  result = sub_10001D6A8(a1);
  v16 = result;
  v17 = 0;
  v18 = a1 + 64;
  v48 = a1 + 80;
  v49 = v12;
  v51 = a1 + 64;
  v52 = a1;
  v50 = v15;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = (unint64_t)v16 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
      goto LABEL_26;
    v59 = v17;
    v60 = 1 << v16;
    v22 = v58;
    v23 = (uint64_t)v53;
    v24 = (uint64_t)v53 + *(int *)(v58 + 48);
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = (uint64_t *)(v25 + 16 * v16);
    v28 = *v27;
    v29 = v27[1];
    *v53 = *v27;
    *(_QWORD *)(v23 + 8) = v29;
    v30 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    sub_10005972C(v26 + *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v16, v24, type metadata accessor for OwnedBeaconGroup.PairingState);
    v31 = (uint64_t)v54;
    *v54 = v28;
    *(_QWORD *)(v31 + 8) = v29;
    sub_10005972C(v24, v31 + *(int *)(v22 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    v32 = v55;
    sub_100005CF0(v31, (uint64_t)v55, (uint64_t *)&unk_1010F9880);
    sub_10001BBBC(v28, v29);
    sub_10001BBBC(v28, v29);
    sub_100004048(v23, (uint64_t *)&unk_1010F9880);
    v33 = *(int *)(v22 + 48);
    v34 = (uint64_t)&v56[v33];
    v35 = *v32;
    v36 = v32[1];
    sub_10005972C((uint64_t)v32 + v33, (uint64_t)&v56[v33], type metadata accessor for OwnedBeaconGroup.PairingState);
    v37 = (uint64_t)v57;
    v38 = (uint64_t)v57 + *(int *)(v22 + 48);
    *v57 = v35;
    *(_QWORD *)(v37 + 8) = v36;
    sub_1000126EC(v34, v38, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10001BBBC(v35, v36);
    sub_10001BBBC(v35, v36);
    sub_100004048(v37, (uint64_t *)&unk_1010F9880);
    sub_100004048((uint64_t)v32, (uint64_t *)&unk_1010F9880);
    v13 = v61;
    result = swift_isUniquelyReferenced_nonNull_native(v61);
    if ((result & 1) == 0)
    {
      result = sub_10009A364(0, v13[2] + 1, 1);
      v13 = v61;
    }
    v40 = v13[2];
    v39 = v13[3];
    if (v40 >= v39 >> 1)
    {
      result = sub_10009A364(v39 > 1, v40 + 1, 1);
      v13 = v61;
    }
    v13[2] = v40 + 1;
    v41 = &v13[2 * v40];
    v41[4] = v35;
    v41[5] = v36;
    a1 = v52;
    v19 = 1 << *(_BYTE *)(v52 + 32);
    if (v16 >= v19)
      goto LABEL_27;
    v18 = v51;
    v42 = *(_QWORD *)(v51 + 8 * v21);
    if ((v42 & v60) == 0)
      goto LABEL_28;
    LODWORD(v15) = v50;
    if (*(_DWORD *)(v52 + 36) != (_DWORD)v50)
      goto LABEL_29;
    v43 = v42 & (-2 << (v16 & 0x3F));
    if (v43)
    {
      v19 = __clz(__rbit64(v43)) | v16 & 0xFFFFFFFFFFFFFFC0;
      v20 = v49;
    }
    else
    {
      v44 = v21 + 1;
      v45 = (unint64_t)(v19 + 63) >> 6;
      v20 = v49;
      if (v21 + 1 < v45)
      {
        v46 = *(_QWORD *)(v51 + 8 * v44);
        if (v46)
        {
LABEL_22:
          v19 = __clz(__rbit64(v46)) + (v44 << 6);
        }
        else
        {
          while (v45 - 2 != v21)
          {
            v46 = *(_QWORD *)(v48 + 8 * v21++);
            if (v46)
            {
              v44 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v17 = v59 + 1;
    v16 = v19;
    if (v59 + 1 == v20)
      return (uint64_t)v13;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void sub_100369964(void *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void (*v32)(char *, char *, uint64_t);
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint8_t *v67;
  unint64_t v68;
  _BYTE *v69;
  int *v70;
  int *v71;
  void *v72;
  NSString v73;
  id v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  id v87;
  NSString v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  unint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE v107[4];
  int v108;
  unint64_t v109;
  unint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  int *v113;
  id v114;
  void *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  id v124;

  v118 = a2;
  v3 = (_QWORD *)type metadata accessor for MACAddress(0);
  v4 = *(v3 - 1);
  v115 = v3;
  v116 = v4;
  __chkstk_darwin(v3);
  v6 = (int *)&v107[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  v8 = __chkstk_darwin(v7);
  v10 = &v107[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v107[-v11];
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v15 = &v107[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for UUID(0);
  v120 = *(_QWORD *)(v16 - 8);
  v121 = v16;
  v17 = __chkstk_darwin(v16);
  v119 = &v107[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = CKRecord.recordType.getter(v17);
  if (v19 == 0x72476E6F63616542 && v20 == 0xEB0000000070756FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, 0x72476E6F63616542, 0xEB0000000070756FLL, 0);
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      v56 = sub_100373808();
      v30 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v56, 0, 0);
      *v57 = 0;
      goto LABEL_13;
    }
  }
  v22 = objc_msgSend(a1, "recordID");
  v23 = objc_msgSend(v22, "recordName");

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  UUID.init(uuidString:)(v24, v26);
  swift_bridgeObjectRelease();
  v28 = v120;
  v27 = v121;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v120 + 48))(v15, 1, v121) == 1)
  {
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    v29 = sub_100373808();
    v30 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v29, 0, 0);
    *v31 = 3;
LABEL_13:
    swift_willThrow(v30);

    return;
  }
  v32 = *(void (**)(char *, _BYTE *, uint64_t))(v28 + 32);
  v32(v119, v15, v27);
  v33 = objc_msgSend(a1, "encryptedValues");
  v34 = String._bridgeToObjectiveC()();
  v114 = v33;
  v35 = objc_msgSend(v33, "objectForKeyedSubscript:", v34);

  if (!v35
    || (v124 = v35,
        v37 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        v36 = swift_dynamicCast(&v122, &v124, v37, &type metadata for Data, 6),
        (v36 & 1) == 0))
  {
    v48 = static os_log_type_t.error.getter(v36);
    v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v50 = swift_allocObject(v49, 72, 7);
    *(_OWORD *)(v50 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v50 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v50 + 64) = sub_100088600();
    *(_QWORD *)(v50 + 32) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v51 = a1;
    v52 = (void *)static OS_os_log.default.getter(v51);
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v52, "Invalid Beacon Group (missing macAddress) - %@", 46, 2, v50);
    swift_bridgeObjectRelease();

    v53 = sub_100373808();
    v54 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v53, 0, 0);
    *v55 = 2;
    swift_willThrow(v54);
    swift_unknownObjectRelease(v114);

    (*(void (**)(char *, uint64_t))(v120 + 8))(v119, v121);
    return;
  }
  v112 = v37;
  v113 = v6;
  v111 = v32;
  v38 = v122;
  v39 = v123;
  v40 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = sub_10001BBBC(v38, v39);
  v42 = JSONDecoder.init()(v41);
  v43 = sub_100006204((unint64_t *)&unk_1010F9870, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress, (uint64_t)&unk_100E3B0F0);
  v44 = v117;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v38, v39, v7, v43);
  if (v44)
  {
    sub_10001BC14(v38, v39);
    swift_release(v42);
    v45 = v44;
    v46 = v118;
    v47 = v38;
  }
  else
  {
    v117 = v38;
    v58 = v38;
    v59 = v39;
    sub_10001BC14(v58, v39);
    swift_release(v42);
    sub_1000126EC((uint64_t)v10, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    v60 = *(_QWORD *)v12;
    v61 = v12[8];
    if ((v61 & 1) != 0 || v60 < 2)
    {
      v110 = v39;
      v46 = v118;
      v118[2] = v60;
      *((_BYTE *)v46 + 24) = v61;
      v70 = (int *)&v12[*(int *)(v7 + 20)];
      v47 = v117;
      goto LABEL_23;
    }
    v46 = v118;
    if (qword_1010E9AE0 != -1)
      swift_once(&qword_1010E9AE0, sub_100265974);
    v62 = type metadata accessor for Logger(0);
    v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B6C50);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v66 = 134217984;
      v46 = v118;
      v122 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v66 + 4, v66 + 12);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Ignoring unsupported OwnedBeaconGroup version: %ld > 1", v66, 0xCu);
      v67 = v66;
      v59 = v39;
      swift_slowDealloc(v67, -1, -1);
    }

    v68 = sub_100373808();
    v45 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v68, 0, 0);
    *v69 = 5;
    swift_willThrow(v45);
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    v47 = v117;
    v39 = v59;
  }
  v46[2] = 0;
  *((_BYTE *)v46 + 24) = 1;
  sub_10001BBBC(v47, v39);
  v70 = v113;
  MACAddress.init(dataRepresentation:)(v47, v39);
  v110 = v39;
  swift_errorRelease(v45);
LABEL_23:
  v71 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  v72 = v115;
  (*(void (**)(char *, int *, void *))(v116 + 32))((char *)v46 + v71[7], v70, v115);
  v73 = String._bridgeToObjectiveC()();
  v74 = v114;
  v75 = objc_msgSend(v114, "objectForKeyedSubscript:", v73);

  if (v75)
  {
    v124 = v75;
    v76 = swift_dynamicCast(&v122, &v124, v112, &type metadata for Data, 6);
    if ((v76 & 1) != 0)
    {
      v113 = v71;
      v117 = v47;
      v78 = v122;
      v77 = v123;
      sub_10001BBBC(v122, v123);
      v79 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      v80 = sub_1003730E4();
      v81 = sub_100373128();
      v82 = sub_100059BCC();
      v83 = sub_100006204((unint64_t *)&unk_1010F97F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B208);
      v84 = sub_100006204(&qword_1011082F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B1E0);
      v85 = Dictionary<>.init(dataRepresentation:)(v78, v77, &type metadata for OwnedBeaconGroup.SerialNumber, v79, v80, v81, v82, v83, v84);
      v109 = v77;
      v86 = String._bridgeToObjectiveC()();
      v74 = v114;
      v87 = objc_msgSend(v114, "objectForKeyedSubscript:", v86);

      v72 = v115;
      v71 = v113;
      if (v87)
      {
        v122 = (uint64_t)v87;
        if ((swift_dynamicCast(&v124, &v122, v112, &type metadata for Bool, 6) & 1) != 0)
        {
          v108 = v124;
          v88 = String._bridgeToObjectiveC()();
          v89 = objc_msgSend(v74, "objectForKeyedSubscript:", v88);

          if (v89)
          {
            v124 = v89;
            if ((swift_dynamicCast(&v122, &v124, v112, &type metadata for String, 6) & 1) != 0)
            {
              v120 = v122;
              v116 = v123;
              v115 = objc_autoreleasePoolPush();
              v90 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
              objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v90);
              objc_msgSend(v90, "finishEncoding");
              v91 = objc_msgSend(v90, "encodedData");
              v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
              v112 = v93;

              objc_autoreleasePoolPop(v115);
              sub_10001BC14(v117, v110);
              sub_10001BC14(v78, v109);
              swift_unknownObjectRelease(v74);
              v95 = v118;
              v94 = v119;
              v96 = v112;
              *v118 = v92;
              v95[1] = v96;
              v111((char *)v95 + v71[6], v94, v121);
              *((_BYTE *)v95 + v71[8]) = v108;
              v97 = (uint64_t *)((char *)v95 + v71[9]);
              v98 = v116;
              *v97 = v120;
              v97[1] = v98;
              *(uint64_t *)((char *)v95 + v71[10]) = v85;
              return;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      v76 = sub_10001BC14(v78, v109);
      v47 = v117;
      v46 = v118;
    }
  }
  v99 = static os_log_type_t.error.getter(v76);
  v100 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v101 = swift_allocObject(v100, 72, 7);
  *(_OWORD *)(v101 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v101 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
  *(_QWORD *)(v101 + 64) = sub_100088600();
  *(_QWORD *)(v101 + 32) = a1;
  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v102 = a1;
  v103 = (void *)static OS_os_log.default.getter(v102);
  os_log(_:dso:log:_:_:)(v99, &_mh_execute_header, v103, "Invalid Beacon Group - %@", 25, 2, v101);
  swift_bridgeObjectRelease();

  v104 = sub_100373808();
  v105 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v104, 0, 0);
  *v106 = 6;
  swift_willThrow(v105);
  swift_unknownObjectRelease(v74);

  sub_10001BC14(v47, v110);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v119, v121);
  (*(void (**)(char *, void *))(v116 + 8))((char *)v46 + v71[7], v72);
}

uint64_t sub_10036A524(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  char v41;
  char *v42;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;

  v3 = v2;
  v6 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v6);
  v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF198);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v44 - v13;
  v15 = (uint64_t *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  v16 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    sub_10001BBBC(a1, a2);
    v17 = sub_100518E4C(a1, a2);
    if ((v18 & 1) != 0)
    {
      v19 = v17;
      v20 = *(_QWORD *)(v16 + 56);
      v21 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      v44[1] = v3;
      v22 = v8;
      v23 = *(_QWORD *)(v21 - 8);
      sub_10005972C(v20 + *(_QWORD *)(v23 + 72) * v19, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
      v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
      v8 = v22;
      v24(v14, 0, 1, v21);
    }
    else
    {
      v21 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
    }
    sub_10001BC14(a1, a2);
    type metadata accessor for OwnedBeaconGroup.PairingState(0);
    v26 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v21) != 1)
    {
      sub_100004048((uint64_t)v14, &qword_1010EF198);
      sub_10036B124(a1, a2, (uint64_t)v12);
      v39 = sub_1003692E4(a1, a2);
      v40 = sub_1003718CC(a1, a2);
      if (v40 == 3)
        v41 = 0;
      else
        v41 = v40;
      v42 = &v12[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48)];
      *v42 = v39;
      v42[1] = HIBYTE(v39) & 1;
      v42[2] = v41;
      swift_storeEnumTagMultiPayload(v12, v21, 0);
      v38 = 1;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v12, 0, 1, v21);
      sub_10001BBBC(a1, a2);
      sub_1000FE790((uint64_t)v12, a1, a2);
      return v38;
    }
  }
  else
  {
    v25 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 1, 1, v25);
  }
  sub_100004048((uint64_t)v14, &qword_1010EF198);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v27 = type metadata accessor for Logger(0);
  sub_10001A9E8(v27, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(a1, a2);
  v28 = sub_10001BBBC(a1, a2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    *(_DWORD *)v31 = 141558275;
    v45 = 1752392040;
    v46 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v33 = sub_10001BBBC(a1, a2);
    static String.Encoding.utf8.getter(v33);
    v34 = String.init(data:encoding:)(a1, a2, v8);
    if (!v35)
      v34 = Data.hexString.getter(a1, a2);
    v36 = v34;
    v37 = v35;
    sub_10001BC14(a1, a2);
    v45 = sub_100016940(v36, v37, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Invalid serial number: %{private,mask.hash}s. Unpair failed!", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);
  }

  return 0;
}

uint64_t sub_10036A9C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v28 - v15;
  v17 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(_QWORD *)(v17 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_7:
    sub_100004048((uint64_t)v9, &qword_1010EF198);
    v21 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a3, 1, 1, v21);
  }
  sub_10001BBBC(a1, a2);
  v18 = sub_100518E4C(a1, a2);
  if ((v19 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v11 + 72) * v18, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v20, 1, v10);
  sub_10001BC14(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    goto LABEL_7;
  sub_1000126EC((uint64_t)v9, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1000126EC((uint64_t)v16, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  if (swift_getEnumCaseMultiPayload(v14, v10) == 1)
  {
    v23 = sub_10001A9A8(&qword_1010F5DC0);
    v24 = (uint64_t)&v14[*(int *)(v23 + 48)];
    sub_10001EF3C(*(_QWORD *)&v14[*(int *)(v23 + 64)], *(_QWORD *)&v14[*(int *)(v23 + 64) + 8]);
    v25 = type metadata accessor for UUID(0);
    v26 = *(_QWORD *)(v25 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a3, v14, v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(a3, 0, 1, v25);
    return sub_100004048(v24, (uint64_t *)&unk_1010F9890);
  }
  else
  {
    v27 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a3, 1, 1, v27);
    return sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  }
}

void sub_10036AC6C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t (*v24)(uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t (*v43)(uint64_t);
  uint64_t *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;

  v64 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v62 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v2 = (char *)&v50 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v3 - 8);
  v61 = v3;
  v4 = __chkstk_darwin(v3);
  v59 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v58 = (uint64_t)&v50 - v7;
  __chkstk_darwin(v6);
  v57 = (char *)&v50 - v8;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)&v50 - v13;
  v67 = &_swiftEmptySetSingleton;
  v15 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  v16 = *(_QWORD *)(v15 + 64);
  v54 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v20 = (unint64_t)(v17 + 63) >> 6;
  v51 = v20 - 1;
  swift_bridgeObjectRetain(v15);
  v21 = 0;
  v55 = v20;
  v56 = v12;
  v63 = v22;
  v52 = v20 - 5;
  v53 = v22 + 104;
  v23 = (uint64_t *)&unk_1010F9880;
  v24 = type metadata accessor for OwnedBeaconGroup.PairingState;
  while (1)
  {
    if (v19)
    {
      v65 = (v19 - 1) & v19;
      v66 = v21;
      v25 = __clz(__rbit64(v19)) | (v21 << 6);
      goto LABEL_8;
    }
    v32 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v32 >= v55)
    {
      v34 = v21;
    }
    else
    {
      v33 = *(_QWORD *)(v54 + 8 * v32);
      if (v33)
        goto LABEL_12;
      v34 = v21 + 1;
      if ((uint64_t)(v21 + 2) < v55)
      {
        v33 = *(_QWORD *)(v54 + 8 * (v21 + 2));
        if (v33)
        {
          v32 = v21 + 2;
          goto LABEL_12;
        }
        v34 = v21 + 2;
        if ((uint64_t)(v21 + 3) < v55)
        {
          v33 = *(_QWORD *)(v54 + 8 * (v21 + 3));
          if (v33)
          {
            v32 = v21 + 3;
LABEL_12:
            v65 = (v33 - 1) & v33;
            v66 = v32;
            v25 = __clz(__rbit64(v33)) + (v32 << 6);
LABEL_8:
            v26 = *(_QWORD *)(v63 + 56);
            v27 = (uint64_t *)(*(_QWORD *)(v63 + 48) + 16 * v25);
            v28 = *v27;
            v29 = v27[1];
            *v12 = *v27;
            v12[1] = v29;
            v30 = v26 + *(_QWORD *)(v62 + 72) * v25;
            v31 = sub_10001A9A8(v23);
            sub_10005972C(v30, (uint64_t)v12 + *(int *)(v31 + 48), v24);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v12, 0, 1, v31);
            sub_10001BBBC(v28, v29);
            goto LABEL_15;
          }
          v32 = v21 + 4;
          v34 = v21 + 3;
          if ((uint64_t)(v21 + 4) < v55)
          {
            v33 = *(_QWORD *)(v54 + 8 * v32);
            if (v33)
              goto LABEL_12;
            while (v52 != v21)
            {
              v33 = *(_QWORD *)(v53 + 8 * v21++);
              if (v33)
              {
                v32 = v21 + 4;
                goto LABEL_12;
              }
            }
            v34 = v51;
          }
        }
      }
    }
    v35 = sub_10001A9A8(v23);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v12, 1, 1, v35);
    v65 = 0;
    v66 = v34;
LABEL_15:
    sub_100005CF0((uint64_t)v12, (uint64_t)v14, (uint64_t *)&unk_1010F7830);
    v36 = sub_10001A9A8(v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v14, 1, v36) == 1)
    {
      swift_release(v63);
      return;
    }
    sub_10001BC14(*(_QWORD *)v14, *((_QWORD *)v14 + 1));
    sub_1000126EC((uint64_t)&v14[*(int *)(v36 + 48)], (uint64_t)v2, v24);
    if (swift_getEnumCaseMultiPayload(v2, v64) == 1)
    {
      v37 = sub_10001A9A8(&qword_1010F5DC0);
      v38 = (uint64_t)&v2[*(int *)(v37 + 48)];
      sub_10001EF3C(*(_QWORD *)&v2[*(int *)(v37 + 64)], *(_QWORD *)&v2[*(int *)(v37 + 64) + 8]);
      v40 = v60;
      v39 = v61;
      v41 = v57;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v2, v61);
      sub_100004048(v38, (uint64_t *)&unk_1010F9890);
      v42 = v59;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v59, v41, v39);
      v43 = v24;
      v44 = v23;
      v45 = v14;
      v46 = v2;
      v47 = v58;
      sub_100A09F38(v58, v42);
      v48 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v49 = v47;
      v2 = v46;
      v14 = v45;
      v23 = v44;
      v24 = v43;
      v48(v49, v39);
      v12 = v56;
      v48((uint64_t)v41, v39);
    }
    else
    {
      sub_1000126B0((uint64_t)v2, v24);
    }
    v19 = v65;
    v21 = v66;
  }
  __break(1u);
}

uint64_t sub_10036B124@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v30 - v18;
  v20 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(_QWORD *)(v20 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
LABEL_7:
    sub_100004048((uint64_t)v12, &qword_1010EF198);
LABEL_8:
    v24 = type metadata accessor for MACAddress(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a3, 1, 1, v24);
  }
  sub_10001BBBC(a1, a2);
  v21 = sub_100518E4C(a1, a2);
  if ((v22 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v14 + 72) * v21, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v23, 1, v13);
  sub_10001BC14(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    goto LABEL_7;
  sub_1000126EC((uint64_t)v12, (uint64_t)v19, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1000126EC((uint64_t)v19, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup.PairingState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v13);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
      goto LABEL_8;
    v27 = sub_10001A9A8(&qword_1010F5DC0);
    v28 = (uint64_t)&v17[*(int *)(v27 + 48)];
    sub_10001EF3C(*(_QWORD *)&v17[*(int *)(v27 + 64)], *(_QWORD *)&v17[*(int *)(v27 + 64) + 8]);
    sub_100005CF0(v28, (uint64_t)v9, (uint64_t *)&unk_1010F9890);
    v29 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v17, v29);
  }
  else
  {
    sub_100005CF0((uint64_t)v17, (uint64_t)v9, (uint64_t *)&unk_1010F9890);
  }
  return sub_100005CF0((uint64_t)v9, a3, (uint64_t *)&unk_1010F9890);
}

void sub_10036B3DC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10036B414(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (__OFSUB__(20, BYTE6(a2)))
  {
    __break(1u);
    JUMPOUT(0x10036B4A0);
  }
  v6 = sub_10060C584(20 - BYTE6(a2));
  v7 = v2;
  sub_10051EB40((uint64_t)&v6);
  v3 = v6;
  v4 = v7;
  Data.append(_:)(v6, v7);
  sub_10001BC14(v3, v4);
  return v8;
}

unint64_t sub_10036B4C0(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  char v3;

  result = *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(a1 + 40)) + 16);
  if (result >= 0x100)
  {
    v3 = 2;
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v3, 3455, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10036B534(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10036B56C + 4 * byte_100E3A8F0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_10036B56C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_10036B584()
{
  return 0x696669746E656469;
}

uint64_t sub_10036B5A0(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_10036B5B8()
{
  return 1701667182;
}

uint64_t sub_10036B5C8()
{
  return 0x657264644163616DLL;
}

uint64_t sub_10036B5E8()
{
  return 0x614D6E6F63616562;
}

uint64_t sub_10036B604(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10036B63C + 4 * byte_100E3A8F7[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_10036B63C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_10036B654()
{
  return 0x696669746E656469;
}

uint64_t sub_10036B670(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_10036B688()
{
  return 1701667182;
}

uint64_t sub_10036B698()
{
  return 0x657264644163616DLL;
}

uint64_t sub_10036B6B8()
{
  return 0x614D6E6F63616562;
}

Swift::Int sub_10036B6D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_10036B74C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_10036B7B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

void sub_10036B828(char *a1)
{
  sub_100514298(*a1);
}

void sub_10036B834()
{
  char *v0;

  sub_100516C1C(0, *v0);
}

void sub_10036B840(uint64_t a1)
{
  char *v1;

  sub_100515C9C(a1, *v1);
}

void sub_10036B848(uint64_t a1)
{
  char *v1;

  sub_100516C1C(a1, *v1);
}

unint64_t sub_10036B850@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003744D4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10036B87C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10036B534(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10036B8A4()
{
  unsigned __int8 *v0;

  return sub_10036B604(*v0);
}

unint64_t sub_10036B8AC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003744D4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10036B8D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100373634();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036B8F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100373634();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10036B920(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_10001A9A8((uint64_t *)&unk_1010F98F0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_100374640();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10036BA24(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  _BYTE v16[2];
  char v17;

  v5 = sub_10001A9A8(&qword_1010F9B20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100376674();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys, v11, v9, v10);
  v17 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2 & 0x1FF, &v17, v5);
  if (!v2)
  {
    v16[0] = BYTE2(a2);
    v15 = 1;
    v12 = sub_100375D54();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v15, v5, &type metadata for PairingTransportType, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10036BB50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100374640();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036BB78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100374640();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10036BBA0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_10037451C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10036BBC8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10036B920(a1, *v1, v1[1]);
}

unint64_t sub_10036BBE4()
{
  unint64_t result;

  result = qword_1010F97B8;
  if (!qword_1010F97B8)
  {
    result = swift_getWitnessTable("ad#", &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1010F97B8);
  }
  return result;
}

uint64_t sub_10036BC28()
{
  return sub_100006204((unint64_t *)&unk_1010F97C0, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3AAD0);
}

uint64_t sub_10036BC54()
{
  _BYTE *v0;

  if (*v0)
    return 0x54676E6972696170;
  else
    return 0x644974726170;
}

uint64_t sub_10036BC94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100375DDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036BCB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100376674();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036BCE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100376674();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10036BD08@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100375EDC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result);
  }
  return result;
}

uint64_t sub_10036BD40(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_10036BA24(a1, *v1 | (v1[2] << 16) | (v1[1] << 8));
}

BOOL sub_10036BD70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10037384C(*a1 | (a1[2] << 16) | (a1[1] << 8), *a2 | (a2[2] << 16) | (a2[1] << 8));
}

uint64_t sub_10036BDA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t *v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE v84[12];
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98[2];
  _QWORD v99[3];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v95 = a2;
  v96 = type metadata accessor for UUID(0);
  v94 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v4 = &v84[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v6 = __chkstk_darwin(v5);
  v8 = &v84[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v84[-v9];
  v11 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v11);
  v13 = &v84[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v15);
  v16 = v97;
  dispatch thunk of Decoder.unkeyedContainer()(v99, v15, v14);
  if (!v16)
  {
    v92 = v13;
    v93 = (uint64_t)v10;
    v89 = v8;
    v90 = v4;
    v97 = a1;
    v17 = v96;
    v91 = v11;
    v18 = v100;
    v19 = v101;
    sub_10009F5D0((uint64_t)v99, v100);
    v20 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v18, v19);
    v24 = v20;
    v25 = v21;
    if (v20 == 117 && v21 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      v26 = v93;
LABEL_10:
      v28 = type metadata accessor for MACAddress(0);
      v29 = v100;
      v30 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v31 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(v28, v28, v31, v29, v30);
      v32 = v97;
      v33 = v100;
      v34 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v35 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v33, v34);
      LOBYTE(v34) = v35;
      v36 = (v35 >> 8) & 1;
      v37 = v100;
      v38 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v39 = sub_100375D10();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(&type metadata for PairingTransportType, &type metadata for PairingTransportType, v39, v37, v38);
      v40 = v98[0];
      v41 = (uint64_t)v92;
      v42 = (_BYTE *)(v41 + *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48));
      sub_100005CF0(v26, v41, (uint64_t *)&unk_1010F9890);
      v43 = 0;
      *v42 = v34;
      v42[1] = v36;
      v42[2] = v40;
LABEL_11:
      v44 = v95;
      v45 = v91;
LABEL_12:
      swift_storeEnumTagMultiPayload(v41, v45, v43);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v99);
      sub_1000126EC(v41, v44, type metadata accessor for OwnedBeaconGroup.PairingState);
      v22 = v32;
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
    }
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(117, 0xE100000000000000, v20, v21, 0);
    v26 = v93;
    if ((v27 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    if (v24 == 112 && v25 == 0xE100000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)(112, 0xE100000000000000, v24, v25, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v46 = v100;
      v47 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v48 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v17, v17, v48, v46, v47);
      v49 = type metadata accessor for MACAddress(0);
      v50 = v100;
      v51 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v52 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(v49, v49, v52, v50, v51);
      v53 = v100;
      v54 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v55 = sub_100036994();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(&type metadata for Data, &type metadata for Data, v55, v53, v54);
      v93 = v98[0];
      v88 = v98[1];
      v57 = v100;
      v58 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v59 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v57, v58);
      v32 = v97;
      v60 = v59;
      v87 = v61 & 1;
      v62 = v100;
      v63 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v64 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)(v62, v63);
      v65 = v64;
      v86 = (v64 >> 8) & 1;
      v67 = v100;
      v66 = v101;
      sub_10009F5D0((uint64_t)v99, v100);
      v68 = sub_100375D10();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(&type metadata for PairingTransportType, &type metadata for PairingTransportType, v68, v67, v66);
      v85 = LOBYTE(v98[0]);
      v69 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v41 = (uint64_t)v92;
      v70 = (uint64_t)&v92[v69[12]];
      v71 = (uint64_t *)&v92[v69[16]];
      v72 = &v92[v69[20]];
      v73 = &v92[v69[24]];
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v94 + 32))(v92, v90, v96);
      sub_100005CF0((uint64_t)v89, v70, (uint64_t *)&unk_1010F9890);
      v74 = v88;
      *v71 = v93;
      v71[1] = v74;
      *(_QWORD *)v72 = v60;
      v72[8] = v87;
      *v73 = v65;
      v73[1] = v86;
      v43 = 1;
      v73[2] = v85;
      goto LABEL_11;
    }
    if (v24 == 108 && v25 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      v43 = 2;
      v44 = v95;
      v45 = v91;
      v41 = (uint64_t)v92;
      v32 = v97;
      goto LABEL_12;
    }
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)(108, 0xE100000000000000, v24, v25, 0);
    v44 = v95;
    v45 = v91;
    v41 = (uint64_t)v92;
    v32 = v97;
    if ((v56 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v43 = 2;
      goto LABEL_12;
    }
    if (qword_1010E9AE0 != -1)
      swift_once(&qword_1010E9AE0, sub_100265974);
    v75 = type metadata accessor for Logger(0);
    sub_10001A9E8(v75, (uint64_t)qword_1011B6C50);
    swift_bridgeObjectRetain(v25);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.error.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v98[0] = v80;
      *(_DWORD *)v79 = 136446210;
      swift_bridgeObjectRetain(v25);
      v102 = sub_100016940(v24, v25, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Unhandled type code: %{public}s", v79, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v79, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v25, 2);
    }
    v81 = sub_100373808();
    v82 = swift_allocError(&type metadata for OwnedBeaconGroup.BeaconGroupConversionError, v81, 0, 0);
    *v83 = 6;
    swift_willThrow(v82);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v99);
    a1 = v97;
  }
  v22 = a1;
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
}

uint64_t sub_10036C678(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  int *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned __int8 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[2];
  _QWORD v104[3];
  uint64_t v105;
  uint64_t v106;
  char *v107;

  v98 = type metadata accessor for UUID(0);
  v100 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v99 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MACAddress(0);
  v96 = *(_QWORD *)(v3 - 8);
  v97 = v3;
  v4 = __chkstk_darwin(v3);
  v94 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v89 - v6;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v9 = __chkstk_darwin(v8);
  v95 = (uint64_t)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v101 = (uint64_t)&v89 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v89 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v89 - v16;
  v18 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v21 = a1[4];
  sub_10001AA44(a1, v22);
  dispatch thunk of Encoder.unkeyedContainer()(v104, v22, v21);
  sub_10005972C((uint64_t)v107, (uint64_t)v20, type metadata accessor for OwnedBeaconGroup.PairingState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v18);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v24 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v25 = (uint64_t)&v20[v24[12]];
      v26 = (uint64_t *)&v20[v24[16]];
      v28 = *v26;
      v27 = v26[1];
      v29 = &v20[v24[20]];
      v90 = *(_QWORD *)v29;
      v30 = v29[8];
      v31 = &v20[v24[24]];
      v93 = *v31;
      v32 = v31[1];
      v91 = v30;
      v92 = v32;
      LODWORD(v107) = v31[2];
      v33 = v99;
      v34 = v100;
      v35 = v20;
      v36 = v98;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v99, v35, v98);
      v37 = v101;
      sub_100005CF0(v25, v101, (uint64_t *)&unk_1010F9890);
      v38 = v105;
      v39 = v106;
      sub_10009F5D0((uint64_t)v104, v105);
      v40 = v102;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(112, 0xE100000000000000, v38, v39);
      if (v40)
      {
        sub_10001EF3C(v28, v27);
        sub_100004048(v37, (uint64_t *)&unk_1010F9890);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v36);
      }
      else
      {
        v50 = v27;
        v51 = v33;
        v52 = v105;
        v53 = v106;
        sub_10009F5D0((uint64_t)v104, v105);
        v54 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v51, v36, v54, v52, v53);
        v60 = v95;
        sub_100035464(v101, v95);
        v61 = v96;
        v62 = v97;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v60, 1, v97) == 1)
        {
          sub_100004048(v60, (uint64_t *)&unk_1010F9890);
        }
        else
        {
          v70 = v94;
          (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v94, v60, v62);
          v71 = v105;
          v102 = v106;
          sub_10009F5D0((uint64_t)v104, v105);
          v72 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v70, v62, v72, v71, v102);
          (*(void (**)(char *, uint64_t))(v61 + 8))(v70, v62);
        }
        v73 = v28;
        v74 = (int)v107;
        v75 = v93;
        if (v50 >> 60 != 15)
        {
          v103[0] = v73;
          v103[1] = v50;
          v76 = v105;
          v77 = v106;
          sub_10009F5D0((uint64_t)v104, v105);
          v78 = sub_100036A58();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v103, &type metadata for Data, v78, v76, v77);
        }
        v79 = v92;
        if ((v91 & 1) == 0)
        {
          v80 = v105;
          v81 = v106;
          sub_10009F5D0((uint64_t)v104, v105);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v90, v80, v81);
          v79 = v92;
        }
        if ((v79 & 1) == 0)
        {
          v82 = v105;
          v83 = v106;
          sub_10009F5D0((uint64_t)v104, v105);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v75, v82, v83);
        }
        v84 = v101;
        if (v74 != 3)
        {
          LOBYTE(v103[0]) = v74;
          v85 = v105;
          v86 = v106;
          sub_10009F5D0((uint64_t)v104, v105);
          v87 = sub_100375D54();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v103, &type metadata for PairingTransportType, v87, v85, v86);
        }
        sub_10001EF3C(v73, v50);
        sub_100004048(v84, (uint64_t *)&unk_1010F9890);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v36);
      }
    }
    else
    {
      v48 = v105;
      v49 = v106;
      sub_10009F5D0((uint64_t)v104, v105);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(108, 0xE100000000000000, v48, v49);
    }
  }
  else
  {
    v41 = &v20[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48)];
    v42 = *v41;
    v43 = v41[1];
    v44 = v41[2];
    sub_100005CF0((uint64_t)v20, (uint64_t)v17, (uint64_t *)&unk_1010F9890);
    v45 = v105;
    v46 = v106;
    sub_10009F5D0((uint64_t)v104, v105);
    v47 = v102;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(117, 0xE100000000000000, v45, v46);
    if (v47)
    {
      sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010F9890);
    }
    else
    {
      LODWORD(v102) = v44;
      v107 = v17;
      sub_100035464((uint64_t)v17, (uint64_t)v15);
      v55 = v96;
      v56 = v97;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v15, 1, v97) == 1)
      {
        sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010F9890);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v7, v15, v56);
        v57 = v105;
        v58 = v106;
        sub_10009F5D0((uint64_t)v104, v105);
        v59 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v7, v56, v59, v57, v58);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v56);
      }
      v63 = (uint64_t)v107;
      v64 = v102;
      if ((v43 & 1) == 0)
      {
        v65 = v105;
        v66 = v106;
        sub_10009F5D0((uint64_t)v104, v105);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v42, v65, v66);
      }
      if (v64 != 3)
      {
        LOBYTE(v103[0]) = v64;
        v67 = v105;
        v68 = v106;
        sub_10009F5D0((uint64_t)v104, v105);
        v69 = sub_100375D54();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v103, &type metadata for PairingTransportType, v69, v67, v68);
      }
      sub_100004048(v63, (uint64_t *)&unk_1010F9890);
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v104);
}

uint64_t sub_10036CEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t (*v20)(_QWORD);
  int EnumCaseMultiPayload;
  int *v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned __int8 *v25;
  int v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  Swift::String v49;
  Swift::String v50;
  char v51;
  Swift::String v52;
  Swift::String v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  char v57;
  Swift::String v58;
  Swift::String v59;
  _BYTE v61[12];
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v61[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v6 = __chkstk_darwin(v5);
  v8 = &v61[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v6);
  v11 = &v61[-v10];
  v12 = __chkstk_darwin(v9);
  v14 = &v61[-v13];
  __chkstk_darwin(v12);
  v16 = &v61[-v15];
  v17 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v17);
  v19 = &v61[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005972C(v0, (uint64_t)v19, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v17);
  if (!EnumCaseMultiPayload)
  {
    v36 = &v19[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48)];
    v37 = *v36;
    v38 = v36[1];
    v39 = v36[2];
    sub_100005CF0((uint64_t)v19, (uint64_t)v16, (uint64_t *)&unk_1010F9890);
    v68 = 0;
    v69 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v68 = 0x6465726961706E75;
    v69 = 0xE900000000000028;
    sub_100035464((uint64_t)v16, (uint64_t)v14);
    v40 = type metadata accessor for MACAddress(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v14, 1, v40);
    if ((_DWORD)v42 == 1)
    {
      sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010F9890);
      v43 = 0;
      v44 = (void *)0xE000000000000000;
    }
    else
    {
      v43 = MACAddress.description.getter(v42);
      v44 = v54;
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v14, v40);
    }
    v55._countAndFlagsBits = v43;
    v55._object = v44;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 0x3A64497472617020;
    v56._object = (void *)0xE900000000000020;
    String.append(_:)(v56);
    if (v38)
      v57 = -1;
    else
      v57 = v37;
    LOBYTE(v67) = v57;
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 0x676E697269617020;
    v59._object = (void *)0xEE00203A65707954;
    String.append(_:)(v59);
    __asm { BR              X9 }
  }
  if (EnumCaseMultiPayload == 1)
  {
    v22 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v23 = (uint64_t)&v19[v22[12]];
    sub_10001EF3C(*(_QWORD *)&v19[v22[16]], *(_QWORD *)&v19[v22[16] + 8]);
    v24 = &v19[v22[20]];
    v63 = *(_QWORD *)v24;
    v62 = v24[8];
    v25 = &v19[v22[24]];
    v26 = *v25;
    v64 = v25[1];
    v65 = v26;
    v66 = v25[2];
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v19, v1);
    sub_100005CF0(v23, (uint64_t)v11, (uint64_t *)&unk_1010F9890);
    v68 = 0;
    v69 = 0xE000000000000000;
    _StringGuts.grow(_:)(58);
    v27._countAndFlagsBits = 0x28646572696170;
    v27._object = (void *)0xE700000000000000;
    String.append(_:)(v27);
    v29._countAndFlagsBits = UUID.uuidString.getter(v28);
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 8236;
    v30._object = (void *)0xE200000000000000;
    String.append(_:)(v30);
    sub_100035464((uint64_t)v11, (uint64_t)v8);
    v31 = type metadata accessor for MACAddress(0);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v8, 1, v31);
    if ((_DWORD)v33 == 1)
    {
      sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F9890);
      v34 = 0;
      v35 = (void *)0xE000000000000000;
    }
    else
    {
      v34 = MACAddress.description.getter(v33);
      v35 = v45;
      (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v8, v31);
    }
    v46._countAndFlagsBits = v34;
    v46._object = v35;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._object = (void *)0x8000000100ED2920;
    v47._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v47);
    v48 = v63;
    if (v62)
      v48 = 0;
    v67 = v48;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 0x3A64497472617020;
    v50._object = (void *)0xE900000000000020;
    String.append(_:)(v50);
    v51 = v65;
    if (v64)
      v51 = -1;
    LOBYTE(v67) = v51;
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 0x676E697269617020;
    v53._object = (void *)0xEE00203A65707954;
    String.append(_:)(v53);
    __asm { BR              X9 }
  }
  return 0x64656B636F6CLL;
}

uint64_t sub_10036D520(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9AA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100375D98();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys, &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 8);
  v21 = *v3;
  v22 = v12;
  v20 = 0;
  v13 = sub_100373740();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for OwnedBeaconGroup.Version, v13);
  if (!v2)
  {
    v14 = (uint64_t)v3 + *(int *)(type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for MACAddress(0);
    v16 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10036D694@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  v26 = a2;
  v29 = type metadata accessor for MACAddress(0);
  v27 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v28 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A9A8(&qword_1010F9B08);
  v5 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100375D98();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys, &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys, v13, v12, v11);
  if (!v2)
  {
    v24 = v8;
    v25 = v5;
    v14 = (uint64_t)v10;
    v16 = v28;
    v15 = v29;
    v34 = 0;
    v17 = sub_100373678();
    v18 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for OwnedBeaconGroup.Version, &v34, v30, &type metadata for OwnedBeaconGroup.Version, v17);
    v19 = v32;
    *(_QWORD *)v14 = v31;
    *(_BYTE *)(v14 + 8) = v19;
    v33 = 1;
    v20 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v33, v18, v15, v20);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v18);
    v21 = v26;
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v27 + 32))(v14 + *(int *)(v24 + 20), v16, v15);
    sub_1000126EC(v14, v21, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_10036D8F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10036BDA4(a1, a2);
}

uint64_t sub_10036D908(_QWORD *a1)
{
  return sub_10036C678(a1);
}

uint64_t sub_10036D920()
{
  _BYTE *v0;

  if (*v0)
    return 0x657264644163616DLL;
  else
    return 0x6E6F6973726576;
}

uint64_t sub_10036D960@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10037604C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036D984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100375D98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036D9AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100375D98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10036D9D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10036D694(a1, a2);
}

uint64_t sub_10036D9E8(_QWORD *a1)
{
  return sub_10036D520(a1);
}

uint64_t sub_10036D9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  return static MACAddress.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
}

uint64_t sub_10036DA3C(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;

  v26 = a3;
  v23 = a2;
  v24 = sub_10001A9A8(&qword_1010F9AF0);
  v22 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F9AF8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F9B00);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v13);
  v15 = sub_1003765A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.Version.CodingKeys, &type metadata for OwnedBeaconGroup.Version.CodingKeys, v15, v13, v14);
  if ((v26 & 1) != 0)
  {
    v27 = 0;
    v20 = sub_100376630();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys, &v27, v10, &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys, v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v28 = 1;
    v16 = sub_1003765EC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys, &v28, v10, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys, v16);
    v17 = v24;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v18, v24);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
}

uint64_t sub_10036DC54()
{
  _BYTE *v0;

  if (*v0)
    return 0x656E6F6973726576;
  else
    return 0x79636167656CLL;
}

uint64_t sub_10036DC90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100376148(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10036DCB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003765A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036DCDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003765A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10036DD04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100376630();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036DD2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100376630();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10036DD54()
{
  return 0x6E6F6973726576;
}

uint64_t sub_10036DD6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10036DE00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003765EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10036DE28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003765EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10036DE50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  char v5;

  result = sub_10037623C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_10036DE80(_QWORD *a1)
{
  uint64_t v1;

  return sub_10036DA3C(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
}

Swift::Int sub_10036DE9C()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v5);
  v3 = 0;
  if ((v2 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    v3 = v1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10036DEF8()
{
  uint64_t v0;
  Swift::UInt v1;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v1 = *(_QWORD *)v0;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10036DF3C()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4);
  if ((v2 & 1) != 0)
    v1 = 0;
  else
    Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10036DF98()
{
  uint64_t v0;
  Swift::String v2;
  void *object;
  Swift::String v4;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return 0x79636167656C2ELL;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x6E6F69737265762ELL;
}

BOOL sub_10036E040(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 8) == 1)
    return (*(_BYTE *)(a2 + 8) & 1) != 0;
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  return *(_QWORD *)a1 == *(_QWORD *)a2;
}

void sub_10036E07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6DE0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6DE0);
  v5 = objc_autoreleasePoolPush();
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100ED28B0, 1);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  objc_autoreleasePoolPop(v5);
}

uint64_t sub_10036E15C(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t ObjectType;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  char v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  int *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  id v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  void *v83;

  v2 = v1;
  v4 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.debug.getter(v5);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  v11 = *a1;
  v12 = objc_msgSend(v11, "description");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v15;
  v16 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v17 = (void *)static OS_os_log.default.getter(v16);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v17, "Updating beacon group: %@", 25, 2, v10);
  swift_bridgeObjectRelease();

  v18 = objc_msgSend(v11, "encryptedValues");
  ObjectType = swift_getObjectType(v18);
  v20 = *(unsigned __int8 *)(v2 + 24);
  v79 = ObjectType;
  if (v20 != 1)
  {
    v28 = *(_QWORD *)(v2 + 16);
    if (v28 != 1)
    {
      if (qword_1010E9AE0 != -1)
        swift_once(&qword_1010E9AE0, sub_100265974);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B6C50);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.fault.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v45 = 134217984;
        v80 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v45 + 4, v45 + 12);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unexpected OwnedBeaconGroup version: %ld!", v45, 0xCu);
        swift_slowDealloc(v45, -1, -1);
      }

      ObjectType = v79;
      goto LABEL_17;
    }
    v29 = v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 28);
    v30 = &v7[*(int *)(v4 + 20)];
    v31 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v30, v29, v31);
    *(_QWORD *)v7 = 1;
    v7[8] = 0;
    v32 = sub_10036E978();
    v34 = v33;
    sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    CKRecordKeyValueSetting.subscript.getter(&v80, 0x657264644163616DLL, 0xEA00000000007373, ObjectType, &type metadata for Data);
    v35 = v80;
    v36 = v81;
    sub_10001BBBC(v32, v34);
    if (v36 >> 60 == 15)
    {
      sub_10001EF3C(v35, v36);
      sub_10001EF3C(v32, v34);
    }
    else
    {
      sub_10001BD08(v35, v36);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v35, v36);
      v47 = v46;
      sub_10001BC14(v32, v34);
      sub_10001EF3C(v35, v36);
      sub_10001EF3C(v35, v36);
      if ((v47 & 1) != 0)
      {
LABEL_16:
        sub_10001BC14(v32, v34);
        goto LABEL_17;
      }
    }
    v82 = &type metadata for Data;
    v83 = &protocol witness table for Data;
    v80 = v32;
    v81 = v34;
    sub_10001BBBC(v32, v34);
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x657264644163616DLL, 0xEA00000000007373, ObjectType);
    goto LABEL_16;
  }
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x657264644163616DLL, 0xEA00000000007373, ObjectType, &type metadata for Data);
  v21 = v80;
  v22 = v81;
  v23 = type metadata accessor for OwnedBeaconGroup(0);
  v24 = MACAddress.dataRepresentation.getter(v23);
  v26 = v25;
  if (v22 >> 60 == 15)
  {
    sub_10001EF3C(v21, v22);
    v27 = sub_10001EF3C(v24, v26);
    ObjectType = v79;
  }
  else
  {
    sub_10001BD08(v21, v22);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v21, v22);
    v38 = v37;
    sub_10001BC14(v24, v26);
    sub_10001EF3C(v21, v22);
    v27 = sub_10001EF3C(v21, v22);
    ObjectType = v79;
    if ((v38 & 1) != 0)
      goto LABEL_17;
  }
  v39 = MACAddress.dataRepresentation.getter(v27);
  v82 = &type metadata for Data;
  v83 = &protocol witness table for Data;
  v80 = v39;
  v81 = v40;
  CKRecordKeyValueSetting.subscript.setter(&v80, 0x657264644163616DLL, 0xEA00000000007373, ObjectType);
LABEL_17:
  CKRecordKeyValueSetting.subscript.getter(&v80, 1701667182, 0xE400000000000000, ObjectType, &type metadata for String);
  v48 = v80;
  v49 = v81;
  v50 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  v51 = (uint64_t *)(v2 + v50[9]);
  v53 = *v51;
  v52 = v51[1];
  if (!v49)
    goto LABEL_22;
  if (v48 != v53 || v49 != v52)
  {
    v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, *v51, v51[1], 0);
    swift_bridgeObjectRelease();
    if ((v54 & 1) != 0)
      goto LABEL_23;
LABEL_22:
    v82 = &type metadata for String;
    v83 = &protocol witness table for String;
    v80 = v53;
    v81 = v52;
    swift_bridgeObjectRetain(v52);
    CKRecordKeyValueSetting.subscript.setter(&v80, 1701667182, 0xE400000000000000, ObjectType);
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
LABEL_23:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x616E454E4D467369, 0xEC00000064656C62, ObjectType, &type metadata for Bool);
  v55 = *(unsigned __int8 *)(v2 + v50[8]);
  if (v80 == 2 || ((v55 ^ v80) & 1) != 0)
  {
    v82 = &type metadata for Bool;
    v83 = &protocol witness table for Bool;
    LOBYTE(v80) = v55;
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x616E454E4D467369, 0xEC00000064656C62, ObjectType);
  }
  v78 = v18;
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x614D6E6F63616562, 0xE900000000000070, ObjectType, &type metadata for Data);
  v57 = v80;
  v56 = v81;
  v58 = *(_QWORD *)(v2 + v50[10]);
  v59 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v60 = sub_1003730E4();
  v61 = sub_100373128();
  v62 = sub_100059BCC();
  v63 = sub_100006204((unint64_t *)&unk_1010F97F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B208);
  v64 = sub_100006204(&qword_1011082F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B1E0);
  v76 = v59;
  v77 = v58;
  v65 = Dictionary<>.dataRepresentation.getter(v58, &type metadata for OwnedBeaconGroup.SerialNumber, v59, v60, v61, v62, v63, v64);
  v67 = v66;
  if (v56 >> 60 == 15)
  {
    sub_10001EF3C(v57, v56);
    sub_10001EF3C(v65, v67);
LABEL_30:
    v71 = Dictionary<>.dataRepresentation.getter(v77, &type metadata for OwnedBeaconGroup.SerialNumber, v76, v60, v61, v62, v63, v64);
    v82 = &type metadata for Data;
    v83 = &protocol witness table for Data;
    v80 = v71;
    v81 = v72;
    v73 = v78;
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x614D6E6F63616562, 0xE900000000000070, v79);
    v70 = v73;
    return swift_unknownObjectRelease(v70);
  }
  sub_10001BD08(v57, v56);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v57, v56);
  v69 = v68;
  sub_10001BC14(v65, v67);
  sub_10001EF3C(v57, v56);
  sub_10001EF3C(v57, v56);
  if ((v69 & 1) == 0)
    goto LABEL_30;
  v70 = v78;
  return swift_unknownObjectRelease(v70);
}

uint64_t sub_10036E978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = JSONEncoder.init()();
  v5 = sub_100006204((unint64_t *)&unk_1010F9800, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress, (uint64_t)&unk_100E3B1B8);
  v6 = dispatch thunk of JSONEncoder.encode<A>(_:)(v1, v2, v5);
  swift_release(v4);
  return v6;
}

uint64_t sub_10036EB5C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  char v30;
  __int128 v31;

  v3 = v1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F9840);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100373634();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.CodingKeys, &type metadata for OwnedBeaconGroup.CodingKeys, v11, v9, v10);
  v31 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = *((_BYTE *)v3 + 24);
    *(_QWORD *)&v31 = *((_QWORD *)v3 + 2);
    BYTE8(v31) = v13;
    v30 = 1;
    v14 = sub_100373740();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for OwnedBeaconGroup.Version, v14);
    v15 = (int *)type metadata accessor for OwnedBeaconGroup(0);
    v16 = (uint64_t)v3 + v15[6];
    LOBYTE(v31) = 2;
    v17 = type metadata accessor for UUID(0);
    v18 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v31, v5, v17, v18);
    v19 = *((unsigned __int8 *)v3 + v15[8]);
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v31, v5);
    v20 = (uint64_t *)((char *)v3 + v15[9]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v31) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v31, v5);
    v23 = (uint64_t)v3 + v15[7];
    LOBYTE(v31) = 5;
    v24 = type metadata accessor for MACAddress(0);
    v25 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v31, v5, v24, v25);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v15[10]);
    v30 = 6;
    v26 = sub_10001A9A8(&qword_1010F9830);
    v27 = sub_100373784();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, v26, v27);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10036EE20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  __int128 v44;
  char v45;

  v35 = a2;
  v39 = type metadata accessor for MACAddress(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v36 = (uint64_t *)((char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_10001A9A8(&qword_1010F9810);
  v7 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v42 = a1;
  sub_10001AA44(a1, v14);
  v15 = sub_100373634();
  v41 = v9;
  v16 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.CodingKeys, &type metadata for OwnedBeaconGroup.CodingKeys, v15, v14, v13);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  v43 = v6;
  v34 = v7;
  v17 = (uint64_t)v12;
  v18 = v38;
  v19 = v39;
  v45 = 0;
  v20 = sub_100036994();
  v21 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for Data, &v45, v40, &type metadata for Data, v20);
  *(_OWORD *)v17 = v44;
  v45 = 1;
  v22 = sub_100373678();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for OwnedBeaconGroup.Version, &v45, v21, &type metadata for OwnedBeaconGroup.Version, v22);
  v23 = BYTE8(v44);
  *(_QWORD *)(v17 + 16) = v44;
  *(_BYTE *)(v17 + 24) = v23;
  LOBYTE(v44) = 2;
  v24 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v25 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v18, &v44, v21, v18, v24);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v17 + v10[6], v25, v18);
  LOBYTE(v44) = 3;
  *(_BYTE *)(v17 + v10[8]) = KeyedDecodingContainer.decode(_:forKey:)(&v44, v21) & 1;
  LOBYTE(v44) = 4;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v21);
  v27 = (uint64_t *)(v17 + v10[9]);
  *v27 = v26;
  v27[1] = v28;
  LOBYTE(v44) = 5;
  v29 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v30 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v19, &v44, v21, v19, v29);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v37 + 32))(v17 + v10[7], v30, v19);
  v31 = sub_10001A9A8(&qword_1010F9830);
  v45 = 6;
  v32 = sub_1003736BC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v31, &v45, v21, v31, v32);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v21);
  *(_QWORD *)(v17 + v10[10]) = v44;
  sub_10005972C(v17, v35, type metadata accessor for OwnedBeaconGroup);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return sub_1000126B0(v17, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_10036F328@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10036EE20(a1, a2);
}

uint64_t sub_10036F33C(_QWORD *a1)
{
  return sub_10036EB5C(a1);
}

uint64_t sub_10036F350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;

  v1 = v0;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for OwnedBeaconGroup(0);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x3A63616D20;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  v7 = type metadata accessor for MACAddress(0);
  v8 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x4D6E6F6361656220;
  v10._object = (void *)0xEB000000003A7061;
  String.append(_:)(v10);
  v11 = *(_QWORD *)(v0 + *(int *)(v2 + 40));
  v12 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v13 = sub_100059BCC();
  swift_bridgeObjectRetain(v11);
  v15._countAndFlagsBits = Dictionary.description.getter(v14, &type metadata for OwnedBeaconGroup.SerialNumber, v12, v13);
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x3A736E6D6620;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  if (*(_BYTE *)(v1 + *(int *)(v2 + 32)))
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if (*(_BYTE *)(v1 + *(int *)(v2 + 32)))
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x203A6469647520;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  v22._countAndFlagsBits = MACAddress.udid.getter(v21);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 62;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  return 979659068;
}

uint64_t sub_10036F59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  _QWORD *v17;

  v1 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v16 - v6;
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v8 + 40)));
  v10 = sub_100508A58(v9);
  swift_bridgeObjectRelease();
  v11 = v10[2];
  if (v11)
  {
    v12 = (uint64_t)v10 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v13 = *(_QWORD *)(v2 + 72);
    v17 = v10;
    swift_retain();
    do
    {
      sub_10005972C(v12, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_10005972C((uint64_t)v7, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
      if (swift_getEnumCaseMultiPayload(v5, v1))
      {
        sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
      }
      else
      {
        v14 = v5[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48) + 2];
        sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F9890);
        sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
        if (v14 == 2)
        {
          swift_release_n(v17, 2);
          return 1;
        }
      }
      v12 += v13;
      --v11;
    }
    while (v11);
    swift_release_n(v17, 2);
  }
  else
  {
    swift_release(v10);
  }
  return 0;
}

uint64_t sub_10036F750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  _QWORD *v24;
  char *v25;

  v1 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v24 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v24 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v14 + 40)));
  v16 = sub_100508A58(v15);
  swift_bridgeObjectRelease();
  v17 = v16[2];
  if (!v17)
  {
    swift_release();
    return 1;
  }
  v18 = (uint64_t)v16 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v24 = v16;
  v25 = v11 + 2;
  v19 = *(_QWORD *)(v2 + 72);
  swift_retain();
  while (1)
  {
    sub_10005972C(v18, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload(v11, v1))
    {
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_10005972C((uint64_t)v13, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
      goto LABEL_6;
    }
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
    v21 = v25[*(int *)(v20 + 48)];
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F9890);
    sub_10005972C((uint64_t)v13, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v21 == 1)
      break;
LABEL_6:
    swift_storeEnumTagMultiPayload(v5, v1, 2);
    v22 = sub_1003739B0((uint64_t)v8, (uint64_t)v5);
    sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
    if ((v22 & 1) != 0)
      goto LABEL_12;
    v18 += v19;
    if (!--v17)
    {
      swift_release_n(v24, 2);
      return 1;
    }
  }
  sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
LABEL_12:
  swift_release_n(v24, 2);
  return 0;
}

uint64_t sub_10036F9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 40)));
  v3 = sub_10037316C(v2);
  swift_bridgeObjectRelease();
  v4 = sub_100369558(v3);
  swift_release();
  return v4;
}

uint64_t sub_10036FA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  int v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  int v63;
  char v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t result;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;

  v1 = type metadata accessor for MACAddress(0);
  v84 = *(_QWORD *)(v1 - 8);
  v85 = v1;
  v2 = __chkstk_darwin(v1);
  v81 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v80 = (char *)&v77 - v4;
  v93 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v8 = __chkstk_darwin(v7);
  v83 = (uint64_t)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v89 = (uint64_t)&v77 - v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v12 = __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v77 - v15);
  v17 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  v18 = *(_QWORD *)(v17 + 64);
  v86 = v17 + 64;
  v19 = 1 << *(_BYTE *)(v17 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v92 = v6;
  v88 = v6 + 2;
  v22 = (unint64_t)(v19 + 63) >> 6;
  v77 = v22 - 1;
  swift_bridgeObjectRetain(v17);
  v23 = 0;
  v90 = v22;
  v78 = v17 + 104;
  v79 = v22 - 5;
  v82 = _swiftEmptyDictionarySingleton;
  v24 = (uint64_t *)&unk_1010F9880;
  v87 = v17;
  while (1)
  {
    if (v21)
    {
      v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v94 = v23;
      v26 = v25 | (v23 << 6);
      goto LABEL_8;
    }
    v33 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v33 >= v90)
    {
      v35 = v23;
    }
    else
    {
      v34 = *(_QWORD *)(v86 + 8 * v33);
      if (v34)
        goto LABEL_12;
      v35 = v23 + 1;
      if ((uint64_t)(v23 + 2) < v90)
      {
        v34 = *(_QWORD *)(v86 + 8 * (v23 + 2));
        if (v34)
        {
          v33 = v23 + 2;
          goto LABEL_12;
        }
        v35 = v23 + 2;
        if ((uint64_t)(v23 + 3) < v90)
        {
          v34 = *(_QWORD *)(v86 + 8 * (v23 + 3));
          if (v34)
          {
            v33 = v23 + 3;
LABEL_12:
            v21 = (v34 - 1) & v34;
            v26 = __clz(__rbit64(v34)) + (v33 << 6);
            v94 = v33;
LABEL_8:
            v27 = *(_QWORD *)(v17 + 56);
            v28 = (uint64_t *)(*(_QWORD *)(v17 + 48) + 16 * v26);
            v29 = *v28;
            v30 = v28[1];
            *v14 = *v28;
            v14[1] = v30;
            v31 = v27 + *(_QWORD *)(v91 + 72) * v26;
            v32 = sub_10001A9A8(v24);
            sub_10005972C(v31, (uint64_t)v14 + *(int *)(v32 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v14, 0, 1, v32);
            sub_10001BBBC(v29, v30);
            goto LABEL_15;
          }
          v33 = v23 + 4;
          v35 = v23 + 3;
          if ((uint64_t)(v23 + 4) < v90)
          {
            v34 = *(_QWORD *)(v86 + 8 * v33);
            if (v34)
              goto LABEL_12;
            while (v79 != v23)
            {
              v34 = *(_QWORD *)(v78 + 8 * v23++);
              if (v34)
              {
                v33 = v23 + 4;
                goto LABEL_12;
              }
            }
            v35 = v77;
          }
        }
      }
    }
    v36 = sub_10001A9A8(v24);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v14, 1, 1, v36);
    v21 = 0;
    v94 = v35;
LABEL_15:
    sub_100005CF0((uint64_t)v14, (uint64_t)v16, (uint64_t *)&unk_1010F7830);
    v37 = v24;
    v38 = sub_10001A9A8(v24);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v16, 1, v38) == 1)
    {
      swift_release();
      return (uint64_t)v82;
    }
    v39 = *v16;
    v40 = v16[1];
    v41 = (uint64_t)v92;
    sub_1000126EC((uint64_t)v16 + *(int *)(v38 + 48), (uint64_t)v92, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload(v41, v93))
    {
      sub_10001BC14(v39, v40);
      sub_1000126B0(v41, type metadata accessor for OwnedBeaconGroup.PairingState);
      goto LABEL_5;
    }
    v42 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
    v43 = v88[*(int *)(v42 + 48)];
    v44 = v41;
    v45 = v89;
    sub_100005CF0(v44, v89, (uint64_t *)&unk_1010F9890);
    if (v43 != 2)
    {
      sub_100004048(v45, (uint64_t *)&unk_1010F9890);
      sub_10001BC14(v39, v40);
      goto LABEL_21;
    }
    v46 = v83;
    sub_100035464(v45, v83);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v46, 1, v85) == 1)
    {
      sub_100004048(v45, (uint64_t *)&unk_1010F9890);
      sub_10001BC14(v39, v40);
      sub_100004048(v46, (uint64_t *)&unk_1010F9890);
LABEL_21:
      v17 = v87;
      goto LABEL_5;
    }
    v47 = v84;
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 32);
    v49 = v80;
    v50 = v46;
    v51 = v85;
    v48(v80, v50, v85);
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v81, v49, v51);
    sub_10001BBBC(v39, v40);
    v52 = v82;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v82);
    v95 = v52;
    v55 = sub_100518E4C(v39, v40);
    v56 = v52[2];
    v57 = (v54 & 1) == 0;
    v58 = v56 + v57;
    if (__OFADD__(v56, v57))
      goto LABEL_48;
    v59 = isUniquelyReferenced_nonNull_native;
    if (v52[3] < v58)
    {
      v60 = v54;
      sub_100A8A9C0(v58, v59);
      v61 = sub_100518E4C(v39, v40);
      v63 = v62 & 1;
      v64 = v60;
      v65 = v60 & 1;
      v17 = v87;
      if (v65 != v63)
        goto LABEL_50;
      v55 = v61;
LABEL_32:
      v67 = v84;
      v66 = v85;
      v68 = v95;
      if ((v64 & 1) == 0)
        goto LABEL_33;
      goto LABEL_37;
    }
    v67 = v84;
    v66 = v85;
    v17 = v87;
    if ((v59 & 1) == 0)
    {
      LODWORD(v82) = v54;
      sub_100A9C9F8();
      v64 = (char)v82;
      goto LABEL_32;
    }
    v68 = v95;
    if ((v54 & 1) == 0)
    {
LABEL_33:
      v68[(v55 >> 6) + 8] |= 1 << v55;
      v69 = (uint64_t *)(v68[6] + 16 * v55);
      *v69 = v39;
      v69[1] = v40;
      v48((char *)(v68[7] + *(_QWORD *)(v67 + 72) * v55), (uint64_t)v81, v66);
      v70 = v68[2];
      v71 = __OFADD__(v70, 1);
      v72 = v70 + 1;
      if (v71)
        goto LABEL_49;
      v68[2] = v72;
      sub_10001BBBC(v39, v40);
      v74 = v84;
      v73 = v85;
      goto LABEL_38;
    }
LABEL_37:
    v75 = v68[7] + *(_QWORD *)(v67 + 72) * v55;
    v73 = v66;
    v74 = v67;
    (*(void (**)(unint64_t, char *))(v67 + 40))(v75, v81);
LABEL_38:
    v82 = v95;
    swift_bridgeObjectRelease();
    sub_10001BC14(v39, v40);
    sub_10001BC14(v39, v40);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v80, v73);
    sub_100004048(v89, (uint64_t *)&unk_1010F9890);
LABEL_5:
    v24 = v37;
    v23 = v94;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

