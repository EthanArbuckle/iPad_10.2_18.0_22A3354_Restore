uint64_t sub_10011E7F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t Error;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[2];

  v64 = a2;
  v65 = a3;
  Error = type metadata accessor for QueryError(0);
  v6 = *(_QWORD *)(Error - 8);
  v7 = __chkstk_darwin(Error);
  v69 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v62 - v9;
  v70 = type metadata accessor for UUID(0);
  v66 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EF3F8);
  __chkstk_darwin(v15);
  v68 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v17);
  v71 = (uint64_t *)((char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010EA560 != -1)
    swift_once(&qword_1010EA560, sub_100D29DB0);
  v19 = sub_10001A9A8(&qword_1010EF448);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B8308);
  v72 = a1;
  Row.get<A>(_:)(v20, &type metadata for Double, &protocol witness table for Double);
  if (!v3)
  {
    v21 = v73[0];
    if (qword_1010EA568 != -1)
      swift_once(&qword_1010EA568, sub_100D29E40);
    v22 = sub_10001A9E8(v19, (uint64_t)qword_1011B8320);
    Row.get<A>(_:)(v22, &type metadata for Double, &protocol witness table for Double);
    v37 = v73[0];
    if (qword_1010EA570 != -1)
      swift_once(&qword_1010EA570, sub_100D29ED4);
    v38 = sub_10001A9E8(v19, (uint64_t)qword_1011B8338);
    v23 = v72;
    Row.get<A>(_:)(v38, &type metadata for Double, &protocol witness table for Double);
    v42 = v73[0];
    v43 = v67;
    if (qword_1010EA578 != -1)
      swift_once(&qword_1010EA578, sub_100D29F68);
    v44 = sub_10001A9A8(&qword_1010EF3B0);
    v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B8350);
    Row.get<A>(_:)(v45, v43, &protocol witness table for Date);
    v57 = type metadata accessor for ObservedAdvertisement.Location(0);
    v58 = v71;
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))((uint64_t)v71 + *(int *)(v57 + 28), v14, v67);
    *v58 = v21;
    v58[1] = v37;
    v58[2] = v42;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v58, 0, 1, v57);
    goto LABEL_13;
  }
  v23 = v72;
  v73[0] = v3;
  swift_errorRetain(v3);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (!swift_dynamicCast(v10, v73, v24, Error, 0))
    goto LABEL_25;
  v25 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v10, Error);
  if (v25 != enum case for QueryError.noSuchColumn(_:))
  {
    if (v25 == enum case for QueryError.unexpectedNullValue(_:))
    {
      swift_errorRelease(v3);
      (*(void (**)(char *, uint64_t))(v6 + 96))(v10, Error);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, Error);
LABEL_25:
    v39 = swift_errorRelease(v73[0]);
    swift_willThrow(v39);
    v40 = type metadata accessor for Row(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v23, v40);
  }
  swift_errorRelease(v3);
  (*(void (**)(char *, uint64_t))(v6 + 96))(v10, Error);
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRelease();
  v26 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v71, 1, 1, v26);
  swift_errorRelease(v73[0]);
LABEL_13:
  v27 = v70;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v28 = sub_10001A9A8(&qword_1010EF3B8);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B8128);
  Row.get<A>(_:)(v29, v27, &protocol witness table for UUID);
  if (qword_1010EA4D0 != -1)
    swift_once(&qword_1010EA4D0, sub_100D29370);
  v30 = sub_10001A9A8(&qword_1010EF3E8);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B8158);
  v32 = sub_10012C49C();
  Row.get<A>(_:)(v31, &type metadata for UInt8, v32);
  v33 = v73[0];
  if (LOBYTE(v73[0]) <= 2u)
  {
    if (qword_1010EA4C8 != -1)
      swift_once(&qword_1010EA4C8, sub_100D292E4);
    v34 = sub_10001A9A8(&qword_1010EF430);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B8140);
    v36 = sub_10012C5BC();
    Row.get<A>(_:)(v35, &type metadata for UInt64, v36);
    v59 = v73[0];
    v60 = v68;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v68, v12, v70);
    v61 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    v60[*(int *)(v61 + 20)] = v33;
    *(_QWORD *)&v60[*(int *)(v61 + 24)] = v59;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 0, 1, v61);
LABEL_35:
    if (qword_1010EA518 != -1)
      swift_once(&qword_1010EA518, sub_100D298A0);
    v53 = sub_10001A9A8(&qword_1010EF408);
    v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B8230);
    Row.subscript.getter(v73, v54, &type metadata for Data, &protocol witness table for Data);
    __asm { BR              X10 }
  }
  v46 = sub_10012C690();
  v47 = swift_allocError(&type metadata for ObservationStoreService.Error, v46, 0, 0);
  *v48 = 0;
  swift_willThrow(v47);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v12, v27);
  v73[0] = v47;
  swift_errorRetain(v47);
  v49 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v50 = v69;
  if (swift_dynamicCast(v69, v73, v49, Error, 0))
  {
    v51 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v50, Error);
    if (v51 == enum case for QueryError.noSuchColumn(_:))
    {
      swift_errorRelease(v47);
      (*(void (**)(char *, uint64_t))(v6 + 96))(v50, Error);
      swift_bridgeObjectRelease();
LABEL_34:
      swift_bridgeObjectRelease();
      v52 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v68, 1, 1, v52);
      swift_errorRelease(v73[0]);
      goto LABEL_35;
    }
    if (v51 == enum case for QueryError.unexpectedNullValue(_:))
    {
      swift_errorRelease(v47);
      (*(void (**)(char *, uint64_t))(v6 + 96))(v50, Error);
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v50, Error);
  }
  v55 = swift_errorRelease(v73[0]);
  swift_willThrow(v55);
  v56 = type metadata accessor for Row(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 8))(v23, v56);
  return sub_100004048((uint64_t)v71, (uint64_t *)&unk_101100320);
}

uint64_t sub_10011F8A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  char *v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  int v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  void (*v103)(_QWORD *, uint64_t, uint64_t);
  uint64_t v104;
  _QWORD v105[3];
  uint64_t v106;
  void *v107;

  v93 = a3;
  v96 = a2;
  v85 = a1;
  v5 = sub_10001A9A8(&qword_1010EF370);
  v83 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v82 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v81 - v8;
  v10 = sub_10001A9A8(&qword_1010EF358);
  v11 = *(_QWORD *)(v10 - 8);
  v99 = v10;
  v100 = v11;
  v12 = __chkstk_darwin(v10);
  v89 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v87 = (char *)&v81 - v15;
  v16 = __chkstk_darwin(v14);
  v90 = (char *)&v81 - v17;
  v18 = __chkstk_darwin(v16);
  v88 = (char *)&v81 - v19;
  __chkstk_darwin(v18);
  v102 = (char *)&v81 - v20;
  v21 = type metadata accessor for Table(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v98 = (char *)&v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v101 = (char *)&v81 - v26;
  v27 = __chkstk_darwin(v25);
  v91 = (char *)&v81 - v28;
  v29 = __chkstk_darwin(v27);
  v92 = (char *)&v81 - v30;
  v31 = __chkstk_darwin(v29);
  v94 = (char *)&v81 - v32;
  v33 = __chkstk_darwin(v31);
  v95 = (char *)&v81 - v34;
  v35 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  v104 = a4;
  v36 = a4 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  v106 = v33;
  v107 = &protocol witness table for Table;
  v37 = sub_100018F08(v105);
  v84 = v22;
  v103 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v22 + 16);
  v103(v37, v36, v21);
  if (qword_1010EA4B8 != -1)
    swift_once(&qword_1010EA4B8, sub_100D291C4);
  v38 = sub_10001A9E8(v5, (uint64_t)qword_1011B8110);
  v97 = v5;
  v39 = v38;
  v81 = v35;
  QueryType.subscript.getter(v38, v21, &type metadata for Int64, &protocol witness table for Table);
  v40 = v82;
  QueryType.subscript.getter(v39, v21, &type metadata for Int64, &protocol witness table for Table);
  v41 = v102;
  == infix<A>(_:_:)(v9, v40, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v42 = *(void (**)(char *, uint64_t))(v83 + 8);
  v43 = v97;
  v42(v40, v97);
  v42(v9, v43);
  QueryType.join(_:on:)(v105, v41, v21, &protocol witness table for Table);
  v44 = v41;
  v100 = *(_QWORD *)(v100 + 8);
  ((void (*)(char *, uint64_t))v100)(v41, v99);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
  v45 = v104 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
  v106 = v21;
  v107 = &protocol witness table for Table;
  v46 = sub_100018F08(v105);
  v103(v46, v45, v21);
  QueryType.subscript.getter(v39, v21, &type metadata for Int64, &protocol witness table for Table);
  QueryType.subscript.getter(v39, v21, &type metadata for Int64, &protocol witness table for Table);
  == infix<A>(_:_:)(v9, v40, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v47 = v97;
  v42(v40, v97);
  v48 = (void (*)(char *, uint64_t))v100;
  v42(v9, v47);
  v49 = v98;
  QueryType.join(_:on:)(v105, v44, v21, &protocol witness table for Table);
  v50 = v99;
  v48(v44, v99);
  v98 = *(char **)(v84 + 8);
  ((void (*)(char *, uint64_t))v98)(v49, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
  v51 = v86;
  v52 = sub_100113324(v85);
  v97 = v51;
  v53 = sub_10001B664((uint64_t)v52);
  swift_bridgeObjectRelease();
  v105[0] = v53;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v54 = sub_10001A9A8(&qword_1010EF3B8);
  v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B8128);
  v56 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
  v57 = sub_1000193A4(&qword_1010EF460, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
  v58 = v88;
  Collection<>.contains(_:)(v55, v56, v57, &protocol witness table for UUID);
  swift_bridgeObjectRelease();
  if (qword_1010EA4E0 != -1)
    swift_once(&qword_1010EA4E0, sub_100D29498);
  v59 = sub_10001A9A8(&qword_1010EF3E8);
  v60 = sub_10001A9E8(v59, (uint64_t)qword_1011B8188);
  LOBYTE(v105[0]) = 1;
  v61 = sub_10012C49C();
  v62 = v87;
  == infix<A>(_:_:)(v60, v105, &type metadata for UInt8, v61, &protocol witness table for Int64);
  LOBYTE(v105[0]) = 2;
  v63 = v89;
  == infix<A>(_:_:)(v60, v105, &type metadata for UInt8, v61, &protocol witness table for Int64);
  v64 = v90;
  || infix(_:_:)(v62, v63);
  v65 = (void (*)(char *, uint64_t))v100;
  ((void (*)(char *, uint64_t))v100)(v63, v50);
  v65(v62, v50);
  v66 = v102;
  && infix(_:_:)(v58, v64);
  v65(v64, v50);
  v65(v58, v50);
  v67 = v91;
  v68 = v101;
  QueryType.filter(_:)(v66, v21, &protocol witness table for Table);
  v65(v66, v50);
  v69 = (void (*)(char *, uint64_t))v98;
  ((void (*)(char *, uint64_t))v98)(v68, v21);
  if (qword_1010EA550 != -1)
    swift_once(&qword_1010EA550, sub_100D29C8C);
  v70 = sub_10001A9E8(v50, (uint64_t)qword_1011B82D8);
  LOBYTE(v105[0]) = v93 & 1;
  == infix<A>(_:_:)(v70, v105, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Int64);
  v71 = v92;
  QueryType.filter(_:)(v66, v21, &protocol witness table for Table);
  v65(v66, v50);
  v69(v67, v21);
  v72 = sub_10001A9A8(&qword_1010EF3C8);
  v73 = swift_allocObject(v72, 72, 7);
  *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
  if (qword_1010EA548 != -1)
    swift_once(&qword_1010EA548, sub_100D29BFC);
  v74 = sub_10001A9A8(&qword_1010EF3B0);
  sub_10001A9E8(v74, (uint64_t)qword_1011B82C0);
  v75 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v74, v75);
  v76 = v94;
  QueryType.order(_:)(v73, v21, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v69(v71, v21);
  v77 = v95;
  QueryType.limit(_:)(v96, 0, v21, &protocol witness table for Table);
  v69(v76, v21);
  v106 = v21;
  v107 = &protocol witness table for Table;
  v78 = sub_100018F08(v105);
  v103(v78, (uint64_t)v77, v21);
  v79 = sub_1001201B4((uint64_t)v105, v104);
  v69(v77, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
  return v79;
}

uint64_t sub_1001201B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v5, (char *)&type metadata for () + 8, v6);
  if (v16)
  {
    swift_retain();
    swift_release();
    v7 = Connection.prepare(_:)(a1);
    if (v2)
    {
      return swift_release();
    }
    else
    {
      v12 = v7;
      swift_retain();
      v13 = swift_retain();
      v14 = sub_100119230(v13, a2);
      swift_release();
      swift_release_n(v12, 2);
      v15 = sub_10001A9A8(&qword_1010EF468);
      result = swift_allocObject(v15, 24, 7);
      *(_QWORD *)(result + 16) = v14;
    }
  }
  else
  {
    v9 = sub_10012C434();
    v10 = swift_allocError(&type metadata for DatabaseError, v9, 0, 0);
    *(_DWORD *)v11 = 2;
    *(_BYTE *)(v11 + 4) = 1;
    return swift_willThrow(v10);
  }
  return result;
}

uint64_t sub_100120304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v5 = sub_10001A9A8(&qword_1010EF358);
  v44 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v38 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v38 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v38 - v15;
  v48 = type metadata accessor for Table(0);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Delete(0);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v45 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100113208(a1);
  if (!v20[2])
    return swift_bridgeObjectRelease();
  v43 = v5;
  v21 = *(_QWORD *)(a2 + 32);
  v22 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v21, (char *)&type metadata for () + 8, v22);
  if (v50)
  {
    v23 = v50[3];
    swift_retain();
    swift_release();
    v24 = sub_1001166B8(v23, a2);
    if (v2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = v24;
      v42 = v23;
      v41 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      v50 = v20;
      if (qword_1010EA4B8 != -1)
        swift_once(&qword_1010EA4B8, sub_100D291C4);
      v29 = sub_10001A9A8(&qword_1010EF370);
      v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B8110);
      v39 = v30;
      v38 = sub_10001A9A8(&qword_1010EF378);
      v31 = sub_1000193A4(&qword_1010EF380, &qword_1010EF378, (const char *)&protocol conformance descriptor for [A]);
      Collection<>.contains(_:)(v30, v38, v31, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      v50 = (_QWORD *)v40;
      v32 = sub_10001A9A8(&qword_1010EF390);
      v33 = sub_1000193A4(&qword_1010EF398, &qword_1010EF390, (const char *)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v39, v32, v33, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      LOBYTE(v50) = 0;
      == infix<A>(_:_:)(v8, &v50, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Int64);
      v34 = v43;
      v35 = *(void (**)(char *, uint64_t))(v44 + 8);
      v35(v8, v43);
      && infix(_:_:)(v14, v11);
      v35(v11, v34);
      v35(v14, v34);
      v36 = v48;
      QueryType.filter(_:)(v16, v48, &protocol witness table for Table);
      v35(v16, v34);
      v37 = v45;
      QueryType.delete()(v36, &protocol witness table for Table);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v36);
      Connection.run(_:)(v37);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v49);
    }
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = sub_10012C434();
    v27 = swift_allocError(&type metadata for DatabaseError, v26, 0, 0);
    *(_DWORD *)v28 = 2;
    *(_BYTE *)(v28 + 4) = 1;
    return swift_willThrow(v27);
  }
}

uint64_t sub_100120764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v34 = sub_10001A9A8(&qword_1010EF358);
  v5 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Table(0);
  v35 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Update(0);
  v36 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100113208(a1);
  if (!v14[2])
    return swift_bridgeObjectRelease();
  v33 = v11;
  v15 = *(_QWORD *)(a2 + 32);
  v16 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v15, (char *)&type metadata for () + 8, v16);
  if (v37)
  {
    v17 = v37[3];
    v32[2] = v2;
    v32[3] = v17;
    swift_retain();
    swift_release();
    v32[1] = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
    v37 = v14;
    if (qword_1010EA4B8 != -1)
      swift_once(&qword_1010EA4B8, sub_100D291C4);
    v18 = sub_10001A9A8(&qword_1010EF370);
    v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B8110);
    v20 = sub_10001A9A8(&qword_1010EF378);
    v21 = sub_1000193A4(&qword_1010EF380, &qword_1010EF378, (const char *)&protocol conformance descriptor for [A]);
    Collection<>.contains(_:)(v19, v20, v21, &protocol witness table for Int64);
    swift_bridgeObjectRelease();
    QueryType.filter(_:)(v7, v8, &protocol witness table for Table);
    v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23 = v34;
    v22(v7, v34);
    v24 = sub_10001A9A8(&qword_1010EF388);
    v25 = type metadata accessor for Setter(0);
    v26 = swift_allocObject(v24, ((*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80) | 7);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    if (qword_1010EA550 != -1)
      swift_once(&qword_1010EA550, sub_100D29C8C);
    v27 = sub_10001A9E8(v23, (uint64_t)qword_1011B82D8);
    LOBYTE(v37) = 1;
    <- infix<A>(_:_:)(v27, &v37, &type metadata for Bool, &protocol witness table for Bool);
    QueryType.update(_:)(v26, v8, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v8);
    Connection.run(_:)(v13);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v33);
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = sub_10012C434();
    v30 = swift_allocError(&type metadata for DatabaseError, v29, 0, 0);
    *(_DWORD *)v31 = 2;
    *(_BYTE *)(v31 + 4) = 1;
    return swift_willThrow(v30);
  }
}

uint64_t sub_100120B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = sub_10001A9A8(&qword_1010EF4E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF358);
  v45 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v43 = (char *)v41 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v41 - v14;
  __chkstk_darwin(v13);
  v46 = (char *)v41 - v16;
  v50 = type metadata accessor for Table(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v44 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Delete(0);
  v49 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v47 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a1, v19, (char *)&type metadata for () + 8, v20);
  if (v52)
  {
    v21 = *(_QWORD *)(v52 + 24);
    swift_retain();
    swift_release();
    v22 = sub_1001166B8(v21, a1);
    if (!v1)
    {
      v41[0] = v22;
      v42 = v7;
      v41[1] = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
      if (qword_1010EA518 != -1)
        swift_once(&qword_1010EA518, sub_100D298A0);
      v23 = sub_10001A9A8(&qword_1010EF408);
      sub_10001A9E8(v23, (uint64_t)qword_1011B8230);
      v24 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
      ExpressionType<>.length.getter(v23, v24);
      v52 = 28;
      == infix<A>(_:_:)(v6, &v52, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v52 = v41[0];
      if (qword_1010EA4B8 != -1)
        swift_once(&qword_1010EA4B8, sub_100D291C4);
      v25 = sub_10001A9A8(&qword_1010EF370);
      v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B8110);
      v27 = sub_10001A9A8(&qword_1010EF390);
      v28 = sub_1000193A4(&qword_1010EF398, &qword_1010EF390, (const char *)&protocol conformance descriptor for Set<A>);
      Collection<>.contains(_:)(v26, v27, v28, &protocol witness table for Int64);
      swift_bridgeObjectRelease();
      LOBYTE(v52) = 0;
      v29 = v43;
      == infix<A>(_:_:)(v10, &v52, &type metadata for Bool, &protocol witness table for Bool, &protocol witness table for Int64);
      v30 = *(void (**)(char *, uint64_t))(v45 + 8);
      v31 = v10;
      v32 = v42;
      v30(v31, v42);
      v33 = v46;
      && infix(_:_:)(v15, v29);
      v30(v29, v32);
      v30(v15, v32);
      v34 = v44;
      v35 = v50;
      QueryType.filter(_:)(v33, v50, &protocol witness table for Table);
      v30(v33, v32);
      v36 = v47;
      QueryType.delete()(v35, &protocol witness table for Table);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v35);
      Connection.run(_:)(v36);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v51);
    }
    return swift_release();
  }
  else
  {
    v38 = sub_10012C434();
    v39 = swift_allocError(&type metadata for DatabaseError, v38, 0, 0);
    *(_DWORD *)v40 = 2;
    *(_BYTE *)(v40 + 4) = 1;
    return swift_willThrow(v39);
  }
}

uint64_t sub_100120FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(_QWORD);
  char *v37;
  _QWORD *v38;
  void (*v39)(_QWORD *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void (*v72)(char *, _QWORD, uint64_t);
  unsigned int v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD v92[3];
  uint64_t v93;
  void *v94;
  void (*v95)(_QWORD *, uint64_t, uint64_t);

  v87 = sub_10001A9A8(&qword_1010EF370);
  v75 = *(void (**)(char *, uint64_t))(v87 - 8);
  v4 = __chkstk_darwin(v87);
  v77 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v76 = (char *)&v69 - v6;
  v90 = sub_10001A9A8(&qword_1010EF358);
  v74 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v79 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for JoinType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Table(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v86 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v78 = (char *)&v69 - v17;
  v18 = __chkstk_darwin(v16);
  v80 = (char *)&v69 - v19;
  __chkstk_darwin(v18);
  v81 = (char *)&v69 - v20;
  v21 = *(char **)(a1 + 16);
  v88 = v8;
  v89 = a2;
  v83 = v13;
  v84 = v11;
  v82 = v9;
  if (v21)
  {
    v85 = v12;
    v92[0] = _swiftEmptyArrayStorage;
    sub_10009A92C(0, (int64_t)v21, 0);
    v22 = (_QWORD *)v92[0];
    v23 = sub_1003B2D14(a1);
    v25 = v24;
    v27 = v26 & 1;
    v91 = (char *)(a1 + 56);
    while ((v23 & 0x8000000000000000) == 0 && v23 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)&v91[((unint64_t)v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
        goto LABEL_19;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v25)
        goto LABEL_20;
      LODWORD(v95) = v27;
      v28 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v23);
      v12 = *v28;
      v29 = v28[1];
      sub_10012C644(*v28, v29);
      v92[0] = v22;
      v31 = v22[2];
      v30 = v22[3];
      if (v31 >= v30 >> 1)
      {
        sub_10009A92C(v30 > 1, v31 + 1, 1);
        v22 = (_QWORD *)v92[0];
      }
      v22[2] = v31 + 1;
      v32 = &v22[2 * v31];
      v32[4] = v12;
      v32[5] = v29 & 0xDFFFFFFFFFFFFFFFLL;
      v33 = sub_1003B2DB8(v23, v25, v95 & 1, a1);
      v23 = v33;
      v25 = v34;
      v27 = v35 & 1;
      if (!--v21)
      {
        v70 = v22;
        sub_1000FE2A4(v33, v34, v27);
        a2 = v89;
        v11 = v84;
        v12 = v85;
        v9 = v82;
        v13 = v83;
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v70 = _swiftEmptyArrayStorage;
LABEL_12:
  v85 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  v36 = *(void (**)(_QWORD))(v9 + 104);
  v73 = enum case for JoinType.leftOuter(_:);
  v72 = (void (*)(char *, _QWORD, uint64_t))v36;
  v36(v11);
  v37 = (char *)(a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  v93 = v12;
  v94 = &protocol witness table for Table;
  v21 = (char *)&protocol witness table for Table;
  v38 = sub_100018F08(v92);
  v39 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v13 + 16);
  v91 = v37;
  v95 = v39;
  v39(v38, (uint64_t)v37, v12);
  if (qword_1010EA4B8 != -1)
LABEL_21:
    swift_once(&qword_1010EA4B8, sub_100D291C4);
  v40 = v87;
  v41 = sub_10001A9E8(v87, (uint64_t)qword_1011B8110);
  v71 = v41;
  v42 = v76;
  QueryType.subscript.getter(v41, v12, &type metadata for Int64, v21);
  v43 = v77;
  QueryType.subscript.getter(v41, v12, &type metadata for Int64, &protocol witness table for Table);
  v44 = v79;
  == infix<A>(_:_:)(v42, v43, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v45 = (void (*)(char *, uint64_t))*((_QWORD *)v75 + 1);
  v75 = v45;
  v45(v43, v40);
  v45(v42, v40);
  v46 = v84;
  QueryType.join(_:_:on:)(v84, v92, v44, v12, &protocol witness table for Table);
  v91 = *(char **)(v74 + 8);
  ((void (*)(char *, uint64_t))v91)(v44, v90);
  v82 = *(_QWORD *)(v82 + 8);
  v47 = v88;
  ((void (*)(char *, uint64_t))v82)(v46, v88);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
  v72(v46, v73, v47);
  v48 = v89 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  v93 = v12;
  v94 = &protocol witness table for Table;
  v49 = sub_100018F08(v92);
  v95(v49, v48, v12);
  v50 = v71;
  QueryType.subscript.getter(v71, v12, &type metadata for Int64, &protocol witness table for Table);
  QueryType.subscript.getter(v50, v12, &type metadata for Int64, &protocol witness table for Table);
  == infix<A>(_:_:)(v42, v43, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v51 = v87;
  v52 = v75;
  v75(v43, v87);
  v52(v42, v51);
  v53 = v78;
  v54 = v86;
  QueryType.join(_:_:on:)(v46, v92, v44, v12, &protocol witness table for Table);
  ((void (*)(char *, uint64_t))v91)(v44, v90);
  ((void (*)(char *, uint64_t))v82)(v46, v88);
  v55 = *(void (**)(char *, uint64_t))(v83 + 8);
  v55(v54, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
  v92[0] = v70;
  if (qword_1010EA518 != -1)
    swift_once(&qword_1010EA518, sub_100D298A0);
  v56 = sub_10001A9A8(&qword_1010EF408);
  v57 = sub_10001A9E8(v56, (uint64_t)qword_1011B8230);
  v58 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
  v59 = sub_1000193A4(&qword_1010EF530, (uint64_t *)&unk_1010FF7C0, (const char *)&protocol conformance descriptor for [A]);
  Collection<>.contains(_:)(v57, v58, v59, &protocol witness table for Data);
  swift_bridgeObjectRelease();
  v60 = v80;
  QueryType.filter(_:)(v44, v12, &protocol witness table for Table);
  ((void (*)(char *, uint64_t))v91)(v44, v90);
  v55(v53, v12);
  v61 = sub_10001A9A8(&qword_1010EF3C8);
  v62 = swift_allocObject(v61, 72, 7);
  *(_OWORD *)(v62 + 16) = xmmword_100E22B00;
  if (qword_1010EA548 != -1)
    swift_once(&qword_1010EA548, sub_100D29BFC);
  v63 = sub_10001A9A8(&qword_1010EF3B0);
  sub_10001A9E8(v63, (uint64_t)qword_1011B82C0);
  v64 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v63, v64);
  v65 = v81;
  QueryType.order(_:)(v62, v12, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v55(v60, v12);
  v93 = v12;
  v94 = &protocol witness table for Table;
  v66 = sub_100018F08(v92);
  v95(v66, (uint64_t)v65, v12);
  v67 = sub_1001201B4((uint64_t)v92, v89);
  v55(v65, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v92);
  return v67;
}

uint64_t sub_100121844(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD v73[3];
  uint64_t v74;
  void *v75;
  _QWORD *v76;

  v71 = a2;
  v4 = sub_10001A9A8(&qword_1010EF370);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  v5 = __chkstk_darwin(v4);
  v60 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v59 = (char *)&v58 - v7;
  v70 = sub_10001A9A8(&qword_1010EF358);
  v61 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v65 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for Table(0);
  v69 = *(_QWORD *)(v68 - 8);
  v9 = __chkstk_darwin(v68);
  v64 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  __chkstk_darwin(v11);
  v67 = (char *)&v58 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  v66 = v15;
  if (v13)
  {
    v73[0] = _swiftEmptyArrayStorage;
    sub_10009A92C(0, v13, 0);
    v14 = (_QWORD *)v73[0];
    v16 = sub_1003B2D14(a1);
    v18 = v17;
    v20 = v19 & 1;
    v72 = (char *)(a1 + 56);
    while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)&v72[((unint64_t)v16 >> 3) & 0xFFFFFFFFFFFFF8] >> v16) & 1) == 0)
        goto LABEL_18;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v18)
        goto LABEL_19;
      LODWORD(v76) = v20;
      v21 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
      v2 = *v21;
      v22 = v21[1];
      sub_10012C644(*v21, v22);
      v73[0] = v14;
      v24 = v14[2];
      v23 = v14[3];
      if (v24 >= v23 >> 1)
      {
        sub_10009A92C(v23 > 1, v24 + 1, 1);
        v14 = (_QWORD *)v73[0];
      }
      v14[2] = v24 + 1;
      v25 = &v14[2 * v24];
      v25[4] = v2;
      v25[5] = v22 & 0xDFFFFFFFFFFFFFFFLL;
      v26 = sub_1003B2DB8(v16, v18, v76 & 1, a1);
      v16 = v26;
      v18 = v27;
      v20 = v28 & 1;
      if (!--v13)
      {
        sub_1000FE2A4(v26, v27, v20);
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  else
  {
LABEL_11:
    v76 = v14;
    v29 = v71 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
    v2 = v68;
    v74 = v68;
    v75 = &protocol witness table for Table;
    v30 = sub_100018F08(v73);
    v31 = *(char **)(v69 + 16);
    v58 = v29;
    v72 = v31;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v31)(v30, v29, v2);
    if (qword_1010EA4B8 == -1)
      goto LABEL_12;
  }
  swift_once(&qword_1010EA4B8, sub_100D291C4);
LABEL_12:
  v32 = v63;
  v33 = sub_10001A9E8(v63, (uint64_t)qword_1011B8110);
  v34 = v59;
  QueryType.subscript.getter(v33, v2, &type metadata for Int64, &protocol witness table for Table);
  v35 = v60;
  QueryType.subscript.getter(v33, v2, &type metadata for Int64, &protocol witness table for Table);
  v36 = v65;
  == infix<A>(_:_:)(v34, v35, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v37 = *(void (**)(char *, uint64_t))(v62 + 8);
  v37(v35, v32);
  v37(v34, v32);
  v38 = v64;
  v39 = v36;
  QueryType.join(_:on:)(v73, v36, v2, &protocol witness table for Table);
  v40 = *(void (**)(char *, uint64_t))(v61 + 8);
  v40(v36, v70);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
  v73[0] = v76;
  v41 = v2;
  if (qword_1010EA518 != -1)
    swift_once(&qword_1010EA518, sub_100D298A0);
  v42 = sub_10001A9A8(&qword_1010EF408);
  v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B8230);
  v44 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
  v45 = sub_1000193A4(&qword_1010EF530, (uint64_t *)&unk_1010FF7C0, (const char *)&protocol conformance descriptor for [A]);
  Collection<>.contains(_:)(v43, v44, v45, &protocol witness table for Data);
  swift_bridgeObjectRelease();
  v46 = v66;
  QueryType.filter(_:)(v39, v2, &protocol witness table for Table);
  v40(v39, v70);
  v47 = *(void (**)(char *, uint64_t))(v69 + 8);
  v47(v38, v41);
  v48 = sub_10001A9A8(&qword_1010EF3C8);
  v49 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_100E22B00;
  v50 = v46;
  v51 = v41;
  if (qword_1010EA578 != -1)
    swift_once(&qword_1010EA578, sub_100D29F68);
  v52 = sub_10001A9A8(&qword_1010EF3B0);
  sub_10001A9E8(v52, (uint64_t)qword_1011B8350);
  v53 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v52, v53);
  v54 = v67;
  QueryType.order(_:)(v49, v51, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v47(v50, v51);
  v74 = v51;
  v75 = &protocol witness table for Table;
  v55 = sub_100018F08(v73);
  ((void (*)(_QWORD *, char *, uint64_t))v72)(v55, v54, v51);
  v56 = sub_100121E64((uint64_t)v73, v71);
  v47(v54, v51);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
  return v56;
}

uint64_t sub_100121E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t i;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;

  v5 = type metadata accessor for Date(0);
  v87 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v83 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v78 = (char *)&v75 - v8;
  v9 = type metadata accessor for ObservedAdvertisement.Location(0);
  v85 = *(_QWORD *)(v9 - 8);
  v86 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v75 - v14);
  v15 = __chkstk_darwin(v13);
  v88 = (uint64_t *)((char *)&v75 - v16);
  __chkstk_darwin(v15);
  v82 = (uint64_t)&v75 - v17;
  v18 = sub_10001A9A8(&qword_1010EF3A8);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v81 = (char *)&v75 - v22;
  v23 = type metadata accessor for Row(0);
  v91 = *(_QWORD *)(v23 - 8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v89 = (char *)&v75 - v28;
  __chkstk_darwin(v27);
  v79 = (char *)&v75 - v29;
  v30 = *(_QWORD *)(a2 + 32);
  v31 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v30, &type metadata for () + 1, v31);
  if (!v93)
  {
    v51 = sub_10012C434();
    v52 = swift_allocError(&type metadata for DatabaseError, v51, 0, 0);
    *(_DWORD *)v53 = 2;
    *(_BYTE *)(v53 + 4) = 1;
    return swift_willThrow(v52);
  }
  v32 = v93[2];
  swift_retain();
  swift_release();
  v33 = Connection.prepare(_:)(a1);
  if (v2)
    return swift_release();
  v34 = v33;
  v77 = v32;
  v35 = swift_retain();
  v36 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v35);
  v93 = _swiftEmptyArrayStorage;
  sub_10009AA44(0, v36 & ~(v36 >> 63), 0);
  v37 = swift_retain();
  v84 = dispatch thunk of _AnySequenceBox._makeIterator()(v37);
  v76 = v34;
  result = swift_release();
  if (v36 < 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  for (i = v5; v36; v5 = i)
  {
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    v39 = v91;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48))(v21, 1, v23);
    if ((_DWORD)result == 1)
      goto LABEL_40;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v26, v21, v23);
    if (qword_1010EA560 != -1)
      swift_once(&qword_1010EA560, sub_100D29DB0);
    v40 = sub_10001A9A8(&qword_1010EF448);
    v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B8308);
    Row.get<A>(_:)(v41, &type metadata for Double, &protocol witness table for Double);
    *(_QWORD *)v12 = v92;
    if (qword_1010EA568 != -1)
      swift_once(&qword_1010EA568, sub_100D29E40);
    v42 = sub_10001A9E8(v40, (uint64_t)qword_1011B8320);
    Row.get<A>(_:)(v42, &type metadata for Double, &protocol witness table for Double);
    *((_QWORD *)v12 + 1) = v92;
    if (qword_1010EA570 != -1)
      swift_once(&qword_1010EA570, sub_100D29ED4);
    v43 = sub_10001A9E8(v40, (uint64_t)qword_1011B8338);
    Row.get<A>(_:)(v43, &type metadata for Double, &protocol witness table for Double);
    *((_QWORD *)v12 + 2) = v92;
    if (qword_1010EA578 != -1)
      swift_once(&qword_1010EA578, sub_100D29F68);
    v44 = sub_10001A9A8(&qword_1010EF3B0);
    v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B8350);
    v46 = v83;
    Row.get<A>(_:)(v45, v5, &protocol witness table for Date);
    v47 = *(void (**)(char *, uint64_t))(v91 + 8);
    v47(v26, v23);
    (*(void (**)(char *, char *, uint64_t))(v87 + 32))(&v12[*(int *)(v86 + 28)], v46, v5);
    sub_1000126EC((uint64_t)v12, (uint64_t)v90, type metadata accessor for ObservedAdvertisement.Location);
    v47(v21, v23);
    v48 = v93;
    if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
    {
      sub_10009AA44(0, v48[2] + 1, 1);
      v48 = v93;
    }
    v50 = v48[2];
    v49 = v48[3];
    if (v50 >= v49 >> 1)
    {
      sub_10009AA44(v49 > 1, v50 + 1, 1);
      v48 = v93;
    }
    v48[2] = v50 + 1;
    result = sub_1000126EC((uint64_t)v90, (uint64_t)v48+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v50, type metadata accessor for ObservedAdvertisement.Location);
    --v36;
  }
  v54 = (uint64_t)v81;
  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  v55 = v91;
  v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  if (v90(v54, 1, v23) != 1)
  {
    v83 = *(char **)(v55 + 32);
    v58 = v79;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v83)(v58, v54, v23);
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v89, v58, v23);
      if (qword_1010EA560 != -1)
        swift_once(&qword_1010EA560, sub_100D29DB0);
      v59 = sub_10001A9A8(&qword_1010EF448);
      v60 = sub_10001A9E8(v59, (uint64_t)qword_1011B8308);
      Row.get<A>(_:)(v60, &type metadata for Double, &protocol witness table for Double);
      *v88 = v92;
      if (qword_1010EA568 != -1)
        swift_once(&qword_1010EA568, sub_100D29E40);
      v61 = sub_10001A9E8(v59, (uint64_t)qword_1011B8320);
      Row.get<A>(_:)(v61, &type metadata for Double, &protocol witness table for Double);
      v88[1] = v92;
      if (qword_1010EA570 != -1)
        swift_once(&qword_1010EA570, sub_100D29ED4);
      v62 = sub_10001A9E8(v59, (uint64_t)qword_1011B8338);
      Row.get<A>(_:)(v62, &type metadata for Double, &protocol witness table for Double);
      v88[2] = v92;
      if (qword_1010EA578 != -1)
        swift_once(&qword_1010EA578, sub_100D29F68);
      v63 = sub_10001A9A8(&qword_1010EF3B0);
      v64 = sub_10001A9E8(v63, (uint64_t)qword_1011B8350);
      v65 = v78;
      v66 = v89;
      Row.get<A>(_:)(v64, v5, &protocol witness table for Date);
      v67 = *(void (**)(char *, uint64_t))(v91 + 8);
      v67(v66, v23);
      v68 = v88;
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))((char *)v88 + *(int *)(v86 + 28), v65, v5);
      v69 = (uint64_t)v68;
      v58 = v79;
      sub_1000126EC(v69, v82, type metadata accessor for ObservedAdvertisement.Location);
      v67(v58, v23);
      v70 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
      {
        sub_10009AA44(0, v70[2] + 1, 1);
        v70 = v93;
      }
      v72 = v70[2];
      v71 = v70[3];
      if (v72 >= v71 >> 1)
      {
        sub_10009AA44(v71 > 1, v72 + 1, 1);
        v70 = v93;
      }
      v70[2] = v72 + 1;
      v73 = sub_1000126EC(v82, (uint64_t)v70+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(_QWORD *)(v85 + 72) * v72, type metadata accessor for ObservedAdvertisement.Location);
      v54 = (uint64_t)v81;
      dispatch thunk of _AnyIteratorBoxBase.next()(v73);
      v74 = v90(v54, 1, v23);
      v5 = i;
      v55 = v91;
    }
    while (v74 != 1);
  }
  swift_release();
  sub_100004048(v54, &qword_1010EF3A8);
  swift_release();
  swift_release_n(v76, 2);
  v56 = v93;
  v57 = sub_10001A9A8(&qword_1010EF538);
  result = swift_allocObject(v57, 24, 7);
  *(_QWORD *)(result + 16) = v56;
  return result;
}

uint64_t sub_1001228A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD);
  void (*v35)(char *, uint64_t);
  _QWORD *v36;
  void (*v37)(_QWORD *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD v73[2];
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  void (*v77)(char *, _QWORD, uint64_t);
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void (*v104)(_QWORD *, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;

  v101 = a1;
  v110 = a2;
  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v97 = (char *)v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_10001A9A8(&qword_1010EF518);
  v98 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v94 = (char *)v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_10001A9A8(&qword_1010EF4E0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v89 = (char *)v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF370);
  v81 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v87 = (char *)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v83 = (char *)v73 - v9;
  v106 = sub_10001A9A8(&qword_1010EF358);
  v80 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v86 = (char *)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JoinType(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Table(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v102 = (char *)v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v82 = (char *)v73 - v20;
  v21 = __chkstk_darwin(v19);
  v88 = (char *)v73 - v22;
  v23 = __chkstk_darwin(v21);
  v92 = (char *)v73 - v24;
  v25 = __chkstk_darwin(v23);
  v93 = (char *)v73 - v26;
  __chkstk_darwin(v25);
  v96 = (char *)v73 - v27;
  v28 = sub_10001A9A8(&qword_1010EF520);
  v95 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (char *)v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000193A4(&qword_1010EF528, &qword_1010EF520, (const char *)&protocol conformance descriptor for Expression<A>);
  v105 = v30;
  v99 = v28;
  ExpressionType.init(_:)(0xD000000000000010, 0x8000000100EC28D0, v28, v31);
  v32 = v110;
  v33 = v110 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  v79 = v12;
  v34 = *(void (**)(_QWORD))(v12 + 104);
  v85 = v14;
  v78 = enum case for JoinType.leftOuter(_:);
  v103 = v11;
  v77 = (void (*)(char *, _QWORD, uint64_t))v34;
  v34(v14);
  v35 = (void (*)(char *, uint64_t))(v32
                                             + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  v108 = v15;
  v109 = &protocol witness table for Table;
  v36 = sub_100018F08(&v107);
  v84 = v16;
  v37 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v16 + 16);
  v75 = v35;
  v104 = v37;
  v37(v36, (uint64_t)v35, v15);
  if (qword_1010EA4B8 != -1)
    swift_once(&qword_1010EA4B8, sub_100D291C4);
  v38 = v6;
  v39 = sub_10001A9E8(v6, (uint64_t)qword_1011B8110);
  v74 = v39;
  v40 = v83;
  QueryType.subscript.getter(v39, v15, &type metadata for Int64, &protocol witness table for Table);
  v41 = v87;
  QueryType.subscript.getter(v39, v15, &type metadata for Int64, &protocol witness table for Table);
  v42 = v86;
  == infix<A>(_:_:)(v40, v41, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v73[1] = v33;
  v43 = *(void (**)(char *, uint64_t))(v81 + 8);
  v75 = v43;
  v76 = v38;
  v43(v41, v38);
  v43(v40, v38);
  v44 = v85;
  QueryType.join(_:_:on:)(v85, &v107, v42, v15, &protocol witness table for Table);
  v80 = *(_QWORD *)(v80 + 8);
  ((void (*)(char *, uint64_t))v80)(v42, v106);
  v81 = *(_QWORD *)(v79 + 8);
  v45 = v103;
  ((void (*)(char *, uint64_t))v81)(v44, v103);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v107);
  v77(v44, v78, v45);
  v46 = v110 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  v108 = v15;
  v109 = &protocol witness table for Table;
  v47 = sub_100018F08(&v107);
  v104(v47, v46, v15);
  v48 = v74;
  QueryType.subscript.getter(v74, v15, &type metadata for Int64, &protocol witness table for Table);
  QueryType.subscript.getter(v48, v15, &type metadata for Int64, &protocol witness table for Table);
  == infix<A>(_:_:)(v40, v41, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v49 = v41;
  v50 = (void (*)(char *, uint64_t))v80;
  v51 = v76;
  v52 = v75;
  v75(v49, v76);
  v52(v40, v51);
  v53 = v82;
  v54 = v102;
  QueryType.join(_:_:on:)(v44, &v107, v42, v15, &protocol witness table for Table);
  v50(v42, v106);
  ((void (*)(char *, uint64_t))v81)(v44, v103);
  v55 = *(void (**)(char *, uint64_t))(v84 + 8);
  v55(v54, v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v107);
  if (qword_1010EA518 != -1)
    swift_once(&qword_1010EA518, sub_100D298A0);
  v56 = sub_10001A9A8(&qword_1010EF408);
  sub_10001A9E8(v56, (uint64_t)qword_1011B8230);
  v57 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v58 = v89;
  ExpressionType<>.length.getter(v56, v57);
  v107 = 28;
  == infix<A>(_:_:)(v58, &v107, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v58, v91);
  v59 = v88;
  QueryType.filter(_:)(v42, v15, &protocol witness table for Table);
  v50(v42, v106);
  v55(v53, v15);
  v60 = type metadata accessor for UUID(0);
  v61 = (uint64_t)v97;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v97, 1, 1, v60);
  v62 = v94;
  == infix<A>(_:_:)(v105, v61, v60, &protocol witness table for UUID, &protocol witness table for String);
  sub_100004048(v61, &qword_1010ED860);
  v63 = v92;
  QueryType.filter(_:)(v62, v15, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v62, v100);
  v55(v59, v15);
  v64 = sub_10001A9A8(&qword_1010EF3C8);
  v65 = swift_allocObject(v64, 72, 7);
  *(_OWORD *)(v65 + 16) = xmmword_100E22B00;
  if (qword_1010EA548 != -1)
    swift_once(&qword_1010EA548, sub_100D29BFC);
  v66 = sub_10001A9A8(&qword_1010EF3B0);
  sub_10001A9E8(v66, (uint64_t)qword_1011B82C0);
  v67 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.asc.getter(v66, v67);
  v68 = v93;
  QueryType.order(_:)(v65, v15, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v55(v63, v15);
  v69 = v96;
  QueryType.limit(_:)(v101, 0, v15, &protocol witness table for Table);
  v55(v68, v15);
  v108 = v15;
  v109 = &protocol witness table for Table;
  v70 = sub_100018F08(&v107);
  v104(v70, (uint64_t)v69, v15);
  v71 = sub_1001201B4((uint64_t)&v107, v110);
  v55(v69, v15);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v105, v99);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v107);
  return v71;
}

uint64_t sub_1001232A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  void (*v31)(_QWORD *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void (*v42)(_QWORD *, uint64_t, uint64_t);
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(_QWORD *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  unsigned __int8 v93[24];
  uint64_t v94;
  void *v95;

  v87 = a1;
  v3 = sub_10001A9A8(&qword_1010EF3A8);
  __chkstk_darwin(v3);
  v76 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Row(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v75 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF370);
  v83 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v73 - v12;
  v86 = sub_10001A9A8(&qword_1010EF358);
  v82 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v92 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Table(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v84 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v85 = (char *)&v73 - v20;
  v21 = __chkstk_darwin(v19);
  v88 = (char *)&v73 - v22;
  v23 = __chkstk_darwin(v21);
  v89 = (char *)&v73 - v24;
  __chkstk_darwin(v23);
  v90 = (char *)&v73 - v25;
  v26 = *(_QWORD *)(a2 + 32);
  v27 = sub_10001A9A8(&qword_1010EF360);
  v28 = v91;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v26, &type metadata for () + 1, v27);
  if (*(_QWORD *)v93)
  {
    v78 = v11;
    v81 = v28;
    v73 = v6;
    v74 = v5;
    v91 = *(_QWORD *)(*(_QWORD *)v93 + 16);
    swift_retain();
    swift_release();
    v29 = (char *)(a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo);
    v94 = v15;
    v95 = &protocol witness table for Table;
    v30 = sub_100018F08(v93);
    v31 = *(void (**)(_QWORD *, char *, uint64_t))(v16 + 16);
    v77 = v29;
    v79 = v16;
    v80 = v31;
    v31(v30, v29, v15);
    if (qword_1010EA4B8 != -1)
      swift_once(&qword_1010EA4B8, sub_100D291C4);
    v32 = sub_10001A9E8(v8, (uint64_t)qword_1011B8110);
    QueryType.subscript.getter(v32, v15, &type metadata for Int64, &protocol witness table for Table);
    v33 = v78;
    QueryType.subscript.getter(v32, v15, &type metadata for Int64, &protocol witness table for Table);
    v34 = v92;
    == infix<A>(_:_:)(v13, v33, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v35 = *(void (**)(char *, uint64_t))(v83 + 8);
    v35(v33, v8);
    v35(v13, v8);
    v36 = v84;
    QueryType.join(_:on:)(v93, v34, v15, &protocol witness table for Table);
    v37 = v34;
    v38 = v86;
    v83 = *(_QWORD *)(v82 + 8);
    ((void (*)(char *, uint64_t))v83)(v37, v86);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v93);
    if (qword_1010EA520 != -1)
      swift_once(&qword_1010EA520, sub_100D29934);
    v39 = sub_10001A9A8(&qword_1010EF3E8);
    v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B8248);
    v94 = v39;
    v95 = (void *)sub_1000193A4(&qword_1010EF3F0, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
    v41 = sub_100018F08(v93);
    v42 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
    v82 = v40;
    v42(v41, v40, v39);
    v43 = v85;
    SchemaType.select(_:_:)(v93, _swiftEmptyArrayStorage, v15, &protocol witness table for Table);
    v44 = *(void (**)(char *, uint64_t))(v79 + 8);
    v44(v36, v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v93);
    v45 = v88;
    if (qword_1010EA4C0 != -1)
      swift_once(&qword_1010EA4C0, sub_100D29250);
    v46 = sub_10001A9A8(&qword_1010EF3B8);
    v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B8128);
    v48 = v87 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
    v49 = type metadata accessor for UUID(0);
    v50 = v92;
    == infix<A>(_:_:)(v47, v48, v49, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v50, v15, &protocol witness table for Table);
    ((void (*)(char *, uint64_t))v83)(v50, v38);
    v44(v43, v15);
    v51 = sub_10001A9A8(&qword_1010EF3C8);
    v52 = swift_allocObject(v51, 72, 7);
    *(_OWORD *)(v52 + 16) = xmmword_100E22B00;
    v53 = v45;
    if (qword_1010EA548 != -1)
      swift_once(&qword_1010EA548, sub_100D29BFC);
    v54 = sub_10001A9A8(&qword_1010EF3B0);
    sub_10001A9E8(v54, (uint64_t)qword_1011B82C0);
    v55 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v54, v55);
    v56 = v89;
    QueryType.order(_:)(v52, v15, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    v44(v53, v15);
    v57 = v90;
    QueryType.limit(_:)(1, 0, v15, &protocol witness table for Table);
    v44(v56, v15);
    v94 = v15;
    v95 = &protocol witness table for Table;
    v58 = sub_100018F08(v93);
    v80(v58, v57, v15);
    v59 = v81;
    Connection.prepare(_:)(v93);
    if (v59)
    {
      v44(v57, v15);
      swift_release();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v93);
    }
    else
    {
      v64 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v93);
      dispatch thunk of _AnySequenceBox._makeIterator()(v64);
      v65 = swift_release();
      v66 = (uint64_t)v76;
      dispatch thunk of _AnyIteratorBoxBase.next()(v65);
      swift_release();
      v67 = v73;
      v68 = v74;
      v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v66, 1, v74);
      if (v69 == 1)
      {
        v44(v57, v15);
        swift_release();
        sub_100004048(v66, &qword_1010EF3A8);
        v70 = 0;
      }
      else
      {
        v71 = v75;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v75, v66, v68);
        v72 = sub_10012C49C();
        Row.subscript.getter(v93, v82, &type metadata for UInt8, v72);
        swift_release();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v68);
        v44(v57, v15);
        v70 = v93[0];
      }
      return v70 | ((v69 == 1) << 8);
    }
  }
  else
  {
    v61 = sub_10012C434();
    v62 = swift_allocError(&type metadata for DatabaseError, v61, 0, 0);
    *(_DWORD *)v63 = 2;
    *(_BYTE *)(v63 + 4) = 1;
    return swift_willThrow(v62);
  }
}

uint64_t sub_100123AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD);
  void (*v26)(char *, uint64_t);
  _QWORD *v27;
  void (*v28)(_QWORD *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, uint64_t);
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  void (*v65)(char *, _QWORD, uint64_t);
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_QWORD *, uint64_t, uint64_t);
  uint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  void *v87;
  char *v88;

  v73 = a1;
  v63 = a3;
  v80 = sub_10001A9A8(&qword_1010EF370);
  v69 = *(_QWORD *)(v80 - 8);
  v4 = __chkstk_darwin(v80);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v63 - v7;
  v82 = sub_10001A9A8(&qword_1010EF358);
  v68 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v88 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for JoinType(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Table(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v79 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v70 = (char *)&v63 - v19;
  v20 = __chkstk_darwin(v18);
  v74 = (char *)&v63 - v21;
  v22 = __chkstk_darwin(v20);
  v75 = (char *)&v63 - v23;
  __chkstk_darwin(v22);
  v76 = (char *)&v63 - v24;
  v78 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
  v67 = v11;
  v25 = *(void (**)(_QWORD))(v11 + 104);
  v72 = v13;
  v66 = enum case for JoinType.leftOuter(_:);
  v81 = v10;
  v65 = (void (*)(char *, _QWORD, uint64_t))v25;
  v25(v13);
  v84 = a2;
  v26 = (void (*)(char *, uint64_t))(a2
                                             + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation);
  v86 = v14;
  v87 = &protocol witness table for Table;
  v27 = sub_100018F08(v85);
  v71 = v15;
  v28 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 16);
  v64 = v26;
  v83 = v28;
  v28(v27, (uint64_t)v26, v14);
  if (qword_1010EA4B8 != -1)
    swift_once(&qword_1010EA4B8, sub_100D291C4);
  v29 = v80;
  v30 = sub_10001A9E8(v80, (uint64_t)qword_1011B8110);
  v31 = v29;
  QueryType.subscript.getter(v30, v14, &type metadata for Int64, &protocol witness table for Table);
  QueryType.subscript.getter(v30, v14, &type metadata for Int64, &protocol witness table for Table);
  == infix<A>(_:_:)(v8, v6, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v32 = *(void (**)(char *, uint64_t))(v69 + 8);
  v64 = v32;
  v32(v6, v31);
  v32(v8, v31);
  v33 = v72;
  QueryType.join(_:_:on:)(v72, v85, v88, v14, &protocol witness table for Table);
  v68 = *(_QWORD *)(v68 + 8);
  ((void (*)(char *, uint64_t))v68)(v88, v82);
  v69 = *(_QWORD *)(v67 + 8);
  v34 = v81;
  ((void (*)(char *, uint64_t))v69)(v33, v81);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v85);
  v65(v33, v66, v34);
  v35 = v84 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  v86 = v14;
  v87 = &protocol witness table for Table;
  v36 = sub_100018F08(v85);
  v83(v36, v35, v14);
  QueryType.subscript.getter(v30, v14, &type metadata for Int64, &protocol witness table for Table);
  QueryType.subscript.getter(v30, v14, &type metadata for Int64, &protocol witness table for Table);
  == infix<A>(_:_:)(v8, v6, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  v37 = v6;
  v38 = v80;
  v39 = v64;
  v64(v37, v80);
  v39(v8, v38);
  v40 = (void (*)(char *, uint64_t))v68;
  v41 = v88;
  v42 = v70;
  v43 = v79;
  QueryType.join(_:_:on:)(v33, v85, v88, v14, &protocol witness table for Table);
  v44 = v82;
  v40(v41, v82);
  ((void (*)(char *, uint64_t))v69)(v33, v81);
  v45 = *(void (**)(char *, uint64_t))(v71 + 8);
  v45(v43, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v85);
  v46 = v42;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v47 = sub_10001A9A8(&qword_1010EF3B8);
  v48 = sub_10001A9E8(v47, (uint64_t)qword_1011B8128);
  v49 = v73 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
  v50 = type metadata accessor for UUID(0);
  == infix<A>(_:_:)(v48, v49, v50, &protocol witness table for UUID, &protocol witness table for String);
  v51 = v74;
  QueryType.filter(_:)(v41, v14, &protocol witness table for Table);
  v40(v41, v44);
  v45(v46, v14);
  v52 = sub_10001A9A8(&qword_1010EF3C8);
  v53 = swift_allocObject(v52, 72, 7);
  *(_OWORD *)(v53 + 16) = xmmword_100E22B00;
  if (qword_1010EA548 != -1)
    swift_once(&qword_1010EA548, sub_100D29BFC);
  v54 = sub_10001A9A8(&qword_1010EF3B0);
  sub_10001A9E8(v54, (uint64_t)qword_1011B82C0);
  v55 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v54, v55);
  v56 = v75;
  QueryType.order(_:)(v53, v14, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v45(v51, v14);
  v57 = v76;
  QueryType.limit(_:)(1, 0, v14, &protocol witness table for Table);
  v45(v56, v14);
  v86 = v14;
  v87 = &protocol witness table for Table;
  v58 = sub_100018F08(v85);
  v83(v58, (uint64_t)v57, v14);
  v59 = v77;
  sub_1001201B4((uint64_t)v85, v84);
  if (v59)
  {
    v45(v57, v14);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v85);
  }
  else
  {
    v61 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v85);
    dispatch thunk of _AnySequenceBox._makeIterator()(v61);
    v62 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v62);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v45)(v57, v14);
  }
}

uint64_t sub_10012422C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  Swift::String v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  void (*v68)(_QWORD *, uint64_t, uint64_t);
  void (*v69)(void);
  unsigned int v70;
  uint64_t v71;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EF4E0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_10001A9A8(&qword_1010EF370);
  v88 = *(_QWORD *)(v96 - 8);
  v8 = __chkstk_darwin(v96);
  v82 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v81 = (char *)&v67 - v10;
  v93 = sub_10001A9A8(&qword_1010EF358);
  v80 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v92 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for JoinType(0);
  v89 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v91 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF500);
  v85 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v84 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Table(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v90 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v83 = (char *)&v67 - v20;
  __chkstk_darwin(v19);
  v94 = (char *)&v67 - v21;
  v22 = *(_QWORD *)(a1 + 32);
  v23 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a1, v22, (char *)&type metadata for () + 8, v23);
  v24 = v97;
  if (v97)
  {
    v75 = v1;
    v76 = v13;
    v77 = v7;
    v78 = v5;
    v79 = v4;
    v74 = *(_QWORD *)(v97 + 16);
    swift_retain();
    swift_release(v24);
    v25 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
    if (qword_1010EA4B8 != -1)
      swift_once(&qword_1010EA4B8, sub_100D291C4);
    v26 = v96;
    v27 = sub_10001A9E8(v96, (uint64_t)qword_1011B8110);
    v99 = v26;
    v100 = (void *)sub_1000193A4(&qword_1010EF3E0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
    sub_100018F08(&v97);
    v71 = v25;
    QueryType.subscript.getter(v27, v15, &type metadata for Int64, &protocol witness table for Table);
    v28 = v94;
    SchemaType.select(_:_:)(&v97, _swiftEmptyArrayStorage, v15, &protocol witness table for Table);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v97);
    v29 = Expressible.asSQL()();
    countAndFlagsBits = v29._countAndFlagsBits;
    object = v29._object;
    v87 = *(void (**)(char *, uint64_t))(v16 + 8);
    v87(v28, v15);
    v86 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisement;
    v70 = enum case for JoinType.leftOuter(_:);
    v69 = *(void (**)(void))(v89 + 104);
    v30 = v91;
    v69();
    v31 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementLocation;
    v99 = v15;
    v100 = &protocol witness table for Table;
    v32 = sub_100018F08(&v97);
    v68 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v16 + 16);
    v68(v32, v31, v15);
    v33 = v81;
    v67 = v27;
    QueryType.subscript.getter(v27, v15, &type metadata for Int64, &protocol witness table for Table);
    v34 = v82;
    QueryType.subscript.getter(v27, v15, &type metadata for Int64, &protocol witness table for Table);
    v35 = v92;
    == infix<A>(_:_:)(v33, v34, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v36 = *(void (**)(char *, uint64_t))(v88 + 8);
    v37 = v96;
    v36(v34, v96);
    v36(v33, v37);
    QueryType.join(_:_:on:)(v30, &v97, v35, v15, &protocol witness table for Table);
    v88 = *(_QWORD *)(v80 + 8);
    ((void (*)(char *, uint64_t))v88)(v35, v93);
    v89 = *(_QWORD *)(v89 + 8);
    v38 = v95;
    ((void (*)(char *, uint64_t))v89)(v30, v95);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v97);
    ((void (*)(char *, _QWORD, uint64_t))v69)(v30, v70, v38);
    v99 = v15;
    v100 = &protocol witness table for Table;
    v39 = sub_100018F08(&v97);
    v68(v39, v71, v15);
    v40 = v67;
    QueryType.subscript.getter(v67, v15, &type metadata for Int64, &protocol witness table for Table);
    QueryType.subscript.getter(v40, v15, &type metadata for Int64, &protocol witness table for Table);
    v41 = v92;
    == infix<A>(_:_:)(v33, v34, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v42 = v96;
    v36(v34, v96);
    v36(v33, v42);
    v43 = v83;
    v45 = v90;
    v44 = v91;
    QueryType.join(_:_:on:)(v91, &v97, v41, v15, &protocol witness table for Table);
    v46 = v93;
    ((void (*)(char *, uint64_t))v88)(v41, v93);
    ((void (*)(char *, uint64_t))v89)(v44, v95);
    v47 = v94;
    v87(v45, v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v97);
    v97 = 0;
    v98 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v48._object = (void *)0x8000000100EC81F0;
    v48._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v48);
    v101 = 28;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 0xD00000000000002DLL;
    v50._object = (void *)0x8000000100EC8210;
    String.append(_:)(v50);
    v51._countAndFlagsBits = countAndFlagsBits;
    v51._object = object;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 41;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    v53 = v97;
    v54 = v98;
    v55 = sub_1000193A4(&qword_1010EF458, &qword_1010EF358, (const char *)&protocol conformance descriptor for Expression<A>);
    ExpressionType.init(literal:)(v53, v54, v46, v55);
    QueryType.filter(_:)(v41, v15, &protocol witness table for Table);
    ((void (*)(char *, uint64_t))v88)(v41, v46);
    v56 = v87;
    v87(v43, v15);
    if (qword_1010EA518 != -1)
      swift_once(&qword_1010EA518, sub_100D298A0);
    v57 = sub_10001A9A8(&qword_1010EF408);
    sub_10001A9E8(v57, (uint64_t)qword_1011B8230);
    v58 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
    v59 = v77;
    ExpressionType<>.count.getter(v57, v58, &protocol witness table for Data);
    v60 = v84;
    SchemaType.select<A>(_:)(v59, v15, &type metadata for Int, &protocol witness table for Table, &protocol witness table for Int);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v59, v79);
    v56(v47, v15);
    v2 = v74;
    v61 = v75;
    Connection.scalar<A>(_:)(&v97, v60, &type metadata for Int, &protocol witness table for Int);
    v62 = v76;
    if (v61)
    {
      (*(void (**)(char *, uint64_t))(v85 + 8))(v60, v76);
      swift_release(v2);
    }
    else
    {
      swift_release(v2);
      v2 = v97;
      (*(void (**)(char *, uint64_t))(v85 + 8))(v60, v62);
    }
  }
  else
  {
    v63 = sub_10012C434();
    v64 = swift_allocError(&type metadata for DatabaseError, v63, 0, 0);
    *(_DWORD *)v65 = 2;
    *(_BYTE *)(v65 + 4) = 1;
    swift_willThrow(v64);
  }
  return v2;
}

uint64_t sub_100124B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v8, &type metadata for () + 1, v9);
  if (v22)
  {
    v10 = *(_QWORD *)(v22 + 24);
    swift_retain();
    v11 = swift_release();
    v12 = __chkstk_darwin(v11);
    *(&v21 - 4) = a2;
    *(&v21 - 3) = a1;
    *(&v21 - 2) = v10;
    v13 = UUID.init()(v12);
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    Connection.savepoint(_:block:)(v14, v16, sub_10012C788, &v21 - 6);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v18 = sub_10012C434();
    v19 = swift_allocError(&type metadata for DatabaseError, v18, 0, 0);
    *(_DWORD *)v20 = 2;
    *(_BYTE *)(v20 + 4) = 1;
    return swift_willThrow(v19);
  }
}

uint64_t sub_100124D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[6];
  uint64_t v67;

  v65 = a3;
  v67 = a2;
  v4 = type metadata accessor for OnConflict(0);
  v61 = *(_QWORD *)(v4 - 8);
  v62 = v4;
  __chkstk_darwin(v4);
  v60 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Insert(0);
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  __chkstk_darwin(v6);
  v56 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10001A9A8(&qword_1010EF358);
  v8 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v10 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Table(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v51 - v16;
  v55 = a1;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v18 = sub_10001A9A8(&qword_1010EF3B8);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B8128);
  v20 = type metadata accessor for UUID(0);
  v59 = v19;
  == infix<A>(_:_:)(v19, v67, v20, &protocol witness table for UUID, &protocol witness table for String);
  QueryType.filter(_:)(v10, v11, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v63);
  QueryType.limit(_:)(1, 0, v11, &protocol witness table for Table);
  v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v15, v11);
  v66[3] = v11;
  v66[4] = &protocol witness table for Table;
  v22 = sub_100018F08(v66);
  (*(void (**)(_QWORD *, char *, uint64_t))(v12 + 16))(v22, v17, v11);
  v23 = v64;
  Connection.prepare(_:)(v66);
  if (v23)
  {
    v21(v17, v11);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
  }
  else
  {
    v64 = v20;
    v25 = v59;
    v26 = v67;
    v27 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
    v28 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v27);
    swift_release();
    v29 = *(_QWORD *)(v28 + 16);
    swift_release();
    if (v29)
    {
      v53 = v11;
      v54 = (uint64_t (*)(uint64_t, uint64_t))v21;
      v63 = (uint64_t)v17;
      v51[1] = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
      (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, enum case for OnConflict.replace(_:), v62);
      v30 = sub_10001A9A8(&qword_1010EF388);
      v31 = type metadata accessor for Setter(0);
      v32 = swift_allocObject(v30, ((*(unsigned __int8 *)(*(_QWORD *)(v31 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v31 - 8) + 80))+ 5 * *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v31 - 8) + 80) | 7);
      *(_OWORD *)(v32 + 16) = xmmword_100E27910;
      v52 = v32;
      <- infix<A>(_:_:)(v25, v26, v64, &protocol witness table for UUID);
      if (qword_1010EA580 != -1)
        swift_once(&qword_1010EA580, sub_100D29FFC);
      v33 = sub_10001A9A8(&qword_1010EF3E8);
      v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B8368);
      v35 = (int *)type metadata accessor for KeySyncMetadata(0);
      LOBYTE(v66[0]) = *(_BYTE *)(v26 + v35[5]);
      v36 = sub_10012C49C();
      <- infix<A>(_:_:)(v34, v66, &type metadata for UInt8, v36);
      if (qword_1010EA4D0 != -1)
        swift_once(&qword_1010EA4D0, sub_100D29370);
      v37 = sub_10001A9E8(v33, (uint64_t)qword_1011B8158);
      LOBYTE(v66[0]) = *(_BYTE *)(v26 + v35[6]);
      <- infix<A>(_:_:)(v37, v66, &type metadata for UInt8, v36);
      if (qword_1010EA4C8 != -1)
        swift_once(&qword_1010EA4C8, sub_100D292E4);
      v38 = sub_10001A9A8(&qword_1010EF430);
      v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B8140);
      v66[0] = *(_QWORD *)(v26 + v35[7]);
      v40 = sub_10012C5BC();
      <- infix<A>(_:_:)(v39, v66, &type metadata for UInt64, v40);
      if (qword_1010EA578 != -1)
        swift_once(&qword_1010EA578, sub_100D29F68);
      v41 = sub_10001A9A8(&qword_1010EF3B0);
      v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B8350);
      v43 = v26 + v35[8];
      v44 = type metadata accessor for Date(0);
      <- infix<A>(_:_:)(v42, v43, v44, &protocol witness table for Date);
      v45 = v56;
      v46 = v60;
      v47 = v53;
      QueryType.insert(or:_:)(v60, v52, v53, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v62);
      Connection.run(_:)(v45);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v45, v58);
      return v54(v63, v47);
    }
    else
    {
      v48 = sub_10012C600();
      v49 = swift_allocError(&type metadata for ObservationStore.Error, v48, 0, 0);
      *v50 = 0;
      swift_willThrow(v49);
      return ((uint64_t (*)(char *, uint64_t))v21)(v17, v11);
    }
  }
}

uint64_t sub_100125300@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  void (*v37)(char *, uint64_t);
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  void (*v79)(char *, uint64_t);
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  void (*v118)(char *, _QWORD, void (*)(char *, uint64_t));
  unsigned int v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  char *v140;
  void (*v141)(char *, char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;

  v130 = a3;
  v128 = a2;
  v127 = a1;
  v114 = a5;
  v7 = sub_10001A9A8(&qword_1010EF3A8);
  __chkstk_darwin(v7);
  v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for Row(0);
  v112 = *(_QWORD *)(v113 - 8);
  v10 = __chkstk_darwin(v113);
  v110 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v111 = (char *)&v109 - v12;
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v129 = (uint64_t)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v131 = *(_QWORD *)(v15 - 8);
  v132 = v15;
  __chkstk_darwin(v15);
  v122 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010EF370);
  v138 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v126 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v109 - v20;
  v142 = sub_10001A9A8(&qword_1010EF358);
  v125 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v136 = (char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = (void (*)(char *, uint64_t))type metadata accessor for JoinType(0);
  v135 = *((_QWORD *)v139 - 1);
  __chkstk_darwin(v139);
  v24 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Table(0);
  v146 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v140 = (char *)&v109 - v30;
  v31 = __chkstk_darwin(v29);
  v137 = (char *)&v109 - v32;
  __chkstk_darwin(v31);
  v133 = (char *)&v109 - v33;
  v34 = *(_QWORD *)(a4 + 32);
  v35 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a4, v34, &type metadata for () + 1, v35);
  if (v143)
  {
    v120 = v28;
    v121 = v5;
    v109 = v9;
    v123 = *(_QWORD *)(v143 + 16);
    swift_retain();
    swift_release();
    v36 = *(void (**)(_QWORD))(v135 + 104);
    v119 = enum case for JoinType.leftOuter(_:);
    v118 = (void (*)(char *, _QWORD, void (*)(char *, uint64_t)))v36;
    v36(v24);
    v124 = a4;
    v37 = (void (*)(char *, uint64_t))(a4
                                               + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEventLocation);
    v144 = v25;
    v145 = &protocol witness table for Table;
    v38 = (char *)sub_100018F08(&v143);
    v39 = *(void (**)(char *, char *, uint64_t))(v146 + 16);
    v116 = v37;
    v141 = v39;
    v39(v38, (char *)v37, v25);
    v134 = v24;
    if (qword_1010EA598 != -1)
      swift_once(&qword_1010EA598, sub_100D2A1A4);
    v40 = v17;
    v41 = sub_10001A9E8(v17, (uint64_t)qword_1011B83B0);
    v115 = v41;
    QueryType.subscript.getter(v41, v25, &type metadata for Int64, &protocol witness table for Table);
    v42 = v126;
    QueryType.subscript.getter(v41, v25, &type metadata for Int64, &protocol witness table for Table);
    v43 = v136;
    == infix<A>(_:_:)(v21, v42, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v44 = *(void (**)(char *, uint64_t))(v138 + 8);
    v116 = v44;
    v117 = v40;
    v44(v42, v40);
    v44(v21, v40);
    v45 = v134;
    QueryType.join(_:_:on:)(v134, &v143, v43, v25, &protocol witness table for Table);
    v138 = *(_QWORD *)(v125 + 8);
    ((void (*)(char *, uint64_t))v138)(v43, v142);
    v135 = *(_QWORD *)(v135 + 8);
    v46 = v45;
    v47 = v45;
    v48 = v139;
    ((void (*)(char *, _QWORD))v135)(v47, v139);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v143);
    v118(v46, v119, v48);
    v49 = v124 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_attachmentInfo;
    v144 = v25;
    v145 = &protocol witness table for Table;
    v50 = (char *)sub_100018F08(&v143);
    v141(v50, (char *)v49, v25);
    v51 = v115;
    QueryType.subscript.getter(v115, v25, &type metadata for Int64, &protocol witness table for Table);
    v52 = v51;
    v53 = v140;
    QueryType.subscript.getter(v52, v25, &type metadata for Int64, &protocol witness table for Table);
    == infix<A>(_:_:)(v21, v42, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
    v54 = v42;
    v55 = v117;
    v56 = v116;
    v116(v54, v117);
    v56(v21, v55);
    v57 = v43;
    v58 = v137;
    v59 = v134;
    QueryType.join(_:_:on:)(v134, &v143, v57, v25, &protocol witness table for Table);
    ((void (*)(char *, uint64_t))v138)(v57, v142);
    ((void (*)(char *, _QWORD))v135)(v59, v139);
    v60 = v146;
    v61 = *(void (**)(char *, uint64_t))(v146 + 8);
    v61(v53, v25);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v143);
    v62 = v60;
    v63 = v25;
    if (qword_1010EA4C0 != -1)
      swift_once(&qword_1010EA4C0, sub_100D29250);
    v135 = sub_10001A9A8(&qword_1010EF3B8);
    v64 = sub_10001A9E8(v135, (uint64_t)qword_1011B8128);
    v65 = type metadata accessor for BeaconIdentifier(0);
    v66 = v132;
    == infix<A>(_:_:)(v64, v127 + *(int *)(v65 + 20), v132, &protocol witness table for UUID, &protocol witness table for String);
    v67 = v133;
    QueryType.filter(_:)(v57, v63, &protocol witness table for Table);
    v68 = v142;
    ((void (*)(char *, uint64_t))v138)(v57, v142);
    v139 = v61;
    v61(v58, v63);
    v69 = v128;
    if (v128 != 8)
    {
      v70 = v68;
      v141(v53, v67, v63);
      if (qword_1010EA588 != -1)
        swift_once(&qword_1010EA588, sub_100D2A084);
      v71 = sub_10001A9A8(&qword_1010EF4D0);
      v72 = sub_10001A9E8(v71, (uint64_t)qword_1011B8380);
      LODWORD(v143) = v69;
      v73 = sub_10012C6D4();
      v74 = v136;
      == infix<A>(_:_:)(v72, &v143, &type metadata for UInt32, v73, &protocol witness table for Int64);
      QueryType.filter(_:)(v74, v63, &protocol witness table for Table);
      ((void (*)(char *, uint64_t))v138)(v74, v70);
      v75 = v139;
      v139(v53, v63);
      v75(v67, v63);
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v67, v58, v63);
    }
    v76 = v129;
    sub_10000F9B8(v130, v129, &qword_1010ED860);
    v77 = v131;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v76, 1, v66) == 1)
    {
      sub_100004048(v76, &qword_1010ED860);
      v78 = v141;
      v79 = v139;
    }
    else
    {
      v84 = v122;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v122, v76, v66);
      v141(v53, v67, v63);
      if (qword_1010EA5A0 != -1)
        swift_once(&qword_1010EA5A0, sub_100D2A234);
      v85 = sub_10001A9E8(v135, (uint64_t)qword_1011B83C8);
      v86 = v136;
      == infix<A>(_:_:)(v85, v84, v66, &protocol witness table for UUID, &protocol witness table for String);
      QueryType.filter(_:)(v86, v63, &protocol witness table for Table);
      ((void (*)(char *, uint64_t))v138)(v86, v142);
      v87 = v139;
      v139(v53, v63);
      v88 = v66;
      v79 = v87;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v84, v88);
      v87(v67, v63);
      (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v67, v58, v63);
      v78 = v141;
    }
    v89 = v120;
    v78(v120, v67, v63);
    v90 = sub_10001A9A8(&qword_1010EF3C8);
    v91 = swift_allocObject(v90, 72, 7);
    *(_OWORD *)(v91 + 16) = xmmword_100E22B00;
    if (qword_1010EA578 != -1)
      swift_once(&qword_1010EA578, sub_100D29F68);
    v92 = sub_10001A9A8(&qword_1010EF3B0);
    sub_10001A9E8(v92, (uint64_t)qword_1011B8350);
    v93 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v92, v93);
    v94 = v140;
    QueryType.order(_:)(v91, v63, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    v79(v89, v63);
    v95 = v137;
    QueryType.limit(_:)(1, 0, v63, &protocol witness table for Table);
    v79(v94, v63);
    v79(v67, v63);
    (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v67, v95, v63);
    v144 = v63;
    v145 = &protocol witness table for Table;
    v96 = (char *)sub_100018F08(&v143);
    v141(v96, v67, v63);
    v97 = v121;
    Connection.prepare(_:)(&v143);
    if (v97)
    {
      v79(v67, v63);
      swift_release();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v143);
    }
    else
    {
      v98 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v143);
      dispatch thunk of _AnySequenceBox._makeIterator()(v98);
      v99 = swift_release();
      v100 = (uint64_t)v109;
      dispatch thunk of _AnyIteratorBoxBase.next()(v99);
      swift_release();
      v101 = v112;
      v102 = v113;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v100, 1, v113) == 1)
      {
        v79(v67, v63);
        swift_release();
        sub_100004048(v100, &qword_1010EF3A8);
        v103 = type metadata accessor for DeviceEvent(0);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v114, 1, 1, v103);
      }
      else
      {
        v104 = v111;
        (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v111, v100, v102);
        v105 = (uint64_t)v110;
        (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v110, v104, v102);
        v106 = v124;
        swift_retain();
        v107 = v114;
        sub_100126044(v105, v106, v114);
        swift_release();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v104, v102);
        v79(v67, v63);
        v108 = type metadata accessor for DeviceEvent(0);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56))(v107, 0, 1, v108);
      }
    }
  }
  else
  {
    v80 = sub_10012C434();
    v81 = swift_allocError(&type metadata for DatabaseError, v80, 0, 0);
    *(_DWORD *)v82 = 2;
    *(_BYTE *)(v82 + 4) = 1;
    return swift_willThrow(v81);
  }
}

uint64_t sub_100126044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t Error;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v101 = a3;
  Error = type metadata accessor for QueryError(0);
  v89 = *(_QWORD *)(Error - 8);
  __chkstk_darwin(Error);
  v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for Date(0);
  v100 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v108 = (char **)((char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v107 = sub_10001A9A8(&qword_1010EF3B0);
  v99 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v106 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EF370);
  v96 = *(_QWORD *)(v10 - 8);
  v97 = v10;
  __chkstk_darwin(v10);
  v95 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = (_QWORD *)type metadata accessor for UUID(0);
  v102 = *(v110 - 1);
  v12 = __chkstk_darwin(v110);
  v98 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v91 = (char *)&v87 - v14;
  v15 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v93 = *(_QWORD *)(v15 - 8);
  v94 = v15;
  __chkstk_darwin(v15);
  v88 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010EF480);
  v18 = __chkstk_darwin(v17);
  v92 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v105 = (uint64_t)&v87 - v20;
  v21 = type metadata accessor for Row(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v90 = (char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v87 - v25;
  v27 = sub_10001A9A8(&qword_1011003F0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v87 - v31;
  v104 = v22;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v112 = a1;
  v113 = v21;
  v33(v26, a1, v21);
  swift_retain();
  v111 = a2;
  v34 = v103;
  sub_10012C0BC((uint64_t)v26, v30);
  if (!v34)
  {
    v39 = type metadata accessor for DeviceEvent.Location(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v30, 0, 1, v39);
    sub_100005CF0((uint64_t)v30, (uint64_t)v32, &qword_1011003F0);
    goto LABEL_6;
  }
  v114 = v34;
  swift_errorRetain(v34);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v7, &v114, v35, Error, 0) & 1) == 0)
  {
LABEL_28:
    v86 = swift_errorRelease(v114);
    swift_willThrow(v86);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v112, v113);
  }
  v36 = v89;
  v37 = (*(uint64_t (**)(char *, uint64_t))(v89 + 88))(v7, Error);
  if (v37 != enum case for QueryError.noSuchColumn(_:))
  {
    v40 = v110;
    if (v37 == enum case for QueryError.unexpectedNullValue(_:))
    {
      swift_errorRelease(v34);
      (*(void (**)(char *, uint64_t))(v36 + 96))(v7, Error);
      swift_bridgeObjectRelease();
      v85 = type metadata accessor for DeviceEvent.Location(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v32, 1, 1, v85);
      swift_errorRelease(v114);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, Error);
    goto LABEL_28;
  }
  swift_errorRelease(v34);
  (*(void (**)(char *, uint64_t))(v36 + 96))(v7, Error);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = type metadata accessor for DeviceEvent.Location(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v32, 1, 1, v38);
  swift_errorRelease(v114);
LABEL_6:
  v40 = v110;
LABEL_7:
  v87 = v32;
  v41 = v90;
  v33(v90, v112, v113);
  v42 = qword_1010EA5A0;
  v43 = v111;
  swift_retain();
  v44 = v101;
  v45 = (uint64_t)v92;
  if (v42 != -1)
    swift_once(&qword_1010EA5A0, sub_100D2A234);
  v46 = sub_10001A9A8(&qword_1010EF3B8);
  v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B83C8);
  v48 = v91;
  Row.get<A>(_:)(v47, v40, &protocol witness table for UUID);
  swift_release();
  v90 = *(char **)(v104 + 8);
  ((void (*)(char *, uint64_t))v90)(v41, v113);
  v49 = (uint64_t)v88;
  (*(void (**)(char *, char *, _QWORD *))(v102 + 32))(v88, v48, v40);
  sub_1000126EC(v49, v45, type metadata accessor for DeviceEvent.AttachmentInfo);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v45, 0, 1, v94);
  v50 = v45;
  v51 = v105;
  sub_100005CF0(v50, v105, &qword_1010EF480);
  v94 = type metadata accessor for DeviceEvent(0);
  sub_10000F9B8(v51, v44 + *(int *)(v94 + 32), &qword_1010EF480);
  v52 = v43 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
  v53 = v112;
  if (qword_1010EA598 != -1)
    swift_once(&qword_1010EA598, sub_100D2A1A4);
  v54 = v97;
  v55 = sub_10001A9E8(v97, (uint64_t)qword_1011B83B0);
  v56 = type metadata accessor for Table(0);
  v57 = v95;
  v103 = v56;
  v104 = v52;
  QueryType.subscript.getter(v55, v56, &type metadata for Int64, &protocol witness table for Table);
  Row.subscript.getter(&v114, v57, &type metadata for Int64, &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v57, v54);
  *(_QWORD *)v44 = v114;
  *(_BYTE *)(v44 + 8) = 0;
  v58 = v98;
  if (qword_1010EA4E8 != -1)
    swift_once(&qword_1010EA4E8, sub_100D29524);
  v97 = 0;
  v59 = sub_10001A9E8(v46, (uint64_t)qword_1011B81A0);
  v60 = v110;
  Row.subscript.getter(v58, v59, v110, &protocol witness table for UUID);
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v61 = sub_10001A9E8(v46, (uint64_t)qword_1011B8128);
  v62 = v94;
  v63 = v44 + *(int *)(v94 + 36);
  v64 = type metadata accessor for BeaconIdentifier(0);
  Row.subscript.getter((_QWORD *)(v63 + *(int *)(v64 + 20)), v61, v60, &protocol witness table for UUID);
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(v102 + 32))(v63, v58, v60);
  if (qword_1010EA578 != -1)
    swift_once(&qword_1010EA578, sub_100D29F68);
  v65 = v107;
  v66 = sub_10001A9E8(v107, (uint64_t)qword_1011B8350);
  v67 = v106;
  v68 = v109;
  QueryType.subscript.getter(v66, v103, v109, &protocol witness table for Table);
  v69 = v108;
  Row.subscript.getter(v108, v67, v68, &protocol witness table for Date);
  v102 = *(_QWORD *)(v99 + 8);
  ((void (*)(char *, uint64_t))v102)(v67, v65);
  v70 = v44 + *(int *)(v62 + 24);
  v71 = v44;
  v110 = *(_QWORD **)(v100 + 32);
  ((void (*)(uint64_t, _QWORD *, uint64_t))v110)(v70, v69, v68);
  v72 = v62;
  if (qword_1010EA588 != -1)
    swift_once(&qword_1010EA588, sub_100D2A084);
  v73 = sub_10001A9A8(&qword_1010EF4D0);
  v74 = sub_10001A9E8(v73, (uint64_t)qword_1011B8380);
  v75 = sub_10012C6D4();
  Row.subscript.getter(&v114, v74, &type metadata for UInt32, v75);
  v76 = sub_100361D30(v114);
  if (v76 == 8)
    v77 = 0;
  else
    v77 = v76;
  *(_BYTE *)(v71 + 9) = v77;
  v78 = (uint64_t)v87;
  sub_10000F9B8((uint64_t)v87, v71 + *(int *)(v62 + 28), &qword_1011003F0);
  if (qword_1010EA590 != -1)
    swift_once(&qword_1010EA590, sub_100D2A110);
  v79 = v107;
  v80 = sub_10001A9E8(v107, (uint64_t)qword_1011B8398);
  v81 = v106;
  v82 = v109;
  QueryType.subscript.getter(v80, v103, v109, &protocol witness table for Table);
  v83 = v108;
  Row.subscript.getter(v108, v81, v82, &protocol witness table for Date);
  swift_release();
  ((void (*)(uint64_t, uint64_t))v90)(v53, v113);
  ((void (*)(char *, uint64_t))v102)(v81, v79);
  sub_100004048(v105, &qword_1010EF480);
  sub_100004048(v78, &qword_1011003F0);
  return ((uint64_t (*)(uint64_t, _QWORD *, uint64_t))v110)(v71 + *(int *)(v72 + 40), v83, v82);
}

uint64_t *sub_100126A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t);
  char *v80;
  uint64_t v81;
  void (*v82)(char *, _QWORD, uint64_t, uint64_t);
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int (*v106)(uint64_t, uint64_t, char *);
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  void (*v177)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  uint64_t *v201;
  char *v202;
  char *v203;
  char *v204;
  unsigned int (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;

  v208 = (char *)a2;
  v210 = a3;
  v4 = sub_10001A9A8(&qword_1010EF478);
  v5 = __chkstk_darwin(v4);
  v186 = (char *)&v177 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v187 = (uint64_t)&v177 - v8;
  v9 = __chkstk_darwin(v7);
  v185 = (char *)&v177 - v10;
  v11 = __chkstk_darwin(v9);
  v184 = (char *)&v177 - v12;
  v13 = __chkstk_darwin(v11);
  v183 = (char *)&v177 - v14;
  v15 = __chkstk_darwin(v13);
  v188 = (uint64_t)&v177 - v16;
  v17 = __chkstk_darwin(v15);
  v191 = (uint64_t)&v177 - v18;
  v19 = __chkstk_darwin(v17);
  v192 = (uint64_t)&v177 - v20;
  v21 = __chkstk_darwin(v19);
  v195 = (uint64_t)&v177 - v22;
  v23 = __chkstk_darwin(v21);
  v197 = (uint64_t)&v177 - v24;
  v25 = __chkstk_darwin(v23);
  v199 = (uint64_t)&v177 - v26;
  __chkstk_darwin(v25);
  v201 = (uint64_t *)((char *)&v177 - v27);
  v28 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v28);
  v205 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_10001A9A8(&qword_1010ED860);
  v31 = __chkstk_darwin(v30);
  v190 = (char *)&v177 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v193 = (char *)&v177 - v34;
  v35 = __chkstk_darwin(v33);
  v196 = (char *)&v177 - v36;
  v37 = __chkstk_darwin(v35);
  v198 = (char *)&v177 - v38;
  v39 = __chkstk_darwin(v37);
  v200 = (char *)&v177 - v40;
  v41 = __chkstk_darwin(v39);
  v202 = (char *)&v177 - v42;
  __chkstk_darwin(v41);
  v204 = (char *)&v177 - v43;
  v44 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v44 - 8);
  v206 = v44;
  v207 = v45;
  __chkstk_darwin(v44);
  v203 = (char *)&v177 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10001A9A8(&qword_1010EF488);
  v48 = __chkstk_darwin(v47);
  v189 = (uint64_t)&v177 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v48);
  v194 = (uint64_t)&v177 - v51;
  v52 = __chkstk_darwin(v50);
  v54 = (char *)&v177 - v53;
  v55 = __chkstk_darwin(v52);
  v57 = (char *)&v177 - v56;
  v58 = __chkstk_darwin(v55);
  v60 = (char *)&v177 - v59;
  v61 = __chkstk_darwin(v58);
  v63 = (char *)&v177 - v62;
  __chkstk_darwin(v61);
  v65 = (char *)&v177 - v64;
  v66 = type metadata accessor for DeviceEvent(0);
  v67 = *(uint64_t **)(v66 - 8);
  __chkstk_darwin(v66);
  v69 = (char *)&v177 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = v209;
  sub_100125300(a1, 8, (uint64_t)v208, v210, (uint64_t)v65);
  if (!v70)
  {
    v181 = v63;
    v180 = v60;
    v179 = v57;
    v178 = v54;
    v182 = a1;
    v208 = v69;
    v209 = 0;
    v71 = (unsigned int (*)(char *, uint64_t, uint64_t))v67[6];
    if (v71(v65, 1, v66) == 1)
    {
      v72 = &qword_1010EF488;
      v73 = (uint64_t)v65;
LABEL_8:
      sub_100004048(v73, v72);
      return 0;
    }
    v74 = (uint64_t)v208;
    sub_1000126EC((uint64_t)v65, (uint64_t)v208, type metadata accessor for DeviceEvent);
    v75 = v205;
    sub_10000F9B8(v74 + *(int *)(v66 + 32), (uint64_t)v205, &qword_1010EF480);
    v76 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v75, 1, v76) == 1)
    {
      sub_100004048((uint64_t)v75, &qword_1010EF480);
      v77 = v204;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v207 + 56))(v204, 1, 1, v206);
LABEL_7:
      sub_1000126B0(v74, type metadata accessor for DeviceEvent);
      v72 = &qword_1010ED860;
      v73 = (uint64_t)v77;
      goto LABEL_8;
    }
    v78 = v206;
    v67 = (uint64_t *)v207;
    v79 = *(void (**)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))(v207 + 16);
    v80 = v204;
    v79(v204, v75, v206);
    v81 = (uint64_t)v75;
    v77 = v80;
    sub_1000126B0(v81, type metadata accessor for DeviceEvent.AttachmentInfo);
    v82 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v67[7];
    v82(v77, 0, 1, v78);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v67[6])(v77, 1, v78) == 1)
      goto LABEL_7;
    v205 = v71;
    v84 = v77;
    v85 = v203;
    ((void (*)(char *, char *, uint64_t))v67[4])(v203, v84, v78);
    v86 = v78;
    v87 = (uint64_t)v202;
    v79(v202, (unsigned int (*)(char *, uint64_t, uint64_t))v85, v86);
    v82((char *)v87, 0, 1, v86);
    v88 = v210;
    v89 = v209;
    sub_100125300(v182, 3, v87, v210, (uint64_t)v181);
    v209 = v89;
    if (v89)
    {
      sub_100004048(v87, &qword_1010ED860);
      ((void (*)(char *, uint64_t))v67[1])(v85, v86);
      v90 = v74;
LABEL_21:
      sub_1000126B0(v90, type metadata accessor for DeviceEvent);
      return v67;
    }
    v177 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v82;
    v204 = (char *)v79;
    sub_100004048(v87, &qword_1010ED860);
    v91 = (uint64_t)v181;
    v92 = v205(v181, 1, v66);
    v202 = (char *)v66;
    if (v92 == 1)
    {
      sub_100004048(v91, &qword_1010EF488);
      v93 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v67 = v201;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v201, 1, 1, v93);
      v94 = v85;
      v95 = v88;
    }
    else
    {
      v96 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v67 = v201;
      v97 = (char *)v201 + *(int *)(v96 + 48);
      sub_10005972C(v91, (uint64_t)v201, type metadata accessor for DeviceEvent);
      v98 = v91 + *(int *)(v66 + 24);
      v99 = type metadata accessor for Date(0);
      v94 = v203;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
      sub_1000126B0(v91, type metadata accessor for DeviceEvent);
      v100 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56);
      v101 = v96;
      v95 = v210;
      v100(v67, 0, 1, v101);
    }
    v102 = v86;
    v103 = (uint64_t)v200;
    ((void (*)(char *, char *, uint64_t))v204)(v200, v94, v86);
    v177(v103, 0, 1, v86);
    v104 = (uint64_t)v180;
    v105 = v209;
    sub_100125300(v182, 4, v103, v95, (uint64_t)v180);
    v106 = (unsigned int (*)(uint64_t, uint64_t, char *))v205;
    if (v105)
    {
      sub_100004048(v103, &qword_1010ED860);
      sub_100004048((uint64_t)v67, &qword_1010EF478);
      (*(void (**)(char *, uint64_t))(v207 + 8))(v94, v102);
      v90 = v74;
      goto LABEL_21;
    }
    sub_100004048(v103, &qword_1010ED860);
    v107 = v202;
    v108 = v104;
    if (v106(v104, 1, v202) == 1)
    {
      sub_100004048(v104, &qword_1010EF488);
      v109 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v110 = v199;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v199, 1, 1, v109);
      v111 = (uint64_t)v198;
      v112 = v95;
    }
    else
    {
      v113 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v110 = v199;
      v114 = v199 + *(int *)(v113 + 48);
      sub_10005972C(v108, v199, type metadata accessor for DeviceEvent);
      v115 = v108 + *((int *)v107 + 6);
      v116 = type metadata accessor for Date(0);
      v117 = v114;
      v118 = v108;
      v112 = v210;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v117, v115, v116);
      v94 = v203;
      sub_1000126B0(v118, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v110, 0, 1, v113);
      v111 = (uint64_t)v198;
    }
    v119 = (uint64_t)v179;
    ((void (*)(uint64_t, char *, uint64_t))v204)(v111, v94, v102);
    v177(v111, 0, 1, v102);
    sub_100125300(v182, 1, v111, v112, v119);
    sub_100004048(v111, &qword_1010ED860);
    v120 = v202;
    if (v106(v119, 1, v202) == 1)
    {
      sub_100004048(v119, &qword_1010EF488);
      v121 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v197, 1, 1, v121);
      v122 = (uint64_t)v196;
      v123 = (uint64_t)v178;
      v124 = v112;
    }
    else
    {
      v125 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v126 = v197;
      v127 = v197 + *(int *)(v125 + 48);
      sub_10005972C(v119, v197, type metadata accessor for DeviceEvent);
      v128 = v119 + *((int *)v120 + 6);
      v129 = type metadata accessor for Date(0);
      v124 = v210;
      v130 = v128;
      v102 = v206;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 16))(v127, v130, v129);
      v94 = v203;
      sub_1000126B0(v119, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 56))(v126, 0, 1, v125);
      v122 = (uint64_t)v196;
      v123 = (uint64_t)v178;
    }
    ((void (*)(uint64_t, char *, uint64_t))v204)(v122, v94, v102);
    v177(v122, 0, 1, v102);
    sub_100125300(v182, 2, v122, v124, v123);
    v209 = 0;
    v131 = v124;
    sub_100004048(v122, &qword_1010ED860);
    v132 = v202;
    if (v106(v123, 1, v202) == 1)
    {
      sub_100004048(v123, &qword_1010EF488);
      v133 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v195, 1, 1, v133);
      v134 = (uint64_t)v193;
      v135 = v131;
    }
    else
    {
      v136 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v137 = v195;
      v138 = v195 + *(int *)(v136 + 48);
      sub_10005972C(v123, v195, type metadata accessor for DeviceEvent);
      v139 = v123 + *((int *)v132 + 6);
      v140 = type metadata accessor for Date(0);
      v141 = v139;
      v102 = v206;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v138, v141, v140);
      v94 = v203;
      sub_1000126B0(v123, type metadata accessor for DeviceEvent);
      v135 = v210;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 56))(v137, 0, 1, v136);
      v134 = (uint64_t)v193;
    }
    ((void (*)(uint64_t, char *, uint64_t))v204)(v134, v94, v102);
    v177(v134, 0, 1, v102);
    v142 = v194;
    v143 = v209;
    sub_100125300(v182, 5, v134, v135, v194);
    v209 = v143;
    if (v143)
    {
      sub_100004048(v134, &qword_1010ED860);
      v67 = &qword_1010EF478;
      sub_100004048(v195, &qword_1010EF478);
      sub_100004048(v197, &qword_1010EF478);
      v144 = v110;
LABEL_30:
      sub_100004048(v144, &qword_1010EF478);
      sub_100004048((uint64_t)v201, &qword_1010EF478);
      (*(void (**)(char *, uint64_t))(v207 + 8))(v94, v102);
      v90 = (uint64_t)v208;
      goto LABEL_21;
    }
    sub_100004048(v134, &qword_1010ED860);
    v145 = v202;
    if (v106(v142, 1, v202) == 1)
    {
      sub_100004048(v142, &qword_1010EF488);
      v146 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v147 = v192;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 56))(v192, 1, 1, v146);
    }
    else
    {
      v148 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v149 = v192 + *(int *)(v148 + 48);
      sub_10005972C(v142, v192, type metadata accessor for DeviceEvent);
      v150 = v142 + *((int *)v145 + 6);
      v151 = type metadata accessor for Date(0);
      v152 = v149;
      v135 = v210;
      v147 = v192;
      v153 = v150;
      v102 = v206;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 16))(v152, v153, v151);
      v94 = v203;
      sub_1000126B0(v142, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 56))(v147, 0, 1, v148);
    }
    v154 = (uint64_t)v190;
    ((void (*)(char *, char *, uint64_t))v204)(v190, v94, v102);
    v177(v154, 0, 1, v102);
    v155 = v189;
    v156 = v209;
    sub_100125300(v182, 6, v154, v135, v189);
    v209 = v156;
    if (v156)
    {
      sub_100004048(v154, &qword_1010ED860);
      v67 = &qword_1010EF478;
      sub_100004048(v147, &qword_1010EF478);
      sub_100004048(v195, &qword_1010EF478);
      sub_100004048(v197, &qword_1010EF478);
      v144 = v199;
      goto LABEL_30;
    }
    sub_100004048(v154, &qword_1010ED860);
    v157 = v202;
    v158 = v106(v155, 1, v202);
    v159 = v195;
    if (v158 == 1)
    {
      sub_100004048(v155, &qword_1010EF488);
      v160 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 56))(v191, 1, 1, v160);
    }
    else
    {
      v161 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
      v162 = v191;
      v163 = v159;
      v164 = v191 + *(int *)(v161 + 48);
      sub_10005972C(v155, v191, type metadata accessor for DeviceEvent);
      v165 = v155 + *((int *)v157 + 6);
      v166 = type metadata accessor for Date(0);
      v167 = v164;
      v159 = v163;
      v147 = v192;
      v168 = v165;
      v102 = v206;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v167, v168, v166);
      v94 = v203;
      sub_1000126B0(v155, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v162, 0, 1, v161);
    }
    v169 = (uint64_t)v186;
    v170 = (uint64_t)v185;
    v171 = (uint64_t)v184;
    v172 = (uint64_t)v183;
    sub_10000F9B8((uint64_t)v201, v188, &qword_1010EF478);
    sub_10000F9B8(v199, v172, &qword_1010EF478);
    sub_10000F9B8(v197, v171, &qword_1010EF478);
    sub_10000F9B8(v159, v170, &qword_1010EF478);
    v173 = v170;
    v174 = v187;
    sub_10000F9B8(v147, v187, &qword_1010EF478);
    sub_10000F9B8(v191, v169, &qword_1010EF478);
    v175 = v209;
    v176 = sub_100127C40(v188, v172, v171, v173, v174, v169);
    if (v175)
    {
      swift_errorRelease(v175);
      sub_100004048(v191, &qword_1010EF478);
      sub_100004048(v147, &qword_1010EF478);
      v67 = 0;
    }
    else
    {
      v67 = v176;
      sub_100004048(v191, &qword_1010EF478);
      sub_100004048(v147, &qword_1010EF478);
    }
    sub_100004048(v195, &qword_1010EF478);
    sub_100004048(v197, &qword_1010EF478);
    sub_100004048(v199, &qword_1010EF478);
    sub_100004048((uint64_t)v201, &qword_1010EF478);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v94, v102);
    sub_1000126B0((uint64_t)v208, type metadata accessor for DeviceEvent);
  }
  return v67;
}

_QWORD *sub_100127C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  void (*v66)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v82[16];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  void (*v97)(_BYTE *, uint64_t, uint64_t);
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;

  v86 = a6;
  v87 = a5;
  v88 = a4;
  v89 = a3;
  v90 = a2;
  v110 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
  v106 = *(_QWORD *)(v110 - 8);
  v7 = __chkstk_darwin(v110);
  v105 = &v82[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v7);
  v95 = &v82[-v10];
  __chkstk_darwin(v9);
  v94 = &v82[-v11];
  v12 = sub_10001A9A8(&qword_1010EF490);
  __chkstk_darwin(v12);
  v104 = &v82[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_10001A9A8(&qword_1010ED1A0);
  v107 = *(_QWORD *)(v14 - 8);
  v108 = v14;
  v15 = __chkstk_darwin(v14);
  v103 = &v82[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v93 = &v82[-v17];
  v18 = sub_10001A9A8(&qword_1010EF498);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v92 = &v82[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __chkstk_darwin(v20);
  v96 = &v82[-v23];
  __chkstk_darwin(v22);
  v25 = &v82[-v24];
  v26 = sub_10001A9A8(&qword_1010EF4A0);
  v27 = *(_QWORD *)(v19 + 72);
  v28 = *(unsigned __int8 *)(v19 + 80);
  v29 = (v28 + 32) & ~v28;
  v112 = 6;
  v30 = swift_allocObject(v26, v29 + 6 * v27, v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_100E26E10;
  v84 = v30;
  v31 = v30 + v29;
  v32 = v30 + v29 + *(int *)(v18 + 48);
  v85 = a1;
  sub_10000F9B8(a1, v30 + v29, &qword_1010EF478);
  v33 = sub_10001A9A8(&qword_1010EF4A8);
  *(_QWORD *)(v32 + 24) = v33;
  *(_QWORD *)(v32 + 32) = &off_101066858;
  *(_BYTE *)v32 = 0;
  v34 = v31 + v27 + *(int *)(v18 + 48);
  sub_10000F9B8(v90, v31 + v27, &qword_1010EF478);
  *(_QWORD *)(v34 + 24) = v33;
  *(_QWORD *)(v34 + 32) = &off_101066858;
  *(_BYTE *)v34 = 1;
  v35 = v31 + 2 * v27;
  v36 = v35 + *(int *)(v18 + 48);
  sub_10000F9B8(v89, v35, &qword_1010EF478);
  v37 = sub_10001A9A8(&qword_1010EF4B0);
  *(_QWORD *)(v36 + 24) = v37;
  *(_QWORD *)(v36 + 32) = &off_101066830;
  *(_BYTE *)v36 = 0;
  v38 = v31 + 3 * v27;
  v39 = v38 + *(int *)(v18 + 48);
  sub_10000F9B8(v88, v38, &qword_1010EF478);
  *(_QWORD *)(v39 + 24) = v37;
  *(_QWORD *)(v39 + 32) = &off_101066830;
  *(_BYTE *)v39 = 1;
  v40 = v31 + 4 * v27;
  v41 = v40 + *(int *)(v18 + 48);
  sub_10000F9B8(v87, v40, &qword_1010EF478);
  v42 = sub_10001A9A8(&qword_1010EF4B8);
  *(_QWORD *)(v41 + 24) = v42;
  *(_QWORD *)(v41 + 32) = &off_101066808;
  *(_BYTE *)v41 = 0;
  v102 = v27;
  v43 = v31 + 5 * v27;
  v109 = v18;
  v44 = *(int *)(v18 + 48);
  v45 = (uint64_t)v96;
  v46 = v43 + v44;
  sub_10000F9B8(v86, v43, &qword_1010EF478);
  *(_QWORD *)(v46 + 24) = v42;
  *(_QWORD *)(v46 + 32) = &off_101066808;
  *(_BYTE *)v46 = 1;
  v47 = v110;
  v48 = _swiftEmptyArrayStorage;
  v83 = v31;
  v91 = v25;
  do
  {
    v111 = v48;
    sub_10000F9B8(v31, (uint64_t)v25, &qword_1010EF498);
    v49 = *(int *)(v109 + 48);
    v50 = (_QWORD *)(v45 + v49);
    v51 = (uint64_t)&v25[v49];
    sub_10000F9B8((uint64_t)v25, v45, &qword_1010EF478);
    sub_100030784(v51, (uint64_t)v50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v45, 1, v47) == 1)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
      sub_100004048(v45, &qword_1010EF478);
      v52 = 1;
      v53 = v104;
    }
    else
    {
      v54 = *(int *)(v47 + 48);
      v55 = v94;
      v98 = v51;
      v56 = &v94[v54];
      v57 = v45 + v54;
      sub_1000126EC(v45, (uint64_t)v94, type metadata accessor for DeviceEvent);
      v58 = type metadata accessor for Date(0);
      v59 = *(_QWORD *)(v58 - 8);
      v97 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v59 + 32);
      v100 = v59;
      v97(v56, v57, v58);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
      v60 = v95;
      v99 = &v95[*(int *)(v110 + 48)];
      v61 = v99;
      v101 = v31;
      sub_10005972C((uint64_t)v55, (uint64_t)v95, type metadata accessor for DeviceEvent);
      v62 = v61;
      v63 = v56;
      v25 = v91;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 16))(v62, v63, v58);
      v64 = &v105[*(int *)(v110 + 48)];
      v65 = v108;
      sub_1000126EC((uint64_t)v55, (uint64_t)v105, type metadata accessor for DeviceEvent);
      v66 = (void (*)(_BYTE *, _BYTE *, uint64_t))v97;
      v97(v64, (uint64_t)v63, v58);
      v67 = v92;
      v68 = (__int128 *)&v92[*(int *)(v109 + 48)];
      sub_10000F9B8((uint64_t)v25, (uint64_t)v92, &qword_1010EF478);
      sub_100030784(v98, (uint64_t)v68);
      v69 = (uint64_t)v60;
      v53 = v104;
      sub_1000126EC(v69, (uint64_t)v104, type metadata accessor for DeviceEvent);
      v66(&v53[*(int *)(v65 + 28)], v64, v58);
      v70 = *(int *)(v65 + 32);
      v45 = (uint64_t)v96;
      sub_10000F9FC(v68, (uint64_t)&v53[v70]);
      sub_100004048((uint64_t)v67, &qword_1010EF478);
      v31 = v101;
      sub_1000126B0((uint64_t)v105, type metadata accessor for DeviceEvent);
      v71 = v58;
      v47 = v110;
      (*(void (**)(_BYTE *, uint64_t))(v100 + 8))(v99, v71);
      v52 = 0;
    }
    v72 = v107;
    v73 = v108;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v53, v52, 1, v108);
    sub_100004048((uint64_t)v25, &qword_1010EF498);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v72 + 48))(v53, 1, v73) == 1)
    {
      sub_100004048((uint64_t)v53, &qword_1010EF490);
      v48 = v111;
    }
    else
    {
      v74 = v93;
      sub_100005CF0((uint64_t)v53, (uint64_t)v93, &qword_1010ED1A0);
      sub_100005CF0((uint64_t)v74, (uint64_t)v103, &qword_1010ED1A0);
      v48 = v111;
      if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0)
        v48 = (_QWORD *)sub_1007C88B0(0, v48[2] + 1, 1, (unint64_t)v48);
      v76 = v48[2];
      v75 = v48[3];
      if (v76 >= v75 >> 1)
        v48 = (_QWORD *)sub_1007C88B0(v75 > 1, v76 + 1, 1, (unint64_t)v48);
      v48[2] = v76 + 1;
      sub_100005CF0((uint64_t)v103, (uint64_t)v48+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v76, &qword_1010ED1A0);
    }
    v31 += v102;
    --v112;
  }
  while (v112);
  v77 = v84;
  swift_setDeallocating(v84);
  swift_arrayDestroy(v83, *(_QWORD *)(v77 + 16), v109);
  swift_deallocClassInstance(v77, 32, 7);
  if (!v48[2])
  {
    swift_bridgeObjectRelease();
    v78 = sub_10001A9A8(&qword_1010EF4C0);
    v79 = sub_1000193A4(&qword_1010EF4C8, &qword_1010EF4C0, byte_100E31138);
    v80 = swift_allocError(v78, v79, 0, 0);
    swift_willThrow(v80);
  }
  sub_100004048(v86, &qword_1010EF478);
  sub_100004048(v87, &qword_1010EF478);
  sub_100004048(v88, &qword_1010EF478);
  sub_100004048(v89, &qword_1010EF478);
  sub_100004048(v90, &qword_1010EF478);
  sub_100004048(v85, &qword_1010EF478);
  return v48;
}

uint64_t sub_1001284E0(NSObject *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  NSObject *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[4];
  __int16 v127;

  v120 = a1;
  v115 = type metadata accessor for DeviceEvent(0);
  v4 = __chkstk_darwin(v115);
  v113 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v98 - v7;
  __chkstk_darwin(v6);
  v101 = (uint64_t)&v98 - v9;
  v105 = type metadata accessor for Logger(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v117 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v111 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EF358);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v98 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v98 - v21;
  v23 = __chkstk_darwin(v20);
  v107 = (char *)&v98 - v24;
  __chkstk_darwin(v23);
  v108 = (char *)&v98 - v25;
  v116 = type metadata accessor for Table(0);
  v110 = *(_QWORD *)(v116 - 8);
  v26 = __chkstk_darwin(v116);
  v109 = (char *)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v114 = (char *)&v98 - v28;
  v29 = *((_QWORD *)a2 + 4);
  v30 = sub_10001A9A8(&qword_1010EF360);
  v118 = (void (*)(char *, uint64_t))a2;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v29, &type metadata for () + 1, v30);
  if (v125)
  {
    v103 = v2;
    v106 = *(_QWORD *)(v125 + 24);
    swift_retain();
    swift_release();
    v127 = 0;
    v31 = OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_deviceEvent;
    if (qword_1010EA588 != -1)
      swift_once(&qword_1010EA588, sub_100D2A084);
    v100 = v8;
    v32 = sub_10001A9A8(&qword_1010EF4D0);
    v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B8380);
    v34 = v120;
    LODWORD(v125) = BYTE1(v120[1].isa);
    v35 = sub_10012C6D4();
    == infix<A>(_:_:)(v33, &v125, &type metadata for UInt32, v35, &protocol witness table for Int64);
    if (qword_1010EA578 != -1)
      swift_once(&qword_1010EA578, sub_100D29F68);
    v102 = (char *)v118 + v31;
    v36 = sub_10001A9A8(&qword_1010EF3B0);
    v37 = sub_10001A9E8(v36, (uint64_t)qword_1011B8350);
    v38 = v115;
    v39 = (unsigned __int8 *)v34 + *(int *)(v115 + 24);
    v99 = type metadata accessor for Date(0);
    == infix<A>(_:_:)(v37, v39, v99, &protocol witness table for Date, &protocol witness table for String);
    && infix(_:_:)(v19, v16);
    v40 = *(void (**)(char *, uint64_t))(v13 + 8);
    v40(v16, v12);
    v40(v19, v12);
    if (qword_1010EA4C0 != -1)
      swift_once(&qword_1010EA4C0, sub_100D29250);
    v41 = sub_10001A9A8(&qword_1010EF3B8);
    v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B8128);
    v43 = (unsigned __int8 *)v34 + *(int *)(v38 + 36);
    v98 = type metadata accessor for BeaconIdentifier(0);
    v44 = v119;
    == infix<A>(_:_:)(v42, &v43[*(int *)(v98 + 20)], v119, &protocol witness table for UUID, &protocol witness table for String);
    v45 = v107;
    && infix(_:_:)(v22, v19);
    v40(v19, v12);
    v40(v22, v12);
    if (qword_1010EA4E8 != -1)
      swift_once(&qword_1010EA4E8, sub_100D29524);
    v46 = sub_10001A9E8(v41, (uint64_t)qword_1011B81A0);
    == infix<A>(_:_:)(v46, v43, v44, &protocol witness table for UUID, &protocol witness table for String);
    v47 = v108;
    && infix(_:_:)(v45, v22);
    v40(v22, v12);
    v40(v45, v12);
    v48 = v109;
    v49 = v116;
    QueryType.filter(_:)(v47, v116, &protocol witness table for Table);
    v40(v47, v12);
    if (qword_1010EA598 != -1)
      swift_once(&qword_1010EA598, sub_100D2A1A4);
    v50 = sub_10001A9A8(&qword_1010EF370);
    v51 = sub_10001A9E8(v50, (uint64_t)qword_1011B83B0);
    v126[2] = v50;
    v126[3] = sub_1000193A4(&qword_1010EF3E0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
    v52 = sub_100018F08(&v125);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v52, v51, v50);
    v53 = v114;
    SchemaType.select(_:_:)(&v125, _swiftEmptyArrayStorage, v49, &protocol witness table for Table);
    v54 = *(void (**)(char *, uint64_t))(v110 + 8);
    v54(v48, v49);
    v55 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v125);
    v56 = __chkstk_darwin(v55);
    *(&v98 - 6) = v106;
    *(&v98 - 5) = (uint64_t)v53;
    v57 = (uint64_t)v118;
    *(&v98 - 4) = (uint64_t)v120;
    *(&v98 - 3) = v57;
    *(&v98 - 2) = (uint64_t)&v127 + 1;
    *(&v98 - 1) = (uint64_t)&v127;
    v58 = v111;
    v59 = UUID.init()(v56);
    v60 = UUID.uuidString.getter(v59);
    v62 = v61;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v58, v119);
    v63 = v103;
    Connection.savepoint(_:block:)(v60, v62, sub_10012C718, &v98 - 8);
    v64 = v117;
    v65 = (uint64_t)v113;
    if (v63)
    {
      v54(v53, v49);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      v112 = 0;
      v118 = v54;
      swift_bridgeObjectRelease();
      if (qword_1010E9988 != -1)
        swift_once(&qword_1010E9988, sub_100113494);
      v70 = v105;
      v71 = sub_10001A9E8(v105, (uint64_t)qword_1011B67A8);
      v72 = v104;
      (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v64, v71, v70);
      v73 = (uint64_t)v120;
      v74 = v101;
      sub_10005972C((uint64_t)v120, v101, type metadata accessor for DeviceEvent);
      v75 = (uint64_t)v100;
      sub_10005972C(v73, (uint64_t)v100, type metadata accessor for DeviceEvent);
      v76 = sub_10005972C(v73, v65, type metadata accessor for DeviceEvent);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.info.getter(v77);
      v79 = v78;
      v120 = v77;
      if (os_log_type_enabled(v77, v78))
      {
        v80 = swift_slowAlloc(58, -1);
        v81 = swift_slowAlloc(128, -1);
        v111 = (char *)v81;
        *(_DWORD *)v80 = 141559299;
        v124 = v81;
        v125 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v80 + 4, v80 + 12);
        *(_WORD *)(v80 + 12) = 2081;
        LODWORD(v110) = v79;
        v82 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v83 = dispatch thunk of CustomStringConvertible.description.getter(v119, v82);
        v125 = sub_100016940(v83, v84, &v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v80 + 14, v80 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v74, type metadata accessor for DeviceEvent);
        *(_WORD *)(v80 + 22) = 1026;
        v85 = *(unsigned __int8 *)(v75 + 9);
        sub_1000126B0(v75, type metadata accessor for DeviceEvent);
        LODWORD(v125) = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, (char *)&v125 + 4, v80 + 24, v80 + 28);
        *(_WORD *)(v80 + 28) = 2082;
        v86 = (uint64_t)v113;
        v87 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v88 = dispatch thunk of CustomStringConvertible.description.getter(v99, v87);
        v125 = sub_100016940(v88, v89, &v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v80 + 30, v80 + 38);
        swift_bridgeObjectRelease();
        sub_1000126B0(v86, type metadata accessor for DeviceEvent);
        *(_WORD *)(v80 + 38) = 2082;
        swift_beginAccess((char *)&v127 + 1, &v125, 0, 0);
        if (HIBYTE(v127))
          v90 = 1702195828;
        else
          v90 = 0x65736C6166;
        v91 = v120;
        if (HIBYTE(v127))
          v92 = 0xE400000000000000;
        else
          v92 = 0xE500000000000000;
        v122 = sub_100016940(v90, v92, &v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v80 + 40, v80 + 48);
        swift_bridgeObjectRelease();
        *(_WORD *)(v80 + 48) = 2082;
        swift_beginAccess(&v127, &v122, 0, 0);
        if ((_BYTE)v127)
          v93 = 1702195828;
        else
          v93 = 0x65736C6166;
        v94 = v116;
        if ((_BYTE)v127)
          v95 = 0xE400000000000000;
        else
          v95 = 0xE500000000000000;
        v121 = sub_100016940(v93, v95, &v124);
        v53 = v114;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v80 + 50, v80 + 58);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v110, "Store device event for beacon: %{private,mask.hash}s,\nevent: %{public}u, ts: %{public}s, loc: %{public}s attachmentInfo: %{public}s.", (uint8_t *)v80, 0x3Au);
        v96 = v111;
        swift_arrayDestroy(v111, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1, -1);
        swift_slowDealloc(v80, -1, -1);

        swift_release();
        (*(void (**)(char *, uint64_t))(v104 + 8))(v117, v105);
        v97 = (uint64_t (*)(char *, uint64_t))v118;
      }
      else
      {
        sub_1000126B0(v75, type metadata accessor for DeviceEvent);
        sub_1000126B0(v74, type metadata accessor for DeviceEvent);
        sub_1000126B0(v65, type metadata accessor for DeviceEvent);

        swift_release();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v117, v70);
        v97 = (uint64_t (*)(char *, uint64_t))v118;
        v94 = v116;
      }
      return v97(v53, v94);
    }
  }
  else
  {
    v67 = sub_10012C434();
    v68 = swift_allocError(&type metadata for DatabaseError, v67, 0, 0);
    *(_DWORD *)v69 = 2;
    *(_BYTE *)(v69 + 4) = 1;
    return swift_willThrow(v68);
  }
}

uint64_t sub_1001290C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  unsigned int (**v63)(_BYTE *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (**v68)(_BYTE *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  os_log_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  _BOOL4 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  os_log_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  _BYTE v146[12];
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t *v164;
  _BYTE *v165;
  os_log_t v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int (**v174)(_BYTE *, uint64_t, uint64_t);
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184[5];
  uint64_t v185;
  uint64_t v186;

  v156 = a6;
  v157 = a5;
  v176 = a4;
  v179 = a3;
  v8 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v8);
  v161 = &v146[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v160 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v162 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v165 = &v146[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8(&qword_1011003F0);
  __chkstk_darwin(v11);
  v163 = &v146[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v170 = type metadata accessor for DeviceEvent.Location(0);
  v174 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v170 - 8);
  __chkstk_darwin(v170);
  v164 = (uint64_t *)&v146[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v177 = type metadata accessor for DeviceEvent(0);
  v14 = __chkstk_darwin(v177);
  v168 = &v146[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v14);
  v167 = &v146[-v17];
  __chkstk_darwin(v16);
  v166 = (os_log_t)&v146[-v18];
  v182 = type metadata accessor for Date(0);
  v172 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v171 = &v146[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v180 = type metadata accessor for OnConflict(0);
  v178 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v181 = &v146[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v175 = type metadata accessor for Insert(0);
  v173 = *(_QWORD *)(v175 - 8);
  v21 = __chkstk_darwin(v175);
  v158 = &v146[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v159 = &v146[-v24];
  v25 = __chkstk_darwin(v23);
  v169 = &v146[-v26];
  __chkstk_darwin(v25);
  v28 = &v146[-v27];
  v29 = sub_10001A9A8(&qword_1010EF3A8);
  __chkstk_darwin(v29);
  v31 = &v146[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = type metadata accessor for Row(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = &v146[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = type metadata accessor for Table(0);
  v184[3] = v36;
  v184[4] = (uint64_t)&protocol witness table for Table;
  v37 = sub_100018F08(v184);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v37, a2, v36);
  v38 = v183;
  Connection.prepare(_:)(v184);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v184);
  if (!v38)
  {
    v154 = 0;
    v152 = (uint64_t)v28;
    v153 = v35;
    v155 = v36;
    v183 = a1;
    dispatch thunk of _AnySequenceBox._makeIterator()(result);
    v40 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v40);
    swift_release();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
    {
      sub_100004048((uint64_t)v31, &qword_1010EF3A8);
      v168 = *(_BYTE **)(v178 + 104);
      ((void (*)(_BYTE *, _QWORD, uint64_t))v168)(v181, enum case for OnConflict.ignore(_:), v180);
      v41 = sub_10001A9A8(&qword_1010EF388);
      v42 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
      v43 = swift_allocObject(v41, ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ 5 * *(_QWORD *)(v42 + 72), *(unsigned __int8 *)(v42 + 80) | 7);
      *(_OWORD *)(v43 + 16) = xmmword_100E27910;
      v169 = (_BYTE *)v43;
      v44 = v179;
      if (qword_1010EA588 != -1)
        swift_once(&qword_1010EA588, sub_100D2A084);
      v45 = sub_10001A9A8(&qword_1010EF4D0);
      v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B8380);
      LODWORD(v184[0]) = *(unsigned __int8 *)(v44 + 9);
      v47 = sub_10012C6D4();
      <- infix<A>(_:_:)(v46, v184, &type metadata for UInt32, v47);
      v48 = v177;
      if (qword_1010EA578 != -1)
        swift_once(&qword_1010EA578, sub_100D29F68);
      v167 = (_BYTE *)sub_10001A9A8(&qword_1010EF3B0);
      v49 = sub_10001A9E8((uint64_t)v167, (uint64_t)qword_1011B8350);
      <- infix<A>(_:_:)(v49, v44 + *(int *)(v48 + 24), v182, &protocol witness table for Date);
      v50 = v48;
      if (qword_1010EA4C0 != -1)
        swift_once(&qword_1010EA4C0, sub_100D29250);
      v51 = sub_10001A9A8(&qword_1010EF3B8);
      v52 = sub_10001A9E8(v51, (uint64_t)qword_1011B8128);
      v53 = v44 + *(int *)(v50 + 36);
      v54 = v53 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
      v55 = type metadata accessor for UUID(0);
      <- infix<A>(_:_:)(v52, v54, v55, &protocol witness table for UUID);
      if (qword_1010EA4E8 != -1)
        swift_once(&qword_1010EA4E8, sub_100D29524);
      v56 = sub_10001A9E8(v51, (uint64_t)qword_1011B81A0);
      <- infix<A>(_:_:)(v56, v53, v55, &protocol witness table for UUID);
      if (qword_1010EA590 != -1)
        swift_once(&qword_1010EA590, sub_100D2A110);
      v57 = sub_10001A9E8((uint64_t)v167, (uint64_t)qword_1011B8398);
      v58 = v171;
      static Date.trustedNow.getter((uint64_t)v171);
      v59 = v57;
      v60 = v182;
      <- infix<A>(_:_:)(v59, v58, v182, &protocol witness table for Date);
      (*(void (**)(_BYTE *, uint64_t))(v172 + 8))(v58, v60);
      v61 = v152;
      v62 = v181;
      QueryType.insert(or:_:)(v181, v169, v155, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      v63 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v178 + 8);
      v64 = v180;
      ((void (*)(_BYTE *, uint64_t))v63)(v62, v180);
      v65 = v154;
      v66 = Connection.run(_:)(v61);
      v67 = v179;
      v68 = v174;
      if (v65)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v173 + 8))(v61, v175);
      v151 = v66;
      v114 = v175;
      v178 = *(_QWORD *)(v173 + 8);
      ((void (*)(uint64_t, uint64_t))v178)(v61, v175);
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v33 + 32))(v153, v31, v32);
      v69 = v179;
      if (qword_1010EA598 != -1)
        swift_once(&qword_1010EA598, sub_100D2A1A4);
      v70 = sub_10001A9A8(&qword_1010EF370);
      v152 = sub_10001A9E8(v70, (uint64_t)qword_1011B83B0);
      Row.subscript.getter(v184, v152, &type metadata for Int64, &protocol witness table for Int64);
      v71 = v184[0];
      v72 = (uint64_t)v168;
      v73 = v167;
      if (qword_1010E9988 != -1)
        swift_once(&qword_1010E9988, sub_100113494);
      v74 = type metadata accessor for Logger(0);
      sub_10001A9E8(v74, (uint64_t)qword_1011B67A8);
      v75 = v166;
      sub_10005972C(v69, (uint64_t)v166, type metadata accessor for DeviceEvent);
      sub_10005972C(v69, (uint64_t)v73, type metadata accessor for DeviceEvent);
      v76 = sub_10005972C(v69, v72, type metadata accessor for DeviceEvent);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.info.getter(v77);
      v79 = v78;
      v80 = os_log_type_enabled(v77, v78);
      v151 = v71;
      v150 = v32;
      v149 = v33;
      if (v80)
      {
        v81 = swift_slowAlloc(48, -1);
        v148 = swift_slowAlloc(64, -1);
        v184[0] = v148;
        *(_DWORD *)v81 = 67110147;
        v147 = v79;
        v82 = BYTE1(v75[1].isa);
        sub_1000126B0((uint64_t)v75, type metadata accessor for DeviceEvent);
        LODWORD(v185) = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, (char *)&v185 + 4, v81 + 4, v81 + 8);
        *(_WORD *)(v81 + 8) = 2080;
        v166 = v77;
        v83 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v84 = dispatch thunk of CustomStringConvertible.description.getter(v182, v83);
        v185 = sub_100016940(v84, v85, v184);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v81 + 10, v81 + 18);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v73, type metadata accessor for DeviceEvent);
        *(_WORD *)(v81 + 18) = 2160;
        v185 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v81 + 20, v81 + 28);
        *(_WORD *)(v81 + 28) = 2081;
        type metadata accessor for BeaconIdentifier(0);
        v86 = type metadata accessor for UUID(0);
        v87 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v88 = v86;
        v71 = v151;
        v89 = dispatch thunk of CustomStringConvertible.description.getter(v88, v87);
        v185 = sub_100016940(v89, v90, v184);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v81 + 30, v81 + 38);
        swift_bridgeObjectRelease();
        sub_1000126B0(v72, type metadata accessor for DeviceEvent);
        *(_WORD *)(v81 + 38) = 2048;
        v185 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, &v186, v81 + 40, v81 + 48);
        v91 = v166;
        _os_log_impl((void *)&_mh_execute_header, v166, (os_log_type_t)v147, "        DeviceEvent for %u/%s/%{private,mask.hash}s already exists (eventId=%lld).", (uint8_t *)v81, 0x30u);
        v92 = v148;
        swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v81, -1, -1);

      }
      else
      {
        sub_1000126B0((uint64_t)v75, type metadata accessor for DeviceEvent);
        sub_1000126B0((uint64_t)v73, type metadata accessor for DeviceEvent);
        sub_1000126B0(v72, type metadata accessor for DeviceEvent);

      }
      v168 = *(_BYTE **)(v178 + 104);
      ((void (*)(_BYTE *, _QWORD, uint64_t))v168)(v181, enum case for OnConflict.replace(_:), v180);
      v93 = sub_10001A9A8(&qword_1010EF388);
      v94 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
      v95 = (_BYTE *)swift_allocObject(v93, ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ 6 * *(_QWORD *)(v94 + 72), *(unsigned __int8 *)(v94 + 80) | 7);
      *((_OWORD *)v95 + 1) = xmmword_100E26E10;
      v167 = v95;
      v184[0] = v71;
      <- infix<A>(_:_:)(v152, v184, &type metadata for Int64, &protocol witness table for Int64);
      if (qword_1010EA588 != -1)
        swift_once(&qword_1010EA588, sub_100D2A084);
      v96 = sub_10001A9A8(&qword_1010EF4D0);
      v97 = sub_10001A9E8(v96, (uint64_t)qword_1011B8380);
      LODWORD(v184[0]) = *(unsigned __int8 *)(v69 + 9);
      v98 = sub_10012C6D4();
      <- infix<A>(_:_:)(v97, v184, &type metadata for UInt32, v98);
      v99 = v177;
      if (qword_1010EA578 != -1)
        swift_once(&qword_1010EA578, sub_100D29F68);
      v166 = (os_log_t)sub_10001A9A8(&qword_1010EF3B0);
      v100 = sub_10001A9E8((uint64_t)v166, (uint64_t)qword_1011B8350);
      <- infix<A>(_:_:)(v100, v69 + *(int *)(v99 + 24), v182, &protocol witness table for Date);
      if (qword_1010EA4C0 != -1)
        swift_once(&qword_1010EA4C0, sub_100D29250);
      v101 = sub_10001A9A8(&qword_1010EF3B8);
      v102 = sub_10001A9E8(v101, (uint64_t)qword_1011B8128);
      v103 = v69 + *(int *)(v99 + 36);
      v104 = v103 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
      v105 = type metadata accessor for UUID(0);
      <- infix<A>(_:_:)(v102, v104, v105, &protocol witness table for UUID);
      if (qword_1010EA4E8 != -1)
        swift_once(&qword_1010EA4E8, sub_100D29524);
      v106 = sub_10001A9E8(v101, (uint64_t)qword_1011B81A0);
      <- infix<A>(_:_:)(v106, v103, v105, &protocol witness table for UUID);
      v108 = v171;
      v107 = v172;
      if (qword_1010EA590 != -1)
        swift_once(&qword_1010EA590, sub_100D2A110);
      v109 = sub_10001A9E8((uint64_t)v166, (uint64_t)qword_1011B8398);
      static Date.trustedNow.getter((uint64_t)v108);
      v110 = v109;
      v111 = v182;
      <- infix<A>(_:_:)(v110, v108, v182, &protocol witness table for Date);
      (*(void (**)(_BYTE *, uint64_t))(v107 + 8))(v108, v111);
      v112 = v169;
      v62 = v181;
      QueryType.insert(or:_:)(v181, v167, v155, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      v63 = *(unsigned int (***)(_BYTE *, uint64_t, uint64_t))(v178 + 8);
      v64 = v180;
      ((void (*)(_BYTE *, uint64_t))v63)(v62, v180);
      v113 = v154;
      Connection.run(_:)(v112);
      v68 = v174;
      v114 = v175;
      v67 = v179;
      v115 = v149;
      if (v113)
      {
        (*(void (**)(_BYTE *, uint64_t))(v173 + 8))(v112, v175);
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v115 + 8))(v153, v150);
      }
      v178 = *(_QWORD *)(v173 + 8);
      ((void (*)(_BYTE *, uint64_t))v178)(v112, v175);
      (*(void (**)(_BYTE *, uint64_t))(v115 + 8))(v153, v150);
    }
    v116 = v163;
    sub_10000F9B8(v67 + *(int *)(v177 + 28), (uint64_t)v163, &qword_1011003F0);
    if (v68[6](v116, 1, v170) == 1)
    {
      sub_100004048((uint64_t)v116, &qword_1011003F0);
    }
    else
    {
      sub_1000126EC((uint64_t)v116, (uint64_t)v164, type metadata accessor for DeviceEvent.Location);
      ((void (*)(_BYTE *, _QWORD, uint64_t))v168)(v62, enum case for OnConflict.ignore(_:), v64);
      v117 = sub_10001A9A8(&qword_1010EF388);
      v118 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
      v119 = swift_allocObject(v117, ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80))+ 5 * *(_QWORD *)(v118 + 72), *(unsigned __int8 *)(v118 + 80) | 7);
      *(_OWORD *)(v119 + 16) = xmmword_100E27910;
      if (qword_1010EA598 != -1)
        swift_once(&qword_1010EA598, sub_100D2A1A4);
      v174 = v63;
      v120 = sub_10001A9A8(&qword_1010EF370);
      v121 = sub_10001A9E8(v120, (uint64_t)qword_1011B83B0);
      v184[0] = v151;
      <- infix<A>(_:_:)(v121, v184, &type metadata for Int64, &protocol witness table for Int64);
      if (qword_1010EA560 != -1)
        swift_once(&qword_1010EA560, sub_100D29DB0);
      v122 = sub_10001A9A8(&qword_1010EF448);
      v123 = sub_10001A9E8(v122, (uint64_t)qword_1011B8308);
      v124 = v164;
      v184[0] = *v164;
      <- infix<A>(_:_:)(v123, v184, &type metadata for Double, &protocol witness table for Double);
      if (qword_1010EA568 != -1)
        swift_once(&qword_1010EA568, sub_100D29E40);
      v125 = sub_10001A9E8(v122, (uint64_t)qword_1011B8320);
      v184[0] = v124[1];
      <- infix<A>(_:_:)(v125, v184, &type metadata for Double, &protocol witness table for Double);
      if (qword_1010EA570 != -1)
        swift_once(&qword_1010EA570, sub_100D29ED4);
      v126 = sub_10001A9E8(v122, (uint64_t)qword_1011B8338);
      v184[0] = v124[2];
      <- infix<A>(_:_:)(v126, v184, &type metadata for Double, &protocol witness table for Double);
      v67 = v179;
      if (qword_1010EA578 != -1)
        swift_once(&qword_1010EA578, sub_100D29F68);
      v127 = sub_10001A9A8(&qword_1010EF3B0);
      v128 = sub_10001A9E8(v127, (uint64_t)qword_1011B8350);
      <- infix<A>(_:_:)(v128, (char *)v124 + *(int *)(v170 + 28), v182, &protocol witness table for Date);
      v129 = v159;
      v130 = (uint64_t)v124;
      v62 = v181;
      QueryType.insert(or:_:)(v181, v119, v155, &protocol witness table for Table);
      v131 = v129;
      swift_bridgeObjectRelease();
      v64 = v180;
      v63 = v174;
      ((void (*)(_BYTE *, uint64_t))v174)(v62, v180);
      Connection.run(_:)(v129);
      v114 = v175;
      ((void (*)(_BYTE *, uint64_t))v178)(v131, v175);
      sub_1000126B0(v130, type metadata accessor for DeviceEvent.Location);
      *v157 = 1;
    }
    v132 = (uint64_t)v165;
    v133 = v161;
    v134 = v160;
    sub_10000F9B8(v67 + *(int *)(v177 + 32), (uint64_t)v161, &qword_1010EF480);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v162 + 48))(v133, 1, v134) == 1)
    {
      return sub_100004048((uint64_t)v133, &qword_1010EF480);
    }
    else
    {
      sub_1000126EC((uint64_t)v133, v132, type metadata accessor for DeviceEvent.AttachmentInfo);
      ((void (*)(_BYTE *, _QWORD, uint64_t))v168)(v62, enum case for OnConflict.ignore(_:), v64);
      v135 = sub_10001A9A8(&qword_1010EF388);
      v136 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
      v137 = swift_allocObject(v135, ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80))+ 2 * *(_QWORD *)(v136 + 72), *(unsigned __int8 *)(v136 + 80) | 7);
      *(_OWORD *)(v137 + 16) = xmmword_100E22B10;
      if (qword_1010EA598 != -1)
        swift_once(&qword_1010EA598, sub_100D2A1A4);
      v138 = sub_10001A9A8(&qword_1010EF370);
      v139 = sub_10001A9E8(v138, (uint64_t)qword_1011B83B0);
      v184[0] = v151;
      <- infix<A>(_:_:)(v139, v184, &type metadata for Int64, &protocol witness table for Int64);
      if (qword_1010EA5A0 != -1)
        swift_once(&qword_1010EA5A0, sub_100D2A234);
      v140 = sub_10001A9A8(&qword_1010EF3B8);
      v141 = sub_10001A9E8(v140, (uint64_t)qword_1011B83C8);
      v142 = type metadata accessor for UUID(0);
      v143 = (uint64_t)v165;
      <- infix<A>(_:_:)(v141, v165, v142, &protocol witness table for UUID);
      v144 = v158;
      v145 = v181;
      QueryType.insert(or:_:)(v181, v137, v155, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      ((void (*)(_BYTE *, uint64_t))v63)(v145, v64);
      Connection.run(_:)(v144);
      ((void (*)(_BYTE *, uint64_t))v178)(v144, v114);
      result = sub_1000126B0(v143, type metadata accessor for DeviceEvent.AttachmentInfo);
      *v156 = 1;
    }
  }
  return result;
}

uint64_t sub_10012A674(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;

  v28 = a1;
  v3 = sub_10001A9A8(&qword_1010EF358);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Table(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  v26 = a2;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v14 = sub_10001A9A8(&qword_1010EF3B8);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B8128);
  v16 = type metadata accessor for UUID(0);
  == infix<A>(_:_:)(v15, v28, v16, &protocol witness table for UUID, &protocol witness table for String);
  QueryType.filter(_:)(v6, v7, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v17 = sub_10001A9A8(&qword_1010EF3C8);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  if (qword_1010EA578 != -1)
    swift_once(&qword_1010EA578, sub_100D29F68);
  v19 = sub_10001A9A8(&qword_1010EF3B0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B8350);
  v20 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v19, v20);
  QueryType.order(_:)(v18, v7, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, v7);
  v27[3] = v7;
  v27[4] = &protocol witness table for Table;
  v22 = sub_100018F08(v27);
  (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 16))(v22, v13, v7);
  v23 = sub_10012A920((uint64_t)v27, v26);
  v21(v13, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return v23;
}

uint64_t sub_10012A920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(void);
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char *v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v5 = type metadata accessor for KeySyncMetadata(0);
  v59 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v54 = (_QWORD *)((char *)v51 - v9);
  v10 = sub_10001A9A8(&qword_1010EF3A8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v51 - v14;
  v16 = type metadata accessor for Row(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v56 = (char *)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v53 = (char *)v51 - v21;
  __chkstk_darwin(v20);
  v52 = (char *)v51 - v22;
  v23 = *(_QWORD *)(a2 + 32);
  v24 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v23, &type metadata for () + 1, v24);
  if (!v60)
  {
    v37 = sub_10012C434();
    v38 = swift_allocError(&type metadata for DatabaseError, v37, 0, 0);
    *(_DWORD *)v39 = 2;
    *(_BYTE *)(v39 + 4) = 1;
    return swift_willThrow(v38);
  }
  v25 = v60[2];
  swift_retain();
  swift_release();
  v26 = Connection.prepare(_:)(a1);
  if (v2)
    return swift_release();
  v27 = v26;
  v51[1] = v25;
  v28 = swift_retain();
  v29 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v28);
  v60 = _swiftEmptyArrayStorage;
  sub_10009AA70(0, v29 & ~(v29 >> 63), 0);
  v30 = swift_retain();
  v58 = dispatch thunk of _AnySequenceBox._makeIterator()(v30);
  v51[0] = v27;
  result = swift_release();
  if (v29 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  v57 = v15;
  if (v29)
  {
    v55 = v8;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
      if ((_DWORD)result == 1)
        goto LABEL_25;
      v32 = (uint64_t)v56;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v56, v13, v16);
      sub_10012B344(v32, v8);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v16);
      v33 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
      {
        sub_10009AA70(0, v33[2] + 1, 1);
        v33 = v60;
      }
      v35 = v33[2];
      v34 = v33[3];
      if (v35 >= v34 >> 1)
      {
        sub_10009AA70(v34 > 1, v35 + 1, 1);
        v33 = v60;
      }
      v33[2] = v35 + 1;
      v36 = (uint64_t)v33
          + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))
          + *(_QWORD *)(v59 + 72) * v35;
      v8 = v55;
      result = sub_1000126EC((uint64_t)v55, v36, type metadata accessor for KeySyncMetadata);
      --v29;
      v15 = v57;
    }
    while (v29);
  }
  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v40(v15, 1, v16) != 1)
  {
    v43 = *(void (**)(void))(v17 + 32);
    v44 = v54;
    do
    {
      v45 = v52;
      v43();
      v46 = (uint64_t)v53;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v53, v45, v16);
      sub_10012B344(v46, v44);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v45, v16);
      v47 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
      {
        sub_10009AA70(0, v47[2] + 1, 1);
        v47 = v60;
      }
      v49 = v47[2];
      v48 = v47[3];
      if (v49 >= v48 >> 1)
      {
        sub_10009AA70(v48 > 1, v49 + 1, 1);
        v47 = v60;
      }
      v47[2] = v49 + 1;
      v44 = v54;
      v50 = sub_1000126EC((uint64_t)v54, (uint64_t)v47+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v49, type metadata accessor for KeySyncMetadata);
      v15 = v57;
      dispatch thunk of _AnyIteratorBoxBase.next()(v50);
    }
    while (v40(v15, 1, v16) != 1);
  }
  swift_release();
  sub_100004048((uint64_t)v15, &qword_1010EF3A8);
  swift_release();
  swift_release_n(v51[0], 2);
  v41 = v60;
  v42 = sub_10001A9A8(&qword_1010EF4F8);
  result = swift_allocObject(v42, 24, 7);
  *(_QWORD *)(result + 16) = v41;
  return result;
}

uint64_t sub_10012AEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD v55[5];
  uint64_t v56;

  v51 = sub_10001A9A8(&qword_1010EF358);
  v6 = *(_QWORD *)(v51 - 8);
  v7 = __chkstk_darwin(v51);
  v49 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  v50 = (char *)&v47 - v12;
  v13 = type metadata accessor for Table(0);
  v53 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v52 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v54 = (char *)&v47 - v16;
  v17 = *(_QWORD *)(a2 + 16);
  v18 = _swiftEmptyArrayStorage;
  v56 = a3;
  if (v17)
  {
    v47 = a1;
    v48 = v6;
    v55[0] = _swiftEmptyArrayStorage;
    sub_10009A9F4(0, v17, 0);
    v18 = (_QWORD *)v55[0];
    v19 = (char *)(a2 + 32);
    v20 = *(_QWORD *)(v55[0] + 16);
    do
    {
      v22 = *v19++;
      v21 = v22;
      v55[0] = v18;
      v23 = v18[3];
      if (v20 >= v23 >> 1)
      {
        sub_10009A9F4(v23 > 1, v20 + 1, 1);
        v18 = (_QWORD *)v55[0];
      }
      v18[2] = v20 + 1;
      *((_BYTE *)v18 + v20++ + 32) = v21;
      --v17;
    }
    while (v17);
    a3 = v56;
    a1 = v47;
    v6 = v48;
  }
  v48 = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v24 = sub_10001A9A8(&qword_1010EF3B8);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B8128);
  v26 = type metadata accessor for UUID(0);
  == infix<A>(_:_:)(v25, a1, v26, &protocol witness table for UUID, &protocol witness table for String);
  v55[0] = v18;
  if (qword_1010EA580 != -1)
    swift_once(&qword_1010EA580, sub_100D29FFC);
  v27 = sub_10001A9A8(&qword_1010EF3E8);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B8368);
  v29 = sub_10001A9A8(&qword_1010EEC18);
  v30 = sub_1000193A4(&qword_1010EF4F0, &qword_1010EEC18, (const char *)&protocol conformance descriptor for [A]);
  v31 = sub_10012C49C();
  v32 = v49;
  Collection<>.contains(_:)(v28, v29, v30, v31);
  swift_bridgeObjectRelease();
  v33 = v50;
  && infix(_:_:)(v11, v32);
  v34 = *(void (**)(char *, uint64_t))(v6 + 8);
  v35 = v51;
  v34(v32, v51);
  v34(v11, v35);
  v36 = v52;
  QueryType.filter(_:)(v33, v13, &protocol witness table for Table);
  v34(v33, v35);
  v37 = sub_10001A9A8(&qword_1010EF3C8);
  v38 = swift_allocObject(v37, 72, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
  if (qword_1010EA578 != -1)
    swift_once(&qword_1010EA578, sub_100D29F68);
  v39 = sub_10001A9A8(&qword_1010EF3B0);
  sub_10001A9E8(v39, (uint64_t)qword_1011B8350);
  v40 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v39, v40);
  v41 = v54;
  QueryType.order(_:)(v38, v13, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v42 = v53;
  v43 = *(void (**)(char *, uint64_t))(v53 + 8);
  v43(v36, v13);
  v55[3] = v13;
  v55[4] = &protocol witness table for Table;
  v44 = sub_100018F08(v55);
  (*(void (**)(_QWORD *, char *, uint64_t))(v42 + 16))(v44, v41, v13);
  v45 = sub_10012A920((uint64_t)v55, v56);
  v43(v41, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  return v45;
}

uint64_t sub_10012B344@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;

  v5 = type metadata accessor for Date(0);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v8 = sub_10001A9A8(&qword_1010EF3B8);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B8128);
  v10 = type metadata accessor for UUID(0);
  Row.subscript.getter(a2, v9, v10, &protocol witness table for UUID);
  if (qword_1010EA580 != -1)
    swift_once(&qword_1010EA580, sub_100D29FFC);
  v11 = sub_10001A9A8(&qword_1010EF3E8);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B8368);
  v13 = sub_10012C49C();
  Row.subscript.getter(&v34, v12, &type metadata for UInt8, v13);
  if (v34 >= 5u)
    v14 = 0;
  else
    v14 = v34;
  v15 = (int *)type metadata accessor for KeySyncMetadata(0);
  *((_BYTE *)a2 + v15[5]) = v14;
  if (qword_1010EA4D0 != -1)
    swift_once(&qword_1010EA4D0, sub_100D29370);
  v16 = sub_10001A9E8(v11, (uint64_t)qword_1011B8158);
  Row.get<A>(_:)(v16, &type metadata for UInt8, v13);
  if (v2)
    goto LABEL_18;
  if (v33 > 2u)
  {
    v25 = sub_10012C690();
    v26 = swift_allocError(&type metadata for ObservationStoreService.Error, v25, 0, 0);
    *v27 = 0;
    swift_willThrow(v26);
LABEL_18:
    v28 = type metadata accessor for Row(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a2, v10);
  }
  *((_BYTE *)a2 + v15[6]) = v33;
  if (qword_1010EA4C8 != -1)
    swift_once(&qword_1010EA4C8, sub_100D292E4);
  v17 = sub_10001A9A8(&qword_1010EF430);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B8140);
  v19 = sub_10012C5BC();
  Row.subscript.getter(&v32, v18, &type metadata for UInt64, v19);
  *(_QWORD *)((char *)a2 + v15[7]) = v32;
  if (qword_1010EA578 != -1)
    swift_once(&qword_1010EA578, sub_100D29F68);
  v20 = sub_10001A9A8(&qword_1010EF3B0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B8350);
  v22 = v31;
  Row.subscript.getter(v7, v21, v31, &protocol witness table for Date);
  v23 = type metadata accessor for Row(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a1, v23);
  return (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v30 + 32))((char *)a2 + v15[8], v7, v22);
}

uint64_t sub_10012B684()
{
  uint64_t v0;
  unint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  int *v7;
  Swift::String v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v1 = 0xE800000000000000;
  v2._countAndFlagsBits = 0x3C636E795379654BLL;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7 = (int *)type metadata accessor for KeySyncMetadata(0);
  LOBYTE(v19) = *(_BYTE *)(v0 + v7[5]);
  _print_unlocked<A, B>(_:_:)(&v19, v20, &type metadata for KeySyncMetadata.MetadataType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  if (*(_BYTE *)(v0 + v7[6]))
  {
    if (*(_BYTE *)(v0 + v7[6]) == 1)
    {
      v1 = 0xEA00000000007972;
      v9 = 0x61646E6F6365732ELL;
    }
    else
    {
      v1 = 0x8000000100EC6940;
      v9 = 0xD000000000000010;
    }
  }
  else
  {
    v9 = 0x7972616D6972702ELL;
  }
  v10 = v1;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 47;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v19 = *(_QWORD *)(v0 + v7[7]);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14 = type metadata accessor for Date(0);
  v15 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v20[0];
}

uint64_t sub_10012B8C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010EF630);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10012CFE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeySyncMetadata.CodingKeys, &type metadata for KeySyncMetadata.CodingKeys, v11, v9, v10);
  v29 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v29, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for KeySyncMetadata(0);
    v28 = *(_BYTE *)(v3 + v14[5]);
    v27 = 1;
    v15 = sub_10012D0B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for KeySyncMetadata.MetadataType, v15);
    v26 = *(_BYTE *)(v3 + v14[6]);
    v25 = 2;
    v16 = sub_10012D0F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for BeaconKeyManager.KeySequence, v16);
    v17 = *(_QWORD *)(v3 + v14[7]);
    v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v24, v5);
    v18 = v3 + v14[8];
    v23 = 4;
    v19 = type metadata accessor for Date(0);
    v20 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v23, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10012BAFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v29[2];
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;

  v32 = a2;
  v34 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (_QWORD *)((char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v36 = (_QWORD *)((char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = sub_10001A9A8(&qword_1010EF610);
  v6 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for KeySyncMetadata(0);
  __chkstk_darwin(v9);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_10012CFE8();
  v38 = v8;
  v15 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeySyncMetadata.CodingKeys, &type metadata for KeySyncMetadata.CodingKeys, v14, v12, v13);
  if (v15)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v39 = v6;
  v16 = v34;
  v30 = a1;
  v17 = v11;
  BYTE3(v43) = 0;
  v18 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v35;
  v20 = v36;
  v21 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v35, (char *)&v43 + 3, v37, v35, v18);
  v29[1] = v4;
  v22 = *(void (**)(char *, _QWORD *, uint64_t))(v4 + 32);
  v23 = (uint64_t)v17;
  v22(v17, v20, v19);
  BYTE1(v43) = 1;
  v24 = sub_10012D02C();
  KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v43 + 2), &type metadata for KeySyncMetadata.MetadataType, (char *)&v43 + 1, v21, &type metadata for KeySyncMetadata.MetadataType, v24);
  v17[v9[5]] = BYTE2(v43);
  v42 = 2;
  v25 = sub_10012D070();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for BeaconKeyManager.KeySequence, &v42, v21, &type metadata for BeaconKeyManager.KeySequence, v25);
  v17[v9[6]] = v43;
  v41 = 3;
  *(_QWORD *)&v17[v9[7]] = KeyedDecodingContainer.decode(_:forKey:)(&v41, v21);
  v40 = 4;
  v26 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v27 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v16, &v40, v21, v16, v26);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v21);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v31 + 32))(v23 + v9[8], v27, v16);
  sub_10005972C(v23, v32, type metadata accessor for KeySyncMetadata);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return sub_1000126B0(v23, type metadata accessor for KeySyncMetadata);
}

uint64_t sub_10012BEBC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10012BEF0 + 4 * byte_100E27920[*v0]))(0xD000000000000010, 0x8000000100EC28D0);
}

uint64_t sub_10012BEF0()
{
  return 1701869940;
}

uint64_t sub_10012BF00()
{
  return 0x65636E6575716573;
}

uint64_t sub_10012BF18()
{
  return 0x7865646E69;
}

uint64_t sub_10012BF2C()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10012BF48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10012D2E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10012BF6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012CFE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10012BF94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012CFE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10012BFBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10012BAFC(a1, a2);
}

uint64_t sub_10012BFD0(_QWORD *a1)
{
  return sub_10012B8C0(a1);
}

uint64_t sub_10012BFEC@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10012C774(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10012C014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10012CFA4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10012C070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10012CFA4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10012C0BC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v24 = a2;
  v4 = sub_10001A9A8(&qword_1010EF3B0);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA560 != -1)
    swift_once(&qword_1010EA560, sub_100D29DB0);
  v11 = sub_10001A9A8(&qword_1010EF448);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B8308);
  Row.get<A>(_:)(v12, &type metadata for Double, &protocol witness table for Double);
  if (v2)
  {
    swift_release();
    v15 = type metadata accessor for Row(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  }
  else
  {
    *(_QWORD *)v24 = v25;
    if (qword_1010EA568 != -1)
      swift_once(&qword_1010EA568, sub_100D29E40);
    v13 = sub_10001A9E8(v11, (uint64_t)qword_1011B8320);
    Row.get<A>(_:)(v13, &type metadata for Double, &protocol witness table for Double);
    *((_QWORD *)v24 + 1) = v25;
    if (qword_1010EA570 != -1)
      swift_once(&qword_1010EA570, sub_100D29ED4);
    v14 = sub_10001A9E8(v11, (uint64_t)qword_1011B8338);
    Row.get<A>(_:)(v14, &type metadata for Double, &protocol witness table for Double);
    *((_QWORD *)v24 + 2) = v25;
    if (qword_1010EA578 != -1)
      swift_once(&qword_1010EA578, sub_100D29F68);
    v17 = sub_10001A9E8(v23, (uint64_t)qword_1011B8350);
    v18 = type metadata accessor for Table(0);
    QueryType.subscript.getter(v17, v18, v7, &protocol witness table for Table);
    Row.get<A>(_:)(v6, v7, &protocol witness table for Date);
    swift_release();
    v19 = type metadata accessor for Row(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v23);
    v20 = type metadata accessor for DeviceEvent.Location(0);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(&v24[*(int *)(v20 + 28)], v10, v7);
  }
}

uint64_t sub_10012C41C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100D291A8(v1, a1);
}

unint64_t sub_10012C434()
{
  unint64_t result;

  result = qword_1010EF368;
  if (!qword_1010EF368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DatabaseError, &type metadata for DatabaseError);
    atomic_store(result, (unint64_t *)&qword_1010EF368);
  }
  return result;
}

uint64_t sub_10012C478()
{
  uint64_t *v0;

  return sub_1001137D0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10012C494(uint64_t a1, uint64_t a2)
{
  return sub_10001BC14(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

unint64_t sub_10012C49C()
{
  unint64_t result;

  result = qword_1010EF400;
  if (!qword_1010EF400)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1010EF400);
  }
  return result;
}

uint64_t sub_10012C4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = type metadata accessor for KeySyncMetadata(0),
        *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20)))
    && (v5 = v4, (sub_100510B14(*(_BYTE *)(a1 + *(int *)(v4 + 24)), *(_BYTE *)(a2 + *(int *)(v4 + 24))) & 1) != 0)
    && *(_QWORD *)(a1 + *(int *)(v5 + 28)) == *(_QWORD *)(a2 + *(int *)(v5 + 28)))
  {
    return static Date.== infix(_:_:)(a1 + *(int *)(v5 + 32), a2 + *(int *)(v5 + 32));
  }
  else
  {
    return 0;
  }
}

unint64_t sub_10012C578()
{
  unint64_t result;

  result = qword_1010EF428;
  if (!qword_1010EF428)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1010EF428);
  }
  return result;
}

unint64_t sub_10012C5BC()
{
  unint64_t result;

  result = qword_1010EF438;
  if (!qword_1010EF438)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1010EF438);
  }
  return result;
}

unint64_t sub_10012C600()
{
  unint64_t result;

  result = qword_1010EF440;
  if (!qword_1010EF440)
  {
    result = swift_getWitnessTable(&unk_100E27C08, &type metadata for ObservationStore.Error);
    atomic_store(result, (unint64_t *)&qword_1010EF440);
  }
  return result;
}

uint64_t sub_10012C644(uint64_t a1, uint64_t a2)
{
  return sub_10001BBBC(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

unint64_t sub_10012C64C()
{
  unint64_t result;

  result = qword_1010EF450;
  if (!qword_1010EF450)
  {
    result = swift_getWitnessTable(&unk_100E27BC8, &type metadata for ObservationStore.ObservationStoreError);
    atomic_store(result, (unint64_t *)&qword_1010EF450);
  }
  return result;
}

unint64_t sub_10012C690()
{
  unint64_t result;

  result = qword_1010EF470;
  if (!qword_1010EF470)
  {
    result = swift_getWitnessTable(&unk_100E6AAD4, &type metadata for ObservationStoreService.Error);
    atomic_store(result, (unint64_t *)&qword_1010EF470);
  }
  return result;
}

unint64_t sub_10012C6D4()
{
  unint64_t result;

  result = qword_1010EF4D8;
  if (!qword_1010EF4D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1010EF4D8);
  }
  return result;
}

uint64_t sub_10012C718()
{
  uint64_t v0;

  return sub_1001290C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE **)(v0 + 48), *(_BYTE **)(v0 + 56));
}

uint64_t type metadata accessor for KeySyncMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EF5A8;
  if (!qword_1010EF5A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeySyncMetadata);
  return result;
}

uint64_t sub_10012C774(uint64_t result)
{
  if (result >= 5u)
    return 5;
  else
    return result;
}

uint64_t sub_10012C788()
{
  uint64_t *v0;

  return sub_100124D10(v0[2], v0[3], v0[4]);
}

uint64_t sub_10012C7A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t storeEnumTagSinglePayload for ObservationStore.ObservationStoreError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10012C808 + 4 * byte_100E27925[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10012C828 + 4 * byte_100E2792A[v4]))();
}

_BYTE *sub_10012C808(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10012C828(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10012C830(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10012C838(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10012C840(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10012C848(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ObservationStore.ObservationStoreError()
{
  return &type metadata for ObservationStore.ObservationStoreError;
}

uint64_t storeEnumTagSinglePayload for ObservationStore.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10012C8B0 + 4 * byte_100E27934[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012C8E4 + 4 * byte_100E2792F[v4]))();
}

uint64_t sub_10012C8E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012C8EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012C8F4);
  return result;
}

uint64_t sub_10012C900(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012C908);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10012C90C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012C914(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservationStore.Error()
{
  return &type metadata for ObservationStore.Error;
}

_QWORD *sub_10012C930(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_10012C9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 32);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10012CA50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_10012CAE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_10012CB88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_10012CC20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10012CCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012CCC4);
}

uint64_t sub_10012CCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 253)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v9 >= 3)
      return v9 - 2;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v10);
  }
}

uint64_t sub_10012CD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012CD70);
}

uint64_t sub_10012CD70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 253)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10012CE10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100E279A0;
    v5[2] = &unk_100E279B8;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.MetadataType()
{
  return &type metadata for KeySyncMetadata.MetadataType;
}

unint64_t sub_10012CED0()
{
  unint64_t result;

  result = qword_1010EF5F0;
  if (!qword_1010EF5F0)
  {
    result = swift_getWitnessTable(&unk_100E279E0, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1010EF5F0);
  }
  return result;
}

unint64_t sub_10012CF18()
{
  unint64_t result;

  result = qword_1010EF5F8;
  if (!qword_1010EF5F8)
  {
    result = swift_getWitnessTable(&unk_100E27B10, &type metadata for ObservationStore.Error);
    atomic_store(result, (unint64_t *)&qword_1010EF5F8);
  }
  return result;
}

unint64_t sub_10012CF60()
{
  unint64_t result;

  result = qword_1010EF600;
  if (!qword_1010EF600)
  {
    result = swift_getWitnessTable(&unk_100E27B78, &type metadata for ObservationStore.ObservationStoreError);
    atomic_store(result, (unint64_t *)&qword_1010EF600);
  }
  return result;
}

unint64_t sub_10012CFA4()
{
  unint64_t result;

  result = qword_1010EF608;
  if (!qword_1010EF608)
  {
    result = swift_getWitnessTable(&unk_100E27A08, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1010EF608);
  }
  return result;
}

unint64_t sub_10012CFE8()
{
  unint64_t result;

  result = qword_1010EF618;
  if (!qword_1010EF618)
  {
    result = swift_getWitnessTable(&unk_100E27D84, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EF618);
  }
  return result;
}

unint64_t sub_10012D02C()
{
  unint64_t result;

  result = qword_1010EF620;
  if (!qword_1010EF620)
  {
    result = swift_getWitnessTable(&unk_100E27BA0, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1010EF620);
  }
  return result;
}

unint64_t sub_10012D070()
{
  unint64_t result;

  result = qword_1010EF628;
  if (!qword_1010EF628)
  {
    result = swift_getWitnessTable(&unk_100E722B0, &type metadata for BeaconKeyManager.KeySequence);
    atomic_store(result, (unint64_t *)&qword_1010EF628);
  }
  return result;
}

unint64_t sub_10012D0B4()
{
  unint64_t result;

  result = qword_1010EF638;
  if (!qword_1010EF638)
  {
    result = swift_getWitnessTable(&unk_100E27C98, &type metadata for KeySyncMetadata.MetadataType);
    atomic_store(result, (unint64_t *)&qword_1010EF638);
  }
  return result;
}

unint64_t sub_10012D0F8()
{
  unint64_t result;

  result = qword_1010EF640;
  if (!qword_1010EF640)
  {
    result = swift_getWitnessTable(&unk_100E72288, &type metadata for BeaconKeyManager.KeySequence);
    atomic_store(result, (unint64_t *)&qword_1010EF640);
  }
  return result;
}

uint64_t _s12searchpartyd15KeySyncMetadataV12MetadataTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10012D188 + 4 * byte_100E2793E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10012D1BC + 4 * byte_100E27939[v4]))();
}

uint64_t sub_10012D1BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012D1C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012D1CCLL);
  return result;
}

uint64_t sub_10012D1D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012D1E0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10012D1E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012D1EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadata.CodingKeys()
{
  return &type metadata for KeySyncMetadata.CodingKeys;
}

unint64_t sub_10012D20C()
{
  unint64_t result;

  result = qword_1010EF648;
  if (!qword_1010EF648)
  {
    result = swift_getWitnessTable(&unk_100E27D5C, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EF648);
  }
  return result;
}

unint64_t sub_10012D254()
{
  unint64_t result;

  result = qword_1010EF650;
  if (!qword_1010EF650)
  {
    result = swift_getWitnessTable(&unk_100E27CCC, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EF650);
  }
  return result;
}

unint64_t sub_10012D29C()
{
  unint64_t result;

  result = qword_1010EF658;
  if (!qword_1010EF658)
  {
    result = swift_getWitnessTable(&unk_100E27CF4, &type metadata for KeySyncMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EF658);
  }
  return result;
}

uint64_t sub_10012D2E0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v6 = 0xE400000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x65636E6575716573 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease(0xE900000000000070);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10012D4EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v5 = type metadata accessor for BeaconObservation(0);
  v41 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v42 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - v8;
  v10 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_autoreleasePoolPush();
  v14 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v2, v14);
  v15 = v43;
  if (!v43[2] || (v16 = sub_100003FB0(a1), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v23 = _swiftEmptyArrayStorage;
    v25 = v41;
LABEL_17:
    objc_autoreleasePoolPop(v13);
    if (v23[2])
    {
      sub_10012D874((uint64_t)v23 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), (uint64_t)v12);
      v32 = 0;
    }
    else
    {
      v32 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v12, v32, 1, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v12, 1, v5) == 1)
    {
      sub_10012D8B8((uint64_t)v12);
      v33 = type metadata accessor for Date(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a2, 1, 1, v33);
    }
    else
    {
      v34 = &v12[*(int *)(v5 + 20)];
      v35 = type metadata accessor for Date(0);
      v36 = *(_QWORD *)(v35 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(a2, v34, v35);
      sub_10012D8F8((uint64_t)v12);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(a2, 0, 1, v35);
    }
  }
  v18 = *(_QWORD *)(v15[7] + 8 * v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = sub_100508D98(v18);
  swift_bridgeObjectRelease();
  sub_10088FD00((uint64_t)v19);
  v21 = v20;
  result = swift_release();
  v23 = _swiftEmptyArrayStorage;
  v43 = _swiftEmptyArrayStorage;
  v24 = *(_QWORD *)(v21 + 16);
  v25 = v41;
  if (!v24)
  {
LABEL_16:
    swift_release();
    goto LABEL_17;
  }
  v38 = v13;
  v39 = v12;
  v40 = a2;
  v26 = 0;
  while (v26 < *(_QWORD *)(v21 + 16))
  {
    v27 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v28 = *(_QWORD *)(v25 + 72);
    sub_10012D874(v21 + v27 + v28 * v26, (uint64_t)v9);
    if (v9[*(int *)(v5 + 24)] < 0x2Bu)
    {
      result = sub_10012D8F8((uint64_t)v9);
    }
    else
    {
      v29 = v5;
      sub_10012D934((uint64_t)v9, v42);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
        sub_10009AAC8(0, v23[2] + 1, 1);
      v23 = v43;
      v31 = v43[2];
      v30 = v43[3];
      if (v31 >= v30 >> 1)
      {
        sub_10009AAC8(v30 > 1, v31 + 1, 1);
        v23 = v43;
      }
      v23[2] = v31 + 1;
      result = sub_10012D934(v42, (uint64_t)v23 + v27 + v31 * v28);
      v5 = v29;
      v25 = v41;
    }
    if (v24 == ++v26)
    {
      v23 = v43;
      v12 = v39;
      a2 = v40;
      v13 = v38;
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10012D874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconObservation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012D8B8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF660);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012D8F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeaconObservation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012D934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconObservation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012D978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v1 = sub_10001A9A8(&qword_1010EF668);
  __chkstk_darwin(v1);
  v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EF670);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UTType(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v41 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v41 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  v21 = *(_QWORD *)(v0 + 32);
  v20 = *(_QWORD *)(v0 + 40);
  v22 = type metadata accessor for UTHardwareColor(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v3, 1, 1, v22);
  v23 = swift_bridgeObjectRetain(v20);
  UTType.init(_deviceModelCode:enclosureColor:)(v21, v20, v3, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    static UTType._computer.getter();
    v24 = sub_10012DDC8((uint64_t)v6);
  }
  else
  {
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v19, v6, v7);
  }
  static UTType._iPhone.getter(v24);
  v25 = UTType.conforms(to:)(v17);
  v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v17, v7);
  v27 = *(uint64_t (**)(char *, char *, uint64_t))(v8 + 16);
  v28 = v27(v14, v19, v7);
  if ((v25 & 1) != 0)
  {
    v26(v14, v7);
    v27(v11, v19, v7);
LABEL_7:
    v26(v11, v7);
LABEL_8:
    v26(v19, v7);
    return 1;
  }
  static UTType._iPad.getter(v28);
  v29 = UTType.conforms(to:)(v17);
  v26(v17, v7);
  v26(v14, v7);
  v30 = v27(v11, v19, v7);
  if ((v29 & 1) != 0)
    goto LABEL_7;
  static UTType._iPodTouch.getter(v30);
  v32 = UTType.conforms(to:)(v17);
  v26(v17, v7);
  v33 = ((uint64_t (*)(char *, uint64_t))v26)(v11, v7);
  if ((v32 & 1) != 0)
    goto LABEL_8;
  static UTType._appleWatch.getter(v33);
  v34 = UTType.conforms(to:)(v17);
  v35 = ((uint64_t (*)(char *, uint64_t))v26)(v17, v7);
  if ((v34 & 1) != 0)
  {
    v26(v19, v7);
    return 2;
  }
  else
  {
    static UTType._appleTV.getter(v35);
    v36 = UTType.conforms(to:)(v17);
    v37 = ((uint64_t (*)(char *, uint64_t))v26)(v17, v7);
    if ((v36 & 1) != 0
      || (static UTType._appleTV.getter(v37),
          v38 = UTType.conforms(to:)(v17),
          v39 = ((uint64_t (*)(char *, uint64_t))v26)(v17, v7),
          (v38 & 1) != 0))
    {
      v26(v19, v7);
      return 3;
    }
    else
    {
      static UTType._mac.getter(v39);
      v40 = UTType.conforms(to:)(v17);
      v26(v17, v7);
      v26(v19, v7);
      if ((v40 & 1) != 0)
        return 4;
      else
        return 0;
    }
  }
}

void sub_10012DD0C()
{
  char *v0;

  v0 = (char *)sub_10012DD40 + 4 * byte_100E27E18[sub_10012D978()];
  __asm { BR              X10 }
}

BOOL sub_10012DD40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain(v2);
  v3 = sub_10072D700(v1, v2);
  return (v3 & (unint64_t)&_mh_execute_header) == 0 && (unsigned __int16)v3 > 0xEu;
}

uint64_t sub_10012DDC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EF670);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012DE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B67C0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B67C0);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7B28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10012DE98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject(&unk_101059428, 48, 7);
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v0;
  v6[5] = v1;
  swift_retain();
  sub_100028774((uint64_t)v4, (uint64_t)&unk_1010EF7B8, (uint64_t)v6);
  swift_release();
  return sub_10012FC44((uint64_t)v4);
}

uint64_t sub_10012DF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[42] = a4;
  v5 = type metadata accessor for UUID(0);
  v4[43] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[44] = v6;
  v4[45] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF7C0);
  v4[46] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[47] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[48] = swift_task_alloc(v9);
  v4[49] = swift_task_alloc(v9);
  v10 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  v4[50] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[51] = swift_task_alloc(v11);
  v4[52] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EF7C8);
  v4[53] = v12;
  v4[54] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF7D0);
  v4[55] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EF7D8);
  v4[56] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[57] = v15;
  v4[58] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EF7E0);
  v4[59] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[60] = v17;
  v4[61] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10012E0D8, 0, 0);
}

uint64_t sub_10012E0D8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 216, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 176);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC((__int128 *)(v0 + 176), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 496) = v2;
    *v2 = v0;
    v2[1] = sub_10012E1BC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10012E1BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10012E218, 0, 0);
}

uint64_t sub_10012E218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 504);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  if (v1)
    return swift_task_switch(sub_10012E39C, *(_QWORD *)(v0 + 504), 0);
  if (qword_1010E9990 != -1)
    swift_once(&qword_1010E9990, sub_10012DE08);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B67C0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing PencilPairingService!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 464);
  v10 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 408);
  v11 = *(_QWORD *)(v0 + 416);
  v14 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012E39C()
{
  sub_1009B76B0();
  return swift_task_switch(sub_10012E3DC, 0, 0);
}

uint64_t sub_10012E3DC()
{
  _QWORD *v0;
  _QWORD *v1;

  AsyncStream.makeAsyncIterator()(v0[59]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[64] = v1;
  *v1 = v0;
  v1[1] = sub_10012E444;
  return AsyncStream.Iterator.next(isolation:)(v0[55], 0, 0, v0[56]);
}

uint64_t sub_10012E444()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  return swift_task_switch(sub_10012E498, 0, 0);
}

uint64_t sub_10012E498()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  void (*v29)(_QWORD, uint64_t, _QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  Class isa;
  _QWORD *v38;
  id v39;
  Class v40;
  _QWORD *v41;

  v1 = *(_QWORD **)(v0 + 440);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EF7F0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 480);
    v3 = *(_QWORD *)(v0 + 488);
    v6 = *(_QWORD *)(v0 + 464);
    v5 = *(_QWORD *)(v0 + 472);
    v7 = *(_QWORD *)(v0 + 448);
    v8 = *(_QWORD *)(v0 + 456);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v9 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 432);
    v10 = *(_QWORD *)(v0 + 440);
    v13 = *(_QWORD *)(v0 + 408);
    v12 = *(_QWORD *)(v0 + 416);
    v15 = *(_QWORD *)(v0 + 384);
    v14 = *(_QWORD *)(v0 + 392);
    v16 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 488));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 424);
    v18 = *(_QWORD *)(v0 + 432);
    *(_QWORD *)(v0 + 520) = *v1;
    sub_10012FC84((uint64_t)v1 + *(int *)(v2 + 48), v18);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      *(_QWORD *)(v0 + 672) = **(_QWORD **)(v0 + 432);
      v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 680) = v20;
      v21 = sub_10001A9A8((uint64_t *)&unk_1010FB770);
      *v20 = v0;
      v20[1] = sub_10012F550;
      v22 = *(_QWORD *)(v0 + 336);
      v23 = v0 + 240;
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 408);
      v25 = *(_QWORD *)(v0 + 416);
      v26 = *(_QWORD *)(v0 + 400);
      v27 = *(_QWORD *)(v0 + 376);
      sub_10012FD20(*(_QWORD *)(v0 + 432), v25);
      sub_10012FD64(v25, v24);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v26);
      v29 = *(void (**)(_QWORD, uint64_t, _QWORD))(v27 + 32);
      v30 = *(_QWORD *)(v0 + 408);
      v31 = *(_QWORD *)(v0 + 360);
      v32 = *(_QWORD *)(v0 + 368);
      v33 = *(_QWORD *)(v0 + 344);
      v34 = *(_QWORD *)(v0 + 352);
      if (EnumCaseMultiPayload == 1)
      {
        v35 = v0 + 272;
        v29(*(_QWORD *)(v0 + 384), v30, *(_QWORD *)(v0 + 368));
        v36 = objc_msgSend(objc_allocWithZone((Class)SPDiscoveredAccessory), "init");
        *(_QWORD *)(v0 + 600) = v36;
        Identifier.id.getter(v32);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v33);
        objc_msgSend(v36, "setIdentifier:", isa);

        v38 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v0 + 608) = v38;
        v21 = sub_10001A9A8((uint64_t *)&unk_1010FB770);
        *v38 = v0;
        v38[1] = sub_10012EEC4;
      }
      else
      {
        v35 = v0 + 304;
        v29(*(_QWORD *)(v0 + 392), v30, *(_QWORD *)(v0 + 368));
        v39 = objc_msgSend(objc_allocWithZone((Class)SPDiscoveredAccessory), "init");
        *(_QWORD *)(v0 + 528) = v39;
        Identifier.id.getter(v32);
        v40 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v31, v33);
        objc_msgSend(v39, "setIdentifier:", v40);

        v41 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v0 + 536) = v41;
        v21 = sub_10001A9A8((uint64_t *)&unk_1010FB770);
        *v41 = v0;
        v41[1] = sub_10012E830;
      }
      v22 = *(_QWORD *)(v0 + 336);
      v23 = v35;
    }
    return withCheckedContinuation<A>(isolation:function:_:)(v23, 0, 0, 0x736553636E797361, 0xED0000736E6F6973, sub_10012FCCC, v22, v21);
  }
}

uint64_t sub_10012E830()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 536));
  return swift_task_switch(sub_10012E884, 0, 0);
}

void sub_10012E884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 304);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 304);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10001A9A8(&qword_1010EF800);
    v5 = sub_10012FCD4();
    v6 = Set.Iterator.init(_cocoa:)((_QWORD *)(v0 + 96), v3, v4, v5);
    v1 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 560) = v8;
    *(_QWORD *)(v0 + 552) = v7;
    *(_QWORD *)(v0 + 544) = v1;
    if (v1 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(v6);
      if (v25)
      {
        v26 = v25;
        *(_QWORD *)(v0 + 328) = v25;
        swift_unknownObjectRetain(v25);
        v27 = sub_10001A9A8(&qword_1010EF800);
        swift_dynamicCast(v0 + 320, v0 + 328, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
        v14 = *(_QWORD *)(v0 + 320);
        swift_unknownObjectRelease(v26);
        v13 = v9;
        v11 = v10;
LABEL_9:
        *(_QWORD *)(v0 + 584) = v11;
        *(_QWORD *)(v0 + 576) = v13;
        *(_QWORD *)(v0 + 568) = v14;
        if (v14)
        {
          v15 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
          *(_QWORD *)(v0 + 592) = v15;
          *v15 = v0;
          v15[1] = sub_10012EBA4;
          XPCSession.proxy(errorHandler:)(v0 + 312, SharingCircleWildAdvertisementKey.init(key:), 0);
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (v10)
    {
LABEL_7:
      v11 = (v10 - 1) & v10;
      v12 = __clz(__rbit64(v10)) | (v9 << 6);
      v13 = v9;
LABEL_8:
      v14 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      swift_retain();
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    v16 = -1;
    v17 = -1 << *(_BYTE *)(v1 + 32);
    v8 = ~v17;
    v7 = v1 + 56;
    v18 = *(_QWORD *)(v1 + 56);
    v19 = -v17;
    v20 = v19 < 64;
    v21 = -1 << v19;
    *(_QWORD *)(v0 + 560) = v8;
    if (v20)
      v16 = ~v21;
    v10 = v16 & v18;
    *(_QWORD *)(v0 + 552) = v7;
    *(_QWORD *)(v0 + 544) = v1;
    if ((v16 & v18) != 0)
      goto LABEL_7;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    v23 = (unint64_t)(v8 + 64) >> 6;
    if (v22 < v23)
    {
      v24 = *(_QWORD *)(v7 + 8 * v22);
      v13 = v9 + 1;
      if (v24)
      {
LABEL_18:
        v11 = (v24 - 1) & v24;
        v12 = __clz(__rbit64(v24)) + (v13 << 6);
        goto LABEL_8;
      }
      v13 = v9 + 2;
      if (v9 + 2 < v23)
      {
        v24 = *(_QWORD *)(v7 + 8 * v13);
        if (v24)
          goto LABEL_18;
        v13 = v9 + 3;
        if (v9 + 3 < v23)
        {
          v24 = *(_QWORD *)(v7 + 8 * v13);
          if (v24)
            goto LABEL_18;
          v13 = v9 + 4;
          if (v9 + 4 < v23)
          {
            v24 = *(_QWORD *)(v7 + 8 * v13);
            if (v24)
              goto LABEL_18;
            v28 = v9 + 5;
            while (v23 != v28)
            {
              v24 = *(_QWORD *)(v7 + 8 * v28++);
              if (v24)
              {
                v13 = v28 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_31:
    v29 = *(_QWORD *)(v0 + 544);
    v34 = *(_QWORD *)(v0 + 416);
    v30 = *(_QWORD *)(v0 + 392);
    v32 = *(_QWORD *)(v0 + 368);
    v31 = *(_QWORD *)(v0 + 376);

    swift_release();
    sub_10007CC38(v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    sub_10012FDA8(v34);
    v33 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 512) = v33;
    *v33 = v0;
    v33[1] = sub_10012E444;
    AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 440), 0, 0, *(_QWORD *)(v0 + 448));
    return;
  }
  __break(1u);
}

uint64_t sub_10012EBA4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 592));
  return swift_task_switch(sub_10012EBF8, 0, 0);
}

uint64_t sub_10012EBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 312);
  if (v1)
  {
    objc_msgSend(*(id *)(v0 + 312), "discoveredAccessory:", *(_QWORD *)(v0 + 528));
    swift_release();
    result = swift_unknownObjectRelease(v1);
  }
  else
  {
    result = swift_release();
  }
  v3 = *(_QWORD *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 544);
  if (v5 < 0)
  {
    v10 = __CocoaSet.Iterator.next()(result);
    if (v10)
    {
      v11 = v10;
      *(_QWORD *)(v0 + 328) = v10;
      swift_unknownObjectRetain(v10);
      v12 = sub_10001A9A8(&qword_1010EF800);
      swift_dynamicCast(v0 + 320, v0 + 328, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
      v9 = *(_QWORD *)(v0 + 320);
      swift_unknownObjectRelease(v11);
      v8 = v4;
      v6 = v3;
LABEL_10:
      *(_QWORD *)(v0 + 584) = v6;
      *(_QWORD *)(v0 + 576) = v8;
      *(_QWORD *)(v0 + 568) = v9;
      if (v9)
      {
        v13 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
        *(_QWORD *)(v0 + 592) = v13;
        *v13 = v0;
        v13[1] = sub_10012EBA4;
        return XPCSession.proxy(errorHandler:)(v0 + 312, SharingCircleWildAdvertisementKey.init(key:), 0);
      }
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
    v8 = *(_QWORD *)(v0 + 576);
LABEL_7:
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7);
    swift_retain();
    goto LABEL_10;
  }
  v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v15 = (unint64_t)(*(_QWORD *)(v0 + 560) + 64) >> 6;
    if (v14 < v15)
    {
      v16 = *(_QWORD *)(v0 + 552);
      v17 = *(_QWORD *)(v16 + 8 * v14);
      v8 = v4 + 1;
      if (v17)
      {
LABEL_15:
        v6 = (v17 - 1) & v17;
        v7 = __clz(__rbit64(v17)) + (v8 << 6);
        goto LABEL_7;
      }
      v8 = v4 + 2;
      if (v4 + 2 < v15)
      {
        v17 = *(_QWORD *)(v16 + 8 * v8);
        if (v17)
          goto LABEL_15;
        v8 = v4 + 3;
        if (v4 + 3 < v15)
        {
          v17 = *(_QWORD *)(v16 + 8 * v8);
          if (v17)
            goto LABEL_15;
          v8 = v4 + 4;
          if (v4 + 4 < v15)
          {
            v17 = *(_QWORD *)(v16 + 8 * v8);
            if (v17)
              goto LABEL_15;
            v18 = v4 + 5;
            while (v15 != v18)
            {
              v17 = *(_QWORD *)(v16 + 8 * v18++);
              if (v17)
              {
                v8 = v18 - 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
LABEL_26:
    v19 = *(_QWORD *)(v0 + 544);
    v24 = *(_QWORD *)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 392);
    v22 = *(_QWORD *)(v0 + 368);
    v21 = *(_QWORD *)(v0 + 376);

    swift_release();
    sub_10007CC38(v19);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    sub_10012FDA8(v24);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 512) = v23;
    *v23 = v0;
    v23[1] = sub_10012E444;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 440), 0, 0, *(_QWORD *)(v0 + 448));
  }
  __break(1u);
  return result;
}

uint64_t sub_10012EEC4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  return swift_task_switch(sub_10012EF18, 0, 0);
}

void sub_10012EF18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v1 = v0[34];
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = v0[34];
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10001A9A8(&qword_1010EF800);
    v5 = sub_10012FCD4();
    v6 = Set.Iterator.init(_cocoa:)(v0 + 7, v3, v4, v5);
    v1 = v0[7];
    v7 = v0[8];
    v8 = v0[9];
    v9 = v0[10];
    v10 = v0[11];
    v0[79] = v8;
    v0[78] = v7;
    v0[77] = v1;
    if (v1 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(v6);
      if (v25)
      {
        v26 = v25;
        v0[37] = v25;
        swift_unknownObjectRetain(v25);
        v27 = sub_10001A9A8(&qword_1010EF800);
        swift_dynamicCast(v0 + 36, v0 + 37, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
        v14 = v0[36];
        swift_unknownObjectRelease(v26);
        v13 = v9;
        v11 = v10;
LABEL_9:
        v0[82] = v11;
        v0[81] = v13;
        v0[80] = v14;
        if (v14)
        {
          v15 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
          v0[83] = v15;
          *v15 = v0;
          v15[1] = sub_10012F234;
          XPCSession.proxy(errorHandler:)(v0 + 35, SharingCircleWildAdvertisementKey.init(key:), 0);
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (v10)
    {
LABEL_7:
      v11 = (v10 - 1) & v10;
      v12 = __clz(__rbit64(v10)) | (v9 << 6);
      v13 = v9;
LABEL_8:
      v14 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      swift_retain();
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    v16 = -1;
    v17 = -1 << *(_BYTE *)(v1 + 32);
    v8 = ~v17;
    v7 = v1 + 56;
    v18 = *(_QWORD *)(v1 + 56);
    v19 = -v17;
    v20 = v19 < 64;
    v21 = -1 << v19;
    v0[79] = v8;
    if (v20)
      v16 = ~v21;
    v10 = v16 & v18;
    v0[78] = v7;
    v0[77] = v1;
    if ((v16 & v18) != 0)
      goto LABEL_7;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    v23 = (unint64_t)(v8 + 64) >> 6;
    if (v22 < v23)
    {
      v24 = *(_QWORD *)(v7 + 8 * v22);
      v13 = v9 + 1;
      if (v24)
      {
LABEL_18:
        v11 = (v24 - 1) & v24;
        v12 = __clz(__rbit64(v24)) + (v13 << 6);
        goto LABEL_8;
      }
      v13 = v9 + 2;
      if (v9 + 2 < v23)
      {
        v24 = *(_QWORD *)(v7 + 8 * v13);
        if (v24)
          goto LABEL_18;
        v13 = v9 + 3;
        if (v9 + 3 < v23)
        {
          v24 = *(_QWORD *)(v7 + 8 * v13);
          if (v24)
            goto LABEL_18;
          v13 = v9 + 4;
          if (v9 + 4 < v23)
          {
            v24 = *(_QWORD *)(v7 + 8 * v13);
            if (v24)
              goto LABEL_18;
            v28 = v9 + 5;
            while (v23 != v28)
            {
              v24 = *(_QWORD *)(v7 + 8 * v28++);
              if (v24)
              {
                v13 = v28 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_31:
    v29 = v0[77];
    v30 = (void *)v0[75];
    v35 = v0[52];
    v31 = v0[47];
    v32 = v0[48];
    v33 = v0[46];
    swift_release();

    sub_10007CC38(v29);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    sub_10012FDA8(v35);
    v34 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[64] = v34;
    *v34 = v0;
    v34[1] = sub_10012E444;
    AsyncStream.Iterator.next(isolation:)(v0[55], 0, 0, v0[56]);
    return;
  }
  __break(1u);
}

uint64_t sub_10012F234()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 664));
  return swift_task_switch(sub_10012F288, 0, 0);
}

uint64_t sub_10012F288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 280);
  if (v1)
  {
    objc_msgSend(*(id *)(v0 + 280), "lostAccessory:", *(_QWORD *)(v0 + 600));
    swift_release();
    result = swift_unknownObjectRelease(v1);
  }
  else
  {
    result = swift_release();
  }
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 616);
  if (v5 < 0)
  {
    v10 = __CocoaSet.Iterator.next()(result);
    if (v10)
    {
      v11 = v10;
      *(_QWORD *)(v0 + 296) = v10;
      swift_unknownObjectRetain(v10);
      v12 = sub_10001A9A8(&qword_1010EF800);
      swift_dynamicCast(v0 + 288, v0 + 296, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
      v9 = *(_QWORD *)(v0 + 288);
      swift_unknownObjectRelease(v11);
      v8 = v4;
      v6 = v3;
LABEL_10:
      *(_QWORD *)(v0 + 656) = v6;
      *(_QWORD *)(v0 + 648) = v8;
      *(_QWORD *)(v0 + 640) = v9;
      if (v9)
      {
        v13 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
        *(_QWORD *)(v0 + 664) = v13;
        *v13 = v0;
        v13[1] = sub_10012F234;
        return XPCSession.proxy(errorHandler:)(v0 + 280, SharingCircleWildAdvertisementKey.init(key:), 0);
      }
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
    v8 = *(_QWORD *)(v0 + 648);
LABEL_7:
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v7);
    swift_retain();
    goto LABEL_10;
  }
  v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    v15 = (unint64_t)(*(_QWORD *)(v0 + 632) + 64) >> 6;
    if (v14 < v15)
    {
      v16 = *(_QWORD *)(v0 + 624);
      v17 = *(_QWORD *)(v16 + 8 * v14);
      v8 = v4 + 1;
      if (v17)
      {
LABEL_15:
        v6 = (v17 - 1) & v17;
        v7 = __clz(__rbit64(v17)) + (v8 << 6);
        goto LABEL_7;
      }
      v8 = v4 + 2;
      if (v4 + 2 < v15)
      {
        v17 = *(_QWORD *)(v16 + 8 * v8);
        if (v17)
          goto LABEL_15;
        v8 = v4 + 3;
        if (v4 + 3 < v15)
        {
          v17 = *(_QWORD *)(v16 + 8 * v8);
          if (v17)
            goto LABEL_15;
          v8 = v4 + 4;
          if (v4 + 4 < v15)
          {
            v17 = *(_QWORD *)(v16 + 8 * v8);
            if (v17)
              goto LABEL_15;
            v18 = v4 + 5;
            while (v15 != v18)
            {
              v17 = *(_QWORD *)(v16 + 8 * v18++);
              if (v17)
              {
                v8 = v18 - 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
LABEL_26:
    v19 = *(_QWORD *)(v0 + 616);
    v20 = *(void **)(v0 + 600);
    v25 = *(_QWORD *)(v0 + 416);
    v21 = *(_QWORD *)(v0 + 376);
    v22 = *(_QWORD *)(v0 + 384);
    v23 = *(_QWORD *)(v0 + 368);
    swift_release();

    sub_10007CC38(v19);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    sub_10012FDA8(v25);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 512) = v24;
    *v24 = v0;
    v24[1] = sub_10012E444;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 440), 0, 0, *(_QWORD *)(v0 + 448));
  }
  __break(1u);
  return result;
}

uint64_t sub_10012F550()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 680));
  return swift_task_switch(sub_10012F5A4, 0, 0);
}

void sub_10012F5A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0[30];
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = v0[30];
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10001A9A8(&qword_1010EF800);
    v5 = sub_10012FCD4();
    v6 = Set.Iterator.init(_cocoa:)(v0 + 2, v3, v4, v5);
    v1 = v0[2];
    v7 = v0[3];
    v8 = v0[4];
    v9 = v0[5];
    v10 = v0[6];
    v0[88] = v8;
    v0[87] = v7;
    v0[86] = v1;
    if (v1 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(v6);
      if (v25)
      {
        v26 = v25;
        v0[33] = v25;
        swift_unknownObjectRetain(v25);
        v27 = sub_10001A9A8(&qword_1010EF800);
        swift_dynamicCast(v0 + 32, v0 + 33, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
        v14 = v0[32];
        swift_unknownObjectRelease(v26);
        v13 = v9;
        v11 = v10;
LABEL_9:
        v0[91] = v11;
        v0[90] = v13;
        v0[89] = v14;
        if (v14)
        {
          v15 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
          v0[92] = v15;
          *v15 = v0;
          v15[1] = sub_10012F87C;
          XPCSession.proxy(errorHandler:)(v0 + 31, SharingCircleWildAdvertisementKey.init(key:), 0);
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (v10)
    {
LABEL_7:
      v11 = (v10 - 1) & v10;
      v12 = __clz(__rbit64(v10)) | (v9 << 6);
      v13 = v9;
LABEL_8:
      v14 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      swift_retain();
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    v16 = -1;
    v17 = -1 << *(_BYTE *)(v1 + 32);
    v8 = ~v17;
    v7 = v1 + 56;
    v18 = *(_QWORD *)(v1 + 56);
    v19 = -v17;
    v20 = v19 < 64;
    v21 = -1 << v19;
    v0[88] = v8;
    if (v20)
      v16 = ~v21;
    v10 = v16 & v18;
    v0[87] = v7;
    v0[86] = v1;
    if ((v16 & v18) != 0)
      goto LABEL_7;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    v23 = (unint64_t)(v8 + 64) >> 6;
    if (v22 < v23)
    {
      v24 = *(_QWORD *)(v7 + 8 * v22);
      v13 = v9 + 1;
      if (v24)
      {
LABEL_18:
        v11 = (v24 - 1) & v24;
        v12 = __clz(__rbit64(v24)) + (v13 << 6);
        goto LABEL_8;
      }
      v13 = v9 + 2;
      if (v9 + 2 < v23)
      {
        v24 = *(_QWORD *)(v7 + 8 * v13);
        if (v24)
          goto LABEL_18;
        v13 = v9 + 3;
        if (v9 + 3 < v23)
        {
          v24 = *(_QWORD *)(v7 + 8 * v13);
          if (v24)
            goto LABEL_18;
          v13 = v9 + 4;
          if (v9 + 4 < v23)
          {
            v24 = *(_QWORD *)(v7 + 8 * v13);
            if (v24)
              goto LABEL_18;
            v28 = v9 + 5;
            while (v23 != v28)
            {
              v24 = *(_QWORD *)(v7 + 8 * v28++);
              if (v24)
              {
                v13 = v28 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_31:
    v29 = v0[84];
    sub_10007CC38(v0[86]);
    swift_errorRelease(v29);
    swift_release();
    v30 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[64] = v30;
    *v30 = v0;
    v30[1] = sub_10012E444;
    AsyncStream.Iterator.next(isolation:)(v0[55], 0, 0, v0[56]);
    return;
  }
  __break(1u);
}

uint64_t sub_10012F87C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 736));
  return swift_task_switch(sub_10012F8D0, 0, 0);
}

uint64_t sub_10012F8D0()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = (void *)v0[31];
  if (v1)
  {
    v2 = (void *)_convertErrorToNSError(_:)(v0[84]);
    objc_msgSend(v1, "accessoryDiscoveryError:", v2);
    swift_release();

    result = swift_unknownObjectRelease(v1);
  }
  else
  {
    result = swift_release();
  }
  v4 = v0[91];
  v5 = v0[90];
  v6 = v0[86];
  if (v6 < 0)
  {
    v11 = __CocoaSet.Iterator.next()(result);
    if (v11)
    {
      v12 = v11;
      v0[33] = v11;
      swift_unknownObjectRetain(v11);
      v13 = sub_10001A9A8(&qword_1010EF800);
      swift_dynamicCast(v0 + 32, v0 + 33, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
      v10 = v0[32];
      swift_unknownObjectRelease(v12);
      v9 = v5;
      v7 = v4;
LABEL_10:
      v0[91] = v7;
      v0[90] = v9;
      v0[89] = v10;
      if (v10)
      {
        v14 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
        v0[92] = v14;
        *v14 = v0;
        v14[1] = sub_10012F87C;
        return XPCSession.proxy(errorHandler:)(v0 + 31, SharingCircleWildAdvertisementKey.init(key:), 0);
      }
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
    v9 = v0[90];
LABEL_7:
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v8);
    swift_retain();
    goto LABEL_10;
  }
  v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v16 = (unint64_t)(v0[88] + 64) >> 6;
    if (v15 < v16)
    {
      v17 = v0[87];
      v18 = *(_QWORD *)(v17 + 8 * v15);
      v9 = v5 + 1;
      if (v18)
      {
LABEL_15:
        v7 = (v18 - 1) & v18;
        v8 = __clz(__rbit64(v18)) + (v9 << 6);
        goto LABEL_7;
      }
      v9 = v5 + 2;
      if (v5 + 2 < v16)
      {
        v18 = *(_QWORD *)(v17 + 8 * v9);
        if (v18)
          goto LABEL_15;
        v9 = v5 + 3;
        if (v5 + 3 < v16)
        {
          v18 = *(_QWORD *)(v17 + 8 * v9);
          if (v18)
            goto LABEL_15;
          v9 = v5 + 4;
          if (v5 + 4 < v16)
          {
            v18 = *(_QWORD *)(v17 + 8 * v9);
            if (v18)
              goto LABEL_15;
            v19 = v5 + 5;
            while (v16 != v19)
            {
              v18 = *(_QWORD *)(v17 + 8 * v19++);
              if (v18)
              {
                v9 = v19 - 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
LABEL_26:
    v20 = v0[84];
    sub_10007CC38(v0[86]);
    swift_errorRelease(v20);
    swift_release();
    v21 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[64] = v21;
    *v21 = v0;
    v21[1] = sub_10012E444;
    return AsyncStream.Iterator.next(isolation:)(v0[55], 0, 0, v0[56]);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LocalFindableAccessoryDiscoverySession(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EF6A8;
  if (!qword_1010EF6A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalFindableAccessoryDiscoverySession);
  return result;
}

uint64_t sub_10012FBA0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10012FBCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1010EF7B4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_10012DF64(a1, v4, v5, v6);
}

uint64_t sub_10012FC44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F46C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012FC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EF7C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012FCCC(uint64_t a1)
{
  uint64_t v1;

  return sub_1007268C0(a1, v1);
}

unint64_t sub_10012FCD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FB780;
  if (!qword_1010FB780)
  {
    v1 = sub_10001F784(&qword_1010EF800);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for XPCSession<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1010FB780);
  }
  return result;
}

uint64_t sub_10012FD20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012FD64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012FDA8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10012FDE4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v38 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v38 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_10001BBBC(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)a1 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (_QWORD *)((char *)a1 + v14);
    v19 = (_QWORD *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[9];
    *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v24 = a3[10];
    v25 = a3[11];
    v26 = (char *)a1 + v24;
    v27 = (char *)a2 + v24;
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v28 = (char *)a1 + v25;
    v29 = (char *)a2 + v25;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = v29[8];
    v30 = a3[12];
    v31 = a3[13];
    v32 = (char *)a1 + v30;
    v33 = (char *)a2 + v30;
    *(_DWORD *)v32 = *(_DWORD *)v33;
    v32[4] = v33[4];
    *((_BYTE *)a1 + v31) = *((_BYTE *)a2 + v31);
    v34 = a3[15];
    *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    v35 = (_QWORD *)((char *)a1 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v37);
  }
  return a1;
}

uint64_t sub_10012FF58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10012FFD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001BBBC(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)(a1 + v13);
  v18 = (_QWORD *)(a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a3[10];
  v24 = a3[11];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[12];
  v30 = a3[13];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v33 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v36);
  return a1;
}

uint64_t sub_100130118(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001BBBC(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_10001BC14(v12, v13);
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_WORD *)v23 = *(_WORD *)v24;
  *(_BYTE *)(v23 + 2) = *(_BYTE *)(v24 + 2);
  *(_BYTE *)(v23 + 3) = *(_BYTE *)(v24 + 3);
  v25 = a3[9];
  v26 = a1 + v25;
  v27 = (int *)(a2 + v25);
  v28 = *v27;
  *(_BYTE *)(v26 + 4) = *((_BYTE *)v27 + 4);
  *(_DWORD *)v26 = v28;
  v29 = a3[10];
  v30 = a1 + v29;
  v31 = (__int128 *)(a2 + v29);
  v32 = *v31;
  *(_BYTE *)(v30 + 16) = *((_BYTE *)v31 + 16);
  *(_OWORD *)v30 = v32;
  v33 = a3[11];
  v34 = a1 + v33;
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  *(_BYTE *)(v34 + 8) = *((_BYTE *)v35 + 8);
  *(_QWORD *)v34 = v36;
  v37 = a3[12];
  v38 = a1 + v37;
  v39 = a2 + v37;
  LODWORD(v36) = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_DWORD *)v38 = v36;
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v40 = a3[15];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001302C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  v9 = a3[9];
  v10 = a3[10];
  v11 = a1 + v9;
  v12 = a2 + v9;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a1 + v10;
  v14 = a2 + v10;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  v15 = a3[11];
  v16 = a3[12];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a1 + v16;
  v20 = a2 + v16;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  v21 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1001303C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001BC14(v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a3[10];
  v24 = a3[11];
  v25 = a1 + v23;
  v26 = a2 + v23;
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_BYTE *)(v25 + 16) = *(_BYTE *)(v26 + 16);
  v27 = a1 + v24;
  v28 = a2 + v24;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[12];
  v30 = a3[13];
  v31 = a1 + v29;
  v32 = a2 + v29;
  *(_DWORD *)v31 = *(_DWORD *)v32;
  *(_BYTE *)(v31 + 4) = *(_BYTE *)(v32 + 4);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  v33 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  v34 = (_QWORD *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100130508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100130514);
}

uint64_t sub_100130514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 60) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100130594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001305A0);
}

uint64_t sub_1001305A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 60) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AccessoryMetadata(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010EF860, (uint64_t)&nominal type descriptor for AccessoryMetadata);
}

uint64_t sub_100130630(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E27EB8;
    v4[2] = &unk_100E27ED0;
    v4[3] = &unk_100E27ED0;
    v4[4] = &unk_100E27EE8;
    v4[5] = &unk_100E27F00;
    v4[6] = &unk_100E27F18;
    v4[7] = &unk_100E27F30;
    v4[8] = &unk_100E27F48;
    v4[9] = &unk_100E27F60;
    v4[10] = &unk_100E27F78;
    v4[11] = &unk_100E27F90;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

unsigned __int8 *sub_1001306FC@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 4)
    LOBYTE(v2) = 4;
  *a2 = v2;
  return result;
}

uint64_t sub_100130714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100137E1C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100130770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100137E1C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001307BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001307E4 + 4 * byte_100E27E50[*v0]))(1819047270, 0xE400000000000000);
}

uint64_t sub_1001307E4()
{
  return 0x6D756964656DLL;
}

uint64_t sub_1001307F8()
{
  return 7827308;
}

uint64_t sub_100130808()
{
  return 0x6C61636974697263;
}

uint64_t sub_10013082C()
{
  return 0x6E776F6E6B6E75;
}

void sub_100130844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;

  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  v6 = (uint64_t *)(v1 + v5[5]);
  v7 = v6[1];
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v8 = *v6;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v8, v7);
    Data.hash(into:)(a1, v8, v7);
    sub_10001EF3C(v8, v7);
  }
  v9 = (uint64_t *)(v1 + v5[6]);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *v9;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v11, v10);
    Data.hash(into:)(a1, v11, v10);
    sub_10001EF3C(v11, v10);
  }
  v12 = (uint64_t *)(v1 + v5[7]);
  v13 = v12[1];
  if (v13 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = *v12;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v14, v13);
    Data.hash(into:)(a1, v14, v13);
    sub_10001EF3C(v14, v13);
  }
  v15 = (uint64_t *)(v1 + v5[8]);
  v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *v15;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v17, v16);
    Data.hash(into:)(a1, v17, v16);
    sub_10001EF3C(v17, v16);
  }
  v18 = (uint64_t *)(v1 + v5[9]);
  v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v20 = *v18;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v20, v19);
    Data.hash(into:)(a1, v20, v19);
    sub_10001EF3C(v20, v19);
  }
  v21 = (uint64_t *)(v1 + v5[10]);
  v22 = v21[1];
  if (v22 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v23 = *v21;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v23, v22);
    Data.hash(into:)(a1, v23, v22);
    sub_10001EF3C(v23, v22);
  }
  v24 = (uint64_t *)(v1 + v5[11]);
  v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v26 = *v24;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v26, v25);
    Data.hash(into:)(a1, v26, v25);
    sub_10001EF3C(v26, v25);
  }
  v27 = (uint64_t *)(v1 + v5[12]);
  v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = *v27;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v29, v28);
    Data.hash(into:)(a1, v29, v28);
    sub_10001EF3C(v29, v28);
  }
  v30 = (uint64_t *)(v1 + v5[13]);
  v31 = v30[1];
  if (v31 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v32 = *v30;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v32, v31);
    Data.hash(into:)(a1, v32, v31);
    sub_10001EF3C(v32, v31);
  }
  v33 = (uint64_t *)(v1 + v5[14]);
  v34 = v33[1];
  if (v34 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = *v33;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v35, v34);
    Data.hash(into:)(a1, v35, v34);
    sub_10001EF3C(v35, v34);
  }
}

uint64_t sub_100130C84(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100130CBC + 4 * byte_100E27E55[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_100130CBC()
{
  return 0x44746375646F7270;
}

unint64_t sub_100130CDC()
{
  return 0xD000000000000010;
}

uint64_t sub_100130CF8()
{
  return 0x6D614E6C65646F6DLL;
}

uint64_t sub_100130D14()
{
  return 0x6465767265736572;
}

unint64_t sub_100130D2C()
{
  return 0xD000000000000011;
}

uint64_t sub_100130D68()
{
  return 0x657261776D726966;
}

uint64_t sub_100130D8C()
{
  return 0x5479726574746162;
}

uint64_t sub_100130DAC()
{
  return 0x4C79726574746162;
}

uint64_t sub_100130DCC()
{
  return 0x6556794D646E6966;
}

uint64_t sub_100130DF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010EFA88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100137E60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RawAccessoryMetadata.CodingKeys, &type metadata for RawAccessoryMetadata.CodingKeys, v11, v9, v10);
  LOBYTE(v19) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v19, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for RawAccessoryMetadata(0);
    v19 = *(_OWORD *)(v3 + v14[5]);
    v18 = 1;
    v15 = sub_100036A58();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[6]);
    v18 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[7]);
    v18 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[8]);
    v18 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[9]);
    v18 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[10]);
    v18 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[11]);
    v18 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[12]);
    v18 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[13]);
    v18 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
    v19 = *(_OWORD *)(v3 + v14[14]);
    v18 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001311A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t result;
  int v21;
  char v22;
  char *v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  int *v36;
  __int128 v37;
  int v38;
  char v39;

  v5 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_10001A9A8(&qword_1010EFA78);
  v8 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  __chkstk_darwin(v36);
  v35 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v33 = a1;
  sub_10001AA44(a1, v12);
  v14 = sub_100137E60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RawAccessoryMetadata.CodingKeys, &type metadata for RawAccessoryMetadata.CodingKeys, v14, v12, v13);
  if (v2)
  {
    v34 = v2;
    v18 = v35;
    v19 = v36;
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    v38 = 0;
    v21 = 0;
    LODWORD(v32) = 0;
  }
  else
  {
    v29 = a2;
    v30 = v8;
    LOBYTE(v37) = 0;
    v15 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = v32;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v5, &v37, v32, v5, v15);
    v17 = v5;
    v23 = v35;
    (*(void (**)(char *, _QWORD *, uint64_t))(v31 + 32))(v35, v7, v5);
    v39 = 1;
    v24 = sub_100036994();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    v25 = v36;
    *(_OWORD *)&v23[v36[5]] = v37;
    v39 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    *(_OWORD *)&v23[v25[6]] = v37;
    v39 = 3;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    *(_OWORD *)&v23[v25[7]] = v37;
    v39 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    *(_OWORD *)&v23[v25[8]] = v37;
    v39 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    *(_OWORD *)&v23[v25[9]] = v37;
    v39 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    *(_OWORD *)&v23[v25[10]] = v37;
    v39 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    v38 = 1;
    v26 = v17;
    *(_OWORD *)&v23[v25[11]] = v37;
    v39 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    *(_OWORD *)&v23[v25[12]] = v37;
    v39 = 9;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v16, &type metadata for Data, v24);
    v34 = 0;
    *(_OWORD *)&v35[v36[13]] = v37;
    v39 = 10;
    v27 = v34;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v39, v32, &type metadata for Data, v24);
    v34 = v27;
    if (!v27)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v32);
      v28 = (uint64_t)v35;
      *(_OWORD *)&v35[v36[14]] = v37;
      sub_10005972C(v28, v29, type metadata accessor for RawAccessoryMetadata);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
      return sub_1000126B0(v28, type metadata accessor for RawAccessoryMetadata);
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v32);
    v21 = 1;
    LODWORD(v32) = 1;
    v18 = v35;
    v19 = v36;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v26);
    sub_10001EF3C(*(_QWORD *)&v18[v19[5]], *(_QWORD *)&v18[v19[5] + 8]);
    sub_10001EF3C(*(_QWORD *)&v18[v19[6]], *(_QWORD *)&v18[v19[6] + 8]);
    sub_10001EF3C(*(_QWORD *)&v18[v19[7]], *(_QWORD *)&v18[v19[7] + 8]);
    sub_10001EF3C(*(_QWORD *)&v18[v19[8]], *(_QWORD *)&v18[v19[8] + 8]);
    sub_10001EF3C(*(_QWORD *)&v18[v19[9]], *(_QWORD *)&v18[v19[9] + 8]);
    v22 = v38;
    result = sub_10001EF3C(*(_QWORD *)&v18[v19[10]], *(_QWORD *)&v18[v19[10] + 8]);
    if ((v22 & 1) != 0)
    {
      sub_10001EF3C(*(_QWORD *)&v18[v19[11]], *(_QWORD *)&v18[v19[11] + 8]);
      goto LABEL_6;
    }
  }
  if (!v21)
  {
    if (!(_DWORD)v32)
      return result;
    return sub_10001EF3C(*(_QWORD *)&v18[v19[13]], *(_QWORD *)&v18[v19[13] + 8]);
  }
LABEL_6:
  result = sub_10001EF3C(*(_QWORD *)&v18[v19[12]], *(_QWORD *)&v18[v19[12] + 8]);
  if ((v32 & 1) == 0)
    return result;
  return sub_10001EF3C(*(_QWORD *)&v18[v19[13]], *(_QWORD *)&v18[v19[13] + 8]);
}

uint64_t sub_100131910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100137DD8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10013196C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100137DD8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001319B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001319E8 + 4 * byte_100E27E60[*v0]))(0x64657265776F70, 0xE700000000000000);
}

uint64_t sub_1001319E8()
{
  return 0x61686365526E6F6ELL;
}

uint64_t sub_100131A0C()
{
  return 0x6167726168636572;
}

uint64_t sub_100131A2C()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_100131A40()
{
  unsigned __int8 *v0;

  return sub_100130C84(*v0);
}

uint64_t sub_100131A48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10013579C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100131A6C(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100131A78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100137E60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100131AA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100137E60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100131AC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001311A0(a1, a2);
}

uint64_t sub_100131ADC(_QWORD *a1)
{
  return sub_100130DF0(a1);
}

Swift::Int sub_100131AF0(uint64_t a1, uint64_t a2)
{
  return sub_100132C8C(a1, a2, (void (*)(_QWORD *))sub_100130844);
}

Swift::Int sub_100131B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100132CDC(a1, a2, a3, (void (*)(_QWORD *))sub_100130844);
}

uint64_t sub_100131B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt8 v17;
  Swift::UInt8 v18;
  int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  Swift::UInt32 v23;
  Swift::UInt32 v24;
  Swift::UInt32 v25;
  Swift::UInt32 v26;
  uint64_t v27;
  Swift::UInt64 v28;
  uint64_t v29;
  Swift::UInt32 v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  v6 = (int *)type metadata accessor for AccessoryMetadata(0);
  v7 = (uint64_t *)(v1 + v6[5]);
  v8 = *v7;
  v9 = v7[1];
  sub_10001BBBC(*v7, v9);
  Data.hash(into:)(a1, v8, v9);
  sub_10001BC14(v8, v9);
  v10 = (uint64_t *)(v2 + v6[6]);
  v11 = v10[1];
  if (v11)
  {
    v12 = *v10;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v11);
    String.hash(into:)(a1, v12, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v13 = (uint64_t *)(v2 + v6[7]);
  v14 = v13[1];
  if (v14)
  {
    v15 = *v13;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v14);
    String.hash(into:)(a1, v15, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v16 = v2 + v6[8];
  v17 = *(_BYTE *)(v16 + 2);
  v18 = *(_BYTE *)(v16 + 3);
  Hasher._combine(_:)(*(_WORD *)v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  v19 = (int *)(v2 + v6[9]);
  if ((v19[1] & 1) != 0)
  {
    LOBYTE(v20) = 0;
  }
  else
  {
    v21 = *v19;
    v20 = HIBYTE(*v19);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(BYTE2(v21));
  }
  Hasher._combine(_:)(v20);
  v22 = v2 + v6[10];
  if (*(_BYTE *)(v22 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v24 = *(_DWORD *)(v22 + 8);
    v23 = *(_DWORD *)(v22 + 12);
    v26 = *(_DWORD *)v22;
    v25 = *(_DWORD *)(v22 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
    Hasher._combine(_:)(v25);
    Hasher._combine(_:)(v24);
    Hasher._combine(_:)(v23);
  }
  v27 = v2 + v6[11];
  if (*(_BYTE *)(v27 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = *(_QWORD *)v27;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }
  v29 = v2 + v6[12];
  if (*(_BYTE *)(v29 + 4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v30 = *(_DWORD *)v29;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }
  v31 = *(unsigned __int8 *)(v2 + v6[13]);
  if (v31 == 4)
    LOBYTE(v31) = 0;
  else
    Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v31);
  v32 = *(unsigned __int8 *)(v2 + v6[14]);
  if (v32 == 5)
    LOBYTE(v32) = 0;
  else
    Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v32);
  v33 = (uint64_t *)(v2 + v6[15]);
  v34 = *v33;
  v35 = v33[1];
  swift_bridgeObjectRetain(v35);
  String.hash(into:)(a1, v34, v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100131E30(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100131E68 + 4 * byte_100E27E64[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_100131E68()
{
  return 0x44746375646F7270;
}

unint64_t sub_100131E88()
{
  return 0xD000000000000010;
}

uint64_t sub_100131EA4()
{
  return 0x6D614E6C65646F6DLL;
}

uint64_t sub_100131EC0()
{
  return 0x657261776D726966;
}

unint64_t sub_100131EF8()
{
  return 0xD000000000000025;
}

uint64_t sub_100131F4C()
{
  return 0x5479726574746162;
}

uint64_t sub_100131F6C()
{
  return 0x5379726574746162;
}

uint64_t sub_100131F8C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_100131FA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int v24;
  __int128 *v25;
  char v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v40;
  char v41;
  char v42;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010EF940);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001361EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryMetadata.CodingKeys, &type metadata for AccessoryMetadata.CodingKeys, v11, v9, v10);
  LOBYTE(v40) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v40, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for AccessoryMetadata(0);
    v40 = *(_OWORD *)(v3 + v14[5]);
    v42 = 1;
    v15 = sub_1001363C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryProductData, v15);
    v16 = (uint64_t *)(v3 + v14[6]);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v40) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v40, v5);
    v19 = (uint64_t *)(v3 + v14[7]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v40) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v40, v5);
    LODWORD(v40) = *(_DWORD *)(v3 + v14[8]);
    v42 = 4;
    v22 = sub_10013640C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v40, &v42, v5, &type metadata for VersionNumber, v22);
    v23 = (int *)(v3 + v14[9]);
    v24 = *v23;
    LOBYTE(v23) = *((_BYTE *)v23 + 4);
    LODWORD(v40) = v24;
    BYTE4(v40) = (_BYTE)v23;
    v42 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for VersionNumber, v22);
    v25 = (__int128 *)(v3 + v14[10]);
    v26 = *((_BYTE *)v25 + 16);
    v40 = *v25;
    v41 = v26;
    v42 = 6;
    v27 = sub_100136450();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for LocalFindableAccessoryFirmwareVersionNumber, v27);
    v28 = (uint64_t *)(v3 + v14[11]);
    v29 = *v28;
    v30 = *((unsigned __int8 *)v28 + 8);
    LOBYTE(v40) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v40, v5);
    v31 = (int *)(v3 + v14[12]);
    v32 = *v31;
    LOBYTE(v31) = *((_BYTE *)v31 + 4);
    LODWORD(v40) = v32;
    BYTE4(v40) = (_BYTE)v31;
    v42 = 8;
    v33 = sub_100136494();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryCapabilities, v33);
    LOBYTE(v40) = *(_BYTE *)(v3 + v14[13]);
    v42 = 9;
    v34 = sub_1001364D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryBatteryType, v34);
    LOBYTE(v40) = *(_BYTE *)(v3 + v14[14]);
    v42 = 10;
    v35 = sub_10013651C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v40, &v42, v5, &type metadata for AccessoryBatteryLevel, v35);
    v36 = (uint64_t *)(v3 + v14[15]);
    v37 = *v36;
    v38 = v36[1];
    LOBYTE(v40) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v37, v38, &v40, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100132390@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  int *v57;
  char *v58;
  __int128 v59;
  char v60;
  char v61;

  v51 = a2;
  v4 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_10001A9A8(&qword_1010EF900);
  v7 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessoryMetadata(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v13[*(int *)(v11 + 40)];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v57 = (int *)v11;
  v58 = v13;
  v15 = &v13[*(int *)(v11 + 60)];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0xE000000000000000;
  v55 = a1;
  v56 = v15;
  v16 = a1[3];
  v17 = a1[4];
  sub_10001AA44(a1, v16);
  v18 = sub_1001361EC();
  v54 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryMetadata.CodingKeys, &type metadata for AccessoryMetadata.CodingKeys, v18, v16, v17);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v50 = v7;
    LOBYTE(v59) = 0;
    v19 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v4, &v59, v52, v4, v19);
    v22 = (uint64_t)v58;
    (*(void (**)(char *, _QWORD *, uint64_t))(v53 + 32))(v58, v6, v4);
    v61 = 1;
    v23 = sub_100136230();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v59, &type metadata for AccessoryProductData, &v61, v20, &type metadata for AccessoryProductData, v23);
    v24 = v57;
    *(_OWORD *)(v22 + v57[5]) = v59;
    LOBYTE(v59) = 2;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v20);
    v26 = (uint64_t *)(v22 + v24[6]);
    *v26 = v25;
    v26[1] = v27;
    LOBYTE(v59) = 3;
    v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v20);
    v29 = (uint64_t *)(v22 + v24[7]);
    *v29 = v28;
    v29[1] = v30;
    v61 = 4;
    v31 = sub_100136274();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v59, &type metadata for VersionNumber, &v61, v20, &type metadata for VersionNumber, v31);
    *(_DWORD *)(v22 + v24[8]) = v59;
    v61 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for VersionNumber, &v61, v20, &type metadata for VersionNumber, v31);
    v32 = BYTE4(v59);
    v33 = v22 + v24[9];
    *(_DWORD *)v33 = v59;
    *(_BYTE *)(v33 + 4) = v32;
    v61 = 6;
    v34 = sub_1001362B8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for LocalFindableAccessoryFirmwareVersionNumber, &v61, v20, &type metadata for LocalFindableAccessoryFirmwareVersionNumber, v34);
    v35 = v60;
    *(_OWORD *)v14 = v59;
    v14[16] = v35;
    LOBYTE(v59) = 7;
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v59, v20);
    v37 = v22 + v24[11];
    *(_QWORD *)v37 = v36;
    *(_BYTE *)(v37 + 8) = v38 & 1;
    v61 = 8;
    v39 = sub_1001362FC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AccessoryCapabilities, &v61, v20, &type metadata for AccessoryCapabilities, v39);
    v40 = BYTE4(v59);
    v41 = v22 + v24[12];
    *(_DWORD *)v41 = v59;
    *(_BYTE *)(v41 + 4) = v40;
    v61 = 9;
    v42 = sub_100136340();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AccessoryBatteryType, &v61, v20, &type metadata for AccessoryBatteryType, v42);
    v58[v57[13]] = v59;
    v61 = 10;
    v43 = sub_100136384();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AccessoryBatteryLevel, &v61, v52, &type metadata for AccessoryBatteryLevel, v43);
    v58[v57[14]] = v59;
    LOBYTE(v59) = 11;
    v44 = KeyedDecodingContainer.decode(_:forKey:)(&v59, v52);
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v52);
    v47 = (uint64_t *)v56;
    swift_bridgeObjectRelease();
    *v47 = v44;
    v47[1] = v46;
    v48 = (uint64_t)v58;
    sub_10005972C((uint64_t)v58, v51, type metadata accessor for AccessoryMetadata);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    return sub_1000126B0(v48, type metadata accessor for AccessoryMetadata);
  }
}

uint64_t sub_100132A1C()
{
  return 0;
}

int *sub_100132A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned int a8@<W7>, uint64_t a9@<X8>, int a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, int a17, int a18, char a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  __int16 v24;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int *result;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v24 = a8;
  v30 = HIWORD(a8);
  v31 = HIBYTE(a8);
  v32 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(a9, a1, v32);
  result = (int *)type metadata accessor for AccessoryMetadata(0);
  v34 = (_QWORD *)(a9 + result[5]);
  *v34 = a2;
  v34[1] = a3;
  v35 = (_QWORD *)(a9 + result[6]);
  *v35 = a4;
  v35[1] = a5;
  v36 = (_QWORD *)(a9 + result[7]);
  *v36 = a6;
  v36[1] = a7;
  v37 = a9 + result[8];
  *(_WORD *)v37 = v24;
  *(_BYTE *)(v37 + 2) = v30;
  *(_BYTE *)(v37 + 3) = v31;
  v38 = a9 + result[9];
  *(_DWORD *)v38 = a10;
  *(_BYTE *)(v38 + 4) = a11 & 1;
  v39 = a9 + result[10];
  *(_QWORD *)v39 = a12;
  *(_QWORD *)(v39 + 8) = a13;
  *(_BYTE *)(v39 + 16) = a14 & 1;
  v40 = a9 + result[11];
  *(_QWORD *)v40 = a15;
  *(_BYTE *)(v40 + 8) = a16 & 1;
  v41 = a9 + result[12];
  *(_DWORD *)v41 = a18;
  *(_BYTE *)(v41 + 4) = a19 & 1;
  *(_BYTE *)(a9 + result[13]) = a21;
  *(_BYTE *)(a9 + result[14]) = a22;
  v42 = (_QWORD *)(a9 + result[15]);
  *v42 = a23;
  v42[1] = a24;
  return result;
}

uint64_t sub_100132BDC()
{
  unsigned __int8 *v0;

  return sub_100131E30(*v0);
}

uint64_t sub_100132BE4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100135CA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100132C08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001361EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100132C30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001361EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100132C58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100132390(a1, a2);
}

uint64_t sub_100132C6C(_QWORD *a1)
{
  return sub_100131FA4(a1);
}

Swift::Int sub_100132C80(uint64_t a1, uint64_t a2)
{
  return sub_100132C8C(a1, a2, (void (*)(_QWORD *))sub_100131B10);
}

Swift::Int sub_100132C8C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_100132CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100132CDC(a1, a2, a3, (void (*)(_QWORD *))sub_100131B10);
}

Swift::Int sub_100132CDC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  a4(v6);
  return Hasher._finalize()();
}

uint64_t sub_100132D1C()
{
  return sub_100006204(&qword_1010EF8C0, type metadata accessor for AccessoryMetadata, (uint64_t)&unk_100E27FA8);
}

uint64_t sub_100132D48()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  int *v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  int *v15;
  int v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  int *v23;
  int v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t result;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  _QWORD v46[2];

  v46[0] = 0;
  v46[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(214);
  v1._countAndFlagsBits = 0x5B203A64697BLL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000100EC8280;
  v5._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v5);
  v6 = (int *)type metadata accessor for AccessoryMetadata(0);
  v45 = *(Swift::String *)(v0 + v6[5]);
  v7 = sub_100133250();
  v8._countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000015;
  v9._object = (void *)0x8000000100EC82A0;
  String.append(_:)(v9);
  v45 = *(Swift::String *)(v0 + v6[6]);
  v10 = sub_10001A9A8(&qword_1010F6350);
  _print_unlocked<A, B>(_:_:)(&v45, v46, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 0x4E6C65646F6D205DLL;
  v11._object = (void *)0xEE005B203A656D61;
  String.append(_:)(v11);
  v45 = *(Swift::String *)(v0 + v6[7]);
  _print_unlocked<A, B>(_:_:)(&v45, v46, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v12._object = (void *)0x8000000100EC82C0;
  v12._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v12);
  v13._countAndFlagsBits = sub_10072CDE0();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000100EC82E0;
  v14._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v14);
  v15 = (int *)(v0 + v6[9]);
  v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 4);
  LODWORD(v45._countAndFlagsBits) = v16;
  BYTE4(v45._countAndFlagsBits) = (_BYTE)v15;
  v17 = sub_10001A9A8(&qword_1010EF8C8);
  _print_unlocked<A, B>(_:_:)(&v45, v46, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v18._countAndFlagsBits = 0xD000000000000016;
  v18._object = (void *)0x8000000100EC8300;
  String.append(_:)(v18);
  v19 = v0 + v6[11];
  v20 = *(_QWORD *)v19;
  LOBYTE(v19) = *(_BYTE *)(v19 + 8);
  v45._countAndFlagsBits = v20;
  LOBYTE(v45._object) = v19;
  v21 = sub_10001A9A8(&qword_1010EF8D0);
  _print_unlocked<A, B>(_:_:)(&v45, v46, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v22._countAndFlagsBits = 0xD00000000000001ALL;
  v22._object = (void *)0x8000000100EC8320;
  String.append(_:)(v22);
  v23 = (int *)(v0 + v6[12]);
  v24 = *v23;
  LOBYTE(v23) = *((_BYTE *)v23 + 4);
  LODWORD(v45._countAndFlagsBits) = v24;
  BYTE4(v45._countAndFlagsBits) = (_BYTE)v23;
  v25 = sub_10001A9A8(&qword_1010EF8D8);
  _print_unlocked<A, B>(_:_:)(&v45, v46, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v26._object = (void *)0x8000000100EC8340;
  v26._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v26);
  LOBYTE(v45._countAndFlagsBits) = *(_BYTE *)(v0 + v6[13]);
  v27 = sub_10001A9A8(&qword_1010EF8E0);
  _print_unlocked<A, B>(_:_:)(&v45, v46, v27, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v28._countAndFlagsBits = 0xD000000000000011;
  v28._object = (void *)0x8000000100EC8360;
  String.append(_:)(v28);
  LOBYTE(v45._countAndFlagsBits) = *(_BYTE *)(v0 + v6[14]);
  v29 = sub_10001A9A8(&qword_1010EF8E8);
  _print_unlocked<A, B>(_:_:)(&v45, v46, v29, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v30._countAndFlagsBits = 0x6F6973726576205DLL;
  v30._object = (void *)0xEC0000005B203A6ELL;
  String.append(_:)(v30);
  v31 = (uint64_t *)(v0 + v6[15]);
  v32 = *v31;
  v33 = (void *)v31[1];
  swift_bridgeObjectRetain(v33);
  v34._countAndFlagsBits = v32;
  v34._object = v33;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 32093;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  result = v46[0];
  v37 = v0 + v6[10];
  if ((*(_BYTE *)(v37 + 16) & 1) == 0)
  {
    v39 = *(_QWORD *)v37;
    v38 = *(_QWORD *)(v37 + 8);
    v45._countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 0xD000000000000028;
    v45._object = (void *)0x8000000100EC8380;
    v40 = sub_100134DCC();
    v44._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(&type metadata for LocalFindableAccessoryFirmwareVersionNumber, v40);
    v44._object = v41;
    v42._countAndFlagsBits = 32;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    v43._countAndFlagsBits = sub_1008C3554(v39, v38);
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    return v46[0];
  }
  return result;
}

unint64_t sub_100133250()
{
  unint64_t result;

  result = qword_1010F4840;
  if (!qword_1010F4840)
  {
    result = swift_getWitnessTable(&unk_100E2D948, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_1010F4840);
  }
  return result;
}

id sub_100133294()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  int *v3;
  Class isa;
  NSString v5;
  NSString v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  NSString v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  NSString v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)SPDiscoveredAccessoryMetadata), "init");
  v3 = (int *)type metadata accessor for AccessoryMetadata(0);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setProductData:", isa);

  swift_bridgeObjectRetain(*(_QWORD *)(v1 + v3[6] + 8));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, "setManufacturerName:", v5);

  swift_bridgeObjectRetain(*(_QWORD *)(v1 + v3[7] + 8));
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, "setModelName:", v6);

  v7 = (uint64_t *)(v1 + v3[11]);
  if (*((_BYTE *)v7 + 8))
    v8 = 0;
  else
    v8 = *v7;
  objc_msgSend(v2, "setAccessoryCategory:", v8);
  v9 = (unsigned int *)(v1 + v3[12]);
  v10 = *v9;
  v11 = *((_BYTE *)v9 + 4);
  if (v11)
    v12 = 0;
  else
    v12 = v10;
  objc_msgSend(v2, "setAccessoryCapabilities:", v12);
  sub_10072CDE0();
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, "setFirmwareVersion:", v13);

  v14 = v1 + v3[10];
  if ((*(_BYTE *)(v14 + 16) & 1) == 0)
  {
    v16 = *(_QWORD *)v14;
    v15 = *(_QWORD *)(v14 + 8);
    v17 = sub_100134DCC();
    v27 = CustomStringConvertible.typeDescription.getter(&type metadata for LocalFindableAccessoryFirmwareVersionNumber, v17);
    v28 = v18;
    v19._countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = sub_1008C3554(v16, v15);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
  }
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, "setFirmwareVersion:", v21);

  if ((*(_BYTE *)(v1 + v3[9] + 4) & 1) == 0)
    sub_10072CDE0();
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, "setProtocolVersion:", v22);

  if (*(_BYTE *)(v1 + v3[13]) == 4)
    v23 = 0;
  else
    v23 = *(unsigned __int8 *)(v1 + v3[13]);
  objc_msgSend(v2, "setBatteryType:", v23, v27, v28);
  if (*(_BYTE *)(v1 + v3[14]) == 5)
    v24 = 0;
  else
    v24 = *(unsigned __int8 *)(v1 + v3[14]);
  objc_msgSend(v2, "setBatteryState:", v24);
  if ((v11 & 1) != 0)
    v25 = 0;
  else
    v25 = sub_100C6C080(v10);
  objc_msgSend(v2, "setCapabilities:", v25);
  return v2;
}

uint64_t sub_1001335CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  id v53;
  char *v54;
  unsigned int v55;
  char *v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  char v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;

  v72 = a2;
  v3 = (int *)type metadata accessor for AccessoryMetadata(0);
  v4 = *((_QWORD *)v3 - 1);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v7[*(int *)(v5 + 40)];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = &v7[*(int *)(v5 + 60)];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0xE000000000000000;
  v10 = objc_msgSend(a1, "discoveredMetadata");
  v11 = objc_msgSend(v10, "productData");
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  sub_1001EE65C(v12, v14);
  if (v16 >> 60 == 15)
  {

LABEL_16:
    v64 = v72;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v4 + 56))(v64, 1, 1, v3);
  }
  v17 = v15;
  v18 = v16;
  v69 = v9;
  v70 = v4;
  v71 = a1;
  v19 = objc_msgSend(v10, "protocolVersion");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v23 = sub_10072D700(v20, v22);
  if ((v23 & 0x100000000) != 0)
  {

    sub_10001EF3C(v17, v18);
    v4 = v70;
    goto LABEL_16;
  }
  v66 = v23;
  v24 = objc_msgSend(v71, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = &v7[v3[5]];
  *(_QWORD *)v25 = v17;
  *((_QWORD *)v25 + 1) = v18;
  v67 = v18;
  v68 = v17;
  sub_10001BBBC(v17, v18);
  v26 = objc_msgSend(v10, "manufacturerName");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = (uint64_t *)&v7[v3[6]];
  *v30 = v27;
  v30[1] = v29;
  v31 = objc_msgSend(v10, "modelName");
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  v35 = (uint64_t *)&v7[v3[7]];
  *v35 = v32;
  v35[1] = v34;
  v36 = objc_msgSend(v10, "firmwareVersion");
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;

  v40 = sub_10072D700(v37, v39);
  if ((v40 & 0x100000000) != 0)
  {
    v65[1] = v35;
    v65[2] = v30;
    *(_DWORD *)&v7[v3[8]] = 0;
    v47 = objc_msgSend(v10, "firmwareVersion");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;

    v42 = sub_1008C3DA4(v48, v50);
    v4 = v70;
    v44 = v71;
    v45 = v67;
    v46 = v68;
    if ((v51 & 1) != 0)
    {

      sub_10001EF3C(v46, v45);
      v63 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v7, v63);
      sub_10001BC14(*(_QWORD *)v25, *((_QWORD *)v25 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  else
  {
    v41 = v40;
    v42 = 0;
    v43 = 0;
    *(_DWORD *)&v7[v3[8]] = v41;
    v4 = v70;
    v44 = v71;
    v45 = v67;
    v46 = v68;
  }
  *(_QWORD *)v8 = v42;
  *((_QWORD *)v8 + 1) = v43;
  v8[16] = 0;
  v52 = &v7[v3[9]];
  *(_DWORD *)v52 = v66;
  v52[4] = 0;
  v53 = objc_msgSend(v10, "accessoryCategory");
  v54 = &v7[v3[11]];
  *(_QWORD *)v54 = v53;
  v54[8] = 0;
  v55 = objc_msgSend(v10, "accessoryCapabilities");
  v56 = &v7[v3[12]];
  *(_DWORD *)v56 = v55;
  v56[4] = 0;
  v57 = objc_msgSend(v10, "batteryType");
  if (v57 >= 3)
    v58 = 3;
  else
    v58 = v57;
  v7[v3[13]] = v58;
  v59 = objc_msgSend(v10, "batteryState");

  sub_10001EF3C(v46, v45);
  if (v59 >= 4)
    v60 = 4;
  else
    v60 = v59;
  v7[v3[14]] = v60;
  v61 = v72;
  sub_10005972C((uint64_t)v7, v72, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v4 + 56))(v61, 0, 1, v3);
  return sub_1000126B0((uint64_t)v7, type metadata accessor for AccessoryMetadata);
}

uint64_t sub_100133A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v7;
  unsigned int v12;
  unsigned int v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = a4;
  v12 = HIWORD(a4);
  v13 = HIBYTE(a4);
  v14 = (int *)type metadata accessor for AccessoryMetadata(0);
  v15 = a6 + v14[10];
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_BYTE *)(v15 + 16) = 1;
  v16 = (_QWORD *)(a6 + v14[15]);
  *v16 = 0;
  v16[1] = 0xE000000000000000;
  v17 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a6, a1, v17);
  v19 = (_QWORD *)(a6 + v14[5]);
  *v19 = a2;
  v19[1] = a3;
  v20 = a6 + v14[8];
  *(_WORD *)v20 = v7;
  *(_BYTE *)(v20 + 2) = v12;
  *(_BYTE *)(v20 + 3) = v13;
  v21 = (_QWORD *)(a6 + v14[7]);
  *v21 = 0;
  v21[1] = 0;
  v22 = (_QWORD *)(a6 + v14[6]);
  *v22 = 0;
  v22[1] = 0;
  v23 = a6 + v14[9];
  *(_DWORD *)v23 = 0;
  *(_BYTE *)(v23 + 4) = 1;
  v24 = a6 + v14[11];
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v25 = a6 + v14[12];
  *(_DWORD *)v25 = a5;
  *(_BYTE *)(v25 + 4) = BYTE4(a5) & 1;
  *(_BYTE *)(a6 + v14[13]) = 4;
  *(_BYTE *)(a6 + v14[14]) = 5;
  return result;
}

uint64_t sub_100133B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v5 = (int *)type metadata accessor for AccessoryMetadata(0);
  v6 = a2 + v5[10];
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 1;
  v7 = (_QWORD *)(a2 + v5[15]);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  v8 = type metadata accessor for RawAccessoryMetadata(0);
  v9 = a1 + *(int *)(v8 + 20);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = v8;
  v12 = *(_QWORD *)v9;
  sub_10001BBBC(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
  sub_10001BBBC(v12, v10);
  sub_1001EE65C(v12, v10);
  if (v14 >> 60 == 15)
  {
    sub_10001EF3C(v12, v10);
LABEL_4:
    v15 = sub_100134E24();
    v16 = swift_allocError(&type metadata for AccessoryMetadata.Error, v15, 0, 0);
    *(_OWORD *)v17 = xmmword_100E28680;
    *(_BYTE *)(v17 + 16) = 1;
    swift_willThrow(v16);
LABEL_5:
    sub_1000126B0(a1, type metadata accessor for RawAccessoryMetadata);
    return swift_bridgeObjectRelease();
  }
  v37 = v13;
  v38 = v14;
  v19 = (uint64_t *)(a1 + *(int *)(v11 + 44));
  v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    v21 = sub_100134E24();
    v22 = swift_allocError(&type metadata for AccessoryMetadata.Error, v21, 0, 0);
    *(_OWORD *)v23 = xmmword_100E28670;
    *(_BYTE *)(v23 + 16) = 1;
    swift_willThrow(v22);
    sub_10001EF3C(v37, v38);
    sub_10001EF3C(v12, v10);
    goto LABEL_5;
  }
  v24 = *v19;
  sub_10001BD08(*v19, v20);
  sub_1008C4214(v24, v20);
  if (v2)
  {
    sub_1000126B0(a1, type metadata accessor for RawAccessoryMetadata);
    sub_10001EF3C(v37, v38);
    sub_10001EF3C(v12, v10);
    return swift_bridgeObjectRelease();
  }
  v27 = v25;
  v28 = v12;
  v29 = v26;
  sub_10001EF3C(v28, v10);
  v30 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(a2, a1, v30);
  result = sub_1000126B0(a1, type metadata accessor for RawAccessoryMetadata);
  v31 = (uint64_t *)(a2 + v5[5]);
  *v31 = v37;
  v31[1] = v38;
  *(_DWORD *)(a2 + v5[8]) = 0;
  *(_QWORD *)v6 = v27;
  *(_QWORD *)(v6 + 8) = v29;
  *(_BYTE *)(v6 + 16) = 0;
  v32 = (_QWORD *)(a2 + v5[7]);
  *v32 = 0;
  v32[1] = 0;
  v33 = (_QWORD *)(a2 + v5[6]);
  *v33 = 0;
  v33[1] = 0;
  v34 = a2 + v5[9];
  *(_DWORD *)v34 = 0;
  *(_BYTE *)(v34 + 4) = 1;
  v35 = a2 + v5[11];
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  v36 = a2 + v5[12];
  *(_DWORD *)v36 = 0;
  *(_BYTE *)(v36 + 4) = 1;
  *(_BYTE *)(a2 + v5[13]) = 4;
  *(_BYTE *)(a2 + v5[14]) = 5;
  return result;
}

uint64_t sub_100133E40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  unsigned int v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v143 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for AccessoryMetadata(0);
  v11 = a2 + v10[10];
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_BYTE *)(v11 + 16) = 1;
  v12 = (_QWORD *)(a2 + v10[15]);
  *v12 = 0;
  v12[1] = 0xE000000000000000;
  v144 = v12;
  v13 = type metadata accessor for RawAccessoryMetadata(0);
  v14 = *(int *)(v13 + 20);
  v147 = a1;
  v15 = (uint64_t *)(a1 + v14);
  v16 = v15[1];
  if (v16 >> 60 == 15)
    goto LABEL_4;
  v17 = (int *)v13;
  v142 = v5;
  v18 = *v15;
  sub_10001BBBC(*v15, v16);
  sub_10001BBBC(v18, v16);
  sub_1001EE65C(v18, v16);
  if (v20 >> 60 == 15)
  {
    sub_10001EF3C(v18, v16);
LABEL_4:
    v21 = sub_100134E24();
    v22 = swift_allocError(&type metadata for AccessoryMetadata.Error, v21, 0, 0);
    *(_OWORD *)v23 = xmmword_100E28680;
    *(_BYTE *)(v23 + 16) = 1;
    swift_willThrow(v22);
LABEL_5:
    v24 = v147;
LABEL_29:
    sub_1000126B0(v24, type metadata accessor for RawAccessoryMetadata);
    return swift_bridgeObjectRelease();
  }
  v138 = v4;
  v139 = v19;
  v140 = v20;
  v141 = v18;
  v24 = v147;
  v25 = v147 + v17[11];
  v26 = *(_QWORD *)(v25 + 8);
  if (v26 >> 60 == 15)
    goto LABEL_13;
  v27 = *(_QWORD *)v25;
  sub_10001BBBC(*(_QWORD *)v25, *(_QWORD *)(v25 + 8));
  sub_10001BBBC(v27, v26);
  sub_10072D548(v27, v26);
  if ((v28 & 0x100000000) != 0)
  {
    sub_10001EF3C(v27, v26);
LABEL_13:
    v36 = sub_100134E24();
    v37 = swift_allocError(&type metadata for AccessoryMetadata.Error, v36, 0, 0);
    *(_OWORD *)v38 = xmmword_100E28670;
    *(_BYTE *)(v38 + 16) = 1;
    swift_willThrow(v37);
    v39 = v139;
    v40 = v140;
LABEL_28:
    sub_10001EF3C(v39, v40);
    sub_10001EF3C(v141, v16);
    goto LABEL_29;
  }
  v136 = v26;
  v137 = v27;
  v29 = (uint64_t *)(v24 + v17[7]);
  v30 = v29[1];
  if (v30 >> 60 == 15)
  {
LABEL_15:
    v41 = sub_100134E24();
    v42 = swift_allocError(&type metadata for AccessoryMetadata.Error, v41, 0, 0);
    *(_OWORD *)v43 = xmmword_100E286C0;
    *(_BYTE *)(v43 + 16) = 1;
    swift_willThrow(v42);
    v44 = v139;
    v45 = v140;
LABEL_27:
    sub_10001EF3C(v44, v45);
    v40 = v136;
    v39 = v137;
    goto LABEL_28;
  }
  v133 = v28;
  v145 = *v29;
  v31 = v145;
  v146 = v30;
  sub_10001BBBC(v145, v30);
  v135 = sub_100035530();
  v32 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
  if (!v33)
  {
    sub_10001EF3C(v31, v30);
    v24 = v147;
    goto LABEL_15;
  }
  v134 = v31;
  v24 = v147;
  v34 = (uint64_t *)(v147 + v17[6]);
  v35 = v34[1];
  if (v35 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    v53 = sub_100134E24();
    v54 = swift_allocError(&type metadata for AccessoryMetadata.Error, v53, 0, 0);
    *(_QWORD *)v55 = 0xD000000000000010;
    *(_QWORD *)(v55 + 8) = 0x8000000100EC83B0;
    *(_BYTE *)(v55 + 16) = 1;
    swift_willThrow(v54);
    sub_10001EF3C(v139, v140);
    v44 = v134;
    v45 = v30;
    goto LABEL_27;
  }
  v129 = v32;
  v131 = v33;
  v132 = v30;
  v145 = *v34;
  v46 = v145;
  v146 = v35;
  sub_10001BBBC(v145, v35);
  v47 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
  if (!v48)
  {
    swift_bridgeObjectRelease();
    sub_10001EF3C(v46, v35);
    v24 = v147;
    v30 = v132;
    goto LABEL_20;
  }
  v130 = v46;
  v135 = v35;
  v24 = v147;
  v49 = (uint64_t *)(v147 + v17[12]);
  v50 = v49[1];
  if (v50 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = v134;
    v52 = v132;
LABEL_25:
    v61 = sub_100134E24();
    v62 = swift_allocError(&type metadata for AccessoryMetadata.Error, v61, 0, 0);
    *(_OWORD *)v63 = xmmword_100E286B0;
    *(_BYTE *)(v63 + 16) = 1;
    swift_willThrow(v62);
    v64 = v139;
    v65 = v140;
LABEL_26:
    sub_10001EF3C(v64, v65);
    sub_10001EF3C(v130, v135);
    v44 = v51;
    v45 = v52;
    goto LABEL_27;
  }
  v126 = v47;
  v128 = v48;
  v56 = *v49;
  sub_10001BBBC(*v49, v50);
  sub_10001BBBC(v56, v50);
  sub_10072D548(v56, v50);
  if ((v57 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001EF3C(v56, v50);
    v52 = v132;
    v51 = v134;
    goto LABEL_25;
  }
  v127 = v56;
  v125 = v50;
  v58 = (uint64_t *)(v24 + v17[9]);
  v59 = v58[1];
  if (v59 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v60 = v127;
LABEL_32:
    v70 = sub_100134E24();
    v71 = swift_allocError(&type metadata for AccessoryMetadata.Error, v70, 0, 0);
    *(_QWORD *)v72 = 0xD000000000000011;
    *(_QWORD *)(v72 + 8) = 0x8000000100EC83D0;
    *(_BYTE *)(v72 + 16) = 1;
    swift_willThrow(v71);
    sub_10001EF3C(v139, v140);
    sub_10001EF3C(v60, v125);
    sub_10001EF3C(v130, v135);
    v44 = v134;
    v45 = v132;
    goto LABEL_27;
  }
  v124 = v57;
  v67 = *v58;
  sub_10001BBBC(*v58, v59);
  v68 = sub_10001BBBC(v67, v59);
  static Endianness.current.getter(v68);
  sub_100136560();
  FixedWidthInteger.init(data:ofEndianness:)(&v145, v67, v59, v9);
  v69 = v59;
  v60 = v127;
  if (v146 == 1)
  {
    sub_10001EF3C(v67, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v147;
    goto LABEL_32;
  }
  v122 = v69;
  v123 = v67;
  v24 = v147;
  v73 = (uint64_t *)(v147 + v17[10]);
  v74 = v73[1];
  if (v74 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_37:
    v52 = v132;
    v51 = v134;
    v77 = sub_100134E24();
    v78 = swift_allocError(&type metadata for AccessoryMetadata.Error, v77, 0, 0);
    *(_QWORD *)v79 = 0xD000000000000015;
    *(_QWORD *)(v79 + 8) = 0x8000000100EC83F0;
    *(_BYTE *)(v79 + 16) = 1;
    swift_willThrow(v78);
    sub_10001EF3C(v139, v140);
    sub_10001EF3C(v123, v122);
    v64 = v60;
    v65 = v125;
    goto LABEL_26;
  }
  v120 = v145;
  v75 = *v73;
  sub_10001BBBC(*v73, v74);
  v76 = sub_10001BBBC(v75, v74);
  static Endianness.current.getter(v76);
  sub_1000588DC();
  v121 = v75;
  FixedWidthInteger.init(data:ofEndianness:)(&v145, v75, v74, v9);
  if (BYTE4(v145) == 1)
  {
    sub_10001EF3C(v121, v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v147;
    goto LABEL_37;
  }
  v80 = (uint64_t *)(v147 + v17[13]);
  v81 = v80[1];
  if (v81 >> 60 == 15)
    goto LABEL_41;
  v117 = v145;
  v82 = *v80;
  sub_10001BBBC(*v80, v81);
  v83 = sub_10001BBBC(v82, v81);
  static Endianness.current.getter(v83);
  v84 = sub_100059570();
  v119 = v82;
  v118 = v84;
  FixedWidthInteger.init(data:ofEndianness:)(&v145, v82, v81, v9);
  if (BYTE1(v145) == 1)
  {
    sub_10001EF3C(v119, v81);
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v85 = sub_100134E24();
    v86 = swift_allocError(&type metadata for AccessoryMetadata.Error, v85, 0, 0);
    *(_OWORD *)v87 = xmmword_100E286A0;
    *(_BYTE *)(v87 + 16) = 1;
    swift_willThrow(v86);
    v88 = v139;
    v89 = v140;
LABEL_42:
    sub_10001EF3C(v88, v89);
    sub_10001EF3C(v121, v74);
    sub_10001EF3C(v123, v122);
    sub_10001EF3C(v127, v125);
    sub_10001EF3C(v130, v135);
    sub_10001EF3C(v134, v132);
    sub_10001EF3C(v137, v136);
    sub_10001EF3C(v141, v16);
    goto LABEL_5;
  }
  v90 = v145;
  if (v145 >= 3u)
    v90 = 3;
  v116 = v90;
  v91 = v147 + v17[14];
  v92 = *(_QWORD *)(v91 + 8);
  if (v92 >> 60 == 15
    || (v93 = *(_QWORD *)v91,
        v94 = sub_10001BBBC(*(_QWORD *)v91, *(_QWORD *)(v91 + 8)),
        static Endianness.current.getter(v94),
        FixedWidthInteger.init(data:ofEndianness:)(&v145, v93, v92, v9),
        BYTE1(v145) == 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v95 = sub_100134E24();
    v96 = swift_allocError(&type metadata for AccessoryMetadata.Error, v95, 0, 0);
    *(_OWORD *)v97 = xmmword_100E28690;
    *(_BYTE *)(v97 + 16) = 1;
    swift_willThrow(v96);
    sub_10001EF3C(v139, v140);
    v88 = v119;
    v89 = v81;
    goto LABEL_42;
  }
  v98 = v133;
  v144 = (_QWORD *)(v133 >> 24);
  v118 = v133 >> 16;
  v99 = v145;
  sub_10001EF3C(v141, v16);
  sub_10001EF3C(v137, v136);
  sub_10001EF3C(v134, v132);
  sub_10001EF3C(v130, v135);
  sub_10001EF3C(v127, v125);
  sub_10001EF3C(v123, v122);
  sub_10001EF3C(v121, v74);
  sub_10001EF3C(v119, v81);
  if (v99 >= 4)
    v100 = 4;
  else
    v100 = v99;
  v102 = v142;
  v101 = v143;
  v103 = v147;
  v104 = v138;
  (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v143, v147, v138);
  sub_1000126B0(v103, type metadata accessor for RawAccessoryMetadata);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v102 + 32))(a2, v101, v104);
  v105 = (_QWORD *)(a2 + v10[5]);
  v106 = v140;
  *v105 = v139;
  v105[1] = v106;
  v107 = a2 + v10[8];
  *(_WORD *)v107 = v98;
  *(_BYTE *)(v107 + 2) = v118;
  *(_BYTE *)(v107 + 3) = (_BYTE)v144;
  v108 = (uint64_t *)(a2 + v10[7]);
  v109 = v131;
  *v108 = v129;
  v108[1] = v109;
  v110 = (uint64_t *)(a2 + v10[6]);
  v111 = v128;
  *v110 = v126;
  v110[1] = v111;
  v112 = a2 + v10[9];
  *(_DWORD *)v112 = v124;
  *(_BYTE *)(v112 + 4) = 0;
  v113 = a2 + v10[11];
  *(_QWORD *)v113 = v120;
  *(_BYTE *)(v113 + 8) = 0;
  v114 = a2 + v10[12];
  *(_DWORD *)v114 = v117;
  *(_BYTE *)(v114 + 4) = 0;
  *(_BYTE *)(a2 + v10[13]) = v116;
  *(_BYTE *)(a2 + v10[14]) = v100;
  return result;
}

id sub_100134998()
{
  uint64_t v0;
  id v1;
  int *v2;
  Class isa;
  Class v4;
  Class v5;
  Class v6;
  Class v7;
  Class v8;
  Class v9;
  Class v10;
  Class v11;
  Class v12;

  v1 = objc_msgSend(objc_allocWithZone((Class)SPRawAccessoryMetadata), "init");
  v2 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  isa = 0;
  if (*(_QWORD *)(v0 + v2[5] + 8) >> 60 != 15)
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setProductData:", isa);

  if (*(_QWORD *)(v0 + v2[6] + 8) >> 60 == 15)
    v4 = 0;
  else
    v4 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setManufacturerName:", v4);

  if (*(_QWORD *)(v0 + v2[7] + 8) >> 60 == 15)
    v5 = 0;
  else
    v5 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setModelName:", v5);

  if (*(_QWORD *)(v0 + v2[8] + 8) >> 60 == 15)
    v6 = 0;
  else
    v6 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setReserved:", v6);

  if (*(_QWORD *)(v0 + v2[9] + 8) >> 60 == 15)
    v7 = 0;
  else
    v7 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setAccessoryCategory:", v7);

  if (*(_QWORD *)(v0 + v2[10] + 8) >> 60 == 15)
    v8 = 0;
  else
    v8 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setAccessoryCapabilities:", v8);

  if (*(_QWORD *)(v0 + v2[11] + 8) >> 60 == 15)
    v9 = 0;
  else
    v9 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setFirmwareVersion:", v9);

  if (*(_QWORD *)(v0 + v2[12] + 8) >> 60 == 15)
    v10 = 0;
  else
    v10 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setFindMyVersion:", v10);

  if (*(_QWORD *)(v0 + v2[13] + 8) >> 60 == 15)
    v11 = 0;
  else
    v11 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setBatteryType:", v11);

  if (*(_QWORD *)(v0 + v2[14] + 8) >> 60 == 15)
    v12 = 0;
  else
    v12 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, "setBatteryLevel:", v12);

  return v1;
}

uint64_t sub_100134C88(uint64_t a1, void *a2, char a3)
{
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (!a3)
  {
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v10 = 0xD000000000000013;
    v11 = 0x8000000100EC8440;
    v9 = a1;
    swift_errorRetain(a1);
    v6 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v7._countAndFlagsBits = String.init<A>(describing:)(&v9, v6);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    sub_1001366A4(a1, (uint64_t)a2, 0);
    return v10;
  }
  if (a3 == 1)
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v10 = 0x726F43617461642ELL;
    v11 = 0xEF28646574707572;
    v5._countAndFlagsBits = a1;
    v5._object = a2;
    String.append(_:)(v5);
    return v10;
  }
  return 0x6E776F6E6B6E752ELL;
}

uint64_t sub_100134DC0()
{
  uint64_t v0;

  return sub_100134C88(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

unint64_t sub_100134DCC()
{
  unint64_t result;

  result = qword_1010EF8F0;
  if (!qword_1010EF8F0)
  {
    result = swift_getWitnessTable(&unk_100E53204, &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_1010EF8F0);
  }
  return result;
}

uint64_t type metadata accessor for RawAccessoryMetadata(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010EF9D8, (uint64_t)&nominal type descriptor for RawAccessoryMetadata);
}

unint64_t sub_100134E24()
{
  unint64_t result;

  result = qword_1010EF8F8;
  if (!qword_1010EF8F8)
  {
    result = swift_getWitnessTable(&unk_100E28520, &type metadata for AccessoryMetadata.Error);
    atomic_store(result, (unint64_t *)&qword_1010EF8F8);
  }
  return result;
}

uint64_t sub_100134E68(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t result;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  _DWORD *v32;
  char v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  char v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for AccessoryMetadata(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (uint64_t *)(a2 + v5);
  v9 = *v8;
  v10 = v8[1];
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v9, v10);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
  v12 = v11;
  sub_10001BC14(v9, v10);
  sub_10001BC14(v6, v7);
  if ((v12 & 1) == 0)
    return 0;
  v13 = v4[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  if (!v15)
  {
    if (v17)
      return 0;
    goto LABEL_12;
  }
  if (!v17)
    return 0;
  v18 = *v14 == *v16 && v15 == v17;
  if (v18
    || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, *v16, v17, 0), result = 0, (v19 & 1) != 0))
  {
LABEL_12:
    v21 = v4[7];
    v22 = (_QWORD *)(a1 + v21);
    v23 = *(_QWORD *)(a1 + v21 + 8);
    v24 = (_QWORD *)(a2 + v21);
    v25 = v24[1];
    if (v23)
    {
      if (!v25)
        return 0;
      if (*v22 != *v24 || v23 != v25)
      {
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, *v24, v25, 0);
        result = 0;
        if ((v26 & 1) == 0)
          return result;
      }
    }
    else if (v25)
    {
      return 0;
    }
    result = 0;
    v27 = v4[8];
    v28 = a1 + v27;
    v29 = *(unsigned __int16 *)(a1 + v27);
    v30 = (unsigned __int16 *)(a2 + v27);
    if (v29 != *v30
      || *(unsigned __int8 *)(v28 + 2) != *((unsigned __int8 *)v30 + 2)
      || *(unsigned __int8 *)(v28 + 3) != *((unsigned __int8 *)v30 + 3))
    {
      return result;
    }
    v31 = v4[9];
    v32 = (_DWORD *)(a1 + v31);
    v33 = *(_BYTE *)(a1 + v31 + 4);
    v34 = (_DWORD *)(a2 + v31);
    v35 = *(unsigned __int8 *)(a2 + v31 + 4);
    if ((v33 & 1) != 0)
    {
      if (!v35)
        return 0;
    }
    else
    {
      if (*v32 != *v34)
        LOBYTE(v35) = 1;
      if ((v35 & 1) != 0)
        return 0;
    }
    v36 = v4[10];
    v37 = (_QWORD *)(a1 + v36);
    v38 = *(_BYTE *)(a1 + v36 + 16);
    v39 = a2 + v36;
    if ((v38 & 1) != 0)
    {
      if (!*(_BYTE *)(v39 + 16))
        return 0;
    }
    else
    {
      result = 0;
      if ((*(_BYTE *)(v39 + 16) & 1) != 0 || *v37 != *(_QWORD *)v39 || v37[1] != *(_QWORD *)(v39 + 8))
        return result;
    }
    v40 = v4[11];
    v41 = (_QWORD *)(a1 + v40);
    v42 = *(_BYTE *)(a1 + v40 + 8);
    v43 = (_QWORD *)(a2 + v40);
    v44 = *(unsigned __int8 *)(a2 + v40 + 8);
    if ((v42 & 1) != 0)
    {
      if (!v44)
        return 0;
    }
    else
    {
      if (*v41 != *v43)
        LOBYTE(v44) = 1;
      if ((v44 & 1) != 0)
        return 0;
    }
    v45 = v4[12];
    v46 = (_DWORD *)(a1 + v45);
    v47 = *(_BYTE *)(a1 + v45 + 4);
    v48 = (_DWORD *)(a2 + v45);
    v49 = *(unsigned __int8 *)(a2 + v45 + 4);
    if ((v47 & 1) != 0)
    {
      if (!v49)
        return 0;
    }
    else
    {
      if (*v46 != *v48)
        LOBYTE(v49) = 1;
      if ((v49 & 1) != 0)
        return 0;
    }
    v50 = v4[13];
    v51 = *(unsigned __int8 *)(a1 + v50);
    v52 = *(unsigned __int8 *)(a2 + v50);
    if (v51 == 4)
    {
      if (v52 != 4)
        return 0;
    }
    else
    {
      result = 0;
      if (v52 == 4 || v51 != v52)
        return result;
    }
    v53 = v4[14];
    v54 = *(unsigned __int8 *)(a1 + v53);
    v55 = *(unsigned __int8 *)(a2 + v53);
    if (v54 != 5)
    {
      result = 0;
      if (v55 == 5 || v54 != v55)
        return result;
      goto LABEL_58;
    }
    if (v55 == 5)
    {
LABEL_58:
      v56 = v4[15];
      v57 = *(_QWORD *)(a1 + v56);
      v58 = *(_QWORD *)(a1 + v56 + 8);
      v59 = (_QWORD *)(a2 + v56);
      v60 = v59[1];
      if (v57 == *v59 && v58 == v60)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, *v59, v60, 0);
    }
    return 0;
  }
  return result;
}

BOOL sub_100135198(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (uint64_t *)(a2 + v5);
  v9 = *v8;
  v10 = v8[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
  }
  else
  {
    if (v10 >> 60 == 15)
      goto LABEL_46;
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v12 = v11;
    sub_10001EF3C(v9, v10);
    sub_10001EF3C(v6, v7);
    if ((v12 & 1) == 0)
      return 0;
  }
  v13 = v4[6];
  v6 = *(_QWORD *)(a1 + v13);
  v7 = *(_QWORD *)(a1 + v13 + 8);
  v14 = (uint64_t *)(a2 + v13);
  v9 = *v14;
  v10 = v14[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
  }
  else
  {
    if (v10 >> 60 == 15)
      goto LABEL_46;
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v16 = v15;
    sub_10001EF3C(v9, v10);
    sub_10001EF3C(v6, v7);
    if ((v16 & 1) == 0)
      return 0;
  }
  v17 = v4[7];
  v6 = *(_QWORD *)(a1 + v17);
  v7 = *(_QWORD *)(a1 + v17 + 8);
  v18 = (uint64_t *)(a2 + v17);
  v9 = *v18;
  v10 = v18[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
  }
  else
  {
    if (v10 >> 60 == 15)
      goto LABEL_46;
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v20 = v19;
    sub_10001EF3C(v9, v10);
    sub_10001EF3C(v6, v7);
    if ((v20 & 1) == 0)
      return 0;
  }
  v21 = v4[8];
  v6 = *(_QWORD *)(a1 + v21);
  v7 = *(_QWORD *)(a1 + v21 + 8);
  v22 = (uint64_t *)(a2 + v21);
  v9 = *v22;
  v10 = v22[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
  }
  else
  {
    if (v10 >> 60 == 15)
      goto LABEL_46;
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v24 = v23;
    sub_10001EF3C(v9, v10);
    sub_10001EF3C(v6, v7);
    if ((v24 & 1) == 0)
      return 0;
  }
  v25 = v4[9];
  v6 = *(_QWORD *)(a1 + v25);
  v7 = *(_QWORD *)(a1 + v25 + 8);
  v26 = (uint64_t *)(a2 + v25);
  v9 = *v26;
  v10 = v26[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
  }
  else
  {
    if (v10 >> 60 == 15)
      goto LABEL_46;
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v28 = v27;
    sub_10001EF3C(v9, v10);
    sub_10001EF3C(v6, v7);
    if ((v28 & 1) == 0)
      return 0;
  }
  v29 = v4[10];
  v6 = *(_QWORD *)(a1 + v29);
  v7 = *(_QWORD *)(a1 + v29 + 8);
  v30 = (uint64_t *)(a2 + v29);
  v9 = *v30;
  v10 = v30[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
  }
  else
  {
    if (v10 >> 60 == 15)
      goto LABEL_46;
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v32 = v31;
    sub_10001EF3C(v9, v10);
    sub_10001EF3C(v6, v7);
    if ((v32 & 1) == 0)
      return 0;
  }
  v33 = v4[11];
  v6 = *(_QWORD *)(a1 + v33);
  v7 = *(_QWORD *)(a1 + v33 + 8);
  v34 = (uint64_t *)(a2 + v33);
  v9 = *v34;
  v10 = v34[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
  }
  else
  {
    if (v10 >> 60 == 15)
      goto LABEL_46;
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v36 = v35;
    sub_10001EF3C(v9, v10);
    sub_10001EF3C(v6, v7);
    if ((v36 & 1) == 0)
      return 0;
  }
  v37 = v4[12];
  v6 = *(_QWORD *)(a1 + v37);
  v7 = *(_QWORD *)(a1 + v37 + 8);
  v38 = (uint64_t *)(a2 + v37);
  v9 = *v38;
  v10 = v38[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 != 15)
      goto LABEL_46;
    goto LABEL_42;
  }
  if (v10 >> 60 == 15)
    goto LABEL_46;
  sub_10001BD08(v6, v7);
  sub_10001BD08(v9, v10);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
  v40 = v39;
  sub_10001EF3C(v9, v10);
  sub_10001EF3C(v6, v7);
  if ((v40 & 1) == 0)
    return 0;
LABEL_42:
  v41 = v4[13];
  v6 = *(_QWORD *)(a1 + v41);
  v7 = *(_QWORD *)(a1 + v41 + 8);
  v42 = (uint64_t *)(a2 + v41);
  v9 = *v42;
  v10 = v42[1];
  if (v7 >> 60 == 15)
  {
    if (v10 >> 60 == 15)
      goto LABEL_50;
LABEL_46:
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    sub_10001EF3C(v6, v7);
    v43 = v9;
    v44 = v10;
LABEL_47:
    sub_10001EF3C(v43, v44);
    return 0;
  }
  if (v10 >> 60 == 15)
    goto LABEL_46;
  sub_10001BD08(v6, v7);
  sub_10001BD08(v9, v10);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
  v47 = v46;
  sub_10001EF3C(v9, v10);
  sub_10001EF3C(v6, v7);
  if ((v47 & 1) == 0)
    return 0;
LABEL_50:
  v48 = v4[14];
  v49 = a1 + v48;
  v50 = *(_QWORD *)(a1 + v48);
  v51 = *(_QWORD *)(v49 + 8);
  v52 = (uint64_t *)(a2 + v48);
  v53 = *v52;
  v54 = v52[1];
  if (v51 >> 60 == 15)
  {
    if (v54 >> 60 == 15)
      return 1;
LABEL_54:
    sub_10001BD08(v50, *(_QWORD *)(v49 + 8));
    sub_10001BD08(v53, v54);
    sub_10001EF3C(v50, v51);
    v43 = v53;
    v44 = v54;
    goto LABEL_47;
  }
  if (v54 >> 60 == 15)
    goto LABEL_54;
  sub_10001BD08(v50, *(_QWORD *)(v49 + 8));
  sub_10001BD08(v53, v54);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v50, v51);
  v56 = v55;
  sub_10001EF3C(v53, v54);
  sub_10001EF3C(v50, v51);
  return (v56 & 1) != 0;
}

uint64_t sub_10013579C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746375646F7270 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746375646F7270, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x8000000100EC83B0;
    if (a2 == 0x8000000100EC83B0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC83B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065)
  {
    v9 = 0xE900000000000065;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x6465767265736572 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465767265736572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100EC83D0)
  {
    v11 = 0x8000000100EC83D0;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC83D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EC83F0)
  {
    v12 = 0x8000000100EC83F0;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC83F0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v13 = 0xEF6E6F6973726556;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6556794D646E6966 && a2 == 0xED00006E6F697372)
  {
    v14 = 0xED00006E6F697372;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556794D646E6966, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079)
  {
    v15 = 0xEB00000000657079;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x4C79726574746162 && a2 == 0xEC0000006C657665)
  {
    swift_bridgeObjectRelease(0xEC0000006C657665);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C79726574746162, 0xEC0000006C657665, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_100135CA0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x44746375646F7270 && a2 == 0xEB00000000617461)
  {
    v7 = 0xEB00000000617461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44746375646F7270, 0xEB00000000617461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x8000000100EC83B0;
    if (a2 == 0x8000000100EC83B0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC83B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065)
  {
    v9 = 0xE900000000000065;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v10 = 0xEF6E6F6973726556;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    v11 = 0xEF6E6F6973726556;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F636F746F7270, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000025 && a2 == 0x8000000100EC8410)
  {
    v12 = 0x8000000100EC8410;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x8000000100EC8410, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100EC83D0)
  {
    v13 = 0x8000000100EC83D0;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC83D0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EC83F0)
  {
    v14 = 0x8000000100EC83F0;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC83F0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079)
  {
    v15 = 0xEB00000000657079;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x5379726574746162 && a2 == 0xEC00000065746174)
  {
    v16 = 0xEC00000065746174;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5379726574746162, 0xEC00000065746174, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

unint64_t sub_1001361EC()
{
  unint64_t result;

  result = qword_1010EF908;
  if (!qword_1010EF908)
  {
    result = swift_getWitnessTable(&unk_100E284D0, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EF908);
  }
  return result;
}

unint64_t sub_100136230()
{
  unint64_t result;

  result = qword_1010EF910;
  if (!qword_1010EF910)
  {
    result = swift_getWitnessTable(&unk_100E2D920, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_1010EF910);
  }
  return result;
}

unint64_t sub_100136274()
{
  unint64_t result;

  result = qword_1010EF918;
  if (!qword_1010EF918)
  {
    result = swift_getWitnessTable(&unk_100E4CB64, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_1010EF918);
  }
  return result;
}

unint64_t sub_1001362B8()
{
  unint64_t result;

  result = qword_1010EF920;
  if (!qword_1010EF920)
  {
    result = swift_getWitnessTable(&unk_100E531DC, &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_1010EF920);
  }
  return result;
}

unint64_t sub_1001362FC()
{
  unint64_t result;

  result = qword_1010EF928;
  if (!qword_1010EF928)
  {
    result = swift_getWitnessTable(&unk_100E6ADE8, &type metadata for AccessoryCapabilities);
    atomic_store(result, (unint64_t *)&qword_1010EF928);
  }
  return result;
}

unint64_t sub_100136340()
{
  unint64_t result;

  result = qword_1010EF930;
  if (!qword_1010EF930)
  {
    result = swift_getWitnessTable(&unk_100E284A8, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_1010EF930);
  }
  return result;
}

unint64_t sub_100136384()
{
  unint64_t result;

  result = qword_1010EF938;
  if (!qword_1010EF938)
  {
    result = swift_getWitnessTable(&unk_100E28480, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_1010EF938);
  }
  return result;
}

unint64_t sub_1001363C8()
{
  unint64_t result;

  result = qword_1010EF948;
  if (!qword_1010EF948)
  {
    result = swift_getWitnessTable(&unk_100E2D8F8, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_1010EF948);
  }
  return result;
}

unint64_t sub_10013640C()
{
  unint64_t result;

  result = qword_1010EF950;
  if (!qword_1010EF950)
  {
    result = swift_getWitnessTable(&unk_100E4CB3C, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_1010EF950);
  }
  return result;
}

unint64_t sub_100136450()
{
  unint64_t result;

  result = qword_1010EF958;
  if (!qword_1010EF958)
  {
    result = swift_getWitnessTable(&unk_100E531B4, &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_1010EF958);
  }
  return result;
}

unint64_t sub_100136494()
{
  unint64_t result;

  result = qword_1010EF960;
  if (!qword_1010EF960)
  {
    result = swift_getWitnessTable(&unk_100E6ADC0, &type metadata for AccessoryCapabilities);
    atomic_store(result, (unint64_t *)&qword_1010EF960);
  }
  return result;
}

unint64_t sub_1001364D8()
{
  unint64_t result;

  result = qword_1010EF968;
  if (!qword_1010EF968)
  {
    result = swift_getWitnessTable(&unk_100E28458, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_1010EF968);
  }
  return result;
}

unint64_t sub_10013651C()
{
  unint64_t result;

  result = qword_1010EF970;
  if (!qword_1010EF970)
  {
    result = swift_getWitnessTable(&unk_100E28430, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_1010EF970);
  }
  return result;
}

unint64_t sub_100136560()
{
  unint64_t result;

  result = qword_1010EF978;
  if (!qword_1010EF978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1010EF978);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1001365F0 + 4 * byte_100E27E75[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100136624 + 4 * byte_100E27E70[v4]))();
}

uint64_t sub_100136624(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013662C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100136634);
  return result;
}

uint64_t sub_100136640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100136648);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10013664C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100136654(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryMetadata.CodingKeys()
{
  return &type metadata for AccessoryMetadata.CodingKeys;
}

uint64_t sub_100136674(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_bridgeObjectRetain(a2);
  if (!a3)
    return swift_errorRetain(result);
  return result;
}

uint64_t destroy for AccessoryMetadata.Error(uint64_t a1)
{
  return sub_1001366A4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1001366A4(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_bridgeObjectRelease(a2);
  if (!a3)
    return swift_errorRelease(result);
  return result;
}

uint64_t _s12searchpartyd17AccessoryMetadataV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100136674(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessoryMetadata.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100136674(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1001366A4(v6, v7, v8);
  return a1;
}

__n128 _s34DisplayIdentifierAndMembershipTypeVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AccessoryMetadata.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1001366A4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryMetadata.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryMetadata.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100136844(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10013685C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryMetadata.Error()
{
  return &type metadata for AccessoryMetadata.Error;
}

uint64_t *sub_100136884(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_10001BBBC(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      sub_10001BBBC(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_QWORD *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = *(_QWORD *)v21;
      sub_10001BBBC(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
    }
    v24 = a3[8];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = *((_QWORD *)v26 + 1);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v28 = *(_QWORD *)v26;
      sub_10001BBBC(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
    }
    v29 = a3[9];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = *((_QWORD *)v31 + 1);
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v33 = *(_QWORD *)v31;
      sub_10001BBBC(*(_QWORD *)v31, *((_QWORD *)v31 + 1));
      *(_QWORD *)v30 = v33;
      *((_QWORD *)v30 + 1) = v32;
    }
    v34 = a3[10];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = *((_QWORD *)v36 + 1);
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)v35 = *(_OWORD *)v36;
    }
    else
    {
      v38 = *(_QWORD *)v36;
      sub_10001BBBC(*(_QWORD *)v36, *((_QWORD *)v36 + 1));
      *(_QWORD *)v35 = v38;
      *((_QWORD *)v35 + 1) = v37;
    }
    v39 = a3[11];
    v40 = (char *)a1 + v39;
    v41 = (char *)a2 + v39;
    v42 = *((_QWORD *)v41 + 1);
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)v40 = *(_OWORD *)v41;
    }
    else
    {
      v43 = *(_QWORD *)v41;
      sub_10001BBBC(*(_QWORD *)v41, *((_QWORD *)v41 + 1));
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v42;
    }
    v44 = a3[12];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = *((_QWORD *)v46 + 1);
    if (v47 >> 60 == 15)
    {
      *(_OWORD *)v45 = *(_OWORD *)v46;
    }
    else
    {
      v48 = *(_QWORD *)v46;
      sub_10001BBBC(*(_QWORD *)v46, *((_QWORD *)v46 + 1));
      *(_QWORD *)v45 = v48;
      *((_QWORD *)v45 + 1) = v47;
    }
    v49 = a3[13];
    v50 = (char *)a1 + v49;
    v51 = (char *)a2 + v49;
    v52 = *((_QWORD *)v51 + 1);
    if (v52 >> 60 == 15)
    {
      *(_OWORD *)v50 = *(_OWORD *)v51;
    }
    else
    {
      v53 = *(_QWORD *)v51;
      sub_10001BBBC(*(_QWORD *)v51, *((_QWORD *)v51 + 1));
      *(_QWORD *)v50 = v53;
      *((_QWORD *)v50 + 1) = v52;
    }
    v54 = a3[14];
    v55 = (char *)a1 + v54;
    v56 = (char *)a2 + v54;
    v57 = *((_QWORD *)v56 + 1);
    if (v57 >> 60 == 15)
    {
      *(_OWORD *)v55 = *(_OWORD *)v56;
    }
    else
    {
      v58 = *(_QWORD *)v56;
      sub_10001BBBC(*(_QWORD *)v56, *((_QWORD *)v56 + 1));
      *(_QWORD *)v55 = v58;
      *((_QWORD *)v55 + 1) = v57;
    }
  }
  return a1;
}

uint64_t sub_100136B60(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;

  v4 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + a2[5]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = sub_10001BC14(*v6, v7);
  v8 = (uint64_t *)(a1 + a2[6]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    result = sub_10001BC14(*v8, v9);
  v10 = (uint64_t *)(a1 + a2[7]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    result = sub_10001BC14(*v10, v11);
  v12 = (uint64_t *)(a1 + a2[8]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    result = sub_10001BC14(*v12, v13);
  v14 = (uint64_t *)(a1 + a2[9]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    result = sub_10001BC14(*v14, v15);
  v16 = (uint64_t *)(a1 + a2[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    result = sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(a1 + a2[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    result = sub_10001BC14(*v18, v19);
  v20 = (uint64_t *)(a1 + a2[12]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
    result = sub_10001BC14(*v20, v21);
  v22 = (uint64_t *)(a1 + a2[13]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    result = sub_10001BC14(*v22, v23);
  v24 = (uint64_t *)(a1 + a2[14]);
  v25 = v24[1];
  if (v25 >> 60 != 15)
    return sub_10001BC14(*v24, v25);
  return result;
}

uint64_t sub_100136CE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_10001BBBC(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_10001BBBC(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_10001BBBC(*v19, v19[1]);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    v26 = *v24;
    sub_10001BBBC(*v24, v24[1]);
    *(_QWORD *)v23 = v26;
    *(_QWORD *)(v23 + 8) = v25;
  }
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = v29[1];
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  else
  {
    v31 = *v29;
    sub_10001BBBC(*v29, v29[1]);
    *(_QWORD *)v28 = v31;
    *(_QWORD *)(v28 + 8) = v30;
  }
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = (uint64_t *)(a2 + v32);
  v35 = v34[1];
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)v33 = *(_OWORD *)v34;
  }
  else
  {
    v36 = *v34;
    sub_10001BBBC(*v34, v34[1]);
    *(_QWORD *)v33 = v36;
    *(_QWORD *)(v33 + 8) = v35;
  }
  v37 = a3[11];
  v38 = a1 + v37;
  v39 = (uint64_t *)(a2 + v37);
  v40 = v39[1];
  if (v40 >> 60 == 15)
  {
    *(_OWORD *)v38 = *(_OWORD *)v39;
  }
  else
  {
    v41 = *v39;
    sub_10001BBBC(*v39, v39[1]);
    *(_QWORD *)v38 = v41;
    *(_QWORD *)(v38 + 8) = v40;
  }
  v42 = a3[12];
  v43 = a1 + v42;
  v44 = (uint64_t *)(a2 + v42);
  v45 = v44[1];
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
  }
  else
  {
    v46 = *v44;
    sub_10001BBBC(*v44, v44[1]);
    *(_QWORD *)v43 = v46;
    *(_QWORD *)(v43 + 8) = v45;
  }
  v47 = a3[13];
  v48 = a1 + v47;
  v49 = (uint64_t *)(a2 + v47);
  v50 = v49[1];
  if (v50 >> 60 == 15)
  {
    *(_OWORD *)v48 = *(_OWORD *)v49;
  }
  else
  {
    v51 = *v49;
    sub_10001BBBC(*v49, v49[1]);
    *(_QWORD *)v48 = v51;
    *(_QWORD *)(v48 + 8) = v50;
  }
  v52 = a3[14];
  v53 = a1 + v52;
  v54 = (uint64_t *)(a2 + v52);
  v55 = v54[1];
  if (v55 >> 60 == 15)
  {
    *(_OWORD *)v53 = *(_OWORD *)v54;
  }
  else
  {
    v56 = *v54;
    sub_10001BBBC(*v54, v54[1]);
    *(_QWORD *)v53 = v56;
    *(_QWORD *)(v53 + 8) = v55;
  }
  return a1;
}

uint64_t sub_100136F94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      sub_10001BBBC(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  sub_10001BBBC(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  sub_10001BC14(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      v19 = *v17;
      sub_10001BBBC(v19, v18);
      *v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v16);
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }
  v20 = *v17;
  sub_10001BBBC(v20, v18);
  v21 = *v16;
  v22 = v16[1];
  *v16 = v20;
  v16[1] = v18;
  sub_10001BC14(v21, v22);
LABEL_15:
  v23 = a3[7];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (*(_QWORD *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      v27 = *v25;
      sub_10001BBBC(v27, v26);
      *v24 = v27;
      v24[1] = v26;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v26 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v24);
LABEL_20:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_22;
  }
  v28 = *v25;
  sub_10001BBBC(v28, v26);
  v29 = *v24;
  v30 = v24[1];
  *v24 = v28;
  v24[1] = v26;
  sub_10001BC14(v29, v30);
LABEL_22:
  v31 = a3[8];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      sub_10001BBBC(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v34 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v32);
LABEL_27:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_29;
  }
  v36 = *v33;
  sub_10001BBBC(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  sub_10001BC14(v37, v38);
LABEL_29:
  v39 = a3[9];
  v40 = (uint64_t *)(a1 + v39);
  v41 = (uint64_t *)(a2 + v39);
  v42 = *(_QWORD *)(a2 + v39 + 8);
  if (*(_QWORD *)(a1 + v39 + 8) >> 60 == 15)
  {
    if (v42 >> 60 != 15)
    {
      v43 = *v41;
      sub_10001BBBC(v43, v42);
      *v40 = v43;
      v40[1] = v42;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v42 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v40);
LABEL_34:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_36;
  }
  v44 = *v41;
  sub_10001BBBC(v44, v42);
  v45 = *v40;
  v46 = v40[1];
  *v40 = v44;
  v40[1] = v42;
  sub_10001BC14(v45, v46);
LABEL_36:
  v47 = a3[10];
  v48 = (uint64_t *)(a1 + v47);
  v49 = (uint64_t *)(a2 + v47);
  v50 = *(_QWORD *)(a2 + v47 + 8);
  if (*(_QWORD *)(a1 + v47 + 8) >> 60 == 15)
  {
    if (v50 >> 60 != 15)
    {
      v51 = *v49;
      sub_10001BBBC(v51, v50);
      *v48 = v51;
      v48[1] = v50;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v50 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v48);
LABEL_41:
    *(_OWORD *)v48 = *(_OWORD *)v49;
    goto LABEL_43;
  }
  v52 = *v49;
  sub_10001BBBC(v52, v50);
  v53 = *v48;
  v54 = v48[1];
  *v48 = v52;
  v48[1] = v50;
  sub_10001BC14(v53, v54);
LABEL_43:
  v55 = a3[11];
  v56 = (uint64_t *)(a1 + v55);
  v57 = (uint64_t *)(a2 + v55);
  v58 = *(_QWORD *)(a2 + v55 + 8);
  if (*(_QWORD *)(a1 + v55 + 8) >> 60 == 15)
  {
    if (v58 >> 60 != 15)
    {
      v59 = *v57;
      sub_10001BBBC(v59, v58);
      *v56 = v59;
      v56[1] = v58;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v58 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v56);
LABEL_48:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    goto LABEL_50;
  }
  v60 = *v57;
  sub_10001BBBC(v60, v58);
  v61 = *v56;
  v62 = v56[1];
  *v56 = v60;
  v56[1] = v58;
  sub_10001BC14(v61, v62);
LABEL_50:
  v63 = a3[12];
  v64 = (uint64_t *)(a1 + v63);
  v65 = (uint64_t *)(a2 + v63);
  v66 = *(_QWORD *)(a2 + v63 + 8);
  if (*(_QWORD *)(a1 + v63 + 8) >> 60 == 15)
  {
    if (v66 >> 60 != 15)
    {
      v67 = *v65;
      sub_10001BBBC(v67, v66);
      *v64 = v67;
      v64[1] = v66;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v66 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v64);
LABEL_55:
    *(_OWORD *)v64 = *(_OWORD *)v65;
    goto LABEL_57;
  }
  v68 = *v65;
  sub_10001BBBC(v68, v66);
  v69 = *v64;
  v70 = v64[1];
  *v64 = v68;
  v64[1] = v66;
  sub_10001BC14(v69, v70);
LABEL_57:
  v71 = a3[13];
  v72 = (uint64_t *)(a1 + v71);
  v73 = (uint64_t *)(a2 + v71);
  v74 = *(_QWORD *)(a2 + v71 + 8);
  if (*(_QWORD *)(a1 + v71 + 8) >> 60 == 15)
  {
    if (v74 >> 60 != 15)
    {
      v75 = *v73;
      sub_10001BBBC(v75, v74);
      *v72 = v75;
      v72[1] = v74;
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (v74 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)v72);
LABEL_62:
    *(_OWORD *)v72 = *(_OWORD *)v73;
    goto LABEL_64;
  }
  v76 = *v73;
  sub_10001BBBC(v76, v74);
  v77 = *v72;
  v78 = v72[1];
  *v72 = v76;
  v72[1] = v74;
  sub_10001BC14(v77, v78);
LABEL_64:
  v79 = a3[14];
  v80 = (uint64_t *)(a1 + v79);
  v81 = (uint64_t *)(a2 + v79);
  v82 = *(_QWORD *)(a2 + v79 + 8);
  if (*(_QWORD *)(a1 + v79 + 8) >> 60 != 15)
  {
    if (v82 >> 60 != 15)
    {
      v84 = *v81;
      sub_10001BBBC(v84, v82);
      v85 = *v80;
      v86 = v80[1];
      *v80 = v84;
      v80[1] = v82;
      sub_10001BC14(v85, v86);
      return a1;
    }
    sub_1000DC964((uint64_t)v80);
    goto LABEL_69;
  }
  if (v82 >> 60 == 15)
  {
LABEL_69:
    *(_OWORD *)v80 = *(_OWORD *)v81;
    return a1;
  }
  v83 = *v81;
  sub_10001BBBC(v83, v82);
  *v80 = v83;
  v80[1] = v82;
  return a1;
}

uint64_t sub_1001374D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_100137588(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_1000DC964(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  sub_10001BC14(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    sub_1000DC964(v14);
    goto LABEL_9;
  }
  v18 = *(_QWORD *)v14;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v17;
  sub_10001BC14(v18, v16);
LABEL_11:
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a1 + v19 + 8);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    goto LABEL_16;
  }
  v23 = *(_QWORD *)(v21 + 8);
  if (v23 >> 60 == 15)
  {
    sub_1000DC964(v20);
    goto LABEL_14;
  }
  v24 = *(_QWORD *)v20;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v23;
  sub_10001BC14(v24, v22);
LABEL_16:
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a1 + v25 + 8);
  if (v28 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v27 + 8);
  if (v29 >> 60 == 15)
  {
    sub_1000DC964(v26);
    goto LABEL_19;
  }
  v30 = *(_QWORD *)v26;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_QWORD *)(v26 + 8) = v29;
  sub_10001BC14(v30, v28);
LABEL_21:
  v31 = a3[9];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = *(_QWORD *)(a1 + v31 + 8);
  if (v34 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_26;
  }
  v35 = *(_QWORD *)(v33 + 8);
  if (v35 >> 60 == 15)
  {
    sub_1000DC964(v32);
    goto LABEL_24;
  }
  v36 = *(_QWORD *)v32;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_QWORD *)(v32 + 8) = v35;
  sub_10001BC14(v36, v34);
LABEL_26:
  v37 = a3[10];
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = *(_QWORD *)(a1 + v37 + 8);
  if (v40 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    goto LABEL_31;
  }
  v41 = *(_QWORD *)(v39 + 8);
  if (v41 >> 60 == 15)
  {
    sub_1000DC964(v38);
    goto LABEL_29;
  }
  v42 = *(_QWORD *)v38;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_QWORD *)(v38 + 8) = v41;
  sub_10001BC14(v42, v40);
LABEL_31:
  v43 = a3[11];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = *(_QWORD *)(a1 + v43 + 8);
  if (v46 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_36;
  }
  v47 = *(_QWORD *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    sub_1000DC964(v44);
    goto LABEL_34;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_10001BC14(v48, v46);
LABEL_36:
  v49 = a3[12];
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = *(_QWORD *)(a1 + v49 + 8);
  if (v52 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)v50 = *(_OWORD *)v51;
    goto LABEL_41;
  }
  v53 = *(_QWORD *)(v51 + 8);
  if (v53 >> 60 == 15)
  {
    sub_1000DC964(v50);
    goto LABEL_39;
  }
  v54 = *(_QWORD *)v50;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_QWORD *)(v50 + 8) = v53;
  sub_10001BC14(v54, v52);
LABEL_41:
  v55 = a3[13];
  v56 = a1 + v55;
  v57 = a2 + v55;
  v58 = *(_QWORD *)(a1 + v55 + 8);
  if (v58 >> 60 == 15)
  {
LABEL_44:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    goto LABEL_46;
  }
  v59 = *(_QWORD *)(v57 + 8);
  if (v59 >> 60 == 15)
  {
    sub_1000DC964(v56);
    goto LABEL_44;
  }
  v60 = *(_QWORD *)v56;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_QWORD *)(v56 + 8) = v59;
  sub_10001BC14(v60, v58);
LABEL_46:
  v61 = a3[14];
  v62 = (uint64_t *)(a1 + v61);
  v63 = (uint64_t *)(a2 + v61);
  v64 = *(_QWORD *)(a1 + v61 + 8);
  if (v64 >> 60 != 15)
  {
    v65 = v63[1];
    if (v65 >> 60 != 15)
    {
      v66 = *v62;
      *v62 = *v63;
      v62[1] = v65;
      sub_10001BC14(v66, v64);
      return a1;
    }
    sub_1000DC964((uint64_t)v62);
  }
  *(_OWORD *)v62 = *(_OWORD *)v63;
  return a1;
}

uint64_t sub_100137900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013790C);
}

uint64_t sub_10013790C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t sub_100137994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001379A0);
}

uint64_t sub_1001379A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_100137A28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E280B8;
    v4[2] = &unk_100E280B8;
    v4[3] = &unk_100E280B8;
    v4[4] = &unk_100E280B8;
    v4[5] = &unk_100E280B8;
    v4[6] = &unk_100E280B8;
    v4[7] = &unk_100E280B8;
    v4[8] = &unk_100E280B8;
    v4[9] = &unk_100E280B8;
    v4[10] = &unk_100E280B8;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryBatteryLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100137AF8 + 4 * byte_100E27E7F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100137B2C + 4 * byte_100E27E7A[v4]))();
}

uint64_t sub_100137B2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137B34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100137B3CLL);
  return result;
}

uint64_t sub_100137B48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100137B50);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100137B54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137B5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBatteryLevel()
{
  return &type metadata for AccessoryBatteryLevel;
}

uint64_t storeEnumTagSinglePayload for AccessoryBatteryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100137BC4 + 4 * byte_100E27E89[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100137BF8 + 4 * byte_100E27E84[v4]))();
}

uint64_t sub_100137BF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137C00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100137C08);
  return result;
}

uint64_t sub_100137C14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100137C1CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100137C20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137C28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryBatteryType()
{
  return &type metadata for AccessoryBatteryType;
}

unint64_t sub_100137C48()
{
  unint64_t result;

  result = qword_1010EFA38;
  if (!qword_1010EFA38)
  {
    result = swift_getWitnessTable(&unk_100E281A8, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_1010EFA38);
  }
  return result;
}

unint64_t sub_100137C90()
{
  unint64_t result;

  result = qword_1010EFA40;
  if (!qword_1010EFA40)
  {
    result = swift_getWitnessTable(&unk_100E28270, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_1010EFA40);
  }
  return result;
}

uint64_t sub_100137CD4()
{
  return sub_100006204(&qword_1010EFA48, type metadata accessor for RawAccessoryMetadata, (uint64_t)&unk_100E28298);
}

unint64_t sub_100137D04()
{
  unint64_t result;

  result = qword_1010EFA50;
  if (!qword_1010EFA50)
  {
    result = swift_getWitnessTable(&unk_100E28408, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFA50);
  }
  return result;
}

unint64_t sub_100137D4C()
{
  unint64_t result;

  result = qword_1010EFA58;
  if (!qword_1010EFA58)
  {
    result = swift_getWitnessTable(&unk_100E28378, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFA58);
  }
  return result;
}

unint64_t sub_100137D94()
{
  unint64_t result;

  result = qword_1010EFA60;
  if (!qword_1010EFA60)
  {
    result = swift_getWitnessTable(&unk_100E283A0, &type metadata for AccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFA60);
  }
  return result;
}

unint64_t sub_100137DD8()
{
  unint64_t result;

  result = qword_1010EFA68;
  if (!qword_1010EFA68)
  {
    result = swift_getWitnessTable(&unk_100E28130, &type metadata for AccessoryBatteryType);
    atomic_store(result, (unint64_t *)&qword_1010EFA68);
  }
  return result;
}

unint64_t sub_100137E1C()
{
  unint64_t result;

  result = qword_1010EFA70;
  if (!qword_1010EFA70)
  {
    result = swift_getWitnessTable(&unk_100E281F8, &type metadata for AccessoryBatteryLevel);
    atomic_store(result, (unint64_t *)&qword_1010EFA70);
  }
  return result;
}

unint64_t sub_100137E60()
{
  unint64_t result;

  result = qword_1010EFA80;
  if (!qword_1010EFA80)
  {
    result = swift_getWitnessTable(&unk_100E28618, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFA80);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RawAccessoryMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for RawAccessoryMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100137F80 + 4 * byte_100E27E93[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100137FB4 + 4 * byte_100E27E8E[v4]))();
}

uint64_t sub_100137FB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137FBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100137FC4);
  return result;
}

uint64_t sub_100137FD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100137FD8);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100137FDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137FE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RawAccessoryMetadata.CodingKeys()
{
  return &type metadata for RawAccessoryMetadata.CodingKeys;
}

unint64_t sub_100138004()
{
  unint64_t result;

  result = qword_1010EFA90;
  if (!qword_1010EFA90)
  {
    result = swift_getWitnessTable(&unk_100E285F0, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFA90);
  }
  return result;
}

unint64_t sub_10013804C()
{
  unint64_t result;

  result = qword_1010EFA98;
  if (!qword_1010EFA98)
  {
    result = swift_getWitnessTable(&unk_100E28560, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFA98);
  }
  return result;
}

unint64_t sub_100138094()
{
  unint64_t result;

  result = qword_1010EFAA0;
  if (!qword_1010EFAA0)
  {
    result = swift_getWitnessTable(&unk_100E28588, &type metadata for RawAccessoryMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFAA0);
  }
  return result;
}

uint64_t sub_1001380D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B628(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100138100@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B63C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100138128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler);
LABEL_8:
    swift_retain();
    return v2;
  }
  v3 = v0;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v4 = sub_100C1B628(v12);
  result = swift_bridgeObjectRelease();
  v6 = (unsigned __int128)(v4 * (__int128)60) >> 64;
  v7 = 60 * v4;
  if (v6 == v7 >> 63)
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v8 = sub_100C1B63C(v12);
    result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v8 * (__int128)60) >> 64 == (60 * v8) >> 63)
    {
      v9 = (double)(60 * v8);
      v10 = swift_allocObject(&unk_101059840, 24, 7);
      swift_weakInit(v10 + 16, v0);
      v11 = type metadata accessor for XPCScheduler();
      swift_allocObject(v11, 80, 7);
      v2 = sub_1004E52A0(0xD000000000000015, 0x8000000100EC85D0, (uint64_t)sub_10013947C, v10, (double)v7, v9, 1.0);
      swift_release();
      *(_QWORD *)(v3 + v1) = v2;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001382FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  _QWORD v30[5];

  v2 = v1;
  v27 = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_101107EF0);
  __chkstk_darwin(v3);
  v29 = (uint64_t)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v2 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configSubscription;
  v16 = sub_10001A9A8(&qword_1010FAA80);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v28(v15, 1, 1, v16);
  v17 = OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configurationChangedQueue;
  sub_10001F6FC();
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter(v18);
  v30[0] = _swiftEmptyArrayStorage;
  v19 = sub_100139304();
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v21 = sub_10001F738();
  v22 = v20;
  v23 = v27;
  dispatch thunk of SetAlgebra.init<A>(_:)(v30, v22, v21, v5, v19);
  *(_QWORD *)(v2 + v17) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000035, 0x8000000100EC8590, v10, v7, v14, 0);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler) = 0;
  *(_QWORD *)(v2 + 16) = v23;
  swift_retain();
  sub_100138128();
  swift_release();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v30[3] = type metadata accessor for FirmwareUpdateScheduler(0);
  v30[4] = &off_101059820;
  v30[0] = v2;
  swift_retain();
  v24 = v29;
  sub_1000995F8((uint64_t)v30, v29);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  v28(v24, 0, 1, v16);
  v25 = v2 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configSubscription;
  swift_beginAccess(v2 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configSubscription, v30, 33, 0);
  sub_10013934C(v24, v25);
  swift_endAccess(v30);
  return v2;
}

uint64_t sub_1001385F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;
  uint64_t v25;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v3 = qword_1011B7DE0;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B10;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v6 = 0;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v7 = sub_100C1B628(v25);
  v8 = swift_bridgeObjectRelease();
  if ((unsigned __int128)(v7 * (__int128)60) >> 64 != (60 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v24 = v4;
  v9 = Double.description.getter(v8, (double)(60 * v7));
  v11 = v10;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v7 = sub_10001AA00();
  *(_QWORD *)(v5 + 64) = v7;
  *(_QWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 40) = v11;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v1 = sub_100C1B63C(v25);
  v12 = swift_bridgeObjectRelease();
  if ((unsigned __int128)(v1 * (__int128)60) >> 64 != (60 * v1) >> 63)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v13 = Double.description.getter(v12, (double)(60 * v1));
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v7;
  *(_QWORD *)(v5 + 72) = v13;
  *(_QWORD *)(v5 + 80) = v14;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Scheduling firmware update check with frequency: %@, grace period: %@", 69, 2, v5, v4);
  swift_bridgeObjectRelease();
  v3 = sub_100138128();
  v15 = sub_1004E4A00();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v15, *(_QWORD *)(v15 + 40), &type metadata for () + 1, &type metadata for () + 1);
  v16 = swift_release();
  v6 = static os_log_type_t.default.getter(v16);
  v1 = (uint64_t)&type metadata for String;
  if (qword_1010EA2B8 != -1)
LABEL_11:
    swift_once(&qword_1010EA2B8, sub_100B5DE78);
  v17 = qword_1011B7D98;
  v18 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v3 + 16);
  v20 = *(void **)(v3 + 24);
  swift_bridgeObjectRetain(v20);
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 62;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_release();
  *(_QWORD *)(v18 + 56) = v1;
  *(_QWORD *)(v18 + 64) = v7;
  *(_QWORD *)(v18 + 32) = 0x656863534350583CLL;
  *(_QWORD *)(v18 + 40) = 0xEF203A72656C7564;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v17, "Scheduling timer: %{public}@", 28, 2, v18);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100138950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001389AC, 0, 0);
}

uint64_t sub_1001389AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v3 = *(_QWORD *)(v1 + 16);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7DE0, "XPC Scheduler fired: Checking firmware update", 45, 2, _swiftEmptyArrayStorage);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v1 + 32) = v4;
  return swift_task_switch(sub_100138A48, v4, 0);
}

uint64_t sub_100138A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_10014BF94(2, v1);
  sub_100004048(v1, &qword_1010ED860);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100138ABC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  _QWORD v8[6];

  v1 = v0;
  v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configurationChangedQueue);
  v3 = swift_allocObject(&unk_101059840, 24, 7);
  swift_weakInit(v3 + 16, v0);
  v4 = swift_allocObject(&unk_101059868, 32, 7);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = swift_allocObject(&unk_101059890, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_1001393E4;
  *(_QWORD *)(v5 + 24) = v4;
  v8[4] = sub_10001D850;
  v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10001D8B8;
  v8[3] = &unk_1010598A8;
  v6 = _Block_copy(v8);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v6);
  _Block_release(v6);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v5, "", 117, 65, 45, 1);
  swift_release();
  result = swift_release();
  if ((v2 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100138C10(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  if (swift_weakLoadStrong(v2))
  {
    sub_100138128();
    swift_release();
    sub_1004E4BA4();
    swift_release();
  }
  swift_beginAccess(v2, v12, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v5 = sub_100C1B628(v11);
    result = swift_bridgeObjectRelease();
    v6 = (unsigned __int128)(v5 * (__int128)60) >> 64;
    v7 = 60 * v5;
    if (v6 == v7 >> 63)
    {
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v8 = sub_100C1B63C(v11);
      result = swift_bridgeObjectRelease();
      if ((unsigned __int128)(v8 * (__int128)60) >> 64 == (60 * v8) >> 63)
      {
        v9 = type metadata accessor for XPCScheduler();
        swift_allocObject(v9, 80, 7);
        swift_retain();
        v10 = sub_1004E52A0(0xD000000000000015, 0x8000000100EC85D0, (uint64_t)sub_1001393FC, a1, (double)v7, (double)(60 * v8), 1.0);
        swift_release();
        *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler____lazy_storage___updateScheduler) = v10;
        swift_release();
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100138E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v5);
    static Transaction.asyncTask(name:block:)("updateSchedulerFired", 20, 2, a2, v5);
    return swift_release_n(v5, 2);
  }
  return result;
}

uint64_t sub_100138EA8()
{
  uint64_t v0;

  swift_release();
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd23FirmwareUpdateScheduler_configSubscription, (uint64_t *)&unk_101107EF0);

  swift_release();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100138F08()
{
  return type metadata accessor for FirmwareUpdateScheduler(0);
}

uint64_t type metadata accessor for FirmwareUpdateScheduler(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EFAE8;
  if (!qword_1010EFAE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FirmwareUpdateScheduler);
  return result;
}

void sub_100138F4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100138FE0(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = "\b";
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

void sub_100138FE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010EFAF8)
  {
    v2 = sub_10001F784(&qword_1010FAA80);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010EFAF8);
  }
}

uint64_t sub_100139038(uint64_t a1, uint64_t a2)
{
  return sub_10013905C(a2);
}

uint64_t sub_10013905C(uint64_t a1)
{
  uint64_t KeyPath;
  char v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for AnyKeyPath(0);
  KeyPath = swift_getKeyPath(&unk_100E28720);
  v3 = static AnyKeyPath.== infix(_:_:)(a1, KeyPath);
  result = swift_release();
  if ((v3 & 1) != 0
    || (v5 = swift_getKeyPath(&unk_100E28748),
        v6 = static AnyKeyPath.== infix(_:_:)(a1, v5),
        result = swift_release(),
        (v6 & 1) != 0))
  {
    v7 = static os_log_type_t.default.getter(result);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v8 = qword_1011B7DE0;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 112, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v11 = sub_100C1B628(v19);
    result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v11 * (__int128)60) >> 64 == (60 * v11) >> 63)
    {
      v12 = Double.description.getter(result, (double)(60 * v11));
      v14 = v13;
      *(_QWORD *)(v10 + 56) = &type metadata for String;
      v15 = sub_10001AA00();
      *(_QWORD *)(v10 + 64) = v15;
      *(_QWORD *)(v10 + 32) = v12;
      *(_QWORD *)(v10 + 40) = v14;
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v16 = sub_100C1B63C(v19);
      result = swift_bridgeObjectRelease();
      if ((unsigned __int128)(v16 * (__int128)60) >> 64 == (60 * v16) >> 63)
      {
        v17 = Double.description.getter(result, (double)(60 * v16));
        *(_QWORD *)(v10 + 96) = &type metadata for String;
        *(_QWORD *)(v10 + 104) = v15;
        *(_QWORD *)(v10 + 72) = v17;
        *(_QWORD *)(v10 + 80) = v18;
        os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Schedule configuration changed. Re-scheduling firmware update check with frequency: %@, grace period: %@", 104, 2, v10);
        swift_bridgeObjectRelease();
        return sub_100138ABC();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001392B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B628(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001392DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B63C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100139304()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F0E20;
  if (!qword_1010F0E20)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1010F0E20);
  }
  return result;
}

uint64_t sub_10013934C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_101107EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100139394()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001393B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001393E4()
{
  uint64_t v0;

  return sub_100138C10(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001393EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001393FC()
{
  uint64_t v0;

  return sub_100138E18(v0, (uint64_t)&unk_1010EFC00);
}

uint64_t sub_10013941C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010EFBFC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100138950(v0);
}

uint64_t sub_100139464()
{
  uint64_t v0;

  return sub_100732768(v0);
}

uint64_t sub_10013947C()
{
  uint64_t v0;

  return sub_100138E18(v0, (uint64_t)&unk_1010EFC08);
}

uint64_t sub_10013949C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010EFBFC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004C28;
  return sub_100138950(v0);
}

uint64_t sub_1001394E4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)(v3 + 280) = a2;
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v2;
  v4 = sub_10001A9A8(&qword_1010EC838);
  *(_QWORD *)(v3 + 72) = v4;
  *(_QWORD *)(v3 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE290);
  *(_QWORD *)(v3 + 88) = v5;
  *(_QWORD *)(v3 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v3 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v3 + 112) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101111440);
  *(_QWORD *)(v3 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v3 + 128) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 136) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 144) = swift_task_alloc(v11);
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 160) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v3 + 168) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v3 + 176) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 184) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 192) = swift_task_alloc(v15);
  return swift_task_switch(sub_100139648, v2, 0);
}

uint64_t sub_100139648()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[7];
  v2 = v0[24];
  v3 = v0[20];
  v4 = v0[21];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[25] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[24];
  v12 = v0[20];
  if (v10)
  {
    v19 = v0[21];
    v13 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v13 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[6] = sub_100016940(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Decline %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[24], v0[20]);
  }

  v17 = *(_QWORD *)(v0[8] + 112);
  v0[26] = v17;
  return swift_task_switch(sub_10013987C, v17, 0);
}

uint64_t sub_10013987C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 216) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_1001398F8;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001ED30, *(_QWORD *)(v0 + 208), v3);
}

uint64_t sub_1001398F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release();
  return swift_task_switch(sub_100139954, v1, 0);
}

uint64_t sub_100139954()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[28] = v0[2];
  return swift_task_switch(sub_100139970, v1, 0);
}

uint64_t sub_100139970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 136);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = *(_QWORD *)(v0 + 144);
      v8 = *(_QWORD *)(v0 + 56);
      sub_10005972C(v5, v7, type metadata accessor for MemberSharingCircle);
      if ((static UUID.== infix(_:_:)(v7 + *(int *)(v4 + 28), v8) & 1) != 0)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease();
    sub_1000126EC(v10, v11, type metadata accessor for MemberSharingCircle);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, v9, 1, v12);
  swift_bridgeObjectRelease();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12);
  v16 = *(_QWORD *)(v0 + 120);
  if (v15 == 1)
  {
    v17 = *(_QWORD *)(v0 + 208);
    sub_100004048(v16, (uint64_t *)&unk_101111440);
    return swift_task_switch(sub_100139C34, v17, 0);
  }
  else
  {
    sub_1000126EC(v16, *(_QWORD *)(v0 + 152), type metadata accessor for MemberSharingCircle);
    v19 = (_QWORD *)swift_task_alloc(dword_1010EFD24);
    *(_QWORD *)(v0 + 232) = v19;
    *v19 = v0;
    v19[1] = sub_100139B24;
    return sub_10013A214(*(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 280), 0);
  }
}

uint64_t sub_100139B24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10013A09C;
  else
    v4 = sub_100139B88;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_100139B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000126B0(*(_QWORD *)(v0 + 152), type metadata accessor for MemberSharingCircle);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100139C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 200))(v2, *(_QWORD *)(v0 + 56), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101059A68, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 256) = v10;
  *v10 = v0;
  v10[1] = sub_100139D08;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 80), sub_10014297C, v8, *(_QWORD *)(v0 + 72));
}

uint64_t sub_100139D08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_100139D68, v1, 0);
}

uint64_t sub_100139D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = sub_10001A9A8(&qword_1010EC848);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010EC838);
    type metadata accessor for SPBeaconSharingError(0);
    v4 = v3;
    *(_QWORD *)(v0 + 32) = 5;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v7 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 24), v0 + 32, v5, v4, v6);
    swift_willThrow(v7);
    v8 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 96);
    v21 = v1 + *(int *)(v2 + 48);
    v22 = v19 + *(int *)(v20 + 48);
    sub_1000126EC(v1, v19, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v21, v22, type metadata accessor for OwnerSharingCircle);
    v23 = v19 + *(int *)(v20 + 48);
    sub_1000126EC(v19, v17, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v23, v18, type metadata accessor for OwnerSharingCircle);
    v24 = (_QWORD *)swift_task_alloc(dword_1010EFD3C);
    *(_QWORD *)(v0 + 264) = v24;
    *v24 = v0;
    v24[1] = sub_100139F7C;
    return sub_10013CF40(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 280));
  }
}

uint64_t sub_100139F7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10013A150;
  else
    v4 = sub_100139FE0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), 0);
}

uint64_t sub_100139FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 112);
  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013A09C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1000126B0(*(_QWORD *)(v0 + 152), type metadata accessor for MemberSharingCircle);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013A150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 112);
  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013A214(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  *(_BYTE *)(v4 + 809) = a3;
  *(_BYTE *)(v4 + 808) = a2;
  *(_QWORD *)(v4 + 296) = a1;
  *(_QWORD *)(v4 + 304) = v3;
  v5 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v4 + 312) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 320) = v6;
  *(_QWORD *)(v4 + 328) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EC870);
  *(_QWORD *)(v4 + 336) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101109120);
  *(_QWORD *)(v4 + 344) = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 352) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 360) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 368) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 376) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 384) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 392) = swift_task_alloc(v9);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v4 + 400) = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 408) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 416) = swift_task_alloc(v11);
  v12 = sub_10001A9A8((uint64_t *)&unk_101111440);
  *(_QWORD *)(v4 + 424) = v12;
  *(_QWORD *)(v4 + 432) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v4 + 440) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v4 + 448) = v14;
  v15 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v4 + 456) = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 464) = swift_task_alloc(v16);
  *(_QWORD *)(v4 + 472) = swift_task_alloc(v16);
  *(_QWORD *)(v4 + 480) = swift_task_alloc(v16);
  v17 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 488) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v4 + 496) = v18;
  v19 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v4 + 504) = v19;
  *(_QWORD *)(v4 + 512) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010EC868);
  *(_QWORD *)(v4 + 520) = v20;
  *(_QWORD *)(v4 + 528) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for MemberPeerTrust(0);
  *(_QWORD *)(v4 + 536) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v4 + 544) = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 552) = swift_task_alloc(v23);
  *(_QWORD *)(v4 + 560) = swift_task_alloc(v23);
  *(_QWORD *)(v4 + 568) = swift_task_alloc(v23);
  return swift_task_switch(sub_10013A448, v3, 0);
}

uint64_t sub_10013A448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 112);
  *(_QWORD *)(v0 + 576) = v2;
  *(_DWORD *)(v0 + 776) = *(_DWORD *)(v1 + 32);
  return swift_task_switch(sub_10013A470, v2, 0);
}

uint64_t sub_10013A470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = *(_QWORD *)(v0 + 296) + *(int *)(v0 + 776);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 584) = v7;
  v7(v2, v6, v4);
  LODWORD(v8) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 780) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101059978, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 592) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 600) = v11;
  v11(v10 + v9, v2, v4);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 608) = v13;
  *v13 = v0;
  v13[1] = sub_10013A564;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 528), sub_100142994, v10, *(_QWORD *)(v0 + 520));
}

uint64_t sub_10013A564()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  swift_release();
  return swift_task_switch(sub_10013A5C8, v1, 0);
}

uint64_t sub_10013A5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, char, uint64_t);
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 528);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 544) + 48))(v1, 1, *(_QWORD *)(v0 + 536)) == 1)
  {
    sub_100004048(v1, &qword_1010EC868);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v2 = *(_QWORD *)(v0 + 464);
    v3 = *(_QWORD *)(v0 + 296);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v5 = sub_10005972C(v3, v2, type metadata accessor for MemberSharingCircle);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = *(_QWORD *)(v0 + 488);
      v9 = *(_QWORD *)(v0 + 464);
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v64 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v13 = dispatch thunk of CustomStringConvertible.description.getter(v8, v12);
      *(_QWORD *)(v0 + 224) = sub_100016940(v13, v14, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v9, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No peerTrustIdentifier for %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 464), type metadata accessor for MemberSharingCircle);
    }

    v18 = *(_QWORD *)(v0 + 560);
    v19 = *(_QWORD *)(v0 + 552);
    v20 = *(_QWORD *)(v0 + 528);
    v21 = *(_QWORD *)(v0 + 512);
    v23 = *(_QWORD *)(v0 + 472);
    v22 = *(_QWORD *)(v0 + 480);
    v24 = *(_QWORD *)(v0 + 464);
    v25 = *(_QWORD *)(v0 + 432);
    v26 = *(_QWORD *)(v0 + 416);
    v53 = *(_QWORD *)(v0 + 408);
    v54 = *(_QWORD *)(v0 + 392);
    v55 = *(_QWORD *)(v0 + 384);
    v56 = *(_QWORD *)(v0 + 376);
    v57 = *(_QWORD *)(v0 + 368);
    v58 = *(_QWORD *)(v0 + 360);
    v59 = *(_QWORD *)(v0 + 352);
    v60 = *(_QWORD *)(v0 + 336);
    v61 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 568));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_BYTE *)(v0 + 808);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 568), type metadata accessor for MemberPeerTrust);
    if ((v15 & 1) != 0)
    {
      *(_QWORD *)(v0 + 648) = 0;
      v16 = *(_QWORD *)(v0 + 576);
      *(_DWORD *)(v0 + 784) = *(_DWORD *)(*(_QWORD *)(v0 + 440) + 28);
      return swift_task_switch(sub_10013B0F8, v16, 0);
    }
    else
    {
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v27 = *(_QWORD *)(v0 + 568);
      v28 = *(_QWORD *)(v0 + 560);
      v29 = *(_QWORD *)(v0 + 552);
      v30 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 616) = sub_10001A9E8(v30, (uint64_t)qword_1011B6748);
      sub_10005972C(v27, v28, type metadata accessor for MemberPeerTrust);
      v31 = sub_10005972C(v27, v29, type metadata accessor for MemberPeerTrust);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      v34 = os_log_type_enabled(v32, v33);
      v35 = *(_QWORD *)(v0 + 560);
      v36 = *(_QWORD *)(v0 + 552);
      if (v34)
      {
        v37 = *(_QWORD *)(v0 + 488);
        v38 = swift_slowAlloc(22, -1);
        v62 = swift_slowAlloc(64, -1);
        v64 = v62;
        *(_DWORD *)v38 = 136315394;
        v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
        *(_QWORD *)(v0 + 280) = sub_100016940(v40, v41, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v35, type metadata accessor for MemberPeerTrust);
        *(_WORD *)(v38 + 12) = 2080;
        sub_100728868();
        *(_QWORD *)(v0 + 288) = sub_100016940(v42, v43, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v38 + 14, v38 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v36, type metadata accessor for MemberPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Declining share from peerTrustIdentifier: %s,\ncommunicationsIdentifier: %s.", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v0 + 560), type metadata accessor for MemberPeerTrust);
        sub_1000126B0(v36, type metadata accessor for MemberPeerTrust);
      }

      v44 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 584);
      v45 = *(_QWORD *)(v0 + 568);
      v46 = *(_QWORD *)(v0 + 536);
      v47 = *(_QWORD *)(v0 + 488);
      v48 = *(_QWORD *)(v0 + 304) + 120;
      v49 = *(_QWORD *)(v0 + 296) + *(int *)(*(_QWORD *)(v0 + 440) + 28);
      *(_QWORD *)(v0 + 40) = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
      *(_QWORD *)(v0 + 48) = sub_100006204(&qword_1010EFD28, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t)&unk_100E38DB8);
      *(_QWORD *)(v0 + 56) = sub_100006204(&qword_1010EFD30, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t)&unk_100E38E58);
      v50 = sub_100018F08((_QWORD *)(v0 + 16));
      v44(v50, v49, v47);
      v51 = v45 + *(int *)(v46 + 28);
      v63 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101120698 + dword_101120698);
      v52 = (_QWORD *)swift_task_alloc(unk_10112069C);
      *(_QWORD *)(v0 + 624) = v52;
      *v52 = v0;
      v52[1] = sub_10013AC64;
      return v63(v48, v0 + 16, 4, v51);
    }
  }
}

uint64_t sub_10013AC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  char *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 624);
  v3 = *(_QWORD **)v1;
  v3[79] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10013AD7C, v3[38], 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3 + 2);
  v6 = (char *)&dword_1011135C0 + dword_1011135C0;
  v5 = (_QWORD *)swift_task_alloc(unk_1011135C4);
  v3[80] = v5;
  *v5 = v3;
  v5[1] = sub_10013AD18;
  return ((uint64_t (*)(_QWORD, _QWORD))v6)(0, 0);
}

uint64_t sub_10013AD18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 640));
  *(_QWORD *)(v1 + 648) = *(_QWORD *)(v1 + 632);
  v2 = *(_QWORD *)(v1 + 576);
  *(_DWORD *)(v1 + 784) = *(_DWORD *)(*(_QWORD *)(v1 + 440) + 28);
  return swift_task_switch(sub_10013B0F8, v2, 0);
}

uint64_t sub_10013AD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 632);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 632);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v38 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 256, v0 + 144);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 272) = sub_100016940(v8, v9, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share decline, IDS message sending: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 632);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  if ((*(_BYTE *)(v0 + 809) & 1) != 0)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 632));
    *(_QWORD *)(v0 + 648) = 0;
    v11 = *(_QWORD *)(v0 + 576);
    *(_DWORD *)(v0 + 784) = *(_DWORD *)(*(_QWORD *)(v0 + 440) + 28);
    return swift_task_switch(sub_10013B0F8, v11, 0);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 632);
    v14 = *(_QWORD *)(v0 + 568);
    type metadata accessor for SPBeaconSharingError(0);
    v16 = v15;
    *(_QWORD *)(v0 + 232) = 14;
    v17 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v18 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v19 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 264), v0 + 232, v17, v16, v18);
    swift_willThrow(v19);
    swift_errorRelease(v13);
    sub_1000126B0(v14, type metadata accessor for MemberPeerTrust);
    v20 = *(_QWORD *)(v0 + 560);
    v21 = *(_QWORD *)(v0 + 552);
    v22 = *(_QWORD *)(v0 + 528);
    v23 = *(_QWORD *)(v0 + 512);
    v25 = *(_QWORD *)(v0 + 472);
    v24 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 464);
    v27 = *(_QWORD *)(v0 + 432);
    v28 = *(_QWORD *)(v0 + 416);
    v29 = *(_QWORD *)(v0 + 408);
    v30 = *(_QWORD *)(v0 + 392);
    v31 = *(_QWORD *)(v0 + 384);
    v32 = *(_QWORD *)(v0 + 376);
    v33 = *(_QWORD *)(v0 + 368);
    v34 = *(_QWORD *)(v0 + 360);
    v35 = *(_QWORD *)(v0 + 352);
    v36 = *(_QWORD *)(v0 + 336);
    v37 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 568));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10013B0F8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v2 = *(unsigned __int8 *)(v0 + 780);
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 504);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 584))(v4, *(_QWORD *)(v0 + 296) + *(int *)(v0 + 784), v5);
  v9 = swift_allocObject(&unk_1010599A0, v7, v8);
  *(_QWORD *)(v0 + 656) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 664) = v11;
  *v11 = v0;
  v11[1] = sub_10013B1E8;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 432), sub_1001429AC, v9, *(_QWORD *)(v0 + 424));
}

uint64_t sub_10013B1E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 664));
  swift_release();
  return swift_task_switch(sub_10013B24C, v1, 0);
}

uint64_t sub_10013B24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 432);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 448) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_101111440);
    type metadata accessor for SPBeaconSharingError(0);
    v4 = v3;
    *(_QWORD *)(v0 + 192) = 5;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v7 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 208), v0 + 192, v5, v4, v6);
    v8 = *(_QWORD *)(v0 + 208);
    swift_willThrow(v7);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B6748);
    swift_errorRetain(v8);
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v59 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_getErrorValue(v8, v0 + 200, v0 + 168);
      v15 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
      *(_QWORD *)(v0 + 216) = sub_100016940(v15, v16, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failure on share decline, iCloud Data update: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);
    }

    v19 = *(_QWORD *)(v0 + 568);
    if ((*(_BYTE *)(v0 + 809) & 1) != 0)
    {
      sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for MemberPeerTrust);
      swift_errorRelease(v8);
      v20 = *(_QWORD *)(v0 + 560);
      v21 = *(_QWORD *)(v0 + 552);
      v22 = *(_QWORD *)(v0 + 528);
      v23 = *(_QWORD *)(v0 + 512);
      v25 = *(_QWORD *)(v0 + 472);
      v24 = *(_QWORD *)(v0 + 480);
      v26 = *(_QWORD *)(v0 + 464);
      v27 = *(_QWORD *)(v0 + 432);
      v28 = *(_QWORD *)(v0 + 416);
      v41 = *(_QWORD *)(v0 + 408);
      v43 = *(_QWORD *)(v0 + 392);
      v45 = *(_QWORD *)(v0 + 384);
      v47 = *(_QWORD *)(v0 + 376);
      v49 = *(_QWORD *)(v0 + 368);
      v51 = *(_QWORD *)(v0 + 360);
      v53 = *(_QWORD *)(v0 + 352);
      v55 = *(_QWORD *)(v0 + 336);
      v57 = *(_QWORD *)(v0 + 328);
      swift_task_dealloc(*(_QWORD *)(v0 + 568));
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v41);
      swift_task_dealloc(v43);
      swift_task_dealloc(v45);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v51);
      swift_task_dealloc(v53);
      swift_task_dealloc(v55);
      swift_task_dealloc(v57);
    }
    else
    {
      v29 = sub_100067D98();
      v58 = swift_allocError(&type metadata for BeaconSharingFlowError, v29, 0, 0);
      *v30 = 1;
      swift_willThrow(v58);
      swift_errorRelease(v8);
      sub_1000126B0(v19, type metadata accessor for MemberPeerTrust);
      v31 = *(_QWORD *)(v0 + 560);
      v32 = *(_QWORD *)(v0 + 552);
      v33 = *(_QWORD *)(v0 + 528);
      v34 = *(_QWORD *)(v0 + 512);
      v36 = *(_QWORD *)(v0 + 472);
      v35 = *(_QWORD *)(v0 + 480);
      v37 = *(_QWORD *)(v0 + 464);
      v38 = *(_QWORD *)(v0 + 432);
      v39 = *(_QWORD *)(v0 + 416);
      v40 = *(_QWORD *)(v0 + 408);
      v42 = *(_QWORD *)(v0 + 392);
      v44 = *(_QWORD *)(v0 + 384);
      v46 = *(_QWORD *)(v0 + 376);
      v48 = *(_QWORD *)(v0 + 368);
      v50 = *(_QWORD *)(v0 + 360);
      v52 = *(_QWORD *)(v0 + 352);
      v54 = *(_QWORD *)(v0 + 336);
      v56 = *(_QWORD *)(v0 + 328);
      swift_task_dealloc(*(_QWORD *)(v0 + 568));
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      swift_task_dealloc(v46);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v52);
      swift_task_dealloc(v54);
      swift_task_dealloc(v56);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 576);
    sub_1000126EC(v2, *(_QWORD *)(v0 + 480), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 788) = *(_DWORD *)(v1 + 24);
    return swift_task_switch(sub_10013B764, v17, 0);
  }
}

uint64_t sub_10013B764()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v2 = *(unsigned __int8 *)(v0 + 780);
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 504);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 584))(v4, *(_QWORD *)(v0 + 480) + *(int *)(v0 + 788), v5);
  v9 = swift_allocObject(&unk_1010599C8, v7, v8);
  *(_QWORD *)(v0 + 672) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 680) = v11;
  *v11 = v0;
  v11[1] = sub_10013B854;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 416), sub_100142964, v9, *(_QWORD *)(v0 + 400));
}

uint64_t sub_10013B854()
{
  uint64_t v0;
  _DWORD *v1;
  uint64_t v2;
  _DWORD *v3;

  v1 = *(_DWORD **)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 576);
  v3 = *(_DWORD **)(*(_QWORD *)v0 + 344);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 680));
  swift_release();
  v1[198] = v3[12];
  v1[199] = v3[16];
  v1[200] = v3[20];
  v1[201] = v3[24];
  return swift_task_switch(sub_10013B8E0, v2, 0);
}

uint64_t sub_10013B8E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[72];
  v2 = v0[59];
  v4 = v0[56];
  v3 = v0[57];
  sub_10005972C(v0[60], v2, type metadata accessor for MemberSharingCircle);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = swift_allocObject(&unk_1010599F0, v6 + v3, v5 | 7);
  v0[86] = v7;
  *(_QWORD *)(v7 + 16) = v1;
  sub_1000126EC(v2, v7 + v6, type metadata accessor for MemberSharingCircle);
  v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[87] = v9;
  *v9 = v0;
  v9[1] = sub_10013B9B8;
  return unsafeBlocking<A>(_:)(v0[48], sub_100142AA0, v7, v0[43]);
}

uint64_t sub_10013B9B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 576);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 696));
  swift_release();
  return swift_task_switch(sub_10013BA1C, v1, 0);
}

uint64_t sub_10013BA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(int **)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = v2 + *(int *)(v0 + 796);
  v6 = v2 + *(int *)(v0 + 792);
  v7 = v1 + v3[12];
  v8 = v1 + v3[16];
  *(_QWORD *)(v0 + 704) = *(_QWORD *)(v1 + v3[20]);
  *(_QWORD *)(v0 + 712) = *(_QWORD *)(v1 + v3[24]);
  sub_1000126EC(v1, v2, type metadata accessor for MemberSharingCircle);
  sub_100005CF0(v7, v6, (uint64_t *)&unk_1010EE180);
  sub_100005CF0(v8, v5, (uint64_t *)&unk_101105880);
  return swift_task_switch(sub_10013BAD8, v4, 0);
}

uint64_t sub_10013BAD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  os_log_type_t type;
  uint64_t typea;
  os_log_type_t typeb[8];
  os_log_type_t typec[8];
  os_log_t logb;
  NSObject *log;
  os_log_t loga;
  os_log_t logc;
  os_log_t logd;
  uint64_t v118[2];

  v1 = *(_QWORD *)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 704);
  v3 = *(int *)(v0 + 804);
  v4 = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v4 + *(int *)(v0 + 800)) = v2;
  *(_QWORD *)(v4 + v3) = v1;
  v5 = qword_1010E9938;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  if (v5 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v6 = *(_QWORD *)(v0 + 704);
  v7 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 376);
  v101 = *(_QWORD *)(v0 + 368);
  v105 = *(_QWORD *)(v0 + 712);
  logb = *(os_log_t *)(v0 + 360);
  v9 = *(int **)(v0 + 344);
  v10 = v7 + *(int *)(v0 + 796);
  v11 = v7 + *(int *)(v0 + 792);
  v98 = type metadata accessor for Logger(0);
  sub_10001A9E8(v98, (uint64_t)qword_1011B6748);
  v12 = v8 + v9[12];
  v13 = v8 + v9[16];
  v14 = v9[20];
  v15 = v9[24];
  sub_10005972C(v7, v8, type metadata accessor for MemberSharingCircle);
  sub_10000F9B8(v11, v12, (uint64_t *)&unk_1010EE180);
  sub_10000F9B8(v10, v13, (uint64_t *)&unk_101105880);
  *(_QWORD *)(v8 + v14) = v6;
  *(_QWORD *)(v8 + v15) = v105;
  sub_10000F9B8(v8, v101, (uint64_t *)&unk_101109120);
  sub_100005CF0(v8, (uint64_t)logb, (uint64_t *)&unk_101109120);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v105);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  log = v17;
  if (os_log_type_enabled(v17, v18))
  {
    v86 = *(_QWORD *)(v0 + 512);
    v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 584);
    v95 = *(_QWORD *)(v0 + 496);
    v84 = *(_QWORD *)(v0 + 440);
    v85 = *(_QWORD *)(v0 + 488);
    type = v18;
    v19 = *(_QWORD *)(v0 + 384);
    v20 = *(_QWORD *)(v0 + 368);
    v102 = *(_QWORD *)(v0 + 360);
    v21 = *(int **)(v0 + 344);
    v22 = swift_slowAlloc(22, -1);
    v106 = swift_slowAlloc(32, -1);
    v118[0] = v106;
    *(_DWORD *)v22 = 141558275;
    *(_QWORD *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    v23 = v21[12];
    v24 = v19 + v23;
    v25 = v21[16];
    v26 = v19 + v25;
    v27 = v21[20];
    v28 = v21[24];
    v29 = v20 + v23;
    v30 = v20 + v25;
    sub_10005972C(v20, v19, type metadata accessor for MemberSharingCircle);
    sub_10000F9B8(v29, v24, (uint64_t *)&unk_1010EE180);
    sub_10000F9B8(v30, v26, (uint64_t *)&unk_101105880);
    *(_QWORD *)(v19 + v27) = *(_QWORD *)(v20 + v27);
    *(_QWORD *)(v19 + v28) = *(_QWORD *)(v20 + v28);
    v88(v86, v19 + *(int *)(v84 + 20), v85);
    sub_1000126B0(v19, type metadata accessor for MemberSharingCircle);
    sub_100004048(v26, (uint64_t *)&unk_101105880);
    sub_100004048(v24, (uint64_t *)&unk_1010EE180);
    v31 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v85, v31);
    v34 = v33;
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v86, v85);
    *(_QWORD *)(v0 + 248) = sub_100016940(v32, v34, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v102, (uint64_t *)&unk_101109120);
    sub_100004048(v20, (uint64_t *)&unk_101109120);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Data update on decline. Delete %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {
    v35 = *(_QWORD *)(v0 + 368);
    sub_100004048(*(_QWORD *)(v0 + 360), (uint64_t *)&unk_101109120);
    sub_100004048(v35, (uint64_t *)&unk_101109120);

  }
  v36 = *(_QWORD *)(v0 + 712);
  v37 = *(_QWORD *)(v0 + 704);
  loga = *(os_log_t *)(v0 + 648);
  v38 = *(_QWORD *)(v0 + 392);
  v39 = *(int **)(v0 + 344);
  v40 = *(_QWORD *)(v0 + 352);
  typea = *(_QWORD *)(v0 + 336);
  v41 = v38 + *(int *)(v0 + 796);
  v42 = v38 + *(int *)(v0 + 792);
  v43 = v40 + v39[12];
  v44 = v40 + v39[16];
  v45 = v39[20];
  v46 = v39[24];
  sub_10005972C(v38, v40, type metadata accessor for MemberSharingCircle);
  sub_10000F9B8(v42, v43, (uint64_t *)&unk_1010EE180);
  sub_10000F9B8(v41, v44, (uint64_t *)&unk_101105880);
  *(_QWORD *)(v40 + v45) = v37;
  *(_QWORD *)(v40 + v46) = v36;
  v47 = swift_task_alloc(32);
  *(_QWORD *)(v47 + 16) = v40;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100142AB4, typea);
  if (loga)
  {
    v48 = loga;
    v49 = *(_QWORD *)(v0 + 480);
    v50 = *(_QWORD *)(v0 + 416);
    v51 = *(_QWORD *)(v0 + 392);
    v52 = *(_QWORD *)(v0 + 352);
    swift_task_dealloc(v47);
    sub_100004048(v51, (uint64_t *)&unk_101109120);
    sub_100004048(v50, (uint64_t *)&unk_1010EE180);
    sub_1000126B0(v49, type metadata accessor for MemberSharingCircle);
    sub_100004048(v52, (uint64_t *)&unk_101109120);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    sub_10001A9E8(v98, (uint64_t)qword_1011B6748);
    swift_errorRetain(loga);
    v53 = swift_errorRetain(loga);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v118[0] = v57;
      *(_DWORD *)v56 = 136315138;
      swift_getErrorValue(loga, v0 + 200, v0 + 168);
      v58 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
      *(_QWORD *)(v0 + 216) = sub_100016940(v58, v59, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(loga);
      swift_errorRelease(loga);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failure on share decline, iCloud Data update: %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      swift_errorRelease(loga);
      swift_errorRelease(loga);
    }

    v63 = *(_QWORD *)(v0 + 568);
    if ((*(_BYTE *)(v0 + 809) & 1) != 0)
    {
      sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for MemberPeerTrust);
      swift_errorRelease(loga);
      v64 = *(_QWORD *)(v0 + 560);
      v65 = *(_QWORD *)(v0 + 552);
      v66 = *(_QWORD *)(v0 + 528);
      v67 = *(_QWORD *)(v0 + 512);
      v69 = *(_QWORD *)(v0 + 472);
      v68 = *(_QWORD *)(v0 + 480);
      v70 = *(_QWORD *)(v0 + 464);
      v71 = *(_QWORD *)(v0 + 432);
      v72 = *(_QWORD *)(v0 + 416);
      v89 = *(_QWORD *)(v0 + 408);
      v91 = *(_QWORD *)(v0 + 392);
      v93 = *(_QWORD *)(v0 + 384);
      v96 = *(_QWORD *)(v0 + 376);
      v99 = *(_QWORD *)(v0 + 368);
      v103 = *(_QWORD *)(v0 + 360);
      v107 = *(_QWORD *)(v0 + 352);
      *(_QWORD *)typeb = *(_QWORD *)(v0 + 336);
      logc = *(os_log_t *)(v0 + 328);
      swift_task_dealloc(*(_QWORD *)(v0 + 568));
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      swift_task_dealloc(v93);
      swift_task_dealloc(v96);
      swift_task_dealloc(v99);
      swift_task_dealloc(v103);
      swift_task_dealloc(v107);
      swift_task_dealloc(*(_QWORD *)typeb);
      swift_task_dealloc(logc);
    }
    else
    {
      v73 = sub_100067D98();
      logd = (os_log_t)swift_allocError(&type metadata for BeaconSharingFlowError, v73, 0, 0);
      *v74 = 1;
      swift_willThrow(logd);
      swift_errorRelease(v48);
      sub_1000126B0(v63, type metadata accessor for MemberPeerTrust);
      v75 = *(_QWORD *)(v0 + 560);
      v76 = *(_QWORD *)(v0 + 552);
      v77 = *(_QWORD *)(v0 + 528);
      v78 = *(_QWORD *)(v0 + 512);
      v80 = *(_QWORD *)(v0 + 472);
      v79 = *(_QWORD *)(v0 + 480);
      v81 = *(_QWORD *)(v0 + 464);
      v82 = *(_QWORD *)(v0 + 432);
      v83 = *(_QWORD *)(v0 + 416);
      v87 = *(_QWORD *)(v0 + 408);
      v90 = *(_QWORD *)(v0 + 392);
      v92 = *(_QWORD *)(v0 + 384);
      v94 = *(_QWORD *)(v0 + 376);
      v97 = *(_QWORD *)(v0 + 368);
      v100 = *(_QWORD *)(v0 + 360);
      v104 = *(_QWORD *)(v0 + 352);
      v108 = *(_QWORD *)(v0 + 336);
      *(_QWORD *)typec = *(_QWORD *)(v0 + 328);
      swift_task_dealloc(*(_QWORD *)(v0 + 568));
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v87);
      swift_task_dealloc(v90);
      swift_task_dealloc(v92);
      swift_task_dealloc(v94);
      swift_task_dealloc(v97);
      swift_task_dealloc(v100);
      swift_task_dealloc(v104);
      swift_task_dealloc(v108);
      swift_task_dealloc(*(_QWORD *)typec);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v60 = *(_QWORD *)(v0 + 576);
    v61 = *(_QWORD *)(v0 + 352);
    swift_task_dealloc(v47);
    sub_100004048(v61, (uint64_t *)&unk_101109120);
    return swift_task_switch(sub_10013C428, v60, 0);
  }
}

uint64_t sub_10013C428()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 720) = *(_QWORD *)(*(_QWORD *)(v0 + 576) + 128);
  return swift_task_switch(sub_10013C448, 0, 0);
}

uint64_t sub_10013C448()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[90];
  v2 = v0[42];
  v3 = swift_task_alloc(32);
  v0[91] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[92] = v4;
  *v4 = v0;
  v4[1] = sub_10013C4EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10013C4EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 736);
  *(_QWORD *)(*v1 + 744) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013C664;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 728));
    v4 = sub_10013C558;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013C558()
{
  uint64_t v0;

  return swift_task_switch(sub_10013C56C, *(_QWORD *)(v0 + 304), 0);
}

uint64_t sub_10013C56C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[51];
  v2 = v0[39];
  v3 = v0[40];
  sub_10000F9B8(v0[52], v1, (uint64_t *)&unk_1010EE180);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v0[51], (uint64_t *)&unk_1010EE180);
    v4 = v0[72];
    v5 = sub_10013CCC8;
  }
  else
  {
    v6 = v0[72];
    v7 = v0[41];
    v8 = v0[39];
    sub_1000126EC(v0[51], v7, type metadata accessor for SharedBeaconRecord);
    v0[11] = v8;
    v0[12] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
    v9 = sub_100018F08(v0 + 8);
    sub_10005972C(v7, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    v5 = sub_10013CB2C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10013C664()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 576);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  return swift_task_switch(sub_10013C6A4, v1, 0);
}

uint64_t sub_10013C6A4()
{
  uint64_t v0;

  return swift_task_switch(sub_10013C6B8, *(_QWORD *)(v0 + 304), 0);
}

uint64_t sub_10013C6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  sub_100004048(*(_QWORD *)(v0 + 336), &qword_1010EC870);
  sub_100004048(v3, (uint64_t *)&unk_101109120);
  sub_100004048(v2, (uint64_t *)&unk_1010EE180);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  v4 = *(_QWORD *)(v0 + 744);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  swift_errorRetain(v4);
  v6 = swift_errorRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v54 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue(v4, v0 + 200, v0 + 168);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
    *(_QWORD *)(v0 + 216) = sub_100016940(v11, v12, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on share decline, iCloud Data update: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  v13 = *(_QWORD *)(v0 + 568);
  if ((*(_BYTE *)(v0 + 809) & 1) != 0)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for MemberPeerTrust);
    swift_errorRelease(v4);
    v14 = *(_QWORD *)(v0 + 560);
    v15 = *(_QWORD *)(v0 + 552);
    v16 = *(_QWORD *)(v0 + 528);
    v17 = *(_QWORD *)(v0 + 512);
    v19 = *(_QWORD *)(v0 + 472);
    v18 = *(_QWORD *)(v0 + 480);
    v20 = *(_QWORD *)(v0 + 464);
    v21 = *(_QWORD *)(v0 + 432);
    v22 = *(_QWORD *)(v0 + 416);
    v36 = *(_QWORD *)(v0 + 408);
    v38 = *(_QWORD *)(v0 + 392);
    v40 = *(_QWORD *)(v0 + 384);
    v42 = *(_QWORD *)(v0 + 376);
    v44 = *(_QWORD *)(v0 + 368);
    v46 = *(_QWORD *)(v0 + 360);
    v48 = *(_QWORD *)(v0 + 352);
    v50 = *(_QWORD *)(v0 + 336);
    v52 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 568));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
  }
  else
  {
    v23 = sub_100067D98();
    v53 = swift_allocError(&type metadata for BeaconSharingFlowError, v23, 0, 0);
    *v24 = 1;
    swift_willThrow(v53);
    swift_errorRelease(v4);
    sub_1000126B0(v13, type metadata accessor for MemberPeerTrust);
    v25 = *(_QWORD *)(v0 + 560);
    v26 = *(_QWORD *)(v0 + 552);
    v27 = *(_QWORD *)(v0 + 528);
    v28 = *(_QWORD *)(v0 + 512);
    v30 = *(_QWORD *)(v0 + 472);
    v29 = *(_QWORD *)(v0 + 480);
    v31 = *(_QWORD *)(v0 + 464);
    v32 = *(_QWORD *)(v0 + 432);
    v33 = *(_QWORD *)(v0 + 416);
    v35 = *(_QWORD *)(v0 + 408);
    v37 = *(_QWORD *)(v0 + 392);
    v39 = *(_QWORD *)(v0 + 384);
    v41 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 368);
    v45 = *(_QWORD *)(v0 + 360);
    v47 = *(_QWORD *)(v0 + 352);
    v49 = *(_QWORD *)(v0 + 336);
    v51 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 568));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013CB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 576);
  sub_100030784(v0 + 64, v0 + 104);
  v2 = swift_allocObject(&unk_101059A18, 64, 7);
  *(_QWORD *)(v0 + 752) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 104), v2 + 24);
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 760) = v4;
  *v4 = v0;
  v4[1] = sub_10013CBE0;
  return unsafeBlocking<A>(_:)(v4, sub_100142B00, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10013CBE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 576);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 760));
  swift_release();
  return swift_task_switch(sub_10013CC44, v1, 0);
}

uint64_t sub_10013CC44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  return swift_task_switch(sub_10013CC84, v1, 0);
}

uint64_t sub_10013CC84()
{
  uint64_t v0;

  sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for SharedBeaconRecord);
  return swift_task_switch(sub_10013CCC8, *(_QWORD *)(v0 + 576), 0);
}

uint64_t sub_10013CCC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 768) = v2;
  *v2 = v0;
  v2[1] = sub_10013CD34;
  return unsafeBlocking<A>(_:)(v2, sub_100142ACC, *(_QWORD *)(v0 + 576), (char *)&type metadata for () + 8);
}

uint64_t sub_10013CD34()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 576);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 768));
  swift_release();
  return swift_task_switch(sub_10013CD94, v1, 0);
}

uint64_t sub_10013CD94()
{
  uint64_t v0;

  return swift_task_switch(sub_10013CDA8, *(_QWORD *)(v0 + 304), 0);
}

uint64_t sub_10013CDA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 392);
  sub_100004048(*(_QWORD *)(v0 + 336), &qword_1010EC870);
  sub_100004048(v4, (uint64_t *)&unk_101109120);
  sub_100004048(v3, (uint64_t *)&unk_1010EE180);
  sub_1000126B0(v2, type metadata accessor for MemberSharingCircle);
  sub_1000126B0(v1, type metadata accessor for MemberPeerTrust);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 464);
  v12 = *(_QWORD *)(v0 + 432);
  v13 = *(_QWORD *)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 384);
  v18 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 352);
  v22 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 568));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013CF40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(v4 + 200) = a2;
  *(_QWORD *)(v4 + 208) = v3;
  *(_BYTE *)(v4 + 452) = a3;
  *(_QWORD *)(v4 + 192) = a1;
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 216) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 224) = v6;
  v7 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v4 + 232) = v7;
  *(_QWORD *)(v4 + 240) = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EC870) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 248) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 256) = swift_task_alloc(v8);
  v9 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v4 + 264) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 272) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 280) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 288) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 296) = swift_task_alloc(v11);
  *(_QWORD *)(v4 + 304) = swift_task_alloc(v11);
  return swift_task_switch(sub_10013D030, v3, 0);
}

uint64_t sub_10013D030()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[24];
  v2 = v0[38];
  v3 = type metadata accessor for Logger(0);
  v0[39] = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v1, v2, type metadata accessor for OwnerSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[38];
  if (v7)
  {
    v20 = v0[27];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[22] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v20, v11);
    v0[23] = sub_100016940(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Data update on share request decline. Delete %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[38], type metadata accessor for OwnerSharingCircle);
  }

  v14 = v0[32];
  v15 = v0[24];
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = v15;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100142BBC, v14);
  v17 = v0[26];
  swift_task_dealloc(v16);
  v18 = *(_QWORD *)(v17 + 112);
  v0[40] = v18;
  return swift_task_switch(sub_10013D4A0, v18, 0);
}

uint64_t sub_10013D4A0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 328) = *(_QWORD *)(*(_QWORD *)(v0 + 320) + 128);
  return swift_task_switch(sub_10013D4C0, 0, 0);
}

uint64_t sub_10013D4C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[41];
  v2 = v0[32];
  v3 = swift_task_alloc(32);
  v0[42] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[43] = v4;
  *v4 = v0;
  v4[1] = sub_10013D564;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10013D564()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  *(_QWORD *)(*v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013D6C4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 336));
    v4 = sub_10013D5D0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013D5D0()
{
  uint64_t v0;

  return swift_task_switch(sub_10013D5E4, *(_QWORD *)(v0 + 208), 0);
}

uint64_t sub_10013D5E4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_BYTE *)(v0 + 452);
  sub_100004048(*(_QWORD *)(v0 + 256), &qword_1010EC870);
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 296);
    v4 = *(_QWORD *)(v0 + 280);
    v3 = *(_QWORD *)(v0 + 288);
    v6 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 256);
    v7 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 320);
    *(_DWORD *)(v0 + 448) = *(_DWORD *)(*(_QWORD *)(v0 + 264) + 24);
    *(_QWORD *)(v0 + 360) = sub_1003BA248((uint64_t)&off_1010490E8);
    return swift_task_switch(sub_10013D924, v9, 0);
  }
}

uint64_t sub_10013D6C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  return swift_task_switch(sub_10013D704, v1, 0);
}

uint64_t sub_10013D704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  sub_100004048(*(_QWORD *)(v0 + 256), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 352);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 136, v0 + 88);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    *(_QWORD *)(v0 + 120) = sub_100016940(v7, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share request decline, cloud data update error %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v9 = sub_100067D98();
  v10 = swift_allocError(&type metadata for BeaconSharingFlowError, v9, 0, 0);
  *v11 = 1;
  swift_willThrow(v10);
  swift_errorRelease(v1);
  v12 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013D924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 192) + *(int *)(v0 + 448);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 368) = v8;
  v8(v3, v7, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_101059A90, v11 + 8, v9 | 7);
  *(_QWORD *)(v0 + 376) = v12;
  *(_QWORD *)(v12 + 16) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v10, v3, v5);
  *(_QWORD *)(v12 + v11) = v1;
  v13 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 384) = v14;
  v15 = sub_10001A9A8(&qword_1010EE100);
  *v14 = v0;
  v14[1] = sub_10013DA48;
  return unsafeBlocking<A>(_:)(v0 + 112, sub_1000D82C0, v12, v15);
}

uint64_t sub_10013DA48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_release();
  return swift_task_switch(sub_10013DAA8, v1, 0);
}

uint64_t sub_10013DAA8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[26];
  swift_bridgeObjectRelease();
  v0[49] = v0[14];
  return swift_task_switch(sub_10013DAF0, v1, 0);
}

uint64_t sub_10013DAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(_QWORD *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, char, uint64_t);
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 272) + 80);
    sub_10005972C(v1 + ((v3 + 32) & ~v3), *(_QWORD *)(v0 + 296), type metadata accessor for OwnerSharingCircle);
    v4 = *(_QWORD *)(v0 + 392);
    if (v2 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10005972C(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 288), type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRetain(v4);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.error.getter(v13);
      v15 = os_log_type_enabled(v13, v14);
      v16 = *(_QWORD *)(v0 + 288);
      if (v15)
      {
        v29 = *(_QWORD *)(v0 + 216);
        v17 = swift_slowAlloc(32, -1);
        v30 = swift_slowAlloc(32, -1);
        v32 = v30;
        *(_DWORD *)v17 = 141558531;
        *(_QWORD *)(v0 + 152) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v17 + 4, v17 + 12);
        *(_WORD *)(v17 + 12) = 2081;
        v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v19 = dispatch thunk of CustomStringConvertible.description.getter(v29, v18);
        *(_QWORD *)(v0 + 160) = sub_100016940(v19, v20, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v17 + 14, v17 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v16, type metadata accessor for OwnerSharingCircle);
        *(_WORD *)(v17 + 22) = 2048;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 168) = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v17 + 24, v17 + 32);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Multiple UT owner circles found for beacon: %{private,mask.hash}s,\ncount: %ld.", (uint8_t *)v17, 0x20u);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1000126B0(v16, type metadata accessor for OwnerSharingCircle);
        swift_bridgeObjectRelease();
      }

    }
    v21 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 368);
    v22 = *(_QWORD *)(v0 + 216);
    v23 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 208) + 120;
    v25 = *(_QWORD *)(v0 + 296) + *(int *)(*(_QWORD *)(v0 + 264) + 20);
    *(_QWORD *)(v0 + 40) = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
    *(_QWORD *)(v0 + 48) = sub_100006204(&qword_1010EFD28, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t)&unk_100E38DB8);
    *(_QWORD *)(v0 + 56) = sub_100006204(&qword_1010EFD30, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t)&unk_100E38E58);
    v26 = sub_100018F08((_QWORD *)(v0 + 16));
    v21(v26, v25, v22);
    v27 = v23 + *(int *)(type metadata accessor for OwnerPeerTrust(0) + 28);
    v31 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101120698 + dword_101120698);
    v28 = (_QWORD *)swift_task_alloc(unk_10112069C);
    *(_QWORD *)(v0 + 400) = v28;
    *v28 = v0;
    v28[1] = sub_10013DEAC;
    return v31(v24, v0 + 16, 4, v27);
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 288);
    v9 = *(_QWORD *)(v0 + 248);
    v8 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10013DEAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 400);
  *(_QWORD *)(*v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = sub_10013DFB0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 208);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_10013DF20;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10013DF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000126B0(*(_QWORD *)(v0 + 296), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013DFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 408);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 408);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 128, v0 + 64);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    *(_QWORD *)(v0 + 144) = sub_100016940(v8, v9, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share request decline, message sending error %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 408);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v11 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 368);
  v12 = *(char **)(v0 + 280);
  v13 = *(int **)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = v16 + *(int *)(v0 + 448);
  v11(&v12[v13[5]], v16 + v13[5], v15);
  v11(&v12[v13[6]], v17, v15);
  v18 = *(_BYTE *)(v16 + v13[7]);
  v19 = *(_QWORD *)(v16 + v13[8]);
  v20 = *(_BYTE *)(v16 + v13[9]);
  *(_OWORD *)v12 = xmmword_100E22FC0;
  v12[v13[7]] = v18;
  *(_QWORD *)&v12[v13[8]] = v19;
  v12[v13[9]] = v20;
  v21 = swift_task_alloc(32);
  *(_QWORD *)(v21 + 16) = v12;
  swift_bridgeObjectRetain(v19);
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100142B94, v14);
  v22 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(v21);
  return swift_task_switch(sub_10013E2C4, v22, 0);
}

uint64_t sub_10013E2C4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 416) = *(_QWORD *)(*(_QWORD *)(v0 + 320) + 128);
  return swift_task_switch(sub_10013E2E4, 0, 0);
}

uint64_t sub_10013E2E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[52];
  v2 = v0[31];
  v3 = swift_task_alloc(32);
  v0[53] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[54] = v4;
  *v4 = v0;
  v4[1] = sub_10013E388;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10013E388()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 432);
  *(_QWORD *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013E504;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 424));
    v4 = sub_10013E3F4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013E3F4()
{
  uint64_t v0;

  return swift_task_switch(sub_10013E408, *(_QWORD *)(v0 + 208), 0);
}

uint64_t sub_10013E408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = sub_100067D98();
  v6 = swift_allocError(&type metadata for BeaconSharingFlowError, v5, 0, 0);
  *v7 = 3;
  swift_willThrow(v6);
  swift_errorRelease(v1);
  sub_100004048(v4, &qword_1010EC870);
  sub_1000126B0(v2, type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v3, type metadata accessor for OwnerSharingCircle);
  v8 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013E504()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  return swift_task_switch(sub_10013E544, v1, 0);
}

uint64_t sub_10013E544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 248);
  swift_errorRelease(*(_QWORD *)(v0 + 408));
  sub_100004048(v3, &qword_1010EC870);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v2, type metadata accessor for OwnerSharingCircle);
  v4 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013E610(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_10001A9A8(&qword_1010EC838);
  v2[9] = v3;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE290);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnerPeerTrust(0);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MemberSharingCircle(0);
  v2[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  v2[20] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[21] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v2[22] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v14);
  v2[24] = swift_task_alloc(v14);
  return swift_task_switch(sub_10013E770, v1, 0);
}

uint64_t sub_10013E770()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[7];
  v2 = v0[24];
  v3 = v0[20];
  v4 = v0[21];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[25] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[24];
  v12 = v0[20];
  if (v10)
  {
    v19 = v0[21];
    v13 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v13 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[6] = sub_100016940(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Force decline %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[21] + 8))(v0[24], v0[20]);
  }

  v17 = *(_QWORD *)(v0[8] + 112);
  v0[26] = v17;
  return swift_task_switch(sub_10013E9A4, v17, 0);
}

uint64_t sub_10013E9A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 216) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_10013EA20;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001ED30, *(_QWORD *)(v0 + 208), v3);
}

uint64_t sub_10013EA20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release();
  return swift_task_switch(sub_10013EA7C, v1, 0);
}

uint64_t sub_10013EA7C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[28] = v0[2];
  return swift_task_switch(sub_10013EA98, v1, 0);
}

uint64_t sub_10013EA98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;

  v1 = v0[28];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = v0[16];
    v3 = v0[17];
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = v0[18];
      v8 = v0[7];
      sub_10005972C(v5, v7, type metadata accessor for MemberSharingCircle);
      if ((static UUID.== infix(_:_:)(v7 + *(int *)(v4 + 28), v8) & 1) != 0)
        break;
      sub_1000126B0(v0[18], type metadata accessor for MemberSharingCircle);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v10 = v0[18];
    v11 = v0[15];
    swift_bridgeObjectRelease();
    sub_1000126EC(v10, v11, type metadata accessor for MemberSharingCircle);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  v12 = v0[16];
  v13 = v0[17];
  v14 = v0[15];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v14, v9, 1, v12);
  swift_bridgeObjectRelease();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12);
  v16 = v0[15];
  if (v15 == 1)
  {
    v17 = v0[26];
    sub_100004048(v16, (uint64_t *)&unk_101111440);
    return swift_task_switch(sub_10013EC4C, v17, 0);
  }
  else
  {
    sub_1000126EC(v16, v0[19], type metadata accessor for MemberSharingCircle);
    v19 = (_QWORD *)swift_task_alloc(dword_1010EFD24);
    v0[29] = v19;
    *v19 = v0;
    v19[1] = sub_100139B24;
    return sub_10013A214(v0[19], 0, 1);
  }
}

uint64_t sub_10013EC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 200))(v2, *(_QWORD *)(v0 + 56), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101059950, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 256) = v10;
  *v10 = v0;
  v10[1] = sub_10013ED20;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 80), sub_10014297C, v8, *(_QWORD *)(v0 + 72));
}

uint64_t sub_10013ED20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_10013ED80, v1, 0);
}

uint64_t sub_10013ED80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = sub_10001A9A8(&qword_1010EC848);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010EC838);
    type metadata accessor for SPBeaconSharingError(0);
    v4 = v3;
    *(_QWORD *)(v0 + 32) = 5;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v7 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 24), v0 + 32, v5, v4, v6);
    swift_willThrow(v7);
    v8 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 96);
    v21 = v1 + *(int *)(v2 + 48);
    v22 = v19 + *(int *)(v20 + 48);
    sub_1000126EC(v1, v19, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v21, v22, type metadata accessor for OwnerSharingCircle);
    v23 = v19 + *(int *)(v20 + 48);
    sub_1000126EC(v19, v17, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v23, v18, type metadata accessor for OwnerSharingCircle);
    v24 = (_QWORD *)swift_task_alloc(dword_1010EFD1C);
    *(_QWORD *)(v0 + 264) = v24;
    *v24 = v0;
    v24[1] = sub_10013EF90;
    return sub_10013EFE8(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  }
}

uint64_t sub_10013EF90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  return swift_task_switch(sub_100139FE0, v1, 0);
}

uint64_t sub_10013EFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[22] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[23] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[24] = v6;
  v3[25] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EC870);
  v3[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerSharingCircle(0);
  v3[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[28] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v10);
  v3[30] = swift_task_alloc(v10);
  v3[31] = swift_task_alloc(v10);
  return swift_task_switch(sub_10013F0B8, v2, 0);
}

uint64_t sub_10013F0B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[19];
  v2 = v0[31];
  v3 = type metadata accessor for Logger(0);
  v0[32] = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v1, v2, type metadata accessor for OwnerSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[31];
  if (v7)
  {
    v20 = v0[22];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[17] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v20, v11);
    v0[18] = sub_100016940(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Data update on share request force decline. Delete %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
  }

  v14 = v0[26];
  v15 = v0[19];
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = v15;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100142B0C, v14);
  v17 = v0[21];
  swift_task_dealloc(v16);
  v18 = *(_QWORD *)(v17 + 112);
  v0[33] = v18;
  return swift_task_switch(sub_10013F4CC, v18, 0);
}

uint64_t sub_10013F4CC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 128);
  return swift_task_switch(sub_10013F4EC, 0, 0);
}

uint64_t sub_10013F4EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[34];
  v2 = v0[26];
  v3 = swift_task_alloc(32);
  v0[35] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[36] = v4;
  *v4 = v0;
  v4[1] = sub_10013F590;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10013F590()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 288);
  *(_QWORD *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013F67C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 280));
    v4 = sub_10013F5FC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013F5FC()
{
  uint64_t v0;

  return swift_task_switch(sub_10013F610, *(_QWORD *)(v0 + 168), 0);
}

uint64_t sub_10013F610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100004048(*(_QWORD *)(v0 + 208), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 168) + 112);
  *(_QWORD *)(v0 + 304) = v2;
  *(_DWORD *)(v0 + 360) = *(_DWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 312) = sub_1003BA248((uint64_t)&off_101049110);
  return swift_task_switch(sub_10013F8A8, v2, 0);
}

uint64_t sub_10013F67C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  return swift_task_switch(sub_10013F6BC, v1, 0);
}

uint64_t sub_10013F6BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_100004048(*(_QWORD *)(v0 + 208), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 296);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 112, v0 + 64);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    *(_QWORD *)(v0 + 128) = sub_100016940(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Can't apply cloud changes %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(*(_QWORD *)(v0 + 168) + 112);
  *(_QWORD *)(v0 + 304) = v10;
  *(_DWORD *)(v0 + 360) = *(_DWORD *)(v9 + 24);
  *(_QWORD *)(v0 + 312) = sub_1003BA248((uint64_t)&off_101049110);
  return swift_task_switch(sub_10013F8A8, v10, 0);
}

uint64_t sub_10013F8A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 152) + *(int *)(v0 + 360);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 320) = v8;
  v8(v3, v7, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_101059A40, v11 + 8, v9 | 7);
  *(_QWORD *)(v0 + 328) = v12;
  *(_QWORD *)(v12 + 16) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v10, v3, v5);
  *(_QWORD *)(v12 + v11) = v1;
  v13 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 336) = v14;
  v15 = sub_10001A9A8(&qword_1010EE100);
  *v14 = v0;
  v14[1] = sub_10013F9C8;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_1000D82C0, v12, v15);
}

uint64_t sub_10013F9C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 304);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  swift_release();
  return swift_task_switch(sub_10013FA28, v1, 0);
}

uint64_t sub_10013FA28()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[21];
  swift_bridgeObjectRelease();
  v0[43] = v0[15];
  return swift_task_switch(sub_10013FA70, v1, 0);
}

uint64_t sub_10013FA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, char, uint64_t);
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 224) + 80);
    sub_10005972C(v1 + ((v3 + 32) & ~v3), *(_QWORD *)(v0 + 240), type metadata accessor for OwnerSharingCircle);
    v4 = *(_QWORD *)(v0 + 344);
    if (v2 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10005972C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 232), type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRetain(v4);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.error.getter(v11);
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(_QWORD *)(v0 + 232);
      if (v13)
      {
        v27 = *(_QWORD *)(v0 + 176);
        v15 = swift_slowAlloc(32, -1);
        v28 = swift_slowAlloc(32, -1);
        v30 = v28;
        *(_DWORD *)v15 = 141558531;
        *(_QWORD *)(v0 + 88) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v15 + 4, v15 + 12);
        *(_WORD *)(v15 + 12) = 2081;
        v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v17 = dispatch thunk of CustomStringConvertible.description.getter(v27, v16);
        *(_QWORD *)(v0 + 96) = sub_100016940(v17, v18, &v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v15 + 14, v15 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v14, type metadata accessor for OwnerSharingCircle);
        *(_WORD *)(v15 + 22) = 2048;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 104) = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v15 + 24, v15 + 32);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Multiple UT owner circles found for beacon: %{private,mask.hash}s,\ncount: %ld.", (uint8_t *)v15, 0x20u);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v15, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1000126B0(v14, type metadata accessor for OwnerSharingCircle);
        swift_bridgeObjectRelease();
      }

    }
    v19 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 320);
    v20 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 168) + 120;
    v23 = *(_QWORD *)(v0 + 240) + *(int *)(*(_QWORD *)(v0 + 216) + 20);
    *(_QWORD *)(v0 + 40) = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
    *(_QWORD *)(v0 + 48) = sub_100006204(&qword_1010EFD28, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t)&unk_100E38DB8);
    *(_QWORD *)(v0 + 56) = sub_100006204(&qword_1010EFD30, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t)&unk_100E38E58);
    v24 = sub_100018F08((_QWORD *)(v0 + 16));
    v19(v24, v23, v20);
    v25 = v21 + *(int *)(type metadata accessor for OwnerPeerTrust(0) + 28);
    v29 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101120698 + dword_101120698);
    v26 = (_QWORD *)swift_task_alloc(unk_10112069C);
    *(_QWORD *)(v0 + 352) = v26;
    *v26 = v0;
    v26[1] = sub_10013FE14;
    return v29(v22, v0 + 16, 4, v25);
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10013FE14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 352));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 168);
    swift_errorRelease(v0);
    v4 = sub_10013FF00;
    v5 = v3;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v4 = sub_10013FE90;
    v5 = v6;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10013FE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 240), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013FF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 240), type metadata accessor for OwnerSharingCircle);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013FF7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1[5] = v0;
  v2 = type metadata accessor for Date(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[9] = swift_task_alloc(v4);
  v1[10] = swift_task_alloc(v4);
  v5 = type metadata accessor for MemberSharingCircle(0);
  v1[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[12] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[13] = swift_task_alloc(v7);
  v1[14] = swift_task_alloc(v7);
  v1[15] = swift_task_alloc(v7);
  v1[16] = swift_task_alloc(v7);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v1[17] = v8;
  *v8 = v1;
  v8[1] = sub_100140094;
  return unsafeBlocking<A>(_:)(v1 + 2, sub_100140B70, 0, &type metadata for Double);
}

uint64_t sub_100140094()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_1001400EC, v1, 0);
}

uint64_t sub_1001400EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v0[18] = v0[2];
  v2 = *(_QWORD *)(v1 + 112);
  v0[19] = v2;
  return swift_task_switch(sub_100140110, v2, 0);
}

uint64_t sub_100140110()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 160) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_10014018C;
  return unsafeBlocking<A>(_:)(v0 + 24, sub_10001ED30, *(_QWORD *)(v0 + 152), v3);
}

uint64_t sub_10014018C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  swift_release();
  return swift_task_switch(sub_1001401E8, v1, 0);
}

uint64_t sub_1001401E8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[21] = v0[3];
  return swift_task_switch(sub_100140204, v1, 0);
}

uint64_t sub_100140204()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = _swiftEmptyArrayStorage;
  v56 = *(_QWORD *)(v1 + 16);
  if (!v56)
  {
LABEL_22:
    *(_QWORD *)(v0 + 176) = v2;
    swift_bridgeObjectRelease();
    if (qword_1010E9938 != -1)
      goto LABEL_30;
    goto LABEL_23;
  }
  v3 = 0;
  v4 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD **)(v0 + 96);
  v51 = _swiftEmptyArrayStorage;
  v52 = v2;
  v53 = *(_QWORD *)(v0 + 56);
  v54 = *(_QWORD *)(v0 + 168);
  v55 = v4;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v5 = *(_QWORD *)(v0 + 128);
    v6 = (*((unsigned __int8 *)v2 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 80);
    v7 = v2[9];
    sub_10005972C(*(_QWORD *)(v0 + 168) + v6 + v7 * v3, v5, type metadata accessor for MemberSharingCircle);
    v8 = *(unsigned __int8 *)(v5 + *(int *)(v4 + 40));
    v9 = v8 > 4;
    v10 = (1 << v8) & 0x16;
    if (v9 || v10 == 0)
    {
      v12 = *(_QWORD *)(v0 + 128);
      v13 = objc_autoreleasePoolPush();
      sub_100CA662C(v12);
      v15 = v14;
      objc_autoreleasePoolPop(v13);
      v16 = objc_msgSend(v15, "creationDate");
      if (v16)
      {
        v17 = v16;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

        v18 = 0;
      }
      else
      {
        v18 = 1;
      }
      v20 = *(_QWORD *)(v0 + 72);
      v19 = *(_QWORD *)(v0 + 80);
      v21 = *(_QWORD *)(v0 + 48);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v20, v18, 1, v21);
      sub_100005CF0(v20, v19, (uint64_t *)&unk_1010EA690);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v19, 1, v21))
      {
        sub_100004048(*(_QWORD *)(v0 + 80), (uint64_t *)&unk_1010EA690);

        v1 = v54;
        v4 = v55;
        v2 = v52;
      }
      else
      {
        v22 = *(double *)(v0 + 144);
        v23 = *(_QWORD *)(v0 + 80);
        v24 = *(_QWORD *)(v0 + 64);
        v25 = *(_QWORD *)(v0 + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v24, v23, v25);
        v26 = sub_100004048(v23, (uint64_t *)&unk_1010EA690);
        v27 = Date.timeIntervalSinceNow.getter(v26);
        (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v24, v25);

        v1 = v54;
        v4 = v55;
        v2 = v52;
        if (v22 <= fabs(v27))
        {
          sub_1000126EC(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
          v28 = v51;
          if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          {
            sub_10009A4D0(0, v51[2] + 1, 1);
            v28 = _swiftEmptyArrayStorage;
          }
          v30 = v28[2];
          v29 = v28[3];
          if (v30 >= v29 >> 1)
          {
            sub_10009A4D0(v29 > 1, v30 + 1, 1);
            v28 = _swiftEmptyArrayStorage;
          }
          v31 = *(_QWORD *)(v0 + 120);
          v28[2] = v30 + 1;
          v51 = v28;
          sub_1000126EC(v31, (uint64_t)v28 + v6 + v30 * v7, type metadata accessor for MemberSharingCircle);
          v4 = v55;
          goto LABEL_9;
        }
      }
    }
    sub_1000126B0(*(_QWORD *)(v0 + 128), type metadata accessor for MemberSharingCircle);
LABEL_9:
    if (v56 == ++v3)
    {
      v2 = v51;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_30:
  swift_once(&qword_1010E9938, sub_1000AFBB0);
LABEL_23:
  v32 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 184) = sub_10001A9E8(v32, (uint64_t)qword_1011B6748);
  v33 = swift_retain();
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v36 = 134217984;
    *(_QWORD *)(v0 + 32) = v2[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v36 + 4, v36 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Found %ld of expired member circles.", v36, 0xCu);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    swift_release();
  }

  v37 = v2[2];
  *(_QWORD *)(v0 + 192) = v37;
  if (v37)
  {
    v39 = *(_QWORD *)(v0 + 88);
    v38 = *(_QWORD *)(v0 + 96);
    v40 = *(_DWORD *)(v38 + 80);
    *(_DWORD *)(v0 + 232) = v40;
    *(_QWORD *)(v0 + 200) = *(_QWORD *)(v38 + 72);
    *(_QWORD *)(v0 + 208) = 0;
    v41 = *(_QWORD *)(v0 + 112);
    sub_10005972C(*(_QWORD *)(v0 + 176) + ((v40 + 32) & ~(unint64_t)v40), v41, type metadata accessor for MemberSharingCircle);
    v42 = v41 + *(int *)(v39 + 28);
    v43 = (_QWORD *)swift_task_alloc(dword_1010EFC3C);
    *(_QWORD *)(v0 + 216) = v43;
    *v43 = v0;
    v43[1] = sub_10014073C;
    return sub_1001394E4(v42, 0);
  }
  else
  {
    swift_release();
    v45 = *(_QWORD *)(v0 + 120);
    v47 = *(_QWORD *)(v0 + 104);
    v46 = *(_QWORD *)(v0 + 112);
    v49 = *(_QWORD *)(v0 + 72);
    v48 = *(_QWORD *)(v0 + 80);
    v50 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10014073C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1001408CC;
  else
    v4 = sub_1001407A0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_1001407A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
  v1 = *(_QWORD *)(v0 + 208) + 1;
  if (v1 == *(_QWORD *)(v0 + 192))
  {
    swift_release();
    v2 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 208) = v1;
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    sub_10005972C(*(_QWORD *)(v0 + 176)+ ((*(unsigned __int8 *)(v0 + 232) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 232))+ *(_QWORD *)(v0 + 200) * v1, v9, type metadata accessor for MemberSharingCircle);
    v11 = v9 + *(int *)(v10 + 28);
    v12 = (_QWORD *)swift_task_alloc(dword_1010EFC3C);
    *(_QWORD *)(v0 + 216) = v12;
    *v12 = v0;
    v12[1] = sub_10014073C;
    return sub_1001394E4(v11, 0);
  }
}

uint64_t sub_1001408CC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v1 = sub_10005972C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104), type metadata accessor for MemberSharingCircle);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter(v2);
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  if (v4)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v26 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    *(_QWORD *)(v8 + 4) = sub_100016940(v12, v13, &v26);
    swift_bridgeObjectRelease();
    sub_1000126B0(v7, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to decline expired share with identifier: %s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_errorRelease(v5);

  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 224));

    sub_1000126B0(v7, type metadata accessor for MemberSharingCircle);
  }
  sub_1000126B0(v6, type metadata accessor for MemberSharingCircle);
  v14 = *(_QWORD *)(v0 + 208) + 1;
  if (v14 == *(_QWORD *)(v0 + 192))
  {
    swift_release();
    v15 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 208) = v14;
    v22 = *(_QWORD *)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 88);
    sub_10005972C(*(_QWORD *)(v0 + 176)+ ((*(unsigned __int8 *)(v0 + 232) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 232))+ *(_QWORD *)(v0 + 200) * v14, v22, type metadata accessor for MemberSharingCircle);
    v24 = v22 + *(int *)(v23 + 28);
    v25 = (_QWORD *)swift_task_alloc(dword_1010EFC3C);
    *(_QWORD *)(v0 + 216) = v25;
    *v25 = v0;
    v25[1] = sub_10014073C;
    return sub_1001394E4(v24, 0);
  }
}

uint64_t sub_100140B70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1BB24(v5);
  v3 = v2;
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_100140C10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[5] = v0;
  v2 = type metadata accessor for MemberSharingCircle(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[8] = swift_task_alloc(v4);
  v1[9] = swift_task_alloc(v4);
  return swift_task_switch(sub_100140C80, v0, 0);
}

uint64_t sub_100140C80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  *(_QWORD *)(v0 + 80) = v1;
  return swift_task_switch(sub_100140C9C, v1, 0);
}

uint64_t sub_100140C9C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[11] = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  v0[12] = v3;
  *v2 = v0;
  v2[1] = sub_100140D1C;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_10001ED30, v0[10], v3);
}

uint64_t sub_100140D1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release();
  return swift_task_switch(sub_100140D78, v1, 0);
}

uint64_t sub_100140D78()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;

  v1 = v0[2];
  v0[13] = v1;
  v0[3] = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[14] = v2;
  v3 = sub_100141980();
  *v2 = v0;
  v2[1] = sub_100140DEC;
  return Sequence.asyncFilter(_:)(&unk_1010EFD08, 0, v0[12], v3);
}

uint64_t sub_100140DEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100140E54, v3, 0);
}

uint64_t sub_100140E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 128) = sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 120);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found %ld of expired tentatively revoked member circles.", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v9 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v0 + 136) = v10;
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v13 = *(_DWORD *)(v11 + 80);
    *(_DWORD *)(v0 + 176) = v13;
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v11 + 72);
    *(_QWORD *)(v0 + 152) = 0;
    v14 = *(_QWORD *)(v0 + 72);
    sub_10005972C(v9 + ((v13 + 32) & ~(unint64_t)v13), v14, type metadata accessor for MemberSharingCircle);
    v15 = v14 + *(int *)(v12 + 28);
    v16 = (_QWORD *)swift_task_alloc(dword_1010EFC3C);
    *(_QWORD *)(v0 + 160) = v16;
    *v16 = v0;
    v16[1] = sub_100141038;
    return sub_1001394E4(v15, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100141038()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10014117C;
  else
    v4 = sub_10014109C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_10014109C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_1000126B0(*(_QWORD *)(v0 + 72), type metadata accessor for MemberSharingCircle);
  v1 = *(_QWORD *)(v0 + 152) + 1;
  if (v1 == *(_QWORD *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 152) = v1;
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 48);
    sub_10005972C(*(_QWORD *)(v0 + 120)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ *(_QWORD *)(v0 + 144) * v1, v4, type metadata accessor for MemberSharingCircle);
    v6 = v4 + *(int *)(v5 + 28);
    v7 = (_QWORD *)swift_task_alloc(dword_1010EFC3C);
    *(_QWORD *)(v0 + 160) = v7;
    *v7 = v0;
    v7[1] = sub_100141038;
    return sub_1001394E4(v6, 0);
  }
}

uint64_t sub_10014117C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v1 = sub_10005972C(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 64), type metadata accessor for MemberSharingCircle);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter(v2);
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  if (v4)
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    *(_QWORD *)(v8 + 4) = sub_100016940(v12, v13, &v21);
    swift_bridgeObjectRelease();
    sub_1000126B0(v7, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to decline expired tentatively revoked share with identifier: %s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_errorRelease(v5);

  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 168));

    sub_1000126B0(v7, type metadata accessor for MemberSharingCircle);
  }
  sub_1000126B0(v6, type metadata accessor for MemberSharingCircle);
  v14 = *(_QWORD *)(v0 + 152) + 1;
  if (v14 == *(_QWORD *)(v0 + 136))
  {
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 152) = v14;
    v17 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 48);
    sub_10005972C(*(_QWORD *)(v0 + 120)+ ((*(unsigned __int8 *)(v0 + 176) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 176))+ *(_QWORD *)(v0 + 144) * v14, v17, type metadata accessor for MemberSharingCircle);
    v19 = v17 + *(int *)(v18 + 28);
    v20 = (_QWORD *)swift_task_alloc(dword_1010EFC3C);
    *(_QWORD *)(v0 + 160) = v20;
    *v20 = v0;
    v20[1] = sub_100141038;
    return sub_1001394E4(v19, 0);
  }
}

uint64_t sub_1001413EC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100141404, 0, 0);
}

uint64_t sub_100141404()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v1 = qword_1011B7160;
  v0[3] = qword_1011B7160;
  v2 = unk_1010EFD14;
  v5 = (char *)&dword_1010EFD10 + dword_1010EFD10;
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[4] = v3;
  *v3 = v0;
  v3[1] = sub_1001414AC;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[2], v1);
}

uint64_t sub_1001414AC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 24);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));
  swift_release(v3);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_100141508()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 120));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 160));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareDeclineUseCase()
{
  return objc_opt_self(_TtC12searchpartyd19ShareDeclineUseCase);
}

void sub_10014155C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v55 = a2;
  v6 = type metadata accessor for BeaconNamingRecord(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v54 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)sub_10001A9A8((uint64_t *)&unk_101109120);
  v9 = __chkstk_darwin(v8);
  v58 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - v11;
  v13 = type metadata accessor for SharedBeaconRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AE0164(a3);
  if (!v3)
  {
    v44 = v16;
    v51 = v8;
    v52 = a1;
    v17 = v8[12];
    v48 = &v12[v17];
    v49 = 0;
    v18 = v8[16];
    v19 = (uint64_t)&v12[v18];
    v20 = v8[20];
    v21 = v8[24];
    v22 = a3 + v17;
    v23 = a3 + v18;
    sub_10005972C(a3, (uint64_t)v12, type metadata accessor for MemberSharingCircle);
    v45 = v22;
    v24 = v22;
    v25 = (uint64_t)v48;
    sub_10000F9B8(v24, (uint64_t)v48, (uint64_t *)&unk_1010EE180);
    v46 = v23;
    v50 = v19;
    sub_10000F9B8(v23, v19, (uint64_t *)&unk_101105880);
    v26 = *(_QWORD *)(a3 + v20);
    v53 = v20;
    *(_QWORD *)&v12[v20] = v26;
    v27 = *(_QWORD *)(a3 + v21);
    v47 = v21;
    *(_QWORD *)&v12[v21] = v27;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v25, 1, v13) == 1)
    {
      sub_100004048(v50, (uint64_t *)&unk_101105880);
      sub_100004048(v25, (uint64_t *)&unk_1010EE180);
      sub_1000126B0((uint64_t)v12, type metadata accessor for MemberSharingCircle);
      v28 = v51;
      v29 = v49;
    }
    else
    {
      v30 = (uint64_t)v44;
      sub_1000126EC(v25, (uint64_t)v44, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v50, (uint64_t *)&unk_101105880);
      sub_1000126B0((uint64_t)v12, type metadata accessor for MemberSharingCircle);
      v31 = v49;
      sub_100ADFDFC(v30);
      v29 = v31;
      sub_1000126B0(v30, type metadata accessor for SharedBeaconRecord);
      v28 = v51;
      if (v31)
        return;
    }
    v32 = v58;
    v33 = v58 + v28[12];
    v34 = v58 + v28[16];
    v35 = v28[20];
    v36 = v28[24];
    sub_10005972C(a3, v58, type metadata accessor for MemberSharingCircle);
    sub_10000F9B8(v45, v33, (uint64_t *)&unk_1010EE180);
    sub_10000F9B8(v46, v34, (uint64_t *)&unk_101105880);
    *(_QWORD *)(v32 + v35) = *(_QWORD *)(a3 + v53);
    *(_QWORD *)(v32 + v36) = *(_QWORD *)(a3 + v47);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v34, 1, v57) == 1)
    {
      sub_100004048(v34, (uint64_t *)&unk_101105880);
      sub_100004048(v33, (uint64_t *)&unk_1010EE180);
      sub_1000126B0(v32, type metadata accessor for MemberSharingCircle);
    }
    else
    {
      v37 = v34;
      v38 = v54;
      sub_1000126EC(v37, v54, type metadata accessor for BeaconNamingRecord);
      sub_100004048(v33, (uint64_t *)&unk_1010EE180);
      sub_1000126B0(v32, type metadata accessor for MemberSharingCircle);
      sub_100ADFAB4(v38);
      sub_1000126B0(v38, type metadata accessor for BeaconNamingRecord);
      if (v29)
        return;
    }
    sub_1000D7D58(*(_QWORD *)(a3 + v53));
    if (!v29)
    {
      v39 = *(_QWORD *)(a3 + v47);
      v40 = *(_QWORD *)(v39 + 16);
      if (v40)
      {
        v41 = *(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8);
        v42 = v39 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
        v43 = *(_QWORD *)(v41 + 72);
        swift_bridgeObjectRetain(v39);
        do
        {
          sub_100ADF3E4(v42);
          v42 += v43;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease();
      }
    }
  }
}

unint64_t sub_100141980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EC8B0;
  if (!qword_1010EC8B0)
  {
    v1 = sub_10001F784(&qword_1010EC840);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_1010EC8B0);
  }
  return result;
}

uint64_t sub_1001419CC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v2[23] = a1;
  v5 = type metadata accessor for MemberSharingCircle(0);
  v2[24] = v5;
  v2[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v2[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v2[27] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[28] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v9);
  v2[30] = swift_task_alloc(v9);
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v2[33] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[34] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v2[35] = v12;
  v2[36] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[37] = v13;
  v2[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SharedBeaconRecord(0);
  v2[39] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[40] = v15;
  v2[41] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[5] = v4;
  v2[6] = &off_101059408;
  v2[2] = a2;
  swift_retain();
  return swift_task_switch(sub_100141B40, 0, 0);
}

uint64_t sub_100141B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (__cdecl *v14)();

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(int *)(*(_QWORD *)(v0 + 192) + 40);
  *(_DWORD *)(v0 + 368) = v2;
  if (*(_BYTE *)(v1 + v2) == 4)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 120))
    {
      sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v14 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v4 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 336) = v4;
      *v4 = v0;
      v4[1] = sub_100141CEC;
      return v14();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 328);
    v6 = *(_QWORD *)(v0 + 304);
    v7 = *(_QWORD *)(v0 + 288);
    v9 = *(_QWORD *)(v0 + 248);
    v8 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 208);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  return result;
}

uint64_t sub_100141CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100141D48, 0, 0);
}

uint64_t sub_100141D48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59[2];

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 344))
  {
    v2 = *(_QWORD *)(v0 + 192);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 372) = *(_DWORD *)(v2 + 24);
    return swift_task_switch(sub_1001422A0, *(_QWORD *)(v0 + 344), 0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v4 = *(_QWORD *)(v0 + 184);
  if (*(_BYTE *)(v4 + *(int *)(v0 + 368)) == 4)
  {
    v5 = *(_QWORD *)(v0 + 216);
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v0 + 192);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    sub_10012D4EC(v4 + *(int *)(v8 + 24), v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 208), (uint64_t *)&unk_1010EA690);
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 248);
      v10 = *(_QWORD *)(v0 + 256);
      v11 = *(_QWORD *)(v0 + 216);
      v12 = *(_QWORD *)(v0 + 224);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 32))(v10, *(_QWORD *)(v0 + 208), v11);
      static Date.trustedNow.getter(v9);
      v13 = Date.timeIntervalSince(_:)(v10);
      v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v14(v9, v11);
      if (qword_1010EA3F8 != -1)
        swift_once(&qword_1010EA3F8, sub_100C2EDC0);
      if (*(double *)&qword_10111A1F0 <= v13)
      {
        v24 = *(_QWORD *)(v0 + 184);
        v25 = objc_autoreleasePoolPush();
        sub_10084EE10(v24);
        objc_autoreleasePoolPop(v25);
        v26 = *(_QWORD *)(v0 + 240);
        v27 = *(_QWORD *)(v0 + 216);
        v28 = static Date.> infix(_:_:)(*(_QWORD *)(v0 + 256), v26);
        v14(v26, v27);
        if ((v28 & 1) != 0)
        {
          if (qword_1010E9938 != -1)
            swift_once(&qword_1010E9938, sub_1000AFBB0);
          v29 = *(_QWORD *)(v0 + 256);
          v31 = *(_QWORD *)(v0 + 224);
          v30 = *(_QWORD *)(v0 + 232);
          v32 = *(_QWORD *)(v0 + 216);
          v33 = *(_QWORD *)(v0 + 200);
          v34 = *(_QWORD *)(v0 + 184);
          v35 = type metadata accessor for Logger(0);
          sub_10001A9E8(v35, (uint64_t)qword_1011B6748);
          sub_10005972C(v34, v33, type metadata accessor for MemberSharingCircle);
          v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v29, v32);
          v37 = Logger.logObject.getter(v36);
          v38 = static os_log_type_t.default.getter(v37);
          if (os_log_type_enabled(v37, v38))
          {
            v53 = *(_QWORD *)(v0 + 264);
            v58 = *(_QWORD *)(v0 + 256);
            v54 = *(_QWORD *)(v0 + 232);
            v55 = *(_QWORD *)(v0 + 216);
            v39 = *(_QWORD *)(v0 + 200);
            v40 = swift_slowAlloc(32, -1);
            v56 = swift_slowAlloc(64, -1);
            v59[0] = v56;
            *(_DWORD *)v40 = 141558531;
            *(_QWORD *)(v0 + 168) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v40 + 4, v40 + 12);
            *(_WORD *)(v40 + 12) = 2081;
            v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v42 = dispatch thunk of CustomStringConvertible.description.getter(v53, v41);
            *(_QWORD *)(v0 + 160) = sub_100016940(v42, v43, v59);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v40 + 14, v40 + 22);
            swift_bridgeObjectRelease();
            sub_1000126B0(v39, type metadata accessor for MemberSharingCircle);
            *(_WORD *)(v40 + 22) = 2082;
            v44 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v45 = dispatch thunk of CustomStringConvertible.description.getter(v55, v44);
            *(_QWORD *)(v0 + 176) = sub_100016940(v45, v46, v59);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v40 + 24, v40 + 32);
            swift_bridgeObjectRelease();
            v14(v54, v55);
            _os_log_impl((void *)&_mh_execute_header, v37, v38, "    Delete share %{private,mask.hash}s,\n    tentativelyRevoked since %{public}s.", (uint8_t *)v40, 0x20u);
            swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v56, -1, -1);
            swift_slowDealloc(v40, -1, -1);

            v47 = v58;
            v48 = v55;
          }
          else
          {
            v49 = *(_QWORD *)(v0 + 256);
            v50 = *(_QWORD *)(v0 + 232);
            v51 = *(_QWORD *)(v0 + 216);
            v52 = *(_QWORD *)(v0 + 200);

            v14(v50, v51);
            sub_1000126B0(v52, type metadata accessor for MemberSharingCircle);
            v47 = v49;
            v48 = v51;
          }
          v14(v47, v48);
          v57 = 1;
          goto LABEL_11;
        }
      }
      v14(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 216));
    }
  }
  v57 = 0;
LABEL_11:
  v15 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 304);
  v17 = *(_QWORD *)(v0 + 288);
  v19 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 240);
  v23 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v57);
}

uint64_t sub_1001422A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 184) + *(int *)(v0 + 372), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101059928, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 352) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 360) = v10;
  *v10 = v0;
  v10[1] = sub_100142380;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 304), sub_100142964, v8, *(_QWORD *)(v0 + 296));
}

uint64_t sub_100142380()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_release();
  return swift_task_switch(sub_1001423DC, 0, 0);
}

uint64_t sub_1001423DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60[2];

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 304);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 304), (uint64_t *)&unk_1010EE180);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 328);
    v5 = *(_QWORD *)(v0 + 312);
    sub_1000126EC(*(_QWORD *)(v0 + 304), v4, type metadata accessor for SharedBeaconRecord);
    LODWORD(v5) = *(unsigned __int8 *)(v4 + *(int *)(v5 + 64));
    sub_1000126B0(v4, type metadata accessor for SharedBeaconRecord);
    if ((_DWORD)v5 == 4)
      goto LABEL_4;
  }
  v6 = *(_QWORD *)(v0 + 184);
  if (*(_BYTE *)(v6 + *(int *)(v0 + 368)) != 4)
  {
LABEL_12:
    v58 = 0;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 192);
  sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  sub_10012D4EC(v6 + *(int *)(v10 + 24), v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 208), (uint64_t *)&unk_1010EA690);
    goto LABEL_12;
  }
  v11 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 224);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 32))(v12, *(_QWORD *)(v0 + 208), v13);
  static Date.trustedNow.getter(v11);
  v15 = Date.timeIntervalSince(_:)(v12);
  v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v16(v11, v13);
  if (qword_1010EA3F8 != -1)
    swift_once(&qword_1010EA3F8, sub_100C2EDC0);
  if (*(double *)&qword_10111A1F0 > v15)
    goto LABEL_11;
  v27 = *(_QWORD *)(v0 + 184);
  v28 = objc_autoreleasePoolPush();
  sub_10084EE10(v27);
  objc_autoreleasePoolPop(v28);
  v29 = *(_QWORD *)(v0 + 240);
  v30 = *(_QWORD *)(v0 + 216);
  v31 = static Date.> infix(_:_:)(*(_QWORD *)(v0 + 256), v29);
  v16(v29, v30);
  if ((v31 & 1) == 0)
  {
LABEL_11:
    v16(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 216));
    goto LABEL_12;
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v32 = *(_QWORD *)(v0 + 256);
  v34 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 232);
  v35 = *(_QWORD *)(v0 + 216);
  v36 = *(_QWORD *)(v0 + 200);
  v37 = *(_QWORD *)(v0 + 184);
  v38 = type metadata accessor for Logger(0);
  sub_10001A9E8(v38, (uint64_t)qword_1011B6748);
  sub_10005972C(v37, v36, type metadata accessor for MemberSharingCircle);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v32, v35);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v54 = *(_QWORD *)(v0 + 264);
    v59 = *(_QWORD *)(v0 + 256);
    v55 = *(_QWORD *)(v0 + 232);
    v56 = *(_QWORD *)(v0 + 216);
    v42 = *(_QWORD *)(v0 + 200);
    v43 = swift_slowAlloc(32, -1);
    v57 = swift_slowAlloc(64, -1);
    v60[0] = v57;
    *(_DWORD *)v43 = 141558531;
    *(_QWORD *)(v0 + 168) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v54, v44);
    *(_QWORD *)(v0 + 160) = sub_100016940(v45, v46, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v42, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v43 + 22) = 2082;
    v47 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v56, v47);
    *(_QWORD *)(v0 + 176) = sub_100016940(v48, v49, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v43 + 24, v43 + 32);
    swift_bridgeObjectRelease();
    v16(v55, v56);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "    Delete share %{private,mask.hash}s,\n    tentativelyRevoked since %{public}s.", (uint8_t *)v43, 0x20u);
    swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    v16(v59, v56);
  }
  else
  {
    v50 = *(_QWORD *)(v0 + 256);
    v51 = *(_QWORD *)(v0 + 232);
    v52 = *(_QWORD *)(v0 + 216);
    v53 = *(_QWORD *)(v0 + 200);

    v16(v51, v52);
    sub_1000126B0(v53, type metadata accessor for MemberSharingCircle);
    v16(v50, v52);
  }
LABEL_4:
  v58 = 1;
LABEL_13:
  v17 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v0 + 288);
  v21 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 240);
  v25 = *(_QWORD *)(v0 + 200);
  v24 = *(_QWORD *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v58);
}

uint64_t sub_100142964()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, uint64_t))sub_100A828F4);
}

uint64_t sub_10014297C()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, uint64_t))sub_100A82568);
}

uint64_t sub_100142994()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, uint64_t))sub_100A80D30);
}

uint64_t sub_1001429AC()
{
  return sub_100142B3C((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, uint64_t))sub_100A81518);
}

uint64_t sub_1001429C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for MemberSharingCircle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v10(v7 + v1[7], v9);
  v10(v7 + v1[8], v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100142AA0()
{
  return sub_100142B3C(type metadata accessor for MemberSharingCircle, (uint64_t (*)(_QWORD, uint64_t))sub_100A8258C);
}

void sub_100142AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10014155C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100142ACC()
{
  return sub_100A826BC();
}

uint64_t sub_100142AD4()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100142B00()
{
  uint64_t v0;

  return sub_100A82698(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24));
}

void sub_100142B0C()
{
  uint64_t v0;

  sub_100ADF74C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100142B3C(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

void sub_100142B94()
{
  uint64_t v0;

  sub_100ADC7E4(*(_QWORD *)(v0 + 16));
}

void sub_100142BBC()
{
  sub_100142B0C();
}

uint64_t sub_100142BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100142BDC);
}

uint64_t sub_100142BDC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100142C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100142C64);
}

char *sub_100142C64(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryUnpairEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EFD98;
  if (!qword_1010EFD98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryUnpairEndpoint);
  return result;
}

void sub_100142D14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  unsigned int v6;
  NSString v7;
  id v8;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  URLComponents.path.setter();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v4 = (void *)qword_1011B7C08;
  v5 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v6 = objc_msgSend(v5, "isInternalBuild");

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v4, "stringForKey:", v7);

    if (v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_100142EBC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B67D8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B67D8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000013, 0x8000000100EC87D0);
}

uint64_t sub_100142F3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;

  v2 = v1;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v14);
  v21 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v16, v17, v4, v15);
  v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x8000000100EC8740, v9, v6, v13, 0);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v18;
  return v2;
}

uint64_t sub_100143100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *v3;
  type metadata accessor for Transaction(0);
  v10 = v3;
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = v7;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryPairingErrorManager.saveError", 68, 2, sub_100143EBC, &v9, &type metadata for () + 1);
}

uint64_t sub_10014318C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];
  _QWORD *v29;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v15 - 8);
  v26 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)(a2 + 24);
  v18 = (_QWORD *)swift_allocObject(&unk_101059AF0, 64, 7);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a1;
  v18[7] = a6;
  aBlock[4] = sub_100143F18;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101059B08;
  v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a5);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter(a3);
  v29 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v12, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v26);
  return swift_release();
}

uint64_t sub_1001433AC(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  unint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[2];

  v72 = a2;
  v9 = type metadata accessor for PairingError(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v77 = *(_QWORD *)(v12 - 8);
  v78 = v12;
  __chkstk_darwin(v12);
  v76 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PairingErrorRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  v75 = v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v60 - v20;
  __chkstk_darwin(v19);
  v70 = (char *)&v60 - v22;
  v79 = *(_QWORD *)(a1 + 16);
  v82[0] = (uint64_t)sub_100889840();
  swift_bridgeObjectRetain(v82[0]);
  sub_100143F28(v82);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v82[0] + 16);
  v73 = v21;
  if (v23 >= 5)
  {
    v64 = v23;
    v71 = v82[0];
    v66 = a4;
    v24 = *(unsigned __int8 *)(v75 + 80);
    if (qword_1010E9998 != -1)
      swift_once(&qword_1010E9998, sub_100142EBC);
    v65 = a3;
    v67 = v18;
    v68 = v11;
    v25 = (v24 + 32) & ~v24;
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1011B67D8);
    v27 = v71;
    v28 = swift_retain_n(v71, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.info.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v69 = a5;
    if (v31)
    {
      v62 = v27 + v25;
      v63 = v25;
      v32 = v64;
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v82[0] = v34;
      *(_DWORD *)v33 = 136315138;
      v61 = v33 + 4;
      v35 = swift_retain();
      v36 = ArraySlice.description.getter(v35, v62, 4, (2 * v32) | 1, v74);
      v38 = v37;
      swift_release();
      v80 = sub_100016940(v36, v38, v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v61, v33 + 12);
      swift_release_n(v27, 2);
      v25 = v63;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Pruning %s.", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_release_n(v27, 2);
      v32 = v64;
    }
    v39 = *(_QWORD *)(v75 + 72);
    swift_retain();
    v40 = v32 - 4;
    v75 = v39;
    v41 = v27 + v25 + 4 * v39;
    v42 = (uint64_t)v70;
    v43 = v76;
    v44 = v77;
    do
    {
      sub_10005972C(v41, v42, type metadata accessor for PairingErrorRecord);
      v45 = *(_QWORD *)(v79 + 160);
      if (qword_1010EA0C8 != -1)
        swift_once(&qword_1010EA0C8, sub_1009997C8);
      v46 = v78;
      v47 = sub_10001A9E8(v78, (uint64_t)qword_1011B7A80);
      v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v47, v46);
      __chkstk_darwin(v48);
      *(&v60 - 4) = v45;
      *(&v60 - 3) = v42;
      *(&v60 - 2) = (uint64_t)v43;
      OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v60 - 6, &type metadata for Bool);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v46);
      sub_1000126B0(v42, type metadata accessor for PairingErrorRecord);
      v41 += v75;
      --v40;
    }
    while (v40);
    swift_release_n(v71, 2);
    v11 = v68;
    a5 = v69;
    v21 = v73;
    a4 = v66;
    v18 = v67;
    a3 = v65;
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRetain(a4);
  sub_100998554(v72, a3, a4, (uint64_t)v11);
  UUID.init()(v49);
  sub_10005972C((uint64_t)v11, (uint64_t)&v21[*(int *)(v74 + 20)], type metadata accessor for PairingError);
  if (qword_1010E9998 != -1)
    swift_once(&qword_1010E9998, sub_100142EBC);
  v50 = type metadata accessor for Logger(0);
  sub_10001A9E8(v50, (uint64_t)qword_1011B67D8);
  v51 = sub_10005972C((uint64_t)v21, (uint64_t)v18, type metadata accessor for PairingErrorRecord);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.info.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v82[0] = v55;
    *(_DWORD *)v54 = 136315138;
    v56 = sub_100999970();
    v80 = sub_100016940(v56, v57, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v18, type metadata accessor for PairingErrorRecord);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Saving %s.", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    v58 = v55;
    v21 = v73;
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v18, type metadata accessor for PairingErrorRecord);
  }

  swift_retain();
  sub_100CAA138((uint64_t)v21, (uint64_t)sub_100143FC4, a5);
  swift_release();
  sub_1000126B0((uint64_t)v21, type metadata accessor for PairingErrorRecord);
  return sub_1000126B0((uint64_t)v11, type metadata accessor for PairingError);
}

void sub_100143A4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for PairingErrorRecord(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v29 - v6;
  v8 = sub_10001A9A8(&qword_1010EFE80);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_100143FCC(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = *v10;
    if (qword_1010E9998 != -1)
      swift_once(&qword_1010E9998, sub_100142EBC);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B67D8);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v29 = v11;
      v30 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_errorRetain(v11);
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v19 = String.init<A>(describing:)(&v29, v18);
      v29 = sub_100016940(v19, v20, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to save PairingErrorRecord. Error %s.", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v11);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);

    }
  }
  else
  {
    sub_100144014((uint64_t)v10, (uint64_t)v7);
    if (qword_1010E9998 != -1)
      swift_once(&qword_1010E9998, sub_100142EBC);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B67D8);
    v22 = sub_10005972C((uint64_t)v7, (uint64_t)v5, type metadata accessor for PairingErrorRecord);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v30 = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = sub_100999970();
      v29 = sub_100016940(v27, v28, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v5, type metadata accessor for PairingErrorRecord);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saved: %s.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v5, type metadata accessor for PairingErrorRecord);
    }
    sub_1000126B0((uint64_t)v7, type metadata accessor for PairingErrorRecord);
  }
}

uint64_t sub_100143E70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for AccessoryPairingErrorManager()
{
  return objc_opt_self(_TtC12searchpartyd28AccessoryPairingErrorManager);
}

uint64_t sub_100143EBC(uint64_t a1)
{
  uint64_t v1;

  return sub_10014318C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100143EDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100143F18()
{
  uint64_t v0;

  return sub_1001433AC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

Swift::Int sub_100143F28(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for PairingErrorRecord(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F114(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_100144058(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100143FA8@<X0>(char *a1@<X8>)
{
  return sub_100886C5C(a1);
}

void sub_100143FC4(uint64_t a1)
{
  sub_100143A4C(a1);
}

uint64_t sub_100143FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EFE80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100144014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PairingErrorRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Int sub_100144058(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  Swift::Int v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  Swift::Int v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  unint64_t v47;
  uint64_t v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  Swift::Int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  Swift::Int v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  Swift::Int v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  Swift::Int v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  Swift::Int v145;

  v2 = v1;
  v143 = type metadata accessor for PairingErrorRecord(0);
  v4 = *(_QWORD *)(v143 - 8);
  v5 = __chkstk_darwin(v143);
  v133 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v144 = (uint64_t)&v127 - v8;
  v9 = __chkstk_darwin(v7);
  v140 = (uint64_t)&v127 - v10;
  __chkstk_darwin(v9);
  v139 = (uint64_t)&v127 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_138;
    if (v12)
      return sub_100144A44(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_146;
  v136 = v4;
  v129 = result;
  if (v12 < 2)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    v135 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v128 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v20 >= 2)
      {
        v121 = *a1;
        do
        {
          v122 = v20 - 2;
          if (v20 < 2)
            goto LABEL_133;
          if (!v121)
            goto LABEL_145;
          v123 = *(_QWORD *)&v18[16 * v122 + 32];
          v124 = *(_QWORD *)&v18[16 * v20 + 24];
          sub_100144C9C(v121 + *(_QWORD *)(v136 + 72) * v123, v121 + *(_QWORD *)(v136 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v121 + *(_QWORD *)(v136 + 72) * v124, v135);
          if (v2)
            break;
          if (v124 < v123)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v18 = sub_10088F088((uint64_t)v18);
          if (v122 >= *((_QWORD *)v18 + 2))
            goto LABEL_135;
          v125 = &v18[16 * v122 + 32];
          *(_QWORD *)v125 = v123;
          *((_QWORD *)v125 + 1) = v124;
          v126 = *((_QWORD *)v18 + 2);
          if (v20 > v126)
            goto LABEL_136;
          memmove(&v18[16 * v20 + 16], &v18[16 * v20 + 32], 16 * (v126 - v20));
          *((_QWORD *)v18 + 2) = v126 - 1;
          v20 = v126 - 1;
        }
        while (v126 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v128[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v143);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v4 + 80);
    v128 = (_QWORD *)v16;
    v135 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v142 = a1;
  while (1)
  {
    v21 = v19;
    v22 = v19 + 1;
    v134 = v19;
    if (v19 + 1 >= v12)
    {
      v29 = v19 + 1;
      v38 = v19;
    }
    else
    {
      v130 = v18;
      v131 = v2;
      v132 = *a1;
      v23 = v132;
      v24 = *(_QWORD *)(v136 + 72);
      v141 = v12;
      v25 = v139;
      sub_10005972C(v132 + v24 * v22, v139, type metadata accessor for PairingErrorRecord);
      v26 = v140;
      sub_10005972C(v23 + v24 * v21, v140, type metadata accessor for PairingErrorRecord);
      v27 = *(int *)(v143 + 20);
      v137 = type metadata accessor for PairingError(0);
      v138 = Date.compare(_:)(v26 + v27 + *(int *)(v137 + 24));
      sub_1000126B0(v26, type metadata accessor for PairingErrorRecord);
      v28 = v25;
      v12 = v141;
      sub_1000126B0(v28, type metadata accessor for PairingErrorRecord);
      v29 = v21 + 2;
      v145 = v24;
      if (v21 + 2 < v12)
      {
        v30 = v24 * v22;
        v31 = v132;
        v32 = v24 * v29;
        while (1)
        {
          v33 = v29;
          v34 = v139;
          v35 = v138 == 1;
          sub_10005972C(v31 + v32, v139, type metadata accessor for PairingErrorRecord);
          v36 = v140;
          sub_10005972C(v31 + v30, v140, type metadata accessor for PairingErrorRecord);
          v37 = Date.compare(_:)(v36 + *(int *)(v143 + 20) + *(int *)(v137 + 24)) != 1;
          sub_1000126B0(v36, type metadata accessor for PairingErrorRecord);
          sub_1000126B0(v34, type metadata accessor for PairingErrorRecord);
          if (v35 == v37)
            break;
          v29 = v33 + 1;
          v31 += v145;
          v12 = v141;
          if (v141 == v33 + 1)
          {
            v29 = v141;
            a1 = v142;
            goto LABEL_23;
          }
        }
        v12 = v141;
        a1 = v142;
        v29 = v33;
      }
LABEL_23:
      v2 = v131;
      v18 = v130;
      v38 = v134;
      if (v138 == 1)
      {
        if (v29 < v134)
          goto LABEL_139;
        if (v134 < v29)
        {
          v39 = 0;
          v40 = v145;
          v41 = v145 * (v29 - 1);
          v42 = v29 * v145;
          v43 = v134;
          v44 = v134 * v145;
          do
          {
            if (v43 != v29 + v39 - 1)
            {
              v45 = v132;
              if (!v132)
                goto LABEL_144;
              v46 = v29;
              v47 = v132 + v44;
              v48 = v132 + v41;
              sub_100144014(v132 + v44, v133);
              if (v44 < v41 || v47 >= v45 + v42)
              {
                swift_arrayInitWithTakeFrontToBack(v45 + v44, v45 + v41, 1, v143);
                v40 = v145;
              }
              else
              {
                v40 = v145;
                if (v44 != v41)
                  swift_arrayInitWithTakeBackToFront(v47, v48);
              }
              sub_100144014(v133, v48);
              v29 = v46;
            }
            ++v43;
            --v39;
            v41 -= v40;
            v42 -= v40;
            v44 += v40;
          }
          while (v43 < v29 + v39);
          v12 = v141;
          a1 = v142;
          v18 = v130;
          v2 = v131;
          v38 = v134;
        }
      }
    }
    if (v29 < v12)
    {
      if (__OFSUB__(v29, v38))
        goto LABEL_137;
      if (v29 - v38 < v129)
        break;
    }
LABEL_55:
    if (v29 < v38)
      goto LABEL_132;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v141 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_10088E710(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v70 = *((_QWORD *)v18 + 2);
    v69 = *((_QWORD *)v18 + 3);
    v20 = v70 + 1;
    if (v70 >= v69 >> 1)
      v18 = sub_10088E710((char *)(v69 > 1), v70 + 1, 1, v18);
    v71 = v2;
    *((_QWORD *)v18 + 2) = v20;
    v72 = v18 + 32;
    v73 = &v18[16 * v70 + 32];
    v74 = v141;
    *(_QWORD *)v73 = v38;
    *((_QWORD *)v73 + 1) = v74;
    if (v70)
    {
      while (1)
      {
        v75 = v20 - 1;
        if (v20 >= 4)
        {
          v80 = &v72[16 * v20];
          v81 = *((_QWORD *)v80 - 8);
          v82 = *((_QWORD *)v80 - 7);
          v86 = __OFSUB__(v82, v81);
          v83 = v82 - v81;
          if (v86)
            goto LABEL_121;
          v85 = *((_QWORD *)v80 - 6);
          v84 = *((_QWORD *)v80 - 5);
          v86 = __OFSUB__(v84, v85);
          v78 = v84 - v85;
          v79 = v86;
          if (v86)
            goto LABEL_122;
          v87 = v20 - 2;
          v88 = &v72[16 * v20 - 32];
          v90 = *(_QWORD *)v88;
          v89 = *((_QWORD *)v88 + 1);
          v86 = __OFSUB__(v89, v90);
          v91 = v89 - v90;
          if (v86)
            goto LABEL_124;
          v86 = __OFADD__(v78, v91);
          v92 = v78 + v91;
          if (v86)
            goto LABEL_127;
          if (v92 >= v83)
          {
            v110 = &v72[16 * v75];
            v112 = *(_QWORD *)v110;
            v111 = *((_QWORD *)v110 + 1);
            v86 = __OFSUB__(v111, v112);
            v113 = v111 - v112;
            if (v86)
              goto LABEL_131;
            v103 = v78 < v113;
            goto LABEL_92;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v104 = *((_QWORD *)v18 + 4);
            v105 = *((_QWORD *)v18 + 5);
            v86 = __OFSUB__(v105, v104);
            v97 = v105 - v104;
            v98 = v86;
            goto LABEL_86;
          }
          v77 = *((_QWORD *)v18 + 4);
          v76 = *((_QWORD *)v18 + 5);
          v86 = __OFSUB__(v76, v77);
          v78 = v76 - v77;
          v79 = v86;
        }
        if ((v79 & 1) != 0)
          goto LABEL_123;
        v87 = v20 - 2;
        v93 = &v72[16 * v20 - 32];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v96 = __OFSUB__(v94, v95);
        v97 = v94 - v95;
        v98 = v96;
        if (v96)
          goto LABEL_126;
        v99 = &v72[16 * v75];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v86 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v86)
          goto LABEL_129;
        if (__OFADD__(v97, v102))
          goto LABEL_130;
        if (v97 + v102 >= v78)
        {
          v103 = v78 < v102;
LABEL_92:
          if (v103)
            v75 = v87;
          goto LABEL_94;
        }
LABEL_86:
        if ((v98 & 1) != 0)
          goto LABEL_125;
        v106 = &v72[16 * v75];
        v108 = *(_QWORD *)v106;
        v107 = *((_QWORD *)v106 + 1);
        v86 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v86)
          goto LABEL_128;
        if (v109 < v97)
          goto LABEL_14;
LABEL_94:
        v114 = v75 - 1;
        if (v75 - 1 >= v20)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v115 = *a1;
        if (!*a1)
          goto LABEL_143;
        v116 = &v72[16 * v114];
        v117 = *(_QWORD *)v116;
        v118 = &v72[16 * v75];
        v119 = *((_QWORD *)v118 + 1);
        sub_100144C9C(v115 + *(_QWORD *)(v136 + 72) * *(_QWORD *)v116, v115 + *(_QWORD *)(v136 + 72) * *(_QWORD *)v118, v115 + *(_QWORD *)(v136 + 72) * v119, v135);
        if (v71)
          goto LABEL_115;
        if (v119 < v117)
          goto LABEL_118;
        if (v75 > *((_QWORD *)v18 + 2))
          goto LABEL_119;
        *(_QWORD *)v116 = v117;
        *(_QWORD *)&v72[16 * v114 + 8] = v119;
        v120 = *((_QWORD *)v18 + 2);
        if (v75 >= v120)
          goto LABEL_120;
        v20 = v120 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v120 - 1 - v75));
        *((_QWORD *)v18 + 2) = v120 - 1;
        a1 = v142;
        if (v120 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v141;
    v2 = v71;
    if (v141 >= v12)
      goto LABEL_104;
  }
  if (__OFADD__(v38, v129))
    goto LABEL_140;
  if (v38 + v129 >= v12)
    v49 = v12;
  else
    v49 = v38 + v129;
  if (v49 >= v38)
  {
    if (v29 != v49)
    {
      v130 = v18;
      v131 = v2;
      v50 = *(_QWORD *)(v136 + 72);
      v51 = v50 * (v29 - 1);
      v137 = v50;
      v52 = v29 * v50;
      v132 = v49;
      do
      {
        v54 = 0;
        v141 = v29;
        v138 = v52;
        while (1)
        {
          v145 = v38;
          v55 = v142;
          v56 = *v142;
          v57 = v52 + v54 + *v142;
          v58 = v139;
          sub_10005972C(v57, v139, type metadata accessor for PairingErrorRecord);
          v59 = v51;
          v60 = v51 + v54 + v56;
          v61 = v140;
          sub_10005972C(v60, v140, type metadata accessor for PairingErrorRecord);
          v62 = *(int *)(v143 + 20);
          v63 = type metadata accessor for PairingError(0);
          v64 = Date.compare(_:)(v61 + v62 + *(int *)(v63 + 24));
          sub_1000126B0(v61, type metadata accessor for PairingErrorRecord);
          sub_1000126B0(v58, type metadata accessor for PairingErrorRecord);
          if (v64 != 1)
            break;
          v65 = *v55;
          if (!*v55)
            goto LABEL_142;
          v52 = v138;
          v66 = v65 + v138 + v54;
          v51 = v59;
          v67 = v65 + v59 + v54;
          sub_100144014(v66, v144);
          swift_arrayInitWithTakeFrontToBack(v66, v67, 1, v143);
          sub_100144014(v144, v67);
          v54 -= v137;
          v38 = v145 + 1;
          v53 = v141;
          if (v141 == v145 + 1)
            goto LABEL_48;
        }
        v53 = v141;
        v51 = v59;
        v52 = v138;
LABEL_48:
        v29 = v53 + 1;
        v51 += v137;
        v52 += v137;
        v38 = v134;
      }
      while (v29 != v132);
      v29 = v132;
      v18 = v130;
      v2 = v131;
      a1 = v142;
    }
    goto LABEL_55;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100144A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;

  v28 = a1;
  v33 = type metadata accessor for PairingErrorRecord(0);
  v7 = __chkstk_darwin(v33);
  v34 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v30 = (uint64_t)&v26 - v10;
  result = __chkstk_darwin(v9);
  v29 = (char *)&v26 - v13;
  v32 = a3;
  v27 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v37 = v14 * (v32 - 1);
    v31 = v14;
    v35 = a4;
    v36 = v14 * v32;
    v15 = (uint64_t)v29;
LABEL_5:
    v16 = 0;
    v17 = v28;
    while (1)
    {
      v18 = *v35;
      sub_10005972C(v36 + v16 + *v35, v15, type metadata accessor for PairingErrorRecord);
      v19 = v30;
      sub_10005972C(v37 + v16 + v18, v30, type metadata accessor for PairingErrorRecord);
      v20 = *(int *)(v33 + 20);
      v21 = type metadata accessor for PairingError(0);
      v22 = Date.compare(_:)(v19 + v20 + *(int *)(v21 + 24));
      sub_1000126B0(v19, type metadata accessor for PairingErrorRecord);
      result = sub_1000126B0(v15, type metadata accessor for PairingErrorRecord);
      if (v22 != 1)
      {
LABEL_4:
        v37 += v31;
        v36 += v31;
        if (++v32 == v27)
          return result;
        goto LABEL_5;
      }
      v23 = *v35;
      if (!*v35)
        break;
      v24 = v23 + v36 + v16;
      v25 = v23 + v37 + v16;
      sub_100144014(v24, v34);
      swift_arrayInitWithTakeFrontToBack(v24, v25, 1, v33);
      result = sub_100144014(v34, v25);
      v16 -= v31;
      if (v32 == ++v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100144C9C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v8 = type metadata accessor for PairingErrorRecord(0);
  v9 = __chkstk_darwin(v8);
  v50 = (uint64_t)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v45 - v11;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_62;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_63;
  v16 = (uint64_t)(a2 - a1) / v14;
  v53 = a1;
  v52 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v8);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v28 = a4 + v19;
      v51 = a4 + v19;
      v53 = a2;
      if (v19 >= 1 && a1 < a2)
      {
        v30 = -v14;
        v47 = a4;
        v48 = v8;
        v46 = a1;
        do
        {
          v49 = a3 + v30;
          sub_10005972C(v28 + v30, (uint64_t)v12, type metadata accessor for PairingErrorRecord);
          v31 = a2 + v30;
          v32 = a3;
          v33 = (uint64_t)v12;
          v34 = v50;
          sub_10005972C(a2 + v30, v50, type metadata accessor for PairingErrorRecord);
          v35 = *(int *)(v8 + 20);
          v36 = type metadata accessor for PairingError(0);
          v37 = Date.compare(_:)(v34 + v35 + *(int *)(v36 + 24));
          v38 = v34;
          v12 = (char *)v33;
          sub_1000126B0(v38, type metadata accessor for PairingErrorRecord);
          sub_1000126B0(v33, type metadata accessor for PairingErrorRecord);
          if (v37 == 1)
          {
            a3 = v49;
            if (v32 < a2 || v49 >= a2)
            {
              v8 = v48;
              swift_arrayInitWithTakeFrontToBack(v49, a2 + v30, 1, v48);
              v41 = v46;
              v40 = v47;
            }
            else
            {
              v39 = v32 == a2;
              v40 = v47;
              v8 = v48;
              v41 = v46;
              if (!v39)
                swift_arrayInitWithTakeBackToFront(v49, a2 + v30);
            }
            v53 += v30;
          }
          else
          {
            v42 = v51;
            v43 = v51 + v30;
            v51 += v30;
            a3 = v49;
            if (v32 < v42 || v49 >= v42)
            {
              v8 = v48;
              swift_arrayInitWithTakeFrontToBack(v49, v43, 1, v48);
            }
            else
            {
              v8 = v48;
              if (v32 != v42)
                swift_arrayInitWithTakeBackToFront(v49, v43);
            }
            v31 = a2;
            v41 = v46;
            v40 = v47;
          }
          v28 = v51;
          if (v51 <= v40)
            break;
          a2 = v31;
        }
        while (v31 > v41);
      }
      goto LABEL_60;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v8);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v49 = a4 + v18;
    v51 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      v21 = v50;
      do
      {
        sub_10005972C(a2, (uint64_t)v12, type metadata accessor for PairingErrorRecord);
        sub_10005972C(a4, v21, type metadata accessor for PairingErrorRecord);
        v22 = *(int *)(v8 + 20);
        v23 = type metadata accessor for PairingError(0);
        v24 = Date.compare(_:)(v21 + v22 + *(int *)(v23 + 24));
        sub_1000126B0(v21, type metadata accessor for PairingErrorRecord);
        sub_1000126B0((uint64_t)v12, type metadata accessor for PairingErrorRecord);
        v25 = v53;
        if (v24 == 1)
        {
          v26 = a2 + v14;
          if (v53 < a2 || v53 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v53, a2, 1, v8);
          }
          else if (v53 == a2)
          {
            v25 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v53, a2);
          }
        }
        else
        {
          v27 = v52 + v14;
          if (v53 < v52 || v53 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v53, v52, 1, v8);
          }
          else if (v53 != v52)
          {
            swift_arrayInitWithTakeBackToFront(v53, v52);
          }
          v52 = v27;
          v26 = a2;
        }
        v53 = v25 + v14;
        a4 = v52;
        if (v52 >= v49)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_60:
    sub_10088E8F8(&v53, &v52, (uint64_t *)&v51);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for BatteryChargeState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001451D4 + 4 * byte_100E28865[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100145208 + 4 * asc_100E28860[v4]))();
}

uint64_t sub_100145208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100145210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100145218);
  return result;
}

uint64_t sub_100145224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014522CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100145230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100145238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BatteryChargeState()
{
  return &type metadata for BatteryChargeState;
}

unint64_t sub_100145258()
{
  unint64_t result;

  result = qword_1010EFE88;
  if (!qword_1010EFE88)
  {
    result = swift_getWitnessTable(&unk_100E288C4, &type metadata for BatteryChargeState);
    atomic_store(result, (unint64_t *)&qword_1010EFE88);
  }
  return result;
}

uint64_t *sub_10014529C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for ServerStatusCode(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100145338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for ServerStatusCode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_100145380(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ServerStatusCode(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_1001453F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10014546C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1001454C8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100145534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100145540);
}

uint64_t sub_100145540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ServerStatusCode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1001455BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001455C8);
}

uint64_t sub_1001455C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ServerStatusCode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for NFCTapResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EFEE8;
  if (!qword_1010EFEE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NFCTapResponse);
  return result;
}

uint64_t sub_100145678(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E28950;
  result = type metadata accessor for ServerStatusCode(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001456EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v23 = a2;
  v25 = type metadata accessor for ServerStatusCode(0);
  v22 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v24 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010EFF20);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NFCTapResponse(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_1001459F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NFCTapResponse.CodingKeys, &type metadata for NFCTapResponse.CodingKeys, v13, v11, v12);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v21 = a1;
  v14 = v10;
  v16 = v24;
  v15 = v25;
  v28 = 0;
  v17 = v26;
  *(_QWORD *)v14 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v26);
  *((_QWORD *)v14 + 1) = v18;
  v27 = 1;
  v19 = sub_100145A34();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v27, v17, v15, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
  (*(void (**)(char *, _QWORD *, uint64_t))(v22 + 32))(&v14[*(int *)(v8 + 20)], v16, v15);
  sub_100145A7C((uint64_t)v14, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
  return sub_100145AC0((uint64_t)v14);
}

uint64_t sub_10014591C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43737574617473;
  else
    return 0x4D6572756C696166;
}

uint64_t sub_100145968@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100145CA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014598C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001459F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001459B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001459F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001459DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001456EC(a1, a2);
}

unint64_t sub_1001459F0()
{
  unint64_t result;

  result = qword_1010EFF28;
  if (!qword_1010EFF28)
  {
    result = swift_getWitnessTable(&unk_100E28A54, &type metadata for NFCTapResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF28);
  }
  return result;
}

unint64_t sub_100145A34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EFF30;
  if (!qword_1010EFF30)
  {
    v1 = type metadata accessor for ServerStatusCode(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ServerStatusCode, v1);
    atomic_store(result, (unint64_t *)&qword_1010EFF30);
  }
  return result;
}

uint64_t sub_100145A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NFCTapResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100145AC0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NFCTapResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NFCTapResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100145B48 + 4 * byte_100E28935[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100145B7C + 4 * byte_100E28930[v4]))();
}

uint64_t sub_100145B7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100145B84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100145B8CLL);
  return result;
}

uint64_t sub_100145B98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100145BA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100145BA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100145BAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NFCTapResponse.CodingKeys()
{
  return &type metadata for NFCTapResponse.CodingKeys;
}

unint64_t sub_100145BCC()
{
  unint64_t result;

  result = qword_1010EFF38;
  if (!qword_1010EFF38)
  {
    result = swift_getWitnessTable(&unk_100E28A2C, &type metadata for NFCTapResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF38);
  }
  return result;
}

unint64_t sub_100145C14()
{
  unint64_t result;

  result = qword_1010EFF40;
  if (!qword_1010EFF40)
  {
    result = swift_getWitnessTable(&unk_100E2899C, &type metadata for NFCTapResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF40);
  }
  return result;
}

unint64_t sub_100145C5C()
{
  unint64_t result;

  result = qword_1010EFF48;
  if (!qword_1010EFF48)
  {
    result = swift_getWitnessTable(&unk_100E289C4, &type metadata for NFCTapResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF48);
  }
  return result;
}

uint64_t sub_100145CA0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x4D6572756C696166 && a2 == 0xEE00656761737365)
  {
    v5 = 0xEE00656761737365;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4D6572756C696166, 0xEE00656761737365, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease(0xEA00000000006564);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473, 0xEA00000000006564, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

ValueMetadata *type metadata accessor for KeyDropShareEnvelopeV1()
{
  return &type metadata for KeyDropShareEnvelopeV1;
}

uint64_t sub_100145DD0@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_100145DFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100145F34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100145E24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100145F34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100145E4C(_QWORD *a1)
{
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100145E70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_10001A9A8(&qword_1010EFF50);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  v8 = sub_100145F34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropShareEnvelopeV1.CodingKeys, &type metadata for KeyDropShareEnvelopeV1.CodingKeys, v8, v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_100145F34()
{
  unint64_t result;

  result = qword_1010EFF58;
  if (!qword_1010EFF58)
  {
    result = swift_getWitnessTable(&unk_100E28B94, &type metadata for KeyDropShareEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF58);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropShareEnvelopeV1.CodingKeys()
{
  return &type metadata for KeyDropShareEnvelopeV1.CodingKeys;
}

unint64_t sub_100145F8C()
{
  unint64_t result;

  result = qword_1010EFF60;
  if (!qword_1010EFF60)
  {
    result = swift_getWitnessTable(&unk_100E28B44, &type metadata for KeyDropShareEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF60);
  }
  return result;
}

unint64_t sub_100145FD4()
{
  unint64_t result;

  result = qword_1010EFF68;
  if (!qword_1010EFF68)
  {
    result = swift_getWitnessTable(&unk_100E28B6C, &type metadata for KeyDropShareEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF68);
  }
  return result;
}

uint64_t destroy for KeyDropBeaconAttributes(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for KeyDropBeaconAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for KeyDropBeaconAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[7] = a2[7];
  v10 = a2[8];
  v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for KeyDropBeaconAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDropBeaconAttributes(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDropBeaconAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropBeaconAttributes()
{
  return &type metadata for KeyDropBeaconAttributes;
}

uint64_t sub_1001462A8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010EFF70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001465A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropBeaconAttributes.CodingKeys, &type metadata for KeyDropBeaconAttributes.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v27 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v27, v5);
  if (!v2)
  {
    v14 = v3[2];
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v26, v5);
    v15 = v3[3];
    v16 = v3[4];
    v25 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v25, v5);
    v17 = v3[5];
    v18 = v3[6];
    v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v24, v5);
    v19 = v3[7];
    v20 = v3[8];
    v23 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100146434()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014645C + 4 * byte_100E28BF0[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_10014645C()
{
  return 0x6449656C6F72;
}

uint64_t sub_100146470()
{
  return 0x696A6F6D65;
}

uint64_t sub_100146484()
{
  return 0x65566D6574737973;
}

uint64_t sub_1001464A8()
{
  return 0x754E6C6169726573;
}

uint64_t sub_1001464C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001465E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001464EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001465A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100146514(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001465A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10014653C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_10014681C(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10014658C(_QWORD *a1)
{
  return sub_1001462A8(a1);
}

unint64_t sub_1001465A0()
{
  unint64_t result;

  result = qword_1010EFF78;
  if (!qword_1010EFF78)
  {
    result = swift_getWitnessTable(&unk_100E28D2C, &type metadata for KeyDropBeaconAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF78);
  }
  return result;
}

uint64_t sub_1001465E4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449656C6F72 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C6F72, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x696A6F6D65 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696A6F6D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372)
  {
    v9 = 0xED00006E6F697372;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566D6574737973, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    swift_bridgeObjectRelease(0xEC0000007265626DLL);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10014681C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v5 = sub_10001A9A8(&qword_1010EFF80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001465A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropBeaconAttributes.CodingKeys, &type metadata for KeyDropBeaconAttributes.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v37 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v5);
  v14 = v13;
  v36 = 1;
  swift_bridgeObjectRetain(v13);
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  v35 = 2;
  v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v35, v5);
  v34 = 3;
  v32 = v15;
  swift_bridgeObjectRetain(v15);
  v28 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
  v29 = v16;
  v33 = 4;
  swift_bridgeObjectRetain(v16);
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  v22 = v29;
  swift_bridgeObjectRelease();
  v23 = v32;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v12;
  a2[1] = v14;
  v25 = v30;
  a2[2] = v31;
  a2[3] = v25;
  v26 = v28;
  a2[4] = v23;
  a2[5] = v26;
  a2[6] = v22;
  a2[7] = v21;
  a2[8] = v19;
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyDropBeaconAttributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100146B54 + 4 * byte_100E28BFA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100146B88 + 4 * byte_100E28BF5[v4]))();
}

uint64_t sub_100146B88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100146B90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100146B98);
  return result;
}

uint64_t sub_100146BA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100146BACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100146BB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100146BB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropBeaconAttributes.CodingKeys()
{
  return &type metadata for KeyDropBeaconAttributes.CodingKeys;
}

unint64_t sub_100146BD8()
{
  unint64_t result;

  result = qword_1010EFF88;
  if (!qword_1010EFF88)
  {
    result = swift_getWitnessTable(&unk_100E28D04, &type metadata for KeyDropBeaconAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF88);
  }
  return result;
}

unint64_t sub_100146C20()
{
  unint64_t result;

  result = qword_1010EFF90;
  if (!qword_1010EFF90)
  {
    result = swift_getWitnessTable(&unk_100E28C74, &type metadata for KeyDropBeaconAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF90);
  }
  return result;
}

unint64_t sub_100146C68()
{
  unint64_t result;

  result = qword_1010EFF98;
  if (!qword_1010EFF98)
  {
    result = swift_getWitnessTable(&unk_100E28C9C, &type metadata for KeyDropBeaconAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EFF98);
  }
  return result;
}

uint64_t sub_100146CAC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B67F0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B67F0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000015, 0x8000000100EC8840);
}

uint64_t sub_100146D2C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_100146D44, v0, 0);
}

uint64_t sub_100146D44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B67F0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[2] = sub_100016940(0xD00000000000001DLL, 0x8000000100EC8860, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1010EFFD4);
  v0[4] = v7;
  *v7 = v0;
  v7[1] = sub_100146EF0;
  v8 = v0[3];
  v7[12] = v8;
  return swift_task_switch(sub_100147068, v8, 0);
}

uint64_t sub_100146EF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return swift_task_switch(sub_100146F44, v1, 0);
}

uint64_t sub_100146F44()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[5] = *(_QWORD *)(v0[3] + 112);
  v1 = (_QWORD *)swift_task_alloc(dword_10111043C);
  v0[6] = v1;
  *v1 = v0;
  v1[1] = sub_100146F98;
  return sub_100A3173C(6.0);
}

uint64_t sub_100146F98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 48);
  v5 = *v1;
  *(_QWORD *)(v5 + 56) = a1;
  swift_task_dealloc(v2);
  v3 = (_QWORD *)swift_task_alloc(dword_101110434);
  *(_QWORD *)(v5 + 64) = v3;
  *v3 = v5;
  v3[1] = sub_100147008;
  return sub_100A31498();
}

uint64_t sub_100147008()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(_QWORD *)(v1 + 56));
}

uint64_t sub_100147050()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = v0;
  return swift_task_switch(sub_100147068, v0, 0);
}

id sub_100147068()
{
  id result;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;

  result = objc_msgSend((id)objc_opt_self(NRPairedDeviceRegistry), "sharedInstance");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "getPairedDevices");

    if (!v2)
    {
      v5 = v45;
      if (qword_1010E99A0 == -1)
      {
LABEL_22:
        v21 = type metadata accessor for Logger(0);
        v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B67F0);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.default.getter(v23);
        if (!os_log_type_enabled(v23, v24))
        {
LABEL_52:

          return (id)(*(uint64_t (**)(void))(v5 + 8))();
        }
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        v26 = "No watches found for monitoring";
        goto LABEL_50;
      }
LABEL_54:
      swift_once(&qword_1010E99A0, sub_100146CAC);
      goto LABEL_22;
    }
    v3 = sub_1001477D8();
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    v5 = v45;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0)
        v27 = v4;
      else
        v27 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v6 = _CocoaArrayWrapper.endIndex.getter(v27);
      v44 = (unint64_t)v4 >> 62;
      if (v6)
        goto LABEL_5;
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v4);
      v44 = (unint64_t)v4 >> 62;
      if (v6)
      {
LABEL_5:
        if (v6 >= 1)
        {
          v7 = 0;
          v8 = v45 + 16;
          v9 = (_QWORD *)(v45 + 48);
          v10 = (_BYTE *)(v45 + 136);
          v11 = v4;
          v46 = v4 & 0xC000000000000001;
          v12 = NRDevicePropertyCellularEnabled;
          while (1)
          {
            if (v46)
              v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v11);
            else
              v13 = *(id *)(v11 + 8 * v7 + 32);
            v14 = v13;
            v15 = objc_msgSend(v13, "valueForProperty:", v12, v44);
            if (v15)
            {
              v16 = v15;
              _bridgeAnyObjectToAny(_:)(v9, v15);
              swift_unknownObjectRelease(v16);
            }
            else
            {
              *(_OWORD *)v9 = 0u;
              *(_OWORD *)(v45 + 64) = 0u;
            }
            sub_100147814((uint64_t)v9, v8);
            if (*(_QWORD *)(v5 + 40))
            {
              v17 = swift_dynamicCast(v10, v8, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
              if ((v17 & 1) != 0 && (*v10 & 1) != 0)
              {
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
                v18 = _swiftEmptyArrayStorage[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
                v19 = v18;
                v5 = v45;
                v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v14);
                specialized ContiguousArray._endMutation()(v20);
                goto LABEL_9;
              }
            }
            else
            {
              sub_10014785C(v8);
            }

LABEL_9:
            if (v6 == ++v7)
            {
              v4 = v11;
              swift_bridgeObjectRelease();
              goto LABEL_29;
            }
          }
        }
        __break(1u);
        goto LABEL_54;
      }
    }
    swift_bridgeObjectRelease();
LABEL_29:
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B67F0);
    swift_retain_n(_swiftEmptyArrayStorage, 2);
    swift_bridgeObjectRetain(v4);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = v5 + 88;
      v33 = swift_slowAlloc(22, -1);
      *(_DWORD *)v33 = 134218240;
      v34 = (unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0 || v34)
      {
        swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
        v35 = _CocoaArrayWrapper.endIndex.getter(v43);
        swift_release();
      }
      else
      {
        v35 = _swiftEmptyArrayStorage[2];
      }
      swift_release();
      *(_QWORD *)(v5 + 80) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 + 80, v5 + 88, v33 + 4, v33 + 12);
      swift_release();
      *(_WORD *)(v33 + 12) = 2048;
      if (v44)
      {
        if (v4 < 0)
          v37 = v4;
        else
          v37 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v38 = v37;
        v5 = v45;
        v36 = _CocoaArrayWrapper.endIndex.getter(v38);
        swift_bridgeObjectRelease();
      }
      else
      {
        v36 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v5 + 88) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v5 + 96, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%ld elligible out of %ld paired devices.", (uint8_t *)v33, 0x16u);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v4, 2);
      swift_release_n(_swiftEmptyArrayStorage, 2);

      v34 = (unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000;
    }
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0 || v34)
    {
      v40 = swift_retain();
      v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_release();
      if (v41)
        goto LABEL_46;
    }
    else if (_swiftEmptyArrayStorage[2])
    {
LABEL_46:
      v39 = *(_QWORD *)(*(_QWORD *)(v45 + 96) + 112);
      *(_QWORD *)(v45 + 104) = v39;
      *(_QWORD *)(v45 + 112) = sub_1007ED9BC((uint64_t)_swiftEmptyArrayStorage);
      swift_release();
      return (id)swift_task_switch(sub_100147624, v39, 0);
    }
    v42 = swift_release();
    v23 = Logger.logObject.getter(v42);
    v24 = static os_log_type_t.default.getter(v23);
    if (!os_log_type_enabled(v23, v24))
    {
LABEL_51:
      v5 = v45;
      goto LABEL_52;
    }
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    v26 = "No autoMe watches found or currently monitoring";
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, v23, v24, v26, v25, 2u);
    swift_slowDealloc(v25, -1, -1);
    goto LABEL_51;
  }
  __break(1u);
  return result;
}

uint64_t sub_100147624()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void *, uint64_t);

  v1 = v0[13];
  v2 = v0[14];
  v3 = swift_allocObject(&unk_101059FC0, 32, 7);
  v0[15] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v7 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                               + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_bridgeObjectRetain(v2);
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[16] = v5;
  *v5 = v0;
  v5[1] = sub_1001476D8;
  return v7(&unk_1010F0068, v3);
}

uint64_t sub_1001476D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = *(_QWORD *)(v2 + 104);
    swift_release();
    swift_errorRelease(v0);
    return swift_task_switch(sub_100147764, v5, 0);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
}

uint64_t sub_100147764()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100147794()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PairedAutoMeCapableWatches()
{
  return objc_opt_self(_TtC12searchpartyd26PairedAutoMeCapableWatches);
}

unint64_t sub_1001477D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101111D20;
  if (!qword_101111D20)
  {
    v1 = objc_opt_self(NRDevice);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101111D20);
  }
  return result;
}

uint64_t sub_100147814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F6390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014785C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010F6390);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10014789C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001478C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1011105D4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004C28;
  return sub_100A30E10(v2, v3);
}

void *sub_100147918()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_100147924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for MACAddress(0);
  v2 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x203A4B524920;
  v4._object = (void *)0xE600000000000000;
  String.append(_:)(v4);
  v5 = type metadata accessor for PeripheralConnectionMaterial(0);
  v6._countAndFlagsBits = Data.hexString.getter(*(_QWORD *)(v0 + *(int *)(v5 + 20)), *(_QWORD *)(v0 + *(int *)(v5 + 20) + 8));
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x737365726464613CLL;
}

uint64_t sub_100147A2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F08C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10014A118();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PeripheralConnectionMaterial.CodingKeys, &type metadata for PeripheralConnectionMaterial.CodingKeys, v11, v9, v10);
  LOBYTE(v18) = 0;
  v12 = type metadata accessor for MACAddress(0);
  v13 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v18 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20));
    v17 = 1;
    v14 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for Data, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100147B94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  char v31;

  v25 = a2;
  v29 = type metadata accessor for MACAddress(0);
  v26 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A9A8(&qword_1010F08A8);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PeripheralConnectionMaterial(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_10014A118();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PeripheralConnectionMaterial.CodingKeys, &type metadata for PeripheralConnectionMaterial.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v23 = a1;
  v24 = v5;
  v14 = (uint64_t)v10;
  v15 = v26;
  LOBYTE(v30) = 0;
  v16 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v18 = v27;
  v17 = v28;
  v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v29, &v30, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v18, v19);
  v31 = 1;
  v20 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for Data, &v31, v17, &type metadata for Data, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
  *(_OWORD *)(v14 + *(int *)(v8 + 20)) = v30;
  sub_10014A15C(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  return sub_10014A1A0(v14);
}

uint64_t sub_100147E1C()
{
  _BYTE *v0;

  if (*v0)
    return 7041641;
  else
    return 0x73736572646461;
}

uint64_t sub_100147E50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014A3E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100147E74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014A118();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100147E9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014A118();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100147EC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100147B94(a1, a2);
}

uint64_t sub_100147ED8(_QWORD *a1)
{
  return sub_100147A2C(a1);
}

Swift::Int sub_100147EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  v3 = type metadata accessor for MACAddress(0);
  v4 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(v6, v3, v4);
  Data.hash(into:)(v6, *(_QWORD *)(v1 + *(int *)(a1 + 20)), *(_QWORD *)(v1 + *(int *)(a1 + 20) + 8));
  return Hasher._finalize()();
}

uint64_t sub_100147F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for MACAddress(0);
  v6 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  return Data.hash(into:)(a1, *(_QWORD *)(v2 + *(int *)(a2 + 20)), *(_QWORD *)(v2 + *(int *)(a2 + 20) + 8));
}

Swift::Int sub_100147FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v4 = type metadata accessor for MACAddress(0);
  v5 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  Data.hash(into:)(v7, *(_QWORD *)(v2 + *(int *)(a2 + 20)), *(_QWORD *)(v2 + *(int *)(a2 + 20) + 8));
  return Hasher._finalize()();
}

void sub_100148074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static MACAddress.== infix(_:_:)(a1, a2) & 1) != 0)
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8));
}

uint64_t sub_1001480D0()
{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned int v3;
  NSString v4;
  unsigned int v5;
  unint64_t v6;

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v1 = (void *)qword_1011B7C08;
  v2 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v3 = objc_msgSend(v2, "isInternalBuild");

  if (v3)
  {
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v1, "BOOLForKey:", v4);

    if (v5)
    {
      v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8);
      if (v6 >> 60 != 15)
        __asm { BR              X10 }
    }
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

uint64_t sub_1001482C0()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(base64Encoded:options:)(0xD000000000000058, 0x8000000100EC8E40, 0);
  qword_1010F0070 = result;
  qword_1010F0078 = v1;
  return result;
}

id sub_1001482FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  id result;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_OWORD *)(v2 + 48) = xmmword_100E28DE0;
  *(_OWORD *)(v2 + 64) = xmmword_100E28DE0;
  *(_QWORD *)(v2 + 80) = 0xF000000000000000;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  v4 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  *(_QWORD *)(v2 + 112) = 0xF000000000000000;
  v5 = type metadata accessor for UUID(0);
  v37 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  *v6 = xmmword_100E22B20;
  v34 = v6;
  v35 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1) = xmmword_100E22B20;
  v36 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = xmmword_100E22B20;
  v7 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_QWORD *)(v7 + 32) = 0;
  v8 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2) = xmmword_100E22B20;
  v10 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed) = xmmword_100E22B20;
  v11 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo;
  *(_OWORD *)v11 = xmmword_100E22B20;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId) = xmmword_100E22B20;
  *(_WORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId) = 256;
  v12 = (_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = 1;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature) = xmmword_100E22B20;
  v13 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial;
  v14 = type metadata accessor for PeripheralConnectionMaterial(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1) = xmmword_100E22B20;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = _swiftEmptyDictionarySingleton;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId) = xmmword_100E22B20;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isPairingEligibilityDataComplete) = 0;
  v15 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_firmwareVersion;
  *(_DWORD *)v15 = 0;
  *(_BYTE *)(v15 + 4) = 1;
  v16 = v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  v17 = type metadata accessor for AccessoryProductInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic) = 0;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey) = xmmword_100E22B20;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey) = xmmword_100E22B20;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isSharedUnit) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_isManagedPeripheral) = 0;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  sub_10001BBBC(a1, a2);
  v18 = (unint64_t)sub_100B118D0();
  v19 = (unint64_t *)(v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
  *v19 = v18;
  v19[1] = v20;
  v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0)
    v21 = v18 & 0xFFFFFFFFFFFFLL;
  if (!v21)
  {
    v32 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7DF0, "serialNumber is not available.", 30, 2, _swiftEmptyArrayStorage);
    sub_10001BC14(a1, a2);
    sub_10001BC14(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    sub_10001EF3C(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
    sub_10001EF3C(*(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64));
    sub_10001EF3C(*(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 80));
    swift_bridgeObjectRelease();
    sub_10001EF3C(*(_QWORD *)(v3 + 104), *(_QWORD *)(v3 + 112));
    swift_bridgeObjectRelease();
    sub_100004048(v37, &qword_1010ED860);
    sub_10001EF3C(*(_QWORD *)v34, *((_QWORD *)v34 + 1));
    sub_10001EF3C(*(_QWORD *)v35, *(_QWORD *)(v35 + 8));
    sub_10001EF3C(*(_QWORD *)v36, *(_QWORD *)(v36 + 8));
    sub_100004048(v7, &qword_1010EC598);
    sub_100004048(v8, &qword_1010EC550);
    sub_10001EF3C(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
    sub_10001EF3C(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    sub_1000585F4(*(_QWORD *)v11, *(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32), *(_QWORD *)(v11 + 40), *(_QWORD *)(v11 + 48), *(_QWORD *)(v11 + 56), *(_QWORD *)(v11 + 64), *(_QWORD *)(v11 + 72));
    swift_bridgeObjectRelease();
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1 + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1 + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8));
    sub_100004048(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial, &qword_1010F08C8);
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId + 8));
    sub_100004048(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, (uint64_t *)&unk_10111C0A0);
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8));
    sub_10001EF3C(*(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8));
    swift_bridgeObjectRelease();
    v33 = type metadata accessor for AccessoryPairingInfo(0);
    swift_deallocPartialClassInstance(v3, v33, *(unsigned int *)(*(_QWORD *)v3 + 48), *(unsigned __int16 *)(*(_QWORD *)v3 + 52));
    return 0;
  }
  result = (id)MobileGestalt_get_current_device(v18);
  if (result)
  {
    v23 = result;
    MobileGestalt_get_uniqueChipID();

    v24 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v25 = (uint64_t *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *v25 = v24;
    v25[1] = v26;
    result = (id)MobileGestalt_get_current_device(v24);
    if (result)
    {
      v27 = result;
      MobileGestalt_get_chipID();

      v28 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v30 = v29;
      sub_10001BC14(a1, a2);
      v31 = (uint64_t *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
      *v31 = v28;
      v31[1] = v30;
      return (id)v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100148AD8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t result;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v4 = type metadata accessor for HashAlgorithm(0);
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  __chkstk_darwin(v4);
  v63 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.Encoding(0);
  v68 = *(_QWORD *)(v6 - 8);
  v69 = v6;
  v7 = __chkstk_darwin(v6);
  v67 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.info.getter(v7);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v10 = qword_1011B7DF0;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  v66 = xmmword_100E22B00;
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  if (a2 >> 60 == 15)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v13 = Data.hexString.getter(a1, a2);
    v14 = v15;
  }
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v12 + 64) = v16;
  if (v14)
    v17 = v13;
  else
    v17 = 0;
  v18 = 0xE000000000000000;
  if (v14)
    v18 = v14;
  *(_QWORD *)(v12 + 32) = v17;
  *(_QWORD *)(v12 + 40) = v18;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "E1 encryption key from server: %@.", 34, 2, v12);
  swift_bridgeObjectRelease();
  v19 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v19)
  {
    v20 = v19;
    v21 = a1;
    v22 = a2;
    if (a2 >> 60 == 15)
    {
      if (qword_1010E99A8 != -1)
        v19 = (id)swift_once(&qword_1010E99A8, sub_1001482C0);
      v22 = qword_1010F0078;
      if ((unint64_t)qword_1010F0078 >> 60 == 15)
      {
        v23 = static os_log_type_t.error.getter(v19);
        os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_1011B7DF0, "Invalid server public key.", 26, 2, _swiftEmptyArrayStorage);
LABEL_26:

        return 0;
      }
      v21 = qword_1010F0070;
      sub_10001BBBC(qword_1010F0070, qword_1010F0078);
    }
    sub_10001BD08(a1, a2);
    v24 = objc_msgSend(v20, "aa_primaryAppleAccount");
    if (v24)
    {
      v25 = v24;
      v26 = objc_msgSend(v24, "aa_personID");
      if (v26)
      {
        v27 = v26;
        v61 = v21;
        v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v30 = v29;

        v32 = static os_log_type_t.debug.getter(v31);
        v33 = qword_1011B7DF0;
        v34 = swift_allocObject(v11, 72, 7);
        *(_OWORD *)(v34 + 16) = v66;
        *(_QWORD *)(v34 + 56) = &type metadata for String;
        *(_QWORD *)(v34 + 64) = v16;
        *(_QWORD *)(v34 + 32) = v28;
        *(_QWORD *)(v34 + 40) = v30;
        *(_QWORD *)&v35 = swift_bridgeObjectRetain(v30).n128_u64[0];
        os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "DSID: %@.", 9, 2, v34, v35);
        v36 = swift_bridgeObjectRelease();
        v37 = v67;
        static String.Encoding.utf8.getter(v36);
        v38 = String.data(using:allowLossyConversion:)(v37, 0, v28, v30);
        v40 = v39;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v37, v69);
        if (v40 >> 60 != 15)
        {
          v44 = v63;
          v43 = v64;
          v45 = v65;
          (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, enum case for HashAlgorithm.sha256(_:), v65);
          v46 = Data.hash(algorithm:)(v44, v38, v40);
          v48 = v47;
          (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
          v49 = v38;
          v50 = v61;
          sub_10001BBBC(v61, v22);
          v51 = sub_1002FB894(v50, v22);
          v69 = v49;
          v53 = v52;
          sub_10001BBBC(v51, v52);
          *(_QWORD *)&v66 = objc_autoreleasePoolPush();
          v67 = v46;
          v68 = v48;
          sub_1007E5D00(&v70);
          objc_autoreleasePoolPop((void *)v66);
          sub_10001BC14(v51, v53);
          sub_1002F7040(v70, v71);

          sub_10001BC14(v50, v22);
          sub_10001BC14(v51, v53);
          sub_10001BC14(v67, v68);
          sub_10001EF3C(v69, v40);

          v55 = v70;
          v56 = v71;
          v57 = v62;
          v58 = *(_QWORD *)(v62 + 40);
          v59 = *(_QWORD *)(v62 + 48);
          *(_QWORD *)(v62 + 40) = v70;
          *(_QWORD *)(v57 + 48) = v56;
          sub_10001BBBC(v55, v56);
          sub_10001EF3C(v58, v59);
          return v55;
        }

        v41 = v61;
        goto LABEL_25;
      }

    }
    v42 = static os_log_type_t.error.getter(v24);
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1011B7DF0, "Failed to obtain DSID from account.", 35, 2, _swiftEmptyArrayStorage);
    v41 = v21;
LABEL_25:
    sub_10001BC14(v41, v22);
    goto LABEL_26;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000039, 0x8000000100EC8D80, "searchpartyd/AccessoryPairingInfo.swift", 39, 2, 173, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001490B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE v55[152];

  v5 = v3[8];
  if (v5 >> 60 == 15 || (v6 = v3[6], v6 >> 60 == 15))
  {
    v7 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DF0, "encryptedBlobE2 is not available.", 33, 2, _swiftEmptyArrayStorage);
LABEL_6:
    sub_10014A1DC(&v38);
    goto LABEL_7;
  }
  v9 = v3[7];
  v10 = v3[5];
  v11 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
  if (!v11 || (v12 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8)) == 0)
  {
    sub_10001BD08(v3[7], v3[8]);
    v29 = sub_10001BD08(v10, v6);
    v30 = static os_log_type_t.error.getter(v29);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7DF0, "Owner device info is not available.", 35, 2, _swiftEmptyArrayStorage);
    sub_10001EF3C(v10, v6);
    sub_10001EF3C(v9, v5);
    goto LABEL_6;
  }
  v36 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
  v37 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
  sub_10001BD08(v9, v5);
  sub_10001BD08(v10, v6);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v32 = static os_log_type_t.debug.getter(v15);
  v34 = v11;
  v35 = v10;
  v33 = v12;
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v31 = qword_1011B7DF0;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  sub_10001BBBC(v9, v5);
  v18 = Data.base64EncodedString(options:)(0);
  sub_10001EF3C(v9, v5);
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(Swift::String *)(v17 + 32) = v18;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v31, "E2: %@", 6, 2, v17);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
  v20 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
  v21 = v3[2];
  v22 = v3[3];
  v23 = v3[11];
  v24 = v3[12];
  v25 = v3[13];
  v26 = v3[14];
  *(_QWORD *)&v38 = a1;
  *((_QWORD *)&v38 + 1) = a2;
  v39 = v9;
  v40 = v5;
  v41 = v36;
  v42 = v33;
  v43 = v37;
  v44 = v34;
  v45 = v19;
  v46 = v20;
  v47 = v21;
  v48 = v22;
  v49 = v35;
  v50 = v6;
  v51 = v23;
  v52 = v24;
  v53 = v25;
  v27 = v24;
  v28 = v25;
  v54 = v26;
  SharingCircleWildAdvertisementKey.init(key:)(&v38);
  sub_10001BBBC(a1, a2);
  swift_bridgeObjectRetain(v20);
  sub_10001BBBC(v21, v22);
  swift_bridgeObjectRetain(v27);
  sub_10001BD08(v28, v26);
LABEL_7:
  sub_10014A1F8((uint64_t)&v38, (uint64_t)v55);
  return sub_10014A1F8((uint64_t)v55, a3);
}

uint64_t sub_100149420@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = v2[10];
  if (v4 >> 60 == 15)
  {
    v5 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    result = os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7DF0, "encryptedBlobE4 is not available.", 33, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v7 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    if (v7 && *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8))
    {
      v8 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8);
      if (v8 >> 60 != 15)
      {
        v27 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
        v28 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
        v18 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
        v25 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
        v26 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
        v21 = v2[11];
        v22 = v2[12];
        v23 = v2[13];
        v24 = v2[14];
        v29 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
        v30 = v2[9];
        sub_10001BD08(v30, v4);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v29);
        sub_10001BD08(v25, v8);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v18);
        result = sub_10001BD08(v23, v24);
        v17 = v26;
        v14 = v27;
        v19 = v25;
        v16 = v28;
        v15 = v29;
        v20 = v30;
        goto LABEL_16;
      }
      v9 = v2[9];
      v10 = sub_10001BBBC(v9, v2[10]);
      v11 = static os_log_type_t.error.getter(v10);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7DF0, "Missing pairing status!", 23, 2, _swiftEmptyArrayStorage);
    }
    else
    {
      v9 = v2[9];
      v12 = sub_10001BBBC(v9, v2[10]);
      v13 = static os_log_type_t.error.getter(v12);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DF0, "Owner device info is not available.", 35, 2, _swiftEmptyArrayStorage);
    }
    result = sub_10001EF3C(v9, v4);
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v7 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v8 = 0;
  v20 = 0;
  v4 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
LABEL_16:
  *a2 = v14;
  a2[1] = v15;
  a2[2] = v16;
  a2[3] = v7;
  a2[4] = v17;
  a2[5] = v18;
  a2[6] = v19;
  a2[7] = v8;
  a2[8] = v20;
  a2[9] = v4;
  a2[10] = v21;
  a2[11] = v22;
  a2[12] = v23;
  a2[13] = v24;
  return result;
}

uint64_t sub_1001496E8()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001EF3C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_10001EF3C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_10001EF3C(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease();
  sub_10001EF3C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, &qword_1010ED860);
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_encryptionKeyK1 + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8));
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2, &qword_1010EC598);
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3, &qword_1010EC550);
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS2 + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serverSeed + 8));
  sub_1000585F4(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 56), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_initialPairingInfo + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1 + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1 + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8));
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial, &qword_1010F08C8);
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId + 8));
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, (uint64_t *)&unk_10111C0A0);
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8));
  sub_10001EF3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey), *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100149A70()
{
  uint64_t v0;

  sub_1001496E8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100149A94()
{
  return type metadata accessor for AccessoryPairingInfo(0);
}

uint64_t type metadata accessor for AccessoryPairingInfo(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F00A8, (uint64_t)&nominal type descriptor for AccessoryPairingInfo);
}

void sub_100149AB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[56];

  v8[0] = &unk_100E28E58;
  v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v8[2] = &unk_100E28E70;
  v8[3] = &unk_100E28E70;
  v8[4] = &unk_100E28E70;
  v8[5] = &unk_100E28E88;
  v8[6] = &unk_100E28E70;
  v8[7] = &unk_100E28E88;
  sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v8[8] = *(_QWORD *)(v2 - 8) + 64;
    v8[9] = &unk_100E28E70;
    v8[10] = &unk_100E28E70;
    v8[11] = &unk_100E28E70;
    v8[12] = &unk_100E28EA0;
    v8[13] = &unk_100E28EA0;
    v8[14] = &unk_100E28E70;
    v8[15] = &unk_100E28E70;
    v8[16] = &unk_100E28EB8;
    v8[17] = &unk_100E28E88;
    v8[18] = &unk_100E28E88;
    v8[19] = &unk_100E28ED0;
    v8[20] = &unk_100E28E70;
    v8[21] = &unk_100E28E70;
    v8[22] = &unk_100E28E70;
    v8[23] = &unk_100E28E70;
    v8[24] = &unk_100E28E70;
    v8[25] = &unk_100E28E70;
    v8[26] = &unk_100E28E70;
    v8[27] = &unk_100E28EE8;
    v8[28] = &unk_100E28E88;
    v8[29] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[30] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[31] = &unk_100E28E70;
    v8[32] = &unk_100E28E70;
    v8[33] = &unk_100E28E70;
    v8[34] = &unk_100E28E70;
    v8[35] = &unk_100E28E70;
    v8[36] = &unk_100E28E70;
    sub_100149C5C(319, &qword_1010F00B8, type metadata accessor for PeripheralConnectionMaterial);
    if (v5 <= 0x3F)
    {
      v8[37] = *(_QWORD *)(v4 - 8) + 64;
      v8[38] = &unk_100E28E70;
      v8[39] = &unk_100E28E70;
      v8[40] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[41] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[42] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[43] = &unk_100E28E70;
      v8[44] = &unk_100E28F00;
      v8[45] = &unk_100E28F18;
      sub_100149C5C(319, (unint64_t *)&qword_1010F00C0, type metadata accessor for AccessoryProductInfo);
      if (v7 <= 0x3F)
      {
        v8[46] = *(_QWORD *)(v6 - 8) + 64;
        v8[47] = &unk_100E28F00;
        v8[48] = &unk_100E28E70;
        v8[49] = &unk_100E28E70;
        v8[50] = &unk_100E28E70;
        v8[51] = &unk_100E28E70;
        v8[52] = &unk_100E28F00;
        v8[53] = &unk_100E28F00;
        v8[54] = &unk_100E28F00;
        v8[55] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_updateClassMetadata2(a1, 256, 56, v8, a1 + 80);
      }
    }
  }
}

void sub_100149C5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t type metadata accessor for PeripheralConnectionMaterial(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F0868, (uint64_t)&nominal type descriptor for PeripheralConnectionMaterial);
}

uint64_t *sub_100149CBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_10001BBBC(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t sub_100149D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100149DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001BBBC(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t sub_100149E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_10001BBBC(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_10001BC14(v12, v13);
  return a1;
}

uint64_t sub_100149E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100149EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001BC14(v8, v9);
  return a1;
}

uint64_t sub_100149F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100149F58);
}

uint64_t sub_100149F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t sub_100149FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100149FF4);
}

uint64_t sub_100149FF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_10014A07C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for MACAddress(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E28E58;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10014A0EC()
{
  return sub_100006204(&qword_1010F08A0, type metadata accessor for PeripheralConnectionMaterial, (uint64_t)&unk_100E28F50);
}

unint64_t sub_10014A118()
{
  unint64_t result;

  result = qword_1010F08B0;
  if (!qword_1010F08B0)
  {
    result = swift_getWitnessTable(&unk_100E290F4, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F08B0);
  }
  return result;
}

uint64_t sub_10014A15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeripheralConnectionMaterial(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014A1A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PeripheralConnectionMaterial(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_10014A1DC(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_10014A1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F08D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for PeripheralConnectionMaterial.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10014A28C + 4 * byte_100E28DF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10014A2C0 + 4 * byte_100E28DF0[v4]))();
}

uint64_t sub_10014A2C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014A2C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014A2D0);
  return result;
}

uint64_t sub_10014A2DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014A2E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10014A2E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014A2F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeripheralConnectionMaterial.CodingKeys()
{
  return &type metadata for PeripheralConnectionMaterial.CodingKeys;
}

unint64_t sub_10014A310()
{
  unint64_t result;

  result = qword_1010F08D8;
  if (!qword_1010F08D8)
  {
    result = swift_getWitnessTable(&unk_100E290CC, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F08D8);
  }
  return result;
}

unint64_t sub_10014A358()
{
  unint64_t result;

  result = qword_1010F08E0;
  if (!qword_1010F08E0)
  {
    result = swift_getWitnessTable(&unk_100E2903C, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F08E0);
  }
  return result;
}

unint64_t sub_10014A3A0()
{
  unint64_t result;

  result = qword_1010F08E8;
  if (!qword_1010F08E8)
  {
    result = swift_getWitnessTable(&unk_100E29064, &type metadata for PeripheralConnectionMaterial.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F08E8);
  }
  return result;
}

uint64_t sub_10014A3E4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x73736572646461 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73736572646461, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 7041641 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(7041641, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10014A4C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10014A4F4 + 4 * byte_100E29150[a1]))(0x646563726F66, 0xE600000000000000);
}

uint64_t sub_10014A4F4()
{
  return 0x646572696170;
}

uint64_t sub_10014A504()
{
  return 0x656C756465686373;
}

uint64_t sub_10014A520()
{
  return 0x6F43657461647075;
}

uint64_t sub_10014A544()
{
  return 0x6552746E65696C63;
}

unint64_t sub_10014A568()
{
  return 0xD000000000000014;
}

uint64_t sub_10014A584()
{
  return 0x6465687361656CLL;
}

uint64_t sub_10014A59C()
{
  return 0x656E6E6F63736964;
}

uint64_t sub_10014A5BC()
{
  return 0x656369766544656DLL;
}

unint64_t sub_10014A5E0()
{
  return 0xD000000000000019;
}

BOOL sub_10014A600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  id v10;
  unsigned int v11;
  NSString v12;
  unsigned __int8 v13;
  int v14;
  void *v15;
  id v16;
  unsigned int v17;
  NSString v18;
  unsigned __int8 v19;
  _BOOL4 v22;
  _BOOL4 v23;
  int v24;
  _BYTE v25[11];

  v1 = v0;
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v2 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v25[3], v2);
  v3 = swift_release();
  v4 = v25[3];
  v5 = *(_QWORD *)(v0 + 176);
  v6 = static os_log_type_t.default.getter(v3);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v7 = qword_1011B7DE0;
  if (os_log_type_enabled((os_log_t)qword_1011B7DE0, v6))
  {
    swift_retain_n(v1, 2);
    v8 = swift_slowAlloc(20, -1);
    *(_DWORD *)v8 = 67109632;
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v9 = (void *)qword_1011B7C08;
    v10 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v11 = objc_msgSend(v10, "isInternalBuild");

    if (v11)
    {
      v12 = String._bridgeToObjectiveC()();
      v13 = objc_msgSend(v9, "BOOLForKey:", v12);
      swift_release();

      if ((v13 & 1) != 0)
      {
        v14 = 1;
LABEL_13:
        v24 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v8 + 4, v8 + 8);
        swift_release();
        *(_WORD *)(v8 + 8) = 1024;
        v23 = v4 == 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v8 + 10, v8 + 14);
        *(_WORD *)(v8 + 14) = 1024;
        v22 = v5 == 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v8 + 16, v8 + 20);
        _os_log_impl((void *)&_mh_execute_header, v7, v6, "isFirmwareUpdateAllowed: firmwareUpdateOverride: %{BOOL}d, isThisMeDevice: %{BOOL}d, singleDevice: %{BOOL}d.", (uint8_t *)v8, 0x14u);
        swift_slowDealloc(v8, -1, -1);
        goto LABEL_14;
      }
    }
    else
    {
      swift_release();
    }
    v14 = 0;
    goto LABEL_13;
  }
LABEL_14:
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v15 = (void *)qword_1011B7C08;
  v16 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v17 = objc_msgSend(v16, "isInternalBuild");

  if (v17)
  {
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v15, "BOOLForKey:", v18);

    if ((v19 & 1) != 0)
      return 1;
  }
  return v4 == 1 || v5 == 1;
}

uint64_t sub_10014A958(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;

  v2[11] = a1;
  v2[12] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v3);
  v2[14] = swift_task_alloc(v3);
  return swift_task_switch(sub_10014A9C4, v1, 0);
}

uint64_t sub_10014A9C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96) + 144;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  v2 = *(_QWORD *)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v3 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRetain(v2);
    v4 = sub_100003FB0(v3);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v0 + 88);
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
      *(_QWORD *)(v0 + 120) = v7;
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess(v1, v0 + 40, 33, 0);
      sub_100102FD0(v6);
      swift_endAccess(v0 + 40);
      swift_release();
      return swift_task_switch(sub_10014AAD4, v7, 0);
    }
    swift_bridgeObjectRelease();
  }
  v9 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014AAD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[14];
  v3 = v1[15];
  v5 = v1[12];
  v4 = v1[13];
  static DispatchTime.now()(a1);
  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 0, 1, v6);
  sub_100005CF0(v2, v4, &qword_1010EBE20);
  v7 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess(v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, v1 + 8, 33, 0);
  sub_100033150(v4, v7);
  swift_endAccess(v1 + 8);
  return swift_task_switch(sub_10014AB9C, v5, 0);
}

uint64_t sub_10014AB9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[16] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[17] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10014AC08;
  return sub_100CD63AC(v0[15]);
}

uint64_t sub_10014AC08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_10014AC68, v1, 0);
}

uint64_t sub_10014AC68()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10014ACA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[24];

  v3 = v1 + 152;
  swift_beginAccess(v1 + 152, v9, 0, 0);
  v4 = *(_QWORD *)(v1 + 152);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain(v4);
    v5 = sub_100003FB0(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess(v3, v8, 33, 0);
      sub_100102FD0(a1);
      swift_endAccess(v8);
      swift_release();
      type metadata accessor for Transaction(0);
      swift_retain();
      static Transaction.asyncTask(name:block:)("Firmware.completeEvent", 22, 2, &unk_1010F0B60, v7);
      swift_release_n(v7, 2);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10014ADA4(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;

  v1[5] = a1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[6] = swift_task_alloc(v3);
  v1[7] = swift_task_alloc(v3);
  return swift_task_switch(sub_10014AE14, a1, 0);
}

uint64_t sub_10014AE14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[6];
  v2 = v1[7];
  v4 = v1[5];
  static DispatchTime.now()(a1);
  v5 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
  sub_100005CF0(v2, v3, &qword_1010EBE20);
  v6 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, v1 + 2, 33, 0);
  sub_100033150(v3, v6);
  swift_endAccess(v1 + 2);
  return swift_task_switch(sub_10014AED4, 0, 0);
}

uint64_t sub_10014AED4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[8] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[9] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10014AF40;
  return sub_100CD63AC(v0[5]);
}

uint64_t sub_10014AF40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 48);
  v2 = *(_QWORD *)(*v0 + 56);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

_QWORD *sub_10014AFAC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t updated;
  _UNKNOWN **v41;

  v2 = v1;
  v38 = a1;
  v3 = sub_10001A9A8(&qword_101108020);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  __chkstk_darwin(v3);
  v35 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v2);
  v18 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v18);
  v2[14] = WorkItemQueue.__allocating_init(identifier:)(v17);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v19 = qword_1011B7160;
  v2[15] = qword_1011B7160;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  v39[0] = _swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v39, v22, v23, v5, v21);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002CLL, 0x8000000100EC9040, v10, v7, v14, 0);
  v2[18] = _swiftEmptyDictionarySingleton;
  v2[19] = _swiftEmptyDictionarySingleton;
  v2[21] = 0;
  v2[22] = 0;
  v2[20] = 0;
  v25 = v38;
  v2[16] = v24;
  v2[17] = v25;
  updated = type metadata accessor for FirmwareUpdateService();
  v41 = &off_10105A128;
  v39[0] = v2;
  __chkstk_darwin(updated);
  *(&v35 - 2) = (char *)v39;
  *(&v35 - 1) = (char *)v19;
  swift_retain();
  swift_retain();
  v26 = v35;
  v27 = v37;
  OS_dispatch_queue.sync<A>(execute:)(sub_100150D80, &v35 - 4, v37);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v28 = swift_retain();
  v29 = AnyCurrentValuePublisher.publisher.getter(v28);
  swift_release();
  v39[0] = v29;
  v30 = swift_allocObject(&unk_10105A170, 24, 7);
  swift_weakInit(v30 + 16, v2);
  v31 = sub_10001A9A8(&qword_1011194D0);
  v32 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v33 = Publisher<>.sink(receiveValue:)(sub_100150DBC, v30, v31, v32);
  swift_release();
  swift_release();
  swift_release();
  v2[21] = v33;
  swift_release();
  return v2;
}

uint64_t sub_10014B400(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if (v2 == 1)
    {
      type metadata accessor for Transaction(0);
      swift_retain(v5);
      static Transaction.asyncTask(name:block:)("Firmware.meDeviceChanged", 24, 2, &unk_1010F0B18, v5);
      swift_release(v5);
    }
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10014B498(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_10001A9A8(&qword_1010ED860);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  if (*a1 != *(_QWORD *)(a2 + 176))
  {
    v9 = static os_log_type_t.default.getter(result);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v10 = qword_1011B7DE0;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v12 + 56) = &type metadata for Int;
    *(_QWORD *)(v12 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v12 + 32) = v8;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "connectableDevicesChanged: %d", v14);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + 176) = v8;
    if (v8 == 1)
    {
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
      sub_10014BF94(9, (uint64_t)v7);
      return sub_100004048((uint64_t)v7, &qword_1010ED860);
    }
  }
  return result;
}

uint64_t sub_10014B608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10014B664, 0, 0);
}

uint64_t sub_10014B664()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return swift_task_switch(sub_10014B6C0, v1, 0);
}

uint64_t sub_10014B6C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_10014BF94(8, v1);
  sub_100004048(v1, &qword_1010ED860);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014B710()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD aBlock[6];
  _QWORD *v11;

  v1 = v0;
  v2 = *v0;
  v11 = _swiftEmptyArrayStorage;
  v3 = v0[16];
  v4 = swift_allocObject(&unk_10105A170, 24, 7);
  swift_weakInit(v4 + 16, v1);
  v5 = (_QWORD *)swift_allocObject(&unk_10105A288, 40, 7);
  v5[2] = v4;
  v5[3] = &v11;
  v5[4] = v2;
  v6 = swift_allocObject(&unk_10105A2B0, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_1001517C0;
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10105A2C8;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v3, v7);
  _Block_release(v7);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v6, "", 115, 158, 39, 1);
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = v11;
    swift_release();
    return (uint64_t)v9;
  }
  return result;
}

uint64_t sub_10014B874(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = qword_1010E9D08;
    swift_retain();
    if (v5 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v6 = sub_100C1B664(v10);
    swift_bridgeObjectRelease();
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v7 = sub_100C1B664(v10);
    swift_bridgeObjectRelease();
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v8 = sub_100C1B650(v10);
    result = swift_bridgeObjectRelease();
    if ((unsigned __int128)(v8 * (__int128)60) >> 64 == (60 * v8) >> 63)
    {
      v9 = sub_100C5A718((double)v6 * 60.0, (double)v7 * 60.0, (double)(60 * v8));
      swift_release();
      swift_release();
      *a2 = v9;
      return swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10014BA20(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 40) = v2;
  *(_BYTE *)(v3 + 120) = a1;
  v4 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 64) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 72) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 80) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v7);
  return swift_task_switch(sub_10014BAC4, v2, 0);
}

uint64_t sub_10014BAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v0 + 16) = &_swiftEmptySetSingleton;
  v1 = sub_10014A4C4(*(_BYTE *)(v0 + 120));
  if (v1 == 0x646563726F66 && v2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v2, 0x646563726F66, 0xE600000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      v5 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v6 = (_QWORD *)swift_task_alloc(v5);
      *(_QWORD *)(v0 + 96) = v6;
      v7 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
      *v6 = v0;
      v6[1] = sub_10014BD64;
      return unsafeBlocking<A>(_:)(v0 + 24, sub_100151778, *(_QWORD *)(v0 + 40), v7);
    }
  }
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 48);
  sub_10000F9B8(*(_QWORD *)(v0 + 32), v11, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 48), &qword_1010ED860);
    v12 = &_swiftEmptySetSingleton;
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    v15 = *(char **)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 32))(v13, *(_QWORD *)(v0 + 48), v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v13, v17);
    sub_100A09F38(v14, v15);
    v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v18(v14, v17);
    v18(v13, v17);
    v12 = *(_QWORD **)(v0 + 16);
  }
  *(_QWORD *)(v0 + 104) = v12;
  if (v12[2])
  {
    v19 = (_QWORD *)swift_task_alloc(dword_1010F0934);
    *(_QWORD *)(v0 + 112) = v19;
    *v19 = v0;
    v19[1] = sub_10014BEDC;
    return sub_10014E4CC((uint64_t)v12, *(_BYTE *)(v0 + 120));
  }
  else
  {
    v20 = swift_bridgeObjectRelease();
    v21 = static os_log_type_t.default.getter(v20);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7DE0, "No beacons eligible for firmware update. Not posting notification.", 66, 2, _swiftEmptyArrayStorage);
    v22 = *(_QWORD *)(v0 + 80);
    v23 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10014BD64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_10014BDC4, v1, 0);
}

uint64_t sub_10014BDC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 104) = v1;
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1010F0934);
    *(_QWORD *)(v0 + 112) = v2;
    *v2 = v0;
    v2[1] = sub_10014BEDC;
    return sub_10014E4CC(v1, *(_BYTE *)(v0 + 120));
  }
  else
  {
    v4 = swift_bridgeObjectRelease();
    v5 = static os_log_type_t.default.getter(v4);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7DE0, "No beacons eligible for firmware update. Not posting notification.", 66, 2, _swiftEmptyArrayStorage);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10014BEDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10014BF3C, v1, 0);
}

uint64_t sub_10014BF3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014BF94(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char *v80;
  _QWORD *v81;
  uint64_t aBlock;
  unint64_t v83;
  uint64_t (*v84)(uint64_t);
  void *v85;
  uint64_t (*v86)();
  uint64_t v87;

  v73 = a2;
  v79 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v74 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v70 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v70 + 64);
  __chkstk_darwin(v9);
  v71 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTimeInterval(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for DispatchTime(0);
  v77 = *(_QWORD *)(v15 - 8);
  v78 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v76 = (char *)&v62 - v20;
  __chkstk_darwin(v19);
  v80 = (char *)&v62 - v21;
  v72 = v2;
  v22 = sub_10014A600();
  if (v22)
  {
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 0x7365547265646E75;
    v83 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v81, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    result = swift_bridgeObjectRelease();
    if ((v81 & 1) == 0)
    {
      v69 = v6;
      static DispatchTime.now()(result);
      v24 = sub_10014A4C4(v79);
      v68 = v7;
      if (v24 == 0x646572696170 && v25 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, 0x646572696170, 0xE600000000000000, 0);
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
        {
LABEL_17:
          v45 = v72;
          v67 = *(_QWORD *)(v72 + 128);
          v46 = v76;
          (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v76, v80, v78);
          v47 = swift_allocObject(&unk_10105A170, 24, 7);
          swift_weakInit(v47 + 16, v45);
          v48 = v71;
          sub_10000F9B8(v73, v71, &qword_1010ED860);
          v49 = *(unsigned __int8 *)(v70 + 80);
          v50 = (v49 + 17) & ~v49;
          v51 = (v10 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
          v52 = swift_allocObject(&unk_10105A1E8, v51 + 8, v49 | 7);
          *(_BYTE *)(v52 + 16) = v79;
          sub_100005CF0(v48, v52 + v50, &qword_1010ED860);
          *(_QWORD *)(v52 + v51) = v47;
          v86 = sub_100151608;
          v87 = v52;
          aBlock = (uint64_t)_NSConcreteStackBlock;
          v83 = 1107296256;
          v84 = sub_100016FB8;
          v85 = &unk_10105A200;
          v53 = _Block_copy(&aBlock);
          v54 = swift_retain();
          v55 = v74;
          static DispatchQoS.unspecified.getter(v54);
          v81 = _swiftEmptyArrayStorage;
          v56 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v57 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v58 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          v59 = v69;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v57, v58, v3, v56);
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v46, v55, v59, v53);
          _Block_release(v53);
          (*(void (**)(char *, uint64_t))(v4 + 8))(v59, v3);
          (*(void (**)(char *, uint64_t))(v75 + 8))(v55, v68);
          v60 = v78;
          v61 = *(void (**)(char *, uint64_t))(v77 + 8);
          v61(v46, v78);
          v61(v80, v60);
          swift_release();
          return swift_release();
        }
      }
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v28 = sub_100C1B650(aBlock);
      v29 = swift_bridgeObjectRelease();
      v30 = 60 * v28;
      if ((unsigned __int128)(v28 * (__int128)60) >> 64 == (60 * v28) >> 63)
      {
        v66 = v4;
        v67 = v3;
        v65 = static os_log_type_t.default.getter(v29);
        if (qword_1010EA300 == -1)
        {
LABEL_16:
          v64 = qword_1011B7DE0;
          v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v32 = swift_allocObject(v31, 112, 7);
          *(_OWORD *)(v32 + 16) = xmmword_100E22B10;
          aBlock = v30;
          v63 = v30;
          v33 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v35 = v34;
          *(_QWORD *)(v32 + 56) = &type metadata for String;
          v36 = sub_10001AA00();
          *(_QWORD *)(v32 + 64) = v36;
          *(_QWORD *)(v32 + 32) = v33;
          *(_QWORD *)(v32 + 40) = v35;
          v37 = sub_10014A4C4(v79);
          *(_QWORD *)(v32 + 96) = &type metadata for String;
          *(_QWORD *)(v32 + 104) = v36;
          *(_QWORD *)(v32 + 72) = v37;
          *(_QWORD *)(v32 + 80) = v38;
          os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v64, "Schedule a firmware update check %@ seconds later (reason: %@)", 62, 2, v32);
          v39 = swift_bridgeObjectRelease();
          static DispatchTime.now()(v39);
          *v14 = v63;
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchTimeInterval.seconds(_:), v11);
          v40 = v76;
          + infix(_:_:)(v18, v14);
          (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
          v42 = v77;
          v41 = v78;
          v43 = *(void (**)(char *, uint64_t))(v77 + 8);
          v43(v18, v78);
          v44 = v80;
          v43(v80, v41);
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v44, v40, v41);
          v3 = v67;
          v4 = v66;
          goto LABEL_17;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once(&qword_1010EA300, sub_100B5E204);
      goto LABEL_16;
    }
  }
  else
  {
    v26 = static os_log_type_t.default.getter(v22);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    return os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7DE0, "initiateFirmwareUpdate: neither Me nor only iOS device. Firmware update is not allowed.", 87, 2, _swiftEmptyArrayStorage);
  }
  return result;
}

uint64_t sub_10014C6EC(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Strong;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _BYTE v44[24];

  v6 = sub_10001A9A8(&qword_1010ED860);
  v38 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v38 + 64);
  v8 = __chkstk_darwin(v6);
  v40 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v37 - v10;
  v43 = a3 + 16;
  v42 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v41 = qword_1011B7DE0;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  v14 = sub_10014A4C4(a1);
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v13 + 64) = v17;
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  v39 = a2;
  sub_10000F9B8(a2, (uint64_t)v11, &qword_1010ED860);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, v18);
  if ((_DWORD)v20 == 1)
  {
    sub_100004048((uint64_t)v11, &qword_1010ED860);
    v21 = (uint64_t *)(v13 + 72);
    *(_QWORD *)(v13 + 96) = &type metadata for String;
    *(_QWORD *)(v13 + 104) = v17;
  }
  else
  {
    v22 = a1;
    v23 = UUID.uuidString.getter(v20);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v18);
    v21 = (uint64_t *)(v13 + 72);
    *(_QWORD *)(v13 + 96) = &type metadata for String;
    *(_QWORD *)(v13 + 104) = v17;
    if (v25)
    {
      *v21 = v23;
      a1 = v22;
      v26 = v43;
      v27 = v42;
      v28 = v41;
      goto LABEL_9;
    }
    a1 = v22;
  }
  v26 = v43;
  v27 = v42;
  v28 = v41;
  *v21 = 1701736302;
  v25 = 0xE400000000000000;
LABEL_9:
  *(_QWORD *)(v13 + 80) = v25;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Initiate firmware update check (reason: %@, forced beacons: %@)", 63, 2, v13);
  swift_bridgeObjectRelease();
  swift_beginAccess(v26, v44, 0, 0);
  Strong = swift_weakLoadStrong(v26);
  if (Strong)
  {
    v30 = Strong;
    type metadata accessor for Transaction(0);
    v31 = v40;
    sub_10000F9B8(v39, v40, &qword_1010ED860);
    v32 = *(unsigned __int8 *)(v38 + 80);
    v33 = (v32 + 25) & ~v32;
    v34 = swift_allocObject(&unk_10105A238, v33 + v7, v32 | 7);
    *(_QWORD *)(v34 + 16) = v30;
    *(_BYTE *)(v34 + 24) = a1;
    sub_100005CF0(v31, v34 + v33, &qword_1010ED860);
    swift_retain();
    static Transaction.asyncTask(name:block:)("Firmware.initiateFirmwareUpdate", 31, 2, &unk_1010F0B38, v34);
    swift_release();
    return swift_release();
  }
  else
  {
    v36 = static os_log_type_t.default.getter(0);
    return os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_1011B7DE0, "Not inititating firmware check. Not posting notification.", 57, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_10014CA10(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  v4 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 32) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  *(_QWORD *)(v3 + 40) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10014CA98, 0, 0);
}

uint64_t sub_10014CA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  sub_10000F9B8(v6, v1, &qword_1010ED860);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 25) & ~v8;
  v10 = swift_allocObject(&unk_10105A260, v9 + v2, v8 | 7);
  *(_QWORD *)(v10 + 16) = v7;
  *(_BYTE *)(v10 + 24) = v5;
  sub_100005CF0(v1, v10 + v9, &qword_1010ED860);
  v11 = swift_retain();
  UUID.init()(v11);
  v12 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v3, &unk_1010F0B48, v10, &unk_1010F0B50, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v12);
  swift_release();
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014CBB0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010F0924);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100030654;
  return sub_10014BA20(a2, a3);
}

uint64_t sub_10014CC14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v25 = a1;
  v3 = type metadata accessor for BeaconObservation(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v19 - v8;
  v10 = type metadata accessor for UUID(0);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v24(v9, a1, v10);
  static Date.trustedNow.getter((uint64_t)&v9[*(int *)(v3 + 20)]);
  v9[*(int *)(v3 + 24)] = 1;
  v20 = *(_QWORD *)(v1 + 120);
  v11 = v20;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 32) & ~v13;
  v22 = v14 + *(_QWORD *)(v4 + 72);
  v23 = v12;
  v15 = v13 | 7;
  v16 = swift_allocObject(v12, v22, v13 | 7);
  v21 = xmmword_100E22B00;
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v9, v16 + v14, type metadata accessor for BeaconObservation);
  type metadata accessor for Transaction(0);
  v32 = v11;
  v33 = v16;
  v34 = 0;
  v35 = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, v31, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  v24(v7, v25, v10);
  static Date.trustedNow.getter((uint64_t)&v7[*(int *)(v3 + 20)]);
  v7[*(int *)(v3 + 24)] = 12;
  v17 = swift_allocObject(v23, v22, v15);
  *(_OWORD *)(v17 + 16) = v21;
  sub_10005972C((uint64_t)v7, v17 + v14, type metadata accessor for BeaconObservation);
  v27 = v20;
  v28 = v17;
  v29 = 0;
  v30 = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, v26, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconObservation);
  return sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconObservation);
}

uint64_t sub_10014CE4C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[24] = a1;
  v2[25] = v1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v2[26] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[27] = v4;
  v2[28] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ED860);
  v2[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v2[30] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[31] = v7;
  v2[32] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v2[33] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[34] = v9;
  v2[35] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v2[36] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[37] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v12);
  v2[39] = swift_task_alloc(v12);
  v2[40] = swift_task_alloc(v12);
  v2[41] = swift_task_alloc(v12);
  v2[42] = swift_task_alloc(v12);
  v2[43] = swift_task_alloc(v12);
  return swift_task_switch(sub_10014CF88, v1, 0);
}

uint64_t sub_10014CF88()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 v2;
  id v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (__cdecl *v38)();

  v1 = sub_10001B664((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 168) = v1;
  *(_QWORD *)(v0 + 352) = v1;
  v2 = sub_10014A600();
  if (!v2)
  {
    v37 = v1;
    v21 = static os_log_type_t.default.getter(v2);
    v22 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v23 = (void *)static OS_os_log.default.getter(v22);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v23, "enabledFirmwareUpdateIdentifiers: neither Me nor only iOS device. Firmware update is not allowed.", 97, 2, _swiftEmptyArrayStorage);

LABEL_8:
    v24 = *(_QWORD *)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 320);
    v25 = *(_QWORD *)(v0 + 328);
    v28 = *(_QWORD *)(v0 + 304);
    v27 = *(_QWORD *)(v0 + 312);
    v29 = *(_QWORD *)(v0 + 280);
    v30 = *(_QWORD *)(v0 + 256);
    v31 = *(_QWORD *)(v0 + 224);
    v32 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v37);
  }
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);

  if (v5)
  {
    v6 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 120);
    swift_retain();
    swift_bridgeObjectRetain(v6);
    v9 = sub_1001512E0(v8, v7, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100150E0C);
    swift_release();
    if (*(_QWORD *)(v9 + 16))
    {
      v10 = swift_bridgeObjectRelease();
      v11 = static os_log_type_t.default.getter(v10);
      if (qword_1010EA300 != -1)
        swift_once(&qword_1010EA300, sub_100B5E204);
      v12 = *(_QWORD *)(v0 + 288);
      v13 = qword_1011B7DE0;
      v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v15 = swift_allocObject(v14, 72, 7);
      *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
      v16 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = swift_retain();
      v18 = Set.description.getter(v17, v12, v16);
      v20 = v19;
      swift_release();
      *(_QWORD *)(v15 + 56) = &type metadata for String;
      *(_QWORD *)(v15 + 64) = sub_10001AA00();
      *(_QWORD *)(v15 + 32) = v18;
      *(_QWORD *)(v15 + 40) = v20;
      os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v13, "Bypassing disableFirmwareUpdate user default because of a forced firmware update for beacon/s %@", 96, 2, v15);
      swift_bridgeObjectRelease();
      v37 = v9;
    }
    else
    {
      v35 = swift_release();
      v36 = static os_log_type_t.default.getter(v35);
      if (qword_1010EA300 != -1)
        swift_once(&qword_1010EA300, sub_100B5E204);
      v37 = v1;
      os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_1011B7DE0, "Firmware updates are disabled and no eligible forced updates found.", 67, 2, _swiftEmptyArrayStorage);
    }
    goto LABEL_8;
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v38 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v34 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 360) = v34;
    *v34 = v0;
    v34[1] = sub_10014D3B8;
    return v38();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10014D3B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014D418, v3, 0);
}

uint64_t sub_10014D418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (v1)
    return swift_task_switch(sub_10014D570, *(_QWORD *)(v0 + 368), 0);
  v4 = static os_log_type_t.default.getter(v2);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7DE0, "No BeaconStoreActor available.", 30, 2, _swiftEmptyArrayStorage);
  v14 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_10014D570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 376) = v3;
  v4 = sub_10001A9A8(&qword_1010F0B20);
  *v3 = v0;
  v3[1] = sub_10014D5F8;
  return unsafeBlocking<A>(_:)(v0 + 160, sub_10001CB10, v1, v4);
}

uint64_t sub_10014D5F8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 376));
  swift_release();
  return swift_task_switch(sub_10014D650, *(_QWORD *)(v1 + 368), 0);
}

uint64_t sub_10014D650()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[25];
  v0[48] = v0[20];
  return swift_task_switch(sub_10014D66C, v1, 0);
}

uint64_t sub_10014D66C()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;

  v1 = v0[48];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[37];
    v13 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v4 = v1 + 32;
    v5 = _swiftEmptyArrayStorage;
    do
    {
      sub_100030784(v4, (uint64_t)(v0 + 2));
      v6 = v0[5];
      v7 = v0[6];
      sub_10001AA44(v0 + 2, v6);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 32))(v6);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_10009A578(0, v5[2] + 1, 1);
        v5 = v13;
      }
      v9 = v5[2];
      v8 = v5[3];
      if (v9 >= v8 >> 1)
      {
        sub_10009A578(v8 > 1, v9 + 1, 1);
        v5 = v13;
      }
      v10 = v0[43];
      v11 = v0[36];
      v5[2] = v9 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v5+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v9, v10, v11);
      v13 = v5;
      v4 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = _swiftEmptyArrayStorage;
  }
  v0[49] = sub_10001B664((uint64_t)v5);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10014D808, v0[46], 0);
}

uint64_t sub_10014D808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 400) = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  *v3 = v0;
  v3[1] = sub_10014D890;
  return unsafeBlocking<A>(_:)(v0 + 176, sub_10001ED38, v1, v4);
}

uint64_t sub_10014D890()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 400));
  swift_release();
  return swift_task_switch(sub_10014D8EC, *(_QWORD *)(v1 + 368), 0);
}

uint64_t sub_10014D8EC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[25];
  v0[51] = v0[22];
  return swift_task_switch(sub_10014D908, v1, 0);
}

uint64_t sub_10014D908()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0[51];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[37];
    v4 = v0[34];
    v16 = v0[33];
    v17 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = v0[42];
      v10 = v0[35];
      v9 = v0[36];
      sub_10005972C(v5, v10, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8, v10 + *(int *)(v16 + 20), v9);
      sub_1000126B0(v10, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_10009A578(0, v7[2] + 1, 1);
        v7 = v17;
      }
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v7 = v17;
      }
      v13 = v0[42];
      v14 = v0[36];
      v7[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v12, v13, v14);
      v17 = v7;
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
  }
  v0[52] = sub_10001B664((uint64_t)v7);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10014DABC, v0[46], 0);
}

uint64_t sub_10014DABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 424) = v3;
  v4 = sub_10001A9A8(&qword_1010F0B28);
  *v3 = v0;
  v3[1] = sub_10014DB44;
  return unsafeBlocking<A>(_:)(v0 + 184, sub_100151530, v1, v4);
}

uint64_t sub_10014DB44()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 424));
  swift_release();
  return swift_task_switch(sub_10014DBA0, *(_QWORD *)(v1 + 368), 0);
}

uint64_t sub_10014DBA0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[25];
  v0[54] = v0[23];
  return swift_task_switch(sub_10014DBBC, v1, 0);
}

void sub_10014DBBC()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 296);
    v4 = *(_QWORD *)(v0 + 248);
    v104 = *(_QWORD *)(v0 + 240);
    v107 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *(_QWORD *)(v0 + 328);
      v9 = *(_QWORD *)(v0 + 288);
      v10 = *(_QWORD *)(v0 + 256);
      sub_10005972C(v5, v10, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v8, v10 + *(int *)(v104 + 24), v9);
      sub_1000126B0(v10, type metadata accessor for OwnedBeaconGroup);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_10009A578(0, v7[2] + 1, 1);
        v7 = v107;
      }
      v12 = v7[2];
      v11 = v7[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v7 = v107;
      }
      v13 = *(_QWORD *)(v0 + 328);
      v14 = *(_QWORD *)(v0 + 288);
      v7[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v12, v13, v14);
      v107 = v7;
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
  }
  v15 = *(_QWORD *)(v0 + 416);
  v16 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 296);
  v18 = *(_QWORD *)(v0 + 192);
  v91 = *(_QWORD *)(v0 + 200);
  v92 = *(_QWORD *)(v0 + 216);
  v19 = sub_10001B664((uint64_t)v7);
  swift_bridgeObjectRelease();
  v93 = v18 + 56;
  v20 = -1 << *(_BYTE *)(v18 + 32);
  if (-v20 < 64)
    v21 = ~(-1 << -(char)v20);
  else
    v21 = -1;
  v22 = v21 & *(_QWORD *)(v18 + 56);
  v94 = (unint64_t)(63 - v20) >> 6;
  v102 = v15 + 56;
  v100 = v19 + 56;
  v101 = v19;
  v98 = v16 + 56;
  v99 = v16;
  v96 = v18;
  swift_bridgeObjectRetain(v18);
  v23 = 0;
  v103 = v15;
  v105 = v17;
  while (1)
  {
    if (v22)
    {
      v27 = __clz(__rbit64(v22));
      v28 = (v22 - 1) & v22;
      v29 = v27 | (v23 << 6);
      goto LABEL_30;
    }
    if (__OFADD__(v23++, 1))
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v23 >= v94)
      goto LABEL_56;
    v31 = *(_QWORD *)(v93 + 8 * v23);
    if (!v31)
      break;
LABEL_29:
    v28 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_30:
    v33 = *(_QWORD *)(v0 + 288);
    v34 = *(_QWORD *)(v0 + 232);
    v35 = *(_QWORD *)(v17 + 72);
    v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    v36(v34, *(_QWORD *)(v96 + 48) + v35 * v29, v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v34, 0, 1, v33);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v34, 1, v33) == 1)
      goto LABEL_57;
    v37 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v17 + 32))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 288));
    v97 = v28;
    if (*(_QWORD *)(v15 + 16))
    {
      v38 = *(_QWORD *)(v0 + 288);
      v39 = *(_QWORD *)(v15 + 40);
      v40 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v38, v40);
      v41 = -1 << *(_BYTE *)(v15 + 32);
      v42 = v37 & ~v41;
      v43 = v23;
      if (((*(_QWORD *)(v102 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
      {
        v44 = ~v41;
        while (1)
        {
          v46 = *(_QWORD *)(v0 + 312);
          v45 = *(_QWORD *)(v0 + 320);
          v47 = *(_QWORD *)(v0 + 288);
          v36(v46, *(_QWORD *)(v15 + 48) + v42 * v35, v47);
          v48 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v45) = dispatch thunk of static Equatable.== infix(_:_:)(v46, v45, v47, v48);
          v49 = *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8);
          v37 = v49(v46, v47);
          if ((v45 & 1) != 0)
            break;
          v42 = (v42 + 1) & v44;
          v15 = v103;
          if (((*(_QWORD *)(v102 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
            goto LABEL_38;
        }
        v24 = *(_QWORD *)(v0 + 312);
        v25 = *(char **)(v0 + 304);
        v26 = *(_QWORD *)(v0 + 288);
        v36((uint64_t)v25, *(_QWORD *)(v0 + 320), v26);
        sub_100A09F38(v24, v25);
        v49(v24, v26);
        goto LABEL_15;
      }
    }
    else
    {
      v43 = v23;
    }
LABEL_38:
    if (*(_QWORD *)(v101 + 16))
    {
      v50 = *(_QWORD *)(v0 + 288);
      v51 = *(_QWORD *)(v101 + 40);
      v52 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v51, v50, v52);
      v53 = -1 << *(_BYTE *)(v101 + 32);
      v54 = v37 & ~v53;
      if (((*(_QWORD *)(v100 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) != 0)
      {
        v55 = ~v53;
        do
        {
          v57 = *(_QWORD *)(v0 + 312);
          v56 = *(_QWORD *)(v0 + 320);
          v58 = *(_QWORD *)(v0 + 288);
          v36(v57, *(_QWORD *)(v101 + 48) + v54 * v35, v58);
          v59 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v56) = dispatch thunk of static Equatable.== infix(_:_:)(v57, v56, v58, v59);
          v49 = *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8);
          v37 = v49(v57, v58);
          if ((v56 & 1) != 0)
            goto LABEL_15;
          v54 = (v54 + 1) & v55;
        }
        while (((*(_QWORD *)(v100 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) != 0);
      }
    }
    if (*(_QWORD *)(v99 + 16))
    {
      v60 = *(_QWORD *)(v0 + 288);
      v61 = *(_QWORD *)(v99 + 40);
      v62 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v61, v60, v62);
      v63 = -1 << *(_BYTE *)(v99 + 32);
      v64 = v37 & ~v63;
      if (((*(_QWORD *)(v98 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) != 0)
      {
        v65 = ~v63;
        while (1)
        {
          v67 = *(_QWORD *)(v0 + 312);
          v66 = *(_QWORD *)(v0 + 320);
          v68 = *(_QWORD *)(v0 + 288);
          v36(v67, *(_QWORD *)(v99 + 48) + v64 * v35, v68);
          v69 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v66) = dispatch thunk of static Equatable.== infix(_:_:)(v67, v66, v68, v69);
          v49 = *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8);
          v37 = v49(v67, v68);
          if ((v66 & 1) != 0)
            break;
          v64 = (v64 + 1) & v65;
          if (((*(_QWORD *)(v98 + ((v64 >> 3) & 0xFFFFFFFFFFFFF8)) >> v64) & 1) == 0)
            goto LABEL_48;
        }
LABEL_15:
        v17 = v105;
        v23 = v43;
        goto LABEL_16;
      }
    }
LABEL_48:
    v70 = static os_log_type_t.error.getter(v37);
    v23 = v43;
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v71 = *(_QWORD *)(v0 + 320);
    v72 = *(_QWORD *)(v0 + 224);
    v95 = *(_QWORD *)(v0 + 208);
    v73 = qword_1011B7DE0;
    v74 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v75 = swift_allocObject(v74, 72, 7);
    *(_OWORD *)(v75 + 16) = xmmword_100E22B00;
    v76 = UUID.uuidString.getter(v75);
    v78 = v77;
    *(_QWORD *)(v75 + 56) = &type metadata for String;
    *(_QWORD *)(v75 + 64) = sub_10001AA00();
    *(_QWORD *)(v75 + 32) = v76;
    *(_QWORD *)(v75 + 40) = v78;
    os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v73, "No beacon record found in the store. Removing all the observations corresponds to UUID: %@", 90, 2, v75);
    v79 = swift_bridgeObjectRelease();
    v80 = *(_QWORD *)(v91 + 120);
    static DispatchWorkItemFlags.barrier.getter(v79);
    v81 = (_QWORD *)swift_task_alloc(48);
    v81[2] = v80;
    v81[3] = v71;
    v81[4] = sub_1000683B8;
    v81[5] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)(v72, sub_100151538);
    swift_task_dealloc(v81);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v72, v95);
    v17 = v105;
    v49 = *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8);
LABEL_16:
    v22 = v97;
    v49(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288));
    v15 = v103;
  }
  v32 = v23 + 1;
  if (v23 + 1 >= v94)
    goto LABEL_56;
  v31 = *(_QWORD *)(v93 + 8 * v32);
  if (v31)
    goto LABEL_28;
  v32 = v23 + 2;
  if (v23 + 2 >= v94)
    goto LABEL_56;
  v31 = *(_QWORD *)(v93 + 8 * v32);
  if (v31)
    goto LABEL_28;
  v32 = v23 + 3;
  if (v23 + 3 >= v94)
  {
LABEL_56:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v17 + 56))(*(_QWORD *)(v0 + 232), 1, 1, *(_QWORD *)(v0 + 288));
LABEL_57:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v106 = *(_QWORD *)(v0 + 168);
    v82 = *(_QWORD *)(v0 + 336);
    v84 = *(_QWORD *)(v0 + 320);
    v83 = *(_QWORD *)(v0 + 328);
    v86 = *(_QWORD *)(v0 + 304);
    v85 = *(_QWORD *)(v0 + 312);
    v87 = *(_QWORD *)(v0 + 280);
    v88 = *(_QWORD *)(v0 + 256);
    v89 = *(_QWORD *)(v0 + 224);
    v90 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v89);
    (*(void (**)(uint64_t))(v0 + 8))(v106);
    return;
  }
  v31 = *(_QWORD *)(v93 + 8 * v32);
  if (v31)
  {
LABEL_28:
    v23 = v32;
    goto LABEL_29;
  }
  while (1)
  {
    v23 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v23 >= v94)
      goto LABEL_56;
    v31 = *(_QWORD *)(v93 + 8 * v23);
    ++v32;
    if (v31)
      goto LABEL_29;
  }
LABEL_59:
  __break(1u);
}

uint64_t sub_10014E4CC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_BYTE *)(v3 + 417) = a2;
  *(_QWORD *)(v3 + 208) = a1;
  *(_QWORD *)(v3 + 216) = v2;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v3 + 224) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  *(_QWORD *)(v3 + 232) = v5;
  *(_QWORD *)(v3 + 240) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconObservation(0);
  *(_QWORD *)(v3 + 248) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 256) = v7;
  *(_QWORD *)(v3 + 264) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 272) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 280) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 288) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 296) = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v3 + 304) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 312) = swift_task_alloc(v12);
  *(_QWORD *)(v3 + 320) = swift_task_alloc(v12);
  return swift_task_switch(sub_10014E60C, v2, 0);
}

uint64_t sub_10014E60C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __CFNotificationCenter *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v0 + 328) = *(_QWORD *)(*(_QWORD *)(v0 + 216) + 120);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  *(_QWORD *)(v0 + 336) = 0;
  v1 = sub_100C1B664(*(_QWORD *)(v0 + 192));
  swift_bridgeObjectRelease();
  v2 = sub_100C5AE1C((double)v1 * 60.0);
  if ((v2 & 1) != 0)
  {
    v3 = static os_log_type_t.default.getter(v2);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7DE0, "Beacons pending firmware update. Not posting notification.", 58, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v4 = CFNotificationCenterGetDarwinNotifyCenter();
    *(_QWORD *)(v0 + 344) = v4;
    if (v4)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1010F092C);
      *(_QWORD *)(v0 + 352) = v5;
      *v5 = v0;
      v5[1] = sub_10014E84C;
      return sub_10014CE4C(*(_QWORD *)(v0 + 208));
    }
    v7 = static os_log_type_t.error.getter(0);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DE0, "CFNotificationCenterGetDarwinNotifyCenter returned nil! Not posting notification.", 81, 2, _swiftEmptyArrayStorage);
  }
  v8 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014E84C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014E8AC, v3, 0);
}

uint64_t sub_10014E8AC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 360) + 16))
  {
    v1 = type metadata accessor for AnalyticsEvent(0);
    v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
    *(_QWORD *)(v0 + 368) = v2;
    swift_defaultActor_initialize(v2);
    v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v2 + 14) = v3;
    UUID.init()(v3);
    v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    v5 = type metadata accessor for DispatchTime(0);
    *(_QWORD *)(v0 + 376) = v5;
    v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    *(_QWORD *)(v0 + 384) = v6;
    v6(v4, 1, 1, v5);
    v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
    *((_QWORD *)v2 + 15) = 0xD000000000000032;
    *((_QWORD *)v2 + 16) = 0x8000000100EC90F0;
    return swift_task_switch(sub_10014EAA4, v2, 0);
  }
  else
  {
    v8 = swift_bridgeObjectRelease();
    v9 = static os_log_type_t.default.getter(v8);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v10 = *(void **)(v0 + 344);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7DE0, "No enabled beacon found. Not posting notification.", 50, 2, _swiftEmptyArrayStorage);

    v11 = *(_QWORD *)(v0 + 312);
    v13 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 304);
    v14 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10014EAA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[47];
  v3 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[48];
  v4 = v1[46];
  v6 = v1[39];
  v5 = v1[40];
  v7 = v1[27];
  static DispatchTime.now()(a1);
  v3(v5, 0, 1, v2);
  sub_100005CF0(v5, v6, &qword_1010EBE20);
  v8 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 17, 33, 0);
  sub_100033150(v6, v8);
  swift_endAccess(v1 + 17);
  return swift_task_switch(sub_10014EB6C, v7, 0);
}

uint64_t sub_10014EB6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 392) = v2;
  *v2 = v0;
  v2[1] = sub_10014EBE0;
  return unsafeBlocking<A>(_:)(v0 + 200, sub_1001514A8, *(_QWORD *)(v0 + 216), &type metadata for Int);
}

uint64_t sub_10014EBE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 216);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  swift_release();
  return swift_task_switch(sub_10014EC40, v1, 0);
}

uint64_t sub_10014EC40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[46];
  v2 = v0[26];
  v0[50] = v0[25];
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_10014EC84, v1, 0);
}

uint64_t sub_10014EC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_QWORD *)(v0 + 336);
  sub_100CDF004(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 208), *(_BYTE *)(v0 + 417));
  *(_QWORD *)(v0 + 408) = v1;
  v2 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_errorRelease(v1);
    v3 = sub_10014F740;
  }
  else
  {
    v3 = sub_10014ECFC;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_10014ECFC()
{
  const __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t length;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t My;
  _QWORD *v36;
  uint64_t v37;
  double Current;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v69;
  unint64_t v70;
  char *data;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  BOOL v81;
  char *v82;
  uint64_t v83;
  __CFNotificationCenter *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  int64_t v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  const __CFString **v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);

  v2 = 0;
  v96 = (_QWORD *)(v1 + 16);
  v101 = v1 + 112;
  v100 = (_QWORD *)(v1 + 416);
  v3 = *(_QWORD *)(v1 + 280);
  v4 = *(_QWORD *)(v1 + 360);
  v5 = *(_QWORD *)(v4 + 56);
  v93 = v4 + 56;
  v102 = v4;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(v102 + 32);
  v99 = *(_QWORD *)(v1 + 256);
  v106 = *(_QWORD *)(v1 + 248);
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & v5;
  v98 = (const __CFString **)(*(_QWORD *)(v1 + 216) + 144);
  v94 = (unint64_t)(63 - v7) >> 6;
  v95 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  v97 = *(_QWORD *)(v1 + 280);
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v15 = (v8 - 1) & v8;
      v16 = v14 | (v2 << 6);
    }
    else
    {
      v17 = v2 + 1;
      if (__OFADD__(v2, 1))
        goto LABEL_65;
      if (v17 >= v94)
      {
LABEL_59:
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v3 + 56))(*(_QWORD *)(v1 + 304), 1, 1, *(_QWORD *)(v1 + 272));
LABEL_60:
        v83 = swift_release();
        v0 = (const __CFString *)SPOwnerInitiateFindMyAccessoryFirmwareUpdateNotification;
        v2 = static os_log_type_t.default.getter(v83);
        if (qword_1010EA300 == -1)
        {
LABEL_61:
          v84 = *(__CFNotificationCenter **)(v1 + 344);
          os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7DE0, "Posting SPOwnerInitiateFindMyAccessoryFirmwareUpdateNotification Darwin notification", 84, 2, _swiftEmptyArrayStorage);
          CFNotificationCenterPostNotification(v84, v0, 0, 0, 1u);
          swift_release();

          v85 = *(_QWORD *)(v1 + 312);
          v87 = *(_QWORD *)(v1 + 296);
          v86 = *(_QWORD *)(v1 + 304);
          v88 = *(_QWORD *)(v1 + 288);
          v89 = *(_QWORD *)(v1 + 264);
          v90 = *(_QWORD *)(v1 + 240);
          v91 = *(_QWORD *)(v1 + 224);
          swift_task_dealloc(*(_QWORD *)(v1 + 320));
          swift_task_dealloc(v85);
          swift_task_dealloc(v86);
          swift_task_dealloc(v87);
          swift_task_dealloc(v88);
          swift_task_dealloc(v89);
          swift_task_dealloc(v90);
          swift_task_dealloc(v91);
          return (*(uint64_t (**)(void))(v1 + 8))();
        }
LABEL_67:
        swift_once(&qword_1010EA300, sub_100B5E204);
        goto LABEL_61;
      }
      v18 = *(_QWORD *)(v93 + 8 * v17);
      ++v2;
      if (!v18)
      {
        v2 = v17 + 1;
        if (v17 + 1 >= v94)
          goto LABEL_59;
        v18 = *(_QWORD *)(v93 + 8 * v2);
        if (!v18)
        {
          v2 = v17 + 2;
          if (v17 + 2 >= v94)
            goto LABEL_59;
          v18 = *(_QWORD *)(v93 + 8 * v2);
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v94)
              goto LABEL_59;
            v18 = *(_QWORD *)(v93 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                v2 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_66;
                if (v2 >= v94)
                  goto LABEL_59;
                v18 = *(_QWORD *)(v93 + 8 * v2);
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v2 = v19;
          }
        }
      }
LABEL_21:
      v15 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v2 << 6);
    }
    v20 = *(_QWORD *)(v1 + 304);
    v21 = *(_QWORD *)(v1 + 272);
    v22 = *(_QWORD *)(v3 + 72);
    v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
    v23(v20, *(_QWORD *)(v102 + 48) + v22 * v16, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v20, 0, 1, v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v20, 1, v21) == 1)
      goto LABEL_60;
    v103 = v22;
    v105 = v2;
    v24 = *(_QWORD *)(v1 + 296);
    v25 = *(_QWORD *)(v1 + 264);
    v26 = *(_QWORD *)(v1 + 272);
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v3 + 32))(v24, *(_QWORD *)(v1 + 304), v26);
    v23(v25, v24, v26);
    v27 = *(int *)(v106 + 20);
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    v28 = v25 + v27;
    *(_QWORD *)(v1 + 160) = 0x7365547265646E75;
    *(_QWORD *)(v1 + 168) = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(v100, v1 + 160, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    v104 = v15;
    v107 = (void (*)(uint64_t, uint64_t, uint64_t))v23;
    if (*(_BYTE *)v100 == 1)
    {
      v29 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v30 = objc_msgSend(v29, "isInternalBuild");

      if (v30)
      {
        if (qword_1010E98B0 != -1)
          swift_once(&qword_1010E98B0, sub_10001F1E8);
        v31 = *(_QWORD *)(v1 + 240);
        v32 = sub_10001A9E8(*(_QWORD *)(v1 + 232), (uint64_t)qword_1010E98B8);
        swift_beginAccess(v32, v1 + 88, 0, 0);
        sub_10000F9B8(v32, v31, (uint64_t *)&unk_1010EA690);
        v33 = type metadata accessor for Date(0);
        v34 = *(_QWORD *)(v33 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) != 1)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 32))(v28, *(_QWORD *)(v1 + 240), v33);
          goto LABEL_47;
        }
        sub_100004048(*(_QWORD *)(v1 + 240), (uint64_t *)&unk_1010EA690);
      }
    }
    My = type metadata accessor for Feature.FindMy(0);
    *(_QWORD *)(v1 + 40) = My;
    *(_QWORD *)(v1 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v36 = sub_100018F08(v96);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v36, v95, My);
    LOBYTE(My) = isFeatureEnabled(_:)(v96);
    v37 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v96);
    if ((My & 1) == 0)
    {
      Date.init()(v37);
      goto LABEL_47;
    }
    sub_100B3575C();
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1010EA1F8 != -1)
      swift_once(&qword_1010EA1F8, sub_100B35618);
    v39 = qword_101115B98;
    v40 = sub_10001A9A8(&qword_1010EBE48);
    v41 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033284, 0, v39, (char *)&type metadata for () + 8, v40);
    if (Current - *(double *)(v1 + 176) - *(double *)(v1 + 184) > 86400.0)
    {
      v42 = *(_QWORD *)(v1 + 224);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033298, 0, qword_101115B98, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      v43 = type metadata accessor for TaskPriority(0);
      v44 = *(_QWORD *)(v43 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v42, 1, 1, v43);
      v45 = swift_allocObject(&unk_10105A198, 32, 7);
      *(_QWORD *)(v45 + 16) = 0;
      v46 = (uint64_t *)(v45 + 16);
      *(_QWORD *)(v45 + 24) = 0;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43);
      v48 = *(_QWORD *)(v1 + 224);
      if ((_DWORD)v47 == 1)
      {
        sub_100004048(*(_QWORD *)(v1 + 224), &qword_1010F46C0);
        v49 = 0;
        v50 = *v46;
        if (v50)
        {
LABEL_37:
          v51 = *(_QWORD *)(v45 + 24);
          ObjectType = swift_getObjectType(v50);
          swift_unknownObjectRetain(v50);
          v53 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v51);
          v55 = v54;
          swift_unknownObjectRelease(v50);
LABEL_42:
          v57 = swift_allocObject(&unk_10105A1C0, 32, 7);
          *(_QWORD *)(v57 + 16) = &unk_1010EBE50;
          *(_QWORD *)(v57 + 24) = v45;
          if (v55 | v53)
          {
            v58 = v1 + 56;
            *(_QWORD *)(v1 + 56) = 0;
            *(_QWORD *)(v1 + 64) = 0;
            *(_QWORD *)(v1 + 72) = v53;
            *(_QWORD *)(v1 + 80) = v55;
          }
          else
          {
            v58 = 0;
          }
          swift_task_create(v49 | 0x1C00, v58, (char *)&type metadata for () + 8, &unk_1010EE4A0, v57);
          v41 = swift_release();
          goto LABEL_46;
        }
      }
      else
      {
        v56 = TaskPriority.rawValue.getter(v47);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v48, v43);
        v49 = v56;
        v50 = *v46;
        if (v50)
          goto LABEL_37;
      }
      v53 = 0;
      v55 = 0;
      goto LABEL_42;
    }
LABEL_46:
    Date.init(timeIntervalSinceReferenceDate:)(v41);
LABEL_47:
    v59 = *(_QWORD *)(v1 + 328);
    v60 = *(_QWORD *)(v1 + 288);
    v61 = *(_QWORD *)(v1 + 296);
    v62 = *(_QWORD *)(v1 + 264);
    v63 = *(_QWORD *)(v1 + 272);
    *(_BYTE *)(v62 + *(int *)(v106 + 24)) = 9;
    v64 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v65 = *(unsigned __int8 *)(v99 + 80);
    v66 = (v65 + 32) & ~v65;
    v67 = swift_allocObject(v64, v66 + *(_QWORD *)(v99 + 72), v65 | 7);
    *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
    sub_10005972C(v62, v67 + v66, type metadata accessor for BeaconObservation);
    type metadata accessor for Transaction(0);
    v2 = swift_task_alloc(48);
    *(_QWORD *)(v2 + 16) = v59;
    *(_QWORD *)(v2 + 24) = v67;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, v2, (char *)&type metadata for () + 8);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v2);
    v107(v60, v61, v63);
    swift_beginAccess(v98, v101, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v98);
    v0 = *v98;
    *v98 = (const __CFString *)0x8000000000000000;
    v70 = sub_100003FB0(v60);
    data = v0->data;
    v72 = (v69 & 1) == 0;
    v73 = (uint64_t)&data[v72];
    if (__OFADD__(data, v72))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v74 = v69;
    if (v0->length < v73)
      break;
    v3 = v97;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = *(_QWORD *)(v1 + 368);
      if ((v69 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_100A9A614();
      v2 = *(_QWORD *)(v1 + 368);
      if ((v74 & 1) != 0)
      {
LABEL_4:
        length = v0[1].length;
        swift_release();
        *(_QWORD *)(length + 8 * v70) = v2;
        goto LABEL_5;
      }
    }
LABEL_54:
    v78 = *(_QWORD *)(v1 + 288);
    v79 = *(_QWORD *)(v1 + 272);
    *((_QWORD *)&v0[2].isa + (v70 >> 6)) |= 1 << v70;
    v107((uint64_t)&v0[1].data[v70 * v103], v78, v79);
    *(_QWORD *)(v0[1].length + 8 * v70) = v2;
    v80 = v0->data;
    v81 = __OFADD__(v80, 1);
    v82 = v80 + 1;
    if (v81)
      goto LABEL_64;
    v0->data = v82;
LABEL_5:
    v11 = *(_QWORD *)(v1 + 288);
    v10 = *(_QWORD *)(v1 + 296);
    v13 = *(_QWORD *)(v1 + 264);
    v12 = *(_QWORD *)(v1 + 272);
    *v98 = v0;
    swift_bridgeObjectRelease();
    v0 = *(const __CFString **)(v3 + 8);
    ((void (*)(uint64_t, uint64_t))v0)(v11, v12);
    swift_endAccess(v101);
    sub_1000126B0(v13, type metadata accessor for BeaconObservation);
    ((void (*)(uint64_t, uint64_t))v0)(v10, v12);
    v8 = v104;
    v2 = v105;
  }
  v75 = *(_QWORD *)(v1 + 288);
  sub_100A862B8(v73, isUniquelyReferenced_nonNull_native);
  v76 = sub_100003FB0(v75);
  v3 = v97;
  if ((v74 & 1) == (v77 & 1))
  {
    v70 = v76;
    v2 = *(_QWORD *)(v1 + 368);
    if ((v74 & 1) != 0)
      goto LABEL_4;
    goto LABEL_54;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v1 + 272));
}

uint64_t sub_10014F740()
{
  const __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t length;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t My;
  _QWORD *v36;
  uint64_t v37;
  double Current;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v69;
  unint64_t v70;
  char *data;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  BOOL v81;
  char *v82;
  uint64_t v83;
  __CFNotificationCenter *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  int64_t v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  const __CFString **v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);

  v2 = 0;
  v96 = (_QWORD *)(v1 + 16);
  v101 = v1 + 112;
  v3 = *(_QWORD *)(v1 + 360);
  v4 = *(_QWORD *)(v1 + 280);
  v99 = *(_QWORD *)(v1 + 256);
  v100 = (_QWORD *)(v1 + 416);
  v106 = *(_QWORD *)(v1 + 248);
  v5 = *(_QWORD *)(v3 + 56);
  v93 = v3 + 56;
  v102 = v3;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(v3 + 32);
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & v5;
  v98 = (const __CFString **)(*(_QWORD *)(v1 + 216) + 144);
  v94 = (unint64_t)(63 - v7) >> 6;
  v95 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  v97 = *(_QWORD *)(v1 + 280);
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v15 = (v8 - 1) & v8;
      v16 = v14 | (v2 << 6);
    }
    else
    {
      v17 = v2 + 1;
      if (__OFADD__(v2, 1))
        goto LABEL_65;
      if (v17 >= v94)
      {
LABEL_59:
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v4 + 56))(*(_QWORD *)(v1 + 304), 1, 1, *(_QWORD *)(v1 + 272));
LABEL_60:
        v83 = swift_release();
        v0 = (const __CFString *)SPOwnerInitiateFindMyAccessoryFirmwareUpdateNotification;
        v2 = static os_log_type_t.default.getter(v83);
        if (qword_1010EA300 == -1)
        {
LABEL_61:
          v84 = *(__CFNotificationCenter **)(v1 + 344);
          os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7DE0, "Posting SPOwnerInitiateFindMyAccessoryFirmwareUpdateNotification Darwin notification", 84, 2, _swiftEmptyArrayStorage);
          CFNotificationCenterPostNotification(v84, v0, 0, 0, 1u);
          swift_release();

          v85 = *(_QWORD *)(v1 + 312);
          v87 = *(_QWORD *)(v1 + 296);
          v86 = *(_QWORD *)(v1 + 304);
          v88 = *(_QWORD *)(v1 + 288);
          v89 = *(_QWORD *)(v1 + 264);
          v90 = *(_QWORD *)(v1 + 240);
          v91 = *(_QWORD *)(v1 + 224);
          swift_task_dealloc(*(_QWORD *)(v1 + 320));
          swift_task_dealloc(v85);
          swift_task_dealloc(v86);
          swift_task_dealloc(v87);
          swift_task_dealloc(v88);
          swift_task_dealloc(v89);
          swift_task_dealloc(v90);
          swift_task_dealloc(v91);
          return (*(uint64_t (**)(void))(v1 + 8))();
        }
LABEL_67:
        swift_once(&qword_1010EA300, sub_100B5E204);
        goto LABEL_61;
      }
      v18 = *(_QWORD *)(v93 + 8 * v17);
      ++v2;
      if (!v18)
      {
        v2 = v17 + 1;
        if (v17 + 1 >= v94)
          goto LABEL_59;
        v18 = *(_QWORD *)(v93 + 8 * v2);
        if (!v18)
        {
          v2 = v17 + 2;
          if (v17 + 2 >= v94)
            goto LABEL_59;
          v18 = *(_QWORD *)(v93 + 8 * v2);
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v94)
              goto LABEL_59;
            v18 = *(_QWORD *)(v93 + 8 * v19);
            if (!v18)
            {
              while (1)
              {
                v2 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_66;
                if (v2 >= v94)
                  goto LABEL_59;
                v18 = *(_QWORD *)(v93 + 8 * v2);
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v2 = v19;
          }
        }
      }
LABEL_21:
      v15 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v2 << 6);
    }
    v20 = *(_QWORD *)(v1 + 304);
    v21 = *(_QWORD *)(v1 + 272);
    v22 = *(_QWORD *)(v4 + 72);
    v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
    v23(v20, *(_QWORD *)(v102 + 48) + v22 * v16, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v20, 0, 1, v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v20, 1, v21) == 1)
      goto LABEL_60;
    v103 = v22;
    v105 = v2;
    v24 = *(_QWORD *)(v1 + 296);
    v25 = *(_QWORD *)(v1 + 264);
    v26 = *(_QWORD *)(v1 + 272);
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v4 + 32))(v24, *(_QWORD *)(v1 + 304), v26);
    v23(v25, v24, v26);
    v27 = *(int *)(v106 + 20);
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    v28 = v25 + v27;
    *(_QWORD *)(v1 + 160) = 0x7365547265646E75;
    *(_QWORD *)(v1 + 168) = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(v100, v1 + 160, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    v104 = v15;
    v107 = (void (*)(uint64_t, uint64_t, uint64_t))v23;
    if (*(_BYTE *)v100 == 1)
    {
      v29 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v30 = objc_msgSend(v29, "isInternalBuild");

      if (v30)
      {
        if (qword_1010E98B0 != -1)
          swift_once(&qword_1010E98B0, sub_10001F1E8);
        v31 = *(_QWORD *)(v1 + 240);
        v32 = sub_10001A9E8(*(_QWORD *)(v1 + 232), (uint64_t)qword_1010E98B8);
        swift_beginAccess(v32, v1 + 88, 0, 0);
        sub_10000F9B8(v32, v31, (uint64_t *)&unk_1010EA690);
        v33 = type metadata accessor for Date(0);
        v34 = *(_QWORD *)(v33 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v31, 1, v33) != 1)
        {
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 32))(v28, *(_QWORD *)(v1 + 240), v33);
          goto LABEL_47;
        }
        sub_100004048(*(_QWORD *)(v1 + 240), (uint64_t *)&unk_1010EA690);
      }
    }
    My = type metadata accessor for Feature.FindMy(0);
    *(_QWORD *)(v1 + 40) = My;
    *(_QWORD *)(v1 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v36 = sub_100018F08(v96);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v36, v95, My);
    LOBYTE(My) = isFeatureEnabled(_:)(v96);
    v37 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v96);
    if ((My & 1) == 0)
    {
      Date.init()(v37);
      goto LABEL_47;
    }
    sub_100B3575C();
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1010EA1F8 != -1)
      swift_once(&qword_1010EA1F8, sub_100B35618);
    v39 = qword_101115B98;
    v40 = sub_10001A9A8(&qword_1010EBE48);
    v41 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033284, 0, v39, (char *)&type metadata for () + 8, v40);
    if (Current - *(double *)(v1 + 176) - *(double *)(v1 + 184) > 86400.0)
    {
      v42 = *(_QWORD *)(v1 + 224);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033298, 0, qword_101115B98, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      v43 = type metadata accessor for TaskPriority(0);
      v44 = *(_QWORD *)(v43 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v42, 1, 1, v43);
      v45 = swift_allocObject(&unk_10105A198, 32, 7);
      *(_QWORD *)(v45 + 16) = 0;
      v46 = (uint64_t *)(v45 + 16);
      *(_QWORD *)(v45 + 24) = 0;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43);
      v48 = *(_QWORD *)(v1 + 224);
      if ((_DWORD)v47 == 1)
      {
        sub_100004048(*(_QWORD *)(v1 + 224), &qword_1010F46C0);
        v49 = 0;
        v50 = *v46;
        if (v50)
        {
LABEL_37:
          v51 = *(_QWORD *)(v45 + 24);
          ObjectType = swift_getObjectType(v50);
          swift_unknownObjectRetain(v50);
          v53 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v51);
          v55 = v54;
          swift_unknownObjectRelease(v50);
LABEL_42:
          v57 = swift_allocObject(&unk_10105A1C0, 32, 7);
          *(_QWORD *)(v57 + 16) = &unk_1010EBE50;
          *(_QWORD *)(v57 + 24) = v45;
          if (v55 | v53)
          {
            v58 = v1 + 56;
            *(_QWORD *)(v1 + 56) = 0;
            *(_QWORD *)(v1 + 64) = 0;
            *(_QWORD *)(v1 + 72) = v53;
            *(_QWORD *)(v1 + 80) = v55;
          }
          else
          {
            v58 = 0;
          }
          swift_task_create(v49 | 0x1C00, v58, (char *)&type metadata for () + 8, &unk_1010EE4A0, v57);
          v41 = swift_release();
          goto LABEL_46;
        }
      }
      else
      {
        v56 = TaskPriority.rawValue.getter(v47);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v48, v43);
        v49 = v56;
        v50 = *v46;
        if (v50)
          goto LABEL_37;
      }
      v53 = 0;
      v55 = 0;
      goto LABEL_42;
    }
LABEL_46:
    Date.init(timeIntervalSinceReferenceDate:)(v41);
LABEL_47:
    v59 = *(_QWORD *)(v1 + 328);
    v60 = *(_QWORD *)(v1 + 288);
    v61 = *(_QWORD *)(v1 + 296);
    v62 = *(_QWORD *)(v1 + 264);
    v63 = *(_QWORD *)(v1 + 272);
    *(_BYTE *)(v62 + *(int *)(v106 + 24)) = 9;
    v64 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v65 = *(unsigned __int8 *)(v99 + 80);
    v66 = (v65 + 32) & ~v65;
    v67 = swift_allocObject(v64, v66 + *(_QWORD *)(v99 + 72), v65 | 7);
    *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
    sub_10005972C(v62, v67 + v66, type metadata accessor for BeaconObservation);
    type metadata accessor for Transaction(0);
    v2 = swift_task_alloc(48);
    *(_QWORD *)(v2 + 16) = v59;
    *(_QWORD *)(v2 + 24) = v67;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, v2, (char *)&type metadata for () + 8);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v2);
    v107(v60, v61, v63);
    swift_beginAccess(v98, v101, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v98);
    v0 = *v98;
    *v98 = (const __CFString *)0x8000000000000000;
    v70 = sub_100003FB0(v60);
    data = v0->data;
    v72 = (v69 & 1) == 0;
    v73 = (uint64_t)&data[v72];
    if (__OFADD__(data, v72))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v74 = v69;
    if (v0->length < v73)
      break;
    v4 = v97;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v2 = *(_QWORD *)(v1 + 368);
      if ((v69 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_100A9A614();
      v2 = *(_QWORD *)(v1 + 368);
      if ((v74 & 1) != 0)
      {
LABEL_4:
        length = v0[1].length;
        swift_release();
        *(_QWORD *)(length + 8 * v70) = v2;
        goto LABEL_5;
      }
    }
LABEL_54:
    v78 = *(_QWORD *)(v1 + 288);
    v79 = *(_QWORD *)(v1 + 272);
    *((_QWORD *)&v0[2].isa + (v70 >> 6)) |= 1 << v70;
    v107((uint64_t)&v0[1].data[v70 * v103], v78, v79);
    *(_QWORD *)(v0[1].length + 8 * v70) = v2;
    v80 = v0->data;
    v81 = __OFADD__(v80, 1);
    v82 = v80 + 1;
    if (v81)
      goto LABEL_64;
    v0->data = v82;
LABEL_5:
    v11 = *(_QWORD *)(v1 + 288);
    v10 = *(_QWORD *)(v1 + 296);
    v13 = *(_QWORD *)(v1 + 264);
    v12 = *(_QWORD *)(v1 + 272);
    *v98 = v0;
    swift_bridgeObjectRelease();
    v0 = *(const __CFString **)(v4 + 8);
    ((void (*)(uint64_t, uint64_t))v0)(v11, v12);
    swift_endAccess(v101);
    sub_1000126B0(v13, type metadata accessor for BeaconObservation);
    ((void (*)(uint64_t, uint64_t))v0)(v10, v12);
    v8 = v104;
    v2 = v105;
  }
  v75 = *(_QWORD *)(v1 + 288);
  sub_100A862B8(v73, isUniquelyReferenced_nonNull_native);
  v76 = sub_100003FB0(v75);
  v4 = v97;
  if ((v74 & 1) == (v77 & 1))
  {
    v70 = v76;
    v2 = *(_QWORD *)(v1 + 368);
    if ((v74 & 1) != 0)
      goto LABEL_4;
    goto LABEL_54;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v1 + 272));
}

unint64_t sub_100150184(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  NSString v13;
  NSString v14;
  _BYTE v16[160];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v10, v16);
  *(_OWORD *)(inited + 16) = xmmword_100E26E00;
  *(_QWORD *)(inited + 32) = 0x496E6F6973736573;
  *(_QWORD *)(inited + 40) = 0xE900000000000044;
  v12 = UUID.init()(inited);
  UUID.uuidString.getter(v12);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v13;
  *(_BYTE *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0xD000000000000014;
  *(_QWORD *)(inited + 72) = 0x8000000100EC9250;
  *(_QWORD *)(inited + 80) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a1);
  *(_BYTE *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0xD000000000000013;
  *(_QWORD *)(inited + 104) = 0x8000000100EC9270;
  *(_QWORD *)(inited + 112) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(a2 + 16));
  *(_BYTE *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0xD000000000000013;
  *(_QWORD *)(inited + 136) = 0x8000000100EC9290;
  sub_10014A4C4(a3);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 144) = v14;
  *(_BYTE *)(inited + 152) = 0;
  return sub_1006B9444(inited);
}

uint64_t sub_100150344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 136);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1AE88(v8);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v3 = sub_100C1B664(v8);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v4 = sub_100C1B650(v8);
  result = swift_bridgeObjectRelease();
  if ((unsigned __int128)(v4 * (__int128)60) >> 64 == (60 * v4) >> 63)
  {
    v6 = sub_100C61738(v2, (double)v3 * 60.0, (double)(60 * v4));
    swift_retain();
    v7 = sub_1001512E0((uint64_t)v6, v1, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10015103C);
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1001504C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;

  v0 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v0);
  v18 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  v21 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v20 = (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - v5;
  result = sub_1000188D0();
  v8 = _swiftEmptyArrayStorage;
  v23 = _swiftEmptyArrayStorage;
  v19 = *((_QWORD *)result + 2);
  if (v19)
  {
    v9 = 0;
    v16 = v2;
    v17 = result;
    v10 = (uint64_t)v18;
    while (v9 < *((_QWORD *)result + 2))
    {
      v11 = *(_QWORD *)(v21 + 72);
      v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      sub_10005972C((uint64_t)&result[v22 + v11 * v9], (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C((uint64_t)&v6[*(int *)(v2 + 24)], v10, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v0);
      sub_1000126B0(v10, type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload == 1)
      {
        sub_100082514((uint64_t)v6, v20);
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          sub_10009A680(0, v8[2] + 1, 1);
        v8 = v23;
        v14 = v23[2];
        v13 = v23[3];
        if (v14 >= v13 >> 1)
        {
          sub_10009A680(v13 > 1, v14 + 1, 1);
          v8 = v23;
        }
        v8[2] = v14 + 1;
        sub_100082514(v20, (uint64_t)v8 + v22 + v14 * v11);
        v2 = v16;
      }
      else
      {
        sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
      }
      ++v9;
      result = v17;
      if (v19 == v9)
      {
        v8 = v23;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v15 = v8[2];
    swift_release();
    return (char *)v15;
  }
  return result;
}

uint64_t sub_100150708()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));

  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(*(_QWORD *)(v0 + 168));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100150764()
{
  uint64_t v0;

  sub_100150708();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FirmwareUpdateService()
{
  return objc_opt_self(_TtC12searchpartyd21FirmwareUpdateService);
}

uint64_t sub_10015079C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[12];
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[48];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v10 = &v42[-v9];
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v13 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10080B950(a1, (uint64_t)v13);
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010F47C0);
    v49 = 0u;
    v50 = 0u;
    v51 = 0;
  }
  else
  {
    *((_QWORD *)&v50 + 1) = v14;
    v51 = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
    v15 = sub_100018F08(&v49);
    sub_100082514((uint64_t)v13, (uint64_t)v15);
  }
  sub_100005CF0((uint64_t)&v49, (uint64_t)v52, (uint64_t *)&unk_1010EE310);
  sub_10000F9B8((uint64_t)v52, (uint64_t)&v47, (uint64_t *)&unk_1010EE310);
  if (v48)
  {
    sub_10000F9FC(&v47, (uint64_t)&v49);
    v16 = *((_QWORD *)&v50 + 1);
    v17 = v51;
    sub_10001AA44(&v49, *((uint64_t *)&v50 + 1));
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 96))(v16, v17) & 1) != 0)
    {
      v46 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for BeaconObservation(0) + 24));
      switch(v46)
      {
        case 1:
          v22 = type metadata accessor for UUID(0);
          v23 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
          v43 = 1;
          v19 = v23(v10, 1, 1, v22);
          goto LABEL_15;
        case 7:
        case 8:
        case 11:
          v18 = type metadata accessor for UUID(0);
          v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 1, 1, v18);
          v20 = 3;
          goto LABEL_14;
        case 10:
          v24 = type metadata accessor for UUID(0);
          v25 = *(_QWORD *)(v24 - 8);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v25 + 16))(v10, a1, v24);
          v19 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v24);
          v43 = 0;
          goto LABEL_15;
        case 16:
          v26 = type metadata accessor for UUID(0);
          v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v10, 1, 1, v26);
          v20 = 6;
          goto LABEL_14;
        case 34:
          v27 = type metadata accessor for UUID(0);
          v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v10, 1, 1, v27);
          v20 = 5;
          goto LABEL_14;
        case 35:
          v28 = type metadata accessor for UUID(0);
          v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
          v20 = 7;
LABEL_14:
          v43 = v20;
LABEL_15:
          v44 = v5;
          v45 = v2;
          v29 = static os_log_type_t.default.getter(v19);
          if (qword_1010EA300 != -1)
            swift_once(&qword_1010EA300, sub_100B5E204);
          v30 = qword_1011B7DE0;
          v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v32 = swift_allocObject(v31, 112, 7);
          *(_OWORD *)(v32 + 16) = xmmword_100E22B10;
          v33 = UUID.uuidString.getter(v32);
          v35 = v34;
          *(_QWORD *)(v32 + 56) = &type metadata for String;
          v36 = sub_10001AA00();
          *(_QWORD *)(v32 + 64) = v36;
          *(_QWORD *)(v32 + 32) = v33;
          *(_QWORD *)(v32 + 40) = v35;
          sub_1006EB054(v46);
          *(_QWORD *)(v32 + 96) = &type metadata for String;
          *(_QWORD *)(v32 + 104) = v36;
          *(_QWORD *)(v32 + 72) = v37;
          *(_QWORD *)(v32 + 80) = v38;
          os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Beacon (UUID: %@, type: %@) observed", 36, 2, v32);
          swift_bridgeObjectRelease();
          type metadata accessor for Transaction(0);
          sub_10000F9B8((uint64_t)v10, (uint64_t)v8, &qword_1010ED860);
          v39 = *(unsigned __int8 *)(v44 + 80);
          v40 = (v39 + 25) & ~v39;
          v41 = swift_allocObject(&unk_10105A148, v40 + v6, v39 | 7);
          *(_QWORD *)(v41 + 16) = v45;
          *(_BYTE *)(v41 + 24) = v43;
          sub_100005CF0((uint64_t)v8, v41 + v40, &qword_1010ED860);
          swift_retain();
          static Transaction.asyncTask(name:block:)("Firmware.observation", 20, 2, &unk_1010F0B08, v41);
          swift_release();
          sub_100004048((uint64_t)v10, &qword_1010ED860);
          break;
        default:
          break;
      }
    }
    sub_100004048((uint64_t)v52, (uint64_t *)&unk_1010EE310);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v49);
  }
  else
  {
    sub_100004048((uint64_t)v52, (uint64_t *)&unk_1010EE310);
    return sub_100004048((uint64_t)&v47, (uint64_t *)&unk_1010EE310);
  }
}

uint64_t sub_100150C78(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_100150C98, a1, 0);
}

uint64_t sub_100150C98()
{
  uint64_t v0;

  sub_10014BF94(*(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100150CCC(uint64_t a1)
{
  return sub_10015079C(a1);
}

uint64_t sub_100150CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)(v0 + 24);
  v5 = v0 + ((v2 + 25) & ~v2);
  v6 = swift_task_alloc(dword_1010F0B04);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_BYTE *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v5;
  return swift_task_switch(sub_100150C98, v3, 0);
}

uint64_t sub_100150D80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10058F5E0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100150D98()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100150DBC(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_10014B400(a1, v1);
}

uint64_t sub_100150DC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010F0B14);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_10014B608(v0);
}

uint64_t sub_100150E0C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v22 = a2;
  v23 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 56);
  v24 = 0;
  v25 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v26 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v26)
      goto LABEL_24;
    v18 = *(_QWORD *)(v25 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v26)
        goto LABEL_24;
      v18 = *(_QWORD *)(v25 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v26)
          goto LABEL_24;
        v18 = *(_QWORD *)(v25 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v13 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v5 + 72) * v15, v4);
    v16 = sub_100C5CEB0((uint64_t)v8);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if ((v16 & 1) != 0)
    {
      *(unint64_t *)((char *)v23 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100852214(v23, v22, v24, a3);
      }
    }
  }
  v19 = v17 + 3;
  if (v19 >= v26)
    goto LABEL_24;
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v26)
      goto LABEL_24;
    v18 = *(_QWORD *)(v25 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10015103C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v26 = a2;
  v31 = a4;
  v27 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v35 = a3;
  v11 = *(_QWORD *)(a3 + 56);
  v28 = 0;
  v29 = a3 + 56;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v30 = (unint64_t)(v12 + 63) >> 6;
  while (v14)
  {
    v15 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v16 = v15 | (v10 << 6);
LABEL_18:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(_QWORD *)(v35 + 48) + *(_QWORD *)(v6 + 72) * v16, v5);
    sub_10080B648((uint64_t)v9, (uint64_t)v32);
    v20 = v33;
    if (v33)
    {
      v21 = v34;
      sub_10001AA44(v32, v33);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 96))(v20, v21);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v22 & 1) != 0)
      {
        *(unint64_t *)((char *)v27 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        v17 = __OFADD__(v28++, 1);
        if (v17)
          goto LABEL_30;
      }
    }
    else
    {
      sub_100004048((uint64_t)v32, (uint64_t *)&unk_1010EE310);
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  v17 = __OFADD__(v10++, 1);
  if (v17)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v30)
    goto LABEL_27;
  v18 = *(_QWORD *)(v29 + 8 * v10);
  if (v18)
  {
LABEL_17:
    v14 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
    goto LABEL_18;
  }
  v19 = v10 + 1;
  if (v10 + 1 >= v30)
    goto LABEL_27;
  v18 = *(_QWORD *)(v29 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v10 + 2;
  if (v10 + 2 >= v30)
    goto LABEL_27;
  v18 = *(_QWORD *)(v29 + 8 * v19);
  if (v18)
    goto LABEL_16;
  v19 = v10 + 3;
  if (v10 + 3 >= v30)
  {
LABEL_27:
    v23 = v26;
    v24 = v28;
    v25 = v35;
    swift_retain();
    return sub_100852214(v27, v23, v24, v25);
  }
  v18 = *(_QWORD *)(v29 + 8 * v19);
  if (v18)
  {
LABEL_16:
    v10 = v19;
    goto LABEL_17;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v30)
      goto LABEL_27;
    v18 = *(_QWORD *)(v29 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_17;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001512E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  char v8;
  unsigned int v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;

  v5 = v3;
  v8 = *(_BYTE *)(a1 + 32);
  v9 = v8 & 0x3F;
  v10 = (unint64_t)((1 << v8) + 63) >> 6;
  v11 = 8 * v10;
  swift_retain_n(a2, 2);
  if (v9 <= 0xD || (swift_stdlib_isStackAllocationSafe(v11, 8) & 1) != 0)
  {
    __chkstk_darwin();
    bzero((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain(a2);
    v12 = v5;
    v13 = a3((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, a1, a2);
    swift_release(a1);
    v14 = swift_release(a2);
    if (v12)
      swift_willThrow(v14);
    swift_release_n(a2, 2);
  }
  else
  {
    v15 = (void *)swift_slowAlloc(v11, -1);
    bzero(v15, v11);
    swift_retain(a2);
    v13 = a3((char *)v15, v10, a1, a2);
    swift_release(a1);
    swift_release(a2);
    swift_slowDealloc(v15, -1, -1);
    swift_release_n(a2, 2);
  }
  return v13;
}

char *sub_1001514A8@<X0>(char **a1@<X8>)
{
  char *result;

  result = sub_1001504C4();
  *a1 = result;
  return result;
}

uint64_t sub_1001514CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_10058DE68(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001514E8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015150C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_100151530@<X0>(_QWORD *a1@<X8>)
{
  return sub_100A82710(a1);
}

void sub_100151538()
{
  uint64_t v0;

  sub_10058EED0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100151554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 17) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100151608()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10014C6EC(*(_BYTE *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100151654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 25) & ~v2);
  v5 = *(_BYTE *)(v0 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F0B34);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_10014CA10(v3, v5, v4);
}

uint64_t sub_1001516D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 80);
  v3 = v0 + ((v2 + 25) & ~v2);
  v4 = *(_BYTE *)(v0 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F0B44);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004C28;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F0924);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_100030654;
  return sub_10014BA20(v4, v3);
}

uint64_t sub_100151778@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100150344();
  *a1 = result;
  return result;
}

uint64_t sub_10015179C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001517C0()
{
  uint64_t v0;

  return sub_10014B874(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1001517CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001517DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010F0B5C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_10014ADA4(v0);
}

uint64_t *sub_100151824(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v13(v9, v10, v11);
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v17((char *)a2 + v14, 1, v11))
    {
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    v20 = a3[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    if (v17(v22, 1, v11))
    {
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v13(v21, v22, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_1001519C4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  void (*v12)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v12(v5, v6);
  v8 = a1 + a2[6];
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v9(v8, 1, v6))
    v12(v8, v6);
  v10 = a1 + a2[7];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v10, 1, v6);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, v6);
  return result;
}

uint64_t sub_100151AB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v16((const void *)(a2 + v13), 1, v10))
  {
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v18 = a3[7];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (v16(v20, 1, v10))
  {
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v12(v19, v20, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100151C28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16((const void *)(a1 + v13), 1, v10);
  v18 = v16(v15, 1, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v14, v15, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v12(v14, v15, v10);
LABEL_7:
  v20 = a3[7];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = v16((const void *)(a1 + v20), 1, v10);
  v24 = v16(v22, 1, v10);
  if (!v23)
  {
    if (!v24)
    {
      v12(v21, v22, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v21, v10);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v21, v22, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  return a1;
}

uint64_t sub_100151E24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v16((const void *)(a2 + v13), 1, v10))
  {
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v18 = a3[7];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  if (v16(v20, 1, v10))
  {
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v12(v19, v20, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_100151F98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16((const void *)(a1 + v13), 1, v10);
  v18 = v16(v15, 1, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v12(v14, v15, v10);
LABEL_7:
  v20 = a3[7];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = v16((const void *)(a1 + v20), 1, v10);
  v24 = v16(v22, 1, v10);
  if (!v23)
  {
    if (!v24)
    {
      v12(v21, v22, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v21, v10);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v21, v22, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  return a1;
}

uint64_t sub_100152194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001521A0);
}

uint64_t sub_1001521A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10015223C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100152248);
}

uint64_t sub_100152248(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for UpdateDeviceState(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F0BC0;
  if (!qword_1010F0BC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UpdateDeviceState);
  return result;
}

void sub_100152328(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000A813C(319);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1001523C8(uint64_t a1)
{
  return sub_1001514CC(a1);
}

uint64_t sub_1001523E4(uint64_t a1, uint64_t a2, uint64_t *a3, BOOL *a4, uint64_t *a5, unint64_t a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t result;
  char *v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL *v44;
  uint64_t v45;

  v44 = a4;
  v45 = a8;
  v12 = type metadata accessor for TimeBasedKey(0);
  v43 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v38 - v16);
  v18 = type metadata accessor for DateInterval(0);
  v19 = __chkstk_darwin(v18);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a5 + 1;
  if (*a5 == -1)
  {
    __break(1u);
  }
  else
  {
    *a5 = v23;
    v24 = v19;
    v38 = v15;
    v25 = v20;
    v26 = type metadata accessor for OwnedBeaconRecord(0);
    sub_10064C538((char *)(a6 + *(int *)(v26 + 32)), v23, 0xFuLL, (uint64_t)v22);
    v40 = a5;
    v41 = v25;
    v27 = *a5;
    v28 = (char *)v17 + *(int *)(v12 + 20);
    v29 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v39 = v22;
    v42 = v24;
    v29(v28, v22, v24);
    *v17 = v27;
    v30 = (_OWORD *)((char *)v17 + *(int *)(v12 + 24));
    v31 = *((_OWORD *)a3 + 2);
    v32 = *(_OWORD *)a3;
    v30[1] = *((_OWORD *)a3 + 1);
    v30[2] = v31;
    *v30 = v32;
    v15 = v38;
    sub_10005972C((uint64_t)v17, (uint64_t)v38, type metadata accessor for TimeBasedKey);
    a6 = *a7;
    sub_100153E4C(a3);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a6);
    *a7 = a6;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  a6 = sub_1007C80D0(0, *(_QWORD *)(a6 + 16) + 1, 1, a6);
  *a7 = a6;
LABEL_3:
  v35 = *(_QWORD *)(a6 + 16);
  v34 = *(_QWORD *)(a6 + 24);
  v36 = v40;
  if (v35 >= v34 >> 1)
  {
    a6 = sub_1007C80D0(v34 > 1, v35 + 1, 1, a6);
    *a7 = a6;
  }
  *(_QWORD *)(a6 + 16) = v35 + 1;
  sub_100153EA8((uint64_t)v15, a6+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v35);
  sub_1000126B0((uint64_t)v17, type metadata accessor for TimeBasedKey);
  result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v39, v42);
  *v44 = *v36 == v45;
  return result;
}

uint64_t sub_100152638(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  sub_100152EBC(a1, a3, a4, a5, a6);
  swift_release();

  return swift_release();
}

uint64_t sub_100152688(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA308 != -1)
    swift_once(&qword_1010EA308, sub_100B5E26C);
  v5 = qword_1011B7DE8;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v13 = a1;
  swift_errorRetain(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v9 = String.init<A>(describing:)(&v13, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Failed to submit nfc tap info due to. Error - %@", 48, 2, v7);
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_1001527A8(char *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _QWORD v45[2];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(void);

  v48 = a3;
  v49 = a2;
  v46 = type metadata accessor for ServerStatusCode(0);
  v4 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NFCTapResponse(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v45 - v11;
  v13 = type metadata accessor for JSONDecoder(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v15 = JSONDecoder.init()(v14);
  v47 = a1;
  v16 = FMNServerInteractionController.FMNResponseFields.data.getter(v15);
  v18 = v17;
  v19 = sub_100006204(&qword_1010F0C00, type metadata accessor for NFCTapResponse, (uint64_t)&unk_100E28968);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v16, v18, v7, v19);
  v47 = v6;
  v45[1] = v15;
  v20 = sub_10001BC14(v16, v18);
  v21 = static os_log_type_t.default.getter(v20);
  if (qword_1010EA308 != -1)
    swift_once(&qword_1010EA308, sub_100B5E26C);
  v22 = qword_1011B7DE8;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v24 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v12, (uint64_t)v10, type metadata accessor for NFCTapResponse);
  v25 = String.init<A>(describing:)(v10, v7);
  v27 = v26;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_10001AA00();
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v27;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "subscribeNFCTapInfo: NFCTapResponse %@.", 39, 2, v24);
  swift_bridgeObjectRelease();
  v28 = v46;
  v29 = v47;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v47, &v12[*(int *)(v7 + 20)], v46);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v29, v28);
  if ((_DWORD)v30 == enum case for ServerStatusCode.success(_:))
  {
    v31 = static os_log_type_t.default.getter(v30);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B7DE8, "Successfully submitted nfc tap info.", 36, 2, _swiftEmptyArrayStorage);
    ((void (*)(_QWORD))v49)(0);
    swift_release();
    return sub_1000126B0((uint64_t)v12, type metadata accessor for NFCTapResponse);
  }
  v32 = v30;
  if ((_DWORD)v30 == enum case for ServerStatusCode.badRequest(_:))
  {
    v33 = static os_log_type_t.error.getter(v30);
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, qword_1011B7DE8, "Failed to submit nfc tap info: badRequest.", 42, 2, _swiftEmptyArrayStorage);
    v34 = sub_100153DFC();
    v35 = swift_allocError(&_s15NFCTapInfoErrorON, v34, 0, 0);
    *v36 = 0;
LABEL_9:
    v49();
    swift_release();
    swift_errorRelease(v35);
    return sub_1000126B0((uint64_t)v12, type metadata accessor for NFCTapResponse);
  }
  v37 = enum case for ServerStatusCode.unauthorized(_:);
  v38 = static os_log_type_t.error.getter(v30);
  if (v32 == v37)
  {
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, qword_1011B7DE8, "Failed to submit nfc tap info: unauthorized.", 44, 2, _swiftEmptyArrayStorage);
    v39 = sub_100153DFC();
    v35 = swift_allocError(&_s15NFCTapInfoErrorON, v39, 0, 0);
    *v40 = 1;
    goto LABEL_9;
  }
  os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, qword_1011B7DE8, "Failed to submit nfc tap info: serverError.", 43, 2, _swiftEmptyArrayStorage);
  v42 = sub_100153DFC();
  v43 = swift_allocError(&_s15NFCTapInfoErrorON, v42, 0, 0);
  *v44 = 2;
  v49();
  swift_release();
  swift_errorRelease(v43);
  sub_1000126B0((uint64_t)v12, type metadata accessor for NFCTapResponse);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v29, v28);
}

_QWORD *sub_100152D38(uint64_t a1)
{
  int *v2;

  v2 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  sub_1007DFA88(*(_QWORD *)(a1 + v2[12]), *(_QWORD *)(a1 + v2[12] + 8), *(_QWORD *)(a1 + v2[13]), *(_QWORD *)(a1 + v2[13] + 8), *(_QWORD *)(a1 + v2[9]), *(_QWORD *)(a1 + v2[9] + 8), 1, 1, (void (*)(uint64_t, unint64_t, _OWORD *, uint64_t *))sub_100153E40);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100152EBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  _QWORD *v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[6];
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  NSObject *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  _QWORD v69[6];

  v10 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v10);
  v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for FMNAccountType(0);
  v43[5] = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for NFCTapEndPoint(0);
  v14 = __chkstk_darwin(v44);
  v16 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v43 - v17;
  v52 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v53 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v57);
  v58 = (char *)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Date(0);
  v55 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v54 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for HashAlgorithm(0);
  v64 = *(_QWORD *)(v22 - 8);
  v65 = v22;
  __chkstk_darwin(v22);
  v63 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for TimeBasedKey(0);
  v24 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v68 = (uint64_t)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (_QWORD *)swift_allocObject(&unk_10105A318, 48, 7);
  v26[2] = a2;
  v26[3] = a3;
  v26[4] = a4;
  v26[5] = a5;
  swift_retain();
  v27 = a3;
  swift_retain();
  v59 = a1;
  v28 = sub_100152D38(a1);
  v29 = v28[2];
  if (v29)
  {
    v43[1] = v18;
    v43[2] = v16;
    v43[3] = v12;
    v48 = a4;
    v49 = v27;
    v43[4] = a2;
    v50 = v26;
    v69[5] = _swiftEmptyArrayStorage;
    v67 = v29;
    sub_10009A92C(0, v29, 0);
    v30 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v47 = v28;
    v31 = (uint64_t)v28 + v30;
    v62 = *(_QWORD *)(v24 + 72);
    v61 = enum case for HashAlgorithm.sha256(_:);
    v60 = xmmword_100E22B10;
    v32 = v68;
    sub_10005972C(v31, v68, type metadata accessor for TimeBasedKey);
    v33 = v32 + *(int *)(v66 + 24);
    v35 = *(_QWORD *)(v33 + 16);
    v34 = *(_QWORD *)(v33 + 24);
    sub_10001BBBC(v35, v34);
    sub_1007E7118(v35, v34);
    v37 = v36;
    sub_1007E3D28(v36, 0);
    v39 = v38;
    CCECCryptorRelease(v37);
    sub_10001BC14(v35, v34);
    __asm { BR              X9 }
  }
  v40 = swift_bridgeObjectRelease();
  v41 = static os_signpost_type_t.end.getter(v40);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_signpost(_:dso:log:name:signpostID:)(v41, &_mh_execute_header, qword_1011B7D88, "nfcSubscription", 15, 2, a2 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);
  swift_beginAccess(a4 + 16, v69, 1, 0);
  *(_BYTE *)(a4 + 16) = 0;
  dispatch_group_leave(v27);
  return swift_release();
}

uint64_t sub_100153D10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100153D44(uint64_t a1)
{
  uint64_t v1;

  sub_10026C520(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_100153D50()
{
  unint64_t result;

  result = qword_1010F0E10;
  if (!qword_1010F0E10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HashedAdvertisement, &type metadata for HashedAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F0E10);
  }
  return result;
}

uint64_t sub_100153D94(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return sub_10001BC14(a2, a3);
  }
  return result;
}

uint64_t sub_100153DC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100153DEC(uint64_t a1)
{
  uint64_t v1;

  return sub_100152688(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100153DF4(char *a1)
{
  uint64_t v1;

  return sub_1001527A8(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100153DFC()
{
  unint64_t result;

  result = qword_1010F0C08;
  if (!qword_1010F0C08)
  {
    result = swift_getWitnessTable(&unk_100E292EC, &_s15NFCTapInfoErrorON);
    atomic_store(result, (unint64_t *)&qword_1010F0C08);
  }
  return result;
}

uint64_t sub_100153E40(uint64_t a1, uint64_t a2, uint64_t *a3, BOOL *a4)
{
  uint64_t v4;

  return sub_1001523E4(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(_QWORD *)(v4 + 24), *(unint64_t **)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t *sub_100153E4C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  sub_10001BD08(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BD08(v4, v5);
  return a1;
}

uint64_t sub_100153EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeBasedKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s15NFCTapInfoErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100153F38 + 4 * byte_100E2926D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100153F6C + 4 * byte_100E29268[v4]))();
}

uint64_t sub_100153F6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100153F74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100153F7CLL);
  return result;
}

uint64_t sub_100153F88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100153F90);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100153F94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100153F9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s15NFCTapInfoErrorOMa()
{
  return &_s15NFCTapInfoErrorON;
}

unint64_t sub_100153FBC()
{
  unint64_t result;

  result = qword_1010F0C10;
  if (!qword_1010F0C10)
  {
    result = swift_getWitnessTable(&unk_100E292C4, &_s15NFCTapInfoErrorON);
    atomic_store(result, (unint64_t *)&qword_1010F0C10);
  }
  return result;
}

uint64_t sub_100154004()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6988);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6988);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100EC9B80);
}

unint64_t sub_100154084(char a1)
{
  if (!a1)
    return 0xD000000000000037;
  if (a1 == 1)
    return 0xD000000000000036;
  return 0xD000000000000035;
}

uint64_t sub_1001540DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100511C50(*a1, *a2);
}

Swift::Int sub_1001540E8()
{
  char *v0;

  return sub_10051FB8C(*v0);
}

uint64_t sub_1001540F0(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100515480(a1, *v1);
}

Swift::Int sub_1001540F8(uint64_t a1)
{
  char *v1;

  return sub_1005165B8(a1, *v1);
}

unint64_t sub_100154100@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10015902C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10015412C@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = sub_100154084(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100154154(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[3] = a1;
  v4[4] = a3;
  v5 = *a2;
  v4[5] = a4;
  v4[6] = v5;
  v6 = sub_10001A9A8(&qword_1010F0F00);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ObservedAdvertisement(0);
  v4[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[9] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v9);
  v4[11] = swift_task_alloc(v9);
  return swift_task_switch(sub_1001541F0, 0, 0);
}

uint64_t sub_1001541F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;

  v2 = *(_QWORD *)(v1 + 24);
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v2);
    *(_QWORD *)(v1 + 96) = v3;
    if (v3)
      goto LABEL_3;
LABEL_24:
    swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v1 + 80);
    v31 = *(_QWORD *)(v1 + 88);
    v33 = *(_QWORD *)(v1 + 56);
    (*(void (**)(_QWORD))(v1 + 32))(0);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  if (v2 < 0)
    v30 = *(_QWORD *)(v1 + 24);
  else
    v30 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v3 = _CocoaArrayWrapper.endIndex.getter(v30);
  *(_QWORD *)(v1 + 96) = v3;
  if (!v3)
    goto LABEL_24;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = 0;
    v34 = (uint64_t *)(v1 + 16);
    while (1)
    {
      *(_QWORD *)(v1 + 104) = v4;
      v6 = *(_QWORD *)(v1 + 24);
      v7 = (v6 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v6)
         : *(id *)(v6 + 8 * v4 + 32);
      *(_QWORD *)(v1 + 112) = v7;
      v8 = *(_QWORD *)(v1 + 64);
      v9 = *(_QWORD *)(v1 + 72);
      v10 = *(_QWORD *)(v1 + 56);
      v0 = v7;
      sub_10069EE00(v0, 1, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) != 1)
        break;
      sub_100004048(*(_QWORD *)(v1 + 56), &qword_1010F0F00);
      if (qword_1010E99B0 != -1)
        swift_once(&qword_1010E99B0, sub_100154004);
      v11 = type metadata accessor for Logger(0);
      v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B6988);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.error.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
        v5 = v13;
      }
      else
      {
        v5 = v0;
        v0 = v13;
      }

      v4 = *(_QWORD *)(v1 + 104) + 1;
      if (v4 == *(_QWORD *)(v1 + 96))
        goto LABEL_24;
    }
    sub_1000126EC(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_1010E99B0 == -1)
      goto LABEL_16;
  }
  swift_once(&qword_1010E99B0, sub_100154004);
LABEL_16:
  v17 = *(_QWORD *)(v1 + 80);
  v16 = *(_QWORD *)(v1 + 88);
  v18 = type metadata accessor for Logger(0);
  *(_QWORD *)(v1 + 120) = sub_10001A9E8(v18, (uint64_t)qword_1011B6988);
  v19 = sub_100159F24(v16, v17);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v1 + 80);
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v36 = v25;
    *(_DWORD *)v24 = 136315138;
    sub_10016E3E4();
    *v34 = sub_100016940(v26, v27, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v1 + 24, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v23, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "observedAdvertisement: %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v1 + 80), type metadata accessor for ObservedAdvertisement);
  }

  -[NSObject refreshGeotag](v0, "refreshGeotag");
  -[NSObject observationValue](v0, "observationValue");
  v35 = (uint64_t (*)(uint64_t))((char *)&dword_101103E08 + dword_101103E08);
  v28 = (_QWORD *)swift_task_alloc(unk_101103E0C);
  *(_QWORD *)(v1 + 128) = v28;
  *v28 = v1;
  v28[1] = sub_100154624;
  return v35(*(_QWORD *)(v1 + 88));
}

uint64_t sub_100154624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100154A8C;
  else
    v3 = sub_100154688;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100154688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 88);

  sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement);
  v2 = *(_QWORD *)(v0 + 104) + 1;
  if (v2 == *(_QWORD *)(v0 + 96))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD))(v0 + 32))(0);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v32 = (uint64_t *)(v0 + 16);
    while (1)
    {
      *(_QWORD *)(v0 + 104) = v2;
      v9 = *(_QWORD *)(v0 + 24);
      v10 = (v9 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2, v9)
          : *(id *)(v9 + 8 * v2 + 32);
      *(_QWORD *)(v0 + 112) = v10;
      v11 = *(_QWORD *)(v0 + 64);
      v12 = *(_QWORD *)(v0 + 72);
      v13 = *(_QWORD *)(v0 + 56);
      v14 = v10;
      sub_10069EE00(v14, 1, v13);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) != 1)
        break;
      sub_100004048(*(_QWORD *)(v0 + 56), &qword_1010F0F00);
      if (qword_1010E99B0 != -1)
        swift_once(&qword_1010E99B0, sub_100154004);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B6988);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.", v7, 2u);
        swift_slowDealloc(v7, -1, -1);
        v8 = v17;
      }
      else
      {
        v8 = v14;
        v14 = v17;
      }

      v2 = *(_QWORD *)(v0 + 104) + 1;
      if (v2 == *(_QWORD *)(v0 + 96))
        goto LABEL_2;
    }
    sub_1000126EC(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_1010E99B0 != -1)
      swift_once(&qword_1010E99B0, sub_100154004);
    v20 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 88);
    v21 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 120) = sub_10001A9E8(v21, (uint64_t)qword_1011B6988);
    v22 = sub_100159F24(v19, v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(_QWORD *)(v0 + 80);
    if (v25)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v34 = v28;
      *(_DWORD *)v27 = 136315138;
      sub_10016E3E4();
      *v32 = sub_100016940(v29, v30, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v0 + 24, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v26, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "observedAdvertisement: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 80), type metadata accessor for ObservedAdvertisement);
    }

    -[NSObject refreshGeotag](v14, "refreshGeotag");
    -[NSObject observationValue](v14, "observationValue");
    v33 = (uint64_t (*)(uint64_t))((char *)&dword_101103E08 + dword_101103E08);
    v31 = (_QWORD *)swift_task_alloc(unk_101103E0C);
    *(_QWORD *)(v0 + 128) = v31;
    *v31 = v0;
    v31[1] = sub_100154624;
    return v33(*(_QWORD *)(v0 + 88));
  }
}

uint64_t sub_100154A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 136);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 136);
  if (v5)
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v9 = _convertErrorToNSError(_:)(v6);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error inserting observedAdvertisement: %@", (uint8_t *)v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }
  swift_errorRelease(v6);
  v11 = *(_QWORD *)(v0 + 88);

  sub_1000126B0(v11, type metadata accessor for ObservedAdvertisement);
  v12 = *(_QWORD *)(v0 + 104) + 1;
  if (v12 == *(_QWORD *)(v0 + 96))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD))(v0 + 32))(0);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v42 = (uint64_t *)(v0 + 16);
    while (1)
    {
      *(_QWORD *)(v0 + 104) = v12;
      v19 = *(_QWORD *)(v0 + 24);
      v20 = (v19 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v19)
          : *(id *)(v19 + 8 * v12 + 32);
      *(_QWORD *)(v0 + 112) = v20;
      v21 = *(_QWORD *)(v0 + 64);
      v22 = *(_QWORD *)(v0 + 72);
      v23 = *(_QWORD *)(v0 + 56);
      v24 = v20;
      sub_10069EE00(v24, 1, v23);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v21) != 1)
        break;
      sub_100004048(*(_QWORD *)(v0 + 56), &qword_1010F0F00);
      if (qword_1010E99B0 != -1)
        swift_once(&qword_1010E99B0, sub_100154004);
      v25 = type metadata accessor for Logger(0);
      v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6988);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error inserting observedAdvertisement: could not convert to ObservedAdvertisement.", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
        v18 = v27;
      }
      else
      {
        v18 = v24;
        v24 = v27;
      }

      v12 = *(_QWORD *)(v0 + 104) + 1;
      if (v12 == *(_QWORD *)(v0 + 96))
        goto LABEL_5;
    }
    sub_1000126EC(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 88), type metadata accessor for ObservedAdvertisement);
    if (qword_1010E99B0 != -1)
      swift_once(&qword_1010E99B0, sub_100154004);
    v30 = *(_QWORD *)(v0 + 80);
    v29 = *(_QWORD *)(v0 + 88);
    v31 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 120) = sub_10001A9E8(v31, (uint64_t)qword_1011B6988);
    v32 = sub_100159F24(v29, v30);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter(v33);
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v0 + 80);
    if (v35)
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v44 = v38;
      *(_DWORD *)v37 = 136315138;
      sub_10016E3E4();
      *v42 = sub_100016940(v39, v40, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, v0 + 24, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v36, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "observedAdvertisement: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 80), type metadata accessor for ObservedAdvertisement);
    }

    -[NSObject refreshGeotag](v24, "refreshGeotag");
    -[NSObject observationValue](v24, "observationValue");
    v43 = (uint64_t (*)(uint64_t))((char *)&dword_101103E08 + dword_101103E08);
    v41 = (_QWORD *)swift_task_alloc(unk_101103E0C);
    *(_QWORD *)(v0 + 128) = v41;
    *v41 = v0;
    v41[1] = sub_100154624;
    return v43(*(_QWORD *)(v0 + 88));
  }
}

void sub_100155208(uint64_t a1, char a2, void (*a3)(id))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  Class isa;
  void *v28;
  int v29;
  uint64_t v30;

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA238 != -1)
    swift_once(&qword_1010EA238, sub_100B5D838);
  v7 = qword_1011B7D18;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1011B7D18, "Received beaconPayloads search response.", 40, 2, _swiftEmptyArrayStorage);
  if ((a2 & 1) != 0)
  {
    v17 = swift_errorRetain(a1);
    v18 = static os_log_type_t.default.getter(v17);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    v30 = a1;
    swift_errorRetain(a1);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v22 = String.init<A>(describing:)(&v30, v21);
    v24 = v23;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10001AA00();
    *(_QWORD *)(v20 + 32) = v22;
    *(_QWORD *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v7, "Error reading cached beacon: %@", 31, 2, v20);
    swift_bridgeObjectRelease();
    v25 = objc_msgSend(objc_allocWithZone((Class)SPSearchResultMarker), "init");
    v26 = objc_allocWithZone((Class)SPBeaconPayloadCacheSearchResult);
    swift_errorRetain(a1);
    type metadata accessor for URL(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v28 = (void *)_convertErrorToNSError(_:)(a1);
    sub_1000FE214(a1, 1);
    v16 = objc_msgSend(v26, "initWithFileURLs:searchResultMarker:error:", isa, v25, v28);

    sub_1000FE214(a1, 1);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(v11 + 56) = &type metadata for Int;
    *(_QWORD *)(v11 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v11 + 32) = v12;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v7, "Received cached beaconPayloads: %i", v29);
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(objc_allocWithZone((Class)SPSearchResultMarker), "init");
    v14 = objc_allocWithZone((Class)SPBeaconPayloadCacheSearchResult);
    type metadata accessor for URL(0);
    v15 = Array._bridgeToObjectiveC()().super.isa;
    sub_1000FE214(a1, 0);
    v16 = objc_msgSend(v14, "initWithFileURLs:searchResultMarker:error:", v15, v13, 0);

  }
  a3(v16);

}

void sub_100155A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

void sub_100155BAC(uint64_t a1, void (*a2)(id))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Class v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  Class isa;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F0DC0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (_QWORD *)((char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA238 != -1)
    swift_once(&qword_1010EA238, sub_100B5D838);
  v10 = qword_1011B7D18;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D18, "Received advertisement search response.", 39, 2, _swiftEmptyArrayStorage);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v8, v4);
  if (v11 == enum case for LegacyResult.success<A>(_:))
  {
    v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 96))(v8, v4);
    v13 = *v8;
    v14 = static os_log_type_t.default.getter(v12);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    v17 = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v16 + 56) = &type metadata for Int;
    *(_QWORD *)(v16 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v16 + 32) = v17;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v10, "Received cached advertisements: %i", LODWORD(v41[0]));
    swift_bridgeObjectRelease();
    if (v17)
    {
      v44 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v17);
      v18 = v13 + 32;
      do
      {
        sub_100030784(v18, (uint64_t)v41);
        v19 = v42;
        v20 = v43;
        sub_10001AA44(v41, v42);
        v21 = sub_100261AAC(v19, v20);
        v22 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        v23 = v44[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
        v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
        specialized ContiguousArray._endMutation()(v24);
        v18 += 40;
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    v38 = objc_msgSend(objc_allocWithZone((Class)SPSearchResultMarker), "init");
    v39 = objc_allocWithZone((Class)SPAdvertisementCacheSearchResult);
    sub_10000F4A0(0, &qword_1010F0EC0, SPBeaconAdvertisement_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v37 = objc_msgSend(v39, "initWithBeaconAdvertisements:searchResultMarker:error:", isa, v38, 0);

    goto LABEL_11;
  }
  if (v11 == enum case for LegacyResult.failure<A>(_:))
  {
    v25 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 96))(v8, v4);
    v26 = *v8;
    v27 = static os_log_type_t.default.getter(v25);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
    v41[0] = v26;
    swift_errorRetain(v26);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v31 = String.init<A>(describing:)(v41, v30);
    v33 = v32;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_10001AA00();
    *(_QWORD *)(v29 + 32) = v31;
    *(_QWORD *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v10, "Error reading cached advertisements: %@", 39, 2, v29);
    swift_bridgeObjectRelease();
    v34 = objc_allocWithZone((Class)SPAdvertisementCacheSearchResult);
    swift_errorRetain(v26);
    sub_10000F4A0(0, &qword_1010F0EC0, SPBeaconAdvertisement_ptr);
    v35 = Array._bridgeToObjectiveC()().super.isa;
    v36 = (void *)_convertErrorToNSError(_:)(v26);
    swift_errorRelease(v26);
    v37 = objc_msgSend(v34, "initWithBeaconAdvertisements:searchResultMarker:error:", v35, 0, v36);

    swift_errorRelease(v26);
LABEL_11:
    a2(v37);

    return;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)(v4, v4);
  __break(1u);
}

uint64_t sub_100156184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 128) = a4;
  *(_QWORD *)(v5 + 136) = a5;
  return swift_task_switch(sub_10015619C, 0, 0);
}

uint64_t sub_10015619C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 144) = v2;
    *v2 = v0;
    v2[1] = sub_100156280;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100156280(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001562DC, 0, 0);
}

uint64_t sub_1001562DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void (*v10)(_QWORD);

  v1 = *(_QWORD *)(v0 + 152);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = dword_10111BB24;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 160) = v3;
    *v3 = v0;
    v3[1] = sub_100156424;
    return sub_100C64368();
  }
  else
  {
    if (qword_1010E99B0 != -1)
      swift_once(&qword_1010E99B0, sub_100154004);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B6988);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cleared anonymous observations due command.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(void (**)(_QWORD))(v0 + 128);

    v10(0);
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100156424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100156584;
  }
  else
  {
    swift_release();
    v3 = sub_100156490;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100156490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(_QWORD);

  if (qword_1010E99B0 != -1)
    swift_once(&qword_1010E99B0, sub_100154004);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6988);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Cleared anonymous observations due command.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(void (**)(_QWORD))(v0 + 128);

  v6(0);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100156584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);

  swift_release_n(*(_QWORD *)(v0 + 152), 2);
  if (qword_1010E99B0 != -1)
    swift_once(&qword_1010E99B0, sub_100154004);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6988);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 168);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to clear observations due to command, error: %@.", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 168));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(void (**)(uint64_t))(v0 + 128);

  swift_errorRetain(v12);
  v13(v12);
  swift_errorRelease(v12);
  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100156808()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AdvertisementCacheTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AdvertisementCacheTrampoline()
{
  return objc_opt_self(_TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline);
}

id sub_10015686C()
{
  uint64_t v0;
  void *v1;
  id v2;
  objc_class *v3;
  char *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = *(void **)(v0 + 144);
  if (v1)
  {
    v2 = *(id *)(v0 + 144);
  }
  else
  {
    v3 = (objc_class *)type metadata accessor for AdvertisementCacheTrampoline();
    v4 = (char *)objc_allocWithZone(v3);
    v5 = &v4[OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation];
    *(_QWORD *)v5 = v0;
    *((_QWORD *)v5 + 1) = &off_10105A4F0;
    *((_QWORD *)v5 + 2) = &off_10105A4B8;
    *((_QWORD *)v5 + 3) = &off_10105A478;
    *((_QWORD *)v5 + 4) = &off_1010880D8;
    v10.receiver = v4;
    v10.super_class = v3;
    swift_retain();
    v6 = objc_msgSendSuper2(&v10, "init");
    v7 = *(void **)(v0 + 144);
    *(_QWORD *)(v0 + 144) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

uint64_t sub_10015692C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[14] = v0;
  v2 = type metadata accessor for MachServiceName(0);
  v1[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for XPCServiceDescription(0);
  v1[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[17] = v4;
  v1[18] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001569AC, v0, 0);
}

uint64_t sub_1001569AC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  MachServiceName.init(_:)(0xD000000000000030, 0x8000000100EC9AF0);
  v1 = sub_10015686C();
  if (qword_1010E99B8 != -1)
    swift_once(&qword_1010E99B8, sub_100156FA4);
  v2 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = (id)qword_1010F0C20;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v3, 0, v1, v6, sub_10015A008, v5, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v2);
  v7 = swift_allocObject(&unk_10105A5A8, 24, 7);
  swift_weakInit(v7 + 16, v5);
  v8 = sub_10001A9A8(&qword_1010F0E48);
  inited = swift_initStackObject(v8, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPFinderStateChangedNotification);
  v12 = v11;
  v13 = swift_allocObject(&unk_10105A5D0, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10015A030;
  *(_QWORD *)(v13 + 24) = v7;
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(inited + 40) = v12;
  *(_QWORD *)(inited + 48) = sub_10015A05C;
  *(_QWORD *)(inited + 56) = v13;
  v14 = swift_allocObject(&unk_10105A5F8, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_10015A030;
  *(_QWORD *)(v14 + 24) = v7;
  *(_QWORD *)(inited + 64) = 0xD000000000000019;
  *(_QWORD *)(inited + 72) = 0x8000000100EC9B30;
  *(_QWORD *)(inited + 80) = sub_10015AAF0;
  *(_QWORD *)(inited + 88) = v14;
  swift_retain_n(v7, 2);
  v15 = sub_1006B9680(inited);
  v16 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper) = DarwinNotificationHelper.init(notificationHandlers:)(v15);
  swift_release();
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("AdvertisementCacheService.Startup", 33, 2, sub_10015A064, v5, (char *)&type metadata for () + 8);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100156C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("LeechScanner.EvaluateState", 26, 2, &unk_101103D70, 0);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100156CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD aBlock[6];
  _QWORD *v21;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)(a2 + 128);
  v11 = swift_allocObject(&unk_10105A620, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_10015A0A8;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105A638;
  v12 = _Block_copy(aBlock);
  swift_retain();
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_100156EB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10069F5C8();
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (_QWORD *)swift_allocObject(&unk_10105A670, 40, 7);
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = a1;
  swift_retain();
  sub_100028774((uint64_t)v4, (uint64_t)&unk_1010F0E68, (uint64_t)v6);
  swift_release();
  sub_100004048((uint64_t)v4, &qword_1010F46C0);
  Transaction.capture()();
}

id sub_100156FA4()
{
  id result;

  result = sub_100156FC0();
  qword_1010F0C20 = (uint64_t)result;
  return result;
}

id sub_100156FC0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPAdvertisementCacheXPCProtocol);
  v1 = sub_1007B6904();
  v2 = swift_allocObject(v1, ((*(unsigned int *)(v1 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v1 + 52) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E22B10;
  v3 = sub_10000F4A0(0, &qword_1010EE380, NSArray_ptr);
  *(_QWORD *)(v2 + 32) = v3;
  *(_QWORD *)(v2 + 40) = sub_10000F4A0(0, &qword_1010F0E78, SPAdvertisement_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "saveAdvertisements:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v4 = sub_1007B6904();
  v5 = swift_allocObject(v4, ((*(unsigned int *)(v4 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v4 + 52) | 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v5 + 32) = sub_10000F4A0(0, (unint64_t *)&unk_1010F0E80, SPAdvertisementCacheSearchCriteria_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v5, "advertisementsForSearchCriteria:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v6 = sub_1007B6904();
  v7 = swift_allocObject(v6, ((*(unsigned int *)(v6 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v6 + 52) | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = sub_10000F4A0(0, (unint64_t *)&qword_1010EE388, NSUUID_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v7, "markAdvertisementsProcessed:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v8 = sub_1007B6904();
  v9 = swift_allocObject(v8, ((*(unsigned int *)(v8 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v8 + 52) | 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v9 + 32) = v3;
  *(_QWORD *)(v9 + 40) = sub_10000F4A0(0, &qword_1010F0E90, SPBeaconPayload_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v9, "saveBeaconPayloads:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v10 = sub_1007B6904();
  v11 = swift_allocObject(v10, ((*(unsigned int *)(v10 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v10 + 52) | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v11 + 32) = sub_10000F4A0(0, &qword_1010F0E98, SPBeaconPayloadCacheSearchCriteria_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v11, "beaconPayloadsForSearchCriteria:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v12 = sub_1007B6904();
  v13 = swift_allocObject(v12, ((*(unsigned int *)(v12 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v12 + 52) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v13 + 32) = v3;
  *(_QWORD *)(v13 + 40) = sub_10000F4A0(0, &qword_1010F0EA0, NSURL_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v13, "markFilesProcessed:completion:", 0, 0);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001572C8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  char v12;

  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA238 != -1)
    swift_once(&qword_1010EA238, sub_100B5D838);
  v4 = qword_1011B7D18;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
  v8 = *(_QWORD *)(v1 + 112);
  v7 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 96) = sub_10000F4A0(0, (unint64_t *)&unk_101101770, NSXPCConnection_ptr);
  *(_QWORD *)(v6 + 104) = sub_100159FB0();
  *(_QWORD *)(v6 + 72) = a1;
  swift_bridgeObjectRetain(v7);
  v9 = a1;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "in custom shouldAccept (%@) for %@", 34, 2, v6);
  swift_bridgeObjectRelease();
  v12 = 0;
  v10 = sub_100159E64();
  return NSXPCConnection.hasEntitlement<A>(_:)(&v12, &type metadata for AdvertisementCacheEntitlement, v10) & 1;
}

uint64_t sub_100157400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_release(*(_QWORD *)(v0 + 136));
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_transactionManager;
  v2 = type metadata accessor for PressuredExitTransactionManager(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10015748C()
{
  uint64_t v0;

  sub_100157400();
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001574A4()
{
  return type metadata accessor for AdvertisementCacheService(0);
}

uint64_t type metadata accessor for AdvertisementCacheService(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F0C88;
  if (!qword_1010F0C88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AdvertisementCacheService);
  return result;
}

uint64_t sub_1001574E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[1] = &unk_100E293C8;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_100E293E0;
  result = type metadata accessor for PressuredExitTransactionManager(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100E293E0;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_1001575A0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  v1[14] = 0xD000000000000019;
  v1[15] = 0x8000000100E29370;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v20 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v2, v13);
  v1[16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100EC9A80, v7, v4, v11, 0);
  v16 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = XPCSessionManager.init(name:)(0xD000000000000019, 0x8000000100E29370);
  v1[17] = v17;
  v1[18] = 0;
  PressuredExitTransactionManager.init()(v17);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_darwinHelper) = 0;
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache) = _swiftEmptyDictionarySingleton;
  return v1;
}

uint64_t sub_1001577F8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F0C9C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_10015692C();
}

uint64_t sub_10015783C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v8[30] = a8;
  v8[31] = v22;
  v8[28] = a6;
  v8[29] = a7;
  v8[26] = a4;
  v8[27] = a5;
  v9 = type metadata accessor for UUID(0);
  v8[32] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[33] = v10;
  v8[34] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v8[35] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[36] = v12;
  v8[37] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F0ED8);
  v8[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CachedHistoricalLocation(0);
  v8[39] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[40] = v15;
  v8[41] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  v8[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TimeBasedKey(0);
  v8[43] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v8[44] = v18;
  v8[45] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for URL(0);
  v8[46] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v8[47] = v20;
  v8[48] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100157990, 0, 0);
}

uint64_t sub_100157990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 184, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 104);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC((__int128 *)(v0 + 104), v0 + 64);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 392) = v3;
    *v3 = v0;
    v3[1] = sub_100157A88;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100157A88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100157AE4, 0, 0);
}

uint64_t sub_100157AE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v13;
  void (*v14)(_QWORD, uint64_t);
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  void (*v22)(_QWORD, uint64_t);
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Class isa;
  Class v85;
  Class v86;
  Class v87;
  Class v88;
  Class v89;
  id v90;
  double v91;
  double v92;
  double v93;
  id v94;
  Class v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double *v107;
  void (*v108)(id, _QWORD);
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  SecKeyRef v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;

  v1 = (_QWORD *)(v0 + 64);
  if (*(_QWORD *)(v0 + 400))
  {
    v3 = *(_QWORD *)(v0 + 376);
    v2 = *(_QWORD *)(v0 + 384);
    v4 = *(_QWORD *)(v0 + 368);
    v5 = *(_QWORD *)(v0 + 232);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    v6 = type metadata accessor for BeaconPayloadFile(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    if (!sub_1002EBD24(v2))
    {
LABEL_8:
      v22 = *(void (**)(_QWORD, uint64_t))(v0 + 216);
      v23 = sub_100159E20();
      v24 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v23, 0, 0);
      *v25 = 3;
      v22(0, v24);
      swift_errorRelease(v24);
      swift_release();
      goto LABEL_9;
    }
    v7 = *(_QWORD *)(v0 + 344);
    v8 = *(_QWORD *)(v0 + 352);
    v9 = *(_QWORD *)(v0 + 336);
    v11 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 248);
    v12 = sub_100792AF0();
    ((void (*)(uint64_t, uint64_t))v12)(v11, v10);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
    {
      v13 = *(_QWORD *)(v0 + 336);
      swift_release();
      sub_100004048(v13, (uint64_t *)&unk_1010F0EE0);
      goto LABEL_8;
    }
    v18 = *(_QWORD *)(v0 + 360);
    v19 = *(_QWORD *)(v0 + 344);
    sub_1000126EC(*(_QWORD *)(v0 + 336), v18, type metadata accessor for TimeBasedKey);
    v20 = (uint64_t *)(v18 + *(int *)(v19 + 24));
    v21 = v20[5];
    if (v21 >> 60 == 15)
    {
      sub_1000126B0(*(_QWORD *)(v0 + 360), type metadata accessor for TimeBasedKey);
      swift_release();
      goto LABEL_8;
    }
    v33 = v20[4];
    sub_10001BBBC(v33, v20[5]);
    v118 = sub_1002F7F34(v33, v21);
    v119 = (_QWORD *)(v0 + 144);
    v120 = v21;
    v121 = v33;
    v35 = *v20;
    v34 = v20[1];
    v36 = v20[2];
    v37 = v20[3];
    *(_QWORD *)(v0 + 16) = *v20;
    *(_QWORD *)(v0 + 24) = v34;
    *(_QWORD *)(v0 + 32) = v36;
    *(_QWORD *)(v0 + 40) = v37;
    *(_QWORD *)(v0 + 48) = v121;
    *(_QWORD *)(v0 + 56) = v120;
    sub_10001BD08(v35, v34);
    sub_10001BBBC(v36, v37);
    sub_10001BD08(v121, v120);
    v38 = sub_1007DFD44();
    v40 = v39;
    v41 = v34;
    v42 = v40;
    sub_10001EF3C(v35, v41);
    sub_10001BC14(v36, v37);
    sub_10001EF3C(v121, v120);
    sub_1003DB90C(v118, v38, v42, v0 + 144);
    v43 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 320);
    v45 = *(_QWORD *)(v0 + 304);
    sub_10001BC14(v38, v42);
    v46 = *(_QWORD *)(v0 + 168);
    v47 = *(_QWORD *)(v0 + 176);
    sub_10001AA44((_QWORD *)(v0 + 144), v46);
    (*(void (**)(uint64_t, uint64_t))(v47 + 24))(v46, v47);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43) == 1)
    {
      v48 = *(_QWORD *)(v0 + 360);
      v49 = *(void (**)(_QWORD, _QWORD))(v0 + 216);
      sub_100004048(*(_QWORD *)(v0 + 304), &qword_1010F0ED8);
      v49(0, 0);

      swift_release();
      sub_10001EF3C(v121, v120);
      swift_release();
      v50 = v48;
    }
    else
    {
      sub_1000126EC(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328), type metadata accessor for CachedHistoricalLocation);
      v52 = *(_QWORD *)(v0 + 168);
      v51 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v52);
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v51 + 8) + 8))(v52);
      v55 = v54;
      v57 = *(_QWORD *)(v0 + 168);
      v56 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v57);
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v56 + 8) + 16))(v57);
      v60 = v59;
      sub_10001BBBC(v53, v55);
      sub_10078E27C(v58, v60);
      sub_10001BC14(v58, v60);
      sub_10001BC14(v53, v55);
      v114 = v53;
      v117 = v55;
      v62 = *(_QWORD *)(v0 + 168);
      v61 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v62);
      v116 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v61 + 8) + 8))(v62);
      v115 = v63;
      v64 = sub_10001A9A8(&qword_1010ED318);
      v65 = swift_allocObject(v64, 33, 7);
      *(_OWORD *)(v65 + 16) = xmmword_100E22B00;
      v66 = *(_QWORD *)(v0 + 168);
      v67 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v66);
      v68 = *(_QWORD *)(v67 + 8);
      v69 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 24);
      sub_10001BBBC(v114, v117);
      v70 = v69(v66, v68);
      v107 = *(double **)(v0 + 328);
      v71 = *(_QWORD *)(v0 + 296);
      v105 = *(_QWORD *)(v0 + 288);
      v106 = *(_QWORD *)(v0 + 280);
      v109 = *(_QWORD *)(v0 + 360);
      v110 = *(_QWORD *)(v0 + 272);
      v103 = *(_QWORD *)(v0 + 264);
      v104 = *(_QWORD *)(v0 + 256);
      v108 = *(void (**)(id, _QWORD))(v0 + 216);
      *(_BYTE *)(v65 + 32) = (v70 >> 4) & 3;
      v112 = sub_100646458(v65);
      v113 = v72;
      swift_bridgeObjectRelease();
      v73 = swift_allocObject(v64, 33, 7);
      *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
      v75 = *(_QWORD *)(v0 + 168);
      v74 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v75);
      *(_BYTE *)(v73 + 32) = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)(v74 + 8) + 24))(v75) >> 6;
      v100 = sub_100646458(v73);
      v111 = v76;
      swift_bridgeObjectRelease();
      v78 = *(_QWORD *)(v0 + 168);
      v77 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v78);
      v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v77 + 8) + 24))(v78);
      v80 = *(_QWORD *)(v0 + 168);
      v79 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v80);
      v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v79 + 8) + 40))(v80);
      v82 = *(_QWORD *)(v0 + 168);
      v81 = *(_QWORD *)(v0 + 176);
      sub_10001AA44(v119, v82);
      v99 = v71;
      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v81 + 8) + 48))(v82);
      UUID.init()(v83);
      v98 = objc_allocWithZone((Class)SPBeaconAdvertisement);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v85 = Data._bridgeToObjectiveC()().super.isa;
      v86 = Data._bridgeToObjectiveC()().super.isa;
      v87 = Data._bridgeToObjectiveC()().super.isa;
      v88 = Date._bridgeToObjectiveC()().super.isa;
      v89 = UUID._bridgeToObjectiveC()().super.isa;
      v90 = objc_msgSend(v98, "initWithAddress:publicKey:deviceType:batteryState:rawStatus:rssi:scanDate:recordIdentifier:", isa, v85, v86, v87, v102, v101, v88, v89);

      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v110, v104);
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v99, v106);
      sub_10001BC14(v100, v111);
      sub_10001BC14(v112, v113);
      sub_10001BC14(v114, v117);
      sub_10001BC14(v116, v115);
      v91 = *v107;
      v92 = v107[1];
      v93 = v107[2];
      v94 = objc_allocWithZone((Class)SPEstimatedLocation);
      v95 = Date._bridgeToObjectiveC()().super.isa;
      v96 = objc_msgSend(v94, "initWithTimestamp:latitude:longitude:horizontalAccuracy:altitude:verticalAccuracy:speed:speedAccuracy:course:courseAccuracy:floorLevel:", v95, 0, v91, v92, v93, -1.0, -1.0, -1.0, -1.0, -1.0, 0xBFF0000000000000);

      objc_msgSend(v90, "setLocation:", v96);
      v97 = v90;
      v108(v90, 0);

      swift_release();
      sub_10001EF3C(v121, v120);

      swift_release();
      sub_10001BC14(v114, v117);
      sub_1000126B0((uint64_t)v107, type metadata accessor for CachedHistoricalLocation);
      v50 = v109;
    }
    sub_1000126B0(v50, type metadata accessor for TimeBasedKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
  }
  else
  {
    v14 = *(void (**)(_QWORD, uint64_t))(v0 + 216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v15 = sub_100159E20();
    v16 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v15, 0, 0);
    *v17 = 2;
    v14(0, v16);
    swift_errorRelease(v16);
  }
LABEL_9:
  v26 = *(_QWORD *)(v0 + 360);
  v28 = *(_QWORD *)(v0 + 328);
  v27 = *(_QWORD *)(v0 + 336);
  v30 = *(_QWORD *)(v0 + 296);
  v29 = *(_QWORD *)(v0 + 304);
  v31 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001583AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5[18] = a4;
  v5[19] = a5;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F0E00);
  v5[20] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[21] = v7;
  v5[22] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v5[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[24] = v9;
  v5[25] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HashAlgorithm(0);
  v5[26] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[27] = v11;
  v5[28] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FBA40);
  v5[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v5[30] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[31] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[32] = swift_task_alloc(v15);
  v5[33] = swift_task_alloc(v15);
  v5[34] = swift_task_alloc(v15);
  v5[35] = swift_task_alloc(v15);
  v5[36] = swift_task_alloc(v15);
  v5[37] = swift_task_alloc(v15);
  v16 = type metadata accessor for ObservedAdvertisement(0);
  v5[38] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[39] = v17;
  v5[40] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100158514, 0, 0);
}

uint64_t sub_100158514()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB88 + dword_1010EBB88);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB8C);
    *(_QWORD *)(v0 + 328) = v2;
    *v2 = v0;
    v2[1] = sub_1001585F8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001585F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100158654, 0, 0);
}

uint64_t sub_100158654()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 336))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_101103F74);
    *(_QWORD *)(v0 + 344) = v2;
    *v2 = v0;
    v2[1] = sub_100158764;
    return sub_1006B5758();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = *(_QWORD *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 272);
    v6 = *(_QWORD *)(v0 + 280);
    v9 = *(_QWORD *)(v0 + 256);
    v8 = *(_QWORD *)(v0 + 264);
    v11 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 232);
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v5);
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100158764(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(v3 + 352) = a1;
  *(_QWORD *)(v3 + 360) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100158ED8;
  else
    v5 = sub_1001587D0;
  return swift_task_switch(v5, 0, 0);
}

void sub_1001587D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
LABEL_19:
    (*(void (**)(_QWORD *, _QWORD))(v0 + 144))(v7, 0);
    swift_release();
    swift_bridgeObjectRelease();
    v52 = *(_QWORD *)(v0 + 288);
    v53 = *(_QWORD *)(v0 + 296);
    v55 = *(_QWORD *)(v0 + 272);
    v54 = *(_QWORD *)(v0 + 280);
    v57 = *(_QWORD *)(v0 + 256);
    v56 = *(_QWORD *)(v0 + 264);
    v59 = *(_QWORD *)(v0 + 224);
    v58 = *(_QWORD *)(v0 + 232);
    v60 = *(_QWORD *)(v0 + 200);
    v88 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v53);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v88);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD **)(v0 + 248);
  v64 = *(_QWORD *)(v0 + 216);
  v65 = *(_QWORD *)(v0 + 304);
  v86 = *(_QWORD *)(v0 + 192);
  v63 = *(_QWORD *)(v0 + 168);
  v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v85 = *(_QWORD *)(v3 + 72);
  v62 = enum case for HashAlgorithm.sha256(_:);
  swift_bridgeObjectRetain(v1);
  v7 = _swiftEmptyArrayStorage;
  v61 = v4;
  v87 = v5;
  while (1)
  {
    sub_100159F24(v6, *(_QWORD *)(v0 + 320));
    v8 = *(_QWORD *)(v4 + 24);
    if ((v8 & 0x2000000000000000) != 0)
    {
      v39 = 1;
      goto LABEL_11;
    }
    v71 = v6;
    v72 = v7;
    v73 = v2;
    v74 = *(_QWORD *)(v0 + 320);
    v9 = *(_QWORD *)(v0 + 280);
    v76 = *(_QWORD *)(v0 + 288);
    v78 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 224);
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 184);
    v80 = *(_QWORD *)(v0 + 176);
    v82 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v4 + 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v64 + 104))(v10, v62, v12);
    sub_10001BBBC(v14, v8);
    v15 = Data.hash(algorithm:)(v10, v14, v8);
    v84 = v16;
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v10, v12);
    sub_10012C494(v14, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v11, v74 + *(int *)(v65 + 44), v13);
    sub_100B5D484(v9);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100EC9A60, 1);
    v17 = (void (*)(uint64_t, uint64_t))v87[1];
    v17(v9, v78);
    v18 = type metadata accessor for BeaconPayloadFile.MetaData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v80, 1, 1, v18);
    v19 = type metadata accessor for BeaconPayloadFile(0);
    v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, 1, 1, v82);
    v21 = v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
    v23 = (void (*)(uint64_t, uint64_t, uint64_t))v87[2];
    v23(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v76, v78);
    v24 = (uint64_t *)(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement);
    *v24 = v15;
    v24[1] = v84;
    v25 = v15;
    sub_10001BBBC(v15, v84);
    v26 = objc_autoreleasePoolPush();
    v27 = Date.timeIntervalSinceReferenceDate.getter(v26);
    if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
      break;
    if (v27 <= -9.22337204e18)
      goto LABEL_21;
    if (v27 >= 9.22337204e18)
      goto LABEL_22;
    v67 = *(_QWORD *)(v0 + 288);
    v70 = *(_QWORD *)(v0 + 280);
    v83 = v23;
    v28 = *(_QWORD *)(v0 + 272);
    v69 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 240);
    v81 = *(_QWORD *)(v0 + 232);
    v77 = *(_QWORD *)(v0 + 200);
    v75 = *(_QWORD *)(v0 + 184);
    v79 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 136) = (uint64_t)v27;
    v66 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v68 = v17;
    v31 = v30;
    *(_QWORD *)(v0 + 120) = v25;
    *(_QWORD *)(v0 + 128) = v84;
    v32 = sub_100153D50();
    v33 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v32);
    URL.appendingPathComponent(_:isDirectory:)(v33, v34, 1);
    swift_bridgeObjectRelease();
    URL.appendingPathComponent(_:isDirectory:)(v66, v31, 0);
    swift_bridgeObjectRelease();
    v68(v28, v29);
    v35 = (void (*)(uint64_t, uint64_t, uint64_t))v87[4];
    v35(v70, v69, v29);
    objc_autoreleasePoolPop(v26);
    sub_10001BC14(v25, v84);
    v68(v67, v29);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v77, v75);
    v35(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v70, v29);
    sub_100159F68(v79, v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData);
    v83(v81, v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v29);
    swift_setDeallocating(v20);
    v68(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v29);
    sub_10001BC14(*(_QWORD *)(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement), *(_QWORD *)(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement + 8));
    v68(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v29);
    sub_100004048(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData, (uint64_t *)&unk_1010F0E00);
    sub_100004048(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_1010F0E18);
    sub_100004048(v20 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, (uint64_t *)&unk_1010ED850);
    v36 = *(unsigned int *)(*(_QWORD *)v20 + 48);
    v37 = *(unsigned __int16 *)(*(_QWORD *)v20 + 52);
    v38 = v20;
    v5 = v87;
    swift_deallocClassInstance(v38, v36, v37);
    v39 = 0;
    v7 = v72;
    v2 = v73;
    v4 = v61;
    v6 = v71;
LABEL_11:
    v40 = *(_QWORD *)(v0 + 320);
    v42 = *(_QWORD *)(v0 + 232);
    v41 = *(_QWORD *)(v0 + 240);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5[7])(v42, v39, 1, v41);
    sub_1000126B0(v40, type metadata accessor for ObservedAdvertisement);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v5[6])(v42, 1, v41) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 232), &qword_1010FBA40);
    }
    else
    {
      v43 = v6;
      v44 = *(_QWORD *)(v0 + 296);
      v45 = *(_QWORD *)(v0 + 256);
      v46 = *(_QWORD *)(v0 + 240);
      v47 = (void (*)(uint64_t, uint64_t, uint64_t))v5[4];
      v47(v44, *(_QWORD *)(v0 + 232), v46);
      v47(v45, v44, v46);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = (_QWORD *)sub_1007C8900(0, v7[2] + 1, 1, (unint64_t)v7);
      v49 = v7[2];
      v48 = v7[3];
      if (v49 >= v48 >> 1)
        v7 = (_QWORD *)sub_1007C8900(v48 > 1, v49 + 1, 1, (unint64_t)v7);
      v50 = *(_QWORD *)(v0 + 256);
      v51 = *(_QWORD *)(v0 + 240);
      v7[2] = v49 + 1;
      v47((uint64_t)v7+ ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80))+ v5[9] * v49, v50, v51);
      v6 = v43;
    }
    v6 += v85;
    if (!--v2)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 352), 2);
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
}

uint64_t sub_100158ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  swift_errorRetain(v1);
  v3(v1, 1);
  swift_release(v2);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100158FCC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  return sub_100159C7C(a4);
}

uint64_t sub_100158FD8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  return sub_100159280(a4, a5);
}

uint64_t sub_100158FE4(uint64_t a1, void (*a2)(void))
{
  return sub_10015913C(a2);
}

uint64_t sub_100158FF0(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010F0DB8, type metadata accessor for AdvertisementCacheService, (uint64_t)&unk_100E29478);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10015902C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049188, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100159074(char a1)
{
  id v2;
  void *v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  char v9;
  char v11;
  char v12;

  v2 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v2)
  {
    v3 = v2;
    v11 = a1;
    v4 = sub_100159E64();
    v5 = NSXPCConnection.hasEntitlement<A>(_:)(&v11, &type metadata for AdvertisementCacheEntitlement, v4);

    if ((v5 & 1) != 0)
      return 1;
  }
  type metadata accessor for Transaction(0);
  v6 = static Transaction.currentNSXPCConnection.getter();
  if (v6
    && (v7 = (void *)v6,
        v12 = a1,
        v8 = sub_100159E64(),
        v9 = NSXPCConnection.hasEntitlement<A>(_:)(&v12, &type metadata for AdvertisementCacheEntitlement, v8),
        v7,
        (v9 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10015913C(void (*a1)(void))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v2 = sub_100159074(1);
  if ((v2 & 1) != 0)
    return ((uint64_t (*)(_QWORD))a1)(0);
  v4 = static os_log_type_t.error.getter(v2);
  if (qword_1010EA238 != -1)
    swift_once(&qword_1010EA238, sub_100B5D838);
  v5 = qword_1011B7D18;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = 0xD000000000000036;
  *(_QWORD *)(v7 + 40) = 0x8000000100EC2BE0;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Cannot mark files as processed. Missing entitlement: %@", 55, 2, v7);
  swift_bridgeObjectRelease();
  v8 = sub_100159E20();
  v9 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v8, 0, 0);
  *v10 = 0;
  a1();
  return swift_errorRelease(v9);
}

uint64_t sub_100159280(void (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100159074(2);
  if ((v7 & 1) != 0)
  {
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
    v9 = (_QWORD *)swift_allocObject(&unk_10105A580, 48, 7);
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = a1;
    v9[5] = a2;
    swift_retain();
    sub_100691AC0((uint64_t)v6, (uint64_t)&unk_1010F0DF8, (uint64_t)v9);
    return swift_release();
  }
  else
  {
    v11 = static os_log_type_t.error.getter(v7);
    if (qword_1010EA238 != -1)
      swift_once(&qword_1010EA238, sub_100B5D838);
    v12 = qword_1011B7D18;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10001AA00();
    *(_QWORD *)(v14 + 32) = 0xD000000000000035;
    *(_QWORD *)(v14 + 40) = 0x8000000100EC2C20;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Cannot read beacon payloads. Missing entitlement: %@", 52, 2, v14);
    swift_bridgeObjectRelease();
    v15 = sub_100159E20();
    v16 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v15, 0, 0);
    *v17 = 0;
    a1(v16, 1);
    return swift_errorRelease(v16);
  }
}

uint64_t sub_100159464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  int v20;

  v4 = sub_100159074(1);
  if ((v4 & 1) != 0)
  {
    v5 = static os_log_type_t.default.getter(v4);
    if (qword_1010EA238 != -1)
      swift_once(&qword_1010EA238, sub_100B5D838);
    v6 = qword_1011B7D18;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    v9 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(v8 + 56) = &type metadata for Int;
    *(_QWORD *)(v8 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v8 + 32) = v9;
    v10 = 2;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Disabled advertisement cache. Count: %i", v20);
  }
  else
  {
    v11 = static os_log_type_t.error.getter(v4);
    if (qword_1010EA238 != -1)
      swift_once(&qword_1010EA238, sub_100B5D838);
    v12 = qword_1011B7D18;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10001AA00();
    *(_QWORD *)(v14 + 32) = 0xD000000000000036;
    *(_QWORD *)(v14 + 40) = 0x8000000100EC2BE0;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Cannot save advertisements. Missing entitlement: %@", 51, 2, v14);
    v10 = 0;
  }
  swift_bridgeObjectRelease();
  v15 = sub_100159E20();
  v16 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v15, 0, 0);
  *v17 = v10;
  v18 = (void *)_convertErrorToNSError(_:)(v16);
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v18);

  return swift_errorRelease(v16);
}

void sub_100159654(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  const void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;

  v6 = type metadata accessor for SPCachedAdvertisement(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _Block_copy(a3);
  v10 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA238 != -1)
    swift_once(&qword_1010EA238, sub_100B5D838);
  v11 = qword_1011B7D18;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v38 = a1;
    else
      v38 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v14 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = v14;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Trampolining save advertisements: %i", v39);
  swift_bridgeObjectRelease();
  v15 = _swiftEmptyArrayStorage;
  if (!v14)
    goto LABEL_15;
  v50 = _swiftEmptyArrayStorage;
  sub_10009AB4C(0, v14 & ~(v14 >> 63), 0);
  if ((v14 & 0x8000000000000000) == 0)
  {
    v40 = a2;
    v41 = a3;
    v16 = 0;
    v15 = v50;
    v42 = a1 & 0xC000000000000001;
    v43 = v14;
    v44 = a1;
    do
    {
      if (v42)
        v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, a1);
      else
        v17 = *(id *)(a1 + 8 * v16 + 32);
      v18 = v17;
      v49 = objc_msgSend(v17, "status");
      v19 = objc_msgSend(v18, "address");
      v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v47 = v21;
      v48 = v20;

      v22 = objc_msgSend(v18, "advertisementData");
      v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26 = objc_msgSend(v18, "reserved");
      v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      v30 = objc_msgSend(v18, "rssi");
      v31 = objc_msgSend(v18, "scanDate");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v32 = v47;
      *(_QWORD *)v8 = v48;
      *((_QWORD *)v8 + 1) = v32;
      *((_QWORD *)v8 + 2) = v23;
      *((_QWORD *)v8 + 3) = v25;
      v8[32] = v49;
      *((_QWORD *)v8 + 5) = v27;
      *((_QWORD *)v8 + 6) = v29;
      *((_QWORD *)v8 + 7) = v30;
      v50 = v15;
      v34 = v15[2];
      v33 = v15[3];
      if (v34 >= v33 >> 1)
      {
        sub_10009AB4C(v33 > 1, v34 + 1, 1);
        v15 = v50;
      }
      ++v16;
      v15[2] = v34 + 1;
      sub_1000126EC((uint64_t)v8, (uint64_t)v15+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v34, type metadata accessor for SPCachedAdvertisement);
      a1 = v44;
    }
    while (v43 != v16);
    a2 = v40;
    a3 = v41;
LABEL_15:
    v35 = (uint64_t *)(a2
                    + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
    swift_beginAccess(a2+ OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation, &v50, 0, 0);
    v36 = *v35;
    swift_unknownObjectRetain(v36);
    v37 = sub_1007EDBEC((uint64_t)v15);
    swift_bridgeObjectRelease();
    _Block_copy(a3);
    sub_100159464((uint64_t)v37, (uint64_t)a3);
    _Block_release(a3);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v36);
    _Block_release(a3);
    return;
  }
  __break(1u);
}

uint64_t sub_100159A18(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;

  v2 = sub_100159074(1);
  if ((v2 & 1) != 0)
  {
    v3 = 2;
  }
  else
  {
    v4 = static os_log_type_t.error.getter(v2);
    if (qword_1010EA238 != -1)
      swift_once(&qword_1010EA238, sub_100B5D838);
    v5 = qword_1011B7D18;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_10001AA00();
    *(_QWORD *)(v7 + 32) = 0xD000000000000036;
    *(_QWORD *)(v7 + 40) = 0x8000000100EC2BE0;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Cannot mark advertisements as processed. Missing entitlement: %@", 64, 2, v7);
    swift_bridgeObjectRelease();
    v3 = 0;
  }
  v8 = sub_100159E20();
  v9 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v8, 0, 0);
  *v10 = v3;
  v11 = (void *)_convertErrorToNSError(_:)(v9);
  (*(void (**)(uint64_t, void *))(a1 + 16))(a1, v11);

  return swift_errorRelease(v9);
}

uint64_t sub_100159B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v14;
  _BYTE v15[24];

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA238 != -1)
    swift_once(&qword_1010EA238, sub_100B5D838);
  v7 = qword_1011B7D18;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v9 + 56) = &type metadata for Int;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 32) = v10;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Marking records for deletion: %i", v14);
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(a2
                  + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
  swift_beginAccess(v11, v15, 0, 0);
  v12 = *v11;
  swift_unknownObjectRetain(v12);
  sub_100159A18(a3);
  return swift_unknownObjectRelease(v12);
}

uint64_t sub_100159C7C(void (*a1)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010F0DC0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = 2;
  v7 = sub_100159074(2);
  if ((v7 & 1) == 0)
  {
    v8 = static os_log_type_t.error.getter(v7);
    if (qword_1010EA238 != -1)
      swift_once(&qword_1010EA238, sub_100B5D838);
    v9 = qword_1011B7D18;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10001AA00();
    *(_QWORD *)(v11 + 32) = 0xD000000000000035;
    *(_QWORD *)(v11 + 40) = 0x8000000100EC2C20;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Cannot read advertisements. Missing entitlement: %@", 51, 2, v11);
    swift_bridgeObjectRelease();
    v6 = 0;
  }
  v12 = sub_100159E20();
  v13 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v12, 0, 0);
  *v14 = v6;
  *v5 = v13;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for LegacyResult.failure<A>(_:), v2);
  a1(v5);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_100159E20()
{
  unint64_t result;

  result = qword_1010F0DD8;
  if (!qword_1010F0DD8)
  {
    result = swift_getWitnessTable(&unk_100E29610, &type metadata for AdvertisementCacheService.AdvertisementCacheServiceError);
    atomic_store(result, (unint64_t *)&qword_1010F0DD8);
  }
  return result;
}

unint64_t sub_100159E64()
{
  unint64_t result;

  result = qword_1010F0DE0;
  if (!qword_1010F0DE0)
  {
    result = swift_getWitnessTable(&unk_100E295E8, &type metadata for AdvertisementCacheEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010F0DE0);
  }
  return result;
}

uint64_t sub_100159EAC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1010F0DF4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1001583AC(a1, v4, v5, v7, v6);
}

uint64_t sub_100159F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservedAdvertisement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100159F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F0E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100159FB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F0E40;
  if (!qword_1010F0E40)
  {
    v1 = sub_10000F4A0(255, (unint64_t *)&unk_101101770, NSXPCConnection_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1010F0E40);
  }
  return result;
}

uint64_t sub_10015A00C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015A030(uint64_t a1)
{
  uint64_t v1;

  return sub_100156C3C(a1, v1);
}

uint64_t sub_10015A038()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015A05C(uint64_t a1)
{
  uint64_t v1;

  return sub_100274D68(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10015A064(uint64_t a1)
{
  uint64_t v1;

  return sub_100156CB8(a1, v1);
}

uint64_t sub_10015A07C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10015A0A8()
{
  uint64_t v0;

  sub_100156EB8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10015A0B0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10015A0DC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101103D54);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  return sub_1006A14C4();
}

uint64_t sub_10015A148()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015A16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v5 = (_QWORD *)(v2
                + OBJC_IVAR____TtC12searchpartydP33_EBCE4CC9FC18641636B173DB27D7BE0028AdvertisementCacheTrampoline_implementation);
  swift_beginAccess(v5, v17, 0, 0);
  v6 = *v5;
  v7 = v5[2];
  ObjectType = swift_getObjectType(*v5);
  v16 = v6;
  v9 = qword_1010E9D08;
  swift_unknownObjectRetain(v6);
  if (v9 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v10 = sub_100C1AE54(v15);
  swift_bridgeObjectRelease();
  if (qword_1010EA480 != -1)
    swift_once(&qword_1010EA480, sub_100C74348);
  v11 = qword_1011B8030;
  v12 = swift_allocObject(&unk_10105A738, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v13 = *(void (**)(_QWORD, uint64_t, uint64_t, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v7 + 40);
  swift_bridgeObjectRetain(v11);
  swift_retain();
  v13(0, v11, v10, sub_10015A534, v12, ObjectType, v7);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_unknownObjectRelease(v16);
}

uint64_t sub_10015A2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)swift_allocObject(&unk_10105A6C0, 48, 7);
  v9[2] = 0;
  v10 = v9 + 2;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  v11 = swift_retain();
  if ((_DWORD)a1 == 1)
  {
    sub_100004048((uint64_t)v6, &qword_1010F46C0);
    v12 = 0;
    v13 = 0;
    v14 = 7168;
  }
  else
  {
    v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v14 = v15 | 0x1C00;
    v16 = *v10;
    if (*v10)
    {
      v17 = v9[3];
      ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v16);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v13 = v19;
      swift_unknownObjectRelease(v16);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  v20 = swift_allocObject(&unk_10105A6E8, 32, 7);
  *(_QWORD *)(v20 + 16) = &unk_1010F0EB0;
  *(_QWORD *)(v20 + 24) = v9;
  if (v13 | v12)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v12;
    v23[3] = v13;
  }
  else
  {
    v21 = 0;
  }
  swift_task_create(v14, v21, (char *)&type metadata for () + 8, &unk_1010EE4A0, v20);
  return swift_release();
}

uint64_t sub_10015A4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010F0EAC);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 128) = v3;
  return swift_task_switch(sub_10015619C, 0, 0);
}

void sub_10015A534(uint64_t a1)
{
  uint64_t v1;

  sub_100155BAC(a1, *(void (**)(id))(v1 + 16));
}

void sub_10015A53C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100155A24(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10015A544()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v17 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 56) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v16 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v16 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v15 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v1 + 8))(&v0[v3], v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(&v0[v7], v16);
  (*(void (**)(char *, uint64_t))(v10 + 8))(&v0[v12], v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_10015A654(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  type metadata accessor for Date(0);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = v1[5];
  v13 = v1[6];
  v14 = (_QWORD *)swift_task_alloc(dword_1010F0ECC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_10015783C(a1, v9, v10, v11, v12, v13, (uint64_t)v1 + v5, (uint64_t)v1 + v8);
}

void sub_10015A754(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100155208(a1, a2 & 1, *(void (**)(id))(v2 + 16));
}

uint64_t sub_10015A760()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10015A794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 48) = v3;
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F0EF4);
  *(_QWORD *)(v1 + 56) = v7;
  *v7 = v1;
  v7[1] = sub_10015A814;
  return sub_100154154(v2, (uint64_t *)(v1 + 16), v6, v5);
}

uint64_t sub_10015A814()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t storeEnumTagSinglePayload for AdvertisementCacheEntitlement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10015A8A8 + 4 * byte_100E29335[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10015A8DC + 4 * byte_100E29330[v4]))();
}

uint64_t sub_10015A8DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A8E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015A8ECLL);
  return result;
}

uint64_t sub_10015A8F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015A900);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10015A904(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A90C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementCacheEntitlement()
{
  return &type metadata for AdvertisementCacheEntitlement;
}

uint64_t storeEnumTagSinglePayload for AdvertisementCacheService.AdvertisementCacheServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10015A974 + 4 * byte_100E2933F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10015A9A8 + 4 * byte_100E2933A[v4]))();
}

uint64_t sub_10015A9A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A9B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015A9B8);
  return result;
}

uint64_t sub_10015A9C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015A9CCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10015A9D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015A9D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementCacheService.AdvertisementCacheServiceError()
{
  return &type metadata for AdvertisementCacheService.AdvertisementCacheServiceError;
}

unint64_t sub_10015A9F8()
{
  unint64_t result;

  result = qword_1010F0F08;
  if (!qword_1010F0F08)
  {
    result = swift_getWitnessTable(&unk_100E29520, &type metadata for AdvertisementCacheService.AdvertisementCacheServiceError);
    atomic_store(result, (unint64_t *)&qword_1010F0F08);
  }
  return result;
}

unint64_t sub_10015AA40()
{
  unint64_t result;

  result = qword_1010F0F10;
  if (!qword_1010F0F10)
  {
    result = swift_getWitnessTable(&unk_100E295C0, &type metadata for AdvertisementCacheEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010F0F10);
  }
  return result;
}

unint64_t sub_10015AA88()
{
  unint64_t result;

  result = qword_1010F0F18;
  if (!qword_1010F0F18)
  {
    result = swift_getWitnessTable(&unk_100E29548, &type metadata for AdvertisementCacheEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010F0F18);
  }
  return result;
}

uint64_t sub_10015AAF8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MACAddress(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v46 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v11 = *((_QWORD *)v10 - 1);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(int *)(v12 + 40);
  *(_QWORD *)&v14[v15] = 0;
  v16 = objc_msgSend(a1, "address");
  if (!v16)
  {

    v21 = 0;
    goto LABEL_5;
  }
  v17 = v16;
  v44 = v11;
  v45 = a2;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v20 = v19;

  MACAddress.init(string:type:)(v18, v20, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    sub_10015AE4C((uint64_t)v6);
    v21 = *(void **)&v14[v15];
    v11 = v44;
    a2 = v45;
LABEL_5:

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v11 + 56))(a2, 1, 1, v10);
  }
  v23 = v46;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v46, v6, v7);
  *(_QWORD *)&v14[v15] = a1;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v23, v7);
  v24 = a1;
  v25 = objc_msgSend(v24, "name");
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0xE000000000000000;
  }
  v30 = v44;
  v31 = (uint64_t *)&v14[v10[5]];
  *v31 = v27;
  v31[1] = v29;
  *(_DWORD *)&v14[v10[6]] = objc_msgSend(v24, "vendorId");
  v32 = objc_msgSend(v24, "productName");
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0xE000000000000000;
  }
  v37 = (uint64_t *)&v14[v10[7]];
  *v37 = v34;
  v37[1] = v36;
  *(_DWORD *)&v14[v10[8]] = objc_msgSend(v24, "productId");
  v38 = sub_1001EE37C(objc_msgSend(v24, "vendorId"), objc_msgSend(v24, "productId"));
  v40 = v39;

  (*(void (**)(char *, uint64_t))(v8 + 8))(v46, v7);
  v41 = (uint64_t *)&v14[v10[9]];
  *v41 = v38;
  v41[1] = v40;
  v42 = v45;
  sub_10015B04C((uint64_t)v14, v45);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v30 + 56))(v42, 0, 1, v10);
  return sub_10015B090((uint64_t)v14);
}

uint64_t type metadata accessor for BluetoothManagerDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F0F78;
  if (!qword_1010F0F78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BluetoothManagerDevice);
  return result;
}

uint64_t sub_10015AE4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10015AE8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v15[2];

  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  strcpy((char *)v15, "<productName:");
  HIWORD(v15[1]) = -4864;
  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for BluetoothManagerDevice(0) + 28));
  v2 = *v1;
  v3 = (void *)v1[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x746375646F727020;
  v5._object = (void *)0xEB000000003A6449;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x49726F646E657620;
  v7._object = (void *)0xEA00000000003A64;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10 = type metadata accessor for MACAddress(0);
  v11 = sub_10015B0CC();
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v15[0];
}

uint64_t sub_10015B04C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BluetoothManagerDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015B090(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BluetoothManagerDevice(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10015B0CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FBAE0;
  if (!qword_1010FBAE0)
  {
    v1 = type metadata accessor for MACAddress(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for MACAddress, v1);
    atomic_store(result, (unint64_t *)&qword_1010FBAE0);
  }
  return result;
}

uint64_t *sub_10015B114(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(_DWORD *)((char *)a1 + v9) = *(_DWORD *)((char *)a2 + v9);
    v13 = a3[7];
    v14 = a3[8];
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(_DWORD *)((char *)a1 + v14) = *(_DWORD *)((char *)a2 + v14);
    v18 = a3[9];
    v19 = (char *)a1 + v18;
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *(uint64_t *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    else
    {
      v23 = *v20;
      sub_10001BBBC(*v20, v21);
      *(_QWORD *)v19 = v23;
      *((_QWORD *)v19 + 1) = v21;
    }
    v24 = a3[10];
    v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)a1 + v24) = (uint64_t)v25;
    v26 = v25;
  }
  return a1;
}

void sub_10015B230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v4 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 36));
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_10001BC14(*v5, v6);

}

uint64_t sub_10015B2B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_DWORD *)(a1 + v13) = *(_DWORD *)(a2 + v13);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *(_QWORD *)(a2 + v17 + 8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_10001BBBC(*v19, v20);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v22 = a3[10];
  v23 = *(void **)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  v24 = v23;
  return a1;
}

uint64_t sub_10015B3A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v15 = a3[9];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      v20 = *v17;
      sub_10001BBBC(v20, v18);
      v21 = *v16;
      v22 = v16[1];
      *v16 = v20;
      v16[1] = v18;
      sub_10001BC14(v21, v22);
      goto LABEL_8;
    }
    sub_10015B504((uint64_t)v16);
    goto LABEL_6;
  }
  if (v18 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_8;
  }
  v19 = *v17;
  sub_10001BBBC(v19, v18);
  *v16 = v19;
  v16[1] = v18;
LABEL_8:
  v23 = a3[10];
  v24 = *(void **)(a1 + v23);
  v25 = *(void **)(a2 + v23);
  *(_QWORD *)(a1 + v23) = v25;
  v26 = v25;

  return a1;
}

uint64_t sub_10015B504(uint64_t a1)
{
  destroy for AccessoryProductData(a1);
  return a1;
}

uint64_t sub_10015B538(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + v8) = *(_DWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_10015B5C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[7];
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[9];
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *(_QWORD *)(a1 + v17 + 8);
  if (v20 >> 60 != 15)
  {
    v21 = v19[1];
    if (v21 >> 60 != 15)
    {
      v22 = *v18;
      *v18 = *v19;
      v18[1] = v21;
      sub_10001BC14(v22, v20);
      goto LABEL_6;
    }
    sub_10015B504((uint64_t)v18);
  }
  *(_OWORD *)v18 = *(_OWORD *)v19;
LABEL_6:
  v23 = a3[10];
  v24 = *(void **)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);

  return a1;
}

uint64_t sub_10015B6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10015B6D4);
}

uint64_t sub_10015B6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10015B754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10015B760);
}

uint64_t sub_10015B760(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10015B7DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for MACAddress(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E29668;
    v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[3] = &unk_100E29668;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = &unk_100E29680;
    v4[6] = &unk_100E29698;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10015B874()
{
  _OWORD *v0;
  char *v1;
  _OWORD v2[9];
  _OWORD v3[9];
  _OWORD v4[9];

  sub_10015BAD8(v0, v2);
  sub_10015BAD8(v2, v4);
  sub_10015BAD8(v0, v3);
  v1 = (char *)sub_10015B8D8 + 4 * byte_100E296E0[sub_10015BB08((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_10015B8D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  _OWORD v14[18];
  uint64_t v15;

  v2 = sub_10015BC30((uint64_t)&v15);
  v12 = *(_OWORD *)(v2 + 16);
  v13 = *(_OWORD *)v2;
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 40);
  v0[3] = (uint64_t)&type metadata for PencilInitiatePairingCommandPayload;
  v0[4] = sub_10015BCF4();
  v5 = swift_allocObject(&unk_10105AAE0, 64, 7);
  *v0 = v5;
  *(_OWORD *)(v5 + 16) = v13;
  *(_OWORD *)(v5 + 32) = v12;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v4;
  sub_10015BAD8((_OWORD *)(v1 - 192), v14);
  v6 = (uint64_t *)sub_10015BC30((uint64_t)v14);
  v7 = v6[2];
  v8 = v6[3];
  v9 = v6[4];
  v10 = v6[5];
  sub_10001BBBC(*v6, v6[1]);
  sub_10001BBBC(v7, v8);
  return sub_10001BBBC(v9, v10);
}

_OWORD *sub_10015BAD8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *a2 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  a2[3] = a1[3];
  a2[4] = v4;
  a2[1] = v2;
  a2[2] = v3;
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[8];
  a2[7] = a1[7];
  a2[8] = v7;
  a2[5] = v5;
  a2[6] = v6;
  return a2;
}

uint64_t sub_10015BB08(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 136) >> 59) & 6 | ((*(_QWORD *)(a1 + 120) & 0x2000000000000000) != 0);
  if (v1 <= 3)
    return v1;
  else
    return (*(_DWORD *)a1 + 4);
}

unint64_t sub_10015BB34()
{
  unint64_t result;

  result = qword_1010F0FC8;
  if (!qword_1010F0FC8)
  {
    result = swift_getWitnessTable(&unk_100E56C3C, &type metadata for PencilPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F0FC8);
  }
  return result;
}

unint64_t sub_10015BB78()
{
  unint64_t result;

  result = qword_1010F0FD0;
  if (!qword_1010F0FD0)
  {
    result = swift_getWitnessTable(&unk_100E45A30, &type metadata for PencilSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F0FD0);
  }
  return result;
}

uint64_t sub_10015BBBC()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10015BBE8()
{
  unint64_t result;

  result = qword_1010F0FD8;
  if (!qword_1010F0FD8)
  {
    result = swift_getWitnessTable(&unk_100E56D54, &type metadata for PencilFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F0FD8);
  }
  return result;
}

uint64_t sub_10015BC30(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 120) &= ~0x2000000000000000uLL;
  *(_QWORD *)(result + 136) = v1;
  return result;
}

unint64_t sub_10015BC4C()
{
  unint64_t result;

  result = qword_1010F0FE0;
  if (!qword_1010F0FE0)
  {
    result = swift_getWitnessTable(&unk_100E27700, &type metadata for PencilSendPairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F0FE0);
  }
  return result;
}

uint64_t sub_10015BC90()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  return swift_deallocObject(v0, 160, 7);
}

unint64_t sub_10015BCF4()
{
  unint64_t result;

  result = qword_1010F0FE8;
  if (!qword_1010F0FE8)
  {
    result = swift_getWitnessTable(&unk_100E58F34, &type metadata for PencilInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F0FE8);
  }
  return result;
}

uint64_t sub_10015BD3C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void destroy for PencilPairingCommand(uint64_t a1)
{
  sub_10015BDC4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), (void (*)(void))sub_10001BC14);
}

void sub_10015BDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, void (*a19)(void))
{
  switch((a18 >> 59) & 6 | ((a16 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 2uLL:
      a19();
      ((void (*)(uint64_t, uint64_t))a19)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a19)(a5, a6);
      break;
    case 1uLL:
      a19();
      ((void (*)(uint64_t, uint64_t))a19)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a19)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a19)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a19)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a19)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a19)(a13, a14);
      ((void (*)(uint64_t, unint64_t))a19)(a15, a16 & 0xDFFFFFFFFFFFFFFFLL);
      ((void (*)(uint64_t, unint64_t))a19)(a17, a18 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a19();
      ((void (*)(uint64_t, uint64_t))a19)(a3, a4);
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for PencilPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  sub_10015BDC4(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, (void (*)(void))sub_10001BBBC);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  return a1;
}

uint64_t assignWithCopy for PencilPairingCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v27 = a2[9];
  v28 = a2[10];
  v29 = a2[11];
  v30 = a2[12];
  v31 = a2[13];
  v32 = a2[14];
  v33 = a2[15];
  v34 = a2[16];
  v35 = a2[17];
  sub_10015BDC4(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35, (void (*)(void))sub_10001BBBC);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v28;
  *(_QWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v34;
  *(_QWORD *)(a1 + 136) = v35;
  sub_10015BDC4(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, (void (*)(void))sub_10001BC14);
  return a1;
}

uint64_t assignWithTake for PencilPairingCommand(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v3 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 128);
  v16 = *(_QWORD *)(a1 + 136);
  v17 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v17;
  v18 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v18;
  v19 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v19;
  v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = a2[8];
  sub_10015BDC4(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16, (void (*)(void))sub_10001BC14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingCommand(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int16 v6;
  unint64_t v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 > 0x3FFFB && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 262140);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_WORD *)(a1 + 110);
  v7 = *(_QWORD *)(a1 + 120);
  if ((((8
        * ((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0x4000)) | (((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0xC000 | (*(_QWORD *)(a1 + 136) >> 44) & 0x30000) >> 15)) ^ 0x3FFFF) >= 0x3FFFB)
    v8 = -1;
  else
    v8 = ((8
         * ((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0x4000)) | (((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (v3 >> 54) & 0xC0 | (v4 >> 52) & 0x300 | (v5 >> 50) & 0xC00 | v6 & 0x3000 | (v7 >> 46) & 0xC000 | (*(_QWORD *)(a1 + 136) >> 44) & 0x30000) >> 15)) ^ 0x3FFFF;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x3FFFB)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 262140;
    if (a3 >= 0x3FFFC)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0x3FFFC)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
    {
      v3 = ((-a2 >> 3) & 0x7FFF) - (a2 << 15);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((-a2 >> 3) & 3) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = (v3 << 56) & 0x3000000000000000;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = (v3 << 54) & 0x3000000000000000;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = (v3 << 52) & 0x3000000000000000;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 88) = (v3 << 50) & 0x3000000000000000;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = (v3 << 48) & 0x3000000000000000;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = (v3 << 46) & 0x3000000000000000;
      *(_QWORD *)(result + 128) = 0;
      *(_QWORD *)(result + 136) = (v3 << 44) & 0x3000000000000000;
    }
  }
  return result;
}

_QWORD *sub_10015C428(_QWORD *result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a2 < 4)
  {
    v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
    v3 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
    v4 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
    v5 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
    v6 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
    v7 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
    v8 = result[15] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    v9 = result[17] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] &= 0xCFFFFFFFFFFFFFFFLL;
    result[3] = v2;
    result[5] = v3;
    result[7] = v4;
    result[9] = v5;
    result[11] = v6;
    result[13] = v7;
    result[15] = v8;
    result[17] = v9;
  }
  else
  {
    *result = a2 - 4;
    *(_OWORD *)(result + 1) = 0u;
    *(_OWORD *)(result + 3) = 0u;
    *(_OWORD *)(result + 5) = 0u;
    *(_OWORD *)(result + 7) = 0u;
    *(_OWORD *)(result + 9) = 0u;
    *(_OWORD *)(result + 11) = 0u;
    *(_OWORD *)(result + 13) = 0u;
    *(_OWORD *)(result + 15) = 0u;
    result[17] = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCommand()
{
  return &type metadata for PencilPairingCommand;
}

_OWORD *sub_10015C4F0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *result;
  _OWORD v5[9];

  result = (_OWORD *)sub_10015D2FC(a1, (uint64_t)v5);
  if (!v2)
    return sub_10015BAD8(v5, a2);
  return result;
}

void sub_10015C534(_QWORD *a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[23];
  _OWORD v9[9];

  v2 = v1;
  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryEncoding.container()(v8, v5, v6);
  sub_10015BAD8(v2, v9);
  v7 = (char *)sub_10015C5F4 + 4 * byte_100E296EA[sub_10015BB08((uint64_t)v9)];
  __asm { BR              X11 }
}

uint64_t sub_10015C5F4()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v7 = sub_10015BC30(v6 - 232);
  *(_WORD *)(v0 + 160) = 256;
  static Endianness.current.getter(v7);
  v8 = sub_100112060();
  FixedWidthInteger.convert(to:)((_QWORD *)(v0 + 312), v4, &type metadata for UInt16, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  *(_WORD *)(v0 + 160) = *(_WORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 520);
  v10 = *(_QWORD *)(v0 + 528);
  sub_10009F5D0(v0 + 496, v9);
  ((void (*)(uint64_t, void *, unint64_t, uint64_t, uint64_t))dispatch thunk of BinaryEncodingContaining.encode<A>(_:))(v0 + 160, &type metadata for UInt16, v8, v9, v10);
  if (!v1)
  {
    sub_10015BAD8(v2, (_OWORD *)(v0 + 536));
    v11 = (char *)&loc_10015C6F0 + 4 * byte_100E296F0[sub_10015BB08(v0 + 536)];
    __asm { BR              X10 }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 496));
}

_OWORD *sub_10015CB80@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *result;
  _OWORD v5[9];

  result = sub_10015C4F0(a1, v5);
  if (!v2)
    return sub_10015BAD8(v5, a2);
  return result;
}

void sub_10015CBC4(_QWORD *a1)
{
  _OWORD *v1;
  _OWORD v3[9];

  sub_10015BAD8(v1, v3);
  sub_10015C534(a1);
}

unint64_t sub_10015CC10()
{
  unint64_t result;

  result = qword_1010F0FF0;
  if (!qword_1010F0FF0)
  {
    result = swift_getWitnessTable(&unk_100E29804, &type metadata for PencilPairingCommand.PencilPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F0FF0);
  }
  return result;
}

unint64_t sub_10015CC54()
{
  unint64_t result;

  result = qword_1010F0FF8;
  if (!qword_1010F0FF8)
  {
    result = swift_getWitnessTable(&unk_100E4DC70, &type metadata for UnpairCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F0FF8);
  }
  return result;
}

unint64_t sub_10015CC98()
{
  unint64_t result;

  result = qword_1010F1000;
  if (!qword_1010F1000)
  {
    result = swift_getWitnessTable(&unk_100E56C14, &type metadata for PencilPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F1000);
  }
  return result;
}

unint64_t sub_10015CCDC()
{
  unint64_t result;

  result = qword_1010F1008;
  if (!qword_1010F1008)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PencilSendPairingStatusCommandPayload, &type metadata for PencilSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F1008);
  }
  return result;
}

unint64_t sub_10015CD20()
{
  unint64_t result;

  result = qword_1010F1010;
  if (!qword_1010F1010)
  {
    result = swift_getWitnessTable("͍$", &type metadata for PencilFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F1010);
  }
  return result;
}

uint64_t *sub_10015CD64(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v13 = a1[11];
  v14 = a1[10];
  v15 = a1[13];
  v16 = a1[12];
  v17 = a1[15];
  v18 = a1[14];
  v19 = a1[17];
  v20 = a1[16];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  return a1;
}

unint64_t sub_10015CE48()
{
  unint64_t result;

  result = qword_1010F1018;
  if (!qword_1010F1018)
  {
    result = swift_getWitnessTable(&unk_100E58EE4, &type metadata for PencilInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F1018);
  }
  return result;
}

uint64_t sub_10015CE8C(unsigned __int16 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 256:
      result = 0;
      break;
    case 257:
      return result;
    case 258:
      result = 2;
      break;
    case 259:
      result = 3;
      break;
    case 260:
      result = 4;
      break;
    default:
      if (v1 == 516)
        result = 5;
      else
        result = 6;
      break;
  }
  return result;
}

void sub_10015CEEC(char a1, uint64_t a2)
{
  _BYTE v3[40];

  sub_100030784(a2, (uint64_t)v3);
  __asm { BR              X10 }
}

void sub_10015CF48()
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  ValueMetadata *v4;

  sub_10015BCF4();
  v2 = *(_QWORD *)(v1 - 80);
  v3 = sub_10001AA44((_QWORD *)(v1 - 104), v2);
  v4 = (ValueMetadata *)((uint64_t (*)(_QWORD *, uint64_t, uint64_t))swift_getDynamicType)(v3, v2, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 - 104));
  if (&type metadata for PencilInitiatePairingCommandPayload == v4)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10015D2CCLL);
}

uint64_t sub_10015D2FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v31;
  _QWORD *v32;
  _QWORD v33[5];
  _QWORD v34[5];
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  __int16 v38;

  v31 = a2;
  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v32 = a1;
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v35, v8, v9);
  v11 = v36;
  v10 = v37;
  sub_10009F5D0((uint64_t)v35, v36);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v33, &type metadata for UInt16, &type metadata for UInt16, v12, v11, v10);
  if (v2)
  {
    v14 = v32;
  }
  else
  {
    v38 = v33[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v34, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v15 = v34[0];
    v16 = sub_10015CE8C(v34[0]);
    if (v16 != 6)
      __asm { BR              X10 }
    v17 = static os_log_type_t.error.getter(v16);
    v14 = v32;
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v18 = qword_1011B7DF0;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    LOWORD(v34[0]) = v15;
    v21 = FixedWidthInteger.data.getter(&type metadata for UInt16, v12);
    v23 = v22;
    v24 = Data.hexString.getter(v21, v22);
    v26 = v25;
    sub_10001BC14(v21, v23);
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10001AA00();
    *(_QWORD *)(v20 + 32) = v24;
    *(_QWORD *)(v20 + 40) = v26;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Invalid opcode: %@", 18, 2, v20, v31);
    swift_bridgeObjectRelease();
    v27 = sub_10015CC10();
    v28 = swift_allocError(&type metadata for PencilPairingCommand.PencilPairingCommandError, v27, 0, 0);
    *v29 = 1;
    swift_willThrow(v28);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

double sub_10015D694(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0x2000000000000000;
  return result;
}

double sub_10015D6CC(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x2000000000000000;
  return result;
}

_QWORD *sub_10015D6EC(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[15] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  v8 = result[17] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v7;
  result[17] = v8;
  return result;
}

_QWORD *sub_10015D764(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[17] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v7;
  result[17] = v8;
  return result;
}

_QWORD *sub_10015D7D8(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[15] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v8;
  result[17] = v7;
  return result;
}

_QWORD *sub_10015D84C(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[7] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[9] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[5] = v2;
  result[7] = v3;
  result[9] = v4;
  result[11] = v5;
  result[13] = v6;
  result[15] = v7;
  result[17] = v8;
  return result;
}

uint64_t storeEnumTagSinglePayload for PencilPairingCommand.PencilPairingCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10015D908 + 4 * byte_100E29706[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10015D93C + 4 * byte_100E29701[v4]))();
}

uint64_t sub_10015D93C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015D944(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10015D94CLL);
  return result;
}

uint64_t sub_10015D958(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10015D960);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10015D964(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10015D96C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCommand.PencilPairingCommandError()
{
  return &type metadata for PencilPairingCommand.PencilPairingCommandError;
}

unint64_t sub_10015D98C()
{
  unint64_t result;

  result = qword_1010F1020;
  if (!qword_1010F1020)
  {
    result = swift_getWitnessTable(&unk_100E297DC, &type metadata for PencilPairingCommand.PencilPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F1020);
  }
  return result;
}

uint64_t sub_10015D9D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[6];
  *a2 = a1[5];
  a2[1] = v2;
  v3 = a1[4];
  a2[2] = a1[3];
  a2[3] = v3;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10015DA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v21 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v14, v15, v2, v13);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000046, 0x8000000100EC9EB0, v7, v4, v11, 0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v16 = sub_100C1ADF4((uint64_t)v21);
  v18 = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = v16;
  *(_QWORD *)(v1 + 32) = v18;
  strcpy((char *)(v1 + 40), "/acsnservice");
  *(_BYTE *)(v1 + 53) = 0;
  *(_WORD *)(v1 + 54) = -5120;
  sub_10015DC60();
  return v1;
}

uint64_t sub_10015DC60()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[6];

  v1 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = v0[2];
  v9 = swift_allocObject(&unk_10105ACA8, 24, 7);
  swift_weakInit(v9 + 16, v0);
  v10 = swift_allocObject(&unk_10105ACD0, 32, 7);
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = v1;
  aBlock[4] = sub_10015DFA0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105ACE8;
  v11 = _Block_copy(aBlock);
  v12 = swift_retain();
  static DispatchQoS.unspecified.getter(v12);
  v19 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v15 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release();
  return swift_release();
}

uint64_t sub_10015DE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = sub_10015DFA8();
    v6 = v5;
    v8 = v7;
    v3[3] = v4;
    v3[4] = v9;
    swift_bridgeObjectRelease();
    v3[5] = v6;
    v3[6] = v8;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10015DF04()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AnonymousCrowdSourceNetworkURLComponents()
{
  return objc_opt_self(_TtC12searchpartyd40AnonymousCrowdSourceNetworkURLComponents);
}

uint64_t sub_10015DF58()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10015DF7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015DFA0()
{
  uint64_t v0;

  return sub_10015DE80(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10015DFA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[12];
  unsigned int v34;
  uint64_t v35;

  v0 = type metadata accessor for FMNAccountType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v33[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v4);
  v6 = &v33[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v11 = v35;
  v12 = sub_100C1AE14(v35);
  if ((v12 & 1) != 0)
  {
    v13 = static os_log_type_t.default.getter(v12);
    if (qword_1010EA228 != -1)
      swift_once(&qword_1010EA228, sub_100B5D7D4);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7CF8, "ACSN: Overriding host name using value from defaults.", 53, 2, _swiftEmptyArrayStorage);
    v14 = sub_100C1ADF4(v11);
    swift_bridgeObjectRelease();
    return v14;
  }
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for FMNAccountType.searchParty(_:), v0);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v3);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v15 = sub_100027CE0((uint64_t)v6);
LABEL_14:
    v31 = static os_log_type_t.default.getter(v15);
    if (qword_1010EA228 != -1)
      swift_once(&qword_1010EA228, sub_100B5D7D4);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B7CF8, "ACSN: Fallback to hard-coded host name.", 39, 2, _swiftEmptyArrayStorage);
    v14 = sub_100C1ADF4(v11);
    swift_bridgeObjectRelease();
    return v14;
  }
  v16 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
  v17 = URL.host.getter(v16);
  if (!v18)
  {
    v15 = (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_14;
  }
  v14 = v17;
  v19 = v18;
  v20 = swift_bridgeObjectRelease();
  v21 = static os_log_type_t.default.getter(v20);
  if (qword_1010EA228 != -1)
    swift_once(&qword_1010EA228, sub_100B5D7D4);
  v22 = qword_1011B7CF8;
  v23 = os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7CF8, "ACSN: Using host name and path from authenticated setup bag.", 60, 2, _swiftEmptyArrayStorage);
  v34 = static os_log_type_t.default.getter(v23);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v25 = swift_allocObject(v24, 112, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  v26 = sub_10001AA00();
  *(_QWORD *)(v25 + 64) = v26;
  *(_QWORD *)(v25 + 32) = v14;
  *(_QWORD *)(v25 + 40) = v19;
  swift_bridgeObjectRetain(v19);
  v28 = URL.path.getter(v27);
  *(_QWORD *)(v25 + 96) = &type metadata for String;
  *(_QWORD *)(v25 + 104) = v26;
  *(_QWORD *)(v25 + 72) = v28;
  *(_QWORD *)(v25 + 80) = v29;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v22, "ACSN: hostName: [%@] path: [%@]", 31, 2, v25);
  v30 = swift_bridgeObjectRelease();
  URL.path.getter(v30);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return v14;
}

uint64_t sub_10015E3DC()
{
  uint64_t v0;
  Swift::String v1;

  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v0 = type metadata accessor for UnwantedTrackingUserNotification(0);
  v1._countAndFlagsBits = UUID.uuidString.getter(v0);
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  URL.init(string:)(0xD000000000000026, 0x8000000100EC5AE0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10015E480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  Swift::String v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v94;
  int *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;

  v1 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v1);
  v3 = (char *)&v94 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessoryMetadata(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessoryProductInfo(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for LocalizationUtility.Table(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v98 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v0 + *(int *)(type metadata accessor for UnwantedTrackingUserNotification(0) + 20);
  v17 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  if (*(unsigned __int8 *)(v16 + v17[13]) - 2 >= 3)
  {
    v23 = v16 + v17[12];
    v24 = *(void **)(v23 + 16);
    if (!v24)
    {
      v37 = 0xD00000000000001ALL;
      v42 = "ALERT_ITEM_FOLLOWING_TITLE";
LABEL_32:
      v85 = (unint64_t)(v42 - 32) | 0x8000000000000000;
      v28 = _swiftEmptyArrayStorage;
      goto LABEL_33;
    }
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_BYTE *)v23;
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = (_QWORD *)swift_allocObject(v27, 72, 7);
    *((_OWORD *)v28 + 1) = xmmword_100E22B00;
    v29 = (void *)sub_100ACD7B4(v26, v25, v24);
    v30 = objc_msgSend(v29, "description");

    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v34 = sub_100C73E1C(v31, v33);
    v36 = v35;
    swift_bridgeObjectRelease();
    v28[7] = &type metadata for String;
    v28[8] = sub_10001AA00();
    v28[4] = v34;
    v28[5] = v36;
    v37 = 0xD000000000000026;
    v38 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_TITLE";
    goto LABEL_29;
  }
  v96 = v7;
  v18 = v17;
  sub_10000F9B8(v16 + v17[15], (uint64_t)v10, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_10111C0A0);
    sub_10000F9B8(v16 + v18[14], (uint64_t)v3, &qword_101115E60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_100004048((uint64_t)v3, &qword_101115E60);
      v19 = v16 + v18[12];
      v20 = *(void **)(v19 + 16);
      if (v20)
      {
        v21 = *(_QWORD *)(v19 + 8);
        v22 = *(_BYTE *)v19;
LABEL_26:
        v75 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v28 = (_QWORD *)swift_allocObject(v75, 72, 7);
        *((_OWORD *)v28 + 1) = xmmword_100E22B00;
        v76 = (void *)sub_100ACD7B4(v22, v21, v20);
        v77 = objc_msgSend(v76, "description");

        v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v80 = v79;

        v81 = sub_100C73E1C(v78, v80);
        v83 = v82;
        swift_bridgeObjectRelease();
        v28[7] = &type metadata for String;
        v28[8] = sub_10001AA00();
        v28[4] = v81;
        v28[5] = v83;
        v37 = 0xD000000000000036;
        v38 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_UNKNOWN_TITLE_HAWKEYE";
        goto LABEL_29;
      }
      v37 = 0xD00000000000002ALL;
      goto LABEL_31;
    }
    v95 = v18;
    v43 = (uint64_t)v96;
    sub_1000126EC((uint64_t)v3, (uint64_t)v96, type metadata accessor for AccessoryMetadata);
    v44 = sub_1001D7148();
    v45 = (uint64_t *)(v43 + *(int *)(v4 + 28));
    if (!v44)
    {
      v40 = *v45;
      v41 = v45[1];
      swift_bridgeObjectRetain(v41);
      v51 = v43;
LABEL_22:
      sub_1000126B0(v51, type metadata accessor for AccessoryMetadata);
      v18 = v95;
      goto LABEL_23;
    }
    v46 = (void *)v45[1];
    v94 = (unint64_t)"WING_SUBTITLE_HAWKEYE";
    if (v46)
    {
      v47 = *v45;
      v100 = 0;
      v101 = 0xE000000000000000;
      swift_bridgeObjectRetain(v46);
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v100 = 0xD00000000000001DLL;
      v101 = 0x8000000100ECA0A0;
      v48._countAndFlagsBits = v47;
      v48._object = v46;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v50 = v100;
      v49 = v101;
    }
    else
    {
      v49 = 0x8000000100ECA050;
      v50 = 0xD00000000000001CLL;
    }
    v52 = enum case for LocalizationUtility.Table.default(_:);
    v54 = v97;
    v53 = v98;
    v55 = v99;
    v56 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 104);
    v56(v98, enum case for LocalizationUtility.Table.default(_:), v99);
    v40 = static LocalizationUtility.localizedString(key:table:)(v50, v49, v53);
    v41 = v57;
    v58 = *(void (**)(char *, uint64_t))(v54 + 8);
    v58(v53, v55);
    if (v40 == v50 && v41 == v49)
    {
      swift_bridgeObjectRelease();
      v59 = (uint64_t)v96;
    }
    else
    {
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v50, v49, 0);
      swift_bridgeObjectRelease();
      v59 = (uint64_t)v96;
      if ((v60 & 1) == 0)
      {
LABEL_21:
        v51 = v59;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    v62 = v98;
    v61 = v99;
    v56(v98, v52, v99);
    v40 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001CLL, v94 | 0x8000000000000000, v62);
    v41 = v63;
    v58(v62, v61);
    goto LABEL_21;
  }
  sub_1000126EC((uint64_t)v10, (uint64_t)v14, type metadata accessor for AccessoryProductInfo);
  v39 = (uint64_t *)&v14[*(int *)(v11 + 48)];
  v40 = *v39;
  v41 = v39[1];
  swift_bridgeObjectRetain(v41);
  sub_1000126B0((uint64_t)v14, type metadata accessor for AccessoryProductInfo);
LABEL_23:
  v64 = v16 + v18[12];
  v20 = *(void **)(v64 + 16);
  if (!v20)
  {
    if (v41)
    {
      v84 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v28 = (_QWORD *)swift_allocObject(v84, 72, 7);
      *((_OWORD *)v28 + 1) = xmmword_100E22B00;
      v28[7] = &type metadata for String;
      v28[8] = sub_10001AA00();
      v28[4] = v40;
      v28[5] = v41;
      v37 = 0xD000000000000021;
      v38 = "ALERT_ITEM_FOLLOWING_TITLE_AIRPOD";
      goto LABEL_29;
    }
    v37 = 0xD00000000000002ALL;
LABEL_31:
    v42 = "ALERT_ITEM_FOLLOWING_TITLE_UNKNOWN_HAWKEYE";
    goto LABEL_32;
  }
  v21 = *(_QWORD *)(v64 + 8);
  v22 = *(_BYTE *)v64;
  if (!v41)
    goto LABEL_26;
  v65 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v28 = (_QWORD *)swift_allocObject(v65, 112, 7);
  *((_OWORD *)v28 + 1) = xmmword_100E22B10;
  v66 = (void *)sub_100ACD7B4(v22, v21, v20);
  v67 = objc_msgSend(v66, "description");

  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v70 = v69;

  v71 = sub_100C73E1C(v68, v70);
  v73 = v72;
  swift_bridgeObjectRelease();
  v28[7] = &type metadata for String;
  v74 = sub_10001AA00();
  v28[4] = v71;
  v28[5] = v73;
  v28[12] = &type metadata for String;
  v28[13] = v74;
  v28[8] = v74;
  v28[9] = v40;
  v28[10] = v41;
  v37 = 0xD00000000000002ELL;
  v38 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_TITLE_HAWKEYE";
LABEL_29:
  v85 = (unint64_t)(v38 - 32) | 0x8000000000000000;
LABEL_33:
  v86 = v97;
  v87 = v98;
  v88 = v99;
  (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v98, enum case for LocalizationUtility.Table.default(_:), v99);
  v89 = static LocalizationUtility.localizedString(key:table:)(v37, v85, v87);
  v91 = v90;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
  v92 = String.init(format:arguments:)(v89, v91, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v92;
}

uint64_t sub_10015EC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  char *v20;
  void (**v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  void (**v27)(char *, uint64_t);
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (**v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (**v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (**v59)(char *, uint64_t);
  uint64_t v61;
  BOOL v62;
  char *v63;
  uint64_t *v64;
  void *v65;
  uint64_t v66;
  Swift::String v67;
  unint64_t v68;
  uint64_t v69;
  void (**v70)(char *, uint64_t);
  void (**v71)(char *, uint64_t);
  void (**v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void (**v94)(char *, uint64_t);
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v1 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v1);
  v93 = (uint64_t)&v91 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AccessoryMetadata(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessoryProductInfo(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizationUtility.Table(0);
  v94 = *(void (***)(char *, uint64_t))(v14 - 8);
  __chkstk_darwin(v14);
  v95 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v0 + *(int *)(type metadata accessor for UnwantedTrackingUserNotification(0) + 20);
  v17 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v18 = v17;
  v19 = *(unsigned __int8 *)(v16 + v17[13]);
  if (v19 == 3)
  {
    v92 = v6;
    sub_10000F9B8(v16 + v17[15], (uint64_t)v9, (uint64_t *)&unk_10111C0A0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100004048((uint64_t)v9, (uint64_t *)&unk_10111C0A0);
      v23 = v93;
      sub_10000F9B8(v16 + v18[14], v93, &qword_101115E60);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v23, 1, v3);
      v25 = v14;
      if (v24 == 1)
      {
        sub_100004048(v93, &qword_101115E60);
        v27 = v94;
        v26 = v95;
        ((void (*)(char *, _QWORD, uint64_t))v94[13])(v95, enum case for LocalizationUtility.Table.default(_:), v25);
        v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000025, 0x8000000100ECA020, v26);
        v27[1](v26, v25);
      }
      else
      {
        v61 = (uint64_t)v92;
        sub_1000126EC(v93, (uint64_t)v92, type metadata accessor for AccessoryMetadata);
        v62 = sub_1001D7148();
        v63 = v95;
        if (v62)
        {
          v64 = (uint64_t *)(v61 + *(int *)(v3 + 28));
          v65 = (void *)v64[1];
          if (v65)
          {
            v66 = *v64;
            v96 = 0;
            v97 = 0xE000000000000000;
            swift_bridgeObjectRetain(v65);
            _StringGuts.grow(_:)(31);
            swift_bridgeObjectRelease();
            v96 = 0xD00000000000001DLL;
            v97 = 0x8000000100ECA0A0;
            v67._countAndFlagsBits = v66;
            v67._object = v65;
            String.append(_:)(v67);
            swift_bridgeObjectRelease();
            v69 = v96;
            v68 = v97;
          }
          else
          {
            v69 = 0xD00000000000001CLL;
            v68 = 0x8000000100ECA050;
          }
          v71 = v94;
          v72 = (void (**)(char *, uint64_t))v94[13];
          LODWORD(v93) = enum case for LocalizationUtility.Table.default(_:);
          ((void (*)(char *))v72)(v63);
          v73 = static LocalizationUtility.localizedString(key:table:)(v69, v68, v63);
          v75 = v74;
          v76 = v71[1];
          v76(v63, v25);
          if (v73 == v69 && v75 == v68
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v73, v75, v69, v68, 0) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            if (qword_1010E9CE0 != -1)
              swift_once(&qword_1010E9CE0, sub_100563220);
            v77 = type metadata accessor for Logger(0);
            sub_10001A9E8(v77, (uint64_t)qword_1011B7148);
            swift_bridgeObjectRetain(v68);
            v79 = Logger.logObject.getter(v78);
            v80 = static os_log_type_t.error.getter(v79);
            if (os_log_type_enabled(v79, v80))
            {
              v81 = swift_slowAlloc(12, -1);
              v94 = v72;
              v82 = (uint8_t *)v81;
              v83 = swift_slowAlloc(32, -1);
              v96 = v83;
              *(_DWORD *)v82 = 136315138;
              swift_bridgeObjectRetain(v68);
              v98 = sub_100016940(v69, v68, &v96);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v82 + 4, v82 + 12);
              swift_bridgeObjectRelease_n(v68, 3);
              _os_log_impl((void *)&_mh_execute_header, v79, v80, "No fallback translation for key: %s", v82, 0xCu);
              swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
              v84 = v83;
              v61 = (uint64_t)v92;
              v63 = v95;
              swift_slowDealloc(v84, -1, -1);
              v85 = v82;
              v72 = v94;
              swift_slowDealloc(v85, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v68, 2);
            }
            ((void (*)(char *, _QWORD, uint64_t))v72)(v63, v93, v25);
            v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000025, 0x8000000100ECA020, v63);
            v76(v63, v25);
          }
          else
          {
            swift_bridgeObjectRelease();
            ((void (*)(char *, _QWORD, uint64_t))v72)(v63, v93, v25);
            v86 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000024, 0x8000000100ECA070, v63);
            v88 = v87;
            v76(v63, v25);
            v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
            v90 = swift_allocObject(v89, 72, 7);
            *(_OWORD *)(v90 + 16) = xmmword_100E22B00;
            *(_QWORD *)(v90 + 56) = &type metadata for String;
            *(_QWORD *)(v90 + 64) = sub_10001AA00();
            *(_QWORD *)(v90 + 32) = v73;
            *(_QWORD *)(v90 + 40) = v75;
            v22 = String.init(format:_:)(v86, v88, v90);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          v70 = v94;
          ((void (*)(char *, _QWORD, uint64_t))v94[13])(v95, enum case for LocalizationUtility.Table.default(_:), v25);
          v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000025, 0x8000000100ECA020, v63);
          v70[1](v63, v25);
        }
        sub_1000126B0(v61, type metadata accessor for AccessoryMetadata);
      }
    }
    else
    {
      sub_1000126EC((uint64_t)v9, (uint64_t)v13, type metadata accessor for AccessoryProductInfo);
      v49 = v94;
      v48 = v95;
      ((void (*)(char *, _QWORD, uint64_t))v94[13])(v95, enum case for LocalizationUtility.Table.default(_:), v14);
      v50 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000024, 0x8000000100ECA070, v48);
      v52 = v51;
      v49[1](v48, v14);
      v53 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v54 = swift_allocObject(v53, 72, 7);
      *(_OWORD *)(v54 + 16) = xmmword_100E22B00;
      v55 = &v13[*(int *)(v10 + 48)];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      *(_QWORD *)(v54 + 56) = &type metadata for String;
      *(_QWORD *)(v54 + 64) = sub_10001AA00();
      *(_QWORD *)(v54 + 32) = v57;
      *(_QWORD *)(v54 + 40) = v56;
      swift_bridgeObjectRetain(v56);
      v22 = String.init(format:_:)(v50, v52, v54);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for AccessoryProductInfo);
    }
  }
  else if (v19 == 2)
  {
    v21 = v94;
    v20 = v95;
    ((void (*)(char *, _QWORD, uint64_t))v94[13])(v95, enum case for LocalizationUtility.Table.default(_:), v14);
    v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000025, 0x8000000100ECA020, v20);
    v21[1](v20, v14);
  }
  else
  {
    v28 = (uint64_t *)(v16 + v17[12]);
    v29 = (void *)v28[2];
    v30 = v14;
    if (v29)
    {
      v31 = *v28;
      v32 = v28[1];
      v34 = v94;
      v33 = v95;
      ((void (*)(char *, _QWORD, uint64_t))v94[13])(v95, enum case for LocalizationUtility.Table.default(_:), v30);
      v35 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000029, 0x8000000100EC9FF0, v33);
      v37 = v36;
      v34[1](v33, v30);
      v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v39 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
      v40 = (void *)sub_100ACD7B4(v31, v32, v29);
      v41 = objc_msgSend(v40, "description");

      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      v45 = sub_100C73E1C(v42, v44);
      v47 = v46;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v39 + 56) = &type metadata for String;
      *(_QWORD *)(v39 + 64) = sub_10001AA00();
      *(_QWORD *)(v39 + 32) = v45;
      *(_QWORD *)(v39 + 40) = v47;
      v22 = String.init(format:_:)(v35, v37, v39);
      swift_bridgeObjectRelease();
    }
    else
    {
      v59 = v94;
      v58 = v95;
      ((void (*)(char *, _QWORD, uint64_t))v94[13])(v95, enum case for LocalizationUtility.Table.default(_:), v30);
      v22 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001DLL, 0x8000000100EC9FD0, v58);
      v59[1](v58, v30);
    }
  }
  return v22;
}

uint64_t sub_10015F5C4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 24));
}

unint64_t sub_10015F5D8()
{
  return sub_1006B8B10((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10015F5E4()
{
  unsigned __int8 *v0;

  return *v0;
}

_QWORD *sub_10015F5F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, int *, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(char *, uint64_t, uint64_t, __n128);
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  unsigned int (*v124)(char *, uint64_t, uint64_t, __n128);
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  int *v133;
  uint64_t v134;
  unsigned int (*v135)(char *, uint64_t, int *, __n128);
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  char *v170;
  void (*v171)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  void (*v185)(char *, char *, uint64_t);
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  __n128 v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  void (*v216)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  __n128 v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  char *__dst;
  char *__dsta;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  uint64_t v244;
  void (*v245)(char *, char *, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  _QWORD *v250;
  unsigned int (*v251)(char *, uint64_t, uint64_t);
  int *v252;
  char *v253;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    v18 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v252 = (int *)type metadata accessor for WildModeAssociationRecord(0);
    v253 = v8;
    v13 = v252[5];
    v14 = &v8[v13];
    v15 = &v9[v13];
    v250 = a1;
    v248 = a3;
    v242 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&v9[v13], 1, v10))
    {
      v16 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
    }
    v253[v252[6]] = v9[v252[6]];
    v19 = v252[7];
    v20 = &v253[v19];
    v21 = &v9[v19];
    v22 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = v252[8];
    v24 = *(_QWORD *)&v9[v23];
    *(_QWORD *)&v253[v23] = v24;
    v253[v252[9]] = v9[v252[9]];
    v25 = v252[10];
    v26 = &v253[v25];
    v27 = &v9[v25];
    v28 = v9;
    v29 = type metadata accessor for Date(0);
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(void (**)(char *, char *, uint64_t, __n128))(v30 + 16);
    v32 = swift_bridgeObjectRetain(v24);
    v31(v26, v27, v29, v32);
    v33 = v252[11];
    v34 = &v253[v33];
    v35 = &v28[v33];
    v251 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v249 = a2;
    v246 = v30;
    v247 = v29;
    v245 = (void (*)(char *, char *, uint64_t))v31;
    if (v251(&v28[v33], 1, v29))
    {
      v36 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v31)(v34, v35, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
    }
    v37 = v28;
    v38 = v252[12];
    v39 = &v253[v38];
    v40 = &v28[v38];
    *v39 = *v40;
    v41 = *((_QWORD *)v40 + 2);
    *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
    *((_QWORD *)v39 + 2) = v41;
    v253[v252[13]] = v28[v252[13]];
    v42 = v252[14];
    v43 = &v253[v42];
    v44 = &v28[v42];
    v45 = (int *)type metadata accessor for AccessoryMetadata(0);
    v46 = *((_QWORD *)v45 - 1);
    v47 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v46 + 48);
    v48 = swift_bridgeObjectRetain(v41);
    if (v47(v44, 1, v45, v48))
    {
      v49 = sub_10001A9A8(&qword_101115E60);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v242(v43, v44, v10);
      v50 = v45[5];
      v51 = (uint64_t *)&v43[v50];
      v52 = (uint64_t *)&v44[v50];
      v53 = *v52;
      v54 = v52[1];
      sub_10001BBBC(*v52, v54);
      *v51 = v53;
      v51[1] = v54;
      v55 = v45[6];
      v56 = &v43[v55];
      v57 = &v44[v55];
      v58 = *((_QWORD *)v57 + 1);
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *((_QWORD *)v56 + 1) = v58;
      v59 = v45[7];
      v60 = &v43[v59];
      v61 = &v44[v59];
      v62 = *((_QWORD *)v61 + 1);
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *((_QWORD *)v60 + 1) = v62;
      *(_DWORD *)&v43[v45[8]] = *(_DWORD *)&v44[v45[8]];
      v63 = v45[9];
      v64 = &v43[v63];
      v65 = &v44[v63];
      *(_DWORD *)v64 = *(_DWORD *)v65;
      v64[4] = v65[4];
      v66 = v45[10];
      v67 = &v43[v66];
      v68 = &v44[v66];
      *(_OWORD *)v67 = *(_OWORD *)v68;
      v67[16] = v68[16];
      v69 = v45[11];
      v70 = &v43[v69];
      v71 = &v44[v69];
      v70[8] = v71[8];
      *(_QWORD *)v70 = *(_QWORD *)v71;
      v72 = v45[12];
      v73 = &v43[v72];
      v74 = &v44[v72];
      *(_DWORD *)v73 = *(_DWORD *)v74;
      v73[4] = v74[4];
      v43[v45[13]] = v44[v45[13]];
      v43[v45[14]] = v44[v45[14]];
      v75 = v45[15];
      v76 = &v43[v75];
      v77 = &v44[v75];
      v78 = *((_QWORD *)v77 + 1);
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *((_QWORD *)v76 + 1) = v78;
      v79 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v46 + 56);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v62);
      v80 = swift_bridgeObjectRetain(v78);
      v79(v43, 0, 1, v45, v80);
    }
    v81 = v252[15];
    v82 = &v253[v81];
    v83 = &v37[v81];
    v84 = (int *)type metadata accessor for AccessoryProductInfo(0);
    v85 = *((_QWORD *)v84 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v85 + 48))(v83, 1, v84))
    {
      v86 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      v87 = v249;
      v18 = v250;
      v88 = v247;
      v89 = v248;
      v91 = v252;
      v90 = v253;
      v92 = v246;
    }
    else
    {
      v241 = v85;
      *(_QWORD *)v82 = *(_QWORD *)v83;
      v82[8] = v83[8];
      v93 = v84[5];
      v94 = &v82[v93];
      v95 = &v83[v93];
      v96 = type metadata accessor for ServerStatusCode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16))(v94, v95, v96);
      v82[v84[6]] = v83[v84[6]];
      v82[v84[7]] = v83[v84[7]];
      v97 = v84[8];
      v98 = &v82[v97];
      v99 = &v83[v97];
      v239 = *((_QWORD *)v99 + 1);
      *(_QWORD *)v98 = *(_QWORD *)v99;
      *((_QWORD *)v98 + 1) = v239;
      v82[v84[9]] = v83[v84[9]];
      v82[v84[10]] = v83[v84[10]];
      v82[v84[11]] = v83[v84[11]];
      v100 = v84[12];
      v101 = &v82[v100];
      v102 = &v83[v100];
      v103 = *((_QWORD *)v102 + 1);
      *(_QWORD *)v101 = *(_QWORD *)v102;
      *((_QWORD *)v101 + 1) = v103;
      v104 = v84[13];
      v105 = &v82[v104];
      v106 = &v83[v104];
      v107 = *((_QWORD *)v106 + 1);
      *(_QWORD *)v105 = *(_QWORD *)v106;
      *((_QWORD *)v105 + 1) = v107;
      v108 = v84[14];
      v109 = &v82[v108];
      v110 = &v83[v108];
      *(_QWORD *)v109 = *(_QWORD *)v110;
      v109[8] = v110[8];
      v111 = v84[15];
      v112 = &v82[v111];
      v113 = &v83[v111];
      v114 = *((_QWORD *)v113 + 1);
      *(_QWORD *)v112 = *(_QWORD *)v113;
      *((_QWORD *)v112 + 1) = v114;
      v115 = v84[16];
      __dst = &v82[v115];
      v237 = &v83[v115];
      v116 = type metadata accessor for URL(0);
      v117 = *(_QWORD *)(v116 - 8);
      v118 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v117 + 48);
      swift_bridgeObjectRetain(v239);
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRetain(v107);
      v119 = swift_bridgeObjectRetain(v114);
      v244 = v117;
      if (v118(v237, 1, v116, v119))
      {
        v120 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v237, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(__dst, v237, v116);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(__dst, 0, 1, v116);
      }
      v240 = v37;
      v121 = v84[17];
      v122 = &v82[v121];
      v123 = &v83[v121];
      v124 = v118;
      v243 = v116;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v118)(&v83[v121], 1, v116))
      {
        v125 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v122, v123, v116);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v122, 0, 1, v116);
      }
      v126 = v84[18];
      v127 = &v82[v126];
      v128 = &v83[v126];
      v129 = *((_QWORD *)v128 + 1);
      *(_QWORD *)v127 = *(_QWORD *)v128;
      *((_QWORD *)v127 + 1) = v129;
      *(_QWORD *)&v82[v84[19]] = *(_QWORD *)&v83[v84[19]];
      v130 = v84[20];
      v131 = &v82[v130];
      v132 = &v83[v130];
      v133 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      v134 = *((_QWORD *)v133 - 1);
      v135 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v134 + 48);
      v136 = swift_bridgeObjectRetain(v129);
      if (v135(v132, 1, v133, v136))
      {
        v137 = sub_10001A9A8(&qword_1010FBA50);
        memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
      }
      else
      {
        v238 = v134;
        v138 = *((_QWORD *)v132 + 1);
        *(_QWORD *)v131 = *(_QWORD *)v132;
        *((_QWORD *)v131 + 1) = v138;
        v139 = *((_QWORD *)v132 + 3);
        *((_QWORD *)v131 + 2) = *((_QWORD *)v132 + 2);
        *((_QWORD *)v131 + 3) = v139;
        v140 = *((_QWORD *)v132 + 5);
        *((_QWORD *)v131 + 4) = *((_QWORD *)v132 + 4);
        *((_QWORD *)v131 + 5) = v140;
        *((_WORD *)v131 + 24) = *((_WORD *)v132 + 24);
        v131[72] = v132[72];
        v141 = *((_QWORD *)v132 + 8);
        *((_QWORD *)v131 + 7) = *((_QWORD *)v132 + 7);
        *((_QWORD *)v131 + 8) = v141;
        v142 = v133[10];
        __dsta = &v131[v142];
        v143 = &v132[v142];
        swift_bridgeObjectRetain(v138);
        swift_bridgeObjectRetain(v139);
        v144 = swift_bridgeObjectRetain(v140);
        if (v124(v143, 1, v243, v144))
        {
          v145 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(__dsta, v143, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v244 + 16))(__dsta, v143, v243);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v244 + 56))(__dsta, 0, 1, v243);
        }
        v146 = v133[11];
        v147 = &v131[v146];
        v148 = &v132[v146];
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v124)(&v132[v146], 1, v243))
        {
          v149 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v244 + 16))(v147, v148, v243);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v244 + 56))(v147, 0, 1, v243);
        }
        v150 = v133[12];
        v151 = &v131[v150];
        v152 = &v132[v150];
        *(_QWORD *)v151 = *(_QWORD *)v152;
        v151[8] = v152[8];
        v153 = v133[13];
        v154 = &v131[v153];
        v155 = &v132[v153];
        v156 = *((_QWORD *)v155 + 1);
        *(_QWORD *)v154 = *(_QWORD *)v155;
        *((_QWORD *)v154 + 1) = v156;
        v157 = v133[14];
        v158 = *(_QWORD *)&v132[v157];
        *(_QWORD *)&v131[v157] = v158;
        v159 = v133[15];
        v160 = &v131[v159];
        v161 = &v132[v159];
        v162 = *((_QWORD *)v161 + 1);
        *(_QWORD *)v160 = *(_QWORD *)v161;
        *((_QWORD *)v160 + 1) = v162;
        v163 = v133[16];
        v164 = *(_QWORD *)&v132[v163];
        *(_QWORD *)&v131[v163] = v164;
        v165 = v133[17];
        v166 = &v131[v165];
        v167 = &v132[v165];
        *(_OWORD *)v166 = *(_OWORD *)v167;
        v166[16] = v167[16];
        v168 = v133[18];
        v169 = &v131[v168];
        v170 = &v132[v168];
        *(_OWORD *)v169 = *(_OWORD *)v170;
        v169[16] = v170[16];
        v171 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v238 + 56);
        swift_bridgeObjectRetain(v156);
        swift_bridgeObjectRetain(v158);
        swift_bridgeObjectRetain(v162);
        v172 = swift_bridgeObjectRetain(v164);
        v171(v131, 0, 1, v133, v172);
      }
      *(_DWORD *)&v82[v84[21]] = *(_DWORD *)&v83[v84[21]];
      v173 = v84[22];
      v174 = *(_QWORD *)&v83[v173];
      *(_QWORD *)&v82[v173] = v174;
      v175 = v84[23];
      v176 = &v82[v175];
      v177 = &v83[v175];
      v178 = *(_QWORD *)&v83[v175 + 8];
      swift_bridgeObjectRetain(v174);
      if (v178 >> 60 == 15)
      {
        *(_OWORD *)v176 = *(_OWORD *)v177;
      }
      else
      {
        v179 = *(_QWORD *)v177;
        sub_10001BBBC(v179, v178);
        *(_QWORD *)v176 = v179;
        *((_QWORD *)v176 + 1) = v178;
      }
      v180 = v84[24];
      v181 = &v82[v180];
      v182 = &v83[v180];
      v183 = *((_QWORD *)v182 + 1);
      if (v183 >> 60 == 15)
      {
        *(_OWORD *)v181 = *(_OWORD *)v182;
      }
      else
      {
        v184 = *(_QWORD *)v182;
        sub_10001BBBC(*(_QWORD *)v182, *((_QWORD *)v182 + 1));
        *(_QWORD *)v181 = v184;
        *((_QWORD *)v181 + 1) = v183;
      }
      v185 = *(void (**)(char *, char *, uint64_t))(v244 + 16);
      v185(&v82[v84[25]], &v83[v84[25]], v243);
      v185(&v82[v84[26]], &v83[v84[26]], v243);
      v185(&v82[v84[27]], &v83[v84[27]], v243);
      v185(&v82[v84[28]], &v83[v84[28]], v243);
      v185(&v82[v84[29]], &v83[v84[29]], v243);
      v185(&v82[v84[30]], &v83[v84[30]], v243);
      v186 = v84[31];
      v187 = &v82[v186];
      v188 = &v83[v186];
      v189 = *((_QWORD *)v188 + 1);
      *(_QWORD *)v187 = *(_QWORD *)v188;
      *((_QWORD *)v187 + 1) = v189;
      v190 = v84[32];
      v191 = *(_QWORD *)&v83[v190];
      *(_QWORD *)&v82[v190] = v191;
      v192 = v84[33];
      v193 = &v82[v192];
      v194 = &v83[v192];
      v195 = *((_QWORD *)v194 + 1);
      *(_QWORD *)v193 = *(_QWORD *)v194;
      *((_QWORD *)v193 + 1) = v195;
      v196 = v84[34];
      v197 = *(_QWORD *)&v83[v196];
      *(_QWORD *)&v82[v196] = v197;
      v198 = v84[35];
      v199 = &v82[v198];
      v200 = &v83[v198];
      *(_OWORD *)v199 = *(_OWORD *)v200;
      v199[16] = v200[16];
      v201 = v84[36];
      v202 = &v82[v201];
      v203 = &v83[v201];
      *(_OWORD *)v202 = *(_OWORD *)v203;
      v202[16] = v203[16];
      v204 = v84[37];
      v205 = &v82[v204];
      v206 = &v83[v204];
      swift_bridgeObjectRetain(v189);
      swift_bridgeObjectRetain(v191);
      swift_bridgeObjectRetain(v195);
      v207 = swift_bridgeObjectRetain(v197);
      ((void (*)(char *, char *, uint64_t, __n128))v185)(v205, v206, v243, v207);
      v185(&v82[v84[38]], &v83[v84[38]], v243);
      v185(&v82[v84[39]], &v83[v84[39]], v243);
      v185(&v82[v84[40]], &v83[v84[40]], v243);
      v185(&v82[v84[41]], &v83[v84[41]], v243);
      v185(&v82[v84[42]], &v83[v84[42]], v243);
      v82[v84[43]] = v83[v84[43]];
      v82[v84[44]] = v83[v84[44]];
      v82[v84[45]] = v83[v84[45]];
      v208 = v84[46];
      v209 = &v82[v208];
      v210 = &v83[v208];
      v211 = *((_QWORD *)v210 + 1);
      *(_QWORD *)v209 = *(_QWORD *)v210;
      *((_QWORD *)v209 + 1) = v211;
      v212 = v84[47];
      v213 = &v82[v212];
      v214 = &v83[v212];
      v215 = *((_QWORD *)v214 + 1);
      *(_QWORD *)v213 = *(_QWORD *)v214;
      *((_QWORD *)v213 + 1) = v215;
      v216 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v241 + 56);
      swift_bridgeObjectRetain(v211);
      v217 = swift_bridgeObjectRetain(v215);
      v216(v82, 0, 1, v84, v217);
      v87 = v249;
      v18 = v250;
      v88 = v247;
      v89 = v248;
      v91 = v252;
      v90 = v253;
      v92 = v246;
      v37 = v240;
    }
    v90[v91[16]] = v37[v91[16]];
    v218 = v91[17];
    v219 = *(_QWORD *)&v37[v218];
    *(_QWORD *)&v90[v218] = v219;
    v220 = v91[18];
    v221 = &v90[v220];
    v222 = &v37[v220];
    v223 = swift_bridgeObjectRetain(v219);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v251)(v222, 1, v88, v223))
    {
      v224 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v221, v222, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
    }
    else
    {
      v245(v221, v222, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v221, 0, 1, v88);
    }
    v225 = v91[19];
    v226 = &v90[v225];
    v227 = &v37[v225];
    if (v251(&v37[v225], 1, v88))
    {
      v228 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v226, v227, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
    }
    else
    {
      v245(v226, v227, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v226, 0, 1, v88);
    }
    v229 = v91[20];
    v230 = &v90[v229];
    v231 = (uint64_t *)&v37[v229];
    v232 = v231[1];
    if (((v232 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)v230 = *(_OWORD *)v231;
    }
    else
    {
      v233 = *v231;
      sub_10001BBBC(*v231, v231[1]);
      *(_QWORD *)v230 = v233;
      *((_QWORD *)v230 + 1) = v232;
    }
    v90[v91[21]] = v37[v91[21]];
    *(_WORD *)&v90[v91[22]] = *(_WORD *)&v37[v91[22]];
    *((_BYTE *)v18 + *(int *)(v89 + 24)) = *((_BYTE *)v87 + *(int *)(v89 + 24));
  }
  return v18;
}

uint64_t sub_100160330(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t *v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v2, v3);
  v6 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v7 = v2 + v6[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3))
    v5(v7, v3);
  v8 = v2 + v6[7];
  v9 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  v10 = v2 + v6[10];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  v14 = v2 + v6[11];
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v15(v14, 1, v11))
    v13(v14, v11);
  swift_bridgeObjectRelease();
  v16 = v2 + v6[14];
  v17 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v5(v16, v3);
    sub_10001BC14(*(_QWORD *)(v16 + *(int *)(v17 + 20)), *(_QWORD *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v18 = v2 + v6[15];
  v19 = (int *)type metadata accessor for AccessoryProductInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v19 - 1) + 48))(v18, 1, v19))
  {
    v20 = v18 + v19[5];
    v21 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v18 + v19[16];
    v23 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v23 - 8);
    v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    if (!v24(v22, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v22, v23);
    v41 = v15;
    v25 = v18 + v19[17];
    if (!v24(v25, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v23);
    swift_bridgeObjectRelease();
    v26 = v18 + v19[20];
    v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
    {
      v40 = v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = v26 + *(int *)(v27 + 40);
      if (!v24(v28, 1, v23))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v23);
      v29 = v26 + *(int *)(v27 + 44);
      if (!v24(v29, 1, v23))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v40;
    }
    swift_bridgeObjectRelease();
    v30 = (uint64_t *)(v18 + v19[23]);
    v31 = v30[1];
    v15 = v41;
    if (v31 >> 60 != 15)
      sub_10001BC14(*v30, v31);
    v32 = (uint64_t *)(v18 + v19[24]);
    v33 = v32[1];
    if (v33 >> 60 != 15)
      sub_10001BC14(*v32, v33);
    v34 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v34(v18 + v19[25], v23);
    v34(v18 + v19[26], v23);
    v34(v18 + v19[27], v23);
    v34(v18 + v19[28], v23);
    v34(v18 + v19[29], v23);
    v34(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34(v18 + v19[37], v23);
    v34(v18 + v19[38], v23);
    v34(v18 + v19[39], v23);
    v34(v18 + v19[40], v23);
    v34(v18 + v19[41], v23);
    v34(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v35 = v2 + v6[18];
  if (!v15(v35, 1, v11))
    v13(v35, v11);
  v36 = v2 + v6[19];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v36, 1, v11);
  if (!(_DWORD)result)
    result = ((uint64_t (*)(uint64_t, uint64_t))v13)(v36, v11);
  v38 = (uint64_t *)(v2 + v6[20]);
  v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF)
    return sub_10001BC14(*v38, v39);
  return result;
}

_BYTE *sub_1001608F4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _BYTE *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, int *, __n128);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int (*v114)(void);
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  char *v119;
  unsigned int (*v120)(void);
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  int *v129;
  uint64_t v130;
  unsigned int (*v131)(_QWORD *, uint64_t, int *, __n128);
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  void (*v167)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  char *v178;
  unint64_t v179;
  uint64_t v180;
  void (*v181)(_BYTE *, _BYTE *, void *);
  uint64_t v182;
  _QWORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  char *v196;
  uint64_t v197;
  _BYTE *v198;
  char *v199;
  uint64_t v200;
  _BYTE *v201;
  char *v202;
  __n128 v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  char *v210;
  uint64_t v211;
  void (*v212)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  char *v218;
  __n128 v219;
  uint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE *v226;
  char *v227;
  unint64_t v228;
  uint64_t v229;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  void (*__dst)(char *, char *, uint64_t);
  _BYTE *__dsta;
  void *__dstb;
  uint64_t v240;
  void (*v241)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  _BYTE *v246;
  unsigned int (*v247)(_BYTE *, uint64_t, uint64_t);
  int *v248;
  char *v249;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  v248 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v249 = v7;
  v12 = v248[5];
  v13 = &v7[v12];
  v14 = &v8[v12];
  v244 = a3;
  v245 = a2;
  __dst = v11;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&v8[v12], 1, v9))
  {
    v15 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v249[v248[6]] = v8[v248[6]];
  v16 = v248[7];
  v17 = &v249[v16];
  v18 = &v8[v16];
  v19 = type metadata accessor for MACAddress(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = v248[8];
  v21 = *(_QWORD *)&v8[v20];
  *(_QWORD *)&v249[v20] = v21;
  v249[v248[9]] = v8[v248[9]];
  v22 = v248[10];
  v23 = &v249[v22];
  v24 = &v8[v22];
  v25 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v26 + 16);
  v28 = swift_bridgeObjectRetain(v21);
  v27(v23, v24, v25, v28);
  v29 = v248[11];
  v30 = &v249[v29];
  v31 = &v8[v29];
  v247 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
  v246 = a1;
  v242 = v26;
  v243 = v25;
  v241 = (void (*)(_BYTE *, _BYTE *, uint64_t))v27;
  if (v247(&v8[v29], 1, v25))
  {
    v32 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v27)(v30, v31, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v30, 0, 1, v25);
  }
  v33 = v248[12];
  v34 = &v249[v33];
  v35 = &v8[v33];
  *v34 = *v35;
  v36 = *((_QWORD *)v35 + 2);
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  *((_QWORD *)v34 + 2) = v36;
  v249[v248[13]] = v8[v248[13]];
  v37 = v248[14];
  v38 = &v249[v37];
  v39 = &v8[v37];
  v40 = (int *)type metadata accessor for AccessoryMetadata(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v41 + 48);
  v43 = swift_bridgeObjectRetain(v36);
  if (v42(v39, 1, v40, v43))
  {
    v44 = sub_10001A9A8(&qword_101115E60);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    __dst(v38, v39, v9);
    v45 = v40[5];
    v46 = (uint64_t *)&v38[v45];
    v47 = (uint64_t *)&v39[v45];
    v48 = *v47;
    v49 = v47[1];
    sub_10001BBBC(*v47, v49);
    *v46 = v48;
    v46[1] = v49;
    v50 = v40[6];
    v51 = &v38[v50];
    v52 = &v39[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v54 = v40[7];
    v55 = &v38[v54];
    v56 = &v39[v54];
    v57 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v57;
    *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
    v58 = v40[9];
    v59 = &v38[v58];
    v60 = &v39[v58];
    *(_DWORD *)v59 = *(_DWORD *)v60;
    v59[4] = v60[4];
    v61 = v40[10];
    v62 = &v38[v61];
    v63 = &v39[v61];
    *(_OWORD *)v62 = *(_OWORD *)v63;
    v62[16] = v63[16];
    v64 = v40[11];
    v65 = &v38[v64];
    v66 = &v39[v64];
    v65[8] = v66[8];
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v67 = v40[12];
    v68 = &v38[v67];
    v69 = &v39[v67];
    *(_DWORD *)v68 = *(_DWORD *)v69;
    v68[4] = v69[4];
    v38[v40[13]] = v39[v40[13]];
    v38[v40[14]] = v39[v40[14]];
    v70 = v40[15];
    v71 = &v38[v70];
    v72 = &v39[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v41 + 56);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v57);
    v75 = swift_bridgeObjectRetain(v73);
    v74(v38, 0, 1, v40, v75);
  }
  v76 = v248[15];
  v77 = &v249[v76];
  v78 = &v8[v76];
  v79 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v80 = *((_QWORD *)v79 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    v83 = v245;
    v82 = v246;
    v84 = v243;
    v85 = v244;
    v87 = v248;
    v86 = v249;
    v88 = v242;
  }
  else
  {
    v236 = v80;
    *(_QWORD *)v77 = *(_QWORD *)v78;
    v77[8] = v78[8];
    v89 = v79[5];
    v90 = &v77[v89];
    v91 = &v78[v89];
    v92 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v90, v91, v92);
    v77[v79[6]] = v78[v79[6]];
    v77[v79[7]] = v78[v79[7]];
    v93 = v79[8];
    v94 = &v77[v93];
    v95 = &v78[v93];
    v233 = v95[1];
    *v94 = *v95;
    v94[1] = v233;
    v77[v79[9]] = v78[v79[9]];
    v77[v79[10]] = v78[v79[10]];
    v77[v79[11]] = v78[v79[11]];
    v96 = v79[12];
    v97 = &v77[v96];
    v98 = &v78[v96];
    v99 = v98[1];
    *v97 = *v98;
    v97[1] = v99;
    v100 = v79[13];
    v101 = &v77[v100];
    v102 = &v78[v100];
    v103 = v102[1];
    *v101 = *v102;
    v101[1] = v103;
    v104 = v79[14];
    v105 = &v77[v104];
    v106 = &v78[v104];
    *(_QWORD *)v105 = *(_QWORD *)v106;
    v105[8] = v106[8];
    v107 = v79[15];
    v108 = &v77[v107];
    v109 = &v78[v107];
    v110 = v109[1];
    *v108 = *v109;
    v108[1] = v110;
    v111 = v79[16];
    __dsta = &v77[v111];
    v231 = &v78[v111];
    v112 = type metadata accessor for URL(0);
    v113 = *(_QWORD *)(v112 - 8);
    v114 = *(unsigned int (**)(void))(v113 + 48);
    swift_bridgeObjectRetain(v233);
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v103);
    v115 = swift_bridgeObjectRetain(v110);
    v240 = v113;
    v235 = v8;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v114)(v231, 1, v112, v115))
    {
      v116 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dsta, v231, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v113 + 16))(__dsta, v231, v112);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v113 + 56))(__dsta, 0, 1, v112);
    }
    v117 = v79[17];
    v118 = &v77[v117];
    v119 = &v78[v117];
    v120 = v114;
    __dstb = (void *)v112;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v114)(&v78[v117], 1, v112))
    {
      v121 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v240 + 16))(v118, v119, v112);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v118, 0, 1, v112);
    }
    v122 = v79[18];
    v123 = &v77[v122];
    v124 = &v78[v122];
    v125 = v124[1];
    *v123 = *v124;
    v123[1] = v125;
    *(_QWORD *)&v77[v79[19]] = *(_QWORD *)&v78[v79[19]];
    v126 = v79[20];
    v127 = &v77[v126];
    v128 = &v78[v126];
    v129 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v130 = *((_QWORD *)v129 - 1);
    v131 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v130 + 48);
    v132 = swift_bridgeObjectRetain(v125);
    if (v131((char *)v128, 1, v129, v132))
    {
      v133 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    }
    else
    {
      v234 = v130;
      v134 = v128[1];
      *v127 = *v128;
      v127[1] = v134;
      v135 = v128[3];
      v127[2] = v128[2];
      v127[3] = v135;
      v136 = v128[5];
      v127[4] = v128[4];
      v127[5] = v136;
      *((_WORD *)v127 + 24) = *((_WORD *)v128 + 24);
      *((_BYTE *)v127 + 72) = *((_BYTE *)v128 + 72);
      v137 = v128[8];
      v127[7] = v128[7];
      v127[8] = v137;
      v138 = v129[10];
      v232 = (char *)v127 + v138;
      v139 = (char *)v128 + v138;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRetain(v135);
      v140 = swift_bridgeObjectRetain(v136);
      if (((unsigned int (*)(char *, uint64_t, void *, __n128))v120)(v139, 1, __dstb, v140))
      {
        v141 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v232, v139, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v240 + 16))(v232, v139, __dstb);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v240 + 56))(v232, 0, 1, __dstb);
      }
      v142 = v129[11];
      v143 = (char *)v127 + v142;
      v144 = (char *)v128 + v142;
      if (v120())
      {
        v145 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v240 + 16))(v143, v144, __dstb);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v240 + 56))(v143, 0, 1, __dstb);
      }
      v146 = v129[12];
      v147 = (char *)v127 + v146;
      v148 = (char *)v128 + v146;
      *(_QWORD *)v147 = *(_QWORD *)v148;
      v147[8] = v148[8];
      v149 = v129[13];
      v150 = (_QWORD *)((char *)v127 + v149);
      v151 = (_QWORD *)((char *)v128 + v149);
      v152 = v151[1];
      *v150 = *v151;
      v150[1] = v152;
      v153 = v129[14];
      v154 = *(_QWORD *)((char *)v128 + v153);
      *(_QWORD *)((char *)v127 + v153) = v154;
      v155 = v129[15];
      v156 = (_QWORD *)((char *)v127 + v155);
      v157 = (_QWORD *)((char *)v128 + v155);
      v158 = v157[1];
      *v156 = *v157;
      v156[1] = v158;
      v159 = v129[16];
      v160 = *(_QWORD *)((char *)v128 + v159);
      *(_QWORD *)((char *)v127 + v159) = v160;
      v161 = v129[17];
      v162 = (char *)v127 + v161;
      v163 = (char *)v128 + v161;
      *(_OWORD *)v162 = *(_OWORD *)v163;
      v162[16] = v163[16];
      v164 = v129[18];
      v165 = (char *)v127 + v164;
      v166 = (char *)v128 + v164;
      *(_OWORD *)v165 = *(_OWORD *)v166;
      v165[16] = v166[16];
      v167 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v234 + 56);
      swift_bridgeObjectRetain(v152);
      swift_bridgeObjectRetain(v154);
      swift_bridgeObjectRetain(v158);
      v168 = swift_bridgeObjectRetain(v160);
      v167(v127, 0, 1, v129, v168);
    }
    *(_DWORD *)&v77[v79[21]] = *(_DWORD *)&v78[v79[21]];
    v169 = v79[22];
    v170 = *(_QWORD *)&v78[v169];
    *(_QWORD *)&v77[v169] = v170;
    v171 = v79[23];
    v172 = &v77[v171];
    v173 = &v78[v171];
    v174 = *(_QWORD *)&v78[v171 + 8];
    swift_bridgeObjectRetain(v170);
    if (v174 >> 60 == 15)
    {
      *(_OWORD *)v172 = *v173;
    }
    else
    {
      v175 = *(_QWORD *)v173;
      sub_10001BBBC(v175, v174);
      *(_QWORD *)v172 = v175;
      *((_QWORD *)v172 + 1) = v174;
    }
    v176 = v79[24];
    v177 = &v77[v176];
    v178 = &v78[v176];
    v179 = *((_QWORD *)v178 + 1);
    if (v179 >> 60 == 15)
    {
      *(_OWORD *)v177 = *(_OWORD *)v178;
    }
    else
    {
      v180 = *(_QWORD *)v178;
      sub_10001BBBC(*(_QWORD *)v178, *((_QWORD *)v178 + 1));
      *(_QWORD *)v177 = v180;
      *((_QWORD *)v177 + 1) = v179;
    }
    v181 = *(void (**)(_BYTE *, _BYTE *, void *))(v240 + 16);
    v181(&v77[v79[25]], &v78[v79[25]], __dstb);
    v181(&v77[v79[26]], &v78[v79[26]], __dstb);
    v181(&v77[v79[27]], &v78[v79[27]], __dstb);
    v181(&v77[v79[28]], &v78[v79[28]], __dstb);
    v181(&v77[v79[29]], &v78[v79[29]], __dstb);
    v181(&v77[v79[30]], &v78[v79[30]], __dstb);
    v182 = v79[31];
    v183 = &v77[v182];
    v184 = &v78[v182];
    v185 = v184[1];
    *v183 = *v184;
    v183[1] = v185;
    v186 = v79[32];
    v187 = *(_QWORD *)&v78[v186];
    *(_QWORD *)&v77[v186] = v187;
    v188 = v79[33];
    v189 = &v77[v188];
    v190 = &v78[v188];
    v191 = v190[1];
    *v189 = *v190;
    v189[1] = v191;
    v192 = v79[34];
    v193 = *(_QWORD *)&v78[v192];
    *(_QWORD *)&v77[v192] = v193;
    v194 = v79[35];
    v195 = &v77[v194];
    v196 = &v78[v194];
    *(_OWORD *)v195 = *(_OWORD *)v196;
    v195[16] = v196[16];
    v197 = v79[36];
    v198 = &v77[v197];
    v199 = &v78[v197];
    *(_OWORD *)v198 = *(_OWORD *)v199;
    v198[16] = v199[16];
    v200 = v79[37];
    v201 = &v77[v200];
    v202 = &v78[v200];
    swift_bridgeObjectRetain(v185);
    swift_bridgeObjectRetain(v187);
    swift_bridgeObjectRetain(v191);
    v203 = swift_bridgeObjectRetain(v193);
    ((void (*)(_BYTE *, char *, void *, __n128))v181)(v201, v202, __dstb, v203);
    v181(&v77[v79[38]], &v78[v79[38]], __dstb);
    v181(&v77[v79[39]], &v78[v79[39]], __dstb);
    v181(&v77[v79[40]], &v78[v79[40]], __dstb);
    v181(&v77[v79[41]], &v78[v79[41]], __dstb);
    v181(&v77[v79[42]], &v78[v79[42]], __dstb);
    v77[v79[43]] = v78[v79[43]];
    v77[v79[44]] = v78[v79[44]];
    v77[v79[45]] = v78[v79[45]];
    v204 = v79[46];
    v205 = &v77[v204];
    v206 = &v78[v204];
    v207 = v206[1];
    *v205 = *v206;
    v205[1] = v207;
    v208 = v79[47];
    v209 = &v77[v208];
    v210 = &v78[v208];
    v211 = v210[1];
    *v209 = *v210;
    v209[1] = v211;
    v212 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v236 + 56);
    swift_bridgeObjectRetain(v207);
    v213 = swift_bridgeObjectRetain(v211);
    v212(v77, 0, 1, v79, v213);
    v83 = v245;
    v82 = v246;
    v84 = v243;
    v85 = v244;
    v87 = v248;
    v86 = v249;
    v88 = v242;
    v8 = v235;
  }
  v86[v87[16]] = v8[v87[16]];
  v214 = v87[17];
  v215 = *(_QWORD *)&v8[v214];
  *(_QWORD *)&v86[v214] = v215;
  v216 = v87[18];
  v217 = &v86[v216];
  v218 = &v8[v216];
  v219 = swift_bridgeObjectRetain(v215);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v247)(v218, 1, v84, v219))
  {
    v220 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
  }
  else
  {
    v241(v217, v218, v84);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v217, 0, 1, v84);
  }
  v221 = v87[19];
  v222 = &v86[v221];
  v223 = &v8[v221];
  if (v247(&v8[v221], 1, v84))
  {
    v224 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
  }
  else
  {
    v241(v222, v223, v84);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v222, 0, 1, v84);
  }
  v225 = v87[20];
  v226 = &v86[v225];
  v227 = &v8[v225];
  v228 = *((_QWORD *)v227 + 1);
  if (((v228 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)v226 = *(_OWORD *)v227;
  }
  else
  {
    v229 = *(_QWORD *)v227;
    sub_10001BBBC(*(_QWORD *)v227, *((_QWORD *)v227 + 1));
    *(_QWORD *)v226 = v229;
    *((_QWORD *)v226 + 1) = v228;
  }
  v86[v87[21]] = v8[v87[21]];
  *(_WORD *)&v86[v87[22]] = *(_WORD *)&v8[v87[22]];
  v82[*(int *)(v85 + 24)] = v83[*(int *)(v85 + 24)];
  return v82;
}

_BYTE *sub_100161604(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t (*v33)(_BYTE *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int *v45;
  uint64_t v46;
  uint64_t (*v47)(_BYTE *, uint64_t, int *);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  void (*v82)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  int *v88;
  uint64_t v89;
  uint64_t (*v90)(_BYTE *, uint64_t, int *);
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  char v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v120)(char *, uint64_t, void *, __n128);
  uint64_t v121;
  unsigned int (*v122)(char *, uint64_t, void *, __n128);
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  int *v129;
  uint64_t v130;
  uint64_t (*v131)(_BYTE *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  int v153;
  uint64_t v154;
  char *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t (*v199)(_BYTE *, uint64_t, uint64_t);
  int v200;
  int v201;
  uint64_t v202;
  _BYTE *v203;
  _BYTE *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  int *v213;
  _QWORD *v214;
  unsigned int (*v215)(_QWORD *, uint64_t, int *, __n128);
  __n128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  __n128 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  _BYTE *v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240;
  int *v241;
  uint64_t (*v242)(uint64_t, uint64_t, int *);
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  __n128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  __int128 v277;
  uint64_t v278;
  char *v279;
  char *v280;
  __int128 v281;
  void (*v282)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE *v287;
  _OWORD *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _BYTE *v292;
  _BYTE *v293;
  unint64_t v294;
  uint64_t v295;
  void (*v296)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE *v311;
  char v312;
  uint64_t v313;
  _BYTE *v314;
  _BYTE *v315;
  char v316;
  uint64_t v317;
  _BYTE *v318;
  _BYTE *v319;
  __n128 v320;
  uint64_t v321;
  _QWORD *v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  void (*v329)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _BYTE *v334;
  _BYTE *v335;
  int v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  _BYTE *v340;
  _BYTE *v341;
  int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _BYTE *v360;
  int v361;
  int v362;
  size_t v363;
  void *v364;
  uint64_t v365;
  void *v366;
  _BYTE *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _BYTE *v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _BYTE *v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  _BYTE *v390;
  __int128 v391;
  void (*v392)(uint64_t, _QWORD, uint64_t, int *, __n128);
  __n128 v393;
  uint64_t v394;
  _BYTE *v395;
  int v396;
  int v397;
  size_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  _BYTE *v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  _BYTE *v418;
  __int128 v419;
  uint64_t v420;
  uint64_t v421;
  _BYTE *v422;
  __int128 v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t *v435;
  uint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  void (*v442)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v443;
  _QWORD *v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  _QWORD *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  _BYTE *v456;
  _BYTE *v457;
  __int128 v458;
  uint64_t v459;
  _BYTE *v460;
  _BYTE *v461;
  __int128 v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  uint64_t v466;
  uint64_t v467;
  _QWORD *v468;
  _QWORD *v469;
  uint64_t v470;
  unsigned int (*v471)(char *, uint64_t, void *, __n128);
  _BYTE *__dst;
  _BYTE *v473;
  _QWORD *v474;
  void *v475;
  void *v476;
  void *v477;
  void *__srcb;
  void *__src;
  _QWORD *__srca;
  _BYTE *v481;
  unsigned int (*v482)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v483;
  void (*v484)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v485;
  int *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  void (*v490)(_BYTE *, _BYTE *, uint64_t);
  uint64_t (*v492)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v493;
  _BYTE *v494;
  uint64_t v495;
  uint64_t v496;
  _BYTE *v497;
  int *v498;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 24);
  v10(v6, v7, v8);
  v497 = v7;
  v498 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v11 = v498[5];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  v15 = v14(&v6[v11], 1, v8);
  v16 = v14(v13, 1, v8);
  v493 = a2;
  v484 = v10;
  v487 = v9;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(v12, v13, v8);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
LABEL_6:
    v17 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v10(v12, v13, v8);
LABEL_7:
  v6[v498[6]] = v497[v498[6]];
  v18 = v498[7];
  v19 = &v6[v18];
  v20 = &v497[v18];
  v21 = type metadata accessor for MACAddress(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v22 = v498[8];
  v23 = *(_QWORD *)&v497[v22];
  *(_QWORD *)&v6[v22] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  v6[v498[9]] = v497[v498[9]];
  v24 = v498[10];
  v25 = &v6[v24];
  v26 = &v497[v24];
  v27 = type metadata accessor for Date(0);
  v28 = v6;
  v29 = *(_QWORD *)(v27 - 8);
  v490 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 24);
  v490(v25, v26, v27);
  v30 = v498[11];
  v31 = &v28[v30];
  v32 = &v497[v30];
  v495 = v29;
  v33 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v34 = v33(&v28[v30], 1, v27);
  v496 = v27;
  v492 = v33;
  v35 = v33(v32, 1, v27);
  v494 = a1;
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v495 + 16))(v31, v32, v27);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v495 + 56))(v31, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v35)
  {
    (*(void (**)(_BYTE *, uint64_t))(v495 + 8))(v31, v27);
LABEL_12:
    v36 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  v490(v31, v32, v27);
LABEL_13:
  v37 = v28;
  v38 = v498[12];
  v39 = &v28[v38];
  v40 = &v497[v38];
  *v39 = *v40;
  *((_QWORD *)v39 + 1) = *((_QWORD *)v40 + 1);
  v41 = *((_QWORD *)v40 + 2);
  *((_QWORD *)v39 + 2) = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease();
  v28[v498[13]] = v497[v498[13]];
  v42 = v498[14];
  v43 = &v28[v42];
  v44 = &v497[v42];
  v45 = (int *)type metadata accessor for AccessoryMetadata(0);
  v46 = *((_QWORD *)v45 - 1);
  v47 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v487 + 16))(v43, v44, v8);
      v50 = v45[5];
      v51 = (uint64_t *)&v43[v50];
      v52 = (uint64_t *)&v44[v50];
      v53 = *v52;
      v54 = v52[1];
      sub_10001BBBC(*v52, v54);
      *v51 = v53;
      v51[1] = v54;
      v55 = v45[6];
      v56 = &v43[v55];
      v57 = &v44[v55];
      *v56 = *v57;
      v58 = v57[1];
      v56[1] = v58;
      v59 = v45[7];
      v60 = &v43[v59];
      v61 = &v44[v59];
      *v60 = *v61;
      v62 = v61[1];
      v60[1] = v62;
      *(_DWORD *)&v43[v45[8]] = *(_DWORD *)&v44[v45[8]];
      v63 = v45[9];
      v64 = &v43[v63];
      v65 = &v44[v63];
      v66 = *(_DWORD *)v65;
      v64[4] = v65[4];
      *(_DWORD *)v64 = v66;
      v67 = v45[10];
      v68 = &v43[v67];
      v69 = &v44[v67];
      v70 = *(_OWORD *)v69;
      v68[16] = v69[16];
      *(_OWORD *)v68 = v70;
      v71 = v45[11];
      v72 = &v43[v71];
      v73 = &v44[v71];
      v74 = *(_QWORD *)v73;
      v72[8] = v73[8];
      *(_QWORD *)v72 = v74;
      v75 = v45[12];
      v76 = &v43[v75];
      v77 = &v44[v75];
      LODWORD(v74) = *(_DWORD *)v77;
      v76[4] = v77[4];
      *(_DWORD *)v76 = v74;
      v43[v45[13]] = v44[v45[13]];
      v43[v45[14]] = v44[v45[14]];
      v78 = v45[15];
      v79 = &v43[v78];
      v80 = &v44[v78];
      *v79 = *v80;
      v81 = v80[1];
      v79[1] = v81;
      v82 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v46 + 56);
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v62);
      v83 = swift_bridgeObjectRetain(v81);
      v82(v43, 0, 1, v45, v83);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v49)
  {
    sub_1000126B0((uint64_t)v43, type metadata accessor for AccessoryMetadata);
LABEL_18:
    v84 = sub_10001A9A8(&qword_101115E60);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_19;
  }
  v484(v43, v44, v8);
  v132 = v45[5];
  v133 = (uint64_t *)&v43[v132];
  v134 = (uint64_t *)&v44[v132];
  v135 = *v134;
  v136 = v134[1];
  sub_10001BBBC(*v134, v136);
  v137 = *v133;
  v138 = v133[1];
  *v133 = v135;
  v133[1] = v136;
  sub_10001BC14(v137, v138);
  v139 = v45[6];
  v140 = &v43[v139];
  v141 = &v44[v139];
  *v140 = *v141;
  v142 = v141[1];
  v140[1] = v142;
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRelease();
  v143 = v45[7];
  v144 = &v43[v143];
  v145 = &v44[v143];
  *v144 = *v145;
  v146 = v145[1];
  v144[1] = v146;
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRelease();
  v147 = v45[8];
  v148 = &v43[v147];
  v149 = &v44[v147];
  *(_WORD *)v148 = *(_WORD *)v149;
  v148[2] = v149[2];
  v148[3] = v149[3];
  v150 = v45[9];
  v151 = &v43[v150];
  v152 = &v44[v150];
  v153 = *(_DWORD *)v152;
  v151[4] = v152[4];
  *(_DWORD *)v151 = v153;
  v154 = v45[10];
  v155 = &v43[v154];
  v156 = &v44[v154];
  v157 = *(_OWORD *)v156;
  v155[16] = v156[16];
  *(_OWORD *)v155 = v157;
  v158 = v45[11];
  v159 = &v43[v158];
  v160 = &v44[v158];
  v161 = *(_QWORD *)v160;
  v159[8] = v160[8];
  *(_QWORD *)v159 = v161;
  v162 = v45[12];
  v163 = &v43[v162];
  v164 = &v44[v162];
  LODWORD(v161) = *(_DWORD *)v164;
  v163[4] = v164[4];
  *(_DWORD *)v163 = v161;
  v43[v45[13]] = v44[v45[13]];
  v43[v45[14]] = v44[v45[14]];
  v165 = v45[15];
  v166 = &v43[v165];
  v167 = &v44[v165];
  *v166 = *v167;
  v168 = v167[1];
  v166[1] = v168;
  swift_bridgeObjectRetain(v168);
  swift_bridgeObjectRelease();
LABEL_19:
  v85 = v498[15];
  v86 = &v28[v85];
  v87 = &v497[v85];
  v88 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v89 = *((_QWORD *)v88 - 1);
  v90 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v89 + 48);
  v91 = v90(v86, 1, v88);
  v92 = v90(v87, 1, v88);
  if (!v91)
  {
    if (v92)
    {
      sub_1000126B0((uint64_t)v86, type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }
    v169 = *(_QWORD *)v87;
    v86[8] = v87[8];
    *(_QWORD *)v86 = v169;
    v170 = v88[5];
    v171 = &v86[v170];
    v172 = &v87[v170];
    v173 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v173 - 8) + 24))(v171, v172, v173);
    v86[v88[6]] = v87[v88[6]];
    v86[v88[7]] = v87[v88[7]];
    v174 = v88[8];
    v175 = &v86[v174];
    v176 = &v87[v174];
    *v175 = *v176;
    v177 = v176[1];
    v175[1] = v177;
    swift_bridgeObjectRetain(v177);
    swift_bridgeObjectRelease();
    v86[v88[9]] = v87[v88[9]];
    v86[v88[10]] = v87[v88[10]];
    v86[v88[11]] = v87[v88[11]];
    v178 = v88[12];
    v179 = &v86[v178];
    v180 = &v87[v178];
    *v179 = *v180;
    v181 = v180[1];
    v179[1] = v181;
    swift_bridgeObjectRetain(v181);
    swift_bridgeObjectRelease();
    v182 = v88[13];
    v183 = &v86[v182];
    v184 = &v87[v182];
    *v183 = *v184;
    v185 = v184[1];
    v183[1] = v185;
    swift_bridgeObjectRetain(v185);
    swift_bridgeObjectRelease();
    v186 = v88[14];
    v187 = &v86[v186];
    v188 = &v87[v186];
    v189 = *(_QWORD *)v188;
    v187[8] = v188[8];
    *(_QWORD *)v187 = v189;
    v190 = v88[15];
    v191 = &v86[v190];
    v192 = &v87[v190];
    *v191 = *v192;
    v193 = v192[1];
    v191[1] = v193;
    swift_bridgeObjectRetain(v193);
    swift_bridgeObjectRelease();
    v194 = v88[16];
    v195 = &v86[v194];
    v196 = &v87[v194];
    v197 = type metadata accessor for URL(0);
    v198 = *(_QWORD *)(v197 - 8);
    v199 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v198 + 48);
    v200 = v199(v195, 1, v197);
    v201 = v199(v196, 1, v197);
    if (v200)
    {
      if (!v201)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 16))(v195, v196, v197);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v198 + 56))(v195, 0, 1, v197);
        goto LABEL_44;
      }
    }
    else
    {
      if (!v201)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 24))(v195, v196, v197);
LABEL_44:
        v228 = v88[17];
        v229 = &v86[v228];
        v230 = &v87[v228];
        v231 = v199(&v86[v228], 1, v197);
        v232 = v199(v230, 1, v197);
        v489 = v198;
        v482 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v199;
        if (v231)
        {
          if (!v232)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 16))(v229, v230, v197);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v198 + 56))(v229, 0, 1, v197);
            goto LABEL_50;
          }
        }
        else
        {
          if (!v232)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v198 + 24))(v229, v230, v197);
LABEL_50:
            v234 = v88[18];
            v235 = &v86[v234];
            v236 = &v87[v234];
            *v235 = *v236;
            v237 = v236[1];
            v235[1] = v237;
            swift_bridgeObjectRetain(v237);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v86[v88[19]] = *(_QWORD *)&v87[v88[19]];
            v238 = v88[20];
            v239 = (uint64_t)&v86[v238];
            v240 = &v87[v238];
            v241 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            __srca = (_QWORD *)*((_QWORD *)v241 - 1);
            v242 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            v243 = v242(v239, 1, v241);
            v486 = v241;
            v244 = v242((uint64_t)v240, 1, v241);
            if (v243)
            {
              if (!v244)
              {
                *(_QWORD *)v239 = *(_QWORD *)v240;
                v245 = *((_QWORD *)v240 + 1);
                *(_QWORD *)(v239 + 8) = v245;
                *(_QWORD *)(v239 + 16) = *((_QWORD *)v240 + 2);
                v246 = *((_QWORD *)v240 + 3);
                *(_QWORD *)(v239 + 24) = v246;
                *(_QWORD *)(v239 + 32) = *((_QWORD *)v240 + 4);
                v247 = *((_QWORD *)v240 + 5);
                *(_QWORD *)(v239 + 40) = v247;
                *(_WORD *)(v239 + 48) = *((_WORD *)v240 + 24);
                *(_QWORD *)(v239 + 56) = *((_QWORD *)v240 + 7);
                v248 = *((_QWORD *)v240 + 8);
                *(_BYTE *)(v239 + 72) = v240[72];
                *(_QWORD *)(v239 + 64) = v248;
                v249 = v241[10];
                v475 = (void *)(v239 + v249);
                v250 = &v240[v249];
                swift_bridgeObjectRetain(v245);
                swift_bridgeObjectRetain(v246);
                v251 = swift_bridgeObjectRetain(v247);
                if (v482(v250, 1, v197, v251))
                {
                  v252 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v475, v250, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v475, v250, v197);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v489 + 56))(v475, 0, 1, v197);
                }
                v365 = v486[11];
                v366 = (void *)(v239 + v365);
                v367 = &v240[v365];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v482)(&v240[v365], 1, v197))
                {
                  v368 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v366, v367, *(_QWORD *)(*(_QWORD *)(v368 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v366, v367, v197);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v489 + 56))(v366, 0, 1, v197);
                }
                v369 = v486[12];
                v370 = v239 + v369;
                v371 = &v240[v369];
                v372 = *(_QWORD *)v371;
                *(_BYTE *)(v370 + 8) = v371[8];
                *(_QWORD *)v370 = v372;
                v373 = v486[13];
                v374 = (_QWORD *)(v239 + v373);
                v375 = &v240[v373];
                *v374 = *v375;
                v376 = v375[1];
                v374[1] = v376;
                v377 = v486[14];
                v378 = *(_QWORD *)&v240[v377];
                *(_QWORD *)(v239 + v377) = v378;
                v379 = v486[15];
                v380 = (_QWORD *)(v239 + v379);
                v381 = &v240[v379];
                *v380 = *v381;
                v382 = v381[1];
                v380[1] = v382;
                v383 = v486[16];
                v483 = *(_QWORD *)&v240[v383];
                *(_QWORD *)(v239 + v383) = v483;
                v384 = v486[17];
                v385 = v239 + v384;
                v386 = &v240[v384];
                v387 = *(_OWORD *)v386;
                *(_BYTE *)(v385 + 16) = v386[16];
                *(_OWORD *)v385 = v387;
                v388 = v486[18];
                v389 = v239 + v388;
                v390 = &v240[v388];
                v391 = *(_OWORD *)v390;
                *(_BYTE *)(v389 + 16) = v390[16];
                *(_OWORD *)v389 = v391;
                v392 = (void (*)(uint64_t, _QWORD, uint64_t, int *, __n128))__srca[7];
                swift_bridgeObjectRetain(v376);
                swift_bridgeObjectRetain(v378);
                swift_bridgeObjectRetain(v382);
                v393 = swift_bridgeObjectRetain(v483);
                v392(v239, 0, 1, v486, v393);
LABEL_115:
                *(_DWORD *)&v86[v88[21]] = *(_DWORD *)&v87[v88[21]];
                v424 = v88[22];
                v425 = *(_QWORD *)&v87[v424];
                *(_QWORD *)&v86[v424] = v425;
                swift_bridgeObjectRetain(v425);
                swift_bridgeObjectRelease();
                v426 = v88[23];
                v427 = (uint64_t *)&v86[v426];
                v428 = (uint64_t *)&v87[v426];
                v429 = *(_QWORD *)&v87[v426 + 8];
                if (*(_QWORD *)&v86[v426 + 8] >> 60 == 15)
                {
                  if (v429 >> 60 != 15)
                  {
                    v430 = *v428;
                    sub_10001BBBC(*v428, v429);
                    *v427 = v430;
                    v427[1] = v429;
                    goto LABEL_122;
                  }
                }
                else
                {
                  if (v429 >> 60 != 15)
                  {
                    v431 = *v428;
                    sub_10001BBBC(*v428, v429);
                    v432 = *v427;
                    v433 = v427[1];
                    *v427 = v431;
                    v427[1] = v429;
                    sub_10001BC14(v432, v433);
LABEL_122:
                    v434 = v88[24];
                    v435 = (uint64_t *)&v86[v434];
                    v436 = (uint64_t *)&v87[v434];
                    v437 = *(_QWORD *)&v87[v434 + 8];
                    if (*(_QWORD *)&v86[v434 + 8] >> 60 == 15)
                    {
                      if (v437 >> 60 != 15)
                      {
                        v438 = *v436;
                        sub_10001BBBC(*v436, v437);
                        *v435 = v438;
                        v435[1] = v437;
LABEL_129:
                        v442 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v489 + 24);
                        v442(&v86[v88[25]], &v87[v88[25]], v197);
                        v442(&v86[v88[26]], &v87[v88[26]], v197);
                        v442(&v86[v88[27]], &v87[v88[27]], v197);
                        v442(&v86[v88[28]], &v87[v88[28]], v197);
                        v442(&v86[v88[29]], &v87[v88[29]], v197);
                        v442(&v86[v88[30]], &v87[v88[30]], v197);
                        v443 = v88[31];
                        v444 = &v86[v443];
                        v445 = &v87[v443];
                        *v444 = *v445;
                        v446 = v445[1];
                        v444[1] = v446;
                        swift_bridgeObjectRetain(v446);
                        swift_bridgeObjectRelease();
                        v447 = v88[32];
                        v448 = *(_QWORD *)&v87[v447];
                        *(_QWORD *)&v86[v447] = v448;
                        swift_bridgeObjectRetain(v448);
                        swift_bridgeObjectRelease();
                        v449 = v88[33];
                        v450 = &v86[v449];
                        v451 = &v87[v449];
                        *v450 = *v451;
                        v452 = v451[1];
                        v450[1] = v452;
                        swift_bridgeObjectRetain(v452);
                        swift_bridgeObjectRelease();
                        v453 = v88[34];
                        v454 = *(_QWORD *)&v87[v453];
                        *(_QWORD *)&v86[v453] = v454;
                        swift_bridgeObjectRetain(v454);
                        swift_bridgeObjectRelease();
                        v455 = v88[35];
                        v456 = &v86[v455];
                        v457 = &v87[v455];
                        v458 = *(_OWORD *)v457;
                        v456[16] = v457[16];
                        *(_OWORD *)v456 = v458;
                        v459 = v88[36];
                        v460 = &v86[v459];
                        v461 = &v87[v459];
                        v462 = *(_OWORD *)v461;
                        v460[16] = v461[16];
                        *(_OWORD *)v460 = v462;
                        v442(&v86[v88[37]], &v87[v88[37]], v197);
                        v442(&v86[v88[38]], &v87[v88[38]], v197);
                        v442(&v86[v88[39]], &v87[v88[39]], v197);
                        v442(&v86[v88[40]], &v87[v88[40]], v197);
                        v442(&v86[v88[41]], &v87[v88[41]], v197);
                        v442(&v86[v88[42]], &v87[v88[42]], v197);
                        v86[v88[43]] = v87[v88[43]];
                        v86[v88[44]] = v87[v88[44]];
                        v86[v88[45]] = v87[v88[45]];
                        v463 = v88[46];
                        v464 = &v86[v463];
                        v465 = &v87[v463];
                        *v464 = *v465;
                        v466 = v465[1];
                        v464[1] = v466;
                        swift_bridgeObjectRetain(v466);
                        swift_bridgeObjectRelease();
                        v467 = v88[47];
                        v468 = &v86[v467];
                        v469 = &v87[v467];
                        *v468 = *v469;
                        v470 = v469[1];
                        v468[1] = v470;
                        swift_bridgeObjectRetain(v470);
                        swift_bridgeObjectRelease();
                        goto LABEL_26;
                      }
                    }
                    else
                    {
                      if (v437 >> 60 != 15)
                      {
                        v439 = *v436;
                        sub_10001BBBC(*v436, v437);
                        v440 = *v435;
                        v441 = v435[1];
                        *v435 = v439;
                        v435[1] = v437;
                        sub_10001BC14(v440, v441);
                        goto LABEL_129;
                      }
                      sub_1000DC964((uint64_t)v435);
                    }
                    *(_OWORD *)v435 = *(_OWORD *)v436;
                    goto LABEL_129;
                  }
                  sub_1000DC964((uint64_t)v427);
                }
                *(_OWORD *)v427 = *(_OWORD *)v428;
                goto LABEL_122;
              }
LABEL_56:
              v253 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v239, v240, *(_QWORD *)(*(_QWORD *)(v253 - 8) + 64));
              goto LABEL_115;
            }
            if (v244)
            {
              sub_1000126B0(v239, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_56;
            }
            *(_QWORD *)v239 = *(_QWORD *)v240;
            v355 = *((_QWORD *)v240 + 1);
            *(_QWORD *)(v239 + 8) = v355;
            swift_bridgeObjectRetain(v355);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v239 + 16) = *((_QWORD *)v240 + 2);
            v356 = *((_QWORD *)v240 + 3);
            *(_QWORD *)(v239 + 24) = v356;
            swift_bridgeObjectRetain(v356);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v239 + 32) = *((_QWORD *)v240 + 4);
            v357 = *((_QWORD *)v240 + 5);
            *(_QWORD *)(v239 + 40) = v357;
            swift_bridgeObjectRetain(v357);
            swift_bridgeObjectRelease();
            *(_WORD *)(v239 + 48) = *((_WORD *)v240 + 24);
            *(_QWORD *)(v239 + 56) = *((_QWORD *)v240 + 7);
            v358 = *((_QWORD *)v240 + 8);
            *(_BYTE *)(v239 + 72) = v240[72];
            *(_QWORD *)(v239 + 64) = v358;
            v359 = v241[10];
            v360 = &v240[v359];
            v476 = (void *)(v239 + v359);
            v361 = ((uint64_t (*)(void))v482)();
            v362 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v482)(v360, 1, v197);
            if (v361)
            {
              if (v362)
              {
                v363 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v364 = v476;
LABEL_103:
                memcpy(v364, v360, v363);
                goto LABEL_106;
              }
              (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v476, v360, v197);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v489 + 56))(v476, 0, 1, v197);
            }
            else
            {
              if (v362)
              {
                (*(void (**)(void *, uint64_t))(v489 + 8))(v476, v197);
                v363 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v364 = v476;
                goto LABEL_103;
              }
              (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 24))(v476, v360, v197);
            }
LABEL_106:
            v394 = v241[11];
            v395 = &v240[v394];
            v477 = (void *)(v239 + v394);
            v396 = ((uint64_t (*)(void))v482)();
            v397 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v482)(v395, 1, v197);
            if (v396)
            {
              if (!v397)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 16))(v477, v395, v197);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v489 + 56))(v477, 0, 1, v197);
                goto LABEL_114;
              }
              v398 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v399 = v477;
            }
            else
            {
              if (!v397)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v489 + 24))(v477, v395, v197);
                goto LABEL_114;
              }
              (*(void (**)(void *, uint64_t))(v489 + 8))(v477, v197);
              v398 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v399 = v477;
            }
            memcpy(v399, v395, v398);
LABEL_114:
            v400 = v241[12];
            v401 = v239 + v400;
            v402 = &v240[v400];
            v403 = *(_QWORD *)v402;
            *(_BYTE *)(v401 + 8) = v402[8];
            *(_QWORD *)v401 = v403;
            v404 = v241[13];
            v405 = (_QWORD *)(v239 + v404);
            v406 = &v240[v404];
            *v405 = *v406;
            v407 = v406[1];
            v405[1] = v407;
            swift_bridgeObjectRetain(v407);
            swift_bridgeObjectRelease();
            v408 = v241[14];
            v409 = *(_QWORD *)&v240[v408];
            *(_QWORD *)(v239 + v408) = v409;
            swift_bridgeObjectRetain(v409);
            swift_bridgeObjectRelease();
            v410 = v241[15];
            v411 = (_QWORD *)(v239 + v410);
            v412 = &v240[v410];
            *v411 = *v412;
            v413 = v412[1];
            v411[1] = v413;
            swift_bridgeObjectRetain(v413);
            swift_bridgeObjectRelease();
            v414 = v241[16];
            v415 = *(_QWORD *)&v240[v414];
            *(_QWORD *)(v239 + v414) = v415;
            swift_bridgeObjectRetain(v415);
            swift_bridgeObjectRelease();
            v416 = v241[17];
            v417 = v239 + v416;
            v418 = &v240[v416];
            v419 = *(_OWORD *)v418;
            *(_BYTE *)(v417 + 16) = v418[16];
            *(_OWORD *)v417 = v419;
            v420 = v241[18];
            v421 = v239 + v420;
            v422 = &v240[v420];
            v423 = *(_OWORD *)v422;
            *(_BYTE *)(v421 + 16) = v422[16];
            *(_OWORD *)v421 = v423;
            goto LABEL_115;
          }
          (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v229, v197);
        }
        v233 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v229, v230, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
        goto LABEL_50;
      }
      (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v195, v197);
    }
    v227 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
    goto LABEL_44;
  }
  if (v92)
  {
LABEL_25:
    v125 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
LABEL_26:
    v127 = v493;
    v126 = v494;
    v128 = v497;
    v129 = v498;
    v130 = v496;
    v131 = v492;
    goto LABEL_69;
  }
  v481 = v28;
  v93 = *(_QWORD *)v87;
  v86[8] = v87[8];
  *(_QWORD *)v86 = v93;
  v94 = v88[5];
  v95 = &v86[v94];
  v96 = &v87[v94];
  v97 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
  v86[v88[6]] = v87[v88[6]];
  v86[v88[7]] = v87[v88[7]];
  v98 = v88[8];
  v99 = &v86[v98];
  v100 = &v87[v98];
  *v99 = *v100;
  __srcb = (void *)v100[1];
  v99[1] = __srcb;
  v86[v88[9]] = v87[v88[9]];
  v86[v88[10]] = v87[v88[10]];
  v86[v88[11]] = v87[v88[11]];
  v101 = v88[12];
  v102 = &v86[v101];
  v103 = &v87[v101];
  *v102 = *v103;
  v104 = v103[1];
  v102[1] = v104;
  v105 = v88[13];
  v106 = &v86[v105];
  v107 = &v87[v105];
  *v106 = *v107;
  v108 = v107[1];
  v106[1] = v108;
  v109 = v88[14];
  v110 = &v86[v109];
  v111 = &v87[v109];
  v112 = v111[8];
  *(_QWORD *)v110 = *(_QWORD *)v111;
  v110[8] = v112;
  v113 = v88[15];
  v114 = &v86[v113];
  v115 = &v87[v113];
  *v114 = *v115;
  v116 = v115[1];
  v114[1] = v116;
  v117 = v88[16];
  __dst = &v86[v117];
  v473 = &v87[v117];
  v118 = type metadata accessor for URL(0);
  v119 = *(_QWORD *)(v118 - 8);
  v120 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v119 + 48);
  swift_bridgeObjectRetain(__srcb);
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRetain(v108);
  v121 = v116;
  v122 = v120;
  v123 = swift_bridgeObjectRetain(v121);
  if (v120(v473, 1, (void *)v118, v123))
  {
    v124 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dst, v473, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 16))(__dst, v473, v118);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v119 + 56))(__dst, 0, 1, v118);
  }
  v202 = v88[17];
  v203 = &v86[v202];
  v204 = &v87[v202];
  v485 = v89;
  v488 = v119;
  v471 = v122;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v122)(&v87[v202], 1, v118))
  {
    v205 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v203, v204, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 16))(v203, v204, v118);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v203, 0, 1, v118);
  }
  v206 = v88[18];
  v207 = &v86[v206];
  v208 = &v87[v206];
  *v207 = *v208;
  v209 = v208[1];
  v207[1] = v209;
  *(_QWORD *)&v86[v88[19]] = *(_QWORD *)&v87[v88[19]];
  v210 = v88[20];
  v211 = &v86[v210];
  v212 = &v87[v210];
  v213 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v214 = (_QWORD *)*((_QWORD *)v213 - 1);
  v215 = (unsigned int (*)(_QWORD *, uint64_t, int *, __n128))v214[6];
  v216 = swift_bridgeObjectRetain(v209);
  if (v215(v212, 1, v213, v216))
  {
    v217 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
  }
  else
  {
    v474 = v214;
    __src = (void *)v118;
    *v211 = *v212;
    v218 = v212[1];
    v211[1] = v218;
    v211[2] = v212[2];
    v219 = v212[3];
    v211[3] = v219;
    v211[4] = v212[4];
    v220 = v212[5];
    v211[5] = v220;
    *((_WORD *)v211 + 24) = *((_WORD *)v212 + 24);
    v211[7] = v212[7];
    v221 = v212[8];
    *((_BYTE *)v211 + 72) = *((_BYTE *)v212 + 72);
    v211[8] = v221;
    v222 = v213[10];
    v223 = (char *)v211 + v222;
    v224 = (char *)v212 + v222;
    swift_bridgeObjectRetain(v218);
    swift_bridgeObjectRetain(v219);
    v225 = swift_bridgeObjectRetain(v220);
    if (v471(v224, 1, __src, v225))
    {
      v226 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v223, v224, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v488 + 16))(v223, v224, __src);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v488 + 56))(v223, 0, 1, __src);
    }
    v254 = v213[11];
    v255 = (char *)v211 + v254;
    v256 = (char *)v212 + v254;
    if (((unsigned int (*)(char *, uint64_t, void *))v471)((char *)v212 + v254, 1, __src))
    {
      v257 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v255, v256, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v488 + 16))(v255, v256, __src);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v488 + 56))(v255, 0, 1, __src);
    }
    v258 = v213[12];
    v259 = (char *)v211 + v258;
    v260 = (char *)v212 + v258;
    v261 = *(_QWORD *)v260;
    v259[8] = v260[8];
    *(_QWORD *)v259 = v261;
    v262 = v213[13];
    v263 = (_QWORD *)((char *)v211 + v262);
    v264 = (_QWORD *)((char *)v212 + v262);
    *v263 = *v264;
    v265 = v264[1];
    v263[1] = v265;
    v266 = v213[14];
    v267 = *(_QWORD *)((char *)v212 + v266);
    *(_QWORD *)((char *)v211 + v266) = v267;
    v268 = v213[15];
    v269 = (_QWORD *)((char *)v211 + v268);
    v270 = (_QWORD *)((char *)v212 + v268);
    *v269 = *v270;
    v271 = v270[1];
    v269[1] = v271;
    v272 = v213[16];
    v273 = *(_QWORD *)((char *)v212 + v272);
    *(_QWORD *)((char *)v211 + v272) = v273;
    v274 = v213[17];
    v275 = (char *)v211 + v274;
    v276 = (char *)v212 + v274;
    v277 = *(_OWORD *)v276;
    v275[16] = v276[16];
    *(_OWORD *)v275 = v277;
    v278 = v213[18];
    v279 = (char *)v211 + v278;
    v280 = (char *)v212 + v278;
    v281 = *(_OWORD *)v280;
    v279[16] = v280[16];
    *(_OWORD *)v279 = v281;
    v282 = (void (*)(_QWORD *, _QWORD, uint64_t, int *, __n128))v474[7];
    swift_bridgeObjectRetain(v265);
    swift_bridgeObjectRetain(v267);
    swift_bridgeObjectRetain(v271);
    v283 = swift_bridgeObjectRetain(v273);
    v282(v211, 0, 1, v213, v283);
    v118 = (uint64_t)__src;
  }
  *(_DWORD *)&v86[v88[21]] = *(_DWORD *)&v87[v88[21]];
  v284 = v88[22];
  v285 = *(_QWORD *)&v87[v284];
  *(_QWORD *)&v86[v284] = v285;
  v286 = v88[23];
  v287 = &v86[v286];
  v288 = &v87[v286];
  v289 = *(_QWORD *)&v87[v286 + 8];
  swift_bridgeObjectRetain(v285);
  if (v289 >> 60 == 15)
  {
    *(_OWORD *)v287 = *v288;
  }
  else
  {
    v290 = *(_QWORD *)v288;
    sub_10001BBBC(v290, v289);
    *(_QWORD *)v287 = v290;
    *((_QWORD *)v287 + 1) = v289;
  }
  v291 = v88[24];
  v292 = &v86[v291];
  v293 = &v87[v291];
  v294 = *((_QWORD *)v293 + 1);
  if (v294 >> 60 == 15)
  {
    *(_OWORD *)v292 = *(_OWORD *)v293;
  }
  else
  {
    v295 = *(_QWORD *)v293;
    sub_10001BBBC(*(_QWORD *)v293, *((_QWORD *)v293 + 1));
    *(_QWORD *)v292 = v295;
    *((_QWORD *)v292 + 1) = v294;
  }
  v296 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v488 + 16);
  v296(&v86[v88[25]], &v87[v88[25]], v118);
  v296(&v86[v88[26]], &v87[v88[26]], v118);
  v296(&v86[v88[27]], &v87[v88[27]], v118);
  v296(&v86[v88[28]], &v87[v88[28]], v118);
  v296(&v86[v88[29]], &v87[v88[29]], v118);
  v296(&v86[v88[30]], &v87[v88[30]], v118);
  v297 = v88[31];
  v298 = &v86[v297];
  v299 = &v87[v297];
  *v298 = *v299;
  v300 = v299[1];
  v298[1] = v300;
  v301 = v88[32];
  v302 = *(_QWORD *)&v87[v301];
  *(_QWORD *)&v86[v301] = v302;
  v303 = v88[33];
  v304 = &v86[v303];
  v305 = &v87[v303];
  *v304 = *v305;
  v306 = v305[1];
  v304[1] = v306;
  v307 = v88[34];
  v308 = *(_QWORD *)&v87[v307];
  *(_QWORD *)&v86[v307] = v308;
  v309 = v88[35];
  v310 = &v86[v309];
  v311 = &v87[v309];
  v312 = v311[16];
  *(_OWORD *)v310 = *(_OWORD *)v311;
  v310[16] = v312;
  v313 = v88[36];
  v314 = &v86[v313];
  v315 = &v87[v313];
  v316 = v315[16];
  *(_OWORD *)v314 = *(_OWORD *)v315;
  v314[16] = v316;
  v317 = v88[37];
  v318 = &v86[v317];
  v319 = &v87[v317];
  swift_bridgeObjectRetain(v300);
  swift_bridgeObjectRetain(v302);
  swift_bridgeObjectRetain(v306);
  v320 = swift_bridgeObjectRetain(v308);
  ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v296)(v318, v319, v118, v320);
  v296(&v86[v88[38]], &v87[v88[38]], v118);
  v296(&v86[v88[39]], &v87[v88[39]], v118);
  v296(&v86[v88[40]], &v87[v88[40]], v118);
  v296(&v86[v88[41]], &v87[v88[41]], v118);
  v296(&v86[v88[42]], &v87[v88[42]], v118);
  v86[v88[43]] = v87[v88[43]];
  v86[v88[44]] = v87[v88[44]];
  v86[v88[45]] = v87[v88[45]];
  v321 = v88[46];
  v322 = &v86[v321];
  v323 = &v87[v321];
  *v322 = *v323;
  v324 = v323[1];
  v322[1] = v324;
  v325 = v88[47];
  v326 = &v86[v325];
  v327 = &v87[v325];
  *v326 = *v327;
  v328 = v327[1];
  v326[1] = v328;
  v329 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v485 + 56);
  swift_bridgeObjectRetain(v324);
  v330 = swift_bridgeObjectRetain(v328);
  v329(v86, 0, 1, v88, v330);
  v127 = v493;
  v126 = v494;
  v128 = v497;
  v129 = v498;
  v130 = v496;
  v131 = v492;
  v37 = v481;
LABEL_69:
  v37[v129[16]] = v128[v129[16]];
  v331 = v129[17];
  v332 = *(_QWORD *)&v128[v331];
  *(_QWORD *)&v37[v331] = v332;
  swift_bridgeObjectRetain(v332);
  swift_bridgeObjectRelease();
  v333 = v129[18];
  v334 = &v37[v333];
  v335 = &v128[v333];
  v336 = v131(&v37[v333], 1, v130);
  v337 = v131(v335, 1, v130);
  if (v336)
  {
    if (!v337)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v495 + 16))(v334, v335, v130);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v495 + 56))(v334, 0, 1, v130);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v337)
  {
    (*(void (**)(_BYTE *, uint64_t))(v495 + 8))(v334, v130);
LABEL_74:
    v338 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v334, v335, *(_QWORD *)(*(_QWORD *)(v338 - 8) + 64));
    goto LABEL_75;
  }
  v490(v334, v335, v130);
LABEL_75:
  v339 = v129[19];
  v340 = &v37[v339];
  v341 = &v128[v339];
  v342 = v131(&v37[v339], 1, v130);
  v343 = v131(v341, 1, v130);
  if (v342)
  {
    if (!v343)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v495 + 16))(v340, v341, v130);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v495 + 56))(v340, 0, 1, v130);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if (v343)
  {
    (*(void (**)(_BYTE *, uint64_t))(v495 + 8))(v340, v130);
LABEL_80:
    v344 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v340, v341, *(_QWORD *)(*(_QWORD *)(v344 - 8) + 64));
    goto LABEL_81;
  }
  v490(v340, v341, v130);
LABEL_81:
  v345 = v129[20];
  v346 = (uint64_t *)&v37[v345];
  v347 = (uint64_t *)&v128[v345];
  if (((*(_QWORD *)&v37[v345 + 8] >> 60) | 4) != 0xF)
  {
    v350 = v347[1];
    if (((v350 >> 60) | 4) != 0xF)
    {
      v352 = *v347;
      sub_10001BBBC(v352, v350);
      v353 = *v346;
      v354 = v346[1];
      *v346 = v352;
      v346[1] = v350;
      sub_10001BC14(v353, v354);
      goto LABEL_87;
    }
    sub_100163378((uint64_t)v346);
    goto LABEL_86;
  }
  v348 = v347[1];
  if (((v348 >> 60) | 4) == 0xF)
  {
LABEL_86:
    *(_OWORD *)v346 = *(_OWORD *)v347;
    goto LABEL_87;
  }
  v349 = *v347;
  sub_10001BBBC(v349, v348);
  *v346 = v349;
  v346[1] = v348;
LABEL_87:
  v37[v129[21]] = v128[v129[21]];
  *(_WORD *)&v37[v129[22]] = *(_WORD *)&v128[v129[22]];
  v126[*(int *)(a3 + 24)] = v127[*(int *)(a3 + 24)];
  return v126;
}

uint64_t sub_100163378(uint64_t a1)
{
  destroy for KeyRepresentableInternal();
  return a1;
}

_BYTE *sub_1001633AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *__src;
  char *__srca;
  _OWORD *v114;
  char *__dst;
  char *__dsta;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  unsigned int (*v121)(void);
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  _BYTE *v126;
  _BYTE *v127;
  unsigned int (*v128)(char *, uint64_t, uint64_t);

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v10(v6, v7, v8);
  v11 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v12 = v11[5];
  v13 = &v6[v12];
  v14 = &v7[v12];
  v126 = a2;
  v120 = v10;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(&v7[v12], 1, v8))
  {
    v15 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v10(v13, v14, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  }
  v6[v11[6]] = v7[v11[6]];
  v16 = v11[7];
  v17 = &v6[v16];
  v18 = &v7[v16];
  v19 = type metadata accessor for MACAddress(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)&v6[v11[8]] = *(_QWORD *)&v7[v11[8]];
  v6[v11[9]] = v7[v11[9]];
  v20 = v11[10];
  v21 = &v6[v20];
  v22 = &v7[v20];
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v24 + 32);
  v25(v21, v22, v23);
  v26 = v11[11];
  v27 = &v6[v26];
  v28 = &v7[v26];
  v128 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v24 + 48);
  v127 = a1;
  v123 = v24;
  v124 = v23;
  v122 = v25;
  if (v128(&v7[v26], 1, v23))
  {
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v25(v27, v28, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v23);
  }
  v30 = v11[12];
  v31 = &v6[v30];
  v32 = &v7[v30];
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
  v6[v11[13]] = v7[v11[13]];
  v33 = v11[14];
  v34 = &v6[v33];
  v35 = &v7[v33];
  v36 = (int *)type metadata accessor for AccessoryMetadata(0);
  v37 = *((_QWORD *)v36 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
  {
    v38 = sub_10001A9A8(&qword_101115E60);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v120(v34, v35, v8);
    *(_OWORD *)&v34[v36[5]] = *(_OWORD *)&v35[v36[5]];
    *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
    *(_OWORD *)&v34[v36[7]] = *(_OWORD *)&v35[v36[7]];
    *(_DWORD *)&v34[v36[8]] = *(_DWORD *)&v35[v36[8]];
    v39 = v36[9];
    v40 = &v34[v39];
    v41 = &v35[v39];
    *(_DWORD *)v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    v42 = v36[10];
    v43 = &v34[v42];
    v44 = &v35[v42];
    *(_OWORD *)v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    v45 = v36[11];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v46[8] = v47[8];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v48 = v36[12];
    v49 = &v34[v48];
    v50 = &v35[v48];
    *(_DWORD *)v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    v34[v36[13]] = v35[v36[13]];
    v34[v36[14]] = v35[v36[14]];
    *(_OWORD *)&v34[v36[15]] = *(_OWORD *)&v35[v36[15]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
  }
  v51 = v11[15];
  v52 = &v6[v51];
  v53 = &v7[v51];
  v54 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v55 = *((_QWORD *)v54 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v55 + 48))(v53, 1, v54))
  {
    v56 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    v118 = v55;
    *(_QWORD *)v52 = *(_QWORD *)v53;
    v52[8] = v53[8];
    v57 = v54[5];
    v58 = &v52[v57];
    v59 = &v53[v57];
    v60 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v58, v59, v60);
    v52[v54[6]] = v53[v54[6]];
    v52[v54[7]] = v53[v54[7]];
    *(_OWORD *)&v52[v54[8]] = *(_OWORD *)&v53[v54[8]];
    v52[v54[9]] = v53[v54[9]];
    v52[v54[10]] = v53[v54[10]];
    v52[v54[11]] = v53[v54[11]];
    *(_OWORD *)&v52[v54[12]] = *(_OWORD *)&v53[v54[12]];
    *(_OWORD *)&v52[v54[13]] = *(_OWORD *)&v53[v54[13]];
    v61 = v54[14];
    v62 = &v52[v61];
    v63 = &v53[v61];
    v62[8] = v63[8];
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *(_OWORD *)&v52[v54[15]] = *(_OWORD *)&v53[v54[15]];
    v64 = v54[16];
    v65 = &v52[v64];
    v66 = &v53[v64];
    v67 = type metadata accessor for URL(0);
    v68 = *(_QWORD *)(v67 - 8);
    v121 = *(unsigned int (**)(void))(v68 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v121)(v66, 1, v67))
    {
      v69 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v65, v66, v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
    }
    v70 = v54[17];
    v71 = &v52[v70];
    v72 = &v53[v70];
    v119 = v68;
    v117 = v67;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v121)(&v53[v70], 1, v67))
    {
      v73 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v71, v72, v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v71, 0, 1, v67);
    }
    *(_OWORD *)&v52[v54[18]] = *(_OWORD *)&v53[v54[18]];
    *(_QWORD *)&v52[v54[19]] = *(_QWORD *)&v53[v54[19]];
    v74 = v54[20];
    v75 = &v52[v74];
    v76 = &v53[v74];
    v77 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v78 = *((_QWORD *)v77 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v78 + 48))(v76, 1, v77))
    {
      v79 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
      v80 = v117;
    }
    else
    {
      v114 = v75;
      v81 = *((_OWORD *)v76 + 1);
      *(_OWORD *)v75 = *(_OWORD *)v76;
      *((_OWORD *)v75 + 1) = v81;
      *((_OWORD *)v75 + 2) = *((_OWORD *)v76 + 2);
      *((_WORD *)v75 + 24) = *((_WORD *)v76 + 24);
      v82 = *((_QWORD *)v76 + 8);
      *((_QWORD *)v75 + 7) = *((_QWORD *)v76 + 7);
      *((_QWORD *)v75 + 8) = v82;
      v75[72] = v76[72];
      v83 = v77[10];
      __dst = &v75[v83];
      __src = &v76[v83];
      v80 = v117;
      if (v121())
      {
        v84 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(__dst, __src, v117);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(__dst, 0, 1, v117);
      }
      v85 = v77[11];
      __dsta = (char *)v114 + v85;
      __srca = &v76[v85];
      if (v121())
      {
        v86 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dsta, __srca, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 32))(__dsta, __srca, v117);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(__dsta, 0, 1, v117);
      }
      v87 = v77[12];
      v88 = (char *)v114 + v87;
      v89 = &v76[v87];
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v88[8] = v89[8];
      *(_OWORD *)((char *)v114 + v77[13]) = *(_OWORD *)&v76[v77[13]];
      *(_QWORD *)((char *)v114 + v77[14]) = *(_QWORD *)&v76[v77[14]];
      *(_OWORD *)((char *)v114 + v77[15]) = *(_OWORD *)&v76[v77[15]];
      *(_QWORD *)((char *)v114 + v77[16]) = *(_QWORD *)&v76[v77[16]];
      v90 = v77[17];
      v91 = (char *)v114 + v90;
      v92 = &v76[v90];
      v91[16] = v92[16];
      *(_OWORD *)v91 = *(_OWORD *)v92;
      v93 = v77[18];
      v94 = (char *)v114 + v93;
      v95 = &v76[v93];
      v94[16] = v95[16];
      *(_OWORD *)v94 = *(_OWORD *)v95;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v78 + 56))(v114, 0, 1, v77);
    }
    *(_DWORD *)&v52[v54[21]] = *(_DWORD *)&v53[v54[21]];
    *(_QWORD *)&v52[v54[22]] = *(_QWORD *)&v53[v54[22]];
    *(_OWORD *)&v52[v54[23]] = *(_OWORD *)&v53[v54[23]];
    *(_OWORD *)&v52[v54[24]] = *(_OWORD *)&v53[v54[24]];
    v96 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v119 + 32);
    v96(&v52[v54[25]], &v53[v54[25]], v80);
    v96(&v52[v54[26]], &v53[v54[26]], v80);
    v96(&v52[v54[27]], &v53[v54[27]], v80);
    v96(&v52[v54[28]], &v53[v54[28]], v80);
    v96(&v52[v54[29]], &v53[v54[29]], v80);
    v96(&v52[v54[30]], &v53[v54[30]], v80);
    *(_OWORD *)&v52[v54[31]] = *(_OWORD *)&v53[v54[31]];
    *(_QWORD *)&v52[v54[32]] = *(_QWORD *)&v53[v54[32]];
    *(_OWORD *)&v52[v54[33]] = *(_OWORD *)&v53[v54[33]];
    *(_QWORD *)&v52[v54[34]] = *(_QWORD *)&v53[v54[34]];
    v97 = v54[35];
    v98 = &v52[v97];
    v99 = &v53[v97];
    v98[16] = v99[16];
    *(_OWORD *)v98 = *(_OWORD *)v99;
    v100 = v54[36];
    v101 = &v52[v100];
    v102 = &v53[v100];
    v101[16] = v102[16];
    *(_OWORD *)v101 = *(_OWORD *)v102;
    v96(&v52[v54[37]], &v53[v54[37]], v80);
    v96(&v52[v54[38]], &v53[v54[38]], v80);
    v96(&v52[v54[39]], &v53[v54[39]], v80);
    v96(&v52[v54[40]], &v53[v54[40]], v80);
    v96(&v52[v54[41]], &v53[v54[41]], v80);
    v96(&v52[v54[42]], &v53[v54[42]], v80);
    v52[v54[43]] = v53[v54[43]];
    v52[v54[44]] = v53[v54[44]];
    v52[v54[45]] = v53[v54[45]];
    *(_OWORD *)&v52[v54[46]] = *(_OWORD *)&v53[v54[46]];
    *(_OWORD *)&v52[v54[47]] = *(_OWORD *)&v53[v54[47]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v118 + 56))(v52, 0, 1, v54);
  }
  v6[v11[16]] = v7[v11[16]];
  *(_QWORD *)&v6[v11[17]] = *(_QWORD *)&v7[v11[17]];
  v103 = v11[18];
  v104 = &v6[v103];
  v105 = &v7[v103];
  if (v128(&v7[v103], 1, v124))
  {
    v106 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
  }
  else
  {
    v122(v104, v105, v124);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v104, 0, 1, v124);
  }
  v107 = v11[19];
  v108 = &v6[v107];
  v109 = &v7[v107];
  if (v128(&v7[v107], 1, v124))
  {
    v110 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
  }
  else
  {
    v122(v108, v109, v124);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v108, 0, 1, v124);
  }
  *(_OWORD *)&v6[v11[20]] = *(_OWORD *)&v7[v11[20]];
  v6[v11[21]] = v7[v11[21]];
  *(_WORD *)&v6[v11[22]] = *(_WORD *)&v7[v11[22]];
  v127[*(int *)(a3 + 24)] = v126[*(int *)(a3 + 24)];
  return v127;
}

_BYTE *sub_100163EBC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t (*v31)(_BYTE *, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  int *v44;
  uint64_t v45;
  uint64_t (*v46)(_BYTE *, uint64_t, int *);
  int v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  int *v65;
  uint64_t (*v66)(_BYTE *, uint64_t, int *);
  int v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE *v141;
  _BYTE *v142;
  uint64_t v143;
  unsigned int (*v144)(void);
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  _OWORD *v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  void (*v177)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  _BYTE *v197;
  int *v198;
  uint64_t (*v199)(_BYTE *, uint64_t, int *);
  uint64_t v200;
  int v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  void (*v273)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v274;
  _QWORD *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _BYTE *v285;
  _BYTE *v286;
  uint64_t v287;
  _BYTE *v288;
  _BYTE *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE *v301;
  _BYTE *v302;
  int v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  _BYTE *v308;
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v318;
  char *v319;
  unsigned int v320;
  void *__dst;
  void *__dsta;
  void *__dstb;
  _QWORD *v324;
  void *v325;
  uint64_t v326;
  int *v327;
  char *__src;
  char *__srca;
  _OWORD *__srcb;
  void (*v331)(_BYTE *, _BYTE *, uint64_t);
  unsigned int (*v332)(void);
  uint64_t v333;
  void (*v334)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v335;
  unsigned int (*v336)(void);
  uint64_t v337;
  uint64_t (*v339)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v340;
  uint64_t v341;
  uint64_t v342;
  _BYTE *v343;
  _BYTE *v344;
  uint64_t v345;
  uint64_t v346;
  int *v347;

  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 40);
  v10(v6, v7, v8);
  v347 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v11 = v347[5];
  v12 = &v6[v11];
  v13 = &v7[v11];
  v335 = v9;
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v9) = v14(&v6[v11], 1, v8);
  v15 = v14(v13, 1, v8);
  v331 = v10;
  if ((_DWORD)v9)
  {
    if (!v15)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v335 + 32))(v12, v13, v8);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v12, 0, 1, v8);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(_BYTE *, uint64_t))(v335 + 8))(v12, v8);
LABEL_6:
    v16 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v10(v12, v13, v8);
LABEL_7:
  v6[v347[6]] = v7[v347[6]];
  v17 = v347[7];
  v18 = &v6[v17];
  v19 = &v7[v17];
  v20 = type metadata accessor for MACAddress(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(_QWORD *)&v6[v347[8]] = *(_QWORD *)&v7[v347[8]];
  swift_bridgeObjectRelease();
  v6[v347[9]] = v7[v347[9]];
  v21 = v347[10];
  v22 = &v6[v21];
  v23 = &v7[v21];
  v24 = v7;
  v25 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v25 - 8);
  v334 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 40);
  v334(v22, v23, v25);
  v27 = v347[11];
  v340 = v6;
  v28 = &v6[v27];
  v29 = v24;
  v30 = &v24[v27];
  v345 = v26;
  v31 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
  LODWORD(v24) = v31(v28, 1, v25);
  v346 = v25;
  v32 = v31(v30, 1, v25);
  v343 = a2;
  v344 = a1;
  if ((_DWORD)v24)
  {
    if (!v32)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v345 + 32))(v28, v30, v25);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v345 + 56))(v28, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(_BYTE *, uint64_t))(v345 + 8))(v28, v25);
LABEL_12:
    v33 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v28, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v334(v28, v30, v25);
LABEL_13:
  v34 = v29;
  v35 = v340;
  v36 = v347[12];
  v37 = &v340[v36];
  v38 = &v34[v36];
  *v37 = *v38;
  v40 = *((_QWORD *)v38 + 1);
  v39 = *((_QWORD *)v38 + 2);
  *((_QWORD *)v37 + 1) = v40;
  *((_QWORD *)v37 + 2) = v39;
  swift_bridgeObjectRelease();
  v340[v347[13]] = v34[v347[13]];
  v41 = v347[14];
  v42 = &v340[v41];
  v43 = &v34[v41];
  v44 = (int *)type metadata accessor for AccessoryMetadata(0);
  v45 = *((_QWORD *)v44 - 1);
  v46 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  v339 = v31;
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v335 + 32))(v42, v43, v8);
      *(_OWORD *)&v42[v44[5]] = *(_OWORD *)&v43[v44[5]];
      *(_OWORD *)&v42[v44[6]] = *(_OWORD *)&v43[v44[6]];
      *(_OWORD *)&v42[v44[7]] = *(_OWORD *)&v43[v44[7]];
      *(_DWORD *)&v42[v44[8]] = *(_DWORD *)&v43[v44[8]];
      v49 = v44[9];
      v50 = &v42[v49];
      v51 = &v43[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v52 = v44[10];
      v53 = &v42[v52];
      v54 = &v43[v52];
      *(_OWORD *)v53 = *(_OWORD *)v54;
      v53[16] = v54[16];
      v55 = v44[11];
      v56 = &v42[v55];
      v57 = &v43[v55];
      v56[8] = v57[8];
      *(_QWORD *)v56 = *(_QWORD *)v57;
      v58 = v44[12];
      v59 = &v42[v58];
      v60 = &v43[v58];
      *(_DWORD *)v59 = *(_DWORD *)v60;
      v59[4] = v60[4];
      v42[v44[13]] = v43[v44[13]];
      v42[v44[14]] = v43[v44[14]];
      *(_OWORD *)&v42[v44[15]] = *(_OWORD *)&v43[v44[15]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v48)
  {
    sub_1000126B0((uint64_t)v42, type metadata accessor for AccessoryMetadata);
LABEL_18:
    v61 = sub_10001A9A8(&qword_101115E60);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_19;
  }
  v331(v42, v43, v8);
  v83 = v44[5];
  v84 = *(_QWORD *)&v42[v83];
  v85 = *(_QWORD *)&v42[v83 + 8];
  *(_OWORD *)&v42[v83] = *(_OWORD *)&v43[v83];
  sub_10001BC14(v84, v85);
  v86 = v44[6];
  v87 = &v42[v86];
  v88 = (uint64_t *)&v43[v86];
  v90 = *v88;
  v89 = v88[1];
  *v87 = v90;
  v87[1] = v89;
  swift_bridgeObjectRelease();
  v91 = v44[7];
  v92 = &v42[v91];
  v93 = (uint64_t *)&v43[v91];
  v95 = *v93;
  v94 = v93[1];
  *v92 = v95;
  v92[1] = v94;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v42[v44[8]] = *(_DWORD *)&v43[v44[8]];
  v96 = v44[9];
  v97 = &v42[v96];
  v98 = &v43[v96];
  *(_DWORD *)v97 = *(_DWORD *)v98;
  v97[4] = v98[4];
  v99 = v44[10];
  v100 = &v42[v99];
  v101 = &v43[v99];
  *(_OWORD *)v100 = *(_OWORD *)v101;
  v100[16] = v101[16];
  v102 = v44[11];
  v103 = &v42[v102];
  v104 = &v43[v102];
  *(_QWORD *)v103 = *(_QWORD *)v104;
  v103[8] = v104[8];
  v105 = v44[12];
  v106 = &v42[v105];
  v107 = &v43[v105];
  *(_DWORD *)v106 = *(_DWORD *)v107;
  v106[4] = v107[4];
  v42[v44[13]] = v43[v44[13]];
  v42[v44[14]] = v43[v44[14]];
  v108 = v44[15];
  v109 = &v42[v108];
  v110 = (uint64_t *)&v43[v108];
  v112 = *v110;
  v111 = v110[1];
  *v109 = v112;
  v109[1] = v111;
  swift_bridgeObjectRelease();
LABEL_19:
  v62 = v347[15];
  v63 = &v340[v62];
  v64 = &v34[v62];
  v65 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v341 = *((_QWORD *)v65 - 1);
  v66 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v341 + 48);
  v67 = v66(v63, 1, v65);
  v68 = v66(v64, 1, v65);
  if (!v67)
  {
    if (v68)
    {
      sub_1000126B0((uint64_t)v63, type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v64[8];
    v113 = v65[5];
    v114 = &v63[v113];
    v115 = &v64[v113];
    v116 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v116 - 8) + 40))(v114, v115, v116);
    v63[v65[6]] = v64[v65[6]];
    v63[v65[7]] = v64[v65[7]];
    v117 = v65[8];
    v118 = &v63[v117];
    v119 = (uint64_t *)&v64[v117];
    v121 = *v119;
    v120 = v119[1];
    *v118 = v121;
    v118[1] = v120;
    swift_bridgeObjectRelease();
    v63[v65[9]] = v64[v65[9]];
    v63[v65[10]] = v64[v65[10]];
    v63[v65[11]] = v64[v65[11]];
    v122 = v65[12];
    v123 = &v63[v122];
    v124 = (uint64_t *)&v64[v122];
    v126 = *v124;
    v125 = v124[1];
    *v123 = v126;
    v123[1] = v125;
    swift_bridgeObjectRelease();
    v127 = v65[13];
    v128 = &v63[v127];
    v129 = (uint64_t *)&v64[v127];
    v131 = *v129;
    v130 = v129[1];
    *v128 = v131;
    v128[1] = v130;
    swift_bridgeObjectRelease();
    v132 = v65[14];
    v133 = &v63[v132];
    v134 = &v64[v132];
    *(_QWORD *)v133 = *(_QWORD *)v134;
    v133[8] = v134[8];
    v135 = v65[15];
    v136 = &v63[v135];
    v137 = (uint64_t *)&v64[v135];
    v139 = *v137;
    v138 = v137[1];
    *v136 = v139;
    v136[1] = v138;
    swift_bridgeObjectRelease();
    v140 = v65[16];
    v141 = &v63[v140];
    v142 = &v64[v140];
    v143 = type metadata accessor for URL(0);
    v337 = *(_QWORD *)(v143 - 8);
    v144 = *(unsigned int (**)(void))(v337 + 48);
    v145 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v144)(v141, 1, v143);
    v342 = v143;
    v332 = v144;
    v146 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v144)(v142, 1, v143);
    if (v145)
    {
      if (v146)
      {
        v147 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
        v148 = v143;
      }
      else
      {
        v148 = v143;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v141, v142, v143);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v141, 0, 1, v143);
      }
    }
    else
    {
      v148 = v143;
      if (v146)
      {
        (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v141, v143);
        v164 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v141, v142, v143);
      }
    }
    v184 = v65[17];
    v185 = &v63[v184];
    v186 = &v64[v184];
    v187 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v332)(&v63[v184], 1, v148);
    v188 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v332)(v186, 1, v148);
    if (v187)
    {
      if (!v188)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v185, v186, v143);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v185, 0, 1, v143);
        goto LABEL_56;
      }
    }
    else
    {
      if (!v188)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v185, v186, v143);
LABEL_56:
        v190 = v65[18];
        v191 = &v63[v190];
        v192 = (uint64_t *)&v64[v190];
        v194 = *v192;
        v193 = v192[1];
        *v191 = v194;
        v191[1] = v193;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v63[v65[19]] = *(_QWORD *)&v64[v65[19]];
        v195 = v65[20];
        v196 = &v63[v195];
        v197 = &v64[v195];
        v198 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
        v324 = (_QWORD *)*((_QWORD *)v198 - 1);
        v199 = (uint64_t (*)(_BYTE *, uint64_t, int *))v324[6];
        v200 = (uint64_t)v196;
        LODWORD(v196) = v199(v196, 1, v198);
        v327 = v198;
        __srcb = v197;
        v201 = v199(v197, 1, v198);
        if ((_DWORD)v196)
        {
          if (!v201)
          {
            v202 = *((_OWORD *)v197 + 1);
            v203 = v200;
            *(_OWORD *)v200 = *__srcb;
            *(_OWORD *)(v200 + 16) = v202;
            *(_OWORD *)(v200 + 32) = __srcb[2];
            *(_WORD *)(v200 + 48) = *((_WORD *)__srcb + 24);
            v204 = *((_QWORD *)__srcb + 8);
            *(_QWORD *)(v200 + 56) = *((_QWORD *)__srcb + 7);
            *(_QWORD *)(v200 + 64) = v204;
            *(_BYTE *)(v200 + 72) = *((_BYTE *)__srcb + 72);
            v205 = v198[10];
            v319 = (char *)__srcb + v205;
            __dst = (void *)(v200 + v205);
            v206 = v342;
            if (v332())
            {
              v207 = sub_10001A9A8(&qword_1010FBA40);
              memcpy(__dst, v319, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
            }
            else
            {
              (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dst, v319, v342);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(__dst, 0, 1, v342);
            }
            v220 = v198[11];
            __dsta = (void *)(v203 + v220);
            v221 = (char *)__srcb + v220;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v332)((char *)__srcb + v220, 1, v342))
            {
              v222 = sub_10001A9A8(&qword_1010FBA40);
              memcpy(__dsta, v221, *(_QWORD *)(*(_QWORD *)(v222 - 8) + 64));
              v209 = v337;
            }
            else
            {
              v223 = v221;
              v209 = v337;
              (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dsta, v223, v342);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(__dsta, 0, 1, v342);
            }
            v224 = v198[12];
            v225 = v203 + v224;
            v226 = (char *)__srcb + v224;
            *(_QWORD *)v225 = *(_QWORD *)v226;
            *(_BYTE *)(v225 + 8) = v226[8];
            *(_OWORD *)(v203 + v198[13]) = *(_OWORD *)((char *)__srcb + v198[13]);
            *(_QWORD *)(v203 + v198[14]) = *(_QWORD *)((char *)__srcb + v198[14]);
            *(_OWORD *)(v203 + v198[15]) = *(_OWORD *)((char *)__srcb + v198[15]);
            *(_QWORD *)(v203 + v198[16]) = *(_QWORD *)((char *)__srcb + v198[16]);
            v227 = v198[17];
            v228 = v203 + v227;
            v229 = (char *)__srcb + v227;
            *(_BYTE *)(v228 + 16) = v229[16];
            *(_OWORD *)v228 = *(_OWORD *)v229;
            v230 = v198[18];
            v231 = v203 + v230;
            v232 = (char *)__srcb + v230;
            *(_BYTE *)(v231 + 16) = v232[16];
            *(_OWORD *)v231 = *(_OWORD *)v232;
            ((void (*)(uint64_t, _QWORD, uint64_t, int *))v324[7])(v203, 0, 1, v198);
LABEL_85:
            *(_DWORD *)&v63[v65[21]] = *(_DWORD *)&v64[v65[21]];
            *(_QWORD *)&v63[v65[22]] = *(_QWORD *)&v64[v65[22]];
            swift_bridgeObjectRelease();
            v261 = v65[23];
            v262 = (uint64_t *)&v63[v261];
            v263 = (uint64_t *)&v64[v261];
            v264 = *(_QWORD *)&v63[v261 + 8];
            if (v264 >> 60 != 15)
            {
              v265 = v263[1];
              if (v265 >> 60 != 15)
              {
                v266 = *v262;
                *v262 = *v263;
                v262[1] = v265;
                sub_10001BC14(v266, v264);
LABEL_90:
                v267 = v65[24];
                v268 = (uint64_t *)&v63[v267];
                v269 = (uint64_t *)&v64[v267];
                v270 = *(_QWORD *)&v63[v267 + 8];
                if (v270 >> 60 != 15)
                {
                  v271 = v269[1];
                  if (v271 >> 60 != 15)
                  {
                    v272 = *v268;
                    *v268 = *v269;
                    v268[1] = v271;
                    sub_10001BC14(v272, v270);
                    goto LABEL_95;
                  }
                  sub_1000DC964((uint64_t)v268);
                }
                *(_OWORD *)v268 = *(_OWORD *)v269;
LABEL_95:
                v273 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v209 + 40);
                v273(&v63[v65[25]], &v64[v65[25]], v206);
                v273(&v63[v65[26]], &v64[v65[26]], v206);
                v273(&v63[v65[27]], &v64[v65[27]], v206);
                v273(&v63[v65[28]], &v64[v65[28]], v206);
                v273(&v63[v65[29]], &v64[v65[29]], v206);
                v273(&v63[v65[30]], &v64[v65[30]], v206);
                v274 = v65[31];
                v275 = &v63[v274];
                v276 = (uint64_t *)&v64[v274];
                v278 = *v276;
                v277 = v276[1];
                *v275 = v278;
                v275[1] = v277;
                swift_bridgeObjectRelease();
                *(_QWORD *)&v63[v65[32]] = *(_QWORD *)&v64[v65[32]];
                swift_bridgeObjectRelease();
                v279 = v65[33];
                v280 = &v63[v279];
                v281 = (uint64_t *)&v64[v279];
                v283 = *v281;
                v282 = v281[1];
                *v280 = v283;
                v280[1] = v282;
                swift_bridgeObjectRelease();
                *(_QWORD *)&v63[v65[34]] = *(_QWORD *)&v64[v65[34]];
                swift_bridgeObjectRelease();
                v284 = v65[35];
                v285 = &v63[v284];
                v286 = &v64[v284];
                *(_OWORD *)v285 = *(_OWORD *)v286;
                v285[16] = v286[16];
                v287 = v65[36];
                v288 = &v63[v287];
                v289 = &v64[v287];
                v288[16] = v289[16];
                *(_OWORD *)v288 = *(_OWORD *)v289;
                v273(&v63[v65[37]], &v64[v65[37]], v206);
                v273(&v63[v65[38]], &v64[v65[38]], v206);
                v273(&v63[v65[39]], &v64[v65[39]], v206);
                v273(&v63[v65[40]], &v64[v65[40]], v206);
                v273(&v63[v65[41]], &v64[v65[41]], v206);
                v273(&v63[v65[42]], &v64[v65[42]], v206);
                v63[v65[43]] = v64[v65[43]];
                v63[v65[44]] = v64[v65[44]];
                v63[v65[45]] = v64[v65[45]];
                v290 = v65[46];
                v291 = &v63[v290];
                v292 = (uint64_t *)&v64[v290];
                v294 = *v292;
                v293 = v292[1];
                *v291 = v294;
                v291[1] = v293;
                swift_bridgeObjectRelease();
                v295 = v65[47];
                v296 = &v63[v295];
                v297 = (uint64_t *)&v64[v295];
                v299 = *v297;
                v298 = v297[1];
                *v296 = v299;
                v296[1] = v298;
                swift_bridgeObjectRelease();
                goto LABEL_96;
              }
              sub_1000DC964((uint64_t)v262);
            }
            *(_OWORD *)v262 = *(_OWORD *)v263;
            goto LABEL_90;
          }
LABEL_62:
          v208 = sub_10001A9A8(&qword_1010FBA50);
          memcpy((void *)v200, v197, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
          v209 = v337;
          v206 = v342;
          goto LABEL_85;
        }
        if (v201)
        {
          sub_1000126B0(v200, type metadata accessor for AccessoryInfoResponseContent.Configuration);
          goto LABEL_62;
        }
        v210 = *((_QWORD *)v197 + 1);
        v211 = v200;
        *(_QWORD *)v200 = *(_QWORD *)__srcb;
        *(_QWORD *)(v200 + 8) = v210;
        swift_bridgeObjectRelease();
        v212 = *((_QWORD *)__srcb + 3);
        *(_QWORD *)(v200 + 16) = *((_QWORD *)__srcb + 2);
        *(_QWORD *)(v200 + 24) = v212;
        swift_bridgeObjectRelease();
        v213 = *((_QWORD *)__srcb + 5);
        *(_QWORD *)(v200 + 32) = *((_QWORD *)__srcb + 4);
        *(_QWORD *)(v200 + 40) = v213;
        swift_bridgeObjectRelease();
        *(_WORD *)(v200 + 48) = *((_WORD *)__srcb + 24);
        v214 = *((_QWORD *)__srcb + 8);
        *(_QWORD *)(v200 + 56) = *((_QWORD *)__srcb + 7);
        *(_QWORD *)(v200 + 64) = v214;
        *(_BYTE *)(v200 + 72) = *((_BYTE *)__srcb + 72);
        v215 = v198[10];
        v216 = (char *)__srcb + v215;
        v325 = (void *)(v200 + v215);
        v320 = v332();
        v217 = ((uint64_t (*)(char *, uint64_t, uint64_t))v332)(v216, 1, v342);
        if (v320)
        {
          if (v217)
          {
            v218 = sub_10001A9A8(&qword_1010FBA40);
            memcpy(v325, v216, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
            v219 = v342;
          }
          else
          {
            v219 = v342;
            (*(void (**)(void *, char *, uint64_t))(v337 + 32))(v325, v216, v342);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v325, 0, 1, v342);
          }
        }
        else
        {
          v219 = v342;
          if (v217)
          {
            (*(void (**)(void *, uint64_t))(v337 + 8))(v325, v342);
            v233 = sub_10001A9A8(&qword_1010FBA40);
            memcpy(v325, v216, *(_QWORD *)(*(_QWORD *)(v233 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *, uint64_t))(v337 + 40))(v325, v216, v342);
          }
        }
        v234 = v198[11];
        v235 = (char *)__srcb + v234;
        __dstb = (void *)(v211 + v234);
        v236 = v332();
        v237 = ((uint64_t (*)(char *, uint64_t, uint64_t))v332)(v235, 1, v219);
        if (v236)
        {
          if (v237)
          {
            v238 = sub_10001A9A8(&qword_1010FBA40);
            memcpy(__dstb, v235, *(_QWORD *)(*(_QWORD *)(v238 - 8) + 64));
            v239 = v342;
            v240 = v327;
            v209 = v337;
LABEL_84:
            v242 = v240[12];
            v243 = v211 + v242;
            v244 = (char *)__srcb + v242;
            *(_QWORD *)v243 = *(_QWORD *)v244;
            *(_BYTE *)(v243 + 8) = v244[8];
            v245 = v240[13];
            v246 = (_QWORD *)(v211 + v245);
            v247 = (uint64_t *)((char *)__srcb + v245);
            v249 = *v247;
            v248 = v247[1];
            *v246 = v249;
            v246[1] = v248;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v211 + v240[14]) = *(_QWORD *)((char *)__srcb + v240[14]);
            swift_bridgeObjectRelease();
            v250 = v240[15];
            v251 = (_QWORD *)(v211 + v250);
            v252 = (uint64_t *)((char *)__srcb + v250);
            v254 = *v252;
            v253 = v252[1];
            *v251 = v254;
            v251[1] = v253;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v211 + v240[16]) = *(_QWORD *)((char *)__srcb + v240[16]);
            swift_bridgeObjectRelease();
            v255 = v240[17];
            v256 = v211 + v255;
            v257 = (char *)__srcb + v255;
            *(_OWORD *)v256 = *(_OWORD *)v257;
            *(_BYTE *)(v256 + 16) = v257[16];
            v258 = v240[18];
            v259 = v211 + v258;
            v260 = (char *)__srcb + v258;
            *(_BYTE *)(v259 + 16) = v260[16];
            *(_OWORD *)v259 = *(_OWORD *)v260;
            v206 = v239;
            goto LABEL_85;
          }
          v209 = v337;
          (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dstb, v235, v342);
          v239 = v342;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(__dstb, 0, 1, v342);
        }
        else
        {
          v209 = v337;
          v239 = v342;
          if (v237)
          {
            (*(void (**)(void *))(v337 + 8))(__dstb);
            v241 = sub_10001A9A8(&qword_1010FBA40);
            memcpy(__dstb, v235, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
          }
          else
          {
            (*(void (**)(void *, char *))(v337 + 40))(__dstb, v235);
          }
        }
        v240 = v327;
        goto LABEL_84;
      }
      (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v185, v143);
    }
    v189 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
    goto LABEL_56;
  }
  if (v68)
  {
LABEL_25:
    v82 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_96;
  }
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v63[8] = v64[8];
  v69 = v65[5];
  v70 = &v63[v69];
  v71 = &v64[v69];
  v72 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v70, v71, v72);
  v63[v65[6]] = v64[v65[6]];
  v63[v65[7]] = v64[v65[7]];
  *(_OWORD *)&v63[v65[8]] = *(_OWORD *)&v64[v65[8]];
  v63[v65[9]] = v64[v65[9]];
  v63[v65[10]] = v64[v65[10]];
  v63[v65[11]] = v64[v65[11]];
  *(_OWORD *)&v63[v65[12]] = *(_OWORD *)&v64[v65[12]];
  *(_OWORD *)&v63[v65[13]] = *(_OWORD *)&v64[v65[13]];
  v73 = v65[14];
  v74 = &v63[v73];
  v75 = &v64[v73];
  v74[8] = v75[8];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_OWORD *)&v63[v65[15]] = *(_OWORD *)&v64[v65[15]];
  v76 = v65[16];
  v77 = &v63[v76];
  v78 = &v64[v76];
  v79 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v79 - 8);
  v336 = *(unsigned int (**)(void))(v80 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(v78, 1, v79))
  {
    v81 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  v149 = v65[17];
  v150 = &v63[v149];
  v151 = &v64[v149];
  v333 = v80;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(&v64[v149], 1, v79))
  {
    v152 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 32))(v150, v151, v79);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v150, 0, 1, v79);
  }
  *(_OWORD *)&v63[v65[18]] = *(_OWORD *)&v64[v65[18]];
  *(_QWORD *)&v63[v65[19]] = *(_QWORD *)&v64[v65[19]];
  v153 = v65[20];
  v154 = &v63[v153];
  v155 = &v64[v153];
  v156 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v157 = *((_QWORD *)v156 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v157 + 48))(v155, 1, v156))
  {
    v158 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v154, v155, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
  }
  else
  {
    v326 = v157;
    v159 = v155[1];
    *v154 = *v155;
    v154[1] = v159;
    v154[2] = v155[2];
    *((_WORD *)v154 + 24) = *((_WORD *)v155 + 24);
    v160 = *((_QWORD *)v155 + 8);
    *((_QWORD *)v154 + 7) = *((_QWORD *)v155 + 7);
    *((_QWORD *)v154 + 8) = v160;
    *((_BYTE *)v154 + 72) = *((_BYTE *)v155 + 72);
    v161 = v156[10];
    v162 = (char *)v154 + v161;
    __src = (char *)v155 + v161;
    if (v336())
    {
      v163 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v162, __src, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v333 + 32))(v162, __src, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v333 + 56))(v162, 0, 1, v79);
    }
    v165 = v156[11];
    v166 = (char *)v154 + v165;
    __srca = (char *)v155 + v165;
    if (v336())
    {
      v167 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v166, __srca, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v333 + 32))(v166, __srca, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v333 + 56))(v166, 0, 1, v79);
    }
    v168 = v156[12];
    v169 = (char *)v154 + v168;
    v170 = (char *)v155 + v168;
    *(_QWORD *)v169 = *(_QWORD *)v170;
    v169[8] = v170[8];
    *(_OWORD *)((char *)v154 + v156[13]) = *(_OWORD *)((char *)v155 + v156[13]);
    *(_QWORD *)((char *)v154 + v156[14]) = *(_QWORD *)((char *)v155 + v156[14]);
    *(_OWORD *)((char *)v154 + v156[15]) = *(_OWORD *)((char *)v155 + v156[15]);
    *(_QWORD *)((char *)v154 + v156[16]) = *(_QWORD *)((char *)v155 + v156[16]);
    v171 = v156[17];
    v172 = (char *)v154 + v171;
    v173 = (char *)v155 + v171;
    v172[16] = v173[16];
    *(_OWORD *)v172 = *(_OWORD *)v173;
    v174 = v156[18];
    v175 = (char *)v154 + v174;
    v176 = (char *)v155 + v174;
    v175[16] = v176[16];
    *(_OWORD *)v175 = *(_OWORD *)v176;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v326 + 56))(v154, 0, 1, v156);
  }
  *(_DWORD *)&v63[v65[21]] = *(_DWORD *)&v64[v65[21]];
  *(_QWORD *)&v63[v65[22]] = *(_QWORD *)&v64[v65[22]];
  *(_OWORD *)&v63[v65[23]] = *(_OWORD *)&v64[v65[23]];
  *(_OWORD *)&v63[v65[24]] = *(_OWORD *)&v64[v65[24]];
  v177 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v333 + 32);
  v177(&v63[v65[25]], &v64[v65[25]], v79);
  v177(&v63[v65[26]], &v64[v65[26]], v79);
  v177(&v63[v65[27]], &v64[v65[27]], v79);
  v177(&v63[v65[28]], &v64[v65[28]], v79);
  v177(&v63[v65[29]], &v64[v65[29]], v79);
  v177(&v63[v65[30]], &v64[v65[30]], v79);
  *(_OWORD *)&v63[v65[31]] = *(_OWORD *)&v64[v65[31]];
  *(_QWORD *)&v63[v65[32]] = *(_QWORD *)&v64[v65[32]];
  *(_OWORD *)&v63[v65[33]] = *(_OWORD *)&v64[v65[33]];
  *(_QWORD *)&v63[v65[34]] = *(_QWORD *)&v64[v65[34]];
  v178 = v65[35];
  v179 = &v63[v178];
  v180 = &v64[v178];
  v179[16] = v180[16];
  *(_OWORD *)v179 = *(_OWORD *)v180;
  v181 = v65[36];
  v182 = &v63[v181];
  v183 = &v64[v181];
  v182[16] = v183[16];
  *(_OWORD *)v182 = *(_OWORD *)v183;
  v177(&v63[v65[37]], &v64[v65[37]], v79);
  v177(&v63[v65[38]], &v64[v65[38]], v79);
  v177(&v63[v65[39]], &v64[v65[39]], v79);
  v177(&v63[v65[40]], &v64[v65[40]], v79);
  v177(&v63[v65[41]], &v64[v65[41]], v79);
  v177(&v63[v65[42]], &v64[v65[42]], v79);
  v63[v65[43]] = v64[v65[43]];
  v63[v65[44]] = v64[v65[44]];
  v63[v65[45]] = v64[v65[45]];
  *(_OWORD *)&v63[v65[46]] = *(_OWORD *)&v64[v65[46]];
  *(_OWORD *)&v63[v65[47]] = *(_OWORD *)&v64[v65[47]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v341 + 56))(v63, 0, 1, v65);
LABEL_96:
  v35[v347[16]] = v34[v347[16]];
  *(_QWORD *)&v35[v347[17]] = *(_QWORD *)&v34[v347[17]];
  swift_bridgeObjectRelease();
  v300 = v347[18];
  v301 = &v35[v300];
  v302 = &v34[v300];
  v303 = v339(&v35[v300], 1, v346);
  v304 = v339(v302, 1, v346);
  if (v303)
  {
    if (!v304)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v345 + 32))(v301, v302, v346);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v345 + 56))(v301, 0, 1, v346);
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  if (v304)
  {
    (*(void (**)(_BYTE *, uint64_t))(v345 + 8))(v301, v346);
LABEL_101:
    v305 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v301, v302, *(_QWORD *)(*(_QWORD *)(v305 - 8) + 64));
    goto LABEL_102;
  }
  v334(v301, v302, v346);
LABEL_102:
  v306 = v347[19];
  v307 = &v35[v306];
  v308 = &v34[v306];
  v309 = v339(&v35[v306], 1, v346);
  v310 = v339(v308, 1, v346);
  if (v309)
  {
    if (!v310)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v345 + 32))(v307, v308, v346);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v345 + 56))(v307, 0, 1, v346);
      goto LABEL_108;
    }
    goto LABEL_107;
  }
  if (v310)
  {
    (*(void (**)(_BYTE *, uint64_t))(v345 + 8))(v307, v346);
LABEL_107:
    v311 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v307, v308, *(_QWORD *)(*(_QWORD *)(v311 - 8) + 64));
    goto LABEL_108;
  }
  v334(v307, v308, v346);
LABEL_108:
  v312 = v347[20];
  v313 = (uint64_t *)&v35[v312];
  v314 = (uint64_t *)&v34[v312];
  v315 = *(_QWORD *)&v35[v312 + 8];
  if (((v315 >> 60) | 4) != 0xF)
  {
    v316 = v314[1];
    if (((v316 >> 60) | 4) != 0xF)
    {
      v318 = *v313;
      *v313 = *v314;
      v313[1] = v316;
      sub_10001BC14(v318, v315);
      goto LABEL_112;
    }
    sub_100163378((uint64_t)v313);
  }
  *(_OWORD *)v313 = *(_OWORD *)v314;
LABEL_112:
  v35[v347[21]] = v34[v347[21]];
  *(_WORD *)&v35[v347[22]] = *(_WORD *)&v34[v347[22]];
  v344[*(int *)(a3 + 24)] = v343[*(int *)(a3 + 24)];
  return v344;
}

uint64_t sub_100165824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100165830);
}

uint64_t sub_100165830(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *a1;
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for WildModeAssociationRecord(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1001658A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001658B0);
}

_BYTE *sub_1001658B0(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *result = a2 + 2;
  }
  else
  {
    v7 = type metadata accessor for WildModeAssociationRecord(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100165920(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E298C8;
  result = type metadata accessor for WildModeAssociationRecord(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100E298E0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MessagingError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for MessagingError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *assignWithCopy for MessagingError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

unint64_t *assignWithTake for MessagingError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF6 && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483639);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 8;
  if (v4 >= 0xA)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MessagingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF7)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483639;
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF7)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingError()
{
  return &type metadata for MessagingError;
}

unint64_t sub_100165B94(unint64_t a1)
{
  unint64_t result;
  uint64_t v4;
  Swift::String v5;
  unint64_t v6;
  _QWORD v7[2];

  result = 0xD000000000000012;
  switch(a1)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x616E7265746E692ELL;
      break;
    case 2uLL:
      result = 0x74756F656D69742ELL;
      break;
    case 3uLL:
      result = 0xD000000000000016;
      break;
    case 4uLL:
      result = 0xD000000000000017;
      break;
    case 5uLL:
      result = 0xD000000000000010;
      break;
    case 6uLL:
      result = 0xD00000000000001CLL;
      break;
    case 7uLL:
      result = 0x6E776F6E6B6E752ELL;
      break;
    case 8uLL:
      result = 0xD000000000000018;
      break;
    default:
      strcpy((char *)v7, ".underlying(");
      BYTE5(v7[1]) = 0;
      HIWORD(v7[1]) = -5120;
      v6 = a1;
      sub_100165D28(a1);
      swift_errorRetain(a1);
      v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v5._countAndFlagsBits = String.init<A>(describing:)(&v6, v4);
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      sub_100165D38(a1);
      result = v7[0];
      break;
  }
  return result;
}

unint64_t sub_100165D20()
{
  unint64_t *v0;

  return sub_100165B94(*v0);
}

unint64_t sub_100165D28(unint64_t result)
{
  if (result >= 9)
    return swift_errorRetain(result);
  return result;
}

unint64_t sub_100165D38(unint64_t result)
{
  if (result >= 9)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_100165D4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_10001BBBC(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t sub_100165D7C()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100165D84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t (*sub_100165DAC())()
{
  return SharingCircleWildAdvertisementKey.init(key:);
}

uint64_t sub_100165DC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100165E04 + 4 * byte_100E29990[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_100165E04()
{
  return 0x737574617473;
}

uint64_t sub_100165E18()
{
  return 0x654C636341616162;
}

uint64_t sub_100165E3C()
{
  return 0x6E49636341616162;
}

uint64_t sub_100165E5C()
{
  return 1684628325;
}

uint64_t sub_100165E6C()
{
  return 0x644970696863;
}

uint64_t sub_100165E80()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100165EA0()
{
  return 0x726F737365636361;
}

unint64_t sub_100165ED8()
{
  return 0xD000000000000013;
}

unint64_t sub_100165EF8()
{
  return 0xD000000000000011;
}

uint64_t sub_100165F14()
{
  return 0x69634572656E776FLL;
}

uint64_t sub_100165FA8()
{
  return 0x6449726F646E6576;
}

uint64_t sub_100165FC0(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  __int128 v31;
  _BYTE v32[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F11C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100169208();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys, &type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys, v11, v9, v10);
  v31 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 2);
    LOBYTE(v31) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v31, v5);
    v31 = *(__int128 *)((char *)v3 + 24);
    v30 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 40);
    v30 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 56);
    v30 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 72);
    v30 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 88);
    v30 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 104);
    v30 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 120);
    v30 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    sub_10016924C((uint64_t)v3 + 136, (uint64_t)v32);
    sub_10016924C((uint64_t)v32, (uint64_t)&v31);
    v30 = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v14 = *((_QWORD *)v3 + 19);
    v15 = *((_QWORD *)v3 + 20);
    LOBYTE(v31) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    v16 = *((_QWORD *)v3 + 21);
    v17 = *((_QWORD *)v3 + 22);
    LOBYTE(v31) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v31, v5);
    v18 = *((_QWORD *)v3 + 23);
    v19 = *((_QWORD *)v3 + 24);
    LOBYTE(v31) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    v20 = *((_QWORD *)v3 + 25);
    v21 = *((_QWORD *)v3 + 26);
    LOBYTE(v31) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v31, v5);
    v22 = *((_QWORD *)v3 + 27);
    v23 = *((_QWORD *)v3 + 28);
    LOBYTE(v31) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v31, v5);
    v24 = *((_QWORD *)v3 + 29);
    v25 = *((_QWORD *)v3 + 30);
    LOBYTE(v31) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v5);
    v26 = *((_QWORD *)v3 + 31);
    v27 = *((_QWORD *)v3 + 32);
    LOBYTE(v31) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v31, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001663F8()
{
  unsigned __int8 *v0;

  return sub_100165DC8(*v0);
}

uint64_t sub_100166400@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001694C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100166424(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_100166430(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100169208();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100166458(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100169208();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100166480(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[264];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_100165FC0(a1);
}

uint64_t sub_1001664D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  v7 = sub_100B27C18();
  if (!v8)
    goto LABEL_24;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  v14 = v10;
  v15 = (_QWORD *)*a5;
  v17 = sub_100518DA0(v7, v8);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      v24 = (_QWORD *)*a5;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_100A99D98();
      v24 = (_QWORD *)*a5;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    v26 = (uint64_t *)(v24[6] + 16 * v17);
    *v26 = v11;
    v26[1] = v12;
    v27 = (_QWORD *)(v24[7] + 16 * v17);
    *v27 = v13;
    v27[1] = v14;
    v28 = v24[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    v31 = sub_100B27C18();
    if (v32)
    {
      v35 = v31;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      do
      {
        v43 = (_QWORD *)*a5;
        v45 = sub_100518DA0(v35, v36);
        v46 = v43[2];
        v47 = (v44 & 1) == 0;
        v48 = v46 + v47;
        if (__OFADD__(v46, v47))
          goto LABEL_25;
        v49 = v44;
        if (v43[3] < v48)
        {
          sub_100A84DD4(v48, 1);
          v50 = sub_100518DA0(v35, v36);
          if ((v49 & 1) != (v51 & 1))
            goto LABEL_27;
          v45 = v50;
        }
        v52 = (_QWORD *)*a5;
        if ((v49 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v39 = (_QWORD *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease();
          *v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          v53 = (uint64_t *)(v52[6] + 16 * v45);
          *v53 = v35;
          v53[1] = v36;
          v54 = (_QWORD *)(v52[7] + 16 * v45);
          *v54 = v37;
          v54[1] = v38;
          v55 = v52[2];
          v29 = __OFADD__(v55, 1);
          v56 = v55 + 1;
          if (v29)
            goto LABEL_26;
          v52[2] = v56;
        }
        v35 = sub_100B27C18();
        v36 = v40;
        v37 = v41;
        v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007CC38(a1);
    return swift_release();
  }
  sub_100A84DD4(v20, a4 & 1);
  v22 = sub_100518DA0(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    v24 = (_QWORD *)*a5;
    if ((v21 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    v25 = (_QWORD *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease();
    *v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_QWORD *sub_1001667D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *result;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v26 = a1[17];
  v27 = a1[16];
  sub_10001BBBC(v27, v26);
  v6 = sub_100035530();
  v22 = DataProtocol.intValue.getter(&type metadata for Data, v6);
  v8 = a1[8];
  v7 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v11 = a1[12];
  v37 = a1[13];
  v12 = a1[14];
  v32 = a1[15];
  v39 = a1[20];
  v29 = a1[21];
  v35 = a1[24];
  v36 = a1[25];
  v30 = a1[5];
  v24 = *a1;
  v25 = a1[4];
  v38 = a1[1];
  v23 = a1[2];
  v40 = a1[3];
  v13 = a1[31];
  v28 = a1[30];
  v14 = a1[33];
  v31 = a1[32];
  v20 = a1[7];
  v21 = a1[6];
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v8, v7);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v11, v37);
  sub_10001BBBC(v12, v32);
  sub_10001BBBC(v39, v29);
  sub_10001BD08(v35, v36);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v40);
  if (v14 >> 60 != 15)
  {
    sub_10001BBBC(a2, a3);
    v16 = v14;
    v17 = sub_1001EDBAC(v31, v14);
    v19 = v18;
    Data.hexString.getter(v17, v18);
    sub_10001BC14(v17, v19);
    __asm { BR              X11 }
  }
  result = sub_1001687CC(a1);
  *a4 = v27;
  a4[1] = v26;
  a4[2] = v22;
  a4[3] = v21;
  a4[4] = v20;
  a4[5] = v8;
  a4[6] = v7;
  a4[7] = v9;
  a4[8] = v10;
  a4[9] = v11;
  a4[10] = v37;
  a4[11] = v12;
  a4[12] = v32;
  a4[13] = a2;
  a4[14] = a3;
  a4[15] = v39;
  a4[16] = v29;
  a4[17] = v35;
  a4[18] = v36;
  a4[19] = v25;
  a4[20] = v30;
  a4[21] = v24;
  a4[22] = v38;
  a4[23] = v23;
  a4[24] = v40;
  a4[25] = 0x302E302E31;
  a4[26] = 0xE500000000000000;
  a4[27] = v28;
  a4[28] = v13;
  a4[29] = 0;
  a4[30] = 0;
  a4[31] = 0;
  a4[32] = 0;
  return result;
}

uint64_t sub_100166B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[144] = a4;
  v4[143] = a3;
  v4[142] = a2;
  v4[141] = a1;
  v5 = type metadata accessor for HashAlgorithm(0);
  v4[145] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[146] = v6;
  v4[147] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v4[148] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[149] = v8;
  v4[150] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v4[151] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[152] = v10;
  v4[153] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100166BFC, 0, 0);
}

void sub_100166BFC()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  NSString v40;
  unsigned int v41;
  uint64_t *v42;
  void *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __n128 v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (__cdecl *v59)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v6 = v0[153];
  v7 = v0[152];
  v8 = v0[151];
  v56 = v0[150];
  v57 = v0[149];
  v58 = v0[148];
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v11 = v10;

  v12 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
  v13 = v1;
  v14 = swift_bridgeObjectRelease();
  v15 = Date.init()(v14);
  v16 = Date.epoch.getter(v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[138] = v16;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v19 = v18;
  v20 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v17, v19, 0xD000000000000015, 0x8000000100ECA2E0, v20);
  swift_bridgeObjectRelease();
  v0[137] = 1;
  v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v23 = v22;
  v24 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v21, v23, 0xD000000000000013, 0x8000000100ECA300, v24);
  v25 = v13;
  swift_bridgeObjectRelease();
  v26 = sub_100AC2EB8();
  v28 = v27;
  v29 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28((uint64_t)v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  v30 = swift_bridgeObjectRelease();
  v31 = static Locale.current.getter(v30);
  v32 = Locale.acceptLanguageCode.getter(v31);
  v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
  v35 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28(v32, v34, 0x4C2D747065636341, 0xEF65676175676E61, v35);
  v36 = v25;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  if (v39)
  {
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v37, "BOOLForKey:", v40);

    v43 = v0 + 68;
    v42 = v0 + 2;
    if (v41)
    {
      v44 = swift_isUniquelyReferenced_nonNull_native(v36);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v44);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v43 = v0 + 68;
    v42 = v0 + 2;
  }
  v0[154] = v36;
  v45 = v0[143];
  v46 = v0[142];
  v47 = (uint64_t *)v0[141];
  sub_10016837C(v47);
  sub_10001BBBC(v46, v45);
  sub_1001667D8(v47, v46, v45, v42);
  v48 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  JSONEncoder.init()(v49);
  memcpy(v43, v42, 0x108uLL);
  v50 = sub_1001684F4();
  v51 = dispatch thunk of JSONEncoder.encode<A>(_:)(v43, &type metadata for AirPodsLEPairingLockAckRequestContent, v50);
  v0[155] = v51;
  v0[156] = v52;
  v53 = v51;
  v54 = v52;
  swift_release();
  sub_10001BBBC(v53, v54);
  v59 = (void (__cdecl *)())((char *)&dword_101115370 + dword_101115370);
  v55 = (_QWORD *)swift_task_alloc(unk_101115374);
  v0[157] = v55;
  *v55 = v0;
  v55[1] = sub_10016738C;
  v59();
}

uint64_t sub_10016738C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1256);
  *(_QWORD *)(v3 + 1264) = a1;
  *(_QWORD *)(v3 + 1272) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1001673EC, 0, 0);
}

uint64_t sub_1001673EC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[159];
  v2 = v0[158];
  v3 = v0[156];
  v4 = v0[155];
  v5 = v0[147];
  v6 = v0[146];
  v7 = v0[145];
  v0[134] = v2;
  v0[135] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[134];
  v0[160] = v8;
  v9 = v0[135];
  v0[161] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[162] = v10;
  v0[163] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115368 + dword_101115368;
  v13 = (_QWORD *)swift_task_alloc(unk_10111536C);
  v0[164] = v13;
  *v13 = v0;
  v13[1] = sub_10016752C;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[144]);
}

uint64_t sub_10016752C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1312);
  *(_QWORD *)(*(_QWORD *)v2 + 1320) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100167BE8;
  }
  else
  {
    v7 = v4[163];
    v8 = v4[162];
    v4[166] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_1001675AC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001675AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t i;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *__dst;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  _QWORD *v61;
  uint64_t v62[2];

  v1 = *(_QWORD *)(v0 + 1328);
  v2 = *(_QWORD *)(v0 + 1320);
  v3 = *(_QWORD *)(v0 + 1232);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v62[0] = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, v62);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 1288);
  v7 = *(_QWORD *)(v0 + 1280);
  v56 = v62[0];
  swift_bridgeObjectRelease();
  sub_10001BC14(v7, v6);
  if (qword_1010EA328 != -1)
LABEL_35:
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v54 = (uint64_t *)(v0 + 16);
  v55 = (_QWORD *)v0;
  __dst = (void *)(v0 + 280);
  v53 = v0 + 1112;
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
  v0 = Logger.logObject.getter(v9);
  v10 = static os_log_type_t.debug.getter(v0);
  if (os_log_type_enabled((os_log_t)v0, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v10, "Pairing lock header:", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = v56;
  v57 = v56 + 64;
  v13 = -1;
  v14 = -1 << *(_BYTE *)(v56 + 32);
  if (-v14 < 64)
    v13 = ~(-1 << -(char)v14);
  v15 = v13 & *(_QWORD *)(v56 + 64);
  v58 = (unint64_t)(63 - v14) >> 6;
  swift_bridgeObjectRetain(v56);
  for (i = 0; ; i = v60)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v60 = i;
      v18 = v17 | (i << 6);
      goto LABEL_27;
    }
    v19 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v0 = (uint64_t)v55;
    if (v19 >= v58)
      goto LABEL_29;
    v20 = *(_QWORD *)(v57 + 8 * v19);
    v21 = i + 1;
    if (!v20)
    {
      v21 = i + 2;
      if (i + 2 >= v58)
        goto LABEL_29;
      v20 = *(_QWORD *)(v57 + 8 * v21);
      if (!v20)
      {
        v21 = i + 3;
        if (i + 3 >= v58)
          goto LABEL_29;
        v20 = *(_QWORD *)(v57 + 8 * v21);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v15 = (v20 - 1) & v20;
    v60 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_27:
    v23 = 16 * v18;
    v24 = (uint64_t *)(*(_QWORD *)(v12 + 48) + v23);
    v26 = *v24;
    v25 = v24[1];
    v27 = (uint64_t *)(*(_QWORD *)(v12 + 56) + v23);
    v29 = *v27;
    v28 = v27[1];
    swift_bridgeObjectRetain_n(v25, 2);
    swift_bridgeObjectRetain_n(v28, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v0 = swift_slowAlloc(64, -1);
      v62[0] = v0;
      *(_DWORD *)v33 = 136315394;
      swift_bridgeObjectRetain(v25);
      *(_QWORD *)(v33 + 4) = sub_100016940(v26, v25, v62);
      swift_bridgeObjectRelease_n(v25, 3);
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)(v33 + 14) = sub_100016940(v29, v28, v62);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v0, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v0, -1, -1);
      v34 = v33;
      v12 = v56;
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v25, 2);
      swift_bridgeObjectRelease_n(v28, 2);
    }

  }
  v22 = i + 4;
  if (i + 4 < v58)
  {
    v20 = *(_QWORD *)(v57 + 8 * v22);
    if (!v20)
    {
      while (1)
      {
        v21 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_34;
        if (v21 >= v58)
          goto LABEL_29;
        v20 = *(_QWORD *)(v57 + 8 * v21);
        ++v22;
        if (v20)
          goto LABEL_26;
      }
    }
    v21 = i + 4;
    goto LABEL_26;
  }
LABEL_29:
  swift_release();
  sub_100168538(v54);
  v35 = sub_100168538(v54);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  v38 = os_log_type_enabled(v36, v37);
  v39 = v55[156];
  v40 = v55[155];
  v41 = v55[143];
  v42 = v55[142];
  v43 = (_QWORD *)v55[141];
  if (v38)
  {
    v61 = (_QWORD *)v55[141];
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = v40;
    v45 = swift_slowAlloc(32, -1);
    v62[0] = v45;
    *(_DWORD *)v44 = 136315138;
    v0 = (uint64_t)v55;
    memcpy(__dst, v54, 0x108uLL);
    sub_100168538(v54);
    v46 = String.init<A>(describing:)(__dst, &type metadata for AirPodsLEPairingLockAckRequestContent);
    v55[139] = sub_100016940(v46, v47, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v55 + 140, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease();
    sub_100168684(v54);
    sub_100168684(v54);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Pairing ack body %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
    swift_release();
    sub_10001BC14(v42, v41);
    sub_1001687CC(v61);

    sub_10001BC14(v59, v39);
    sub_100168684(v54);
  }
  else
  {
    sub_100168684(v54);
    sub_10001BC14(v40, v39);
    sub_100168684(v54);
    sub_100168684(v54);
    swift_release();
    sub_10001BC14(v42, v41);
    sub_1001687CC(v43);

  }
  v48 = *(_QWORD *)(v0 + 1248);
  v49 = *(_QWORD *)(v0 + 1240);
  v50 = *(_QWORD *)(v0 + 1200);
  v51 = *(_QWORD *)(v0 + 1176);
  swift_task_dealloc(*(_QWORD *)(v0 + 1224));
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v56, v49, v48);
}

uint64_t sub_100167BE8()
{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  NSObject *v47;
  os_log_type_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v64;
  void *__dst;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v1 = v0;
  v67 = v0 + 140;
  v2 = v0[163];
  v3 = v0[162];
  v4 = v0[161];
  v5 = v0[160];
  sub_10001BC14(v3, v2);
  sub_10001BC14(v5, v4);
  v6 = (unint64_t)&qword_1010EA000;
  if (qword_1010EA328 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_2:
    v7 = v1[165];
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
    swift_errorRetain(v7);
    v9 = swift_errorRetain(v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = v1[165];
    if (v12)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      swift_errorRetain(v13);
      v16 = _swift_stdlib_bridgeErrorToNSError(v13);
      v1[140] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v67, v1 + 141, v14 + 4, v14 + 12);
      *v15 = v16;
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to generate attestation header: %{public}@.", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      v18 = v14;
      v6 = 0x1010EA000;
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      swift_errorRelease(v1[165]);
      swift_errorRelease(v13);
      swift_errorRelease(v13);

    }
    v19 = v1[154];
    if (*(_QWORD *)(v6 + 808) != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v68 = v1;
    __dst = v1 + 35;
    v66 = v1 + 2;
    v73 = sub_10001A9E8(v8, (uint64_t)qword_1011B7E28);
    v20 = Logger.logObject.getter(v73);
    v21 = static os_log_type_t.debug.getter(v20);
    v69 = v19;
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Pairing lock header:", v22, 2u);
      v23 = v22;
      v19 = v69;
      swift_slowDealloc(v23, -1, -1);
    }
    v64 = v1 + 139;

    v70 = v19 + 64;
    v24 = -1;
    v25 = -1 << *(_BYTE *)(v19 + 32);
    if (-v25 < 64)
      v24 = ~(-1 << -(char)v25);
    v6 = v24 & *(_QWORD *)(v19 + 64);
    v71 = (unint64_t)(63 - v25) >> 6;
    swift_bridgeObjectRetain(v19);
    v1 = 0;
    while (v6)
    {
      while (1)
      {
        v26 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v27 = v26 | ((_QWORD)v1 << 6);
LABEL_29:
        v31 = 16 * v27;
        v32 = (uint64_t *)(*(_QWORD *)(v19 + 48) + v31);
        v34 = *v32;
        v33 = v32[1];
        v35 = (uint64_t *)(*(_QWORD *)(v19 + 56) + v31);
        v37 = *v35;
        v36 = v35[1];
        swift_bridgeObjectRetain_n(v33, 2);
        swift_bridgeObjectRetain_n(v36, 2);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.debug.getter(v39);
        if (os_log_type_enabled(v39, v40))
          break;
        swift_bridgeObjectRelease_n(v33, 2);
        swift_bridgeObjectRelease_n(v36, 2);

        if (!v6)
          goto LABEL_15;
      }
      v41 = swift_slowAlloc(22, -1);
      v42 = v1;
      v43 = swift_slowAlloc(64, -1);
      v75 = v43;
      *(_DWORD *)v41 = 136315394;
      swift_bridgeObjectRetain(v33);
      *(_QWORD *)(v41 + 4) = sub_100016940(v34, v33, &v75);
      swift_bridgeObjectRelease_n(v33, 3);
      *(_WORD *)(v41 + 12) = 2080;
      swift_bridgeObjectRetain(v36);
      *(_QWORD *)(v41 + 14) = sub_100016940(v37, v36, &v75);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      v44 = v43;
      v1 = v42;
      swift_slowDealloc(v44, -1, -1);
      v45 = v41;
      v19 = v69;
      swift_slowDealloc(v45, -1, -1);

    }
LABEL_15:
    v28 = (int64_t)v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v28 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * v28);
    v1 = (uint64_t *)((char *)v1 + 1);
    if (v29)
      goto LABEL_28;
    v1 = (uint64_t *)(v28 + 1);
    if (v28 + 1 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * (_QWORD)v1);
    if (v29)
      goto LABEL_28;
    v1 = (uint64_t *)(v28 + 2);
    if (v28 + 2 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * (_QWORD)v1);
    if (v29)
      goto LABEL_28;
    v30 = v28 + 3;
    if (v30 >= v71)
      break;
    v29 = *(_QWORD *)(v70 + 8 * v30);
    if (v29)
    {
      v1 = (uint64_t *)v30;
LABEL_28:
      v6 = (v29 - 1) & v29;
      v27 = __clz(__rbit64(v29)) + ((_QWORD)v1 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      v1 = (uint64_t *)(v30 + 1);
      if (__OFADD__(v30, 1))
        break;
      if ((uint64_t)v1 >= v71)
        goto LABEL_32;
      v29 = *(_QWORD *)(v70 + 8 * (_QWORD)v1);
      ++v30;
      if (v29)
        goto LABEL_28;
    }
LABEL_37:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_100168538(v66);
  v46 = sub_100168538(v66);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.debug.getter(v47);
  v49 = os_log_type_enabled(v47, v48);
  v50 = v68[156];
  v51 = v68[155];
  v52 = v68[143];
  v53 = v68[142];
  v54 = (_QWORD *)v68[141];
  if (v49)
  {
    v74 = v68[156];
    v72 = v68[155];
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v75 = v56;
    *(_DWORD *)v55 = 136315138;
    memcpy(__dst, v66, 0x108uLL);
    sub_100168538(v66);
    v57 = String.init<A>(describing:)(__dst, &type metadata for AirPodsLEPairingLockAckRequestContent);
    *v64 = sub_100016940(v57, v58, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v67, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease();
    sub_100168684(v66);
    sub_100168684(v66);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Pairing ack body %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);
    swift_release();
    sub_10001BC14(v53, v52);
    sub_1001687CC(v54);

    sub_10001BC14(v72, v74);
    sub_100168684(v66);
  }
  else
  {
    sub_100168684(v66);
    sub_10001BC14(v51, v50);
    sub_100168684(v66);
    sub_100168684(v66);
    swift_release();
    sub_10001BC14(v53, v52);
    sub_1001687CC(v54);

  }
  v59 = v68[156];
  v60 = v68[155];
  v61 = v68[150];
  v62 = v68[147];
  swift_task_dealloc(v68[153]);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v68[1])(v69, v60, v59);
}

_QWORD *sub_10016837C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  v7 = a1[8];
  v6 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[15];
  v14 = a1[14];
  v15 = a1[17];
  v16 = a1[16];
  v17 = a1[19];
  v18 = a1[18];
  v19 = a1[21];
  v20 = a1[20];
  v21 = a1[23];
  v22 = a1[22];
  v23 = a1[25];
  v26 = a1[26];
  v24 = a1[24];
  v25 = a1[27];
  v28 = a1[28];
  v27 = a1[29];
  v31 = a1[32];
  v29 = a1[31];
  v30 = a1[33];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v7, v6);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v22, v21);
  sub_10001BD08(v24, v23);
  sub_10001BBBC(v26, v25);
  sub_10001BBBC(v28, v27);
  swift_bridgeObjectRetain(v29);
  sub_10001BD08(v31, v30);
  return a1;
}

unint64_t sub_1001684F4()
{
  unint64_t result;

  result = qword_1010F11B8;
  if (!qword_1010F11B8)
  {
    result = swift_getWitnessTable(&unk_100E29A10, &type metadata for AirPodsLEPairingLockAckRequestContent);
    atomic_store(result, (unint64_t *)&qword_1010F11B8);
  }
  return result;
}

uint64_t *sub_100168538(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v14 = a1[13];
  v12 = a1[12];
  v13 = a1[14];
  v16 = a1[16];
  v17 = a1[15];
  v18 = a1[18];
  v19 = a1[17];
  v20 = a1[20];
  v21 = a1[22];
  v22 = a1[24];
  v23 = a1[26];
  v24 = a1[28];
  v25 = a1[30];
  v15 = a1[32];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v17, v16);
  sub_10001BD08(v19, v18);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t *sub_100168684(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[14];
  v14 = a1[13];
  v15 = a1[16];
  v17 = a1[18];
  v18 = a1[17];
  v16 = a1[15];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v9);
  sub_10001BC14(v10, v12);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001EF3C(v18, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1001687CC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v10 = a1[13];
  v11 = a1[15];
  v12 = a1[14];
  v13 = a1[17];
  v14 = a1[16];
  v15 = a1[19];
  v16 = a1[18];
  v17 = a1[21];
  v18 = a1[20];
  v19 = a1[23];
  v20 = a1[22];
  v21 = a1[25];
  v24 = a1[26];
  v22 = a1[24];
  v23 = a1[27];
  v26 = a1[28];
  v25 = a1[29];
  v28 = a1[32];
  v27 = a1[33];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v10);
  sub_10001BC14(v12, v11);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  sub_10001EF3C(v22, v21);
  sub_10001BC14(v24, v23);
  sub_10001BC14(v26, v25);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v28, v27);
  return a1;
}

uint64_t destroy for AirPodsLEPairingLockAckRequestContent(uint64_t *a1)
{
  unint64_t v2;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[3], a1[4]);
  sub_10001BC14(a1[5], a1[6]);
  sub_10001BC14(a1[7], a1[8]);
  sub_10001BC14(a1[9], a1[10]);
  sub_10001BC14(a1[11], a1[12]);
  sub_10001BC14(a1[13], a1[14]);
  sub_10001BC14(a1[15], a1[16]);
  v2 = a1[18];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[17], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AirPodsLEPairingLockAckRequestContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  v7 = a2[4];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = a2[5];
  v9 = a2[6];
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[7];
  v11 = a2[8];
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = a2[9];
  v13 = a2[10];
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  v14 = a2[11];
  v15 = a2[12];
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  v16 = a2[13];
  v17 = a2[14];
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v17;
  v18 = a2[15];
  v19 = a2[16];
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v19;
  v20 = a2 + 17;
  v21 = a2[18];
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 136) = *(_OWORD *)v20;
  }
  else
  {
    v22 = *v20;
    sub_10001BBBC(*v20, a2[18]);
    *(_QWORD *)(a1 + 136) = v22;
    *(_QWORD *)(a1 + 144) = v21;
  }
  v23 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v23;
  v24 = a2[22];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = v24;
  v25 = a2[24];
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_QWORD *)(a1 + 192) = v25;
  v26 = a2[26];
  *(_QWORD *)(a1 + 200) = a2[25];
  *(_QWORD *)(a1 + 208) = v26;
  v27 = a2[28];
  *(_QWORD *)(a1 + 216) = a2[27];
  *(_QWORD *)(a1 + 224) = v27;
  v28 = a2[30];
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = v28;
  v29 = a2[31];
  v30 = a2[32];
  *(_QWORD *)(a1 + 248) = v29;
  *(_QWORD *)(a1 + 256) = v30;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  sub_10001BBBC(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[5];
  v13 = a2[6];
  sub_10001BBBC(v12, v13);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[7];
  v17 = a2[8];
  sub_10001BBBC(v16, v17);
  v18 = a1[7];
  v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[9];
  v21 = a2[10];
  sub_10001BBBC(v20, v21);
  v22 = a1[9];
  v23 = a1[10];
  a1[9] = v20;
  a1[10] = v21;
  sub_10001BC14(v22, v23);
  v24 = a2[11];
  v25 = a2[12];
  sub_10001BBBC(v24, v25);
  v26 = a1[11];
  v27 = a1[12];
  a1[11] = v24;
  a1[12] = v25;
  sub_10001BC14(v26, v27);
  v28 = a2[13];
  v29 = a2[14];
  sub_10001BBBC(v28, v29);
  v30 = a1[13];
  v31 = a1[14];
  a1[13] = v28;
  a1[14] = v29;
  sub_10001BC14(v30, v31);
  v32 = a2[15];
  v33 = a2[16];
  sub_10001BBBC(v32, v33);
  v34 = a1[15];
  v35 = a1[16];
  a1[15] = v32;
  a1[16] = v33;
  sub_10001BC14(v34, v35);
  v36 = a2 + 17;
  v37 = a2[18];
  if ((unint64_t)a1[18] >> 60 != 15)
  {
    if (v37 >> 60 != 15)
    {
      v39 = *v36;
      sub_10001BBBC(*v36, a2[18]);
      v40 = a1[17];
      v41 = a1[18];
      a1[17] = v39;
      a1[18] = v37;
      sub_10001BC14(v40, v41);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)(a1 + 17));
    goto LABEL_6;
  }
  if (v37 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 17) = *(_OWORD *)v36;
    goto LABEL_8;
  }
  v38 = *v36;
  sub_10001BBBC(*v36, a2[18]);
  a1[17] = v38;
  a1[18] = v37;
LABEL_8:
  a1[19] = a2[19];
  v42 = a2[20];
  a1[20] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  v43 = a2[22];
  a1[22] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  v44 = a2[24];
  a1[24] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease();
  a1[25] = a2[25];
  v45 = a2[26];
  a1[26] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  v46 = a2[28];
  a1[28] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  a1[29] = a2[29];
  v47 = a2[30];
  a1[30] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease();
  a1[31] = a2[31];
  v48 = a2[32];
  a1[32] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AirPodsLEPairingLockAckRequestContent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for AirPodsLEPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v6;
  sub_10001BC14(v7, v8);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001BC14(v9, v10);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_10001BC14(v11, v12);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001BC14(v13, v14);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10001BC14(v15, v16);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_10001BC14(v17, v18);
  v19 = *(_QWORD *)(a1 + 120);
  v20 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_10001BC14(v19, v20);
  v21 = (_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a1 + 144);
  if (v22 >> 60 != 15)
  {
    v23 = *(_QWORD *)(a2 + 144);
    if (v23 >> 60 != 15)
    {
      v24 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = *v21;
      *(_QWORD *)(a1 + 144) = v23;
      sub_10001BC14(v24, v22);
      goto LABEL_6;
    }
    sub_1000DC964(a1 + 136);
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)v21;
LABEL_6:
  v25 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v25;
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v30;
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v31;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingLockAckRequestContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 264))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 208);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 264) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 208) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 264) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockAckRequestContent()
{
  return &type metadata for AirPodsLEPairingLockAckRequestContent;
}

uint64_t destroy for AirPodsLEPairingLockAckRequest(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_10001BC14(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t *_s12searchpartyd30AirPodsLEPairingLockAckRequestVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEPairingLockAckRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v6 = a2[1];
  v5 = a2[2];
  sub_10001BBBC(v6, v5);
  v7 = a1[1];
  v8 = a1[2];
  a1[1] = v6;
  a1[2] = v5;
  sub_10001BC14(v7, v8);
  return a1;
}

__n128 initializeWithTake for MessagingDestination(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for AirPodsLEPairingLockAckRequest(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = a1[1];
  v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_10001BC14(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingLockAckRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingLockAckRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockAckRequest()
{
  return &type metadata for AirPodsLEPairingLockAckRequest;
}

unint64_t sub_100169208()
{
  unint64_t result;

  result = qword_1010F11C8;
  if (!qword_1010F11C8)
  {
    result = swift_getWitnessTable(&unk_100E29B54, &type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F11C8);
  }
  return result;
}

uint64_t sub_10016924C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1011194A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for BeaconSharingMessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingLockAckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_100169370 + 4 * byte_100E299A6[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1001693A4 + 4 * byte_100E299A1[v4]))();
}

uint64_t sub_1001693A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001693AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001693B4);
  return result;
}

uint64_t sub_1001693C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001693C8);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1001693CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001693D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_1001693F4()
{
  unint64_t result;

  result = qword_1010F11D0;
  if (!qword_1010F11D0)
  {
    result = swift_getWitnessTable(&unk_100E29B2C, &type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F11D0);
  }
  return result;
}

unint64_t sub_10016943C()
{
  unint64_t result;

  result = qword_1010F11D8;
  if (!qword_1010F11D8)
  {
    result = swift_getWitnessTable(&unk_100E29A9C, &type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F11D8);
  }
  return result;
}

unint64_t sub_100169484()
{
  unint64_t result;

  result = qword_1010F11E0;
  if (!qword_1010F11E0)
  {
    result = swift_getWitnessTable(&unk_100E29AC4, &type metadata for AirPodsLEPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F11E0);
  }
  return result;
}

uint64_t sub_1001694C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x654C636341616162 && a2 == 0xEE00747265436661)
  {
    v8 = 0xEE00747265436661;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654C636341616162, 0xEE00747265436661, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E49636341616162 && a2 == 0xEC00000031414374)
  {
    v9 = 0xEC00000031414374;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E49636341616162, 0xEC00000031414374, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v12 = 0xEC0000007265626DLL;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xEF74736574744179)
  {
    v13 = 0xEF74736574744179;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xEF74736574744179, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v14 = 0xED00006E67695379;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0xD000000000000013)
  {
    v15 = 0x8000000100EC3110;
    if (a2 == 0x8000000100EC3110)
      goto LABEL_61;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC3110, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0xD000000000000011)
  {
    v16 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v17 = 0xE900000000000064;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v18 = 0xEB00000000644970;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v19 = 0xEB000000006E6F69;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_84;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v20 = 0xEF6E6F6973726556;
LABEL_90:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_90;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v21 = 0xE900000000000064;
LABEL_96:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_96;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 16;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v22 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

ValueMetadata *type metadata accessor for SignalSource()
{
  return &type metadata for SignalSource;
}

uint64_t sub_100169C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100169CA0);
}

uint64_t sub_100169CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100169CB0);
}

uint64_t type metadata accessor for LegacySelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F12A8, (uint64_t)&nominal type descriptor for LegacySelfBeaconingKeyEnvelope);
}

uint64_t *sub_100169CCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t sub_100169D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_100169D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100169DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100169E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100169EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_100169F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100169F34);
}

uint64_t sub_100169F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100169FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100169FC0);
}

uint64_t sub_100169FC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F1338, (uint64_t)&nominal type descriptor for SelfBeaconingKeyEnvelope);
}

uint64_t sub_10016A050(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10016A0C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F13C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10016AAB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v19 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for LegacySelfBeaconingKeyEnvelope(0) + 20));
    v18 = 1;
    v14 = sub_10001A9A8(&qword_1010F1380);
    v15 = sub_10016AB38(&qword_1010F13C8, &qword_1010F13D0, (uint64_t)&protocol conformance descriptor for CryptoKeys, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016A258@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  v25 = a2;
  v29 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v26 = (_QWORD **)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A9A8(&qword_1010F1370);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_10016AAB0();
  v27 = v7;
  v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys, v13, v12, v11);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = a1;
  v30 = v5;
  v15 = (uint64_t)v10;
  v33 = 0;
  v16 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v26;
  v17 = v27;
  v19 = v28;
  v20 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v29, &v33, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v15, v18, v20);
  v21 = sub_10001A9A8(&qword_1010F1380);
  v32 = 1;
  v22 = sub_10016AB38(&qword_1010F1388, &qword_1010F1390, (uint64_t)&protocol conformance descriptor for CryptoKeys, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v21, &v32, v19, v21, v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v19);
  *(_QWORD *)(v15 + *(int *)(v8 + 20)) = v31;
  sub_10005972C(v15, v25, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  return sub_1000126B0(v15, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
}

uint64_t sub_10016A514(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F13D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10016AAF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SelfBeaconingKeyEnvelope.CodingKeys, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v19 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for SelfBeaconingKeyEnvelope(0) + 20));
    v18 = 1;
    v14 = sub_10001A9A8(&qword_1010F13A8);
    v15 = sub_10016ABBC(&qword_1010F13E0, &qword_1010F13E8, (uint64_t)&unk_100E58F90, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016A6A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  v25 = a2;
  v29 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v26 = (_QWORD **)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A9A8(&qword_1010F1398);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_10016AAF4();
  v27 = v7;
  v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SelfBeaconingKeyEnvelope.CodingKeys, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys, v13, v12, v11);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = a1;
  v30 = v5;
  v15 = (uint64_t)v10;
  v33 = 0;
  v16 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v26;
  v17 = v27;
  v19 = v28;
  v20 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v29, &v33, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v15, v18, v20);
  v21 = sub_10001A9A8(&qword_1010F13A8);
  v32 = 1;
  v22 = sub_10016ABBC(&qword_1010F13B0, &qword_1010F13B8, (uint64_t)&unk_100E58FB8, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v21, &v32, v19, v21, v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v19);
  *(_QWORD *)(v15 + *(int *)(v8 + 20)) = v31;
  sub_10005972C(v15, v25, type metadata accessor for SelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  return sub_1000126B0(v15, type metadata accessor for SelfBeaconingKeyEnvelope);
}

uint64_t sub_10016A964(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016AAB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016A98C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016AAB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016A9B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016A258(a1, a2);
}

uint64_t sub_10016A9C8(_QWORD *a1)
{
  return sub_10016A0C4(a1);
}

uint64_t sub_10016A9DC()
{
  _BYTE *v0;

  if (*v0)
    return 1937335659;
  else
    return 0xD000000000000010;
}

uint64_t sub_10016AA14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10016AED4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016AA38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016AAF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016AA60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016AAF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016AA88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016A6A8(a1, a2);
}

uint64_t sub_10016AA9C(_QWORD *a1)
{
  return sub_10016A514(a1);
}

unint64_t sub_10016AAB0()
{
  unint64_t result;

  result = qword_1010F1378;
  if (!qword_1010F1378)
  {
    result = swift_getWitnessTable(&unk_100E29E88, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1378);
  }
  return result;
}

unint64_t sub_10016AAF4()
{
  unint64_t result;

  result = qword_1010F13A0;
  if (!qword_1010F13A0)
  {
    result = swift_getWitnessTable(&unk_100E29E38, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F13A0);
  }
  return result;
}

uint64_t sub_10016AB38(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F1380);
    v10 = sub_100006204(a2, type metadata accessor for CryptoKeys, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016ABBC(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F13A8);
    v10 = sub_100006204(a2, type metadata accessor for FamilyCryptoKeysV1, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for SelfBeaconingKeyEnvelope.CodingKeys;
}

uint64_t _s12searchpartyd24SelfBeaconingKeyEnvelopeV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10016ACA4 + 4 * byte_100E29BD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10016ACD8 + 4 * byte_100E29BD0[v4]))();
}

uint64_t sub_10016ACD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016ACE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016ACE8);
  return result;
}

uint64_t sub_10016ACF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016ACFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10016AD00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016AD08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacySelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys;
}

unint64_t sub_10016AD28()
{
  unint64_t result;

  result = qword_1010F13F0;
  if (!qword_1010F13F0)
  {
    result = swift_getWitnessTable(&unk_100E29D58, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F13F0);
  }
  return result;
}

unint64_t sub_10016AD70()
{
  unint64_t result;

  result = qword_1010F13F8;
  if (!qword_1010F13F8)
  {
    result = swift_getWitnessTable(&unk_100E29E10, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F13F8);
  }
  return result;
}

unint64_t sub_10016ADB8()
{
  unint64_t result;

  result = qword_1010F1400;
  if (!qword_1010F1400)
  {
    result = swift_getWitnessTable(&unk_100E29D80, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1400);
  }
  return result;
}

unint64_t sub_10016AE00()
{
  unint64_t result;

  result = qword_1010F1408;
  if (!qword_1010F1408)
  {
    result = swift_getWitnessTable(&unk_100E29DA8, &type metadata for SelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1408);
  }
  return result;
}

unint64_t sub_10016AE48()
{
  unint64_t result;

  result = qword_1010F1410;
  if (!qword_1010F1410)
  {
    result = swift_getWitnessTable(&unk_100E29CC8, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1410);
  }
  return result;
}

unint64_t sub_10016AE90()
{
  unint64_t result;

  result = qword_1010F1418;
  if (!qword_1010F1418)
  {
    result = swift_getWitnessTable(&unk_100E29CF0, &type metadata for LegacySelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1418);
  }
  return result;
}

uint64_t sub_10016AED4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1937335659, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_10016AFC0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  Class isa;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  void *v36;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_10001A9A8(&qword_1010F1580);
    v9 = sub_1000193A4(&qword_1010F1588, &qword_1010F1580, (const char *)&protocol conformance descriptor for XPCSession<A>);
    v10 = Set.Iterator.init(_cocoa:)(v35, v7, v8, v9);
    v5 = v35[0];
    v33 = v35[1];
    v11 = v35[2];
    v12 = v35[3];
    v13 = v35[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v32 = (unint64_t)(v11 + 64) >> 6;
  while (v5 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(v10);
    if (!v21)
      goto LABEL_39;
    v22 = v21;
    v34 = v21;
    swift_unknownObjectRetain(v21);
    v23 = sub_10001A9A8(&qword_1010F1580);
    swift_dynamicCast(&v36, &v34, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v24 = v36;
    swift_unknownObjectRelease(v22);
    v20 = v12;
    v18 = v13;
    if (!v24)
      goto LABEL_39;
LABEL_35:
    XPCSession.proxy.getter(&v36);
    v29 = v36;
    if (v36)
    {
      v30 = *a2;
      sub_10016C94C();
      swift_bridgeObjectRetain(v30);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v29, "receivedUpdatedLocations:", isa);

      swift_unknownObjectRelease(v29);
      if (__OFADD__(*a3, 1))
      {
        __break(1u);
LABEL_39:
        sub_10007CC38(v5);
        return;
      }
      ++*a3;
    }
    v10 = (_QWORD *)swift_release();
    v12 = v20;
    v13 = v18;
  }
  if (v13)
  {
    v18 = (v13 - 1) & v13;
    v19 = __clz(__rbit64(v13)) | (v12 << 6);
    v20 = v12;
LABEL_34:
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    swift_retain();
    if (!v28)
      goto LABEL_39;
    goto LABEL_35;
  }
  v25 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v25 >= v32)
      goto LABEL_39;
    v26 = *(_QWORD *)(v33 + 8 * v25);
    v20 = v12 + 1;
    if (!v26)
    {
      v20 = v12 + 2;
      if (v12 + 2 >= v32)
        goto LABEL_39;
      v26 = *(_QWORD *)(v33 + 8 * v20);
      if (!v26)
      {
        v20 = v12 + 3;
        if (v12 + 3 >= v32)
          goto LABEL_39;
        v26 = *(_QWORD *)(v33 + 8 * v20);
        if (!v26)
        {
          v20 = v12 + 4;
          if (v12 + 4 >= v32)
            goto LABEL_39;
          v26 = *(_QWORD *)(v33 + 8 * v20);
          if (!v26)
          {
            v20 = v12 + 5;
            if (v12 + 5 >= v32)
              goto LABEL_39;
            v26 = *(_QWORD *)(v33 + 8 * v20);
            if (!v26)
            {
              v27 = v12 + 6;
              while (v32 != v27)
              {
                v26 = *(_QWORD *)(v33 + 8 * v27++);
                if (v26)
                {
                  v20 = v27 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_33:
    v18 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v20 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

_QWORD *sub_10016B2F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  id v33;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_10001A9A8(&qword_1010F1580);
    v9 = sub_1000193A4(&qword_1010F1588, &qword_1010F1580, (const char *)&protocol conformance descriptor for XPCSession<A>);
    result = Set.Iterator.init(_cocoa:)(v32, v7, v8, v9);
    v5 = v32[0];
    v30 = v32[1];
    v11 = v32[2];
    v12 = v32[3];
    v13 = v32[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v29 = (unint64_t)(v11 + 64) >> 6;
  while (v5 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(result);
    if (!v21)
      return (_QWORD *)sub_10007CC38(v5);
    v22 = v21;
    v31 = v21;
    swift_unknownObjectRetain(v21);
    v23 = sub_10001A9A8(&qword_1010F1580);
    swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v24 = v33;
    swift_unknownObjectRelease(v22);
    v20 = v12;
    v18 = v13;
    if (!v24)
      return (_QWORD *)sub_10007CC38(v5);
LABEL_35:
    XPCSession.proxy.getter(&v33);
    v28 = v33;
    if (v33)
    {
      objc_msgSend(v33, "stewieServiceStateChanged:", a2);
      swift_unknownObjectRelease(v28);
      if (__OFADD__(*a3, 1))
      {
        __break(1u);
        return (_QWORD *)sub_10007CC38(v5);
      }
      ++*a3;
    }
    result = (_QWORD *)swift_release(v24);
    v12 = v20;
    v13 = v18;
  }
  if (v13)
  {
    v18 = (v13 - 1) & v13;
    v19 = __clz(__rbit64(v13)) | (v12 << 6);
    v20 = v12;
LABEL_34:
    v24 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    swift_retain(v24);
    if (!v24)
      return (_QWORD *)sub_10007CC38(v5);
    goto LABEL_35;
  }
  v25 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v25 >= v29)
      return (_QWORD *)sub_10007CC38(v5);
    v26 = *(_QWORD *)(v30 + 8 * v25);
    v20 = v12 + 1;
    if (!v26)
    {
      v20 = v12 + 2;
      if (v12 + 2 >= v29)
        return (_QWORD *)sub_10007CC38(v5);
      v26 = *(_QWORD *)(v30 + 8 * v20);
      if (!v26)
      {
        v20 = v12 + 3;
        if (v12 + 3 >= v29)
          return (_QWORD *)sub_10007CC38(v5);
        v26 = *(_QWORD *)(v30 + 8 * v20);
        if (!v26)
        {
          v20 = v12 + 4;
          if (v12 + 4 >= v29)
            return (_QWORD *)sub_10007CC38(v5);
          v26 = *(_QWORD *)(v30 + 8 * v20);
          if (!v26)
          {
            v20 = v12 + 5;
            if (v12 + 5 >= v29)
              return (_QWORD *)sub_10007CC38(v5);
            v26 = *(_QWORD *)(v30 + 8 * v20);
            if (!v26)
            {
              v27 = v12 + 6;
              while (v29 != v27)
              {
                v26 = *(_QWORD *)(v30 + 8 * v27++);
                if (v26)
                {
                  v20 = v27 - 1;
                  goto LABEL_33;
                }
              }
              return (_QWORD *)sub_10007CC38(v5);
            }
          }
        }
      }
    }
LABEL_33:
    v18 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v20 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t sub_10016B5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];
  _QWORD *v27;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a2 + 16);
  v16 = (_QWORD *)swift_allocObject(&unk_10105B378, 56, 7);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a4;
  v16[6] = a5;
  aBlock[4] = sub_10016C880;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105B390;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a5);
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release();
}

void sub_10016B820(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, __n128), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void (*v62)(_QWORD, __n128);
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  void *v77;
  void **v78;
  void **aBlock;
  _QWORD v80[5];
  uint64_t v81;
  char v82[32];

  v72 = type metadata accessor for DispatchWorkItemFlags(0);
  v71 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v70 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SecureLocation(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = (_QWORD *)(a2 + 32);
  swift_beginAccess(a2 + 32, v82, 0, 0);
  v16 = *(_QWORD *)(a2 + 32);
  if ((v16 & 0xC000000000000001) != 0)
  {
    if (v16 < 0)
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v18 = __CocoaSet.count.getter(v17);
    swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_6;
  }
  else if (*(_QWORD *)(v16 + 16))
  {
LABEL_6:
    v64 = a4;
    v81 = (uint64_t)_swiftEmptyArrayStorage;
    v19 = *(_QWORD *)(a5 + 16);
    if (v19)
    {
      v62 = a3;
      v63 = a1;
      v20 = a5 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v66 = *(_QWORD *)(v13 + 72);
      v61 = a5;
      swift_bridgeObjectRetain(a5);
      v21 = v72;
      do
      {
        v74 = v19;
        sub_10016C890(v20, (uint64_t)v15);
        v22 = sub_100AA6310();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
        v24 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v23 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v24 >= v23 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
        specialized Array._endMutation()(v25);
        if (qword_1010EA428 != -1)
          swift_once(&qword_1010EA428, sub_100C48554);
        v26 = qword_1011B7F60;
        v27 = *v15;
        v28 = v15[1];
        v73 = *(_QWORD *)(qword_1011B7F60 + 16);
        v29 = swift_allocObject(&unk_10105B3C8, 41, 7);
        *(_QWORD *)(v29 + 16) = v26;
        *(_QWORD *)(v29 + 24) = v27;
        *(_QWORD *)(v29 + 32) = v28;
        *(_BYTE *)(v29 + 40) = 1;
        v80[3] = sub_10016C900;
        v80[4] = v29;
        aBlock = _NSConcreteStackBlock;
        v80[0] = 1107296256;
        v80[1] = sub_100016FB8;
        v80[2] = &unk_10105B3E0;
        v30 = _Block_copy(&aBlock);
        swift_retain_n(v26, 2);
        swift_bridgeObjectRetain_n(v28, 2);
        v31 = v67;
        static DispatchQoS.unspecified.getter(v32);
        v75[0] = _swiftEmptyArrayStorage;
        v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v36 = (uint64_t)v15;
        v37 = v70;
        dispatch thunk of SetAlgebra.init<A>(_:)(v75, v34, v35, v21, v33);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v37, v30);
        _Block_release(v30);
        v38 = v37;
        v15 = (uint64_t *)v36;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v21);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v31, v69);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_10016C910(v36);
        v20 += v66;
        v19 = v74 - 1;
      }
      while (v74 != 1);
      swift_bridgeObjectRelease();
      a3 = v62;
    }
    v78 = 0;
    swift_bridgeObjectRetain(*v65);
    sub_10016AFC0(v39, &v81, &v78);
    swift_bridgeObjectRelease();
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v40 = type metadata accessor for Logger(0);
    v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B7A18);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v44 = 134217984;
      swift_beginAccess(&v78, v75, 0, 0);
      aBlock = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v80, v44 + 4, v44 + 12);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "SecureLocationsClientSession - sent to %ld clients.", v44, 0xCu);
      swift_slowDealloc(v44, -1, -1);
    }

    v45 = swift_beginAccess(&v78, &aBlock, 0, 0);
    if (v78)
    {
      a3(0, v45);
    }
    else
    {
      type metadata accessor for SecureLocationsError(0);
      v57 = v56;
      v76 = 8;
      v58 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v59 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(&v77, &v76, v58, v57, v59);
      v60 = v77;
      ((void (*)(void *))a3)(v77);

    }
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v46 = type metadata accessor for Logger(0);
  v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B7A18);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "SecureLocationsClientSession - receivedUpdatedLocations but no client sessions", v50, 2u);
    swift_slowDealloc(v50, -1, -1);
  }

  type metadata accessor for SecureLocationsError(0);
  v52 = v51;
  v75[0] = 8;
  v53 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v54 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v75, v53, v52, v54);
  v55 = aBlock;
  ((void (*)(void **))a3)(aBlock);

LABEL_28:
  Transaction.capture()();
}

uint64_t sub_10016BF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[6];
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a2 + 16);
  v13 = (_QWORD *)swift_allocObject(&unk_10105B418, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_10016C9BC;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105B430;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_10016C174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint32_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  _BYTE v25[32];
  uint64_t v26;
  _BYTE v27[24];

  v5 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v27, 0, 0);
  v6 = *(_QWORD *)(a2 + 32);
  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v8 = __CocoaSet.count.getter(v7);
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_6;
  }
  else if (*(_QWORD *)(v6 + 16))
  {
LABEL_6:
    v26 = 0;
    v9 = *v5;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v9);
    sub_10016C9C8(v10, a3, &v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134217984;
      swift_beginAccess(&v26, v25, 0, 0);
      v24 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v15 + 4, v15 + 12);
      v16 = "SecureLocationsClientSession - sent clearLocationsForFailedSubscriptions to %ld clients.";
      v17 = v13;
      v18 = v14;
      v19 = v15;
      v20 = 12;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, v19, v20);
      swift_slowDealloc(v15, -1, -1);
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  v13 = Logger.logObject.getter(v22);
  v23 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v23))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    v16 = "SecureLocationsClientSession - clearLocationsForFailedSubscriptions - but no client sessions";
    v17 = v13;
    v18 = v23;
    v19 = v15;
    v20 = 2;
    goto LABEL_15;
  }
LABEL_16:

  Transaction.capture()();
}

void sub_10016C3D4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];

  v5 = a2 + 4;
  swift_beginAccess(a2 + 4, v34, 0, 0);
  v6 = a2[4];
  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = a2[4];
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2[4]);
    v8 = __CocoaSet.count.getter(v7);
    swift_bridgeObjectRelease(v6);
    if (v8)
      goto LABEL_6;
LABEL_11:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7A18);
    v25 = swift_retain(a2);
    v13 = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v26))
    {
      v15 = swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v30 = v16;
      *(_DWORD *)v15 = 136315138;
      v27 = a2[5];
      v28 = a2[6];
      swift_bridgeObjectRetain(v28);
      v33 = sub_100016940(v27, v28, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v15 + 4, v15 + 12);
      swift_release(a2);
      swift_bridgeObjectRelease(v28);
      v19 = "SecureLocationsClientSession - %s notifyOfStateChange - but no client sessions";
      v20 = v13;
      v21 = v26;
      v22 = (uint8_t *)v15;
      v23 = 12;
      goto LABEL_15;
    }
LABEL_16:

    swift_release(a2);
    goto LABEL_17;
  }
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_11;
LABEL_6:
  v33 = 0;
  v9 = *v5;
  v10 = swift_bridgeObjectRetain(*v5);
  sub_10016B2F4(v10, a3, &v33);
  swift_bridgeObjectRelease(v9);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
  v12 = swift_retain(a2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (!os_log_type_enabled(v13, v14))
    goto LABEL_16;
  v15 = swift_slowAlloc(22, -1);
  v16 = swift_slowAlloc(32, -1);
  v32 = v16;
  *(_DWORD *)v15 = 136315394;
  v17 = a2[5];
  v18 = a2[6];
  swift_bridgeObjectRetain(v18);
  v30 = sub_100016940(v17, v18, &v32);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);
  swift_release(a2);
  swift_bridgeObjectRelease(v18);
  *(_WORD *)(v15 + 12) = 2048;
  swift_beginAccess(&v33, &v30, 0, 0);
  v29 = v33;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 14, v15 + 22);
  v19 = "SecureLocationsClientSession - %s sent notifyOfStateChange to %ld clients.";
  v20 = v13;
  v21 = v14;
  v22 = (uint8_t *)v15;
  v23 = 22;
LABEL_15:
  _os_log_impl((void *)&_mh_execute_header, v20, v21, v19, v22, v23);
  swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v16, -1, -1);
  swift_slowDealloc(v15, -1, -1);

LABEL_17:
  Transaction.capture()();
}

uint64_t sub_10016C74C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10016C754()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for SecureLocationsClientSessionPool(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F1448;
  if (!qword_1010F1448)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsClientSessionPool);
  return result;
}

uint64_t sub_10016C7CC(uint64_t a1)
{
  void *v2;

  v2 = &unk_100E29F20;
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 216);
}

uint64_t sub_10016C80C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10016C838()
{
  uint64_t v0;

  sub_10016C3D4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10016C844()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_10016C880()
{
  uint64_t v0;

  sub_10016B820(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD, __n128))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10016C890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecureLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016C8D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10016C900()
{
  uint64_t v0;

  return sub_100C49F8C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_10016C910(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SecureLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10016C94C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F1598;
  if (!qword_1010F1598)
  {
    v1 = objc_opt_self(SPSecureLocation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010F1598);
  }
  return result;
}

uint64_t sub_10016C988()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10016C9BC()
{
  uint64_t *v0;

  sub_10016C174(v0[2], v0[3], v0[4]);
}

void sub_10016C9C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  void *v34;

  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = sub_10001A9A8(&qword_1010F1580);
    v8 = sub_1000193A4(&qword_1010F1588, &qword_1010F1580, (const char *)&protocol conformance descriptor for XPCSession<A>);
    v9 = Set.Iterator.init(_cocoa:)(v33, v6, v7, v8);
    v4 = v33[0];
    v31 = v33[1];
    v10 = v33[2];
    v11 = v33[3];
    v12 = v33[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v14 = ~v13;
    v15 = -v13;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = v14;
    v11 = 0;
  }
  v30 = (unint64_t)(v10 + 64) >> 6;
  while (v4 < 0)
  {
    v20 = __CocoaSet.Iterator.next()(v9);
    if (!v20)
      goto LABEL_39;
    v21 = v20;
    v32 = v20;
    swift_unknownObjectRetain(v20);
    v22 = sub_10001A9A8(&qword_1010F1580);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v34;
    swift_unknownObjectRelease(v21);
    v19 = v11;
    v17 = v12;
    if (!v23)
      goto LABEL_39;
LABEL_35:
    XPCSession.proxy.getter(&v34);
    v28 = v34;
    if (v34)
    {
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v28, "clearLocationsForFailedSubscriptions:", isa);

      swift_unknownObjectRelease(v28);
      if (__OFADD__(*a3, 1))
      {
        __break(1u);
LABEL_39:
        sub_10007CC38(v4);
        return;
      }
      ++*a3;
    }
    v9 = (_QWORD *)swift_release();
    v11 = v19;
    v12 = v17;
  }
  if (v12)
  {
    v17 = (v12 - 1) & v12;
    v18 = __clz(__rbit64(v12)) | (v11 << 6);
    v19 = v11;
LABEL_34:
    v27 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    swift_retain();
    if (!v27)
      goto LABEL_39;
    goto LABEL_35;
  }
  v24 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v24 >= v30)
      goto LABEL_39;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    v19 = v11 + 1;
    if (!v25)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v30)
        goto LABEL_39;
      v25 = *(_QWORD *)(v31 + 8 * v19);
      if (!v25)
      {
        v19 = v11 + 3;
        if (v11 + 3 >= v30)
          goto LABEL_39;
        v25 = *(_QWORD *)(v31 + 8 * v19);
        if (!v25)
        {
          v19 = v11 + 4;
          if (v11 + 4 >= v30)
            goto LABEL_39;
          v25 = *(_QWORD *)(v31 + 8 * v19);
          if (!v25)
          {
            v19 = v11 + 5;
            if (v11 + 5 >= v30)
              goto LABEL_39;
            v25 = *(_QWORD *)(v31 + 8 * v19);
            if (!v25)
            {
              v26 = v11 + 6;
              while (v30 != v26)
              {
                v25 = *(_QWORD *)(v31 + 8 * v26++);
                if (v25)
                {
                  v19 = v26 - 1;
                  goto LABEL_33;
                }
              }
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_33:
    v17 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v19 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.ObservationSource()
{
  return &type metadata for ObservedAdvertisement.ObservationSource;
}

uint64_t sub_10016CD10(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v7 = a2[2];
    v8 = a2[3];
    sub_10012C644(v7, v8);
    *(_QWORD *)(v4 + 16) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    v9 = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v4 + 32) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v4 + 36) = v9;
    v10 = a3[11];
    v11 = v4 + v10;
    v12 = (uint64_t)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v15 = a3[12];
    v16 = (_QWORD *)(v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = type metadata accessor for ObservedAdvertisement.Location(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_10001A9A8((uint64_t *)&unk_101100320);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
      v16[2] = v17[2];
      v14((uint64_t)v16 + *(int *)(v18 + 28), (uint64_t)v17 + *(int *)(v18 + 28), v13);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v22 = a3[13];
    v23 = (char *)(v4 + v22);
    v24 = (char *)a2 + v22;
    v25 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_10001A9A8(&qword_1010EF3F8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v28 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v23, v24, v28);
      v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
      *(_QWORD *)&v23[*(int *)(v25 + 24)] = *(_QWORD *)&v24[*(int *)(v25 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    *(_BYTE *)(v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  }
  return v4;
}

uint64_t type metadata accessor for ObservedAdvertisement.Location(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F1758, (uint64_t)&nominal type descriptor for ObservedAdvertisement.Location);
}

uint64_t type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F16C0, (uint64_t)&nominal type descriptor for ObservedAdvertisement.BeaconIndexInformation);
}

uint64_t sub_10016CF50(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  sub_10012C494(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + a2[11];
  v5 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[12];
  v8 = type metadata accessor for ObservedAdvertisement.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    v6(v7 + *(int *)(v8 + 28), v5);
  v9 = a1 + a2[13];
  v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10);
  if (!(_DWORD)result)
  {
    v12 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v9, v12);
  }
  return result;
}

uint64_t sub_10016D04C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10012C644(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v8;
  v9 = a3[11];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v14 = a3[12];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = type metadata accessor for ObservedAdvertisement.Location(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_10001A9A8((uint64_t *)&unk_101100320);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
    v15[2] = v16[2];
    v13((uint64_t)v15 + *(int *)(v17 + 28), (uint64_t)v16 + *(int *)(v17 + 28), v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[13];
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  v23 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_10001A9A8(&qword_1010EF3F8);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v21, v22, v26);
    v21[*(int *)(v23 + 20)] = v22[*(int *)(v23 + 20)];
    *(_QWORD *)&v21[*(int *)(v23 + 24)] = *(_QWORD *)&v22[*(int *)(v23 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10016D238(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_BYTE *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v7 = a2[2];
  v8 = a2[3];
  sub_10012C644(v7, v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  sub_10012C494(v9, v10);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_WORD *)(a1 + 34) = *((_WORD *)a2 + 17);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  v11 = *(int *)(a3 + 44);
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v14 - 8);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 24);
  v15(v12, v13, v14);
  v38 = a3;
  v16 = *(int *)(a3 + 48);
  v17 = (char *)(a1 + v16);
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for ObservedAdvertisement.Location(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
      *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(&v17[*(int *)(v19 + 28)], &v18[*(int *)(v19 + 28)], v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    sub_1000126B0((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
LABEL_6:
    v24 = sub_10001A9A8((uint64_t *)&unk_101100320);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  *((_QWORD *)v17 + 2) = *((_QWORD *)v18 + 2);
  v15((uint64_t)&v17[*(int *)(v19 + 28)], (uint64_t)&v18[*(int *)(v19 + 28)], v14);
LABEL_7:
  v25 = *(int *)(v38 + 52);
  v26 = (_BYTE *)(a1 + v25);
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v36 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v26, v27, v36);
      v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
      *(_QWORD *)&v26[*(int *)(v28 + 24)] = *(_QWORD *)&v27[*(int *)(v28 + 24)];
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v26, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v34 = sub_10001A9A8(&qword_1010EF3F8);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v33 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v26, v27, v33);
  v26[*(int *)(v28 + 20)] = v27[*(int *)(v28 + 20)];
  *(_QWORD *)&v26[*(int *)(v28 + 24)] = *(_QWORD *)&v27[*(int *)(v28 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_13:
  *(_BYTE *)(a1 + *(int *)(v38 + 56)) = *((_BYTE *)a2 + *(int *)(v38 + 56));
  return a1;
}

uint64_t sub_10016D534(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v6;
  v7 = a3[11];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[12];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for ObservedAdvertisement.Location(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_10001A9A8((uint64_t *)&unk_101100320);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v13[2] = v14[2];
    v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[13];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_10001A9A8(&qword_1010EF3F8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v19, v20, v24);
    v19[*(int *)(v21 + 20)] = v20[*(int *)(v21 + 20)];
    *(_QWORD *)&v19[*(int *)(v21 + 24)] = *(_QWORD *)&v20[*(int *)(v21 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10016D714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_BYTE *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10012C494(v6, v7);
  v8 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v8;
  v9 = *(int *)(a3 + 44);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v12 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 40);
  v13(v10, v11, v12);
  v36 = a3;
  v14 = *(int *)(a3 + 48);
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for ObservedAdvertisement.Location(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v15[*(int *)(v17 + 28)], &v16[*(int *)(v17 + 28)], v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_1000126B0((uint64_t)v15, type metadata accessor for ObservedAdvertisement.Location);
LABEL_6:
    v22 = sub_10001A9A8((uint64_t *)&unk_101100320);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
  v13((uint64_t)&v15[*(int *)(v17 + 28)], (uint64_t)&v16[*(int *)(v17 + 28)], v12);
LABEL_7:
  v23 = *(int *)(v36 + 52);
  v24 = (_BYTE *)(a1 + v23);
  v25 = (_BYTE *)(a2 + v23);
  v26 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      v34 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v24, v25, v34);
      v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
      *(_QWORD *)&v24[*(int *)(v26 + 24)] = *(_QWORD *)&v25[*(int *)(v26 + 24)];
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v24, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v32 = sub_10001A9A8(&qword_1010EF3F8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v31 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v24, v25, v31);
  v24[*(int *)(v26 + 20)] = v25[*(int *)(v26 + 20)];
  *(_QWORD *)&v24[*(int *)(v26 + 24)] = *(_QWORD *)&v25[*(int *)(v26 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_13:
  *(_BYTE *)(a1 + *(int *)(v36 + 56)) = *(_BYTE *)(a2 + *(int *)(v36 + 56));
  return a1;
}

uint64_t sub_10016D9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016D9E4);
}

uint64_t sub_10016D9E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_10001A9A8((uint64_t *)&unk_101100320);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_10001A9A8(&qword_1010EF3F8);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[14]);
  if (v13 >= 2)
    return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10016DAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016DAD0);
}

uint64_t sub_10016DAD0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = sub_10001A9A8((uint64_t *)&unk_101100320);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_10001A9A8(&qword_1010EF3F8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[14]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for ObservedAdvertisement(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F15F8, (uint64_t)&nominal type descriptor for ObservedAdvertisement);
}

void sub_10016DBB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[11];

  v8[0] = "\t";
  v8[1] = &unk_100E29FD0;
  v8[2] = &unk_100E29FE8;
  v8[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v8[4] = (char *)&value witness table for Builtin.Int8 + 64;
  v8[5] = &unk_100E2A000;
  v8[6] = (char *)&value witness table for Builtin.Int32 + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v8[7] = *(_QWORD *)(v2 - 8) + 64;
    sub_100149C5C(319, &qword_1010F1608, type metadata accessor for ObservedAdvertisement.Location);
    if (v5 <= 0x3F)
    {
      v8[8] = *(_QWORD *)(v4 - 8) + 64;
      sub_100149C5C(319, (unint64_t *)&unk_1010F1610, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        v8[10] = &unk_100E2A018;
        swift_initStructMetadata(a1, 256, 11, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_10016DCC0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
  }
  return a1;
}

uint64_t sub_10016DD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10016DDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10016DE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10016DE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10016DEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016DEF0);
}

uint64_t sub_10016DEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t sub_10016DF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016DF74);
}

uint64_t sub_10016DF74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t sub_10016DFEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E2A048;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10016E06C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v5 = *(int *)(a3 + 28);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10016E0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_10016E134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10016E198(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = *(int *)(a3 + 28);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_10016E204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10016E268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10016E2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016E2D8);
}

uint64_t sub_10016E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_10016E318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016E324);
}

uint64_t sub_10016E324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_10016E368(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10016E3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = v0;
  v11 = sub_10001A9A8(&qword_1010EF3F8);
  __chkstk_darwin(v11);
  v10 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v9);
  if ((*(_BYTE *)(v0 + 35) & 1) == 0)
  {
    LOBYTE(v12) = *(_BYTE *)(v0 + 34);
    v3 = sub_100059570();
    v4 = FixedWidthInteger.data.getter(&type metadata for UInt8, v3);
    v6 = v5;
    Data.hexString.getter(v4, v5);
    sub_10001BC14(v4, v6);
  }
  v12 = 0;
  v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(121);
  v7._countAndFlagsBits = 0x3A656372756F733CLL;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  __asm { BR              X10 }
}

uint64_t sub_10016E544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;

  v5._countAndFlagsBits = 0x747365767261682ELL;
  v5._object = (void *)0xEA00000000007265;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x8000000100ECA3D0;
  v6._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  sub_10012C644(v7, v8);
  v9._countAndFlagsBits = sub_1001B495C(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_10012C494(v7, v8);
  v10._countAndFlagsBits = 0x737574617473202CLL;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = sub_1000AEDC4(*(unsigned __int8 *)(v0 + 32));
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x203A6B65202CLL;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  v13 = *(_BYTE *)(v0 + 33);
  *(_QWORD *)(v4 - 112) = 0x203A4D6F427BLL;
  *(_QWORD *)(v4 - 104) = 0xE600000000000000;
  if ((v13 & 4) != 0)
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if ((v13 & 4) != 0)
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 125;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  String.append(_:)(*(Swift::String *)(v4 - 112));
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x203A746E6968202CLL;
  v18._object = (void *)0xE800000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v1;
  v19._object = v3;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x7461446E61637320;
  v20._object = (void *)0xEB00000000203A65;
  String.append(_:)(v20);
  v21 = (int *)type metadata accessor for ObservedAdvertisement(0);
  v22 = type metadata accessor for Date(0);
  v23 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x68736F507369202CLL;
  v25._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v25);
  if (*(_BYTE *)(v0 + v21[14]))
    v26 = 1702195828;
  else
    v26 = 0x65736C6166;
  if (*(_BYTE *)(v0 + v21[14]))
    v27 = 0xE400000000000000;
  else
    v27 = 0xE500000000000000;
  v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._object = (void *)0xEB00000000203A6ELL;
  v29._countAndFlagsBits = 0x6F697461636F6C20;
  String.append(_:)(v29);
  sub_10000F9B8(v0 + v21[12], v2, (uint64_t *)&unk_101100320);
  v30._countAndFlagsBits = String.init<A>(describing:)(v2, *(_QWORD *)(v4 - 136));
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0xD000000000000014;
  v31._object = (void *)0x8000000100ECA3F0;
  String.append(_:)(v31);
  v32 = *(_QWORD *)(v4 - 128);
  sub_10000F9B8(v0 + v21[13], v32, &qword_1010EF3F8);
  v33._countAndFlagsBits = String.init<A>(describing:)(v32, *(_QWORD *)(v4 - 120));
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 62;
  v34._object = (void *)0xE100000000000000;
  String.append(_:)(v34);
  return *(_QWORD *)(v4 - 96);
}

void sub_10016E880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt64 v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF3F8);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)v1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(*(_BYTE *)(v1 + 9));
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  Hasher._combine(_:)((v13 >> 61) & 1);
  sub_10001BBBC(v12, v13 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(a1, v12, v13 & 0xDFFFFFFFFFFFFFFFLL);
  sub_10012C494(v12, v13);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 32));
  Hasher._combine(_:)(*(_BYTE *)(v1 + 33));
  if ((*(_BYTE *)(v1 + 35) & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v14 = *(_BYTE *)(v1 + 34);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(*(_DWORD *)(v1 + 36));
  v15 = type metadata accessor for ObservedAdvertisement(0);
  v16 = type metadata accessor for Date(0);
  v17 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v16, v17);
  sub_100B0B748(a1);
  sub_10000F9B8(v1 + *(int *)(v15 + 52), (uint64_t)v10, &qword_1010EF3F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1000126EC((uint64_t)v10, (uint64_t)v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    Hasher._combine(_:)(1u);
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v18, v19);
    if (v7[*(int *)(v4 + 20)])
    {
      if (v7[*(int *)(v4 + 20)] == 1)
      {
        v20 = 0xE900000000000079;
        v21 = 0x7261646E6F636553;
      }
      else
      {
        v20 = 0xEF736E6F69746163;
        v21 = 0x6F4C657275636553;
      }
    }
    else
    {
      v20 = 0xE700000000000000;
      v21 = 0x7972616D697250;
    }
    String.hash(into:)(a1, v21, v20);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*(_QWORD *)&v7[*(int *)(v4 + 24)]);
    sub_1000126B0((uint64_t)v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }
  Hasher._combine(_:)(*(_BYTE *)(v2 + *(int *)(v15 + 56)));
}

uint64_t sub_10016EB98(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016EBC8 + 4 * byte_100E29F44[a1]))(0x6449766461, 0xE500000000000000);
}

uint64_t sub_10016EBC8()
{
  return 0x656372756F73;
}

uint64_t sub_10016EBDC()
{
  return 0x7369747265766461;
}

uint64_t sub_10016EC00()
{
  return 0x737574617473;
}

uint64_t sub_10016EC14()
{
  return 0x79654B6172747865;
}

uint64_t sub_10016EC34()
{
  return 1953393000;
}

uint64_t sub_10016EC44()
{
  return 1769173874;
}

uint64_t sub_10016EC54()
{
  return 0x657461446E616373;
}

unint64_t sub_10016EC6C()
{
  return 0xD000000000000011;
}

uint64_t sub_10016EC88()
{
  return 0x68736F507369;
}

uint64_t sub_10016EC9C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10016ECB4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  __int128 v34;
  char v35;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F1800);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001715AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ObservedAdvertisement.CodingKeys, &type metadata for ObservedAdvertisement.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  LOBYTE(v34) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v34, v5);
  if (!v2)
  {
    LOBYTE(v34) = *((_BYTE *)v3 + 9);
    v35 = 1;
    v14 = sub_100171700();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for ObservedAdvertisement.ObservationSource, v14);
    v34 = *((_OWORD *)v3 + 1);
    v35 = 2;
    v15 = sub_100171744();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for AdvertisementUnion, v15);
    LOBYTE(v34) = *((_BYTE *)v3 + 32);
    v35 = 3;
    v16 = sub_100171788();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for Type18Status, v16);
    LOBYTE(v34) = *((_BYTE *)v3 + 33);
    v35 = 4;
    v17 = sub_1001717CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for ExtraKeyBits, v17);
    v18 = *((unsigned __int8 *)v3 + 34);
    v19 = *((unsigned __int8 *)v3 + 35);
    LOBYTE(v34) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | (v19 << 8), &v34, v5);
    v20 = *((unsigned int *)v3 + 9);
    LOBYTE(v34) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v34, v5);
    v21 = (int *)type metadata accessor for ObservedAdvertisement(0);
    v22 = (uint64_t)v3 + v21[11];
    LOBYTE(v34) = 7;
    v23 = type metadata accessor for Date(0);
    v24 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v34, v5, v23, v24);
    v25 = (uint64_t)v3 + v21[12];
    LOBYTE(v34) = 8;
    v26 = type metadata accessor for ObservedAdvertisement.Location(0);
    v27 = sub_100006204(&qword_1010F1828, type metadata accessor for ObservedAdvertisement.Location, (uint64_t)&unk_100E2A0D4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v34, v5, v26, v27);
    v28 = (uint64_t)v3 + v21[13];
    LOBYTE(v34) = 9;
    v29 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    v30 = sub_100006204(&qword_1010F1830, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation, (uint64_t)&unk_100E2A1DC);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v28, &v34, v5, v29, v30);
    v31 = *((unsigned __int8 *)v3 + v21[14]);
    LOBYTE(v34) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v31, &v34, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10016F054@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  _QWORD *v50;
  uint64_t *v51;
  __int128 v52;
  char v53;

  v44 = a2;
  v4 = sub_10001A9A8(&qword_1010EF3F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = sub_10001A9A8(&qword_1010F17C0);
  v13 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = (int *)type metadata accessor for ObservedAdvertisement(0);
  __chkstk_darwin(v49);
  v50 = a1;
  v51 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = a1[3];
  v17 = a1[4];
  sub_10001AA44(a1, v18);
  v19 = sub_1001715AC();
  v45 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ObservedAdvertisement.CodingKeys, &type metadata for ObservedAdvertisement.CodingKeys, v19, v18, v17);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  v42 = v9;
  v43 = v12;
  v41 = v6;
  v20 = v13;
  LOBYTE(v52) = 0;
  v21 = v46;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v46);
  v23 = v51;
  *v51 = v22;
  *((_BYTE *)v23 + 8) = v24 & 1;
  v53 = 1;
  v25 = sub_1001715F0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, &type metadata for ObservedAdvertisement.ObservationSource, &v53, v21, &type metadata for ObservedAdvertisement.ObservationSource, v25);
  *((_BYTE *)v23 + 9) = v52;
  v53 = 2;
  v26 = sub_100171634();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, &type metadata for AdvertisementUnion, &v53, v21, &type metadata for AdvertisementUnion, v26);
  *((_OWORD *)v23 + 1) = v52;
  v53 = 3;
  v27 = sub_100171678();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, &type metadata for Type18Status, &v53, v21, &type metadata for Type18Status, v27);
  *((_BYTE *)v23 + 32) = v52;
  v53 = 4;
  v28 = sub_1001716BC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, &type metadata for ExtraKeyBits, &v53, v21, &type metadata for ExtraKeyBits, v28);
  *((_BYTE *)v23 + 33) = v52;
  LOBYTE(v52) = 5;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v21);
  *((_BYTE *)v23 + 34) = v29;
  *((_BYTE *)v23 + 35) = HIBYTE(v29) & 1;
  LOBYTE(v52) = 6;
  *((_DWORD *)v23 + 9) = KeyedDecodingContainer.decode(_:forKey:)(&v52, v21);
  LOBYTE(v52) = 7;
  v30 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v31 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v48, &v52, v21, v48, v30);
  (*(void (**)(char *, _QWORD *, uint64_t))(v47 + 32))((char *)v23 + v49[11], v31, v48);
  v32 = type metadata accessor for ObservedAdvertisement.Location(0);
  LOBYTE(v52) = 8;
  v33 = sub_100006204(&qword_1010F17F0, type metadata accessor for ObservedAdvertisement.Location, (uint64_t)&unk_100E2A0FC);
  v34 = (uint64_t)v42;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v32, &v52, v21, v32, v33);
  sub_100005CF0(v34, (uint64_t)v23 + v49[12], (uint64_t *)&unk_101100320);
  v35 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  LOBYTE(v52) = 9;
  v36 = sub_100006204(&qword_1010F17F8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation, (uint64_t)&unk_100E2A204);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v35, &v52, v21, v35, v36);
  sub_100005CF0((uint64_t)v41, (uint64_t)v51 + v49[13], &qword_1010EF3F8);
  LOBYTE(v52) = 10;
  v37 = KeyedDecodingContainer.decode(_:forKey:)(&v52, v46);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v45, v46);
  v38 = (uint64_t)v51;
  *((_BYTE *)v51 + v49[14]) = v37 & 1;
  sub_10005972C(v38, v44, type metadata accessor for ObservedAdvertisement);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  return sub_1000126B0(v38, type metadata accessor for ObservedAdvertisement);
}

uint64_t sub_10016F6A8()
{
  unsigned __int8 *v0;

  return sub_10016EB98(*v0);
}

uint64_t sub_10016F6B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100171D84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016F6D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001715AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016F6FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001715AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016F724@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016F054(a1, a2);
}

uint64_t sub_10016F738(_QWORD *a1)
{
  return sub_10016ECB4(a1);
}

Swift::Int sub_10016F750()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10016E880((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10016F790()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10016E880((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_10016F7CC(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F1870);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100171854();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ObservedAdvertisement.Location.CodingKeys, &type metadata for ObservedAdvertisement.Location.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    v13 = v3[1];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v5, v13);
    v14 = v3[2];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v5, v14);
    v15 = (char *)v3 + *(int *)(type metadata accessor for ObservedAdvertisement.Location(0) + 28);
    v20 = 3;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_10016F970()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v0[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  type metadata accessor for ObservedAdvertisement.Location(0);
  v4 = type metadata accessor for Date(0);
  v5 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_10016FA2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v24 = a2;
  v27 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010F1860);
  v4 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ObservedAdvertisement.Location(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_100171854();
  v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ObservedAdvertisement.Location.CodingKeys, &type metadata for ObservedAdvertisement.Location.CodingKeys, v12, v10, v11);
  if (!v13)
  {
    v29 = v7;
    v14 = v4;
    v16 = v26;
    v15 = v27;
    v33 = 0;
    v17 = v28;
    KeyedDecodingContainer.decode(_:forKey:)(&v33, v28);
    *(_QWORD *)v9 = v18;
    v32 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v32, v17);
    *((_QWORD *)v9 + 1) = v19;
    v31 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v31, v17);
    *((_QWORD *)v9 + 2) = v21;
    v30 = 3;
    v22 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v30, v17, v15, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    v23 = v24;
    (*(void (**)(char *, _QWORD *, uint64_t))(v25 + 32))(&v9[*(int *)(v29 + 28)], v16, v15);
    sub_1000126EC((uint64_t)v9, v23, type metadata accessor for ObservedAdvertisement.Location);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_10016FCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100171568();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10016FD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100171568();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10016FD54()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016FD84 + 4 * byte_100E29F4F[*v0]))(0x6E776F6E6B6E752ELL, 0xE800000000000000);
}

uint64_t sub_10016FD84()
{
  return 0x747365767261682ELL;
}

uint64_t sub_10016FDA0()
{
  return 0x6353686365656C2ELL;
}

uint64_t sub_10016FDC4()
{
  return 0x6E7363612ELL;
}

uint64_t sub_10016FDD8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016FE08 + 4 * byte_100E29F53[*v0]))(0x656475746974616CLL, 0xE800000000000000);
}

uint64_t sub_10016FE08()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_10016FE24()
{
  return 0xD000000000000012;
}

uint64_t sub_10016FE40()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10016FE60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001721EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10016FE84(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10016FE90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100171854();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016FEB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100171854();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016FEE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016FA2C(a1, a2);
}

uint64_t sub_10016FEF4(_QWORD *a1)
{
  return sub_10016F7CC(a1);
}

uint64_t sub_10016FF0C(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 *v2;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  if ((*v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2[1];
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2[2];
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  v7 = type metadata accessor for Date(0);
  v8 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
}

Swift::Int sub_10016FFAC()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v0[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = type metadata accessor for Date(0);
  v5 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_10017006C()
{
  return sub_100006204(&qword_1010F1798, type metadata accessor for ObservedAdvertisement.Location, (uint64_t)&unk_100E2A06C);
}

uint64_t sub_100170098()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v1 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  if (*(_BYTE *)(v0 + *(int *)(v1 + 20)))
  {
    if (*(_BYTE *)(v0 + *(int *)(v1 + 20)) == 1)
    {
      v2 = 0xEA00000000007972;
      v3 = 0x61646E6F6365732ELL;
    }
    else
    {
      v2 = 0x8000000100EC6940;
      v3 = 0xD000000000000010;
    }
  }
  else
  {
    v2 = 0xE800000000000000;
    v3 = 0x7972616D6972702ELL;
  }
  v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 47;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 125;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 123;
}

uint64_t sub_1001701AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  v1 = type metadata accessor for UUID(0);
  v2 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 47;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  if (*(_BYTE *)(v0 + *(int *)(v5 + 20)))
  {
    if (*(_BYTE *)(v0 + *(int *)(v5 + 20)) == 1)
    {
      v6 = 0xEA00000000007972;
      v7 = 0x61646E6F6365732ELL;
    }
    else
    {
      v6 = 0x8000000100EC6940;
      v7 = 0xD000000000000010;
    }
  }
  else
  {
    v6 = 0xE800000000000000;
    v7 = 0x7972616D6972702ELL;
  }
  v8 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 47;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 125;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 123;
}

uint64_t sub_100170318(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F1858);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100171810();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys, &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys, v11, v9, v10);
  v22 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    v14 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    v21 = *(_BYTE *)(v3 + *(int *)(v14 + 20));
    v20 = 1;
    v15 = sub_10012D0F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for BeaconKeyManager.KeySequence, v15);
    v16 = *(_QWORD *)(v3 + *(int *)(v14 + 24));
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1001704B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v1, v2);
  v3 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v4 = *(unsigned __int8 *)(v0 + *(int *)(v3 + 20));
  if (*(_BYTE *)(v0 + *(int *)(v3 + 20)))
  {
    if (v4 == 1)
      v5 = 0x7261646E6F636553;
    else
      v5 = 0x6F4C657275636553;
    if (v4 == 1)
      v6 = 0xE900000000000079;
    else
      v6 = 0xEF736E6F69746163;
  }
  else
  {
    v6 = 0xE700000000000000;
    v5 = 0x7972616D697250;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v3 + 24)));
  return Hasher._finalize()();
}

uint64_t sub_1001705BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;

  v28 = a2;
  v29 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v30 = (_QWORD *)((char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_10001A9A8(&qword_1010F1848);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  __chkstk_darwin(v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_100171810();
  v32 = v7;
  v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys, &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys, v13, v11, v12);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v33 = v8;
  v15 = v5;
  v16 = v10;
  BYTE1(v36) = 0;
  v17 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v29;
  v18 = v30;
  v20 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v29, (char *)&v36 + 1, v31, v29, v17);
  v27[1] = v3;
  v21 = *(void (**)(char *, _QWORD *, uint64_t))(v3 + 32);
  v22 = (uint64_t)v16;
  v21(v16, v18, v19);
  v35 = 1;
  v23 = sub_10012D070();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, &type metadata for BeaconKeyManager.KeySequence, &v35, v20, &type metadata for BeaconKeyManager.KeySequence, v23);
  v24 = v33;
  *(_BYTE *)(v22 + *(int *)(v33 + 20)) = v36;
  v34 = 2;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v32, v20);
  *(_QWORD *)(v22 + *(int *)(v24 + 24)) = v25;
  sub_10005972C(v22, v28, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_1000126B0(v22, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
}

unint64_t sub_100170884()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65636E6575716573;
  if (*v0 != 1)
    v1 = 0x7865646E69;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1001708E0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001723AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100170904(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100170910(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100171810();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100170938(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100171810();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100170960@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001705BC(a1, a2);
}

uint64_t sub_100170974(_QWORD *a1)
{
  return sub_100170318(a1);
}

void sub_100170994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;

  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  v7 = *(unsigned __int8 *)(v2 + *(int *)(a2 + 20));
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (v7 == 1)
      v8 = 0x7261646E6F636553;
    else
      v8 = 0x6F4C657275636553;
    if (v7 == 1)
      v9 = 0xE900000000000079;
    else
      v9 = 0xEF736E6F69746163;
  }
  else
  {
    v9 = 0xE700000000000000;
    v8 = 0x7972616D697250;
  }
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 24)));
}

Swift::Int sub_100170A80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v10, v4, v5);
  v6 = *(unsigned __int8 *)(v2 + *(int *)(a2 + 20));
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (v6 == 1)
      v7 = 0x7261646E6F636553;
    else
      v7 = 0x6F4C657275636553;
    if (v6 == 1)
      v8 = 0xE900000000000079;
    else
      v8 = 0xEF736E6F69746163;
  }
  else
  {
    v8 = 0xE700000000000000;
    v7 = 0x7972616D697250;
  }
  String.hash(into:)(v10, v7, v8);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

BOOL sub_100170B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)(a1, a2) & 1) != 0
      && (sub_100510B14(*(_BYTE *)(a1 + *(int *)(a3 + 20)), *(_BYTE *)(a2 + *(int *)(a3 + 20))) & 1) != 0
      && *(_QWORD *)(a1 + *(int *)(a3 + 24)) == *(_QWORD *)(a2 + *(int *)(a3 + 24));
}

uint64_t sub_100170BE4()
{
  return sub_100006204(&qword_1010F17A0, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation, (uint64_t)&unk_100E2A124);
}

uint64_t sub_100170C10()
{
  return sub_100006204(&qword_1010F17A8, type metadata accessor for ObservedAdvertisement, (uint64_t)&unk_100E2A22C);
}

unint64_t sub_100170C40()
{
  unint64_t result;

  result = qword_1010F17B0;
  if (!qword_1010F17B0)
  {
    result = swift_getWitnessTable(&unk_100E2A3FC, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1010F17B0);
  }
  return result;
}

uint64_t sub_100170C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

double MacBeaconConfig.initialNoBeaconDuration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double MacBeaconConfig.fastRollAdvertisementDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double MacBeaconConfig.fastRollAdvertisementInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t sub_100170CDC(double *a1, double *a2)
{
  uint64_t v4;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v4 = *(int *)(type metadata accessor for ObservedAdvertisement.Location(0) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

uint64_t sub_100170D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  int v50;
  uint64_t v51;
  double *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  unint64_t v64;
  double *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v72 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v70 = (uint64_t)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_10001A9A8(&qword_1010F1838);
  __chkstk_darwin(v71);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF3F8);
  v9 = __chkstk_darwin(v8);
  v75 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v73 = (uint64_t)&v63 - v12;
  __chkstk_darwin(v11);
  v74 = (uint64_t)&v63 - v13;
  v14 = type metadata accessor for ObservedAdvertisement.Location(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (double *)((char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_10001A9A8(&qword_1010F1840);
  __chkstk_darwin(v18);
  v76 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_101100320);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v63 - v23;
  __chkstk_darwin(v22);
  v27 = (char *)&v63 - v26;
  v28 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return v28 & 1;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v28 = 1;
    if ((v28 & 1) != 0)
      goto LABEL_49;
  }
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9))
    goto LABEL_49;
  v66 = v4;
  v67 = v7;
  v68 = a1;
  v69 = a2;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(_QWORD *)(a1 + 24);
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a2 + 24);
  if ((v30 & 0x2000000000000000) != 0)
  {
    if ((v32 & 0x2000000000000000) == 0)
      goto LABEL_49;
    v63 = v30 & 0xDFFFFFFFFFFFFFFFLL;
    v64 = v32 & 0xDFFFFFFFFFFFFFFFLL;
    v65 = (double *)v25;
    sub_10012C644(v29, v30);
    sub_10012C644(v31, v32);
    v33 = v29;
    v34 = v63;
  }
  else
  {
    if ((v32 & 0x2000000000000000) != 0)
      goto LABEL_49;
    v65 = (double *)v25;
    sub_10012C644(v29, v30);
    sub_10012C644(v31, v32);
    v33 = v29;
    v34 = v30;
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v33, v34);
  LODWORD(v64) = v35;
  sub_10012C494(v31, v32);
  sub_10012C494(v29, v30);
  if ((v64 & 1) == 0)
    goto LABEL_49;
  v37 = v68;
  v36 = v69;
  if (*(unsigned __int8 *)(v68 + 32) != *(unsigned __int8 *)(v69 + 32)
    || *(unsigned __int8 *)(v68 + 33) != *(unsigned __int8 *)(v69 + 33))
  {
    goto LABEL_49;
  }
  v28 = *(_BYTE *)(v69 + 35);
  if ((*(_BYTE *)(v68 + 35) & 1) != 0)
  {
    if (!*(_BYTE *)(v69 + 35))
      return v28 & 1;
  }
  else
  {
    if (*(unsigned __int8 *)(v68 + 34) != *(unsigned __int8 *)(v69 + 34))
      v28 = 1;
    if ((v28 & 1) != 0)
      goto LABEL_49;
  }
  if (*(_DWORD *)(v68 + 36) != *(_DWORD *)(v69 + 36)
    || (v38 = type metadata accessor for ObservedAdvertisement(0),
        (static Date.== infix(_:_:)(v37 + *(int *)(v38 + 44), v36 + *(int *)(v38 + 44)) & 1) == 0))
  {
LABEL_49:
    v28 = 0;
    return v28 & 1;
  }
  sub_10000F9B8(v37 + *(int *)(v38 + 48), (uint64_t)v27, (uint64_t *)&unk_101100320);
  v64 = v38;
  sub_10000F9B8(v36 + *(int *)(v38 + 48), (uint64_t)v24, (uint64_t *)&unk_101100320);
  v39 = v76;
  v40 = v76 + *(int *)(v18 + 48);
  sub_10000F9B8((uint64_t)v27, v76, (uint64_t *)&unk_101100320);
  sub_10000F9B8((uint64_t)v24, v40, (uint64_t *)&unk_101100320);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v41(v39, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_101100320);
    sub_100004048((uint64_t)v27, (uint64_t *)&unk_101100320);
    if (v41(v40, 1, v14) == 1)
    {
      sub_100004048(v76, (uint64_t *)&unk_101100320);
      goto LABEL_27;
    }
    goto LABEL_33;
  }
  v52 = v65;
  sub_10000F9B8(v39, (uint64_t)v65, (uint64_t *)&unk_101100320);
  if (v41(v40, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_101100320);
    sub_100004048((uint64_t)v27, (uint64_t *)&unk_101100320);
    sub_1000126B0((uint64_t)v52, type metadata accessor for ObservedAdvertisement.Location);
LABEL_33:
    v53 = &qword_1010F1840;
    v54 = v76;
LABEL_48:
    sub_100004048(v54, v53);
    goto LABEL_49;
  }
  sub_1000126EC(v40, (uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
  if (*v52 != *v17 || v52[1] != v17[1] || v52[2] != v17[2])
  {
    sub_1000126B0((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_101100320);
    sub_100004048((uint64_t)v27, (uint64_t *)&unk_101100320);
    sub_1000126B0((uint64_t)v52, type metadata accessor for ObservedAdvertisement.Location);
    v54 = v76;
    v53 = (uint64_t *)&unk_101100320;
    goto LABEL_48;
  }
  v55 = (uint64_t)v52;
  v56 = static Date.== infix(_:_:)((char *)v52 + *(int *)(v14 + 28), (char *)v17 + *(int *)(v14 + 28));
  sub_1000126B0((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
  sub_100004048((uint64_t)v24, (uint64_t *)&unk_101100320);
  sub_100004048((uint64_t)v27, (uint64_t *)&unk_101100320);
  v36 = v69;
  sub_1000126B0(v55, type metadata accessor for ObservedAdvertisement.Location);
  sub_100004048(v76, (uint64_t *)&unk_101100320);
  if ((v56 & 1) == 0)
    goto LABEL_49;
LABEL_27:
  v42 = v64;
  v43 = v74;
  sub_10000F9B8(v37 + *(int *)(v64 + 52), v74, &qword_1010EF3F8);
  v44 = v73;
  sub_10000F9B8(v36 + *(int *)(v42 + 52), v73, &qword_1010EF3F8);
  v45 = (uint64_t)v67;
  v46 = (uint64_t)&v67[*(int *)(v71 + 48)];
  sub_10000F9B8(v43, (uint64_t)v67, &qword_1010EF3F8);
  v47 = v45;
  sub_10000F9B8(v44, v46, &qword_1010EF3F8);
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  v49 = v66;
  v50 = v48(v47, 1, v66);
  v51 = v75;
  if (v50 != 1)
  {
    sub_10000F9B8(v47, v75, &qword_1010EF3F8);
    if (v48(v46, 1, v49) == 1)
    {
      sub_100004048(v44, &qword_1010EF3F8);
      sub_100004048(v43, &qword_1010EF3F8);
      sub_1000126B0(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      goto LABEL_42;
    }
    v57 = v46;
    v58 = v70;
    sub_1000126EC(v57, v70, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    if ((static UUID.== infix(_:_:)(v51, v58) & 1) == 0
      || (sub_100510B14(*(_BYTE *)(v51 + *(int *)(v66 + 20)), *(_BYTE *)(v58 + *(int *)(v66 + 20))) & 1) == 0)
    {
      sub_1000126B0(v58, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_100004048(v44, &qword_1010EF3F8);
      sub_100004048(v43, &qword_1010EF3F8);
      sub_1000126B0(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v54 = (uint64_t)v67;
      v53 = &qword_1010EF3F8;
      goto LABEL_48;
    }
    v59 = *(int *)(v66 + 24);
    v60 = *(_QWORD *)(v51 + v59);
    v61 = *(_QWORD *)(v58 + v59);
    sub_1000126B0(v58, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100004048(v44, &qword_1010EF3F8);
    sub_100004048(v43, &qword_1010EF3F8);
    sub_1000126B0(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100004048((uint64_t)v67, &qword_1010EF3F8);
    if (v60 == v61)
      goto LABEL_30;
    goto LABEL_49;
  }
  sub_100004048(v44, &qword_1010EF3F8);
  sub_100004048(v43, &qword_1010EF3F8);
  if (v48(v46, 1, v49) != 1)
  {
LABEL_42:
    v53 = &qword_1010F1838;
    v54 = (uint64_t)v67;
    goto LABEL_48;
  }
  sub_100004048((uint64_t)v67, &qword_1010EF3F8);
LABEL_30:
  v28 = *(_BYTE *)(v37 + *(int *)(v42 + 56)) ^ *(_BYTE *)(v69 + *(int *)(v42 + 56)) ^ 1;
  return v28 & 1;
}

unint64_t sub_100171568()
{
  unint64_t result;

  result = qword_1010F17B8;
  if (!qword_1010F17B8)
  {
    result = swift_getWitnessTable(&unk_100E2A384, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1010F17B8);
  }
  return result;
}

unint64_t sub_1001715AC()
{
  unint64_t result;

  result = qword_1010F17C8;
  if (!qword_1010F17C8)
  {
    result = swift_getWitnessTable(&unk_100E2A708, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F17C8);
  }
  return result;
}

unint64_t sub_1001715F0()
{
  unint64_t result;

  result = qword_1010F17D0;
  if (!qword_1010F17D0)
  {
    result = swift_getWitnessTable(&unk_100E2A35C, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1010F17D0);
  }
  return result;
}

unint64_t sub_100171634()
{
  unint64_t result;

  result = qword_1010F17D8;
  if (!qword_1010F17D8)
  {
    result = swift_getWitnessTable(&unk_100E2ADA4, &type metadata for AdvertisementUnion);
    atomic_store(result, (unint64_t *)&qword_1010F17D8);
  }
  return result;
}

unint64_t sub_100171678()
{
  unint64_t result;

  result = qword_1010F17E0;
  if (!qword_1010F17E0)
  {
    result = swift_getWitnessTable(&unk_100E265B0, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_1010F17E0);
  }
  return result;
}

unint64_t sub_1001716BC()
{
  unint64_t result;

  result = qword_1010F17E8;
  if (!qword_1010F17E8)
  {
    result = swift_getWitnessTable(&unk_100E40D18, &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1010F17E8);
  }
  return result;
}

unint64_t sub_100171700()
{
  unint64_t result;

  result = qword_1010F1808;
  if (!qword_1010F1808)
  {
    result = swift_getWitnessTable(&unk_100E2A334, &type metadata for ObservedAdvertisement.ObservationSource);
    atomic_store(result, (unint64_t *)&qword_1010F1808);
  }
  return result;
}

unint64_t sub_100171744()
{
  unint64_t result;

  result = qword_1010F1810;
  if (!qword_1010F1810)
  {
    result = swift_getWitnessTable(&unk_100E2ADCC, &type metadata for AdvertisementUnion);
    atomic_store(result, (unint64_t *)&qword_1010F1810);
  }
  return result;
}

unint64_t sub_100171788()
{
  unint64_t result;

  result = qword_1010F1818;
  if (!qword_1010F1818)
  {
    result = swift_getWitnessTable(&unk_100E26588, &type metadata for Type18Status);
    atomic_store(result, (unint64_t *)&qword_1010F1818);
  }
  return result;
}

unint64_t sub_1001717CC()
{
  unint64_t result;

  result = qword_1010F1820;
  if (!qword_1010F1820)
  {
    result = swift_getWitnessTable(&unk_100E40CF0, &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1010F1820);
  }
  return result;
}

unint64_t sub_100171810()
{
  unint64_t result;

  result = qword_1010F1850;
  if (!qword_1010F1850)
  {
    result = swift_getWitnessTable(&unk_100E2A6B8, &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1850);
  }
  return result;
}

unint64_t sub_100171854()
{
  unint64_t result;

  result = qword_1010F1868;
  if (!qword_1010F1868)
  {
    result = swift_getWitnessTable(&unk_100E2A668, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1868);
  }
  return result;
}

uint64_t _s12searchpartyd21ObservedAdvertisementV17ObservationSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001718E4 + 4 * byte_100E29F5C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100171918 + 4 * byte_100E29F57[v4]))();
}

uint64_t sub_100171918(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171920(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100171928);
  return result;
}

uint64_t sub_100171934(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10017193CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100171940(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171948(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.Location.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.Location.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ObservedAdvertisement.BeaconIndexInformation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001719B0 + 4 * byte_100E29F66[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001719E4 + 4 * byte_100E29F61[v4]))();
}

uint64_t sub_1001719E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001719EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001719F4);
  return result;
}

uint64_t sub_100171A00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100171A08);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100171A0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171A14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.BeaconIndexInformation.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ObservedAdvertisement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100171A7C + 4 * byte_100E29F70[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100171AB0 + 4 * byte_100E29F6B[v4]))();
}

uint64_t sub_100171AB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171AB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100171AC0);
  return result;
}

uint64_t sub_100171ACC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100171AD4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100171AD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100171AE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ObservedAdvertisement.CodingKeys()
{
  return &type metadata for ObservedAdvertisement.CodingKeys;
}

unint64_t sub_100171B00()
{
  unint64_t result;

  result = qword_1010F1878;
  if (!qword_1010F1878)
  {
    result = swift_getWitnessTable(&unk_100E2A4D0, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1878);
  }
  return result;
}

unint64_t sub_100171B48()
{
  unint64_t result;

  result = qword_1010F1880;
  if (!qword_1010F1880)
  {
    result = swift_getWitnessTable(&unk_100E2A588, &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1880);
  }
  return result;
}

unint64_t sub_100171B90()
{
  unint64_t result;

  result = qword_1010F1888;
  if (!qword_1010F1888)
  {
    result = swift_getWitnessTable(&unk_100E2A640, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1888);
  }
  return result;
}

unint64_t sub_100171BD8()
{
  unint64_t result;

  result = qword_1010F1890;
  if (!qword_1010F1890)
  {
    result = swift_getWitnessTable(&unk_100E2A5B0, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1890);
  }
  return result;
}

unint64_t sub_100171C20()
{
  unint64_t result;

  result = qword_1010F1898;
  if (!qword_1010F1898)
  {
    result = swift_getWitnessTable(&unk_100E2A5D8, &type metadata for ObservedAdvertisement.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1898);
  }
  return result;
}

unint64_t sub_100171C68()
{
  unint64_t result;

  result = qword_1010F18A0;
  if (!qword_1010F18A0)
  {
    result = swift_getWitnessTable(&unk_100E2A4F8, &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F18A0);
  }
  return result;
}

unint64_t sub_100171CB0()
{
  unint64_t result;

  result = qword_1010F18A8;
  if (!qword_1010F18A8)
  {
    result = swift_getWitnessTable(&unk_100E2A520, &type metadata for ObservedAdvertisement.BeaconIndexInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F18A8);
  }
  return result;
}

unint64_t sub_100171CF8()
{
  unint64_t result;

  result = qword_1010F18B0;
  if (!qword_1010F18B0)
  {
    result = swift_getWitnessTable(&unk_100E2A440, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F18B0);
  }
  return result;
}

unint64_t sub_100171D40()
{
  unint64_t result;

  result = qword_1010F18B8;
  if (!qword_1010F18B8)
  {
    result = swift_getWitnessTable(&unk_100E2A468, &type metadata for ObservedAdvertisement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F18B8);
  }
  return result;
}

uint64_t sub_100171D84(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x6449766461 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449766461, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7369747265766461 && a2 == 0xED0000746E656D65)
  {
    v8 = 0xED0000746E656D65;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7369747265766461, 0xED0000746E656D65, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x79654B6172747865 && a2 == 0xEC00000073746942)
  {
    v10 = 0xEC00000073746942;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79654B6172747865, 0xEC00000073746942, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    v11 = 0xE400000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953393000, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 1769173874 && a2 == 0xE400000000000000)
  {
    v12 = 0xE400000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1769173874, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x657461446E616373 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657461446E616373, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v14 = 0xE800000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0xD000000000000011)
  {
    v15 = 0x8000000100ECA410;
    if (a2 == 0x8000000100ECA410)
      goto LABEL_61;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA410, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0x68736F507369 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x68736F507369, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1001721EC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000012)
  {
    v8 = 0x8000000100EC3570;
    if (a2 == 0x8000000100EC3570)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC3570, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease(0xE900000000000070);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001723AC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x65636E6575716573 && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t storeEnumTagSinglePayload for MessagingCapability(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100172540 + 4 * byte_100E2A765[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100172574 + 4 * byte_100E2A760[v4]))();
}

uint64_t sub_100172574(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10017257C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100172584);
  return result;
}

uint64_t sub_100172590(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100172598);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10017259C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001725A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessagingCapability()
{
  return &type metadata for MessagingCapability;
}

unint64_t sub_1001725C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F18C0;
  if (!qword_1010F18C0)
  {
    v1 = sub_10001F784(&qword_1010F18C8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010F18C0);
  }
  return result;
}

void sub_100172610(_QWORD *a1@<X8>)
{
  *a1 = &off_101049258;
}

unint64_t sub_100172624()
{
  unint64_t result;

  result = qword_1010F18D0;
  if (!qword_1010F18D0)
  {
    result = swift_getWitnessTable(&unk_100E2A7BC, &type metadata for MessagingCapability);
    atomic_store(result, (unint64_t *)&qword_1010F18D0);
  }
  return result;
}

uint64_t sub_100172668(void *a1)
{
  id v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v2 = objc_msgSend(a1, "recordZoneID");

  if (v2)
  {
    v4 = (char *)objc_msgSend(a1, "databaseScope");
    v5 = static os_log_type_t.default.getter(v4);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v6 = qword_1011B7D40;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v8 + 56) = sub_10000F4A0(0, &qword_1010F1900, CKRecordZoneNotification_ptr);
    *(_QWORD *)(v8 + 64) = sub_100172EE0(&qword_1010F1908, &qword_1010F1900, CKRecordZoneNotification_ptr);
    *(_QWORD *)(v8 + 32) = a1;
    v9 = a1;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "RecordZoneNotification: %@", 26, 2, v8);
    v10 = swift_bridgeObjectRelease();
    if ((unint64_t)(v4 - 2) >= 2)
    {
      if (v4 == (char *)1)
      {
        v17 = static os_log_type_t.default.getter(v10);
        return os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D40, "Nothing", 7, 2, _swiftEmptyArrayStorage);
      }
      else
      {
        v18 = static os_log_type_t.error.getter(v10);
        v19 = qword_1011B7D40;
        v20 = swift_allocObject(v7, 72, 7);
        *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
        v25 = v4;
        type metadata accessor for Scope(0);
        v22 = String.init<A>(describing:)(&v25, v21);
        v24 = v23;
        *(_QWORD *)(v20 + 56) = &type metadata for String;
        *(_QWORD *)(v20 + 64) = sub_10001AA00();
        *(_QWORD *)(v20 + 32) = v22;
        *(_QWORD *)(v20 + 40) = v24;
        os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Unknown databaseScope: %@", 25, 2, v20);
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      return QueueSynchronizer.conditionalSync<A>(_:)(sub_100172F20);
    }
  }
  else
  {
    v12 = static os_log_type_t.error.getter(v3);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    v13 = qword_1011B7D40;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v15 + 56) = sub_10000F4A0(0, &qword_1010F1900, CKRecordZoneNotification_ptr);
    *(_QWORD *)(v15 + 64) = sub_100172EE0(&qword_1010F1908, &qword_1010F1900, CKRecordZoneNotification_ptr);
    *(_QWORD *)(v15 + 32) = a1;
    v16 = a1;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "No recordZoneID in %@", 21, 2, v15);
    return swift_bridgeObjectRelease();
  }
}

void sub_1001729C4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v3 = qword_1011B7D40;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v5 + 56) = sub_10000F4A0(0, &qword_1010F18D8, APSIncomingMessage_ptr);
  *(_QWORD *)(v5 + 64) = sub_100172EE0(&qword_1010F18E0, &qword_1010F18D8, APSIncomingMessage_ptr);
  *(_QWORD *)(v5 + 32) = a1;
  v6 = a1;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "ContainerPushDelegate: didReceiveMessage: %@", 44, 2, v5);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v6, "userInfo");
  if (!v7)
  {
    __break(1u);
    JUMPOUT(0x100172ED0);
  }
  v8 = v7;
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v38 = objc_msgSend((id)objc_opt_self(CKNotification), "notificationFromRemoteNotificationDictionary:", isa);

  if (v38)
  {
    v10 = objc_msgSend(v38, "notificationType");
    switch((unint64_t)v10)
    {
      case 1uLL:
        v11 = static os_log_type_t.error.getter(v10);
        os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7D40, "Query notifications are not handled", 35, 2, _swiftEmptyArrayStorage, 1, 2);
        goto LABEL_16;
      case 2uLL:
        v19 = objc_opt_self(CKRecordZoneNotification);
        v20 = swift_dynamicCastObjCClass(v38, v19);
        if (!v20)
          goto LABEL_15;
        v21 = (void *)v20;
        v38 = v38;
        sub_100172668(v21);
        goto LABEL_13;
      case 3uLL:
        v22 = static os_log_type_t.error.getter(v10);
        os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D40, "Read notifications are not handled", 34, 2, _swiftEmptyArrayStorage, 1, 2);
        goto LABEL_16;
      case 4uLL:
        v23 = objc_opt_self(CKDatabaseNotification);
        v20 = swift_dynamicCastObjCClass(v38, v23);
        if (v20)
        {
          v24 = v20;
          v25 = v38;
          v26 = static os_log_type_t.default.getter(v25);
          v27 = qword_1011B7D40;
          v28 = swift_allocObject(v4, 72, 7);
          *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
          *(_QWORD *)(v28 + 56) = sub_10000F4A0(0, &qword_1010F18F0, CKDatabaseNotification_ptr);
          *(_QWORD *)(v28 + 64) = sub_100172EE0(&qword_1010F18F8, &qword_1010F18F0, CKDatabaseNotification_ptr);
          *(_QWORD *)(v28 + 32) = v24;
          v38 = v25;
          os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "DatabaseNotification: %@", 24, 2, v28);
          swift_bridgeObjectRelease();
          QueueSynchronizer.conditionalSync<A>(_:)(sub_100172F20);
LABEL_13:

        }
        else
        {
LABEL_15:
          v37 = static os_log_type_t.error.getter(v20);
          os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7D40, "Unable to cast to CKRecordZoneNotification", 42, 2, _swiftEmptyArrayStorage, 1, 2);
        }
LABEL_16:

        break;
      default:
        v29 = v10;
        v30 = static os_log_type_t.error.getter(v10);
        v31 = qword_1011B7D40;
        v32 = swift_allocObject(v4, 72, 7);
        *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
        v39 = v29;
        type metadata accessor for NotificationType(0);
        v34 = String.init<A>(describing:)(&v39, v33);
        v36 = v35;
        *(_QWORD *)(v32 + 56) = &type metadata for String;
        *(_QWORD *)(v32 + 64) = sub_10001AA00();
        *(_QWORD *)(v32 + 32) = v34;
        *(_QWORD *)(v32 + 40) = v36;
        os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Unknown notificationType: %@", 28, 2, v32);
        swift_bridgeObjectRelease();

        return;
    }
  }
  else
  {
    v12 = static os_log_type_t.error.getter(0);
    v13 = qword_1011B7D40;
    v14 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    v39 = 0;
    v15 = sub_10001A9A8(&qword_1010F18E8);
    v16 = String.init<A>(describing:)(&v39, v15);
    v18 = v17;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10001AA00();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Unknown notification: %@", 24, 2, v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100172EE0(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10000F4A0(255, a2, a3);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100172F20()
{
  uint64_t v0;

  return sub_100BC006C(v0);
}

_QWORD *sub_100172F38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v19 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for OwnerSharingCircle(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      v19 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009A578(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

_QWORD *sub_1001730A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v19 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for MemberSharingCircle(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 28), v3);
      v19 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009A578(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_100173218()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B69B0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B69B0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000013, 0x8000000100ECA5F0);
}

uint64_t sub_100173298()
{
  uint64_t v0;

  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v0 = type metadata accessor for Logger(0);
  return sub_10001A9E8(v0, (uint64_t)qword_1011B69B0);
}

uint64_t sub_1001732E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 88) = a6;
  *(_QWORD *)(v7 + 96) = v6;
  *(_BYTE *)(v7 + 144) = a4;
  *(_QWORD *)(v7 + 72) = a3;
  *(_QWORD *)(v7 + 80) = a5;
  *(_QWORD *)(v7 + 56) = a1;
  *(_QWORD *)(v7 + 64) = a2;
  return swift_task_switch(sub_100173304, v6, 0);
}

uint64_t sub_100173304()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v1 = v0[11];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B69B0);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[7];
    v17 = v0[11];
    v18 = v0[10];
    v16 = v0[8];
    v7 = swift_slowAlloc(32, -1);
    v19 = swift_slowAlloc(96, -1);
    v20 = v19;
    *(_DWORD *)v7 = 136315650;
    v21 = 0x7972616D6972702ELL;
    v22 = 0xEA0000000000282FLL;
    v0[2] = v6;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v0[3] = sub_100016940(v21, v22, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v21 = 0x7972616D6972702ELL;
    v22 = 0xEA0000000000282FLL;
    v0[4] = v16;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v0[5] = sub_100016940(v21, v22, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 22) = 2080;
    if (v17)
      v12 = v18;
    else
      v12 = 0x6C646E75622D6F6ELL;
    if (v17)
      v13 = v1;
    else
      v13 = 0xE900000000000065;
    swift_bridgeObjectRetain(v1);
    v0[6] = sub_100016940(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "BeaconSharingService begin fetchSharedBeacons. Index start: %s, End: %s, bundle: %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v19, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1, 2);
  }

  v14 = (_QWORD *)swift_task_alloc(dword_1010F191C);
  v0[13] = v14;
  *v14 = v0;
  v14[1] = sub_100173660;
  return sub_1001737EC(v0[7], v0[8], v0[9]);
}

uint64_t sub_100173660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  v6 = *(_QWORD *)(*v3 + 104);
  v7 = *v3;
  *(_QWORD *)(v7 + 112) = a1;
  *(_QWORD *)(v7 + 120) = a2;
  swift_task_dealloc(v6);
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  v9 = swift_task_alloc(dword_1010F1924);
  *(_QWORD *)(v7 + 128) = v9;
  *(_QWORD *)v9 = v7;
  *(_QWORD *)(v9 + 8) = sub_10017371C;
  v10 = *(_QWORD *)(v7 + 96);
  v11 = *(_BYTE *)(v7 + 144);
  v12 = *(_OWORD *)(v7 + 80);
  *(_QWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 48) = v12;
  *(_BYTE *)(v9 + 176) = v11;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  return swift_task_switch(sub_10017A97C, v10, 0);
}

uint64_t sub_10017371C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 128);
  v5 = *v2;
  *(_QWORD *)(v5 + 136) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1001737B0, *(_QWORD *)(v5 + 96), 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1001737B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001737EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4[87] = v3;
  v4[86] = a3;
  v4[85] = a2;
  v4[84] = a1;
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v4[88] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[89] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[90] = swift_task_alloc(v7);
  v4[91] = swift_task_alloc(v7);
  v8 = type metadata accessor for HashAlgorithm(0);
  v4[92] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[93] = v9;
  v4[94] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F1958) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[95] = swift_task_alloc(v10);
  v4[96] = swift_task_alloc(v10);
  v11 = *(_QWORD *)(type metadata accessor for KeyDropFetchItem(0) - 8);
  v4[97] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[98] = swift_task_alloc(v12);
  v4[99] = swift_task_alloc(v12);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v4[100] = v13;
  v4[101] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SharedBeaconRecord(0);
  v4[102] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[103] = v15;
  v4[104] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v4[105] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[106] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[107] = swift_task_alloc(v18);
  v4[108] = swift_task_alloc(v18);
  v4[109] = swift_task_alloc(v18);
  v4[110] = swift_task_alloc(v18);
  v4[111] = swift_task_alloc(v18);
  v4[112] = swift_task_alloc(v18);
  v4[113] = swift_task_alloc(v18);
  v19 = type metadata accessor for MemberSharingCircle(0);
  v4[114] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[115] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[116] = swift_task_alloc(v21);
  v4[117] = swift_task_alloc(v21);
  v22 = type metadata accessor for UUID(0);
  v4[118] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v4[119] = v23;
  v24 = *(_QWORD *)(v23 + 64);
  v4[120] = v24;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[121] = swift_task_alloc(v25);
  v4[122] = swift_task_alloc(v25);
  v4[123] = swift_task_alloc(v25);
  v4[124] = swift_task_alloc(v25);
  v4[125] = swift_task_alloc(v25);
  v4[126] = swift_task_alloc(v25);
  v4[127] = swift_task_alloc(v25);
  v4[128] = swift_task_alloc(v25);
  return swift_task_switch(sub_100173AAC, v3, 0);
}

uint64_t sub_100173AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 688);
  *(_QWORD *)(v0 + 648) = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1032) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 696);
    *(_DWORD *)(v0 + 1528) = enum case for HashAlgorithm.sha256(_:);
    *(_QWORD *)(v0 + 1056) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v0 + 1040) = 0u;
    v4 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    sub_100030784(v4, v0 + 184);
    v5 = *(_QWORD *)(v3 + 136);
    *(_QWORD *)(v0 + 1064) = v5;
    v6 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v6);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 32))(v6);
    return swift_task_switch(sub_100173D58, v5, 0);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 1016);
    v10 = *(_QWORD *)(v0 + 1008);
    v11 = *(_QWORD *)(v0 + 1000);
    v12 = *(_QWORD *)(v0 + 992);
    v13 = *(_QWORD *)(v0 + 984);
    v14 = *(_QWORD *)(v0 + 976);
    v15 = *(_QWORD *)(v0 + 968);
    v16 = *(_QWORD *)(v0 + 936);
    v17 = *(_QWORD *)(v0 + 928);
    v18 = *(_QWORD *)(v0 + 904);
    v19 = *(_QWORD *)(v0 + 896);
    v20 = *(_QWORD *)(v0 + 888);
    v21 = *(_QWORD *)(v0 + 880);
    v22 = *(_QWORD *)(v0 + 872);
    v23 = *(_QWORD *)(v0 + 864);
    v24 = *(_QWORD *)(v0 + 856);
    v25 = *(_QWORD *)(v0 + 832);
    v26 = *(_QWORD *)(v0 + 808);
    v27 = *(_QWORD *)(v0 + 792);
    v28 = *(_QWORD *)(v0 + 784);
    v29 = *(_QWORD *)(v0 + 768);
    v30 = *(_QWORD *)(v0 + 760);
    v31 = *(_QWORD *)(v0 + 752);
    v32 = *(_QWORD *)(v0 + 728);
    v33 = *(_QWORD *)(v0 + 720);
    swift_task_dealloc(*(_QWORD *)(v0 + 1024));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(_QWORD *, _QWORD *))(v0 + 8))(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_100173D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 1064);
  v2 = *(_QWORD *)(v0 + 1024);
  v3 = *(_QWORD *)(v0 + 1016);
  v4 = *(_QWORD *)(v0 + 960);
  v5 = *(_QWORD *)(v0 + 952);
  v6 = *(_QWORD *)(v0 + 944);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 1072) = v7;
  v7(v3, v2, v6);
  LODWORD(v8) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 1532) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10105C958, v9 + v4, v8 | 7);
  *(_QWORD *)(v0 + 1080) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 1088) = v11;
  v11(v10 + v9, v3, v6);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 1096) = v13;
  v14 = sub_10001A9A8(&qword_1010EC840);
  *v13 = v0;
  v13[1] = sub_100173E8C;
  return unsafeBlocking<A>(_:)(v0 + 624, sub_1000D9288, v10, v14);
}

uint64_t sub_100173E8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1096));
  swift_release();
  return swift_task_switch(sub_100173F24, v1, 0);
}

uint64_t sub_100173F24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0[128];
  v2 = v0[119];
  v3 = v0[118];
  v4 = v0[87];
  v0[138] = v0[78];
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[139] = v5;
  v5(v1, v3);
  return swift_task_switch(sub_100173FA8, v4, 0);
}

uint64_t sub_100173FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 1104);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1120) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 936);
    v4 = *(_QWORD *)(v0 + 920);
    v5 = *(_QWORD *)(v0 + 912);
    v6 = *(_QWORD *)(v0 + 696);
    v7 = *(int *)(v5 + 28);
    *(_DWORD *)(v0 + 1536) = v7;
    v8 = *(int *)(v5 + 24);
    *(_DWORD *)(v0 + 1540) = v8;
    *(_QWORD *)(v0 + 1128) = *(_QWORD *)(v6 + 128);
    LODWORD(v6) = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 1544) = v6;
    *(_QWORD *)(v0 + 1136) = *(_QWORD *)(v4 + 72);
    v9 = *(_QWORD *)(v0 + 1040);
    *(_QWORD *)(v0 + 1160) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1152) = 0;
    *(_QWORD *)(v0 + 1144) = v9;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
    v11 = *(_QWORD *)(v0 + 1008);
    v12 = *(_QWORD *)(v0 + 1000);
    v13 = *(_QWORD *)(v0 + 944);
    v14 = v1 + ((v6 + 32) & ~(unint64_t)v6);
    v15 = v3 + v8;
    v16 = v3 + v7;
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v14, v3, type metadata accessor for MemberSharingCircle);
    v10(v11, v16, v13);
    v10(v12, v15, v13);
    sub_1000126B0(v3, type metadata accessor for MemberSharingCircle);
    v17 = sub_100174254;
    v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v0 + 1056);
    v20 = *(_QWORD *)(v0 + 1040);
    sub_100302AB0((uint64_t)_swiftEmptyArrayStorage);
    v21 = *(_QWORD *)(v0 + 1032);
    v22 = *(_QWORD *)(v0 + 1048) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 184));
    if (v22 == v21)
    {
      v23 = *(_QWORD *)(v0 + 688);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 1312) = v19;
      *(_QWORD *)(v0 + 1304) = 0;
      v24 = *(_QWORD *)(v0 + 1064);
      v25 = *(_QWORD *)(v0 + 688) + 32;
      swift_bridgeObjectRetain(v23);
      sub_100030784(v25, v0 + 144);
      v26 = *(_QWORD *)(v0 + 168);
      v27 = *(_QWORD *)(v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 144), v26);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 8) + 32))(v26);
      v17 = sub_100176844;
      v18 = v24;
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 1048) + 1;
      *(_QWORD *)(v0 + 1056) = v19;
      *(_QWORD *)(v0 + 1048) = v28;
      *(_QWORD *)(v0 + 1040) = v20;
      v29 = *(_QWORD *)(v0 + 696);
      sub_100030784(*(_QWORD *)(v0 + 688) + 40 * v28 + 32, v0 + 184);
      v30 = *(_QWORD *)(v29 + 136);
      *(_QWORD *)(v0 + 1064) = v30;
      v31 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 216);
      sub_10001AA44((_QWORD *)(v0 + 184), v31);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 8) + 32))(v31);
      v17 = sub_100173D58;
      v18 = v30;
    }
  }
  return swift_task_switch(v17, v18, 0);
}

uint64_t sub_100174254()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 1128) + 120);
  *(_QWORD *)(v0 + 1168) = v1;
  return swift_task_switch(sub_1001742BC, v1, 0);
}

uint64_t sub_1001742BC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  v3 = *(unsigned __int8 *)(v0 + 1532);
  v4 = *(_QWORD *)(v0 + 1024);
  v5 = *(_QWORD *)(v0 + 944);
  v6 = (v3 + 24) & ~v3;
  v7 = v6 + *(_QWORD *)(v0 + 960);
  v8 = v3 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1072))(v4, *(_QWORD *)(v0 + 1008), v5);
  v9 = swift_allocObject(&unk_10105C980, v7, v8);
  *(_QWORD *)(v0 + 1176) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v2(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1184) = v11;
  v12 = sub_10001A9A8(&qword_1010F1960);
  *v11 = v0;
  v11[1] = sub_1001743E4;
  return unsafeBlocking<A>(_:)(v0 + 592, sub_1001AE6B8, v9, v12);
}

uint64_t sub_1001743E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1184));
  swift_release();
  return swift_task_switch(sub_10017447C, v1, 0);
}

uint64_t sub_10017447C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 1192) = *(_QWORD *)(v0 + 592);
  return swift_task_switch(sub_1001744E4, 0, 0);
}

uint64_t sub_1001744E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[149];
  v2 = type metadata accessor for Logger(0);
  v0[150] = v2;
  sub_10001A9E8(v2, (uint64_t)qword_1011B7940);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[149];
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)(v8 + 4) = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v9 = v0[143];
  sub_10095CF6C(v0[149], v0 + 10);
  v0[151] = v9;
  if (v9)
  {
    v0[154] = v9;
    v10 = (void (*)(uint64_t, uint64_t))v0[139];
    v11 = v0[126];
    v12 = v0[125];
    v13 = v0[118];
    v14 = v0[87];
    swift_bridgeObjectRelease();
    v10(v12, v13);
    v10(v11, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = sub_100174B2C;
    v16 = v14;
  }
  else
  {
    v16 = v0[141];
    v15 = sub_1001746D8;
  }
  return swift_task_switch(v15, v16, 0);
}

uint64_t sub_1001746D8()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = v0[16];
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 12;
    swift_willThrow(v3);
    sub_1000D9530(v0 + 10);
    v0[154] = v3;
    v5 = (void (*)(uint64_t, uint64_t))v0[139];
    v6 = v0[126];
    v7 = v0[125];
    v8 = v0[118];
    v9 = v0[87];
    swift_bridgeObjectRelease();
    v5(v7, v8);
    v5(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = sub_100174B2C;
    v11 = v9;
  }
  else
  {
    v12 = (void (*)(uint64_t, uint64_t))v0[139];
    v13 = (void (*)(char *, uint64_t, uint64_t))v0[134];
    v14 = v0[125];
    v15 = v0[118];
    v16 = (uint64_t *)v0[113];
    v17 = v0[105];
    v20 = v0[87];
    v21 = v0[126];
    v18 = v0[15];
    sub_10001BBBC(v18, v1);
    sub_1000D9530(v0 + 10);
    v13((char *)v16 + *(int *)(v17 + 20), v14, v15);
    *v16 = v18;
    v16[1] = v1;
    v12(v14, v15);
    v12(v21, v15);
    v10 = sub_100174888;
    v11 = v20;
  }
  return swift_task_switch(v10, v11, 0);
}

uint64_t sub_100174888()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 1160);
  sub_10005972C(*(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 896), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD *)(v0 + 1160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8C54(0, *(_QWORD *)(v3 + 16) + 1, 1, *(_QWORD *)(v0 + 1160));
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8C54(v4 > 1, v5 + 1, 1, v3);
  *(_QWORD *)(v0 + 1216) = v3;
  v6 = *(_QWORD *)(v0 + 1120);
  v7 = *(_QWORD *)(v0 + 904);
  v8 = *(_QWORD *)(v0 + 896);
  v9 = *(_QWORD *)(v0 + 848);
  v10 = *(_QWORD *)(v0 + 1152) + 1;
  *(_QWORD *)(v3 + 16) = v5 + 1;
  v11 = *(_DWORD *)(v9 + 80);
  *(_DWORD *)(v0 + 1548) = v11;
  v12 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v0 + 1224) = v12;
  sub_1000126EC(v8, v3 + ((v11 + 32) & ~(unint64_t)v11) + v12 * v5, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_1000126B0(v7, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  if (v10 == v6)
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 1208);
    *(_QWORD *)(v0 + 1256) = *(_QWORD *)(v0 + 1056);
    *(_QWORD *)(v0 + 1248) = 0;
    *(_QWORD *)(v0 + 1240) = v13;
    v14 = *(_QWORD *)(v0 + 1104);
    if (!*(_QWORD *)(v14 + 16))
      __break(1u);
    v15 = *(_QWORD *)(v0 + 1064);
    sub_10005972C(v14 + ((*(unsigned __int8 *)(v0 + 1544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1544)), *(_QWORD *)(v0 + 928), type metadata accessor for MemberSharingCircle);
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v16);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8) + 32))(v16);
    v18 = sub_100174F84;
    v19 = v15;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 1208);
    v21 = *(_QWORD *)(v0 + 1152) + 1;
    *(_QWORD *)(v0 + 1160) = v3;
    *(_QWORD *)(v0 + 1152) = v21;
    *(_QWORD *)(v0 + 1144) = v20;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
    v23 = *(_QWORD *)(v0 + 1008);
    v24 = *(_QWORD *)(v0 + 1000);
    v25 = *(_QWORD *)(v0 + 944);
    v26 = *(_QWORD *)(v0 + 936);
    v27 = v26 + *(int *)(v0 + 1540);
    v28 = v26 + *(int *)(v0 + 1536);
    sub_10005972C(*(_QWORD *)(v0 + 1104)+ ((*(unsigned __int8 *)(v0 + 1544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1544))+ *(_QWORD *)(v0 + 1136) * v21, v26, type metadata accessor for MemberSharingCircle);
    v22(v23, v28, v25);
    v22(v24, v27, v25);
    sub_1000126B0(v26, type metadata accessor for MemberSharingCircle);
    v18 = sub_100174254;
    v19 = 0;
  }
  return swift_task_switch(v18, v19, 0);
}

uint64_t sub_100174B2C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36[2];

  v1 = v0 + 23;
  v2 = v0[154];
  v3 = v0[132];
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  sub_10001A9E8(v0[150], (uint64_t)qword_1011B69B0);
  sub_100030784((uint64_t)(v0 + 23), (uint64_t)(v0 + 38));
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    type = v6;
    v32 = (void (*)(uint64_t, uint64_t))v0[139];
    v7 = v0[128];
    v8 = v0[118];
    v35 = v3;
    v9 = swift_slowAlloc(32, -1);
    v33 = swift_slowAlloc(64, -1);
    v36[0] = v33;
    *(_DWORD *)v9 = 141558531;
    v0[71] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 71, v0 + 72, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = v0[41];
    v10 = v0[42];
    sub_10001AA44(v0 + 38, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v8, v12);
    v15 = v14;
    v32(v7, v8);
    v0[72] = sub_100016940(v13, v15, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 73, v9 + 14, v9 + 22);
    v1 = v0 + 23;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 73, v0 + 50);
    v16 = Error.localizedDescription.getter(v0[51], v0[52]);
    v0[75] = sub_100016940(v16, v17, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 75, v0 + 76, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v18 = v9;
    v3 = v35;
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v19 = v0[129];
  v20 = v0[131] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v20 == v19)
  {
    v21 = v0[86];
    swift_bridgeObjectRelease();
    v0[164] = v3;
    v0[163] = 0;
    v22 = v0[133];
    v23 = v0[86] + 32;
    swift_bridgeObjectRetain(v21);
    sub_100030784(v23, (uint64_t)(v0 + 18));
    v24 = v0[21];
    v25 = v0[22];
    sub_10001AA44(v0 + 18, v24);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 32))(v24);
    v26 = sub_100176844;
  }
  else
  {
    v27 = v0[131] + 1;
    v0[132] = v3;
    v0[131] = v27;
    v0[130] = 0;
    v28 = v0[87];
    sub_100030784(v0[86] + 40 * v27 + 32, (uint64_t)v1);
    v22 = *(_QWORD *)(v28 + 136);
    v0[133] = v22;
    v29 = v0[26];
    v30 = v0[27];
    sub_10001AA44(v1, v29);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8) + 32))(v29);
    v26 = sub_100173D58;
  }
  return swift_task_switch(v26, v22, 0);
}

uint64_t sub_100174F84()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  v2 = *(unsigned __int8 *)(v0 + 1532);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1016);
  v5 = *(_QWORD *)(v0 + 944);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 960) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1072))(v4, *(_QWORD *)(v0 + 1024), v5);
  v9 = swift_allocObject(&unk_10105C9F8, v7, v8);
  *(_QWORD *)(v0 + 1264) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1272) = v11;
  *v11 = v0;
  v11[1] = sub_1001750A0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 808), sub_100067DF8, v9, *(_QWORD *)(v0 + 800));
}

uint64_t sub_1001750A0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 1112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1024);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 944);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 696);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1272));
  swift_release();
  v1(v2, v3);
  return swift_task_switch(sub_100175158, v4, 0);
}

uint64_t sub_100175158(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_log_t log, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t type,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)();
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v47 = *(_QWORD *)(v46 + 816);
  v48 = *(_QWORD *)(v46 + 808);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 + 824) + 48))(v48, 1, v47) != 1)
  {
    v61 = *(_QWORD *)(v46 + 832);
    sub_1000126EC(v48, v61, type metadata accessor for SharedBeaconRecord);
    v63 = *(_QWORD *)(v46 + 208);
    v62 = *(_QWORD *)(v46 + 216);
    sub_10001AA44((_QWORD *)(v46 + 184), v63);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v62 + 8) + 8) + 32))(v63);
    v64 = *(unsigned __int8 *)(v61 + *(int *)(v47 + 64));
    v65 = *(_QWORD *)(v46 + 208);
    v66 = *(_QWORD *)(v46 + 216);
    sub_10001AA44((_QWORD *)(v46 + 184), v65);
    (*(void (**)(uint64_t, uint64_t))(v66 + 88))(v65, v66);
    __asm { BR              X9 }
  }
  sub_1000126B0(*(_QWORD *)(v46 + 928), type metadata accessor for MemberSharingCircle);
  sub_100004048(v48, (uint64_t *)&unk_1010EE180);
  v49 = *(_QWORD *)(v46 + 1248) + 1;
  if (v49 != *(_QWORD *)(v46 + 1120))
  {
    *(_QWORD *)(v46 + 1248) = v49;
    v67 = *(_QWORD *)(v46 + 1104);
    if (v49 >= *(_QWORD *)(v67 + 16))
    {
      __break(1u);
      JUMPOUT(0x100176320);
    }
    v68 = *(_QWORD *)(v46 + 1064);
    sub_10005972C(v67+ ((*(unsigned __int8 *)(v46 + 1544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 1544))+ *(_QWORD *)(v46 + 1136) * v49, *(_QWORD *)(v46 + 928), type metadata accessor for MemberSharingCircle);
    v69 = *(_QWORD *)(v46 + 208);
    v70 = *(_QWORD *)(v46 + 216);
    sub_10001AA44((_QWORD *)(v46 + 184), v69);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v70 + 8) + 8) + 32))(v69);
    v59 = sub_100174F84;
    goto LABEL_9;
  }
  v50 = *(_QWORD *)(v46 + 1240);
  v51 = *(_QWORD *)(v46 + 1256);
  swift_bridgeObjectRelease();
  sub_100302AB0(*(_QWORD *)(v46 + 1216));
  v52 = *(_QWORD *)(v46 + 1032);
  v53 = *(_QWORD *)(v46 + 1048) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v46 + 184));
  if (v53 != v52)
  {
    v71 = *(_QWORD *)(v46 + 1048) + 1;
    *(_QWORD *)(v46 + 1056) = v51;
    *(_QWORD *)(v46 + 1048) = v71;
    *(_QWORD *)(v46 + 1040) = v50;
    v72 = *(_QWORD *)(v46 + 696);
    sub_100030784(*(_QWORD *)(v46 + 688) + 40 * v71 + 32, v46 + 184);
    v68 = *(_QWORD *)(v72 + 136);
    *(_QWORD *)(v46 + 1064) = v68;
    v73 = *(_QWORD *)(v46 + 208);
    v74 = *(_QWORD *)(v46 + 216);
    sub_10001AA44((_QWORD *)(v46 + 184), v73);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v74 + 8) + 8) + 32))(v73);
    v59 = sub_100173D58;
LABEL_9:
    v60 = v68;
    return swift_task_switch(v59, v60, 0);
  }
  v54 = *(_QWORD *)(v46 + 688);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v46 + 1312) = v51;
  *(_QWORD *)(v46 + 1304) = 0;
  v55 = *(_QWORD *)(v46 + 1064);
  v56 = *(_QWORD *)(v46 + 688) + 32;
  swift_bridgeObjectRetain(v54);
  sub_100030784(v56, v46 + 144);
  v57 = *(_QWORD *)(v46 + 168);
  v58 = *(_QWORD *)(v46 + 176);
  sub_10001AA44((_QWORD *)(v46 + 144), v57);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v58 + 8) + 8) + 32))(v57);
  v59 = sub_100176844;
  v60 = v55;
  return swift_task_switch(v59, v60, 0);
}

uint64_t sub_1001763EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1288);
  *(_QWORD *)(*(_QWORD *)v1 + 1296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = (void (*)(uint64_t, uint64_t))v2[139];
    v5 = v2[124];
    v6 = v2[123];
    v7 = v2[118];
    v8 = v2[87];
    swift_bridgeObjectRelease();
    v4(v6, v7);
    v4(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = sub_1001799B8;
  }
  else
  {
    v10 = (void (*)(uint64_t, uint64_t))v2[139];
    v11 = v2[124];
    v12 = v2[123];
    v13 = v2[118];
    v8 = v2[87];
    swift_bridgeObjectRelease();
    v10(v12, v13);
    v10(v11, v13);
    v9 = sub_100176530;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_100176530()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 1256));
  v2 = *(_QWORD *)(v0 + 1256);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = sub_1007C8C68(0, *(_QWORD *)(v2 + 16) + 1, 1, *(_QWORD *)(v0 + 1256));
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1007C8C68(v3 > 1, v4 + 1, 1, v2);
  v5 = *(_QWORD *)(v0 + 928);
  v6 = *(_QWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 792);
  v8 = *(_QWORD *)(v0 + 776);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  sub_1000126EC(v7, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v4, type metadata accessor for KeyDropFetchItem);
  sub_1000126B0(v6, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v5, type metadata accessor for MemberSharingCircle);
  v9 = *(_QWORD *)(v0 + 1296);
  v10 = *(_QWORD *)(v0 + 1248) + 1;
  if (v10 != *(_QWORD *)(v0 + 1120))
  {
    *(_QWORD *)(v0 + 1256) = v2;
    *(_QWORD *)(v0 + 1248) = v10;
    *(_QWORD *)(v0 + 1240) = v9;
    v20 = *(_QWORD *)(v0 + 1104);
    if (v10 >= *(_QWORD *)(v20 + 16))
      __break(1u);
    v21 = *(_QWORD *)(v0 + 1064);
    sub_10005972C(v20+ ((*(unsigned __int8 *)(v0 + 1544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1544))+ *(_QWORD *)(v0 + 1136) * v10, *(_QWORD *)(v0 + 928), type metadata accessor for MemberSharingCircle);
    v22 = *(_QWORD *)(v0 + 208);
    v23 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v22);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 32))(v22);
    v18 = sub_100174F84;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  sub_100302AB0(*(_QWORD *)(v0 + 1216));
  v11 = *(_QWORD *)(v0 + 1032);
  v12 = *(_QWORD *)(v0 + 1048) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 184));
  if (v12 != v11)
  {
    v24 = *(_QWORD *)(v0 + 1048) + 1;
    *(_QWORD *)(v0 + 1056) = v2;
    *(_QWORD *)(v0 + 1048) = v24;
    *(_QWORD *)(v0 + 1040) = v9;
    v25 = *(_QWORD *)(v0 + 696);
    sub_100030784(*(_QWORD *)(v0 + 688) + 40 * v24 + 32, v0 + 184);
    v21 = *(_QWORD *)(v25 + 136);
    *(_QWORD *)(v0 + 1064) = v21;
    v26 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v26);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 8) + 32))(v26);
    v18 = sub_100173D58;
LABEL_11:
    v19 = v21;
    return swift_task_switch(v18, v19, 0);
  }
  v13 = *(_QWORD *)(v0 + 688);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 1312) = v2;
  *(_QWORD *)(v0 + 1304) = 0;
  v14 = *(_QWORD *)(v0 + 1064);
  v15 = *(_QWORD *)(v0 + 688) + 32;
  swift_bridgeObjectRetain(v13);
  sub_100030784(v15, v0 + 144);
  v16 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 176);
  sub_10001AA44((_QWORD *)(v0 + 144), v16);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8) + 32))(v16);
  v18 = sub_100176844;
  v19 = v14;
  return swift_task_switch(v18, v19, 0);
}

uint64_t sub_100176844()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1088);
  v2 = *(unsigned __int8 *)(v0 + 1532);
  v3 = *(_QWORD *)(v0 + 1064);
  v4 = *(_QWORD *)(v0 + 1016);
  v5 = *(_QWORD *)(v0 + 944);
  v6 = (v2 + 24) & ~v2;
  v7 = (v6 + *(_QWORD *)(v0 + 960) + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1072))(v4, *(_QWORD *)(v0 + 1024), v5);
  v9 = swift_allocObject(&unk_10105C9A8, v7 + 8, v8);
  *(_QWORD *)(v0 + 1320) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  *(_QWORD *)(v9 + v7) = 0;
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1328) = v11;
  v12 = sub_10001A9A8(&qword_1010EE100);
  *v11 = v0;
  v11[1] = sub_100176984;
  return unsafeBlocking<A>(_:)(v0 + 560, sub_1000D82C0, v9, v12);
}

uint64_t sub_100176984()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1328));
  swift_release();
  return swift_task_switch(sub_100176A1C, v1, 0);
}

uint64_t sub_100176A1C()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void (*)(uint64_t, uint64_t))v0[139];
  v2 = v0[133];
  v3 = v0[128];
  v4 = v0[118];
  v0[167] = v0[70];
  v1(v3, v4);
  return swift_task_switch(sub_100176A98, v2, 0);
}

uint64_t sub_100176A98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 1344) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100176B38;
  return unsafeBlocking<A>(_:)(v0 + 536, sub_10007C6FC, *(_QWORD *)(v0 + 1064), v3);
}

uint64_t sub_100176B38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1064);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1344));
  swift_release();
  return swift_task_switch(sub_100176BC4, v1, 0);
}

uint64_t sub_100176BC4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[87];
  v0[169] = v0[67];
  return swift_task_switch(sub_100176C2C, v1, 0);
}

uint64_t sub_100176C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 1336);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1360) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 712);
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 1552) = v4;
    *(_QWORD *)(v0 + 1368) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 1384) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1376) = 0;
    v5 = *(_QWORD *)(v0 + 1352);
    v6 = *(_QWORD *)(v0 + 728);
    v7 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v7, v6, type metadata accessor for OwnerSharingCircle);
    sub_100030784(v0 + 144, v0 + 264);
    v8 = swift_allocObject(&unk_10105C9D0, 64, 7);
    *(_QWORD *)(v0 + 1392) = v8;
    *(_QWORD *)(v8 + 16) = v5;
    sub_10000F9FC((__int128 *)(v0 + 264), v8 + 24);
    v9 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 1400) = v10;
    v11 = sub_10001A9A8(&qword_101108F70);
    *v10 = v0;
    v10[1] = sub_100177028;
    return unsafeBlocking<A>(_:)(v0 + 344, sub_1001AE89C, v8, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 1312);
    sub_100302AB0((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    v14 = *(_QWORD *)(v0 + 1032);
    v15 = *(_QWORD *)(v0 + 1304) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
    if (v15 == v14)
    {
      v30 = v13;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v0 + 648);
      v16 = *(_QWORD *)(v0 + 1016);
      v17 = *(_QWORD *)(v0 + 1008);
      v18 = *(_QWORD *)(v0 + 1000);
      v19 = *(_QWORD *)(v0 + 992);
      v20 = *(_QWORD *)(v0 + 984);
      v21 = *(_QWORD *)(v0 + 976);
      v22 = *(_QWORD *)(v0 + 968);
      v23 = *(_QWORD *)(v0 + 936);
      v24 = *(_QWORD *)(v0 + 928);
      v31 = *(_QWORD *)(v0 + 904);
      v32 = *(_QWORD *)(v0 + 896);
      v33 = *(_QWORD *)(v0 + 888);
      v34 = *(_QWORD *)(v0 + 880);
      v35 = *(_QWORD *)(v0 + 872);
      v36 = *(_QWORD *)(v0 + 864);
      v37 = *(_QWORD *)(v0 + 856);
      v38 = *(_QWORD *)(v0 + 832);
      v39 = *(_QWORD *)(v0 + 808);
      v40 = *(_QWORD *)(v0 + 792);
      v41 = *(_QWORD *)(v0 + 784);
      v42 = *(_QWORD *)(v0 + 768);
      v43 = *(_QWORD *)(v0 + 760);
      v44 = *(_QWORD *)(v0 + 752);
      v45 = *(_QWORD *)(v0 + 728);
      v46 = *(_QWORD *)(v0 + 720);
      swift_task_dealloc(*(_QWORD *)(v0 + 1024));
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v30, v29);
    }
    else
    {
      v25 = *(_QWORD *)(v0 + 1304) + 1;
      *(_QWORD *)(v0 + 1312) = v13;
      *(_QWORD *)(v0 + 1304) = v25;
      v26 = *(_QWORD *)(v0 + 1064);
      sub_100030784(*(_QWORD *)(v0 + 688) + 40 * v25 + 32, v0 + 144);
      v27 = *(_QWORD *)(v0 + 168);
      v28 = *(_QWORD *)(v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 144), v27);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v27);
      return swift_task_switch(sub_100176844, v26, 0);
    }
  }
}

uint64_t sub_100177028()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1400);
  *(_QWORD *)(*v1 + 1408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 1336);
    v5 = *(_QWORD *)(v2 + 696);
    swift_release();
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease();
    v6 = sub_100179E34;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 696);
    swift_release();
    v6 = sub_100177110;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100177110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 1384);
  v2 = *(uint64_t **)(v0 + 880);
  sub_10001BC14(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 1416) = v3;
  *(_QWORD *)(v0 + 1424) = v4;
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  sub_10001AA44((_QWORD *)(v0 + 144), v5);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
  sub_10001BBBC(v3, v4);
  v8(v5, v7);
  *v2 = v3;
  v2[1] = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v10 = *(_QWORD *)(v0 + 1384);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v10 = sub_1007C8C54(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(_QWORD *)(v10 + 24);
  if (v12 >= v11 >> 1)
    v10 = sub_1007C8C54(v11 > 1, v12 + 1, 1, v10);
  *(_QWORD *)(v0 + 1432) = v10;
  v13 = *(_QWORD *)(v0 + 880);
  v14 = *(_QWORD *)(v0 + 848);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 704);
  v17 = *(_QWORD *)(v0 + 696);
  *(_QWORD *)(v10 + 16) = v12 + 1;
  v18 = *(_DWORD *)(v14 + 80);
  *(_DWORD *)(v0 + 1556) = v18;
  v19 = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v0 + 1440) = v19;
  sub_1000126EC(v13, v10 + ((v18 + 32) & ~(unint64_t)v18) + v19 * v12, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  *(_QWORD *)(v0 + 1448) = *(_QWORD *)(v17 + 128);
  v20 = *(int *)(v16 + 20);
  *(_DWORD *)(v0 + 1560) = *(_DWORD *)(v16 + 24);
  v21 = (_QWORD *)swift_task_alloc(dword_10110D164);
  *(_QWORD *)(v0 + 1456) = v21;
  *v21 = v0;
  v21[1] = sub_1001772D0;
  return sub_10090C6D8(v0 + 16, v15 + v20);
}

uint64_t sub_1001772D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1456);
  *(_QWORD *)(*(_QWORD *)v1 + 1464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v2[185] = v0;
    v4 = v2[167];
    v5 = v2[87];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v4, 2);
    v6 = sub_100178344;
    v7 = v5;
  }
  else
  {
    v7 = v2[181];
    v6 = sub_1001773A4;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_1001773A4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 12;
    swift_willThrow(v3);
    sub_1000D9530((uint64_t *)(v0 + 16));
    *(_QWORD *)(v0 + 1480) = v3;
    v5 = *(_QWORD *)(v0 + 1336);
    v6 = *(_QWORD *)(v0 + 696);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v5, 2);
    v7 = sub_100178344;
    v8 = v6;
  }
  else
  {
    v9 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 1072);
    v10 = *(_QWORD *)(v0 + 944);
    v11 = *(uint64_t **)(v0 + 872);
    v12 = *(_QWORD *)(v0 + 840);
    v13 = *(_QWORD *)(v0 + 696);
    v14 = *(_QWORD *)(v0 + 728) + *(int *)(v0 + 1560);
    v15 = *(_QWORD *)(v0 + 56);
    sub_10001BBBC(v15, *(_QWORD *)(v0 + 64));
    sub_1000D9530((uint64_t *)(v0 + 16));
    v9((char *)v11 + *(int *)(v12 + 20), v14, v10);
    *v11 = v15;
    v11[1] = v1;
    v7 = sub_100177508;
    v8 = v13;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100177508()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v36;

  v1 = *(_QWORD *)(v0 + 1432);
  sub_10005972C(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 864), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v0 + 1432);
  if (v3 >= v2 >> 1)
    v4 = sub_1007C8C54(v2 > 1, v3 + 1, 1, *(_QWORD *)(v0 + 1432));
  *(_QWORD *)(v0 + 1472) = v4;
  v5 = *(_QWORD *)(v0 + 1440);
  v6 = *(unsigned __int8 *)(v0 + 1556);
  v7 = *(_QWORD *)(v0 + 1424);
  v8 = *(_QWORD *)(v0 + 1416);
  v9 = *(_QWORD *)(v0 + 1360);
  v10 = *(_QWORD *)(v0 + 872);
  v11 = *(_QWORD *)(v0 + 864);
  v12 = *(_QWORD *)(v0 + 728);
  v13 = *(_QWORD *)(v0 + 1376) + 1;
  *(_QWORD *)(v4 + 16) = v3 + 1;
  sub_1000126EC(v11, v4 + ((v6 + 32) & ~v6) + v5 * v3, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_10001BC14(v8, v7);
  sub_1000126B0(v10, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_1000126B0(v12, type metadata accessor for OwnerSharingCircle);
  if (v13 == v9)
  {
    v14 = *(_DWORD **)(v0 + 704);
    swift_bridgeObjectRelease();
    v15 = (int)v14[6];
    *(_DWORD *)(v0 + 1564) = v15;
    v16 = (int)v14[7];
    *(_DWORD *)(v0 + 1568) = v16;
    *(_DWORD *)(v0 + 1572) = v14[5];
    *(_QWORD *)(v0 + 1496) = *(_QWORD *)(v0 + 1312);
    *(_QWORD *)(v0 + 1488) = 0;
    v17 = *(_QWORD *)(v0 + 1336);
    if (!*(_QWORD *)(v17 + 16))
    {
      __break(1u);
      JUMPOUT(0x100178294);
    }
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
    v19 = *(_QWORD *)(v0 + 976);
    v20 = *(_QWORD *)(v0 + 944);
    v21 = *(_QWORD *)(v0 + 720);
    v22 = v21 + v15;
    sub_10005972C(v17 + ((*(unsigned __int8 *)(v0 + 1552) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1552)), v21, type metadata accessor for OwnerSharingCircle);
    v18(v19, v22, v20);
    v23 = *(_BYTE *)(v21 + v16);
    v24 = *(_QWORD *)(v0 + 1472);
    v25 = *(_QWORD *)(v0 + 720);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 1072))(*(_QWORD *)(v0 + 968), v25 + *(int *)(v0 + 1572), *(_QWORD *)(v0 + 944));
    sub_1000126B0(v25, type metadata accessor for OwnerSharingCircle);
    v26 = *(_QWORD *)(v24 + 16);
    if (v26)
    {
      v27 = *(_QWORD *)(v0 + 1472);
      *(_QWORD *)(v0 + 520) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v27);
      sub_10009ABA4(0, v26, 0);
      v28 = *(_QWORD *)(v0 + 856);
      sub_10005972C(*(_QWORD *)(v0 + 1472)+ ((*(unsigned __int8 *)(v0 + 1556) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1556)), v28, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
      __asm { BR              X10 }
    }
    *(_QWORD *)(v0 + 1504) = _swiftEmptyArrayStorage;
    v36 = (_QWORD *)swift_task_alloc(dword_1010F196C);
    *(_QWORD *)(v0 + 1512) = v36;
    *v36 = v0;
    v36[1] = sub_1001788E8;
    return sub_10017BF6C(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 976), 0x201u >> (8 * v23), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 680), (uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 1376) + 1;
    *(_QWORD *)(v0 + 1384) = v4;
    *(_QWORD *)(v0 + 1376) = v29;
    v30 = *(_QWORD *)(v0 + 1352);
    sub_10005972C(*(_QWORD *)(v0 + 1336)+ ((*(unsigned __int8 *)(v0 + 1552) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1552))+ *(_QWORD *)(v0 + 1368) * v29, *(_QWORD *)(v0 + 728), type metadata accessor for OwnerSharingCircle);
    sub_100030784(v0 + 144, v0 + 264);
    v31 = swift_allocObject(&unk_10105C9D0, 64, 7);
    *(_QWORD *)(v0 + 1392) = v31;
    *(_QWORD *)(v31 + 16) = v30;
    sub_10000F9FC((__int128 *)(v0 + 264), v31 + 24);
    v32 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v33 = (_QWORD *)swift_task_alloc(v32);
    *(_QWORD *)(v0 + 1400) = v33;
    v34 = sub_10001A9A8(&qword_101108F70);
    *v33 = v0;
    v33[1] = sub_100177028;
    return unsafeBlocking<A>(_:)(v0 + 344, sub_1001AE89C, v31, v34);
  }
}

uint64_t sub_100178344()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[2];

  v1 = (_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 728);
  sub_10001BC14(*(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424));
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerSharingCircle);
  v3 = *(_QWORD *)(v0 + 1480);
  v4 = *(_QWORD *)(v0 + 1312);
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B69B0);
  sub_100030784(v0 + 144, v0 + 224);
  swift_errorRetain(v3);
  v6 = swift_errorRetain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v57 = v4;
  if (os_log_type_enabled(v7, v8))
  {
    v54 = v8;
    v45 = *(void (**)(uint64_t, uint64_t))(v0 + 1112);
    v9 = *(_QWORD *)(v0 + 1024);
    v10 = *(_QWORD *)(v0 + 944);
    v11 = swift_slowAlloc(32, -1);
    v52 = swift_slowAlloc(64, -1);
    v58[0] = v52;
    *(_DWORD *)v11 = 141558531;
    *(_QWORD *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    v13 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v13);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v13);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    v17 = v16;
    v18 = v10;
    v4 = v57;
    v45(v9, v18);
    *(_QWORD *)(v0 + 488) = sub_100016940(v15, v17, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v11 + 14, v11 + 22);
    v1 = (_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    *(_WORD *)(v11 + 22) = 2080;
    swift_getErrorValue(v3, v0 + 496, v0 + 376);
    v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    *(_QWORD *)(v0 + 512) = sub_100016940(v19, v20, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v7, v54, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v21 = *(_QWORD *)(v0 + 1032);
  v22 = *(_QWORD *)(v0 + 1304) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v22 == v21)
  {
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v0 + 1016);
    v24 = *(_QWORD *)(v0 + 1008);
    v25 = *(_QWORD *)(v0 + 1000);
    v26 = *(_QWORD *)(v0 + 992);
    v27 = *(_QWORD *)(v0 + 984);
    v28 = *(_QWORD *)(v0 + 976);
    v29 = *(_QWORD *)(v0 + 968);
    v30 = *(_QWORD *)(v0 + 936);
    v31 = *(_QWORD *)(v0 + 928);
    v37 = *(_QWORD *)(v0 + 648);
    v38 = *(_QWORD *)(v0 + 904);
    v39 = *(_QWORD *)(v0 + 896);
    v40 = *(_QWORD *)(v0 + 888);
    v41 = *(_QWORD *)(v0 + 880);
    v42 = *(_QWORD *)(v0 + 872);
    v43 = *(_QWORD *)(v0 + 864);
    v44 = *(_QWORD *)(v0 + 856);
    v46 = *(_QWORD *)(v0 + 832);
    v47 = *(_QWORD *)(v0 + 808);
    v48 = *(_QWORD *)(v0 + 792);
    v49 = *(_QWORD *)(v0 + 784);
    v50 = *(_QWORD *)(v0 + 768);
    v51 = *(_QWORD *)(v0 + 760);
    v53 = *(_QWORD *)(v0 + 752);
    v55 = *(_QWORD *)(v0 + 728);
    v56 = *(_QWORD *)(v0 + 720);
    swift_task_dealloc(*(_QWORD *)(v0 + 1024));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v57, v37);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 1304) + 1;
    *(_QWORD *)(v0 + 1312) = v4;
    *(_QWORD *)(v0 + 1304) = v33;
    v34 = *(_QWORD *)(v0 + 1064);
    sub_100030784(*(_QWORD *)(v0 + 688) + 40 * v33 + 32, (uint64_t)v1);
    v35 = *(_QWORD *)(v0 + 168);
    v36 = *(_QWORD *)(v0 + 176);
    sub_10001AA44(v1, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8) + 32))(v35);
    return swift_task_switch(sub_100176844, v34, 0);
  }
}

uint64_t sub_1001788E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1512);
  *(_QWORD *)(*(_QWORD *)v1 + 1520) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = (void (*)(uint64_t, uint64_t))v2[139];
    v5 = v2[122];
    v6 = v2[121];
    v7 = v2[118];
    v8 = v2[87];
    swift_bridgeObjectRelease();
    v4(v6, v7);
    v4(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = sub_10017A3D0;
  }
  else
  {
    v10 = (void (*)(uint64_t, uint64_t))v2[139];
    v11 = v2[122];
    v12 = v2[121];
    v13 = v2[118];
    v8 = v2[87];
    swift_bridgeObjectRelease();
    v10(v12, v13);
    v10(v11, v13);
    v9 = sub_100178A2C;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_100178A2C()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *__dst;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 1496));
  v2 = *(_QWORD *)(v0 + 1496);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = sub_1007C8C68(0, *(_QWORD *)(v2 + 16) + 1, 1, *(_QWORD *)(v0 + 1496));
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1007C8C68(v3 > 1, v4 + 1, 1, v2);
  v5 = *(_QWORD *)(v0 + 1360);
  v6 = *(_QWORD *)(v0 + 784);
  v7 = *(_QWORD *)(v0 + 776);
  v8 = *(_QWORD *)(v0 + 1488) + 1;
  *(_QWORD *)(v2 + 16) = v4 + 1;
  sub_1000126EC(v6, v2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v4, type metadata accessor for KeyDropFetchItem);
  if (v8 == v5)
  {
    swift_bridgeObjectRelease();
    sub_100302AB0(*(_QWORD *)(v0 + 1472));
    swift_release();
    v9 = *(_QWORD *)(v0 + 1032);
    v10 = *(_QWORD *)(v0 + 1304) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
    if (v10 == v9)
    {
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(v0 + 1016);
      v12 = *(_QWORD *)(v0 + 1008);
      v13 = *(_QWORD *)(v0 + 1000);
      v14 = *(_QWORD *)(v0 + 992);
      v15 = *(_QWORD *)(v0 + 984);
      v16 = *(_QWORD *)(v0 + 976);
      v17 = *(_QWORD *)(v0 + 968);
      v18 = *(_QWORD *)(v0 + 936);
      v39 = *(_QWORD *)(v0 + 648);
      v40 = *(_QWORD *)(v0 + 928);
      v41 = *(_QWORD *)(v0 + 904);
      v42 = *(_QWORD *)(v0 + 896);
      v43 = *(_QWORD *)(v0 + 888);
      v44 = *(_QWORD *)(v0 + 880);
      v45 = *(_QWORD *)(v0 + 872);
      v46 = *(_QWORD *)(v0 + 864);
      v47 = *(_QWORD *)(v0 + 856);
      v48 = *(_QWORD *)(v0 + 832);
      v49 = *(_QWORD *)(v0 + 808);
      v50 = *(_QWORD *)(v0 + 792);
      v51 = *(_QWORD *)(v0 + 784);
      v52 = *(_QWORD *)(v0 + 768);
      __dst = *(void **)(v0 + 760);
      v54 = *(_QWORD *)(v0 + 752);
      v55 = *(_QWORD *)(v0 + 728);
      v56 = *(_QWORD *)(v0 + 720);
      swift_task_dealloc(*(_QWORD *)(v0 + 1024));
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(__dst);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      return (*(uint64_t (**)(unint64_t, uint64_t))(v0 + 8))(v2, v39);
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 1304) + 1;
      *(_QWORD *)(v0 + 1312) = v2;
      *(_QWORD *)(v0 + 1304) = v34;
      v35 = *(_QWORD *)(v0 + 1064);
      sub_100030784(*(_QWORD *)(v0 + 688) + 40 * v34 + 32, v0 + 144);
      v36 = *(_QWORD *)(v0 + 168);
      v37 = *(_QWORD *)(v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 144), v36);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v37 + 8) + 8) + 32))(v36);
      return swift_task_switch(sub_100176844, v35, 0);
    }
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 1488) + 1;
    *(_QWORD *)(v0 + 1496) = v2;
    *(_QWORD *)(v0 + 1488) = v20;
    v21 = *(_QWORD *)(v0 + 1336);
    if (v20 >= *(_QWORD *)(v21 + 16))
    {
      __break(1u);
      JUMPOUT(0x100179908);
    }
    v22 = *(int *)(v0 + 1568);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
    v24 = *(_QWORD *)(v0 + 976);
    v25 = *(_QWORD *)(v0 + 944);
    v26 = *(_QWORD *)(v0 + 720);
    v27 = v26 + *(int *)(v0 + 1564);
    sub_10005972C(v21+ ((*(unsigned __int8 *)(v0 + 1552) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1552))+ *(_QWORD *)(v0 + 1368) * v20, v26, type metadata accessor for OwnerSharingCircle);
    v23(v24, v27, v25);
    v28 = *(_BYTE *)(v26 + v22);
    v29 = *(_QWORD *)(v0 + 1472);
    v30 = *(_QWORD *)(v0 + 720);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 1072))(*(_QWORD *)(v0 + 968), v30 + *(int *)(v0 + 1572), *(_QWORD *)(v0 + 944));
    sub_1000126B0(v30, type metadata accessor for OwnerSharingCircle);
    v31 = *(_QWORD *)(v29 + 16);
    if (v31)
    {
      v32 = *(_QWORD *)(v0 + 1472);
      *(_QWORD *)(v0 + 520) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v32);
      sub_10009ABA4(0, v31, 0);
      v33 = *(_QWORD *)(v0 + 856);
      sub_10005972C(*(_QWORD *)(v0 + 1472)+ ((*(unsigned __int8 *)(v0 + 1556) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1556)), v33, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
      __asm { BR              X10 }
    }
    *(_QWORD *)(v0 + 1504) = _swiftEmptyArrayStorage;
    v38 = (_QWORD *)swift_task_alloc(dword_1010F196C);
    *(_QWORD *)(v0 + 1512) = v38;
    *v38 = v0;
    v38[1] = sub_1001788E8;
    return sub_10017BF6C(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 976), 0x201u >> (8 * v28), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 680), (uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1001799B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  os_log_type_t type;
  uint64_t v36;
  uint64_t v37[2];

  v1 = v0 + 23;
  v2 = v0[116];
  sub_1000126B0(v0[104], type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v2, type metadata accessor for MemberSharingCircle);
  v3 = v0[162];
  v4 = v0[157];
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  sub_10001A9E8(v0[150], (uint64_t)qword_1011B69B0);
  sub_100030784((uint64_t)(v0 + 23), (uint64_t)(v0 + 38));
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    type = v7;
    v33 = (void (*)(uint64_t, uint64_t))v0[139];
    v8 = v0[128];
    v9 = v0[118];
    v36 = v4;
    v10 = swift_slowAlloc(32, -1);
    v34 = swift_slowAlloc(64, -1);
    v37[0] = v34;
    *(_DWORD *)v10 = 141558531;
    v0[71] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 71, v0 + 72, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = v0[41];
    v11 = v0[42];
    sub_10001AA44(v0 + 38, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    v16 = v15;
    v33(v8, v9);
    v0[72] = sub_100016940(v14, v16, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 73, v10 + 14, v10 + 22);
    v1 = v0 + 23;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v3, v0 + 73, v0 + 50);
    v17 = Error.localizedDescription.getter(v0[51], v0[52]);
    v0[75] = sub_100016940(v17, v18, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 75, v0 + 76, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    v19 = v10;
    v4 = v36;
    swift_slowDealloc(v19, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v20 = v0[129];
  v21 = v0[131] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    v22 = v0[86];
    swift_bridgeObjectRelease();
    v0[164] = v4;
    v0[163] = 0;
    v23 = v0[133];
    v24 = v0[86] + 32;
    swift_bridgeObjectRetain(v22);
    sub_100030784(v24, (uint64_t)(v0 + 18));
    v25 = v0[21];
    v26 = v0[22];
    sub_10001AA44(v0 + 18, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 8) + 32))(v25);
    v27 = sub_100176844;
  }
  else
  {
    v28 = v0[131] + 1;
    v0[132] = v4;
    v0[131] = v28;
    v0[130] = 0;
    v29 = v0[87];
    sub_100030784(v0[86] + 40 * v28 + 32, (uint64_t)v1);
    v23 = *(_QWORD *)(v29 + 136);
    v0[133] = v23;
    v30 = v0[26];
    v31 = v0[27];
    sub_10001AA44(v1, v30);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) + 32))(v30);
    v27 = sub_100173D58;
  }
  return swift_task_switch(v27, v23, 0);
}

uint64_t sub_100179E34()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *log;
  os_log_t loga;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[2];

  v1 = (_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 728);
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerSharingCircle);
  v3 = *(_QWORD *)(v0 + 1408);
  v4 = *(_QWORD *)(v0 + 1312);
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B69B0);
  sub_100030784(v0 + 144, v0 + 224);
  swift_errorRetain(v3);
  v6 = swift_errorRetain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v57 = v4;
  if (os_log_type_enabled(v7, v8))
  {
    v54 = v8;
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 1112);
    log = v7;
    v9 = *(_QWORD *)(v0 + 1024);
    v10 = *(_QWORD *)(v0 + 944);
    v11 = swift_slowAlloc(32, -1);
    v52 = swift_slowAlloc(64, -1);
    v58[0] = v52;
    *(_DWORD *)v11 = 141558531;
    *(_QWORD *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    v13 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v13);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v13);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    v17 = v16;
    v43(v9, v10);
    *(_QWORD *)(v0 + 488) = sub_100016940(v15, v17, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v11 + 14, v11 + 22);
    v1 = (_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    *(_WORD *)(v11 + 22) = 2080;
    swift_getErrorValue(v3, v0 + 496, v0 + 376);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    *(_QWORD *)(v0 + 512) = sub_100016940(v18, v19, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, log, v54, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v20 = *(_QWORD *)(v0 + 1032);
  v21 = *(_QWORD *)(v0 + 1304) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v0 + 1016);
    v23 = *(_QWORD *)(v0 + 1008);
    v24 = *(_QWORD *)(v0 + 1000);
    v25 = *(_QWORD *)(v0 + 992);
    v26 = *(_QWORD *)(v0 + 984);
    v27 = *(_QWORD *)(v0 + 976);
    v28 = *(_QWORD *)(v0 + 968);
    v29 = *(_QWORD *)(v0 + 936);
    v30 = *(_QWORD *)(v0 + 928);
    v36 = *(_QWORD *)(v0 + 648);
    v37 = *(_QWORD *)(v0 + 904);
    v38 = *(_QWORD *)(v0 + 896);
    v39 = *(_QWORD *)(v0 + 888);
    v40 = *(_QWORD *)(v0 + 880);
    v41 = *(_QWORD *)(v0 + 872);
    v42 = *(_QWORD *)(v0 + 864);
    v44 = *(_QWORD *)(v0 + 856);
    v45 = *(_QWORD *)(v0 + 832);
    v46 = *(_QWORD *)(v0 + 808);
    v47 = *(_QWORD *)(v0 + 792);
    v48 = *(_QWORD *)(v0 + 784);
    v49 = *(_QWORD *)(v0 + 768);
    loga = *(os_log_t *)(v0 + 760);
    v53 = *(_QWORD *)(v0 + 752);
    v55 = *(_QWORD *)(v0 + 728);
    v56 = *(_QWORD *)(v0 + 720);
    swift_task_dealloc(*(_QWORD *)(v0 + 1024));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(loga);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v57, v36);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 1304) + 1;
    *(_QWORD *)(v0 + 1312) = v4;
    *(_QWORD *)(v0 + 1304) = v32;
    v33 = *(_QWORD *)(v0 + 1064);
    sub_100030784(*(_QWORD *)(v0 + 688) + 40 * v32 + 32, (uint64_t)v1);
    v35 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 176);
    sub_10001AA44(v1, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 8) + 32))(v35);
    return swift_task_switch(sub_100176844, v33, 0);
  }
}

uint64_t sub_10017A3D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *log;
  os_log_t loga;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];

  v1 = (_QWORD *)(v0 + 144);
  swift_release();
  v2 = *(_QWORD *)(v0 + 1520);
  v3 = *(_QWORD *)(v0 + 1496);
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B69B0);
  sub_100030784(v0 + 144, v0 + 224);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v56 = v3;
  if (os_log_type_enabled(v6, v7))
  {
    v53 = v7;
    v42 = *(void (**)(uint64_t, uint64_t))(v0 + 1112);
    log = v6;
    v8 = *(_QWORD *)(v0 + 1024);
    v9 = *(_QWORD *)(v0 + 944);
    v10 = swift_slowAlloc(32, -1);
    v51 = swift_slowAlloc(64, -1);
    v57[0] = v51;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = *(_QWORD *)(v0 + 248);
    v11 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    v16 = v15;
    v42(v8, v9);
    *(_QWORD *)(v0 + 488) = sub_100016940(v14, v16, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v10 + 14, v10 + 22);
    v1 = (_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 496, v0 + 376);
    v17 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    *(_QWORD *)(v0 + 512) = sub_100016940(v17, v18, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, log, v53, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v19 = *(_QWORD *)(v0 + 1032);
  v20 = *(_QWORD *)(v0 + 1304) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v20 == v19)
  {
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v0 + 1016);
    v22 = *(_QWORD *)(v0 + 1008);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 992);
    v25 = *(_QWORD *)(v0 + 984);
    v26 = *(_QWORD *)(v0 + 976);
    v27 = *(_QWORD *)(v0 + 968);
    v28 = *(_QWORD *)(v0 + 936);
    v29 = *(_QWORD *)(v0 + 928);
    v35 = *(_QWORD *)(v0 + 648);
    v36 = *(_QWORD *)(v0 + 904);
    v37 = *(_QWORD *)(v0 + 896);
    v38 = *(_QWORD *)(v0 + 888);
    v39 = *(_QWORD *)(v0 + 880);
    v40 = *(_QWORD *)(v0 + 872);
    v41 = *(_QWORD *)(v0 + 864);
    v43 = *(_QWORD *)(v0 + 856);
    v44 = *(_QWORD *)(v0 + 832);
    v45 = *(_QWORD *)(v0 + 808);
    v46 = *(_QWORD *)(v0 + 792);
    v47 = *(_QWORD *)(v0 + 784);
    v48 = *(_QWORD *)(v0 + 768);
    loga = *(os_log_t *)(v0 + 760);
    v52 = *(_QWORD *)(v0 + 752);
    v54 = *(_QWORD *)(v0 + 728);
    v55 = *(_QWORD *)(v0 + 720);
    swift_task_dealloc(*(_QWORD *)(v0 + 1024));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(loga);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v56, v35);
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 1304) + 1;
    *(_QWORD *)(v0 + 1312) = v3;
    *(_QWORD *)(v0 + 1304) = v31;
    v32 = *(_QWORD *)(v0 + 1064);
    sub_100030784(*(_QWORD *)(v0 + 688) + 40 * v31 + 32, (uint64_t)v1);
    v34 = *(_QWORD *)(v0 + 168);
    v33 = *(_QWORD *)(v0 + 176);
    sub_10001AA44(v1, v34);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v33 + 8) + 8) + 32))(v34);
    return swift_task_switch(sub_100176844, v32, 0);
  }
}

uint64_t sub_10017A958(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 56) = a5;
  *(_QWORD *)(v6 + 64) = v5;
  *(_QWORD *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 48) = a4;
  *(_BYTE *)(v6 + 176) = a3;
  *(_QWORD *)(v6 + 32) = a1;
  return swift_task_switch(sub_10017A97C, v5, 0);
}

uint64_t sub_10017A97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, char, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    if (qword_1010E99C0 != -1)
    {
      swift_once(&qword_1010E99C0, sub_100173218);
      v1 = *(_QWORD *)(v0 + 32);
    }
    v3 = *(_QWORD *)(v0 + 40);
    v4 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 72) = sub_10001A9E8(v4, (uint64_t)qword_1011B69B0);
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v8 = 134217984;
      *(_QWORD *)(v0 + 24) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching %ld items.", v8, 0xCu);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    v16 = *(_QWORD *)(v0 + 56);
    v17 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 248);
    v18 = unk_101115204;
    v20 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t))((char *)&dword_101115200 + dword_101115200);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
    swift_bridgeObjectRetain(v16);
    swift_retain();
    v19 = (_QWORD *)swift_task_alloc(v18);
    *(_QWORD *)(v0 + 80) = v19;
    *v19 = v0;
    v19[1] = sub_10017AC2C;
    return v20(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 176), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v17);
  }
  else
  {
    if (qword_1010E99C0 != -1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B69B0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No items to fetch.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = sub_1006B968C((uint64_t)_swiftEmptyArrayStorage);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v14);
  }
}

uint64_t sub_10017AC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*v4 + 80);
  v6 = *v4;
  *(_QWORD *)(v6 + 88) = a1;
  *(_QWORD *)(v6 + 96) = a2;
  *(_QWORD *)(v6 + 104) = a3;
  swift_task_dealloc(v5);
  if (v3)
    return (*(uint64_t (**)(void))(v6 + 8))();
  else
    return swift_task_switch(sub_10017ACA4, *(_QWORD *)(v6 + 64), 0);
}

uint64_t sub_10017ACA4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for KeyDropInterface();
  v2 = swift_allocObject(v1, 128, 15);
  v0[14] = v2;
  swift_defaultActor_initialize(v2);
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  v3 = (uint64_t **)swift_task_alloc(dword_10111569C);
  v0[15] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10017AD18;
  return sub_100B2CEC4(v0[11], v0[12], v0[13]);
}

uint64_t sub_10017AD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v11;
  uint64_t v12;

  v8 = (*v5)[15];
  v9 = *v5;
  v9[16] = a2;
  v9[17] = a4;
  v9[18] = v4;
  swift_task_dealloc(v8);
  if (v4)
    return swift_task_switch(sub_10017AF74, v9[8], 0);
  v11 = (uint64_t **)swift_task_alloc(dword_1010F192C);
  v9[19] = (uint64_t)v11;
  *v11 = v9;
  v11[1] = (uint64_t *)sub_10017ADC8;
  return sub_100188B64((uint64_t)v11, a2, v12, a4, v9[5]);
}

uint64_t sub_10017ADC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  v3[20] = a1;
  v3[21] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[8];
    v6 = sub_10017AFBC;
  }
  else
  {
    v7 = v3[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = sub_10017AE4C;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10017AE4C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;

  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 160));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 160);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetch returning results for %ld beacon(s).", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

uint64_t sub_10017AF74()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017AFBC()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017B020(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2[14] = a1;
  v2[15] = v1;
  v3 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v2[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[17] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v5);
  v2[19] = swift_task_alloc(v5);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnerSharingCircle(0);
  v2[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[22] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v9);
  v2[24] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v2[25] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[26] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v2[27] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[28] = swift_task_alloc(v13);
  v2[29] = swift_task_alloc(v13);
  v2[30] = swift_task_alloc(v13);
  return swift_task_switch(sub_10017B134, v1, 0);
}

uint64_t sub_10017B134()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 136);
  *(_QWORD *)(v0 + 248) = v1;
  return swift_task_switch(sub_10017B150, v1, 0);
}

uint64_t sub_10017B150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 256) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 400) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_10105CB60, v10 + 8, v8 | 7);
  *(_QWORD *)(v0 + 264) = v11;
  *(_QWORD *)(v11 + 16) = v1;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 272) = v12;
  v12(v11 + v9, v2, v5);
  *(_QWORD *)(v11 + v10) = 0;
  v13 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 280) = v14;
  v15 = sub_10001A9A8(&qword_1010EE100);
  *v14 = v0;
  v14[1] = sub_10017B264;
  return unsafeBlocking<A>(_:)(v0 + 80, sub_1000D82C0, v11, v15);
}

uint64_t sub_10017B264()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_10017B2C8, v1, 0);
}

uint64_t sub_10017B2C8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[15];
  v0[36] = v0[10];
  return swift_task_switch(sub_10017B2E4, v1, 0);
}

void sub_10017B2E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[36];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = v0[21];
    v16 = v0[22];
    v15 = v4;
    while (v3 < *(_QWORD *)(v1 + 16))
    {
      v5 = v0[24];
      v6 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      v7 = *(_QWORD *)(v16 + 72);
      sub_10005972C(v0[36] + v6 + v7 * v3, v5, type metadata accessor for OwnerSharingCircle);
      v8 = v0[24];
      if (*(_BYTE *)(v5 + *(int *)(v4 + 36)) == 2)
      {
        sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        v9 = v2;
        v10 = v1;
        sub_1000126EC(v8, v0[23], type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A520(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v12 = _swiftEmptyArrayStorage[2];
        v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1)
          sub_10009A520(v11 > 1, v12 + 1, 1);
        v13 = v0[23];
        _swiftEmptyArrayStorage[2] = v12 + 1;
        sub_1000126EC(v13, (uint64_t)_swiftEmptyArrayStorage + v6 + v12 * v7, type metadata accessor for OwnerSharingCircle);
        v1 = v10;
        v2 = v9;
        v4 = v15;
      }
      if (v2 == ++v3)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    v0[37] = _swiftEmptyArrayStorage;
    v14 = v0[31];
    swift_bridgeObjectRelease();
    swift_task_switch(sub_10017B488, v14, 0);
  }
}

uint64_t sub_10017B488()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
  v2 = *(unsigned __int8 *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 216);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 256))(v4, *(_QWORD *)(v0 + 112), v5);
  v9 = swift_allocObject(&unk_10105CB88, v7, v8);
  *(_QWORD *)(v0 + 304) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 312) = v11;
  v12 = sub_10001A9A8(&qword_1010EC840);
  *v11 = v0;
  v11[1] = sub_10017B584;
  return unsafeBlocking<A>(_:)(v0 + 88, sub_1000D9288, v9, v12);
}

uint64_t sub_10017B584()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  swift_release();
  return swift_task_switch(sub_10017B5E4, v1, 0);
}

uint64_t sub_10017B5E4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[15];
  v0[40] = v0[11];
  return swift_task_switch(sub_10017B600, v1, 0);
}

uint64_t sub_10017B600()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = (char *)sub_100172F38(*(_QWORD *)(v0 + 296));
  swift_release();
  v3 = sub_1001730A8(v1);
  swift_bridgeObjectRelease();
  sub_1003028FC((uint64_t)v3);
  *(_QWORD *)(v0 + 328) = v2;
  v4 = *((_QWORD *)v2 + 2);
  *(_QWORD *)(v0 + 336) = v4;
  if (v4)
  {
    v5 = (*(unsigned __int8 *)(v0 + 400) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 400);
    v6 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)(v0 + 352) = 0;
    *(_QWORD *)(v0 + 360) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 344) = v8;
    v9 = *(_QWORD *)(v0 + 160);
    (*(void (**)(uint64_t, char *, uint64_t))(v0 + 256))(v9, &v2[v5], v6);
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56);
    *(_QWORD *)(v0 + 368) = v10;
    v10(v9, 0, 1, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6) != 1)
    {
      v11 = *(_QWORD *)(v0 + 120);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 200));
      *(_QWORD *)(v0 + 376) = *(_QWORD *)(v11 + 128);
      v12 = (_QWORD *)swift_task_alloc(dword_10110D164);
      *(_QWORD *)(v0 + 384) = v12;
      *v12 = v0;
      v12[1] = sub_10017B80C;
      return sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 232));
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 56))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 200));
  }
  v14 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10017B80C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 384));
  if (v0)
  {
    v2[49] = v0;
    v3 = v2[15];
    v4 = sub_10017BBF0;
  }
  else
  {
    v3 = v2[47];
    v4 = sub_10017B874;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10017B874()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)();
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[8];
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 12;
    swift_willThrow(v3);
    sub_1000D9530(v0 + 2);
    v0[49] = v3;
    v5 = v0[15];
    v6 = sub_10017BBF0;
  }
  else
  {
    v7 = (void (*)(char *, uint64_t, uint64_t))v0[32];
    v8 = v0[25];
    v9 = (uint64_t *)v0[19];
    v10 = v0[15];
    v11 = v0[16];
    v12 = v0[14];
    v13 = v0[7];
    sub_10001BBBC(v13, v0[8]);
    sub_1000D9530(v0 + 2);
    v7((char *)v9 + *(int *)(v11 + 20), v12, v8);
    *v9 = v13;
    v9[1] = v1;
    v6 = sub_10017B96C;
    v5 = v10;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10017B96C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;

  v1 = *(_QWORD *)(v0 + 360);
  sub_10005972C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 144), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD *)(v0 + 360);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8C54(0, *(_QWORD *)(v3 + 16) + 1, 1, *(_QWORD *)(v0 + 360));
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8C54(v4 > 1, v5 + 1, 1, v3);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v3 + 16) = v5 + 1;
  sub_1000126EC(v9, v3+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v5, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_1000126B0(v10, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v12 = *(_QWORD *)(v0 + 352) + 1;
  if (v12 == *(_QWORD *)(v0 + 336))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 368))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 200));
LABEL_8:
    v18 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 240);
    v19 = *(_QWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 192);
    v23 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v3);
  }
  *(_QWORD *)(v0 + 352) = v12;
  *(_QWORD *)(v0 + 360) = v3;
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 256))(v15, *(_QWORD *)(v0 + 328)+ ((*(unsigned __int8 *)(v0 + 400) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 400))+ *(_QWORD *)(v0 + 344) * v12, v13);
  v16 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56);
  *(_QWORD *)(v0 + 368) = v16;
  v16(v15, 0, 1, v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) == 1)
    goto LABEL_8;
  v26 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 200));
  *(_QWORD *)(v0 + 376) = *(_QWORD *)(v26 + 128);
  v27 = (_QWORD *)swift_task_alloc(dword_10110D164);
  *(_QWORD *)(v0 + 384) = v27;
  *v27 = v0;
  v27[1] = sub_10017B80C;
  return sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 232));
}

uint64_t sub_10017BBF0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 256);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = v1(v2, v3, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 208);
  if (v9)
  {
    v39 = *(_QWORD *)(v0 + 232);
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(32, -1);
    v40 = v16;
    *(_DWORD *)v15 = 141558275;
    *(_QWORD *)(v15 + 4) = 1752392040;
    *(_WORD *)(v15 + 12) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(_QWORD *)(v15 + 14) = sub_100016940(v18, v19, &v40);
    swift_bridgeObjectRelease();
    v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v20(v11, v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "No own device key for shareId %{private,mask.hash}s.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
    swift_errorRelease(v10);

    v20(v39, v14);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 392));

    v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v11, v14);
    v21(v12, v14);
  }
  v22 = *(_QWORD *)(v0 + 360);
  v23 = *(_QWORD *)(v0 + 352) + 1;
  if (v23 == *(_QWORD *)(v0 + 336))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 368))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 200));
LABEL_9:
    v29 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 224);
    v32 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 192);
    v34 = *(_QWORD *)(v0 + 152);
    v33 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
  }
  *(_QWORD *)(v0 + 352) = v23;
  v24 = *(_QWORD *)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 256))(v26, *(_QWORD *)(v0 + 328)+ ((*(unsigned __int8 *)(v0 + 400) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 400))+ *(_QWORD *)(v0 + 344) * v23, v24);
  v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56);
  *(_QWORD *)(v0 + 368) = v27;
  v27(v26, 0, 1, v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1)
    goto LABEL_9;
  v37 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 200));
  *(_QWORD *)(v0 + 376) = *(_QWORD *)(v37 + 128);
  v38 = (_QWORD *)swift_task_alloc(dword_10110D164);
  *(_QWORD *)(v0 + 384) = v38;
  *v38 = v0;
  v38[1] = sub_10017B80C;
  return sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 232));
}

uint64_t sub_10017BF6C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 96) = v7;
  *(_BYTE *)(v8 + 160) = a3;
  *(_QWORD *)(v8 + 72) = a1;
  *(_QWORD *)(v8 + 80) = a4;
  v13 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 104) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 112) = v14;
  *(_QWORD *)(v8 + 120) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_task_alloc(dword_1010F1974);
  *(_QWORD *)(v8 + 128) = v15;
  *v15 = v8;
  v15[1] = sub_10017C014;
  return sub_10017C5E8(a2, a4, a5, a6);
}

uint64_t sub_10017C014(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 128);
  v4 = *v2;
  *(_QWORD *)(v4 + 136) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10017C090, *(_QWORD *)(v4 + 96), 0);
  swift_task_dealloc(*(_QWORD *)(v4 + 120));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10017C090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  NSObject *log;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B69B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
  swift_bridgeObjectRetain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 104);
  if (v10)
  {
    log = v8;
    v44 = v0 + 64;
    v50 = (_QWORD *)(v0 + 40);
    v15 = swift_slowAlloc(42, -1);
    v45 = swift_slowAlloc(64, -1);
    v51 = v45;
    *(_DWORD *)v15 = 134218755;
    v16 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v0 + 16) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(_QWORD *)(v0 + 32) = sub_100016940(v18, v19, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v46 = (uint8_t *)v15;
    *(_WORD *)(v15 + 32) = 2082;
    v20 = _swiftEmptyArrayStorage;
    if (v16)
    {
      v48 = (_QWORD *)(v0 + 56);
      v49 = (_QWORD *)(v0 + 48);
      v43 = v0;
      v21 = *(_QWORD *)(v0 + 136);
      v52 = _swiftEmptyArrayStorage;
      sub_10009A2F4(0, v16, 0);
      v20 = v52;
      v22 = (unint64_t *)(v21 + 64);
      do
      {
        v23 = *(v22 - 3);
        v24 = *(v22 - 2);
        v25 = *(v22 - 1);
        v26 = *v22;
        *v50 = *(v22 - 4);
        sub_10001BBBC(v25, v26);
        v53 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        v54 = v27;
        v28._countAndFlagsBits = 8250;
        v28._object = (void *)0xE200000000000000;
        String.append(_:)(v28);
        *v49 = v23;
        v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._countAndFlagsBits = 45;
        v30._object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        *v48 = v24;
        v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        sub_10001BC14(v25, v26);
        v32 = v53;
        v33 = v54;
        v52 = v20;
        v35 = v20[2];
        v34 = v20[3];
        if (v35 >= v34 >> 1)
        {
          sub_10009A2F4(v34 > 1, v35 + 1, 1);
          v20 = v52;
        }
        v22 += 5;
        v20[2] = v35 + 1;
        v36 = &v20[2 * v35];
        v36[4] = v32;
        v36[5] = v33;
        --v16;
      }
      while (v16);
      v0 = v43;
    }
    v37 = *(_QWORD *)(v0 + 136);
    v38 = Array.description.getter(v20, &type metadata for String);
    v40 = v39;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 64) = sub_100016940(v38, v40, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, v0 + 72, v46 + 34, v46 + 42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v37, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Found %ld ranges for circle: %{private,mask.hash}s.\nRanges: %{public}s)", v46, 0x2Au);
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v46, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_bridgeObjectRelease_n(v11, 2);

  }
  v41 = (_QWORD *)swift_task_alloc(dword_1010F197C);
  *(_QWORD *)(v0 + 144) = v41;
  *v41 = v0;
  v41[1] = sub_10017C508;
  return sub_10017CED4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 160), *(_QWORD *)(v0 + 88));
}

uint64_t sub_10017C508()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10017C5AC;
  else
    v4 = sub_10017C56C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_10017C56C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017C5AC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017C5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[23] = a4;
  v5[24] = v4;
  v5[21] = a2;
  v5[22] = a3;
  v5[20] = a1;
  v6 = type metadata accessor for UUID(0);
  v5[25] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[26] = v7;
  v5[27] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10017C650, v4, 0);
}

uint64_t sub_10017C650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t type;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 224) = sub_10001A9E8(v5, (uint64_t)qword_1011B69B0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 200);
  if (v9)
  {
    v34 = *(_QWORD *)(v0 + 176);
    v35 = *(_QWORD *)(v0 + 184);
    type = v8;
    v13 = swift_slowAlloc(42, -1);
    v37 = swift_slowAlloc(96, -1);
    v38 = v37;
    *(_DWORD *)v13 = 141558787;
    *(_QWORD *)(v0 + 112) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    *(_QWORD *)(v0 + 120) = sub_100016940(v15, v16, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v13 + 22) = 2080;
    v39 = 0x7972616D6972702ELL;
    v40 = 0xEA0000000000282FLL;
    *(_QWORD *)(v0 + 128) = v34;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    *(_QWORD *)(v0 + 136) = sub_100016940(v39, v40, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 32) = 2080;
    v39 = 0x7972616D6972702ELL;
    v40 = 0xEA0000000000282FLL;
    *(_QWORD *)(v0 + 144) = v35;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 41;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    *(_QWORD *)(v0 + 152) = sub_100016940(v39, v40, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Bundle Decryption for shareId: %{private,mask.hash}s for primary range: %s - %s.", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
  }

  v22 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 96) = v21;
  if (v21 >= v22)
  {
    *(_QWORD *)(v0 + 232) = *(_QWORD *)(*(_QWORD *)(v0 + 192) + 128);
    swift_beginAccess(v0 + 96, v0 + 56, 1, 0);
    *(_QWORD *)(v0 + 240) = _swiftEmptyArrayStorage;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v39 = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = *(_QWORD *)(v0 + 96);
      *(_QWORD *)(v0 + 80) = 0x7972616D6972702ELL;
      *(_QWORD *)(v0 + 88) = 0xEA0000000000282FLL;
      *(_QWORD *)(v0 + 104) = v29;
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 41;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      *(_QWORD *)(v27 + 4) = sub_100016940(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), &v39);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Create bundle decryption for primaryIndex: %s.", (uint8_t *)v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }

    v32 = *(_QWORD *)(v0 + 96);
    v33 = (_QWORD *)swift_task_alloc(dword_10110D204);
    *(_QWORD *)(v0 + 248) = v33;
    *v33 = v0;
    v33[1] = sub_10017CB98;
    return sub_100955C8C(v0 + 16, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), v32);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10017CB98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 192);
    swift_bridgeObjectRelease();
    v5 = sub_10017CEA0;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 192);
    v5 = sub_10017CC0C;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_10017CC0C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 240);
  sub_1001AE74C(v0 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 240);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8B34(0, v3[2] + 1, 1, *(_QWORD **)(v0 + 240));
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8B34((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[5 * v5];
  v7 = *(_OWORD *)(v0 + 16);
  v8 = *(_OWORD *)(v0 + 32);
  v6[8] = *(_QWORD *)(v0 + 48);
  *((_OWORD *)v6 + 2) = v7;
  *((_OWORD *)v6 + 3) = v8;
  v9 = sub_1001AE778(v0 + 16);
  v10 = *(_QWORD *)(v0 + 24);
  if (v10 && (v11 = *(_QWORD *)(v0 + 176), v12 = v10 - 1, *(_QWORD *)(v0 + 96) = v12, v12 >= v11))
  {
    *(_QWORD *)(v0 + 240) = v3;
    v14 = Logger.logObject.getter(v9);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v23 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = *(_QWORD *)(v0 + 96);
      *(_QWORD *)(v0 + 80) = 0x7972616D6972702ELL;
      *(_QWORD *)(v0 + 88) = 0xEA0000000000282FLL;
      *(_QWORD *)(v0 + 104) = v18;
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 41;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      *(_QWORD *)(v16 + 4) = sub_100016940(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), &v23);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Create bundle decryption for primaryIndex: %s.", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    v21 = *(_QWORD *)(v0 + 96);
    v22 = (_QWORD *)swift_task_alloc(dword_10110D204);
    *(_QWORD *)(v0 + 248) = v22;
    *v22 = v0;
    v22[1] = sub_10017CB98;
    return sub_100955C8C(v0 + 16, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), v21);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
  }
}

uint64_t sub_10017CEA0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017CED4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_QWORD *)(v6 + 248) = a5;
  *(_QWORD *)(v6 + 256) = v5;
  *(_BYTE *)(v6 + 564) = a4;
  *(_QWORD *)(v6 + 232) = a2;
  *(_QWORD *)(v6 + 240) = a3;
  *(_QWORD *)(v6 + 224) = a1;
  v7 = sub_10001A9A8(&qword_1010F1980);
  *(_QWORD *)(v6 + 264) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyDropJoinToken(0);
  *(_QWORD *)(v6 + 272) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 280) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 288) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 296) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 304) = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_1010EE0E0);
  *(_QWORD *)(v6 + 312) = v11;
  *(_QWORD *)(v6 + 320) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 328) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 336) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v6 + 344) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 352) = swift_task_alloc(v15);
  *(_QWORD *)(v6 + 360) = swift_task_alloc(v15);
  *(_QWORD *)(v6 + 368) = swift_task_alloc(v15);
  *(_QWORD *)(v6 + 376) = swift_task_alloc(v15);
  v16 = sub_10001A9A8((uint64_t *)&unk_101111440);
  *(_QWORD *)(v6 + 384) = v16;
  *(_QWORD *)(v6 + 392) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v6 + 400) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v6 + 408) = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 416) = swift_task_alloc(v19);
  *(_QWORD *)(v6 + 424) = swift_task_alloc(v19);
  return swift_task_switch(sub_10017D05C, v5, 0);
}

uint64_t sub_10017D05C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 256) + 136);
  *(_QWORD *)(v0 + 432) = v1;
  return swift_task_switch(sub_10017D078, v1, 0);
}

uint64_t sub_10017D078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 440) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 560) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10105CA20, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 448) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 456) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 464) = v13;
  *v13 = v0;
  v13[1] = sub_10017D164;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 392), sub_100067DE8, v10, *(_QWORD *)(v0 + 384));
}

uint64_t sub_10017D164()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 464));
  swift_release();
  return swift_task_switch(sub_10017D1C8, v1, 0);
}

uint64_t sub_10017D1C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t **v5;

  v1 = v0[49];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[51] + 48))(v1, 1, v0[50]) == 1)
  {
    v2 = v0[54];
    sub_100004048(v1, (uint64_t *)&unk_101111440);
    return swift_task_switch(sub_10017DC7C, v2, 0);
  }
  else
  {
    v4 = v0[32];
    sub_1000126EC(v1, v0[53], type metadata accessor for MemberSharingCircle);
    v0[59] = *(_QWORD *)(v4 + 128);
    v5 = (uint64_t **)swift_task_alloc(dword_10110D164);
    v0[60] = (uint64_t)v5;
    *v5 = v0;
    v5[1] = (uint64_t *)sub_10017D29C;
    return sub_10090C6D8((uint64_t)(v0 + 2), v0[30]);
  }
}

uint64_t sub_10017D29C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v2[63] = v0;
    v4 = v2[32];
    v5 = sub_10017D3B4;
  }
  else
  {
    v4 = v2[59];
    v5 = sub_10017D308;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10017D308()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v1 = v0[6];
  v0[62] = v1;
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = v0[32];
    swift_bridgeObjectRetain(v1);
    sub_1000D9530(v0 + 2);
    v3 = sub_10017D498;
    v4 = v2;
  }
  else
  {
    v5 = sub_1000D94EC();
    v6 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v5, 0, 0);
    *v7 = 13;
    swift_willThrow(v6);
    sub_1000D9530(v0 + 2);
    v0[63] = v6;
    v4 = v0[32];
    v3 = sub_10017D3B4;
  }
  return swift_task_switch(v3, v4, 0);
}

uint64_t sub_10017D3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for MemberSharingCircle);
  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 288);
  v12 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017D498()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  __objc2_ivar_list **p_ivars;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *Item;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *log;
  os_log_t loga;
  uint64_t v78;
  os_log_type_t v79[8];
  os_log_type_t typea;
  void (*type)(uint64_t, uint64_t);
  os_log_type_t typeb[8];
  os_log_type_t typec[8];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[2];

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = (unint64_t *)swift_task_alloc(32);
  v3[2] = v2;
  v4 = sub_10008B508((uint64_t (*)(char *))sub_1001AE700, v3, v1);
  swift_task_dealloc(v3);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v7 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 240);
  v84 = type metadata accessor for Logger(0);
  sub_10001A9E8(v84, (uint64_t)qword_1011B69B0);
  v6(v9, v11, v10);
  v12 = sub_10005972C(v8, v7, type metadata accessor for MemberSharingCircle);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(_QWORD *)(v0 + 416);
  if (v15)
  {
    v73 = *(_QWORD *)(v0 + 416);
    log = v13;
    typea = v14;
    v17 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 328);
    v71 = *(_QWORD *)(v0 + 336);
    v19 = swift_slowAlloc(42, -1);
    v78 = swift_slowAlloc(64, -1);
    v91[0] = v78;
    *(_DWORD *)v19 = 141558787;
    *(_QWORD *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v88 = v4;
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v18, v20);
    *(_QWORD *)(v0 + 200) = sub_100016940(v21, v22, v91);
    p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    v23 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    v23(v17, v18);
    *(_WORD *)(v19 + 22) = 2160;
    *(_QWORD *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v19 + 24, v19 + 32);
    *(_WORD *)(v19 + 32) = 2081;
    v24 = v20;
    v4 = v88;
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v18, v24);
    *(_QWORD *)(v0 + 216) = sub_100016940(v25, v26, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v19 + 34, v19 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v73, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, log, typea, "Found member sharing circle %{private,mask.hash}s with owner: %{private,mask.hash}s.", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {
    v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 336) + 8);
    v23(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 328));
    sub_1000126B0(v16, type metadata accessor for MemberSharingCircle);

  }
  sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for MemberSharingCircle);
  v27 = *(_QWORD *)(v4 + 16);
  if (v27 >= 2)
  {
    type = v23;
    if (p_ivars[312] != (__objc2_ivar_list *)-1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v29 = *(_QWORD *)(v0 + 352);
    v30 = *(_QWORD *)(v0 + 328);
    v31 = *(_QWORD *)(v0 + 240);
    sub_10001A9E8(v84, (uint64_t)qword_1011B69B0);
    v28(v29, v31, v30);
    swift_bridgeObjectRetain_n(v4, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v0 + 352);
    v37 = *(_QWORD *)(v0 + 328);
    if (v35)
    {
      v38 = swift_slowAlloc(32, -1);
      v85 = swift_slowAlloc(32, -1);
      v91[0] = v85;
      *(_DWORD *)v38 = 141558531;
      *(_QWORD *)(v0 + 152) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
      *(_QWORD *)(v0 + 160) = sub_100016940(v40, v41, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      type(v36, v37);
      *(_WORD *)(v38 + 22) = 2048;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 168) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v38 + 24, v38 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Multiple join tokens found for sharingCircleIdentifier: %{private,mask.hash}s, count: %ld.", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      type(v36, v37);
      swift_bridgeObjectRelease();
    }

    v27 = *(_QWORD *)(v4 + 16);
  }
  if (v27)
  {
    v42 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 280) + 80);
    sub_10005972C(v4 + ((v42 + 32) & ~v42), *(_QWORD *)(v0 + 264), type metadata accessor for KeyDropJoinToken);
    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v44 = *(_QWORD *)(v0 + 272);
  v45 = *(_QWORD *)(v0 + 280);
  v46 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, v43, 1, v44);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v46, 1, v44) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 264), &qword_1010F1980);
    v47 = sub_1000D94EC();
    v48 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v47, 0, 0);
    *v49 = 13;
    swift_willThrow(v48);
    v50 = *(_QWORD *)(v0 + 416);
    v51 = *(_QWORD *)(v0 + 392);
    v53 = *(_QWORD *)(v0 + 368);
    v52 = *(_QWORD *)(v0 + 376);
    v55 = *(_QWORD *)(v0 + 352);
    v54 = *(_QWORD *)(v0 + 360);
    v56 = *(_QWORD *)(v0 + 320);
    v57 = *(_QWORD *)(v0 + 304);
    *(_QWORD *)typeb = *(_QWORD *)(v0 + 296);
    v86 = *(_QWORD *)(v0 + 288);
    v89 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(*(_QWORD *)typeb);
    swift_task_dealloc(v86);
    swift_task_dealloc(v89);
  }
  else
  {
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(_QWORD *)(v0 + 416);
    v70 = *(_QWORD *)(v0 + 392);
    v72 = *(_QWORD *)(v0 + 376);
    v74 = *(_QWORD *)(v0 + 368);
    v75 = *(_QWORD *)(v0 + 360);
    v59 = *(_QWORD *)(v0 + 328);
    loga = *(os_log_t *)(v0 + 352);
    *(_QWORD *)v79 = *(_QWORD *)(v0 + 320);
    v60 = *(_QWORD *)(v0 + 288);
    v90 = *(_QWORD *)(v0 + 296);
    *(_QWORD *)typec = *(_QWORD *)(v0 + 304);
    v87 = *(_QWORD *)(v0 + 264);
    v61 = *(_BYTE *)(v0 + 564);
    v63 = *(_QWORD *)(v0 + 240);
    v62 = *(_QWORD *)(v0 + 248);
    v64 = *(_QWORD *)(v0 + 224);
    v65 = *(_QWORD *)(v0 + 232);
    sub_1000126EC(v87, v60, type metadata accessor for KeyDropJoinToken);
    v58(v64, v63, v59);
    Item = (int *)type metadata accessor for KeyDropFetchItem(0);
    sub_1000126EC(v60, v64 + Item[8], type metadata accessor for KeyDropJoinToken);
    *(_BYTE *)(v64 + Item[5]) = v61;
    *(_QWORD *)(v64 + Item[6]) = v62;
    *(_QWORD *)(v64 + Item[7]) = v65;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v65);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(loga);
    swift_task_dealloc(*(_QWORD *)v79);
    swift_task_dealloc(*(_QWORD *)typec);
    swift_task_dealloc(v90);
    swift_task_dealloc(v60);
    swift_task_dealloc(v87);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017DC7C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  v2 = *(unsigned __int8 *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 344);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 440))(v4, *(_QWORD *)(v0 + 240), v5);
  v9 = swift_allocObject(&unk_10105CA48, v7, v8);
  *(_QWORD *)(v0 + 512) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 520) = v11;
  *v11 = v0;
  v11[1] = sub_10017DD64;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 320), sub_10007CC00, v9, *(_QWORD *)(v0 + 312));
}

uint64_t sub_10017DD64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 256);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 520));
  swift_release();
  return swift_task_switch(sub_10017DDC8, v1, 0);
}

uint64_t sub_10017DDC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = type metadata accessor for OwnerSharingCircle(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_100004048(v1, &qword_1010EE0E0);
  if (v3 == 1)
  {
    v4 = sub_1000D94EC();
    v5 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v4, 0, 0);
    *v6 = 3;
    swift_willThrow(v5);
    v7 = *(_QWORD *)(v0 + 416);
    v8 = *(_QWORD *)(v0 + 392);
    v10 = *(_QWORD *)(v0 + 368);
    v9 = *(_QWORD *)(v0 + 376);
    v12 = *(_QWORD *)(v0 + 352);
    v11 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 304);
    v17 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 528) = *(_QWORD *)(*(_QWORD *)(v0 + 256) + 128);
    v16 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 536) = v16;
    *v16 = v0;
    v16[1] = sub_10017DF60;
    return sub_10090C6D8(v0 + 80, *(_QWORD *)(v0 + 240));
  }
}

uint64_t sub_10017DF60()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 536);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_10017E080, v2[66], 0);
  v6 = v2[52];
  v5 = v2[53];
  v7 = v2[49];
  v9 = v2[46];
  v8 = v2[47];
  v11 = v2[44];
  v10 = v2[45];
  v12 = v2[40];
  v15 = v2[38];
  v16 = v2[37];
  v17 = v2[36];
  v13 = v2[33];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10017E080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 144) = v1;
  *(_QWORD *)(v0 + 544) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 552) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 256);
    swift_bridgeObjectRetain(v1);
    sub_1000D9530((uint64_t *)(v0 + 80));
    return swift_task_switch(sub_10017E1E4, v3, 0);
  }
  else
  {
    v5 = sub_1000D94EC();
    v18 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v5, 0, 0);
    *v6 = 13;
    swift_willThrow(v18);
    sub_1000D9530((uint64_t *)(v0 + 80));
    v7 = *(_QWORD *)(v0 + 416);
    v8 = *(_QWORD *)(v0 + 392);
    v10 = *(_QWORD *)(v0 + 368);
    v9 = *(_QWORD *)(v0 + 376);
    v12 = *(_QWORD *)(v0 + 352);
    v11 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 296);
    v15 = *(_QWORD *)(v0 + 304);
    v16 = *(_QWORD *)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10017E1E4()
{
  uint64_t v0;
  __objc2_ivar_list **v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __objc2_ivar_list **p_ivars;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *Item;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[2];

  v2 = 0;
  v78 = (_QWORD *)(v0 + 152);
  v80 = (uint64_t *)(v0 + 160);
  v87 = v0 + 176;
  v82 = (unint64_t *)(v0 + 168);
  *(_QWORD *)type = v0 + 184;
  v3 = *(_QWORD *)(v0 + 280);
  v4 = _swiftEmptyArrayStorage;
  v94[0] = (uint64_t)_swiftEmptyArrayStorage;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  do
  {
    v6 = *(_QWORD *)(v0 + 544);
    if (v2 >= *(_QWORD *)(v6 + 16))
    {
      __break(1u);
      goto LABEL_32;
    }
    v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v1 = *(__objc2_ivar_list ***)(v3 + 72);
    sub_10005972C(v6 + v7 + (_QWORD)v1 * v2, *(_QWORD *)(v0 + 304), type metadata accessor for KeyDropJoinToken);
    if (p_ivars[321] != (__objc2_ivar_list *)-1)
      swift_once(&qword_1010E9A08, sub_1001EB1EC);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = sub_10001A9E8(*(_QWORD *)(v0 + 328), (uint64_t)qword_1011B6A78);
    v10 = static UUID.== infix(_:_:)(v8, v9);
    v11 = *(_QWORD *)(v0 + 304);
    if ((v10 & 1) != 0)
    {
      sub_1000126EC(v11, *(_QWORD *)(v0 + 296), type metadata accessor for KeyDropJoinToken);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      {
        sub_10009A5A4(0, v4[2] + 1, 1);
        v4 = (_QWORD *)v94[0];
      }
      v13 = v4[2];
      v12 = v4[3];
      if (v13 >= v12 >> 1)
      {
        sub_10009A5A4(v12 > 1, v13 + 1, 1);
        v4 = (_QWORD *)v94[0];
      }
      v14 = *(_QWORD *)(v0 + 296);
      v4[2] = v13 + 1;
      sub_1000126EC(v14, (uint64_t)v4 + v7 + v13 * (_QWORD)v1, type metadata accessor for KeyDropJoinToken);
      p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    }
    else
    {
      sub_1000126B0(v11, type metadata accessor for KeyDropJoinToken);
    }
    ++v2;
  }
  while (v2 != *(_QWORD *)(v0 + 552));
  sub_1001AE6D8((_QWORD *)(v0 + 144));
  v1 = &BeaconKeyBackendServiceTrampoline.ivars;
  if (qword_1010E99C0 == -1)
    goto LABEL_14;
LABEL_32:
  swift_once(&qword_1010E99C0, sub_100173218);
LABEL_14:
  v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v16 = *(_QWORD *)(v0 + 360);
  v17 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 240);
  v90 = type metadata accessor for Logger(0);
  sub_10001A9E8(v90, (uint64_t)qword_1011B69B0);
  v19 = v15(v16, v18, v17);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 360);
  v24 = *(_QWORD *)(v0 + 328);
  v25 = *(_QWORD *)(v0 + 336);
  if (v22)
  {
    v26 = swift_slowAlloc(22, -1);
    v76 = swift_slowAlloc(32, -1);
    v94[0] = v76;
    *(_DWORD *)v26 = 141558275;
    *(_QWORD *)(v0 + 176) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, *(_QWORD *)type, v26 + 4, v26 + 12);
    *(_WORD *)(v26 + 12) = 2081;
    v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v24, v27);
    *(_QWORD *)(v0 + 184) = sub_100016940(v28, v29, v94);
    v1 = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(*(_QWORD *)type, v0 + 192, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease();
    v30 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v30(v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Found owner sharing circle %{private,mask.hash}s for owner.", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    v30 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v30(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 328));
  }

  v31 = v4[2];
  if (v31 >= 2)
  {
    if (v1[312] != (__objc2_ivar_list *)-1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v33 = *(_QWORD *)(v0 + 352);
    v34 = *(_QWORD *)(v0 + 328);
    v35 = *(_QWORD *)(v0 + 240);
    sub_10001A9E8(v90, (uint64_t)qword_1011B69B0);
    v32(v33, v35, v34);
    swift_bridgeObjectRetain_n(v4, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    v39 = os_log_type_enabled(v37, v38);
    v40 = *(_QWORD *)(v0 + 352);
    v41 = *(_QWORD *)(v0 + 328);
    if (v39)
    {
      v42 = swift_slowAlloc(32, -1);
      v91 = swift_slowAlloc(32, -1);
      v94[0] = v91;
      *(_DWORD *)v42 = 141558531;
      *v78 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v80, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2081;
      v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v41, v43);
      *v80 = sub_100016940(v44, v45, v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, v82, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease();
      v30(v40, v41);
      *(_WORD *)(v42 + 22) = 2048;
      swift_bridgeObjectRelease();
      *v82 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v87, v42 + 24, v42 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Multiple join tokens found for sharingCircleIdentifier: %{private,mask.hash}s, count: %ld.", (uint8_t *)v42, 0x20u);
      swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      v30(v40, v41);
      swift_bridgeObjectRelease();
    }

    v31 = v4[2];
  }
  if (v31)
  {
    v46 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 280) + 80);
    sub_10005972C((uint64_t)v4 + ((v46 + 32) & ~v46), *(_QWORD *)(v0 + 264), type metadata accessor for KeyDropJoinToken);
    v47 = 0;
  }
  else
  {
    v47 = 1;
  }
  v48 = *(_QWORD *)(v0 + 272);
  v49 = *(_QWORD *)(v0 + 280);
  v50 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v50, v47, 1, v48);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v50, 1, v48) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 264), &qword_1010F1980);
    v51 = sub_1000D94EC();
    v52 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v51, 0, 0);
    *v53 = 13;
    swift_willThrow(v52);
    v54 = *(_QWORD *)(v0 + 416);
    v55 = *(_QWORD *)(v0 + 392);
    v57 = *(_QWORD *)(v0 + 368);
    v56 = *(_QWORD *)(v0 + 376);
    v59 = *(_QWORD *)(v0 + 352);
    v58 = *(_QWORD *)(v0 + 360);
    v60 = *(_QWORD *)(v0 + 320);
    v61 = *(_QWORD *)(v0 + 304);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 296);
    v88 = *(_QWORD *)(v0 + 288);
    v92 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(*(_QWORD *)typea);
    swift_task_dealloc(v88);
    swift_task_dealloc(v92);
  }
  else
  {
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v72 = *(_QWORD *)(v0 + 424);
    v73 = *(_QWORD *)(v0 + 416);
    v74 = *(_QWORD *)(v0 + 392);
    v75 = *(_QWORD *)(v0 + 376);
    v77 = *(_QWORD *)(v0 + 368);
    v79 = *(_QWORD *)(v0 + 360);
    v63 = *(_QWORD *)(v0 + 328);
    v81 = *(_QWORD *)(v0 + 352);
    v83 = *(_QWORD *)(v0 + 320);
    v64 = *(_QWORD *)(v0 + 288);
    v93 = *(_QWORD *)(v0 + 296);
    *(_QWORD *)typeb = *(_QWORD *)(v0 + 304);
    v89 = *(_QWORD *)(v0 + 264);
    v65 = *(_BYTE *)(v0 + 564);
    v67 = *(_QWORD *)(v0 + 240);
    v66 = *(_QWORD *)(v0 + 248);
    v68 = *(_QWORD *)(v0 + 224);
    v69 = *(_QWORD *)(v0 + 232);
    sub_1000126EC(v89, v64, type metadata accessor for KeyDropJoinToken);
    v62(v68, v67, v63);
    Item = (int *)type metadata accessor for KeyDropFetchItem(0);
    sub_1000126EC(v64, v68 + Item[8], type metadata accessor for KeyDropJoinToken);
    *(_BYTE *)(v68 + Item[5]) = v65;
    *(_QWORD *)(v68 + Item[6]) = v66;
    *(_QWORD *)(v68 + Item[7]) = v69;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v69);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(*(_QWORD *)typeb);
    swift_task_dealloc(v93);
    swift_task_dealloc(v64);
    swift_task_dealloc(v89);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017E9FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(void);

  *(_QWORD *)(v7 + 72) = a6;
  *(_QWORD *)(v7 + 80) = v6;
  *(_QWORD *)(v7 + 56) = a3;
  *(_QWORD *)(v7 + 64) = a5;
  *(_BYTE *)(v7 + 256) = a4;
  *(_QWORD *)(v7 + 48) = a2;
  v9 = type metadata accessor for Date(0);
  *(_QWORD *)(v7 + 88) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 96) = v10;
  *(_QWORD *)(v7 + 104) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F1990);
  *(_QWORD *)(v7 + 112) = v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 120) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 128) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 136) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 144) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 152) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 160) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 168) = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 176) = swift_task_alloc(v12);
  v13 = swift_task_alloc(v12);
  *(_QWORD *)(v7 + 184) = v13;
  v14 = *(void (**)(void))(v10 + 16);
  *(_QWORD *)(v7 + 192) = v14;
  v14();
  *(_QWORD *)(v13 + *(int *)(v11 + 48)) = a2;
  return swift_task_switch(sub_10017EB3C, v6, 0);
}

uint64_t sub_10017EB3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *log;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  unint64_t v55;
  uint64_t v56;

  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v1 = v0[6];
  v2 = v0[23];
  v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[24];
  v4 = v0[22];
  v5 = v0[19];
  v44 = v0[21];
  v46 = v0[20];
  v48 = v0[18];
  v6 = v0[14];
  v7 = v0[11];
  v55 = v0[9];
  v51 = v0[17];
  v53 = v0[7];
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B69B0);
  v9 = *(int *)(v6 + 48);
  v3(v4, v2, v7);
  *(_QWORD *)(v4 + v9) = v1;
  sub_10000F9B8(v4, v44, &qword_1010F1990);
  sub_100005CF0(v4, v46, &qword_1010F1990);
  v10 = *(int *)(v6 + 48);
  v3(v5, v2, v7);
  *(_QWORD *)(v5 + v10) = v1;
  sub_10000F9B8(v5, v48, &qword_1010F1990);
  sub_100005CF0(v5, v51, &qword_1010F1990);
  swift_bridgeObjectRetain_n(v55, 2);
  swift_bridgeObjectRetain_n(v53, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[24];
    v15 = v0[21];
    v43 = v0[18];
    v49 = v0[17];
    v38 = v0[16];
    v41 = v0[20];
    v42 = v0[14];
    v54 = v13;
    v16 = v0[13];
    v39 = v0[12];
    v17 = v0[11];
    v18 = v0[7];
    v45 = v0[9];
    v47 = v0[8];
    log = v12;
    v19 = swift_slowAlloc(42, -1);
    v52 = swift_slowAlloc(64, -1);
    v56 = v52;
    *(_DWORD *)v19 = 134218754;
    v20 = *(_QWORD *)(v18 + 16);
    swift_bridgeObjectRelease();
    v0[2] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    v14(v38, v15, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v16, v38, v17);
    v21 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v17, v21);
    v24 = v23;
    v40 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v40(v16, v17);
    v0[3] = sub_100016940(v22, v24, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v41, &qword_1010F1990);
    sub_100004048(v15, &qword_1010F1990);
    *(_WORD *)(v19 + 22) = 2048;
    v25 = *(int *)(v42 + 48);
    v14(v38, v43, v17);
    v26 = *(_QWORD *)(v43 + v25);
    *(_QWORD *)(v38 + v25) = v26;
    v40(v38, v17);
    sub_100004048(v43, &qword_1010F1990);
    v0[4] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v19 + 24, v19 + 32);
    sub_100004048(v49, &qword_1010F1990);
    *(_WORD *)(v19 + 32) = 2080;
    if (v45)
      v27 = v47;
    else
      v27 = 0x6C646E75622D6F6ELL;
    if (v45)
      v28 = v55;
    else
      v28 = 0xE900000000000065;
    swift_bridgeObjectRetain(v55);
    v0[5] = sub_100016940(v27, v28, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v19 + 34, v19 + 42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v55, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v54, "BeaconSharingService begin fetchSharedBeacons %ld. Date Interval: %s - %ld days back count, bundle: %s", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {
    v29 = v0[20];
    v30 = v0[21];
    v31 = v0[17];
    v32 = v0[7];
    sub_100004048(v0[18], &qword_1010F1990);
    swift_bridgeObjectRelease_n(v32, 2);
    sub_100004048(v29, &qword_1010F1990);
    sub_100004048(v30, &qword_1010F1990);
    sub_100004048(v31, &qword_1010F1990);
    swift_bridgeObjectRelease_n(v55, 2);

  }
  v33 = v0[15];
  v34 = v0[6];
  v35 = *(int *)(v0[14] + 48);
  ((void (*)(uint64_t, _QWORD, _QWORD))v0[24])(v33, v0[23], v0[11]);
  *(_QWORD *)(v33 + v35) = v34;
  v36 = (_QWORD *)swift_task_alloc(dword_1010F199C);
  v0[25] = v36;
  *v36 = v0;
  v36[1] = sub_10017F060;
  return sub_10017F42C(v0[15], v0[6], v0[7]);
}

uint64_t sub_10017F060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;

  v6 = *(_QWORD *)(*v3 + 200);
  v7 = *v3;
  *(_QWORD *)(v7 + 208) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v8 = *(_QWORD *)(v7 + 80);
    v9 = sub_10017F284;
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 120);
    v11 = *(_QWORD *)(v7 + 88);
    v12 = *(_QWORD *)(v7 + 96);
    *(_QWORD *)(v7 + 216) = a2;
    *(_QWORD *)(v7 + 224) = a1;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v13 = swift_task_alloc(dword_1010F1924);
    *(_QWORD *)(v7 + 232) = v13;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = sub_10017F128;
    v8 = *(_QWORD *)(v7 + 80);
    v14 = *(_BYTE *)(v7 + 256);
    v15 = *(_OWORD *)(v7 + 64);
    *(_QWORD *)(v13 + 64) = v8;
    *(_OWORD *)(v13 + 48) = v15;
    *(_BYTE *)(v13 + 176) = v14;
    *(_QWORD *)(v13 + 32) = a1;
    *(_QWORD *)(v13 + 40) = a2;
    v9 = sub_10017A97C;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_10017F128(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(*v2 + 240) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v4 + 80);
  if (v1)
  {
    v7 = sub_10017F364;
  }
  else
  {
    *(_QWORD *)(v4 + 248) = a1;
    v7 = sub_10017F1B8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10017F1B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 104);
  sub_100004048(v2, &qword_1010F1990);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 248));
}

uint64_t sub_10017F284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  sub_100004048(*(_QWORD *)(v0 + 184), &qword_1010F1990);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017F364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_100004048(*(_QWORD *)(v0 + 184), &qword_1010F1990);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10017F42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);

  v4[86] = v3;
  v4[85] = a3;
  v4[84] = a2;
  v7 = type metadata accessor for OwnerSharingCircle(0);
  v4[87] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[88] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[89] = swift_task_alloc(v9);
  v4[90] = swift_task_alloc(v9);
  v10 = type metadata accessor for HashAlgorithm(0);
  v4[91] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[92] = v11;
  v4[93] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F1958) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[94] = swift_task_alloc(v12);
  v4[95] = swift_task_alloc(v12);
  v13 = *(_QWORD *)(type metadata accessor for KeyDropFetchItem(0) - 8);
  v4[96] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[97] = swift_task_alloc(v14);
  v4[98] = swift_task_alloc(v14);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v4[99] = v15;
  v4[100] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SharedBeaconRecord(0);
  v4[101] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[102] = v17;
  v4[103] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v4[104] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[105] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[106] = swift_task_alloc(v20);
  v4[107] = swift_task_alloc(v20);
  v4[108] = swift_task_alloc(v20);
  v4[109] = swift_task_alloc(v20);
  v4[110] = swift_task_alloc(v20);
  v4[111] = swift_task_alloc(v20);
  v4[112] = swift_task_alloc(v20);
  v21 = type metadata accessor for MemberSharingCircle(0);
  v4[113] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[114] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[115] = swift_task_alloc(v23);
  v4[116] = swift_task_alloc(v23);
  v24 = type metadata accessor for UUID(0);
  v4[117] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v4[118] = v25;
  v26 = *(_QWORD *)(v25 + 64);
  v4[119] = v26;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[120] = swift_task_alloc(v27);
  v4[121] = swift_task_alloc(v27);
  v4[122] = swift_task_alloc(v27);
  v4[123] = swift_task_alloc(v27);
  v4[124] = swift_task_alloc(v27);
  v4[125] = swift_task_alloc(v27);
  v4[126] = swift_task_alloc(v27);
  v4[127] = swift_task_alloc(v27);
  v28 = sub_10001A9A8(&qword_1010F1990);
  v4[128] = v28;
  v29 = (*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[129] = swift_task_alloc(v29);
  v4[130] = swift_task_alloc(v29);
  v30 = swift_task_alloc(v29);
  v4[131] = v30;
  v31 = type metadata accessor for Date(0);
  v4[132] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v4[133] = v32;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  v4[134] = v33;
  v33(v30, a1, v31);
  *(_QWORD *)(v30 + *(int *)(v28 + 48)) = a2;
  return swift_task_switch(sub_10017F778, v3, 0);
}

uint64_t sub_10017F778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 680);
  *(_QWORD *)(v0 + 648) = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1080) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 688);
    *(_DWORD *)(v0 + 1576) = enum case for HashAlgorithm.sha256(_:);
    *(_QWORD *)(v0 + 1104) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v0 + 1088) = 0u;
    v4 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    sub_100030784(v4, v0 + 184);
    v5 = *(_QWORD *)(v3 + 136);
    *(_QWORD *)(v0 + 1112) = v5;
    v6 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v6);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 32))(v6);
    return swift_task_switch(sub_10017FA64, v5, 0);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 1048);
    v10 = *(_QWORD *)(v0 + 1040);
    v11 = *(_QWORD *)(v0 + 1032);
    v12 = *(_QWORD *)(v0 + 1016);
    v13 = *(_QWORD *)(v0 + 1008);
    v14 = *(_QWORD *)(v0 + 1000);
    v15 = *(_QWORD *)(v0 + 992);
    v16 = *(_QWORD *)(v0 + 984);
    v17 = *(_QWORD *)(v0 + 976);
    v18 = *(_QWORD *)(v0 + 968);
    v19 = *(_QWORD *)(v0 + 960);
    v20 = *(_QWORD *)(v0 + 928);
    v21 = *(_QWORD *)(v0 + 920);
    v22 = *(_QWORD *)(v0 + 896);
    v23 = *(_QWORD *)(v0 + 888);
    v24 = *(_QWORD *)(v0 + 880);
    v25 = *(_QWORD *)(v0 + 872);
    v26 = *(_QWORD *)(v0 + 864);
    v27 = *(_QWORD *)(v0 + 856);
    v28 = *(_QWORD *)(v0 + 848);
    v29 = *(_QWORD *)(v0 + 824);
    v30 = *(_QWORD *)(v0 + 800);
    v31 = *(_QWORD *)(v0 + 784);
    v32 = *(_QWORD *)(v0 + 776);
    v33 = *(_QWORD *)(v0 + 760);
    v34 = *(_QWORD *)(v0 + 752);
    v35 = *(_QWORD *)(v0 + 744);
    v36 = *(_QWORD *)(v0 + 720);
    v37 = *(_QWORD *)(v0 + 712);
    sub_100004048(v9, &qword_1010F1990);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(_QWORD *, _QWORD *))(v0 + 8))(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_10017FA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 1112);
  v2 = *(_QWORD *)(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 1008);
  v4 = *(_QWORD *)(v0 + 952);
  v5 = *(_QWORD *)(v0 + 944);
  v6 = *(_QWORD *)(v0 + 936);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 1120) = v7;
  v7(v3, v2, v6);
  LODWORD(v8) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 1580) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10105CA70, v9 + v4, v8 | 7);
  *(_QWORD *)(v0 + 1128) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 1136) = v11;
  v11(v10 + v9, v3, v6);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 1144) = v13;
  v14 = sub_10001A9A8(&qword_1010EC840);
  *v13 = v0;
  v13[1] = sub_10017FB98;
  return unsafeBlocking<A>(_:)(v0 + 624, sub_1000D9288, v10, v14);
}

uint64_t sub_10017FB98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1144));
  swift_release();
  return swift_task_switch(sub_10017FC30, v1, 0);
}

uint64_t sub_10017FC30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0[127];
  v2 = v0[118];
  v3 = v0[117];
  v4 = v0[86];
  v0[144] = v0[78];
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[145] = v5;
  v5(v1, v3);
  return swift_task_switch(sub_10017FCB4, v4, 0);
}

uint64_t sub_10017FCB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1168) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 928);
    v4 = *(_QWORD *)(v0 + 912);
    v5 = *(_QWORD *)(v0 + 904);
    v6 = *(_QWORD *)(v0 + 688);
    v7 = *(int *)(v5 + 28);
    *(_DWORD *)(v0 + 1584) = v7;
    v8 = *(int *)(v5 + 24);
    *(_DWORD *)(v0 + 1588) = v8;
    *(_QWORD *)(v0 + 1176) = *(_QWORD *)(v6 + 128);
    LODWORD(v6) = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 1592) = v6;
    *(_QWORD *)(v0 + 1184) = *(_QWORD *)(v4 + 72);
    v9 = *(_QWORD *)(v0 + 1088);
    *(_QWORD *)(v0 + 1208) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1200) = 0;
    *(_QWORD *)(v0 + 1192) = v9;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1120);
    v11 = *(_QWORD *)(v0 + 1000);
    v12 = *(_QWORD *)(v0 + 992);
    v13 = *(_QWORD *)(v0 + 936);
    v14 = v1 + ((v6 + 32) & ~(unint64_t)v6);
    v15 = v3 + v8;
    v16 = v3 + v7;
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v14, v3, type metadata accessor for MemberSharingCircle);
    v10(v11, v16, v13);
    v10(v12, v15, v13);
    sub_1000126B0(v3, type metadata accessor for MemberSharingCircle);
    v17 = sub_10017FF60;
    v18 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v0 + 1104);
    v20 = *(_QWORD *)(v0 + 1088);
    sub_100302AB0((uint64_t)_swiftEmptyArrayStorage);
    v21 = *(_QWORD *)(v0 + 1080);
    v22 = *(_QWORD *)(v0 + 1096) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 184));
    if (v22 == v21)
    {
      v23 = *(_QWORD *)(v0 + 680);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 1360) = v19;
      *(_QWORD *)(v0 + 1352) = 0;
      v24 = *(_QWORD *)(v0 + 1112);
      v25 = *(_QWORD *)(v0 + 680) + 32;
      swift_bridgeObjectRetain(v23);
      sub_100030784(v25, v0 + 144);
      v26 = *(_QWORD *)(v0 + 168);
      v27 = *(_QWORD *)(v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 144), v26);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 8) + 32))(v26);
      v17 = sub_1001825B8;
      v18 = v24;
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 1096) + 1;
      *(_QWORD *)(v0 + 1104) = v19;
      *(_QWORD *)(v0 + 1096) = v28;
      *(_QWORD *)(v0 + 1088) = v20;
      v29 = *(_QWORD *)(v0 + 688);
      sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v28 + 32, v0 + 184);
      v30 = *(_QWORD *)(v29 + 136);
      *(_QWORD *)(v0 + 1112) = v30;
      v31 = *(_QWORD *)(v0 + 208);
      v32 = *(_QWORD *)(v0 + 216);
      sub_10001AA44((_QWORD *)(v0 + 184), v31);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 8) + 32))(v31);
      v17 = sub_10017FA64;
      v18 = v30;
    }
  }
  return swift_task_switch(v17, v18, 0);
}

uint64_t sub_10017FF60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 1176) + 120);
  *(_QWORD *)(v0 + 1216) = v1;
  return swift_task_switch(sub_10017FFC8, v1, 0);
}

uint64_t sub_10017FFC8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1216);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
  v3 = *(unsigned __int8 *)(v0 + 1580);
  v4 = *(_QWORD *)(v0 + 1016);
  v5 = *(_QWORD *)(v0 + 936);
  v6 = (v3 + 24) & ~v3;
  v7 = v6 + *(_QWORD *)(v0 + 952);
  v8 = v3 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1120))(v4, *(_QWORD *)(v0 + 1000), v5);
  v9 = swift_allocObject(&unk_10105CA98, v7, v8);
  *(_QWORD *)(v0 + 1224) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v2(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1232) = v11;
  v12 = sub_10001A9A8(&qword_1010F1960);
  *v11 = v0;
  v11[1] = sub_1001800F0;
  return unsafeBlocking<A>(_:)(v0 + 592, sub_1001AE6B8, v9, v12);
}

uint64_t sub_1001800F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1216);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1232));
  swift_release();
  return swift_task_switch(sub_100180188, v1, 0);
}

uint64_t sub_100180188()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 1240) = *(_QWORD *)(v0 + 592);
  return swift_task_switch(sub_1001801F0, 0, 0);
}

uint64_t sub_1001801F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;

  if (qword_1010EA050 != -1)
    swift_once(&qword_1010EA050, sub_100906B40);
  v1 = v0[155];
  v2 = type metadata accessor for Logger(0);
  v0[156] = v2;
  sub_10001A9E8(v2, (uint64_t)qword_1011B7940);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[155];
  if (v6)
  {
    v8 = swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)(v8 + 4) = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Got %ld keys in the sharing circle secrets keychain.", (uint8_t *)v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v9 = v0[149];
  sub_10095CF6C(v0[155], v0 + 10);
  v0[157] = v9;
  if (v9)
  {
    v0[160] = v9;
    v10 = (void (*)(uint64_t, uint64_t))v0[145];
    v11 = v0[125];
    v12 = v0[124];
    v13 = v0[117];
    v14 = v0[86];
    swift_bridgeObjectRelease();
    v10(v12, v13);
    v10(v11, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = sub_100180838;
    v16 = v14;
  }
  else
  {
    v16 = v0[147];
    v15 = sub_1001803E4;
  }
  return swift_task_switch(v15, v16, 0);
}

uint64_t sub_1001803E4()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = v0[16];
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 12;
    swift_willThrow(v3);
    sub_1000D9530(v0 + 10);
    v0[160] = v3;
    v5 = (void (*)(uint64_t, uint64_t))v0[145];
    v6 = v0[125];
    v7 = v0[124];
    v8 = v0[117];
    v9 = v0[86];
    swift_bridgeObjectRelease();
    v5(v7, v8);
    v5(v6, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = sub_100180838;
    v11 = v9;
  }
  else
  {
    v12 = (void (*)(uint64_t, uint64_t))v0[145];
    v13 = (void (*)(char *, uint64_t, uint64_t))v0[140];
    v14 = v0[124];
    v15 = v0[117];
    v16 = (uint64_t *)v0[112];
    v17 = v0[104];
    v20 = v0[86];
    v21 = v0[125];
    v18 = v0[15];
    sub_10001BBBC(v18, v1);
    sub_1000D9530(v0 + 10);
    v13((char *)v16 + *(int *)(v17 + 20), v14, v15);
    *v16 = v18;
    v16[1] = v1;
    v12(v14, v15);
    v12(v21, v15);
    v10 = sub_100180594;
    v11 = v20;
  }
  return swift_task_switch(v10, v11, 0);
}

uint64_t sub_100180594()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 1208);
  sub_10005972C(*(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 888), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD *)(v0 + 1208);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8C54(0, *(_QWORD *)(v3 + 16) + 1, 1, *(_QWORD *)(v0 + 1208));
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8C54(v4 > 1, v5 + 1, 1, v3);
  *(_QWORD *)(v0 + 1264) = v3;
  v6 = *(_QWORD *)(v0 + 1168);
  v7 = *(_QWORD *)(v0 + 896);
  v8 = *(_QWORD *)(v0 + 888);
  v9 = *(_QWORD *)(v0 + 840);
  v10 = *(_QWORD *)(v0 + 1200) + 1;
  *(_QWORD *)(v3 + 16) = v5 + 1;
  v11 = *(_DWORD *)(v9 + 80);
  *(_DWORD *)(v0 + 1596) = v11;
  v12 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v0 + 1272) = v12;
  sub_1000126EC(v8, v3 + ((v11 + 32) & ~(unint64_t)v11) + v12 * v5, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_1000126B0(v7, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  if (v10 == v6)
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 1256);
    *(_QWORD *)(v0 + 1304) = *(_QWORD *)(v0 + 1104);
    *(_QWORD *)(v0 + 1296) = 0;
    *(_QWORD *)(v0 + 1288) = v13;
    v14 = *(_QWORD *)(v0 + 1152);
    if (!*(_QWORD *)(v14 + 16))
      __break(1u);
    v15 = *(_QWORD *)(v0 + 1112);
    sub_10005972C(v14 + ((*(unsigned __int8 *)(v0 + 1592) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1592)), *(_QWORD *)(v0 + 920), type metadata accessor for MemberSharingCircle);
    v16 = *(_QWORD *)(v0 + 208);
    v17 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v16);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8) + 32))(v16);
    v18 = sub_100180C90;
    v19 = v15;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 1256);
    v21 = *(_QWORD *)(v0 + 1200) + 1;
    *(_QWORD *)(v0 + 1208) = v3;
    *(_QWORD *)(v0 + 1200) = v21;
    *(_QWORD *)(v0 + 1192) = v20;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1120);
    v23 = *(_QWORD *)(v0 + 1000);
    v24 = *(_QWORD *)(v0 + 992);
    v25 = *(_QWORD *)(v0 + 936);
    v26 = *(_QWORD *)(v0 + 928);
    v27 = v26 + *(int *)(v0 + 1588);
    v28 = v26 + *(int *)(v0 + 1584);
    sub_10005972C(*(_QWORD *)(v0 + 1152)+ ((*(unsigned __int8 *)(v0 + 1592) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1592))+ *(_QWORD *)(v0 + 1184) * v21, v26, type metadata accessor for MemberSharingCircle);
    v22(v23, v28, v25);
    v22(v24, v27, v25);
    sub_1000126B0(v26, type metadata accessor for MemberSharingCircle);
    v18 = sub_10017FF60;
    v19 = 0;
  }
  return swift_task_switch(v18, v19, 0);
}

uint64_t sub_100180838()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36[2];

  v1 = v0 + 23;
  v2 = v0[160];
  v3 = v0[138];
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  sub_10001A9E8(v0[156], (uint64_t)qword_1011B69B0);
  sub_100030784((uint64_t)(v0 + 23), (uint64_t)(v0 + 38));
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    type = v6;
    v32 = (void (*)(uint64_t, uint64_t))v0[145];
    v7 = v0[127];
    v8 = v0[117];
    v35 = v3;
    v9 = swift_slowAlloc(32, -1);
    v33 = swift_slowAlloc(64, -1);
    v36[0] = v33;
    *(_DWORD *)v9 = 141558531;
    v0[71] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 71, v0 + 72, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = v0[41];
    v10 = v0[42];
    sub_10001AA44(v0 + 38, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v8, v12);
    v15 = v14;
    v32(v7, v8);
    v0[72] = sub_100016940(v13, v15, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 73, v9 + 14, v9 + 22);
    v1 = v0 + 23;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    *(_WORD *)(v9 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 73, v0 + 50);
    v16 = Error.localizedDescription.getter(v0[51], v0[52]);
    v0[75] = sub_100016940(v16, v17, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 75, v0 + 76, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v18 = v9;
    v3 = v35;
    swift_slowDealloc(v18, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v19 = v0[135];
  v20 = v0[137] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v20 == v19)
  {
    v21 = v0[85];
    swift_bridgeObjectRelease();
    v0[170] = v3;
    v0[169] = 0;
    v22 = v0[139];
    v23 = v0[85] + 32;
    swift_bridgeObjectRetain(v21);
    sub_100030784(v23, (uint64_t)(v0 + 18));
    v24 = v0[21];
    v25 = v0[22];
    sub_10001AA44(v0 + 18, v24);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 32))(v24);
    v26 = sub_1001825B8;
  }
  else
  {
    v27 = v0[137] + 1;
    v0[138] = v3;
    v0[137] = v27;
    v0[136] = 0;
    v28 = v0[86];
    sub_100030784(v0[85] + 40 * v27 + 32, (uint64_t)v1);
    v22 = *(_QWORD *)(v28 + 136);
    v0[139] = v22;
    v29 = v0[26];
    v30 = v0[27];
    sub_10001AA44(v1, v29);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8) + 32))(v29);
    v26 = sub_10017FA64;
  }
  return swift_task_switch(v26, v22, 0);
}

uint64_t sub_100180C90()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
  v2 = *(unsigned __int8 *)(v0 + 1580);
  v3 = *(_QWORD *)(v0 + 1112);
  v4 = *(_QWORD *)(v0 + 1008);
  v5 = *(_QWORD *)(v0 + 936);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 952) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1120))(v4, *(_QWORD *)(v0 + 1016), v5);
  v9 = swift_allocObject(&unk_10105CB10, v7, v8);
  *(_QWORD *)(v0 + 1312) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1320) = v11;
  *v11 = v0;
  v11[1] = sub_100180DAC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 800), sub_100067DF8, v9, *(_QWORD *)(v0 + 792));
}

uint64_t sub_100180DAC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 1160);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1016);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 936);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 688);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1320));
  swift_release();
  v1(v2, v3);
  return swift_task_switch(sub_100180E64, v4, 0);
}

uint64_t sub_100180E64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_log_t log,uint64_t a24,uint64_t type,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)();
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v85)(uint64_t, uint64_t, uint64_t);

  v52 = *(_QWORD *)(v51 + 808);
  v53 = *(_QWORD *)(v51 + 800);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 + 816) + 48))(v53, 1, v52) != 1)
  {
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 1120);
    v66 = *(_QWORD *)(v51 + 976);
    v67 = *(_QWORD *)(v51 + 936);
    v68 = *(_QWORD *)(v51 + 920);
    v69 = *(_QWORD *)(v51 + 904);
    v70 = *(_QWORD *)(v51 + 824);
    sub_1000126EC(v53, v70, type metadata accessor for SharedBeaconRecord);
    v72 = *(_QWORD *)(v51 + 208);
    v71 = *(_QWORD *)(v51 + 216);
    sub_10001AA44((_QWORD *)(v51 + 184), v72);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v71 + 8) + 8) + 32))(v72);
    v85(v66, v68 + *(int *)(v69 + 28), v67);
    v73 = *(unsigned __int8 *)(v70 + *(int *)(v52 + 64));
    v74 = *(_QWORD *)(v51 + 208);
    v75 = *(_QWORD *)(v51 + 216);
    sub_10001AA44((_QWORD *)(v51 + 184), v74);
    (*(void (**)(uint64_t, uint64_t))(v75 + 88))(v74, v75);
    __asm { BR              X9 }
  }
  sub_1000126B0(*(_QWORD *)(v51 + 920), type metadata accessor for MemberSharingCircle);
  sub_100004048(v53, (uint64_t *)&unk_1010EE180);
  v54 = *(_QWORD *)(v51 + 1296) + 1;
  if (v54 != *(_QWORD *)(v51 + 1168))
  {
    *(_QWORD *)(v51 + 1296) = v54;
    v76 = *(_QWORD *)(v51 + 1152);
    if (v54 >= *(_QWORD *)(v76 + 16))
    {
      __break(1u);
      JUMPOUT(0x100182078);
    }
    v77 = *(_QWORD *)(v51 + 1112);
    sub_10005972C(v76+ ((*(unsigned __int8 *)(v51 + 1592) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 1592))+ *(_QWORD *)(v51 + 1184) * v54, *(_QWORD *)(v51 + 920), type metadata accessor for MemberSharingCircle);
    v78 = *(_QWORD *)(v51 + 208);
    v79 = *(_QWORD *)(v51 + 216);
    sub_10001AA44((_QWORD *)(v51 + 184), v78);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v79 + 8) + 8) + 32))(v78);
    v64 = sub_100180C90;
    goto LABEL_9;
  }
  v55 = *(_QWORD *)(v51 + 1288);
  v56 = *(_QWORD *)(v51 + 1304);
  swift_bridgeObjectRelease();
  sub_100302AB0(*(_QWORD *)(v51 + 1264));
  v57 = *(_QWORD *)(v51 + 1080);
  v58 = *(_QWORD *)(v51 + 1096) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v51 + 184));
  if (v58 != v57)
  {
    v80 = *(_QWORD *)(v51 + 1096) + 1;
    *(_QWORD *)(v51 + 1104) = v56;
    *(_QWORD *)(v51 + 1096) = v80;
    *(_QWORD *)(v51 + 1088) = v55;
    v81 = *(_QWORD *)(v51 + 688);
    sub_100030784(*(_QWORD *)(v51 + 680) + 40 * v80 + 32, v51 + 184);
    v77 = *(_QWORD *)(v81 + 136);
    *(_QWORD *)(v51 + 1112) = v77;
    v83 = *(_QWORD *)(v51 + 208);
    v82 = *(_QWORD *)(v51 + 216);
    sub_10001AA44((_QWORD *)(v51 + 184), v83);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v82 + 8) + 8) + 32))(v83);
    v64 = sub_10017FA64;
LABEL_9:
    v65 = v77;
    return swift_task_switch(v64, v65, 0);
  }
  v59 = *(_QWORD *)(v51 + 680);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v51 + 1360) = v56;
  *(_QWORD *)(v51 + 1352) = 0;
  v60 = *(_QWORD *)(v51 + 1112);
  v61 = *(_QWORD *)(v51 + 680) + 32;
  swift_bridgeObjectRetain(v59);
  sub_100030784(v61, v51 + 144);
  v62 = *(_QWORD *)(v51 + 168);
  v63 = *(_QWORD *)(v51 + 176);
  sub_10001AA44((_QWORD *)(v51 + 144), v62);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v63 + 8) + 8) + 32))(v62);
  v64 = sub_1001825B8;
  v65 = v60;
  return swift_task_switch(v64, v65, 0);
}

uint64_t sub_100182144()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1336);
  *(_QWORD *)(*(_QWORD *)v1 + 1344) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[145];
  if (v0)
  {
    v5 = v2[123];
    v6 = v2[122];
    v7 = v2[117];
    v8 = v2[86];
    swift_bridgeObjectRelease();
    v4(v6, v7);
    v4(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = sub_100185860;
  }
  else
  {
    v10 = v2[133];
    v11 = v2[132];
    v12 = v2[130];
    v13 = v2[123];
    v14 = v2[122];
    v15 = v2[117];
    v8 = v2[86];
    swift_bridgeObjectRelease();
    v4(v14, v15);
    v4(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    v9 = sub_1001822A4;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1001822A4()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 1304));
  v2 = *(_QWORD *)(v0 + 1304);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = sub_1007C8C68(0, *(_QWORD *)(v2 + 16) + 1, 1, *(_QWORD *)(v0 + 1304));
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1007C8C68(v3 > 1, v4 + 1, 1, v2);
  v5 = *(_QWORD *)(v0 + 920);
  v6 = *(_QWORD *)(v0 + 824);
  v7 = *(_QWORD *)(v0 + 784);
  v8 = *(_QWORD *)(v0 + 768);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  sub_1000126EC(v7, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v4, type metadata accessor for KeyDropFetchItem);
  sub_1000126B0(v6, type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v5, type metadata accessor for MemberSharingCircle);
  v9 = *(_QWORD *)(v0 + 1344);
  v10 = *(_QWORD *)(v0 + 1296) + 1;
  if (v10 != *(_QWORD *)(v0 + 1168))
  {
    *(_QWORD *)(v0 + 1304) = v2;
    *(_QWORD *)(v0 + 1296) = v10;
    *(_QWORD *)(v0 + 1288) = v9;
    v20 = *(_QWORD *)(v0 + 1152);
    if (v10 >= *(_QWORD *)(v20 + 16))
      __break(1u);
    v21 = *(_QWORD *)(v0 + 1112);
    sub_10005972C(v20+ ((*(unsigned __int8 *)(v0 + 1592) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1592))+ *(_QWORD *)(v0 + 1184) * v10, *(_QWORD *)(v0 + 920), type metadata accessor for MemberSharingCircle);
    v22 = *(_QWORD *)(v0 + 208);
    v23 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v22);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 32))(v22);
    v18 = sub_100180C90;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  sub_100302AB0(*(_QWORD *)(v0 + 1264));
  v11 = *(_QWORD *)(v0 + 1080);
  v12 = *(_QWORD *)(v0 + 1096) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 184));
  if (v12 != v11)
  {
    v24 = *(_QWORD *)(v0 + 1096) + 1;
    *(_QWORD *)(v0 + 1104) = v2;
    *(_QWORD *)(v0 + 1096) = v24;
    *(_QWORD *)(v0 + 1088) = v9;
    v25 = *(_QWORD *)(v0 + 688);
    sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v24 + 32, v0 + 184);
    v21 = *(_QWORD *)(v25 + 136);
    *(_QWORD *)(v0 + 1112) = v21;
    v26 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v26);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 8) + 32))(v26);
    v18 = sub_10017FA64;
LABEL_11:
    v19 = v21;
    return swift_task_switch(v18, v19, 0);
  }
  v13 = *(_QWORD *)(v0 + 680);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 1360) = v2;
  *(_QWORD *)(v0 + 1352) = 0;
  v14 = *(_QWORD *)(v0 + 1112);
  v15 = *(_QWORD *)(v0 + 680) + 32;
  swift_bridgeObjectRetain(v13);
  sub_100030784(v15, v0 + 144);
  v16 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 176);
  sub_10001AA44((_QWORD *)(v0 + 144), v16);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8) + 32))(v16);
  v18 = sub_1001825B8;
  v19 = v14;
  return swift_task_switch(v18, v19, 0);
}

uint64_t sub_1001825B8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
  v2 = *(unsigned __int8 *)(v0 + 1580);
  v3 = *(_QWORD *)(v0 + 1112);
  v4 = *(_QWORD *)(v0 + 1008);
  v5 = *(_QWORD *)(v0 + 936);
  v6 = (v2 + 24) & ~v2;
  v7 = (v6 + *(_QWORD *)(v0 + 952) + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1120))(v4, *(_QWORD *)(v0 + 1016), v5);
  v9 = swift_allocObject(&unk_10105CAC0, v7 + 8, v8);
  *(_QWORD *)(v0 + 1368) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  *(_QWORD *)(v9 + v7) = 0;
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1376) = v11;
  v12 = sub_10001A9A8(&qword_1010EE100);
  *v11 = v0;
  v11[1] = sub_1001826F8;
  return unsafeBlocking<A>(_:)(v0 + 560, sub_1000D82C0, v9, v12);
}

uint64_t sub_1001826F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1376));
  swift_release();
  return swift_task_switch(sub_100182790, v1, 0);
}

uint64_t sub_100182790()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void (*)(uint64_t, uint64_t))v0[145];
  v2 = v0[139];
  v3 = v0[127];
  v4 = v0[117];
  v0[173] = v0[70];
  v1(v3, v4);
  return swift_task_switch(sub_10018280C, v2, 0);
}

uint64_t sub_10018280C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 1392) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_1001828AC;
  return unsafeBlocking<A>(_:)(v0 + 536, sub_10007C6FC, *(_QWORD *)(v0 + 1112), v3);
}

uint64_t sub_1001828AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1392));
  swift_release();
  return swift_task_switch(sub_100182938, v1, 0);
}

uint64_t sub_100182938()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[86];
  v0[175] = v0[67];
  return swift_task_switch(sub_1001829A0, v1, 0);
}

uint64_t sub_1001829A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 1384);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 1408) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 704);
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 1600) = v4;
    *(_QWORD *)(v0 + 1416) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 1432) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1424) = 0;
    v5 = *(_QWORD *)(v0 + 1400);
    v6 = *(_QWORD *)(v0 + 720);
    v7 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v7, v6, type metadata accessor for OwnerSharingCircle);
    sub_100030784(v0 + 144, v0 + 264);
    v8 = swift_allocObject(&unk_10105CAE8, 64, 7);
    *(_QWORD *)(v0 + 1440) = v8;
    *(_QWORD *)(v8 + 16) = v5;
    sub_10000F9FC((__int128 *)(v0 + 264), v8 + 24);
    v9 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 1448) = v10;
    v11 = sub_10001A9A8(&qword_101108F70);
    *v10 = v0;
    v10[1] = sub_100182DDC;
    return unsafeBlocking<A>(_:)(v0 + 344, sub_1001AE7B4, v8, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 1360);
    sub_100302AB0((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    v14 = *(_QWORD *)(v0 + 1080);
    v15 = *(_QWORD *)(v0 + 1352) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
    if (v15 == v14)
    {
      v30 = v13;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(v0 + 648);
      v16 = *(_QWORD *)(v0 + 1048);
      v17 = *(_QWORD *)(v0 + 1040);
      v18 = *(_QWORD *)(v0 + 1032);
      v19 = *(_QWORD *)(v0 + 1016);
      v20 = *(_QWORD *)(v0 + 1008);
      v21 = *(_QWORD *)(v0 + 1000);
      v22 = *(_QWORD *)(v0 + 992);
      v23 = *(_QWORD *)(v0 + 984);
      v24 = *(_QWORD *)(v0 + 976);
      v31 = *(_QWORD *)(v0 + 968);
      v32 = *(_QWORD *)(v0 + 960);
      v33 = *(_QWORD *)(v0 + 928);
      v34 = *(_QWORD *)(v0 + 920);
      v35 = *(_QWORD *)(v0 + 896);
      v36 = *(_QWORD *)(v0 + 888);
      v37 = *(_QWORD *)(v0 + 880);
      v38 = *(_QWORD *)(v0 + 872);
      v39 = *(_QWORD *)(v0 + 864);
      v40 = *(_QWORD *)(v0 + 856);
      v41 = *(_QWORD *)(v0 + 848);
      v42 = *(_QWORD *)(v0 + 824);
      v43 = *(_QWORD *)(v0 + 800);
      v44 = *(_QWORD *)(v0 + 784);
      v45 = *(_QWORD *)(v0 + 776);
      v46 = *(_QWORD *)(v0 + 760);
      v47 = *(_QWORD *)(v0 + 752);
      v48 = *(_QWORD *)(v0 + 744);
      v49 = *(_QWORD *)(v0 + 720);
      v50 = *(_QWORD *)(v0 + 712);
      sub_100004048(v16, &qword_1010F1990);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v30, v29);
    }
    else
    {
      v25 = *(_QWORD *)(v0 + 1352) + 1;
      *(_QWORD *)(v0 + 1360) = v13;
      *(_QWORD *)(v0 + 1352) = v25;
      v26 = *(_QWORD *)(v0 + 1112);
      sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v25 + 32, v0 + 144);
      v27 = *(_QWORD *)(v0 + 168);
      v28 = *(_QWORD *)(v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 144), v27);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v27);
      return swift_task_switch(sub_1001825B8, v26, 0);
    }
  }
}

uint64_t sub_100182DDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1448);
  *(_QWORD *)(*v1 + 1456) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 1384);
    v5 = *(_QWORD *)(v2 + 688);
    swift_release();
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease();
    v6 = sub_100185CF8;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 688);
    swift_release();
    v6 = sub_100182EC4;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100182EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 1432);
  v2 = *(uint64_t **)(v0 + 872);
  sub_10001BC14(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  *(_QWORD *)(v0 + 1464) = v3;
  *(_QWORD *)(v0 + 1472) = v4;
  v5 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  sub_10001AA44((_QWORD *)(v0 + 144), v5);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 32);
  sub_10001BBBC(v3, v4);
  v8(v5, v7);
  *v2 = v3;
  v2[1] = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v10 = *(_QWORD *)(v0 + 1432);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v10 = sub_1007C8C54(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(_QWORD *)(v10 + 24);
  if (v12 >= v11 >> 1)
    v10 = sub_1007C8C54(v11 > 1, v12 + 1, 1, v10);
  *(_QWORD *)(v0 + 1480) = v10;
  v13 = *(_QWORD *)(v0 + 872);
  v14 = *(_QWORD *)(v0 + 840);
  v15 = *(_QWORD *)(v0 + 720);
  v16 = *(_QWORD *)(v0 + 696);
  v17 = *(_QWORD *)(v0 + 688);
  *(_QWORD *)(v10 + 16) = v12 + 1;
  v18 = *(_DWORD *)(v14 + 80);
  *(_DWORD *)(v0 + 1604) = v18;
  v19 = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v0 + 1488) = v19;
  sub_1000126EC(v13, v10 + ((v18 + 32) & ~(unint64_t)v18) + v19 * v12, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  *(_QWORD *)(v0 + 1496) = *(_QWORD *)(v17 + 128);
  v20 = *(int *)(v16 + 20);
  *(_DWORD *)(v0 + 1608) = *(_DWORD *)(v16 + 24);
  v21 = (_QWORD *)swift_task_alloc(dword_10110D164);
  *(_QWORD *)(v0 + 1504) = v21;
  *v21 = v0;
  v21[1] = sub_100183084;
  return sub_10090C6D8(v0 + 16, v15 + v20);
}

uint64_t sub_100183084()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1504);
  *(_QWORD *)(*(_QWORD *)v1 + 1512) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v2[191] = v0;
    v4 = v2[173];
    v5 = v2[86];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v4, 2);
    v6 = sub_100184120;
    v7 = v5;
  }
  else
  {
    v7 = v2[187];
    v6 = sub_100183158;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100183158()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 12;
    swift_willThrow(v3);
    sub_1000D9530((uint64_t *)(v0 + 16));
    *(_QWORD *)(v0 + 1528) = v3;
    v5 = *(_QWORD *)(v0 + 1384);
    v6 = *(_QWORD *)(v0 + 688);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v5, 2);
    v7 = sub_100184120;
    v8 = v6;
  }
  else
  {
    v9 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 1120);
    v10 = *(_QWORD *)(v0 + 936);
    v11 = *(uint64_t **)(v0 + 864);
    v12 = *(_QWORD *)(v0 + 832);
    v13 = *(_QWORD *)(v0 + 688);
    v14 = *(_QWORD *)(v0 + 720) + *(int *)(v0 + 1608);
    v15 = *(_QWORD *)(v0 + 56);
    sub_10001BBBC(v15, *(_QWORD *)(v0 + 64));
    sub_1000D9530((uint64_t *)(v0 + 16));
    v9((char *)v11 + *(int *)(v12 + 20), v14, v10);
    *v11 = v15;
    v11[1] = v1;
    v7 = sub_1001832BC;
    v8 = v13;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_1001832BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;

  v1 = *(_QWORD *)(v0 + 1480);
  sub_10005972C(*(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 856), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v0 + 1480);
  if (v3 >= v2 >> 1)
    v4 = sub_1007C8C54(v2 > 1, v3 + 1, 1, *(_QWORD *)(v0 + 1480));
  *(_QWORD *)(v0 + 1520) = v4;
  v5 = *(_QWORD *)(v0 + 1488);
  v6 = *(unsigned __int8 *)(v0 + 1604);
  v7 = *(_QWORD *)(v0 + 1472);
  v8 = *(_QWORD *)(v0 + 1464);
  v9 = *(_QWORD *)(v0 + 1408);
  v10 = *(_QWORD *)(v0 + 864);
  v11 = *(_QWORD *)(v0 + 856);
  v12 = *(_QWORD *)(v0 + 720);
  v13 = *(_QWORD *)(v0 + 1424) + 1;
  *(_QWORD *)(v4 + 16) = v3 + 1;
  sub_1000126EC(v11, v4 + ((v6 + 32) & ~v6) + v5 * v3, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_10001BC14(v8, v7);
  sub_1000126B0(v10, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
  sub_1000126B0(v12, type metadata accessor for OwnerSharingCircle);
  if (v13 == v9)
  {
    v14 = *(int **)(v0 + 696);
    swift_bridgeObjectRelease();
    v15 = v14[6];
    *(_DWORD *)(v0 + 1612) = v15;
    v16 = v14[5];
    *(_DWORD *)(v0 + 1616) = v16;
    v17 = v14[7];
    *(_DWORD *)(v0 + 1620) = v17;
    *(_QWORD *)(v0 + 1544) = *(_QWORD *)(v0 + 1360);
    *(_QWORD *)(v0 + 1536) = 0;
    v18 = *(_QWORD *)(v0 + 1384);
    if (!*(_QWORD *)(v18 + 16))
    {
      __break(1u);
      JUMPOUT(0x100184070);
    }
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1120);
    v20 = *(_QWORD *)(v0 + 968);
    v21 = *(_QWORD *)(v0 + 960);
    v22 = *(_QWORD *)(v0 + 936);
    v23 = *(_QWORD *)(v0 + 712);
    v24 = v23 + v16;
    v25 = v23 + v15;
    sub_10005972C(v18 + ((*(unsigned __int8 *)(v0 + 1600) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1600)), v23, type metadata accessor for OwnerSharingCircle);
    v19(v20, v25, v22);
    v19(v21, v24, v22);
    v26 = *(_BYTE *)(v23 + v17);
    sub_1000126B0(v23, type metadata accessor for OwnerSharingCircle);
    v27 = *(_QWORD *)(v0 + 1520);
    v28 = *(_QWORD *)(v0 + 1032);
    v29 = *(_QWORD *)(v0 + 672);
    v30 = *(int *)(*(_QWORD *)(v0 + 1024) + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 1072))(v28, *(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1056));
    *(_QWORD *)(v28 + v30) = v29;
    v31 = *(_QWORD *)(v27 + 16);
    if (v31)
    {
      v32 = *(_QWORD *)(v0 + 1520);
      *(_QWORD *)(v0 + 520) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v32);
      sub_10009ABA4(0, v31, 0);
      v33 = *(_QWORD *)(v0 + 848);
      sub_10005972C(*(_QWORD *)(v0 + 1520)+ ((*(unsigned __int8 *)(v0 + 1604) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1604)), v33, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
      __asm { BR              X10 }
    }
    *(_QWORD *)(v0 + 1552) = _swiftEmptyArrayStorage;
    v41 = (_QWORD *)swift_task_alloc(dword_1010F19A4);
    *(_QWORD *)(v0 + 1560) = v41;
    *v41 = v0;
    v41[1] = sub_100184704;
    return sub_100188268(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 960), 0x201u >> (8 * v26), *(_QWORD *)(v0 + 1032), *(_QWORD *)(v0 + 672), (uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v34 = *(_QWORD *)(v0 + 1424) + 1;
    *(_QWORD *)(v0 + 1432) = v4;
    *(_QWORD *)(v0 + 1424) = v34;
    v35 = *(_QWORD *)(v0 + 1400);
    sub_10005972C(*(_QWORD *)(v0 + 1384)+ ((*(unsigned __int8 *)(v0 + 1600) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1600))+ *(_QWORD *)(v0 + 1416) * v34, *(_QWORD *)(v0 + 720), type metadata accessor for OwnerSharingCircle);
    sub_100030784(v0 + 144, v0 + 264);
    v36 = swift_allocObject(&unk_10105CAE8, 64, 7);
    *(_QWORD *)(v0 + 1440) = v36;
    *(_QWORD *)(v36 + 16) = v35;
    sub_10000F9FC((__int128 *)(v0 + 264), v36 + 24);
    v37 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v38 = (_QWORD *)swift_task_alloc(v37);
    *(_QWORD *)(v0 + 1448) = v38;
    v39 = sub_10001A9A8(&qword_101108F70);
    *v38 = v0;
    v38[1] = sub_100182DDC;
    return unsafeBlocking<A>(_:)(v0 + 344, sub_1001AE7B4, v36, v39);
  }
}

uint64_t sub_100184120()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];

  v1 = (_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 720);
  sub_10001BC14(*(_QWORD *)(v0 + 1464), *(_QWORD *)(v0 + 1472));
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerSharingCircle);
  v3 = *(_QWORD *)(v0 + 1528);
  v4 = *(_QWORD *)(v0 + 1360);
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B69B0);
  sub_100030784(v0 + 144, v0 + 224);
  swift_errorRetain(v3);
  v6 = swift_errorRetain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v61 = v4;
  if (os_log_type_enabled(v7, v8))
  {
    v58 = v8;
    v49 = *(void (**)(uint64_t, uint64_t))(v0 + 1160);
    v9 = *(_QWORD *)(v0 + 1016);
    v10 = *(_QWORD *)(v0 + 936);
    v11 = swift_slowAlloc(32, -1);
    v56 = swift_slowAlloc(64, -1);
    v62[0] = v56;
    *(_DWORD *)v11 = 141558531;
    *(_QWORD *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    v13 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v13);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v13);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    v17 = v16;
    v18 = v10;
    v4 = v61;
    v49(v9, v18);
    *(_QWORD *)(v0 + 488) = sub_100016940(v15, v17, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v11 + 14, v11 + 22);
    v1 = (_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    *(_WORD *)(v11 + 22) = 2080;
    swift_getErrorValue(v3, v0 + 496, v0 + 376);
    v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    *(_QWORD *)(v0 + 512) = sub_100016940(v19, v20, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v7, v58, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v21 = *(_QWORD *)(v0 + 1080);
  v22 = *(_QWORD *)(v0 + 1352) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v22 == v21)
  {
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v0 + 1048);
    v24 = *(_QWORD *)(v0 + 1040);
    v25 = *(_QWORD *)(v0 + 1032);
    v26 = *(_QWORD *)(v0 + 1016);
    v27 = *(_QWORD *)(v0 + 1008);
    v28 = *(_QWORD *)(v0 + 1000);
    v29 = *(_QWORD *)(v0 + 992);
    v30 = *(_QWORD *)(v0 + 984);
    v31 = *(_QWORD *)(v0 + 976);
    v37 = *(_QWORD *)(v0 + 648);
    v38 = *(_QWORD *)(v0 + 968);
    v39 = *(_QWORD *)(v0 + 960);
    v40 = *(_QWORD *)(v0 + 928);
    v41 = *(_QWORD *)(v0 + 920);
    v42 = *(_QWORD *)(v0 + 896);
    v43 = *(_QWORD *)(v0 + 888);
    v44 = *(_QWORD *)(v0 + 880);
    v45 = *(_QWORD *)(v0 + 872);
    v46 = *(_QWORD *)(v0 + 864);
    v47 = *(_QWORD *)(v0 + 856);
    v48 = *(_QWORD *)(v0 + 848);
    v50 = *(_QWORD *)(v0 + 824);
    v51 = *(_QWORD *)(v0 + 800);
    v52 = *(_QWORD *)(v0 + 784);
    v53 = *(_QWORD *)(v0 + 776);
    v54 = *(_QWORD *)(v0 + 760);
    v55 = *(_QWORD *)(v0 + 752);
    v57 = *(_QWORD *)(v0 + 744);
    v59 = *(_QWORD *)(v0 + 720);
    v60 = *(_QWORD *)(v0 + 712);
    sub_100004048(v23, &qword_1010F1990);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v61, v37);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 1352) + 1;
    *(_QWORD *)(v0 + 1360) = v4;
    *(_QWORD *)(v0 + 1352) = v33;
    v34 = *(_QWORD *)(v0 + 1112);
    sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v33 + 32, (uint64_t)v1);
    v35 = *(_QWORD *)(v0 + 168);
    v36 = *(_QWORD *)(v0 + 176);
    sub_10001AA44(v1, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8) + 32))(v35);
    return swift_task_switch(sub_1001825B8, v34, 0);
  }
}

uint64_t sub_100184704()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1560);
  *(_QWORD *)(*(_QWORD *)v1 + 1568) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[145];
  if (v0)
  {
    v5 = v2[121];
    v6 = v2[120];
    v7 = v2[117];
    v8 = v2[86];
    swift_bridgeObjectRelease();
    v4(v6, v7);
    v4(v5, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = sub_1001862D4;
  }
  else
  {
    v10 = v2[133];
    v11 = v2[132];
    v12 = v2[129];
    v13 = v2[121];
    v14 = v2[120];
    v15 = v2[117];
    v8 = v2[86];
    swift_bridgeObjectRelease();
    v4(v14, v15);
    v4(v13, v15);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    v9 = sub_100184864;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_100184864()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 1544));
  v2 = *(_QWORD *)(v0 + 1544);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = sub_1007C8C68(0, *(_QWORD *)(v2 + 16) + 1, 1, *(_QWORD *)(v0 + 1544));
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1007C8C68(v3 > 1, v4 + 1, 1, v2);
  v5 = *(_QWORD *)(v0 + 1408);
  v6 = *(_QWORD *)(v0 + 776);
  v7 = *(_QWORD *)(v0 + 768);
  v8 = *(_QWORD *)(v0 + 1536) + 1;
  *(_QWORD *)(v2 + 16) = v4 + 1;
  sub_1000126EC(v6, v2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v4, type metadata accessor for KeyDropFetchItem);
  if (v8 == v5)
  {
    swift_bridgeObjectRelease();
    sub_100302AB0(*(_QWORD *)(v0 + 1520));
    swift_release();
    v9 = *(_QWORD *)(v0 + 1080);
    v10 = *(_QWORD *)(v0 + 1352) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
    if (v10 == v9)
    {
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(v0 + 1048);
      v12 = *(_QWORD *)(v0 + 1040);
      v13 = *(_QWORD *)(v0 + 1032);
      v14 = *(_QWORD *)(v0 + 1016);
      v15 = *(_QWORD *)(v0 + 1008);
      v16 = *(_QWORD *)(v0 + 1000);
      v17 = *(_QWORD *)(v0 + 992);
      v18 = *(_QWORD *)(v0 + 984);
      v43 = *(_QWORD *)(v0 + 648);
      v44 = *(_QWORD *)(v0 + 976);
      v45 = *(_QWORD *)(v0 + 968);
      v46 = *(_QWORD *)(v0 + 960);
      v47 = *(_QWORD *)(v0 + 928);
      v48 = *(_QWORD *)(v0 + 920);
      v49 = *(_QWORD *)(v0 + 896);
      v50 = *(_QWORD *)(v0 + 888);
      v51 = *(_QWORD *)(v0 + 880);
      v52 = *(_QWORD *)(v0 + 872);
      v53 = *(_QWORD *)(v0 + 864);
      v54 = *(_QWORD *)(v0 + 856);
      v55 = *(_QWORD *)(v0 + 848);
      v56 = *(_QWORD *)(v0 + 824);
      v57 = *(_QWORD *)(v0 + 800);
      v58 = *(_QWORD *)(v0 + 784);
      v59 = *(_QWORD *)(v0 + 776);
      v60 = *(_QWORD *)(v0 + 760);
      v61 = *(_QWORD *)(v0 + 752);
      v62 = *(_QWORD *)(v0 + 744);
      v63 = *(_QWORD *)(v0 + 720);
      v64 = *(_QWORD *)(v0 + 712);
      sub_100004048(v11, &qword_1010F1990);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      return (*(uint64_t (**)(unint64_t, uint64_t))(v0 + 8))(v2, v43);
    }
    else
    {
      v38 = *(_QWORD *)(v0 + 1352) + 1;
      *(_QWORD *)(v0 + 1360) = v2;
      *(_QWORD *)(v0 + 1352) = v38;
      v39 = *(_QWORD *)(v0 + 1112);
      sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v38 + 32, v0 + 144);
      v40 = *(_QWORD *)(v0 + 168);
      v41 = *(_QWORD *)(v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 144), v40);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 32))(v40);
      return swift_task_switch(sub_1001825B8, v39, 0);
    }
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 1536) + 1;
    *(_QWORD *)(v0 + 1544) = v2;
    *(_QWORD *)(v0 + 1536) = v20;
    v21 = *(_QWORD *)(v0 + 1384);
    if (v20 >= *(_QWORD *)(v21 + 16))
    {
      __break(1u);
      JUMPOUT(0x1001857B0);
    }
    v22 = *(int *)(v0 + 1620);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1120);
    v24 = *(_QWORD *)(v0 + 968);
    v25 = *(_QWORD *)(v0 + 960);
    v26 = *(_QWORD *)(v0 + 936);
    v27 = *(_QWORD *)(v0 + 712);
    v28 = v27 + *(int *)(v0 + 1616);
    v29 = v27 + *(int *)(v0 + 1612);
    sub_10005972C(v21+ ((*(unsigned __int8 *)(v0 + 1600) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1600))+ *(_QWORD *)(v0 + 1416) * v20, v27, type metadata accessor for OwnerSharingCircle);
    v23(v24, v29, v26);
    v23(v25, v28, v26);
    v30 = *(_BYTE *)(v27 + v22);
    sub_1000126B0(v27, type metadata accessor for OwnerSharingCircle);
    v31 = *(_QWORD *)(v0 + 1520);
    v32 = *(_QWORD *)(v0 + 1032);
    v33 = *(_QWORD *)(v0 + 672);
    v34 = *(int *)(*(_QWORD *)(v0 + 1024) + 48);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 1072))(v32, *(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1056));
    *(_QWORD *)(v32 + v34) = v33;
    v35 = *(_QWORD *)(v31 + 16);
    if (v35)
    {
      v36 = *(_QWORD *)(v0 + 1520);
      *(_QWORD *)(v0 + 520) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v36);
      sub_10009ABA4(0, v35, 0);
      v37 = *(_QWORD *)(v0 + 848);
      sub_10005972C(*(_QWORD *)(v0 + 1520)+ ((*(unsigned __int8 *)(v0 + 1604) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1604)), v37, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
      __asm { BR              X10 }
    }
    *(_QWORD *)(v0 + 1552) = _swiftEmptyArrayStorage;
    v42 = (_QWORD *)swift_task_alloc(dword_1010F19A4);
    *(_QWORD *)(v0 + 1560) = v42;
    *v42 = v0;
    v42[1] = sub_100184704;
    return sub_100188268(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 960), 0x201u >> (8 * v30), *(_QWORD *)(v0 + 1032), *(_QWORD *)(v0 + 672), (uint64_t)_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100185860()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  os_log_type_t type;
  uint64_t v39;
  uint64_t v40[2];

  v1 = v0 + 23;
  v2 = v0[133];
  v3 = v0[132];
  v4 = v0[130];
  v5 = v0[115];
  sub_1000126B0(v0[103], type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v5, type metadata accessor for MemberSharingCircle);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  v6 = v0[168];
  v7 = v0[163];
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  sub_10001A9E8(v0[156], (uint64_t)qword_1011B69B0);
  sub_100030784((uint64_t)(v0 + 23), (uint64_t)(v0 + 38));
  swift_errorRetain(v6);
  v8 = swift_errorRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    type = v10;
    v36 = (void (*)(uint64_t, uint64_t))v0[145];
    v11 = v0[127];
    v12 = v0[117];
    v39 = v7;
    v13 = swift_slowAlloc(32, -1);
    v37 = swift_slowAlloc(64, -1);
    v40[0] = v37;
    *(_DWORD *)v13 = 141558531;
    v0[71] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 71, v0 + 72, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = v0[41];
    v14 = v0[42];
    sub_10001AA44(v0 + 38, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8) + 32))(v15);
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v19 = v18;
    v36(v11, v12);
    v0[72] = sub_100016940(v17, v19, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 73, v13 + 14, v13 + 22);
    v1 = v0 + 23;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    *(_WORD *)(v13 + 22) = 2080;
    swift_getErrorValue(v6, v0 + 73, v0 + 50);
    v20 = Error.localizedDescription.getter(v0[51], v0[52]);
    v0[75] = sub_100016940(v20, v21, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 75, v0 + 76, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Could not create fetch item for shared beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v22 = v13;
    v7 = v39;
    swift_slowDealloc(v22, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(v6);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 38);
    swift_errorRelease(v6);
    swift_errorRelease(v6);

  }
  v23 = v0[135];
  v24 = v0[137] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v24 == v23)
  {
    v25 = v0[85];
    swift_bridgeObjectRelease();
    v0[170] = v7;
    v0[169] = 0;
    v26 = v0[139];
    v27 = v0[85] + 32;
    swift_bridgeObjectRetain(v25);
    sub_100030784(v27, (uint64_t)(v0 + 18));
    v28 = v0[21];
    v29 = v0[22];
    sub_10001AA44(v0 + 18, v28);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 8) + 32))(v28);
    v30 = sub_1001825B8;
  }
  else
  {
    v31 = v0[137] + 1;
    v0[138] = v7;
    v0[137] = v31;
    v0[136] = 0;
    v32 = v0[86];
    sub_100030784(v0[85] + 40 * v31 + 32, (uint64_t)v1);
    v26 = *(_QWORD *)(v32 + 136);
    v0[139] = v26;
    v33 = v0[26];
    v34 = v0[27];
    sub_10001AA44(v1, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 8) + 32))(v33);
    v30 = sub_10017FA64;
  }
  return swift_task_switch(v30, v26, 0);
}

uint64_t sub_100185CF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *log;
  os_log_t loga;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];

  v1 = (_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 720);
  swift_release();
  sub_1000126B0(v2, type metadata accessor for OwnerSharingCircle);
  v3 = *(_QWORD *)(v0 + 1456);
  v4 = *(_QWORD *)(v0 + 1360);
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B69B0);
  sub_100030784(v0 + 144, v0 + 224);
  swift_errorRetain(v3);
  v6 = swift_errorRetain(v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v61 = v4;
  if (os_log_type_enabled(v7, v8))
  {
    v58 = v8;
    v47 = *(void (**)(uint64_t, uint64_t))(v0 + 1160);
    log = v7;
    v9 = *(_QWORD *)(v0 + 1016);
    v10 = *(_QWORD *)(v0 + 936);
    v11 = swift_slowAlloc(32, -1);
    v56 = swift_slowAlloc(64, -1);
    v62[0] = v56;
    *(_DWORD *)v11 = 141558531;
    *(_QWORD *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    v13 = *(_QWORD *)(v0 + 248);
    v12 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v13);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v13);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    v17 = v16;
    v47(v9, v10);
    *(_QWORD *)(v0 + 488) = sub_100016940(v15, v17, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v11 + 14, v11 + 22);
    v1 = (_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    *(_WORD *)(v11 + 22) = 2080;
    swift_getErrorValue(v3, v0 + 496, v0 + 376);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    *(_QWORD *)(v0 + 512) = sub_100016940(v18, v19, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, log, v58, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v20 = *(_QWORD *)(v0 + 1080);
  v21 = *(_QWORD *)(v0 + 1352) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v0 + 1048);
    v23 = *(_QWORD *)(v0 + 1040);
    v24 = *(_QWORD *)(v0 + 1032);
    v25 = *(_QWORD *)(v0 + 1016);
    v26 = *(_QWORD *)(v0 + 1008);
    v27 = *(_QWORD *)(v0 + 1000);
    v28 = *(_QWORD *)(v0 + 992);
    v29 = *(_QWORD *)(v0 + 984);
    v30 = *(_QWORD *)(v0 + 976);
    v36 = *(_QWORD *)(v0 + 648);
    v37 = *(_QWORD *)(v0 + 968);
    v38 = *(_QWORD *)(v0 + 960);
    v39 = *(_QWORD *)(v0 + 928);
    v40 = *(_QWORD *)(v0 + 920);
    v41 = *(_QWORD *)(v0 + 896);
    v42 = *(_QWORD *)(v0 + 888);
    v43 = *(_QWORD *)(v0 + 880);
    v44 = *(_QWORD *)(v0 + 872);
    v45 = *(_QWORD *)(v0 + 864);
    v46 = *(_QWORD *)(v0 + 856);
    v48 = *(_QWORD *)(v0 + 848);
    v49 = *(_QWORD *)(v0 + 824);
    v50 = *(_QWORD *)(v0 + 800);
    v51 = *(_QWORD *)(v0 + 784);
    v52 = *(_QWORD *)(v0 + 776);
    v53 = *(_QWORD *)(v0 + 760);
    loga = *(os_log_t *)(v0 + 752);
    v57 = *(_QWORD *)(v0 + 744);
    v59 = *(_QWORD *)(v0 + 720);
    v60 = *(_QWORD *)(v0 + 712);
    sub_100004048(v22, &qword_1010F1990);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(loga);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v61, v36);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 1352) + 1;
    *(_QWORD *)(v0 + 1360) = v4;
    *(_QWORD *)(v0 + 1352) = v32;
    v33 = *(_QWORD *)(v0 + 1112);
    sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v32 + 32, (uint64_t)v1);
    v35 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 176);
    sub_10001AA44(v1, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 8) + 32))(v35);
    return swift_task_switch(sub_1001825B8, v33, 0);
  }
}

uint64_t sub_1001862D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];

  v1 = (_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 1064);
  v3 = *(_QWORD *)(v0 + 1056);
  v4 = *(_QWORD *)(v0 + 1032);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  v5 = *(_QWORD *)(v0 + 1568);
  v6 = *(_QWORD *)(v0 + 1544);
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B69B0);
  sub_100030784(v0 + 144, v0 + 224);
  swift_errorRetain(v5);
  v8 = swift_errorRetain(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  v63 = v6;
  if (os_log_type_enabled(v9, v10))
  {
    v60 = v10;
    v51 = *(void (**)(uint64_t, uint64_t))(v0 + 1160);
    v11 = *(_QWORD *)(v0 + 1016);
    v12 = *(_QWORD *)(v0 + 936);
    v13 = swift_slowAlloc(32, -1);
    v58 = swift_slowAlloc(64, -1);
    v64[0] = v58;
    *(_DWORD *)v13 = 141558531;
    *(_QWORD *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = *(_QWORD *)(v0 + 248);
    v14 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v15);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8) + 32))(v15);
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v19 = v18;
    v20 = v12;
    v6 = v63;
    v51(v11, v20);
    *(_QWORD *)(v0 + 488) = sub_100016940(v17, v19, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v13 + 14, v13 + 22);
    v1 = (_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    *(_WORD *)(v13 + 22) = 2080;
    swift_getErrorValue(v5, v0 + 496, v0 + 376);
    v21 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392));
    *(_QWORD *)(v0 + 512) = sub_100016940(v21, v22, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v9, v60, "Could not create fetch item for owned beacon %{private,mask.hash}s, error: %s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  v23 = *(_QWORD *)(v0 + 1080);
  v24 = *(_QWORD *)(v0 + 1352) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v24 == v23)
  {
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v0 + 1048);
    v26 = *(_QWORD *)(v0 + 1040);
    v27 = *(_QWORD *)(v0 + 1032);
    v28 = *(_QWORD *)(v0 + 1016);
    v29 = *(_QWORD *)(v0 + 1008);
    v30 = *(_QWORD *)(v0 + 1000);
    v31 = *(_QWORD *)(v0 + 992);
    v32 = *(_QWORD *)(v0 + 984);
    v33 = *(_QWORD *)(v0 + 976);
    v39 = *(_QWORD *)(v0 + 648);
    v40 = *(_QWORD *)(v0 + 968);
    v41 = *(_QWORD *)(v0 + 960);
    v42 = *(_QWORD *)(v0 + 928);
    v43 = *(_QWORD *)(v0 + 920);
    v44 = *(_QWORD *)(v0 + 896);
    v45 = *(_QWORD *)(v0 + 888);
    v46 = *(_QWORD *)(v0 + 880);
    v47 = *(_QWORD *)(v0 + 872);
    v48 = *(_QWORD *)(v0 + 864);
    v49 = *(_QWORD *)(v0 + 856);
    v50 = *(_QWORD *)(v0 + 848);
    v52 = *(_QWORD *)(v0 + 824);
    v53 = *(_QWORD *)(v0 + 800);
    v54 = *(_QWORD *)(v0 + 784);
    v55 = *(_QWORD *)(v0 + 776);
    v56 = *(_QWORD *)(v0 + 760);
    v57 = *(_QWORD *)(v0 + 752);
    v59 = *(_QWORD *)(v0 + 744);
    v61 = *(_QWORD *)(v0 + 720);
    v62 = *(_QWORD *)(v0 + 712);
    sub_100004048(v25, &qword_1010F1990);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v63, v39);
  }
  else
  {
    v35 = *(_QWORD *)(v0 + 1352) + 1;
    *(_QWORD *)(v0 + 1360) = v6;
    *(_QWORD *)(v0 + 1352) = v35;
    v36 = *(_QWORD *)(v0 + 1112);
    sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v35 + 32, (uint64_t)v1);
    v37 = *(_QWORD *)(v0 + 168);
    v38 = *(_QWORD *)(v0 + 176);
    sub_10001AA44(v1, v37);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 8) + 8) + 32))(v37);
    return swift_task_switch(sub_1001825B8, v36, 0);
  }
}

uint64_t sub_1001868B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;

  *(_QWORD *)(v5 + 328) = a4;
  *(_QWORD *)(v5 + 336) = v4;
  *(_QWORD *)(v5 + 312) = a1;
  *(_QWORD *)(v5 + 320) = a2;
  v7 = type metadata accessor for SymmetricKey(0);
  *(_QWORD *)(v5 + 344) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 352) = v8;
  *(_QWORD *)(v5 + 360) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  *(_QWORD *)(v5 + 368) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 376) = v10;
  *(_QWORD *)(v5 + 384) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 392) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 400) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v5 + 408) = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 416) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 424) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 432) = swift_task_alloc(v14);
  *(_QWORD *)(v5 + 440) = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_1010F1990);
  *(_QWORD *)(v5 + 448) = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 456) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 464) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 472) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 480) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 488) = swift_task_alloc(v16);
  v17 = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 496) = v17;
  v18 = *(void (**)(void))(v10 + 16);
  *(_QWORD *)(v5 + 504) = v18;
  v18();
  v19 = *(int *)(v15 + 48);
  *(_DWORD *)(v5 + 688) = v19;
  *(_QWORD *)(v17 + v19) = a4;
  return swift_task_switch(sub_100186A44, v4, 0);
}

uint64_t sub_100186A44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_t log;
  NSObject *loga;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v1 = v0[61];
  v44 = v0[62];
  log = (os_log_t)v0[63];
  v2 = v0[59];
  type = v0[60];
  v50 = v0[58];
  v3 = v0[56];
  v42 = v0[55];
  v5 = v0[49];
  v4 = v0[50];
  v6 = v0[46];
  v8 = v0[40];
  v7 = v0[41];
  v9 = type metadata accessor for Logger(0);
  v0[64] = sub_10001A9E8(v9, (uint64_t)qword_1011B69B0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[65] = v10;
  v10(v42, v8, v5);
  v11 = *(int *)(v3 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))log)(v1, v44, v6);
  *(_QWORD *)(v1 + v11) = v7;
  sub_100005CF0(v1, type, &qword_1010F1990);
  v12 = *(int *)(v3 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))log)(v2, v44, v6);
  *(_QWORD *)(v2 + v12) = v7;
  v13 = sub_100005CF0(v2, v50, &qword_1010F1990);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v39 = v0[60];
    v40 = (void (*)(uint64_t, uint64_t, uint64_t))v0[63];
    v43 = v0[58];
    v51 = v0[57];
    v41 = v0[56];
    typea = v15;
    v16 = v0[55];
    v17 = v0[49];
    v37 = v0[50];
    loga = v14;
    v18 = v0[47];
    v38 = v0[48];
    v19 = v0[46];
    v20 = swift_slowAlloc(42, -1);
    v45 = swift_slowAlloc(64, -1);
    v52 = v45;
    *(_DWORD *)v20 = 141558787;
    v0[35] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 35, v0 + 36, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v17, v21);
    v0[36] = sub_100016940(v22, v23, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 36, v0 + 37, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v16, v17);
    *(_WORD *)(v20 + 22) = 2080;
    v40(v51, v39, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v38, v51, v19);
    v24 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v19, v24);
    v27 = v26;
    v28 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v28(v38, v19);
    v0[37] = sub_100016940(v25, v27, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 37, v0 + 38, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    sub_100004048(v39, &qword_1010F1990);
    *(_WORD *)(v20 + 32) = 2048;
    v29 = *(int *)(v41 + 48);
    v40(v51, v43, v19);
    v30 = *(_QWORD *)(v43 + v29);
    *(_QWORD *)(v51 + v29) = v30;
    v28(v51, v19);
    sub_100004048(v43, &qword_1010F1990);
    v0[38] = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 38, v0 + 39, v20 + 34, v20 + 42);
    _os_log_impl((void *)&_mh_execute_header, loga, typea, "Bundle Decryption for shareId: %{private,mask.hash}s for dateInterval: %s + %ld days count.", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {
    v31 = v0[60];
    v32 = v0[55];
    v33 = v0[49];
    v34 = v0[50];
    sub_100004048(v0[58], &qword_1010F1990);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    sub_100004048(v31, &qword_1010F1990);

  }
  v35 = *(_QWORD *)(v0[42] + 136);
  v0[66] = v35;
  return swift_task_switch(sub_100186E9C, v35, 0);
}

uint64_t sub_100186E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 392);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 520))(v2, *(_QWORD *)(v0 + 312), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10105CB38, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 536) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 544) = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v10 = v0;
  v10[1] = sub_100186F94;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_1000D9638, v8, v11);
}

uint64_t sub_100186F94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 336);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 544));
  swift_release();
  return swift_task_switch(sub_100186FF8, v1, 0);
}

uint64_t sub_100186FF8()
{
  uint64_t v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (__int128 *)(v0 + 120);
  if (*(_QWORD *)(v0 + 144))
  {
    sub_10000F9FC(v1, v0 + 80);
    v2 = (_QWORD *)swift_task_alloc(dword_1010F19B4);
    *(_QWORD *)(v0 + 552) = v2;
    *v2 = v0;
    v2[1] = sub_100187174;
    return sub_100187D00(v0 + 80, *(_QWORD *)(v0 + 496));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 496);
    sub_100004048((uint64_t)v1, (uint64_t *)&unk_1010EE310);
    v5 = sub_1000D9414();
    v18 = swift_allocError(&type metadata for BeaconSharingService.BeaconSharingServiceError, v5, 0, 0);
    *v6 = 4;
    swift_willThrow(v18);
    sub_100004048(v4, &qword_1010F1990);
    v7 = *(_QWORD *)(v0 + 488);
    v9 = *(_QWORD *)(v0 + 472);
    v8 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 456);
    v10 = *(_QWORD *)(v0 + 464);
    v13 = *(_QWORD *)(v0 + 432);
    v12 = *(_QWORD *)(v0 + 440);
    v14 = *(_QWORD *)(v0 + 416);
    v15 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 384);
    v17 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 496));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100187174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001871D4, v3, 0);
}

void sub_1001871D4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 560);
  if (v1)
    v2 = v1 / 0x60 + 1;
  else
    v2 = 0;
  *(_QWORD *)(v0 + 568) = v2;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 496) + *(int *)(v0 + 688));
  v4 = __OFSUB__(v2, v3);
  v5 = v2 - v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = __OFADD__(v5, 1);
  v6 = v5 + 1;
  if (v4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6 <= 1)
    v6 = 1;
  *(_QWORD *)(v0 + 576) = v6;
  if (v2 >= v6)
  {
    *(_QWORD *)(v0 + 584) = *(_QWORD *)(*(_QWORD *)(v0 + 336) + 128);
    v7 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 592) = v7;
    *v7 = v0;
    v7[1] = sub_100187290;
    sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 320));
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_100187290()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 592));
  if (v0)
  {
    v2[84] = v0;
    v2[83] = _swiftEmptyArrayStorage;
    v3 = v2[73];
    v4 = sub_100187BD4;
  }
  else
  {
    v2[78] = v2[72];
    v2[77] = _swiftEmptyArrayStorage;
    v2[76] = 0;
    v3 = v2[73];
    v4 = sub_1001873A0;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_10018731C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 600));
  v3 = v2[85];
  if (v0)
  {
    v2[84] = v0;
    v2[83] = v3;
    v4 = v2[73];
    v5 = sub_100187BD4;
  }
  else
  {
    ++v2[78];
    v2[77] = v3;
    v2[76] = 0;
    v4 = v2[73];
    v5 = sub_1001873A0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t *sub_1001873A0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  unint64_t v8;
  uint64_t v9;
  uint64_t *result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 60 == 15)
  {
    v2 = sub_1000D94EC();
    v3 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v2, 0, 0);
    *v4 = 8;
    swift_willThrow(v3);
    sub_1000D9530((uint64_t *)(v0 + 16));
    v5 = *(_QWORD *)(v0 + 616);
    *(_QWORD *)(v0 + 672) = v3;
    *(_QWORD *)(v0 + 664) = v5;
    v6 = *(_QWORD *)(v0 + 584);
    v7 = sub_100187BD4;
    return (uint64_t *)swift_task_switch(v7, v6, 0);
  }
  v8 = *(_QWORD *)(v0 + 624);
  v9 = *(_QWORD *)(v0 + 32);
  sub_10001BBBC(v9, *(_QWORD *)(v0 + 40));
  sub_10095B274(v9, v1, v8);
  sub_10001EF3C(v9, v1);
  result = sub_1000D9530((uint64_t *)(v0 + 16));
  if (is_mul_ok(v8, 0x60uLL))
  {
    *(_QWORD *)(v0 + 632) = 96 * v8;
    v11 = 96 * v8 - 96;
    if (v11 <= 1)
      v11 = 1;
    *(_QWORD *)(v0 + 640) = v11;
    if (96 * v8 - 1 >= v11)
    {
      v13 = *(_QWORD *)(v0 + 352);
      v12 = *(_QWORD *)(v0 + 360);
      v15 = *(_QWORD *)(v0 + 336);
      v14 = *(_QWORD *)(v0 + 344);
      SymmetricKey.withUnsafeBytes<A>(_:)((_QWORD *)(v0 + 160), sub_100906C08, 0, &type metadata for Data);
      *(_OWORD *)(v0 + 648) = *(_OWORD *)(v0 + 160);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      v7 = sub_10018751C;
      v6 = v15;
      return (uint64_t *)swift_task_switch(v7, v6, 0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10018751C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *log;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 616);
  sub_10001BBBC(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 616);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8B34(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8B34((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  *(_QWORD *)(v0 + 680) = v3;
  v6 = *(_QWORD *)(v0 + 656);
  v7 = *(_QWORD *)(v0 + 648);
  v8 = *(_QWORD *)(v0 + 640);
  v9 = *(_QWORD *)(v0 + 624);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  v12 = *(_QWORD *)(v0 + 416);
  v11 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 632) - 1;
  v3[2] = v5 + 1;
  v65 = v3;
  v17 = &v3[5 * v5];
  v17[4] = v9;
  v17[5] = v8;
  v17[6] = v16;
  v17[7] = v7;
  v17[8] = v6;
  v10(v11, v14, v13);
  v10(v12, v15, v13);
  sub_10001BBBC(v7, v6);
  sub_10001BBBC(v7, v6);
  sub_10001BBBC(v7, v6);
  v18 = sub_10001BBBC(v7, v6);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v22 = *(_QWORD *)(v0 + 656);
  v23 = *(_QWORD *)(v0 + 648);
  if (v21)
  {
    v57 = *(_QWORD *)(v0 + 624);
    v58 = *(_QWORD *)(v0 + 640);
    v55 = *(_QWORD *)(v0 + 648);
    v56 = *(_QWORD *)(v0 + 656);
    v24 = *(_QWORD *)(v0 + 416);
    v25 = *(_QWORD *)(v0 + 424);
    v26 = *(_QWORD *)(v0 + 392);
    v54 = *(_QWORD *)(v0 + 400);
    v59 = *(_QWORD *)(v0 + 632) - 1;
    log = v19;
    v27 = swift_slowAlloc(72, -1);
    v61 = swift_slowAlloc(128, -1);
    v66 = v61;
    *(_DWORD *)v27 = 141559555;
    *(_QWORD *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v27 + 4, v27 + 12);
    *(_WORD *)(v27 + 12) = 2081;
    v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v26, v28);
    *(_QWORD *)(v0 + 216) = sub_100016940(v29, v30, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease();
    v31 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v31(v25, v26);
    *(_WORD *)(v27 + 22) = 2160;
    *(_QWORD *)(v0 + 224) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v27 + 24, v27 + 32);
    *(_WORD *)(v27 + 32) = 2081;
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v26, v28);
    *(_QWORD *)(v0 + 232) = sub_100016940(v32, v33, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v27 + 34, v27 + 42);
    swift_bridgeObjectRelease();
    v31(v24, v26);
    *(_WORD *)(v27 + 42) = 2048;
    *(_QWORD *)(v0 + 240) = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v27 + 44, v27 + 52);
    *(_WORD *)(v27 + 52) = 2080;
    *(_QWORD *)(v0 + 176) = 0x7972616D6972702ELL;
    *(_QWORD *)(v0 + 184) = 0xEA0000000000282FLL;
    *(_QWORD *)(v0 + 248) = v58;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 41;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    *(_QWORD *)(v0 + 256) = sub_100016940(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v27 + 54, v27 + 62);
    swift_bridgeObjectRelease();
    sub_10001BC14(v55, v56);
    sub_10001BC14(v55, v56);
    *(_WORD *)(v27 + 62) = 2080;
    *(_QWORD *)(v0 + 192) = 0x7972616D6972702ELL;
    *(_QWORD *)(v0 + 200) = 0xEA0000000000282FLL;
    *(_QWORD *)(v0 + 264) = v59;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 41;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    *(_QWORD *)(v0 + 272) = sub_100016940(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v27 + 64, v27 + 72);
    swift_bridgeObjectRelease();
    sub_10001BC14(v55, v56);
    sub_10001BC14(v55, v56);
    _os_log_impl((void *)&_mh_execute_header, log, v20, "Create bundle decryption for shareId: %{private,mask.hash}s,\nbeacon: %{private,mask.hash}s\nsecondaryBucket: %llu, start:%s\nto end: %s.", (uint8_t *)v27, 0x48u);
    swift_arrayDestroy(v61, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    sub_10001BC14(v55, v56);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 416);
    v39 = *(_QWORD *)(v0 + 424);
    v40 = *(_QWORD *)(v0 + 392);
    v41 = *(_QWORD *)(v0 + 400);
    sub_10001BC14(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    v42 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v42(v39, v40);
    v42(v38, v40);
    sub_10001BC14(v23, v22);
    sub_10001BC14(v23, v22);
    sub_10001BC14(v23, v22);
    sub_10001BC14(v23, v22);

  }
  if (*(_QWORD *)(v0 + 624) == *(_QWORD *)(v0 + 568))
  {
    v43 = *(_QWORD *)(v0 + 488);
    v44 = *(_QWORD *)(v0 + 496);
    v46 = *(_QWORD *)(v0 + 472);
    v45 = *(_QWORD *)(v0 + 480);
    v48 = *(_QWORD *)(v0 + 456);
    v47 = *(_QWORD *)(v0 + 464);
    v50 = *(_QWORD *)(v0 + 432);
    v49 = *(_QWORD *)(v0 + 440);
    v51 = *(_QWORD *)(v0 + 424);
    v62 = *(_QWORD *)(v0 + 416);
    v63 = *(_QWORD *)(v0 + 384);
    v64 = *(_QWORD *)(v0 + 360);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 80));
    sub_100004048(v44, &qword_1010F1990);
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v65);
  }
  else
  {
    v53 = (_QWORD *)swift_task_alloc(dword_10110D164);
    *(_QWORD *)(v0 + 600) = v53;
    *v53 = v0;
    v53[1] = sub_10018731C;
    return sub_10090C6D8(v0 + 16, *(_QWORD *)(v0 + 320));
  }
}

uint64_t sub_100187BD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 336);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100187C14, v1, 0);
}

uint64_t sub_100187C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 496);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 80));
  sub_100004048(v1, &qword_1010F1990);
  v2 = *(_QWORD *)(v0 + 488);
  v4 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 480);
  v6 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 496));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100187D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateInterval(0);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  v9 = type metadata accessor for Date(0);
  v3[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[14] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v11);
  v3[16] = swift_task_alloc(v11);
  v3[17] = swift_task_alloc(v11);
  return swift_task_switch(sub_100187DE0, v2, 0);
}

uint64_t sub_100187DE0(uint64_t a1)
{
  _QWORD *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v2 = 0.0 - Date.timeIntervalSince1970.getter(a1);
  if (v2 < INFINITY)
    *(_QWORD *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  v3 = v1[16];
  v4 = v1[17];
  v6 = v1[14];
  v5 = v1[15];
  v7 = v1[13];
  v8 = v1[4];
  v9 = v1[5];
  Date.init(timeIntervalSince1970:)(-v2);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v10(v3, v4, v7);
  v10(v5, v8, v7);
  DateInterval.init(start:end:)(v3, v5);
  v11 = *(_QWORD *)(v9 + 136);
  v1[18] = v11;
  return swift_task_switch(sub_100187EB4, v11, 0);
}

uint64_t sub_100187EB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 152) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100187F2C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10007C6FC, *(_QWORD *)(v0 + 144), v3);
}

uint64_t sub_100187F2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release();
  return swift_task_switch(sub_100187F88, v1, 0);
}

uint64_t sub_100187F88()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[20] = v0[2];
  v1 = (_QWORD *)swift_task_alloc(dword_1010FD564);
  v0[21] = v1;
  *v1 = v0;
  v1[1] = sub_100187FE4;
  return sub_1004DEA64(v0[16], v0[3], v0[18]);
}

uint64_t sub_100187FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100188040, 0, 0);
}

uint64_t sub_100188040()
{
  _QWORD *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (uint64_t *)v0[20];
  v2 = v0[16];
  v3 = v0[11];
  v19 = v0[22];
  v20 = v0[10];
  v4 = v0[8];
  v21 = v0[9];
  v22 = v0[14];
  v17 = v0[7];
  v18 = v0[6];
  v23 = v0[5];
  v24 = v0[13];
  v5 = (_QWORD *)v0[3];
  v7 = v5[3];
  v6 = v5[4];
  sub_10001AA44(v5, v7);
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 112))(v7, v6);
  v9 = v5[3];
  v8 = v5[4];
  sub_10001AA44(v5, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 32))(v9);
  sub_1004DE5E4(v6 & 1, v2, v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v18);
  v10 = v5[3];
  v11 = v5[4];
  v12 = sub_10001AA44(v5, v10);
  sub_1004E1BAC((uint64_t)v12, v3, v19, v2, 0, v1, v10, v11);
  v0[23] = v13;
  v14 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v0[24] = v14;
  v14(v3, v21);
  v15 = *(void (**)(unint64_t, uint64_t))(v22 + 8);
  v0[25] = v15;
  v15(v2, v24);
  return swift_task_switch(sub_1001881B0, v23, 0);
}

uint64_t sub_1001881B0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 192);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 160));
  v1(v7, v9);
  v2(v4, v6);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 184));
}

uint64_t sub_100188268(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;

  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 96) = v7;
  *(_BYTE *)(v8 + 200) = a4;
  *(_QWORD *)(v8 + 72) = a1;
  *(_QWORD *)(v8 + 80) = a3;
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 104) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 112) = v13;
  *(_QWORD *)(v8 + 120) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F1990);
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = swift_task_alloc(v15);
  *(_QWORD *)(v8 + 128) = v16;
  v17 = swift_task_alloc(v15);
  *(_QWORD *)(v8 + 136) = v17;
  v18 = type metadata accessor for Date(0);
  *(_QWORD *)(v8 + 144) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v8 + 152) = v19;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v20(v17, a5, v18);
  *(_QWORD *)(v17 + *(int *)(v14 + 48)) = a6;
  v21 = *(int *)(v14 + 48);
  v20(v16, v17, v18);
  *(_QWORD *)(v16 + v21) = a6;
  v22 = (_QWORD *)swift_task_alloc(dword_1010F19AC);
  *(_QWORD *)(v8 + 160) = v22;
  *v22 = v8;
  v22[1] = sub_1001883AC;
  return sub_1001868B0(a2, a3, v16, a6);
}

uint64_t sub_1001883AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[12];
    v6 = sub_100188984;
  }
  else
  {
    v7 = v3[12];
    (*(void (**)(_QWORD, _QWORD))(v3[19] + 8))(v3[16], v3[18]);
    v6 = sub_100188430;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100188430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  NSObject *log;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B69B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
  swift_bridgeObjectRetain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 104);
  if (v10)
  {
    log = v8;
    v44 = v0 + 64;
    v50 = (_QWORD *)(v0 + 40);
    v15 = swift_slowAlloc(42, -1);
    v45 = swift_slowAlloc(64, -1);
    v51 = v45;
    *(_DWORD *)v15 = 134218755;
    v16 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v0 + 16) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(_QWORD *)(v0 + 32) = sub_100016940(v18, v19, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    v46 = (uint8_t *)v15;
    *(_WORD *)(v15 + 32) = 2082;
    v20 = _swiftEmptyArrayStorage;
    if (v16)
    {
      v48 = (_QWORD *)(v0 + 56);
      v49 = (_QWORD *)(v0 + 48);
      v43 = v0;
      v21 = *(_QWORD *)(v0 + 168);
      v52 = _swiftEmptyArrayStorage;
      sub_10009A2F4(0, v16, 0);
      v20 = v52;
      v22 = (unint64_t *)(v21 + 64);
      do
      {
        v23 = *(v22 - 3);
        v24 = *(v22 - 2);
        v25 = *(v22 - 1);
        v26 = *v22;
        *v50 = *(v22 - 4);
        sub_10001BBBC(v25, v26);
        v53 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        v54 = v27;
        v28._countAndFlagsBits = 8250;
        v28._object = (void *)0xE200000000000000;
        String.append(_:)(v28);
        *v49 = v23;
        v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._countAndFlagsBits = 45;
        v30._object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        *v48 = v24;
        v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        sub_10001BC14(v25, v26);
        v32 = v53;
        v33 = v54;
        v52 = v20;
        v35 = v20[2];
        v34 = v20[3];
        if (v35 >= v34 >> 1)
        {
          sub_10009A2F4(v34 > 1, v35 + 1, 1);
          v20 = v52;
        }
        v22 += 5;
        v20[2] = v35 + 1;
        v36 = &v20[2 * v35];
        v36[4] = v32;
        v36[5] = v33;
        --v16;
      }
      while (v16);
      v0 = v43;
    }
    v37 = *(_QWORD *)(v0 + 168);
    v38 = Array.description.getter(v20, &type metadata for String);
    v40 = v39;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 64) = sub_100016940(v38, v40, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, v0 + 72, v46 + 34, v46 + 42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v37, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "Found %ld ranges for circle: %{private,mask.hash}s.\nRanges: %{public}s)", v46, 0x2Au);
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v46, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_bridgeObjectRelease_n(v11, 2);

  }
  v41 = (_QWORD *)swift_task_alloc(dword_1010F197C);
  *(_QWORD *)(v0 + 184) = v41;
  *v41 = v0;
  v41[1] = sub_1001888A8;
  return sub_10017CED4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 200), *(_QWORD *)(v0 + 88));
}

uint64_t sub_1001888A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  if (v0)
    v4 = sub_1001889F8;
  else
    v4 = sub_100188920;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 96), 0);
}

uint64_t sub_100188920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  sub_100004048(v2, &qword_1010F1990);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100188984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  sub_100004048(*(_QWORD *)(v0 + 136), &qword_1010F1990);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001889F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100004048(*(_QWORD *)(v0 + 136), &qword_1010F1990);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100188A58@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v9);
  sub_100DD1F48((uint64_t)v8, 1);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v11;
  v17 = v12;
  v18 = v13;
  v19 = v14;
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v16;
  a2[1] = v17;
  a2[2] = v18;
  a2[3] = v19;
  return result;
}

uint64_t sub_100188B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v6[113] = v5;
  v6[112] = a5;
  v6[111] = a4;
  v6[110] = a2;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v6[114] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v6[115] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[116] = v9;
  v6[117] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconPayloadv1(0);
  v6[118] = v10;
  v6[119] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(type metadata accessor for KeyDropFetchResponse.OwnedLocationInfo(0) - 8);
  v6[120] = v11;
  v6[121] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for HashAlgorithm(0);
  v6[122] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[123] = v13;
  v6[124] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v6[125] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[126] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v6[127] = v16;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[128] = swift_task_alloc(v17);
  v6[129] = swift_task_alloc(v17);
  v6[130] = swift_task_alloc(v17);
  v6[131] = swift_task_alloc(v17);
  v18 = *(_QWORD *)(type metadata accessor for RawSearchResult(0) - 8);
  v6[132] = v18;
  v6[133] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v6[134] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v6[135] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v6[136] = v21;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[137] = swift_task_alloc(v22);
  v6[138] = swift_task_alloc(v22);
  v23 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1011091A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[139] = swift_task_alloc(v23);
  v6[140] = swift_task_alloc(v23);
  v6[141] = swift_task_alloc(v23);
  v6[142] = swift_task_alloc(v23);
  v24 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F1930) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[143] = swift_task_alloc(v24);
  v6[144] = swift_task_alloc(v24);
  v25 = sub_10001A9A8(&qword_1010F1938);
  v6[145] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v6[146] = v26;
  v27 = *(_QWORD *)(v26 + 64);
  v6[147] = v27;
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[148] = swift_task_alloc(v28);
  v6[149] = swift_task_alloc(v28);
  v6[150] = swift_task_alloc(v28);
  v6[151] = swift_task_alloc(v28);
  v6[152] = swift_task_alloc(v28);
  v29 = type metadata accessor for Logger(0);
  v6[153] = v29;
  v30 = *(_QWORD *)(v29 - 8);
  v6[154] = v30;
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[155] = swift_task_alloc(v31);
  v6[156] = swift_task_alloc(v31);
  v6[157] = swift_task_alloc(v31);
  v6[158] = swift_task_alloc(v31);
  v6[159] = swift_task_alloc(v31);
  v6[160] = swift_task_alloc(v31);
  v6[161] = swift_task_alloc(v31);
  v6[162] = swift_task_alloc(v31);
  v32 = sub_10001A9A8(&qword_1010EE0E0);
  v6[163] = v32;
  v6[164] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v32 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for OwnerSharingCircle(0);
  v6[165] = v33;
  v34 = *(_QWORD *)(v33 - 8);
  v6[166] = v34;
  v6[167] = swift_task_alloc((*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v6[168] = v35;
  v6[169] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v35 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for MemberSharingCircle(0);
  v6[170] = v36;
  v37 = *(_QWORD *)(v36 - 8);
  v6[171] = v37;
  v6[172] = swift_task_alloc((*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[173] = swift_task_alloc(v38);
  v6[174] = swift_task_alloc(v38);
  v6[175] = swift_task_alloc(v38);
  v6[176] = swift_task_alloc(v38);
  v39 = type metadata accessor for UUID(0);
  v6[177] = v39;
  v40 = *(_QWORD *)(v39 - 8);
  v6[178] = v40;
  v41 = *(_QWORD *)(v40 + 64);
  v6[179] = v41;
  v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[180] = swift_task_alloc(v42);
  v6[181] = swift_task_alloc(v42);
  v6[182] = swift_task_alloc(v42);
  v6[183] = swift_task_alloc(v42);
  v43 = type metadata accessor for KeyDropFetchResponse.LocationPayload(0);
  v6[184] = v43;
  v44 = *(_QWORD *)(v43 - 8);
  v6[185] = v44;
  v45 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[186] = swift_task_alloc(v45);
  v6[187] = swift_task_alloc(v45);
  v6[188] = swift_task_alloc(v45);
  v6[189] = swift_task_alloc(v45);
  v6[190] = swift_task_alloc(v45);
  return swift_task_switch(sub_10018904C, v5, 0);
}

uint64_t sub_10018904C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  unint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121[4];

  v1 = *(_QWORD **)(v0 + 888);
  *(_QWORD *)(v0 + 1528) = *(_QWORD *)(*(_QWORD *)(v0 + 904) + 136);
  v2 = swift_allocObject(&unk_10105B8F0, 24, 7);
  *(_QWORD *)(v0 + 1536) = v2;
  v3 = _swiftEmptyArrayStorage;
  *(_QWORD *)(v2 + 16) = _swiftEmptyDictionarySingleton;
  if (v1)
    v4 = v1;
  else
    v4 = _swiftEmptyArrayStorage;
  v5 = v4[2];
  *(_QWORD *)(v0 + 1544) = v5;
  v120 = v0;
  if (v5)
  {
    *(_DWORD *)(v0 + 1840) = *(_DWORD *)(*(_QWORD *)(v0 + 1480) + 80);
    swift_bridgeObjectRetain(v1);
    v6 = 0;
    v7 = type metadata accessor for KeyDropFetchResponse.LocationPayload;
    while (1)
    {
      *(_QWORD *)(v0 + 1552) = v6;
      v9 = *(_QWORD **)(v0 + 888);
      if (!v9)
        v9 = v3;
      if (v6 >= v9[2])
      {
        __break(1u);
        JUMPOUT(0x10018BFB4);
      }
      v10 = v3;
      v11 = *(_QWORD *)(v0 + 1520);
      v12 = *(_QWORD *)(v0 + 1472);
      v13 = *(_QWORD *)(v120 + 1424);
      v14 = *(_QWORD *)(v120 + 1416);
      v15 = *(_QWORD *)(v120 + 1408);
      v16 = v7;
      sub_10005972C((uint64_t)v9+ ((*(unsigned __int8 *)(v0 + 1840) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1840))+ *(_QWORD *)(*(_QWORD *)(v0 + 1480) + 72) * v6, v11, v7);
      v17 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v120 + 1560) = v17;
      v18 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v120 + 1568) = v18;
      sub_10000F9B8(v11 + *(int *)(v12 + 28), v15, &qword_1010ED860);
      v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
      v0 = v120;
      *(_QWORD *)(v120 + 1576) = v19;
      if (v19(v15, 1, v14) != 1)
        break;
      v20 = *(_QWORD *)(v120 + 1408);
      sub_10001BBBC(v17, v18);
      sub_100004048(v20, &qword_1010ED860);
      if (qword_1010E99C0 != -1)
        swift_once(&qword_1010E99C0, sub_100173218);
      v21 = sub_10001A9E8(*(_QWORD *)(v120 + 1224), (uint64_t)qword_1011B69B0);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter(v22);
      v3 = v10;
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Missing share id in payload.", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }
      v8 = *(_QWORD *)(v120 + 1520);
      sub_10001BC14(v17, v18);

      v7 = v16;
      sub_1000126B0(v8, v16);
      v6 = *(_QWORD *)(v120 + 1552) + 1;
      if (v6 == *(_QWORD *)(v120 + 1544))
        goto LABEL_17;
    }
    v25 = *(_QWORD *)(v120 + 1464);
    v26 = *(_QWORD *)(v120 + 1424);
    v27 = *(_QWORD *)(v120 + 1416);
    v28 = *(_QWORD *)(v120 + 1408);
    v29 = *(_QWORD *)(v120 + 1400);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
    *(_QWORD *)(v120 + 1584) = v30;
    v30(v25, v28, v27);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    *(_QWORD *)(v120 + 1592) = v31;
    v31(v29, v25, v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v27);
    sub_10001BBBC(v17, v18);
    v32 = (_QWORD *)swift_task_alloc(dword_1010F1944);
    *(_QWORD *)(v120 + 1600) = v32;
    *v32 = v120;
    v32[1] = sub_10018C4F8;
    return sub_1001AB0F8(v17, v18, *(_QWORD *)(v120 + 1400));
  }
  else
  {
    swift_bridgeObjectRetain(v1);
LABEL_17:
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v0 + 880);
    if (v34)
      v35 = *(_QWORD **)(v0 + 880);
    else
      v35 = v3;
    v102 = v35[2];
    if (v102)
    {
      v36 = *(_QWORD *)(v0 + 1232);
      v116 = *(_QWORD *)(v0 + 1032);
      v98 = *(_QWORD *)(v0 + 1008);
      v37 = *(_QWORD *)(*(_QWORD *)(v0 + 896) + 16);
      v106 = v35 + 4;
      swift_bridgeObjectRetain(v34);
      v38 = 0;
      v108 = v36;
      v93 = v37;
      v95 = v35;
      do
      {
        if (v38 >= v35[2])
        {
          __break(1u);
          JUMPOUT(0x10018C414);
        }
        v104 = v38;
        v39 = &v106[3 * v38];
        v40 = *v39;
        v41 = v39[1];
        v42 = v39[2];
        if (v37)
        {
          v43 = *(_QWORD *)(v120 + 896);
          sub_10001BBBC(v40, v41);
          v44 = v43 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v43);
          sub_10005972C(v44, *(_QWORD *)(v120 + 1032), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
          __asm { BR              X10 }
        }
        sub_10001BBBC(*v39, v39[1]);
        swift_bridgeObjectRetain(v42);
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v45 = *(_QWORD *)(v120 + 1240);
        v46 = *(_QWORD *)(v120 + 1224);
        v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B69B0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v45, v47, v46);
        sub_10001BBBC(v40, v41);
        swift_bridgeObjectRetain(v42);
        sub_10001BBBC(v40, v41);
        swift_bridgeObjectRetain(v42);
        v49 = Logger.logObject.getter(v48);
        v50 = static os_log_type_t.error.getter(v49);
        v51 = os_log_type_enabled(v49, v50);
        v52 = *(_QWORD *)(v120 + 1240);
        v53 = *(_QWORD *)(v120 + 1224);
        if (v51)
        {
          v114 = *(_QWORD *)(v120 + 1224);
          v54 = v41;
          v55 = swift_slowAlloc(22, -1);
          v56 = swift_slowAlloc(32, -1);
          v121[0] = v56;
          *(_DWORD *)v55 = 141558275;
          *(_QWORD *)(v55 + 4) = 1752392040;
          *(_WORD *)(v55 + 12) = 2081;
          *(_QWORD *)(v120 + 616) = v40;
          *(_QWORD *)(v120 + 624) = v54;
          v57 = sub_100153D50();
          v58 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v57);
          *(_QWORD *)(v55 + 14) = sub_100016940(v58, v59, v121);
          swift_bridgeObjectRelease();
          sub_10001BC14(v40, v54);
          swift_bridgeObjectRelease();
          sub_10001BC14(v40, v54);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v55, 0x16u);
          swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
          v60 = v56;
          v36 = v108;
          swift_slowDealloc(v60, -1, -1);
          swift_slowDealloc(v55, -1, -1);

          sub_10001BC14(v40, v54);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v52, v114);
        }
        else
        {
          sub_10001BC14(v40, v41);
          swift_bridgeObjectRelease();
          sub_10001BC14(v40, v41);
          swift_bridgeObjectRelease();
          sub_10001BC14(v40, v41);
          swift_bridgeObjectRelease();

          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v52, v53);
        }
        v35 = v95;
        v38 = v104 + 1;
        v37 = v93;
      }
      while (v104 + 1 != v102);
      swift_bridgeObjectRelease();
      v0 = v120;
    }
    else
    {
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease();
    }
    v61 = *(_QWORD *)(v120 + 1536);
    v62 = *(_QWORD *)(v120 + 1520);
    v63 = *(_QWORD *)(v120 + 1512);
    v64 = *(_QWORD *)(v120 + 1504);
    v65 = *(_QWORD *)(v120 + 1496);
    v66 = *(_QWORD *)(v120 + 1488);
    v67 = *(_QWORD *)(v120 + 1464);
    v68 = *(_QWORD *)(v120 + 1456);
    v69 = *(_QWORD *)(v120 + 1448);
    v71 = *(_QWORD *)(v120 + 1440);
    v72 = *(_QWORD *)(v120 + 1408);
    v73 = *(_QWORD *)(v120 + 1400);
    v74 = *(_QWORD *)(v120 + 1392);
    v75 = *(_QWORD *)(v120 + 1384);
    v76 = *(_QWORD *)(v120 + 1376);
    v77 = *(_QWORD *)(v120 + 1352);
    v78 = *(_QWORD *)(v120 + 1336);
    v79 = *(_QWORD *)(v120 + 1312);
    v80 = *(_QWORD *)(v120 + 1296);
    v81 = *(_QWORD *)(v120 + 1288);
    v82 = *(_QWORD *)(v120 + 1280);
    v83 = *(_QWORD *)(v120 + 1272);
    v84 = *(_QWORD *)(v120 + 1264);
    v85 = *(_QWORD *)(v120 + 1256);
    v86 = *(_QWORD *)(v120 + 1248);
    v87 = *(_QWORD *)(v120 + 1240);
    v88 = *(_QWORD *)(v120 + 1216);
    v89 = *(_QWORD *)(v120 + 1208);
    v90 = *(_QWORD *)(v120 + 1200);
    v91 = *(_QWORD *)(v120 + 1192);
    v92 = *(_QWORD *)(v120 + 1184);
    v94 = *(_QWORD *)(v120 + 1152);
    v96 = *(_QWORD *)(v120 + 1144);
    v97 = *(_QWORD *)(v120 + 1136);
    v99 = *(_QWORD *)(v120 + 1128);
    v100 = *(_QWORD *)(v120 + 1120);
    v101 = *(_QWORD *)(v120 + 1112);
    v103 = *(_QWORD *)(v120 + 1104);
    v105 = *(_QWORD *)(v120 + 1096);
    v107 = *(_QWORD *)(v120 + 1064);
    v109 = *(_QWORD *)(v120 + 1048);
    v110 = *(_QWORD *)(v120 + 1040);
    v111 = *(_QWORD *)(v120 + 1032);
    v112 = *(_QWORD *)(v120 + 1024);
    v113 = *(_QWORD *)(v120 + 992);
    v115 = *(_QWORD *)(v120 + 968);
    v117 = *(_QWORD *)(v120 + 952);
    v118 = *(_QWORD *)(v120 + 936);
    v119 = *(_QWORD *)(v120 + 912);
    swift_beginAccess(v61 + 16, v0 + 440, 0, 0);
    v70 = *(_QWORD *)(v61 + 16);
    swift_bridgeObjectRetain(v70);
    swift_release();
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    return (*(uint64_t (**)(uint64_t))(v120 + 8))(v70);
  }
}

uint64_t sub_10018C4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 1600);
  v4[201] = a1;
  v4[202] = a2;
  v4[203] = v2;
  swift_task_dealloc(v5);
  v6 = v4[113];
  sub_100004048(v4[175], &qword_1010ED860);
  if (v2)
  {
    swift_bridgeObjectRelease();
    v7 = sub_1001A5F44;
  }
  else
  {
    v7 = sub_10018C5F4;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10018C5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  void (*v93)(uint64_t, uint64_t, uint64_t);
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  if (*(_QWORD *)(v0 + 1616) >> 60 != 15)
    return swift_task_switch(sub_10018FBD0, *(_QWORD *)(v0 + 1528), 0);
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(_QWORD *)(v0 + 1496);
  v3 = *(_QWORD *)(v0 + 1488);
  v4 = *(_QWORD *)(v0 + 1264);
  v5 = *(_QWORD *)(v0 + 1232);
  v6 = *(_QWORD *)(v0 + 1224);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B69B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  sub_10005972C(v1, v2, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  sub_10005972C(v2, v3, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v8 = sub_1000126B0(v2, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v143 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1576);
    v11 = *(_QWORD *)(v0 + 1488);
    v12 = *(_QWORD *)(v0 + 1472);
    v13 = *(_QWORD *)(v0 + 1416);
    v14 = *(_QWORD *)(v0 + 1384);
    v15 = swift_slowAlloc(22, -1);
    v148 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 832) = v148;
    *(_DWORD *)v15 = 141558275;
    *(_QWORD *)(v0 + 800) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    sub_10000F9B8(v11 + *(int *)(v12 + 28), v14, &qword_1010ED860);
    v16 = v143(v14, 1, v13);
    if ((_DWORD)v16 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 1384), &qword_1010ED860);
      v17 = 0xE300000000000000;
      v18 = 7104878;
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 1424);
      v30 = *(_QWORD *)(v0 + 1416);
      v31 = *(_QWORD *)(v0 + 1384);
      v18 = UUID.uuidString.getter(v16);
      v17 = v32;
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
    }
    v33 = *(_QWORD *)(v0 + 1560);
    v34 = *(_QWORD *)(v0 + 1520);
    v35 = *(_QWORD *)(v0 + 1488);
    v139 = *(_QWORD *)(v0 + 1424);
    v141 = *(_QWORD *)(v0 + 1416);
    v144 = *(_QWORD *)(v0 + 1464);
    v135 = *(_QWORD *)(v0 + 1568);
    v137 = *(_QWORD *)(v0 + 1264);
    v129 = *(_QWORD *)(v0 + 1232);
    v132 = *(_QWORD *)(v0 + 1224);
    *(_QWORD *)(v0 + 792) = sub_100016940(v18, v17, (uint64_t *)(v0 + 832));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 792, v0 + 800, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v35, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cannot decrypt locations in payload: %{private,mask.hash}s.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v148, -1, -1);
    swift_slowDealloc(v15, -1, -1);
    sub_10001BC14(v33, v135);

    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v137, v132);
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v144, v141);
    v28 = v34;
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 1520);
    v21 = *(_QWORD *)(v0 + 1488);
    v22 = *(_QWORD *)(v0 + 1464);
    v23 = *(_QWORD *)(v0 + 1424);
    v24 = *(_QWORD *)(v0 + 1416);
    v25 = *(_QWORD *)(v0 + 1264);
    v26 = *(_QWORD *)(v0 + 1232);
    v27 = *(_QWORD *)(v0 + 1224);
    sub_10001BC14(*(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1568));

    sub_1000126B0(v21, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    v28 = v20;
  }
  sub_1000126B0(v28, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v36 = *(_QWORD *)(v0 + 1552) + 1;
  if (v36 == *(_QWORD *)(v0 + 1544))
  {
LABEL_12:
    v37 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v38 = *(_QWORD *)(v0 + 880);
    if (v38)
      v37 = *(_QWORD **)(v0 + 880);
    v125 = v37[2];
    if (v125)
    {
      v39 = *(_QWORD *)(v0 + 1232);
      v146 = *(_QWORD *)(v0 + 1032);
      v121 = *(_QWORD *)(v0 + 1008);
      v40 = *(_QWORD *)(*(_QWORD *)(v0 + 896) + 16);
      v133 = v37 + 4;
      swift_bridgeObjectRetain(v38);
      v41 = 0;
      v116 = v40;
      v118 = v37;
      v127 = v39;
      do
      {
        if (v41 >= v37[2])
        {
          __break(1u);
          JUMPOUT(0x10018FAECLL);
        }
        v130 = v41;
        v42 = &v133[3 * v41];
        v43 = *v42;
        v44 = v42[1];
        v45 = v42[2];
        if (v40)
        {
          v46 = *(_QWORD *)(v0 + 896);
          sub_10001BBBC(v43, v44);
          v47 = v46 + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
          swift_bridgeObjectRetain(v45);
          swift_bridgeObjectRetain(v46);
          sub_10005972C(v47, *(_QWORD *)(v0 + 1032), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
          __asm { BR              X10 }
        }
        sub_10001BBBC(*v42, v42[1]);
        swift_bridgeObjectRetain(v45);
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v48 = *(_QWORD *)(v0 + 1240);
        v49 = *(_QWORD *)(v0 + 1224);
        v50 = sub_10001A9E8(v49, (uint64_t)qword_1011B69B0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v48, v50, v49);
        sub_10001BBBC(v43, v44);
        swift_bridgeObjectRetain(v45);
        sub_10001BBBC(v43, v44);
        swift_bridgeObjectRetain(v45);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.error.getter(v52);
        v54 = os_log_type_enabled(v52, v53);
        v55 = *(_QWORD *)(v0 + 1240);
        v56 = *(_QWORD *)(v0 + 1224);
        if (v54)
        {
          v57 = swift_slowAlloc(22, -1);
          v58 = swift_slowAlloc(32, -1);
          v152 = v58;
          *(_DWORD *)v57 = 141558275;
          *(_QWORD *)(v57 + 4) = 1752392040;
          *(_WORD *)(v57 + 12) = 2081;
          *(_QWORD *)(v0 + 616) = v43;
          *(_QWORD *)(v0 + 624) = v44;
          v59 = sub_100153D50();
          v60 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v59);
          *(_QWORD *)(v57 + 14) = sub_100016940(v60, v61, &v152);
          swift_bridgeObjectRelease();
          sub_10001BC14(v43, v44);
          swift_bridgeObjectRelease();
          sub_10001BC14(v43, v44);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v57, 0x16u);
          swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v58, -1, -1);
          v62 = v57;
          v39 = v127;
          swift_slowDealloc(v62, -1, -1);

          sub_10001BC14(v43, v44);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v55, v56);
        }
        else
        {
          sub_10001BC14(v43, v44);
          swift_bridgeObjectRelease();
          sub_10001BC14(v43, v44);
          swift_bridgeObjectRelease();
          sub_10001BC14(v43, v44);
          swift_bridgeObjectRelease();

          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v55, v56);
        }
        v37 = v118;
        v41 = v130 + 1;
        v40 = v116;
      }
      while (v130 + 1 != v125);
    }
    else
    {
      swift_bridgeObjectRetain(v38);
    }
    swift_bridgeObjectRelease();
    v78 = *(_QWORD *)(v0 + 1536);
    v79 = *(_QWORD *)(v0 + 1520);
    v80 = *(_QWORD *)(v0 + 1512);
    v81 = *(_QWORD *)(v0 + 1504);
    v82 = *(_QWORD *)(v0 + 1496);
    v83 = *(_QWORD *)(v0 + 1488);
    v84 = *(_QWORD *)(v0 + 1464);
    v85 = *(_QWORD *)(v0 + 1456);
    v86 = *(_QWORD *)(v0 + 1448);
    v95 = *(_QWORD *)(v0 + 1440);
    v96 = *(_QWORD *)(v0 + 1408);
    v97 = *(_QWORD *)(v0 + 1400);
    v98 = *(_QWORD *)(v0 + 1392);
    v99 = *(_QWORD *)(v0 + 1384);
    v100 = *(_QWORD *)(v0 + 1376);
    v101 = *(_QWORD *)(v0 + 1352);
    v102 = *(_QWORD *)(v0 + 1336);
    v103 = *(_QWORD *)(v0 + 1312);
    v104 = *(_QWORD *)(v0 + 1296);
    v105 = *(_QWORD *)(v0 + 1288);
    v106 = *(_QWORD *)(v0 + 1280);
    v107 = *(_QWORD *)(v0 + 1272);
    v108 = *(_QWORD *)(v0 + 1264);
    v109 = *(_QWORD *)(v0 + 1256);
    v110 = *(_QWORD *)(v0 + 1248);
    v111 = *(_QWORD *)(v0 + 1240);
    v112 = *(_QWORD *)(v0 + 1216);
    v113 = *(_QWORD *)(v0 + 1208);
    v114 = *(_QWORD *)(v0 + 1200);
    v115 = *(_QWORD *)(v0 + 1192);
    v117 = *(_QWORD *)(v0 + 1184);
    v119 = *(_QWORD *)(v0 + 1152);
    v120 = *(_QWORD *)(v0 + 1144);
    v122 = *(_QWORD *)(v0 + 1136);
    v123 = *(_QWORD *)(v0 + 1128);
    v124 = *(_QWORD *)(v0 + 1120);
    v126 = *(_QWORD *)(v0 + 1112);
    v128 = *(_QWORD *)(v0 + 1104);
    v131 = *(_QWORD *)(v0 + 1096);
    v134 = *(_QWORD *)(v0 + 1064);
    v136 = *(_QWORD *)(v0 + 1048);
    v138 = *(_QWORD *)(v0 + 1040);
    v140 = *(_QWORD *)(v0 + 1032);
    v142 = *(_QWORD *)(v0 + 1024);
    v145 = *(_QWORD *)(v0 + 992);
    v147 = *(_QWORD *)(v0 + 968);
    v149 = *(_QWORD *)(v0 + 952);
    v150 = *(_QWORD *)(v0 + 936);
    v151 = *(_QWORD *)(v0 + 912);
    swift_beginAccess(v78 + 16, v0 + 440, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v78 + 16));
    swift_release();
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    swift_task_dealloc(v140);
    swift_task_dealloc(v142);
    swift_task_dealloc(v145);
    swift_task_dealloc(v147);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    swift_task_dealloc(v151);
    __asm { BR              X1 }
  }
  while (1)
  {
    *(_QWORD *)(v0 + 1552) = v36;
    v64 = *(_QWORD **)(v0 + 888);
    if (!v64)
      v64 = _swiftEmptyArrayStorage;
    if (v36 >= v64[2])
    {
      __break(1u);
      JUMPOUT(0x10018FAB0);
    }
    v65 = *(_QWORD *)(v0 + 1520);
    v66 = *(_QWORD *)(v0 + 1472);
    v67 = *(_QWORD *)(v0 + 1424);
    v68 = *(_QWORD *)(v0 + 1416);
    v69 = *(_QWORD *)(v0 + 1408);
    sub_10005972C((uint64_t)v64+ ((*(unsigned __int8 *)(v0 + 1840) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1840))+ *(_QWORD *)(*(_QWORD *)(v0 + 1480) + 72) * v36, v65, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    v70 = *(_QWORD *)(v65 + 16);
    *(_QWORD *)(v0 + 1560) = v70;
    v71 = *(_QWORD *)(v65 + 24);
    *(_QWORD *)(v0 + 1568) = v71;
    sub_10000F9B8(v65 + *(int *)(v66 + 28), v69, &qword_1010ED860);
    v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
    *(_QWORD *)(v0 + 1576) = v72;
    if (v72(v69, 1, v68) != 1)
      break;
    v73 = *(_QWORD *)(v0 + 1408);
    sub_10001BBBC(v70, v71);
    sub_100004048(v73, &qword_1010ED860);
    if (qword_1010E99C0 != -1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v74 = sub_10001A9E8(*(_QWORD *)(v0 + 1224), (uint64_t)qword_1011B69B0);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Missing share id in payload.", v77, 2u);
      swift_slowDealloc(v77, -1, -1);
    }
    v63 = *(_QWORD *)(v0 + 1520);
    sub_10001BC14(v70, v71);

    sub_1000126B0(v63, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    v36 = *(_QWORD *)(v0 + 1552) + 1;
    if (v36 == *(_QWORD *)(v0 + 1544))
      goto LABEL_12;
  }
  v87 = *(_QWORD *)(v0 + 1464);
  v88 = *(_QWORD *)(v0 + 1424);
  v89 = *(_QWORD *)(v0 + 1416);
  v90 = *(_QWORD *)(v0 + 1408);
  v91 = *(_QWORD *)(v0 + 1400);
  v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32);
  *(_QWORD *)(v0 + 1584) = v92;
  v92(v87, v90, v89);
  v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16);
  *(_QWORD *)(v0 + 1592) = v93;
  v93(v91, v87, v89);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v91, 0, 1, v89);
  sub_10001BBBC(v70, v71);
  v94 = (_QWORD *)swift_task_alloc(dword_1010F1944);
  *(_QWORD *)(v0 + 1600) = v94;
  *v94 = v0;
  v94[1] = sub_10018C4F8;
  return sub_1001AB0F8(v70, v71, *(_QWORD *)(v0 + 1400));
}

uint64_t sub_10018FBD0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1584);
  v2 = *(_QWORD *)(v0 + 1528);
  v3 = *(_QWORD *)(v0 + 1448);
  v4 = *(_QWORD *)(v0 + 1432);
  v5 = *(_QWORD *)(v0 + 1424);
  v6 = *(_QWORD *)(v0 + 1416);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1592))(v3, *(_QWORD *)(v0 + 1464), v6);
  LODWORD(v7) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 1844) = v7;
  v7 = v7;
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_10105BEE0, v8 + v4, v7 | 7);
  *(_QWORD *)(v0 + 1632) = v9;
  *(_QWORD *)(v9 + 16) = v2;
  v1(v9 + v8, v3, v6);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1640) = v11;
  *v11 = v0;
  v11[1] = sub_10018FCF0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1352), sub_10007CC24, v9, *(_QWORD *)(v0 + 1344));
}

uint64_t sub_10018FCF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 904);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1640));
  swift_release();
  return swift_task_switch(sub_10018FD88, v1, 0);
}

uint64_t sub_10018FD88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  SecKeyRef v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  SecKeyRef v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  void (*v98)(uint64_t, uint64_t, uint64_t);
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v1 = *(_QWORD *)(v0 + 1360);
  v2 = *(_QWORD *)(v0 + 1352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1368) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 1528);
    sub_100004048(v2, (uint64_t *)&unk_101111440);
    return swift_task_switch(sub_10019394C, v3, 0);
  }
  else
  {
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1592);
    v6 = *(_QWORD *)(v0 + 1448);
    v7 = *(_QWORD *)(v0 + 1416);
    v8 = *(_QWORD *)(v0 + 1376);
    sub_1000126EC(v2, v8, type metadata accessor for MemberSharingCircle);
    v5(v6, v8 + *(int *)(v1 + 24), v7);
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    v9 = *(_QWORD *)(v0 + 1624);
    v10 = *(_QWORD *)(v0 + 1616);
    v11 = *(_QWORD *)(v0 + 1608);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1584))(*(_QWORD *)(v0 + 1456), *(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1416));
    v12 = sub_1002F7F34(v11, v10);
    *(_QWORD *)(v0 + 1664) = v12;
    if (v9)
    {
      v13 = *(_QWORD *)(v0 + 1616);
      v14 = *(_QWORD *)(v0 + 1608);
      v15 = *(_QWORD *)(v0 + 1520);
      v16 = *(_QWORD *)(v0 + 1464);
      v17 = *(_QWORD *)(v0 + 1456);
      v18 = *(_QWORD *)(v0 + 1424);
      v19 = *(_QWORD *)(v0 + 1416);
      sub_10001BC14(*(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1568));
      sub_10001EF3C(v14, v13);
      v20 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v20(v16, v19);
      sub_1000126B0(v15, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      swift_bridgeObjectRelease();
      v20(v17, v19);
      v21 = *(_QWORD *)(v0 + 1520);
      v22 = *(_QWORD *)(v0 + 1512);
      v23 = *(_QWORD *)(v0 + 1504);
      v24 = *(_QWORD *)(v0 + 1496);
      v25 = *(_QWORD *)(v0 + 1488);
      v26 = *(_QWORD *)(v0 + 1464);
      v27 = *(_QWORD *)(v0 + 1456);
      v28 = *(_QWORD *)(v0 + 1448);
      v29 = *(_QWORD *)(v0 + 1440);
      v101 = *(_QWORD *)(v0 + 1408);
      v103 = *(_QWORD *)(v0 + 1400);
      v105 = *(_QWORD *)(v0 + 1392);
      v107 = *(_QWORD *)(v0 + 1384);
      v109 = *(_QWORD *)(v0 + 1376);
      v111 = *(_QWORD *)(v0 + 1352);
      v113 = *(_QWORD *)(v0 + 1336);
      v115 = *(_QWORD *)(v0 + 1312);
      v117 = *(_QWORD *)(v0 + 1296);
      v119 = *(_QWORD *)(v0 + 1288);
      v121 = *(_QWORD *)(v0 + 1280);
      v123 = *(_QWORD *)(v0 + 1272);
      v125 = *(_QWORD *)(v0 + 1264);
      v127 = *(_QWORD *)(v0 + 1256);
      v129 = *(_QWORD *)(v0 + 1248);
      v131 = *(_QWORD *)(v0 + 1240);
      v133 = *(_QWORD *)(v0 + 1216);
      v135 = *(_QWORD *)(v0 + 1208);
      v137 = *(_QWORD *)(v0 + 1200);
      v139 = *(_QWORD *)(v0 + 1192);
      v141 = *(_QWORD *)(v0 + 1184);
      v144 = *(_QWORD *)(v0 + 1152);
      v147 = *(_QWORD *)(v0 + 1144);
      v149 = *(_QWORD *)(v0 + 1136);
      v152 = *(_QWORD *)(v0 + 1128);
      v154 = *(_QWORD *)(v0 + 1120);
      v156 = *(_QWORD *)(v0 + 1112);
      v158 = *(_QWORD *)(v0 + 1104);
      v161 = *(_QWORD *)(v0 + 1096);
      v164 = *(_QWORD *)(v0 + 1064);
      v167 = *(_QWORD *)(v0 + 1048);
      v170 = *(_QWORD *)(v0 + 1040);
      v172 = *(_QWORD *)(v0 + 1032);
      v174 = *(_QWORD *)(v0 + 1024);
      v176 = *(_QWORD *)(v0 + 992);
      v178 = *(_QWORD *)(v0 + 968);
      v181 = *(_QWORD *)(v0 + 952);
      v184 = *(_QWORD *)(v0 + 936);
      v188 = *(_QWORD *)(v0 + 912);
      swift_release();
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v101);
      swift_task_dealloc(v103);
      swift_task_dealloc(v105);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v125);
      swift_task_dealloc(v127);
      swift_task_dealloc(v129);
      swift_task_dealloc(v131);
      swift_task_dealloc(v133);
      swift_task_dealloc(v135);
      swift_task_dealloc(v137);
      swift_task_dealloc(v139);
      swift_task_dealloc(v141);
      swift_task_dealloc(v144);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v152);
      swift_task_dealloc(v154);
      swift_task_dealloc(v156);
      swift_task_dealloc(v158);
      swift_task_dealloc(v161);
      swift_task_dealloc(v164);
      swift_task_dealloc(v167);
      swift_task_dealloc(v170);
      swift_task_dealloc(v172);
      swift_task_dealloc(v174);
      swift_task_dealloc(v176);
      swift_task_dealloc(v178);
      swift_task_dealloc(v181);
      swift_task_dealloc(v184);
      swift_task_dealloc(v188);
      __asm { BR              X0 }
    }
    v30 = *(_QWORD *)(v0 + 1520);
    v31 = *(_QWORD *)(v30 + 32);
    *(_QWORD *)(v0 + 1672) = v31;
    v32 = *(_QWORD *)(v31 + 16);
    *(_QWORD *)(v0 + 1680) = v32;
    v33 = *(_QWORD *)(v0 + 1616);
    v34 = *(_QWORD *)(v0 + 1608);
    if (v32)
    {
      *(_QWORD *)(v0 + 1688) = 0;
      *(_QWORD *)(v0 + 1696) = *(_QWORD *)(v31 + 32);
      *(_QWORD *)(v0 + 1704) = *(_QWORD *)(v31 + 40);
      v35 = *(_DWORD *)(v31 + 48);
      *(_BYTE *)(v0 + 1716) = *(_BYTE *)(v31 + 52);
      *(_DWORD *)(v0 + 1712) = v35;
      swift_bridgeObjectRetain(v31);
      __asm { BR              X10 }
    }
    v36 = v12;
    v37 = *(_QWORD *)(v0 + 1568);
    v38 = *(_QWORD *)(v0 + 1560);
    v185 = *(_QWORD *)(v0 + 1464);
    v189 = *(_QWORD *)(v0 + 1456);
    v39 = *(_QWORD *)(v0 + 1424);
    v40 = *(_QWORD *)(v0 + 1416);
    swift_bridgeObjectRetain(v31);
    sub_10001BC14(v38, v37);

    sub_10001EF3C(v34, v33);
    swift_bridgeObjectRelease();
    v41 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v41(v185, v40);
    sub_1000126B0(v30, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    v41(v189, v40);
    v42 = *(_QWORD *)(v0 + 1552) + 1;
    if (v42 == *(_QWORD *)(v0 + 1544))
    {
LABEL_8:
      v43 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v44 = *(_QWORD *)(v0 + 880);
      if (v44)
        v43 = *(_QWORD **)(v0 + 880);
      v159 = v43[2];
      if (v159)
      {
        v45 = *(_QWORD *)(v0 + 1232);
        v182 = *(_QWORD *)(v0 + 1032);
        v150 = *(_QWORD *)(v0 + 1008);
        v46 = *(_QWORD *)(*(_QWORD *)(v0 + 896) + 16);
        v165 = v43 + 4;
        swift_bridgeObjectRetain(v44);
        v47 = 0;
        v168 = v45;
        v142 = v46;
        v145 = v43;
        do
        {
          if (v47 >= v43[2])
          {
            __break(1u);
            JUMPOUT(0x1001937C0);
          }
          v162 = v47;
          v48 = &v165[3 * v47];
          v49 = *v48;
          v50 = v48[1];
          v51 = v48[2];
          v186 = *v48;
          if (v46)
          {
            v52 = *(_QWORD *)(v0 + 896);
            sub_10001BBBC(v49, v50);
            v53 = v52 + ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80));
            swift_bridgeObjectRetain(v51);
            swift_bridgeObjectRetain(v52);
            sub_10005972C(v53, *(_QWORD *)(v0 + 1032), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
            __asm { BR              X10 }
          }
          sub_10001BBBC(v49, v50);
          swift_bridgeObjectRetain(v51);
          if (qword_1010E99C0 != -1)
            swift_once(&qword_1010E99C0, sub_100173218);
          v54 = *(_QWORD *)(v0 + 1240);
          v55 = *(_QWORD *)(v0 + 1224);
          v56 = sub_10001A9E8(v55, (uint64_t)qword_1011B69B0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v54, v56, v55);
          sub_10001BBBC(v186, v50);
          swift_bridgeObjectRetain(v51);
          sub_10001BBBC(v186, v50);
          swift_bridgeObjectRetain(v51);
          v58 = v45;
          v59 = Logger.logObject.getter(v57);
          v60 = static os_log_type_t.error.getter(v59);
          v61 = os_log_type_enabled(v59, v60);
          v62 = *(_QWORD *)(v0 + 1240);
          v179 = *(_QWORD *)(v0 + 1224);
          if (v61)
          {
            v63 = swift_slowAlloc(22, -1);
            v64 = swift_slowAlloc(32, -1);
            v191 = v64;
            *(_DWORD *)v63 = 141558275;
            *(_QWORD *)(v63 + 4) = 1752392040;
            *(_WORD *)(v63 + 12) = 2081;
            *(_QWORD *)(v0 + 616) = v186;
            *(_QWORD *)(v0 + 624) = v50;
            v65 = sub_100153D50();
            v66 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v65);
            *(_QWORD *)(v63 + 14) = sub_100016940(v66, v67, &v191);
            swift_bridgeObjectRelease();
            sub_10001BC14(v186, v50);
            swift_bridgeObjectRelease();
            sub_10001BC14(v186, v50);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v59, v60, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v63, 0x16u);
            swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v64, -1, -1);
            swift_slowDealloc(v63, -1, -1);

            v45 = v168;
            sub_10001BC14(v186, v50);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v62, v179);
            v43 = v145;
          }
          else
          {
            sub_10001BC14(v186, v50);
            swift_bridgeObjectRelease();
            sub_10001BC14(v186, v50);
            swift_bridgeObjectRelease();
            sub_10001BC14(v186, v50);
            swift_bridgeObjectRelease();

            (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v62, v179);
            v43 = v145;
            v45 = v58;
          }
          v47 = v162 + 1;
          v46 = v142;
        }
        while (v162 + 1 != v159);
      }
      else
      {
        swift_bridgeObjectRetain(v44);
      }
      swift_bridgeObjectRelease();
      v83 = *(_QWORD *)(v0 + 1536);
      v84 = *(_QWORD *)(v0 + 1520);
      v85 = *(_QWORD *)(v0 + 1512);
      v86 = *(_QWORD *)(v0 + 1504);
      v87 = *(_QWORD *)(v0 + 1496);
      v88 = *(_QWORD *)(v0 + 1488);
      v89 = *(_QWORD *)(v0 + 1464);
      v90 = *(_QWORD *)(v0 + 1456);
      v91 = *(_QWORD *)(v0 + 1448);
      v100 = *(_QWORD *)(v0 + 1440);
      v102 = *(_QWORD *)(v0 + 1408);
      v104 = *(_QWORD *)(v0 + 1400);
      v106 = *(_QWORD *)(v0 + 1392);
      v108 = *(_QWORD *)(v0 + 1384);
      v110 = *(_QWORD *)(v0 + 1376);
      v112 = *(_QWORD *)(v0 + 1352);
      v114 = *(_QWORD *)(v0 + 1336);
      v116 = *(_QWORD *)(v0 + 1312);
      v118 = *(_QWORD *)(v0 + 1296);
      v120 = *(_QWORD *)(v0 + 1288);
      v122 = *(_QWORD *)(v0 + 1280);
      v124 = *(_QWORD *)(v0 + 1272);
      v126 = *(_QWORD *)(v0 + 1264);
      v128 = *(_QWORD *)(v0 + 1256);
      v130 = *(_QWORD *)(v0 + 1248);
      v132 = *(_QWORD *)(v0 + 1240);
      v134 = *(_QWORD *)(v0 + 1216);
      v136 = *(_QWORD *)(v0 + 1208);
      v138 = *(_QWORD *)(v0 + 1200);
      v140 = *(_QWORD *)(v0 + 1192);
      v143 = *(_QWORD *)(v0 + 1184);
      v146 = *(_QWORD *)(v0 + 1152);
      v148 = *(_QWORD *)(v0 + 1144);
      v151 = *(_QWORD *)(v0 + 1136);
      v153 = *(_QWORD *)(v0 + 1128);
      v155 = *(_QWORD *)(v0 + 1120);
      v157 = *(_QWORD *)(v0 + 1112);
      v160 = *(_QWORD *)(v0 + 1104);
      v163 = *(_QWORD *)(v0 + 1096);
      v166 = *(_QWORD *)(v0 + 1064);
      v169 = *(_QWORD *)(v0 + 1048);
      v171 = *(_QWORD *)(v0 + 1040);
      v173 = *(_QWORD *)(v0 + 1032);
      v175 = *(_QWORD *)(v0 + 1024);
      v177 = *(_QWORD *)(v0 + 992);
      v180 = *(_QWORD *)(v0 + 968);
      v183 = *(_QWORD *)(v0 + 952);
      v187 = *(_QWORD *)(v0 + 936);
      v190 = *(_QWORD *)(v0 + 912);
      swift_beginAccess(v83 + 16, v0 + 440, 0, 0);
      swift_bridgeObjectRetain(*(_QWORD *)(v83 + 16));
      swift_release();
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(v110);
      swift_task_dealloc(v112);
      swift_task_dealloc(v114);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v122);
      swift_task_dealloc(v124);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v130);
      swift_task_dealloc(v132);
      swift_task_dealloc(v134);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v143);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v151);
      swift_task_dealloc(v153);
      swift_task_dealloc(v155);
      swift_task_dealloc(v157);
      swift_task_dealloc(v160);
      swift_task_dealloc(v163);
      swift_task_dealloc(v166);
      swift_task_dealloc(v169);
      swift_task_dealloc(v171);
      swift_task_dealloc(v173);
      swift_task_dealloc(v175);
      swift_task_dealloc(v177);
      swift_task_dealloc(v180);
      swift_task_dealloc(v183);
      swift_task_dealloc(v187);
      swift_task_dealloc(v190);
      __asm { BR              X1 }
    }
    while (1)
    {
      *(_QWORD *)(v0 + 1552) = v42;
      v69 = *(_QWORD **)(v0 + 888);
      if (!v69)
        v69 = _swiftEmptyArrayStorage;
      if (v42 >= v69[2])
      {
        __break(1u);
        JUMPOUT(0x10019378CLL);
      }
      v70 = *(_QWORD *)(v0 + 1520);
      v71 = *(_QWORD *)(v0 + 1472);
      v72 = *(_QWORD *)(v0 + 1424);
      v73 = *(_QWORD *)(v0 + 1416);
      v74 = *(_QWORD *)(v0 + 1408);
      sub_10005972C((uint64_t)v69+ ((*(unsigned __int8 *)(v0 + 1840) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1840))+ *(_QWORD *)(*(_QWORD *)(v0 + 1480) + 72) * v42, v70, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v75 = *(_QWORD *)(v70 + 16);
      *(_QWORD *)(v0 + 1560) = v75;
      v76 = *(_QWORD *)(v70 + 24);
      *(_QWORD *)(v0 + 1568) = v76;
      sub_10000F9B8(v70 + *(int *)(v71 + 28), v74, &qword_1010ED860);
      v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
      *(_QWORD *)(v0 + 1576) = v77;
      if (v77(v74, 1, v73) != 1)
        break;
      v78 = *(_QWORD *)(v0 + 1408);
      sub_10001BBBC(v75, v76);
      sub_100004048(v78, &qword_1010ED860);
      if (qword_1010E99C0 != -1)
        swift_once(&qword_1010E99C0, sub_100173218);
      v79 = sub_10001A9E8(*(_QWORD *)(v0 + 1224), (uint64_t)qword_1011B69B0);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter(v80);
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Missing share id in payload.", v82, 2u);
        swift_slowDealloc(v82, -1, -1);
      }
      v68 = *(_QWORD *)(v0 + 1520);
      sub_10001BC14(v75, v76);

      sub_1000126B0(v68, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v42 = *(_QWORD *)(v0 + 1552) + 1;
      if (v42 == *(_QWORD *)(v0 + 1544))
        goto LABEL_8;
    }
    v92 = *(_QWORD *)(v0 + 1464);
    v93 = *(_QWORD *)(v0 + 1424);
    v94 = *(_QWORD *)(v0 + 1416);
    v95 = *(_QWORD *)(v0 + 1408);
    v96 = *(_QWORD *)(v0 + 1400);
    v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 32);
    *(_QWORD *)(v0 + 1584) = v97;
    v97(v92, v95, v94);
    v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
    *(_QWORD *)(v0 + 1592) = v98;
    v98(v96, v92, v94);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v96, 0, 1, v94);
    sub_10001BBBC(v75, v76);
    v99 = (_QWORD *)swift_task_alloc(dword_1010F1944);
    *(_QWORD *)(v0 + 1600) = v99;
    *v99 = v0;
    v99[1] = sub_10018C4F8;
    return sub_1001AB0F8(v75, v76, *(_QWORD *)(v0 + 1400));
  }
}

uint64_t sub_10019394C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(unsigned __int8 *)(v0 + 1844);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1584);
  v3 = *(_QWORD *)(v0 + 1528);
  v4 = *(_QWORD *)(v0 + 1448);
  v5 = *(_QWORD *)(v0 + 1416);
  v6 = (v1 + 24) & ~v1;
  v7 = *(_QWORD *)(v0 + 1432) + v6;
  v8 = v1 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1592))(v4, *(_QWORD *)(v0 + 1464), v5);
  v9 = swift_allocObject(&unk_10105BF08, v7, v8);
  *(_QWORD *)(v0 + 1648) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v2(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1656) = v11;
  *v11 = v0;
  v11[1] = sub_100193A68;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1312), sub_10007CC00, v9, *(_QWORD *)(v0 + 1304));
}

uint64_t sub_100193A68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 904);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1656));
  swift_release();
  return swift_task_switch(sub_100193B00, v1, 0);
}

uint64_t sub_100193B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  SecKeyRef v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, uint64_t);
  void (*v128)(uint64_t, uint64_t, uint64_t);
  _QWORD *v129;
  SecKeyRef v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  NSObject *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239[4];

  v1 = v0 + 704;
  v2 = *(_QWORD *)(v0 + 1320);
  v3 = *(_QWORD *)(v0 + 1312);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1328) + 48))(v3, 1, v2) == 1)
  {
    sub_100004048(v3, &qword_1010EE0E0);
    if (qword_1010E99C0 != -1)
      goto LABEL_45;
    while (1)
    {
      v4 = *(_QWORD *)(v0 + 1520);
      v5 = *(_QWORD *)(v0 + 1512);
      v6 = *(_QWORD *)(v0 + 1504);
      v7 = *(_QWORD *)(v0 + 1296);
      v8 = *(_QWORD *)(v0 + 1232);
      v9 = *(_QWORD *)(v0 + 1224);
      v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B69B0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
      sub_10005972C(v4, v5, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      sub_10005972C(v5, v6, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v11 = sub_1000126B0(v5, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.error.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = v1;
        v234 = v12;
        v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1576);
        v16 = *(_QWORD *)(v0 + 1504);
        v17 = *(_QWORD *)(v0 + 1472);
        v18 = *(_QWORD *)(v0 + 1416);
        v19 = *(_QWORD *)(v0 + 1392);
        v20 = swift_slowAlloc(22, -1);
        v21 = swift_slowAlloc(32, -1);
        *(_QWORD *)(v0 + 760) = v21;
        *(_DWORD *)v20 = 141558275;
        *(_QWORD *)(v20 + 4) = 1752392040;
        *(_WORD *)(v20 + 12) = 2081;
        sub_10000F9B8(v16 + *(int *)(v17 + 28), v19, &qword_1010ED860);
        v22 = v15(v19, 1, v18);
        if ((_DWORD)v22 == 1)
        {
          sub_100004048(*(_QWORD *)(v0 + 1392), &qword_1010ED860);
          v23 = 0xE300000000000000;
          v24 = 7104878;
        }
        else
        {
          v66 = *(_QWORD *)(v0 + 1424);
          v67 = *(_QWORD *)(v0 + 1416);
          v68 = *(_QWORD *)(v0 + 1392);
          v24 = UUID.uuidString.getter(v22);
          v23 = v69;
          (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v67);
        }
        v209 = *(_QWORD *)(v0 + 1608);
        v212 = *(_QWORD *)(v0 + 1616);
        v194 = *(_QWORD *)(v0 + 1568);
        v70 = *(_QWORD *)(v0 + 1560);
        v71 = *(_QWORD *)(v0 + 1504);
        v221 = *(_QWORD *)(v0 + 1464);
        v225 = *(_QWORD *)(v0 + 1520);
        v215 = *(_QWORD *)(v0 + 1424);
        v218 = *(_QWORD *)(v0 + 1416);
        v205 = *(_QWORD *)(v0 + 1296);
        v198 = *(_QWORD *)(v0 + 1232);
        v201 = *(_QWORD *)(v0 + 1224);
        *(_QWORD *)(v0 + 696) = sub_100016940(v24, v23, (uint64_t *)(v0 + 760));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v14, v20 + 14, v20 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v71, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        _os_log_impl((void *)&_mh_execute_header, v234, v13, "Cannot find sharing circle for payload: %{private,mask.hash}s.", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v20, -1, -1);
        sub_10001BC14(v70, v194);

        sub_10001EF3C(v209, v212);
        (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v205, v201);
        (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v221, v218);
        v59 = v225;
      }
      else
      {
        v51 = *(_QWORD *)(v0 + 1616);
        v52 = *(_QWORD *)(v0 + 1608);
        v53 = *(_QWORD *)(v0 + 1504);
        v231 = *(_QWORD *)(v0 + 1464);
        v236 = *(_QWORD *)(v0 + 1520);
        v54 = *(_QWORD *)(v0 + 1424);
        v55 = *(_QWORD *)(v0 + 1416);
        v56 = *(_QWORD *)(v0 + 1296);
        v57 = *(_QWORD *)(v0 + 1232);
        v58 = *(_QWORD *)(v0 + 1224);
        sub_10001BC14(*(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1568));

        sub_10001EF3C(v52, v51);
        sub_1000126B0(v53, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v231, v55);
        v59 = v236;
      }
      sub_1000126B0(v59, type metadata accessor for KeyDropFetchResponse.LocationPayload);
LABEL_14:
      v72 = *(_QWORD *)(v0 + 1552) + 1;
      if (v72 != *(_QWORD *)(v0 + 1544))
        break;
LABEL_15:
      v73 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v74 = *(_QWORD *)(v0 + 880);
      if (v74)
        v73 = *(_QWORD **)(v0 + 880);
      v195 = v73[2];
      if (!v195)
      {
        swift_bridgeObjectRetain(v74);
LABEL_40:
        swift_bridgeObjectRelease();
        v113 = *(_QWORD *)(v0 + 1536);
        v114 = *(_QWORD *)(v0 + 1520);
        v115 = *(_QWORD *)(v0 + 1512);
        v116 = *(_QWORD *)(v0 + 1504);
        v117 = *(_QWORD *)(v0 + 1496);
        v118 = *(_QWORD *)(v0 + 1488);
        v119 = *(_QWORD *)(v0 + 1464);
        v120 = *(_QWORD *)(v0 + 1456);
        v121 = *(_QWORD *)(v0 + 1448);
        v137 = *(_QWORD *)(v0 + 1440);
        v139 = *(_QWORD *)(v0 + 1408);
        v141 = *(_QWORD *)(v0 + 1400);
        v143 = *(_QWORD *)(v0 + 1392);
        v145 = *(_QWORD *)(v0 + 1384);
        v147 = *(_QWORD *)(v0 + 1376);
        v149 = *(_QWORD *)(v0 + 1352);
        v151 = *(_QWORD *)(v0 + 1336);
        v153 = *(_QWORD *)(v0 + 1312);
        v155 = *(_QWORD *)(v0 + 1296);
        v157 = *(_QWORD *)(v0 + 1288);
        v159 = *(_QWORD *)(v0 + 1280);
        v161 = *(_QWORD *)(v0 + 1272);
        v163 = *(_QWORD *)(v0 + 1264);
        v165 = *(_QWORD *)(v0 + 1256);
        v167 = *(_QWORD *)(v0 + 1248);
        v169 = *(_QWORD *)(v0 + 1240);
        v171 = *(_QWORD *)(v0 + 1216);
        v173 = *(_QWORD *)(v0 + 1208);
        v175 = *(_QWORD *)(v0 + 1200);
        v177 = *(_QWORD *)(v0 + 1192);
        v180 = *(_QWORD *)(v0 + 1184);
        v183 = *(_QWORD *)(v0 + 1152);
        v185 = *(_QWORD *)(v0 + 1144);
        v188 = *(_QWORD *)(v0 + 1136);
        v190 = *(_QWORD *)(v0 + 1128);
        v192 = *(_QWORD *)(v0 + 1120);
        v196 = *(_QWORD *)(v0 + 1112);
        v199 = *(_QWORD *)(v0 + 1104);
        v203 = *(_QWORD *)(v0 + 1096);
        v207 = *(_QWORD *)(v0 + 1064);
        v210 = *(_QWORD *)(v0 + 1048);
        v213 = *(_QWORD *)(v0 + 1040);
        v216 = *(_QWORD *)(v0 + 1032);
        v219 = *(_QWORD *)(v0 + 1024);
        v223 = *(_QWORD *)(v0 + 992);
        v227 = *(_QWORD *)(v0 + 968);
        v229 = *(_QWORD *)(v0 + 952);
        v232 = *(_QWORD *)(v0 + 936);
        v237 = *(_QWORD *)(v0 + 912);
        swift_beginAccess(v113 + 16, v0 + 440, 0, 0);
        v136 = *(_QWORD *)(v113 + 16);
        swift_bridgeObjectRetain(v136);
        swift_release();
        swift_task_dealloc(v114);
        swift_task_dealloc(v115);
        swift_task_dealloc(v116);
        swift_task_dealloc(v117);
        swift_task_dealloc(v118);
        swift_task_dealloc(v119);
        swift_task_dealloc(v120);
        swift_task_dealloc(v121);
        swift_task_dealloc(v137);
        swift_task_dealloc(v139);
        swift_task_dealloc(v141);
        swift_task_dealloc(v143);
        swift_task_dealloc(v145);
        swift_task_dealloc(v147);
        swift_task_dealloc(v149);
        swift_task_dealloc(v151);
        swift_task_dealloc(v153);
        swift_task_dealloc(v155);
        swift_task_dealloc(v157);
        swift_task_dealloc(v159);
        swift_task_dealloc(v161);
        swift_task_dealloc(v163);
        swift_task_dealloc(v165);
        swift_task_dealloc(v167);
        swift_task_dealloc(v169);
        swift_task_dealloc(v171);
        swift_task_dealloc(v173);
        swift_task_dealloc(v175);
        swift_task_dealloc(v177);
        swift_task_dealloc(v180);
        swift_task_dealloc(v183);
        swift_task_dealloc(v185);
        swift_task_dealloc(v188);
        swift_task_dealloc(v190);
        swift_task_dealloc(v192);
        swift_task_dealloc(v196);
        swift_task_dealloc(v199);
        swift_task_dealloc(v203);
        swift_task_dealloc(v207);
        swift_task_dealloc(v210);
        swift_task_dealloc(v213);
        swift_task_dealloc(v216);
        swift_task_dealloc(v219);
        swift_task_dealloc(v223);
        swift_task_dealloc(v227);
        swift_task_dealloc(v229);
        swift_task_dealloc(v232);
        swift_task_dealloc(v237);
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v136);
      }
      v75 = *(_QWORD *)(v0 + 1232);
      v226 = *(_QWORD *)(v0 + 1032);
      v187 = *(_QWORD *)(v0 + 1008);
      v1 = *(_QWORD *)(*(_QWORD *)(v0 + 896) + 16);
      v206 = v73 + 4;
      swift_bridgeObjectRetain(v74);
      v76 = 0;
      v179 = v1;
      v182 = v73;
      while (v76 < v73[2])
      {
        v202 = v76;
        v77 = &v206[3 * v76];
        v78 = *v77;
        v79 = v77[1];
        v80 = v77[2];
        if (v1)
        {
          v81 = *(_QWORD *)(v0 + 896);
          sub_10001BBBC(v78, v79);
          v82 = v81 + ((*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80));
          swift_bridgeObjectRetain(v80);
          swift_bridgeObjectRetain(v81);
          sub_10005972C(v82, *(_QWORD *)(v0 + 1032), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
          __asm { BR              X10 }
        }
        sub_10001BBBC(*v77, v77[1]);
        swift_bridgeObjectRetain(v80);
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v83 = *(_QWORD *)(v0 + 1240);
        v84 = *(_QWORD *)(v0 + 1224);
        v85 = sub_10001A9E8(v84, (uint64_t)qword_1011B69B0);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v83, v85, v84);
        sub_10001BBBC(v78, v79);
        swift_bridgeObjectRetain(v80);
        sub_10001BBBC(v78, v79);
        swift_bridgeObjectRetain(v80);
        v87 = Logger.logObject.getter(v86);
        v88 = static os_log_type_t.error.getter(v87);
        v89 = os_log_type_enabled(v87, v88);
        v90 = *(_QWORD *)(v0 + 1240);
        v91 = *(_QWORD *)(v0 + 1224);
        if (v89)
        {
          v222 = *(_QWORD *)(v0 + 1224);
          v92 = v79;
          v93 = swift_slowAlloc(22, -1);
          v94 = swift_slowAlloc(32, -1);
          v239[0] = v94;
          *(_DWORD *)v93 = 141558275;
          *(_QWORD *)(v93 + 4) = 1752392040;
          *(_WORD *)(v93 + 12) = 2081;
          *(_QWORD *)(v0 + 616) = v78;
          *(_QWORD *)(v0 + 624) = v92;
          v95 = sub_100153D50();
          v96 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v95);
          *(_QWORD *)(v93 + 14) = sub_100016940(v96, v97, v239);
          swift_bridgeObjectRelease();
          sub_10001BC14(v78, v92);
          swift_bridgeObjectRelease();
          sub_10001BC14(v78, v92);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v93, 0x16u);
          swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v93, -1, -1);

          sub_10001BC14(v78, v92);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v90, v222);
        }
        else
        {
          sub_10001BC14(v78, v79);
          swift_bridgeObjectRelease();
          sub_10001BC14(v78, v79);
          swift_bridgeObjectRelease();
          sub_10001BC14(v78, v79);
          swift_bridgeObjectRelease();

          (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v90, v91);
        }
        v73 = v182;
        v76 = v202 + 1;
        v1 = v179;
        if (v202 + 1 == v195)
          goto LABEL_40;
      }
      __break(1u);
LABEL_45:
      swift_once(&qword_1010E99C0, sub_100173218);
    }
    while (1)
    {
      *(_QWORD *)(v0 + 1552) = v72;
      v99 = *(_QWORD **)(v0 + 888);
      if (!v99)
        v99 = _swiftEmptyArrayStorage;
      if (v72 >= v99[2])
      {
        __break(1u);
        JUMPOUT(0x1001975F0);
      }
      v100 = *(_QWORD *)(v0 + 1520);
      v101 = *(_QWORD *)(v0 + 1472);
      v102 = *(_QWORD *)(v0 + 1424);
      v103 = *(_QWORD *)(v0 + 1416);
      v104 = *(_QWORD *)(v0 + 1408);
      sub_10005972C((uint64_t)v99+ ((*(unsigned __int8 *)(v0 + 1840) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1840))+ *(_QWORD *)(*(_QWORD *)(v0 + 1480) + 72) * v72, v100, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v105 = *(_QWORD *)(v100 + 16);
      *(_QWORD *)(v0 + 1560) = v105;
      v106 = *(_QWORD *)(v100 + 24);
      *(_QWORD *)(v0 + 1568) = v106;
      sub_10000F9B8(v100 + *(int *)(v101 + 28), v104, &qword_1010ED860);
      v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
      *(_QWORD *)(v0 + 1576) = v107;
      if (v107(v104, 1, v103) != 1)
        break;
      v108 = *(_QWORD *)(v0 + 1408);
      sub_10001BBBC(v105, v106);
      sub_100004048(v108, &qword_1010ED860);
      if (qword_1010E99C0 != -1)
        swift_once(&qword_1010E99C0, sub_100173218);
      v109 = sub_10001A9E8(*(_QWORD *)(v0 + 1224), (uint64_t)qword_1011B69B0);
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.error.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v112 = 0;
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "Missing share id in payload.", v112, 2u);
        swift_slowDealloc(v112, -1, -1);
      }
      v98 = *(_QWORD *)(v0 + 1520);
      sub_10001BC14(v105, v106);

      sub_1000126B0(v98, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v72 = *(_QWORD *)(v0 + 1552) + 1;
      if (v72 == *(_QWORD *)(v0 + 1544))
        goto LABEL_15;
    }
    v122 = *(_QWORD *)(v0 + 1464);
    v123 = *(_QWORD *)(v0 + 1424);
    v124 = *(_QWORD *)(v0 + 1416);
    v125 = *(_QWORD *)(v0 + 1408);
    v126 = *(_QWORD *)(v0 + 1400);
    v127 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32);
    *(_QWORD *)(v0 + 1584) = v127;
    v127(v122, v125, v124);
    v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 16);
    *(_QWORD *)(v0 + 1592) = v128;
    v128(v126, v122, v124);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v123 + 56))(v126, 0, 1, v124);
    sub_10001BBBC(v105, v106);
    v129 = (_QWORD *)swift_task_alloc(dword_1010F1944);
    *(_QWORD *)(v0 + 1600) = v129;
    *v129 = v0;
    v129[1] = sub_10018C4F8;
    return sub_1001AB0F8(v105, v106, *(_QWORD *)(v0 + 1400));
  }
  else
  {
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1592);
    v26 = *(_QWORD *)(v0 + 1448);
    v27 = *(_QWORD *)(v0 + 1416);
    v28 = *(_QWORD *)(v0 + 1336);
    sub_1000126EC(v3, v28, type metadata accessor for OwnerSharingCircle);
    v25(v26, v28 + *(int *)(v2 + 24), v27);
    sub_1000126B0(v28, type metadata accessor for OwnerSharingCircle);
    v29 = *(_QWORD *)(v0 + 1624);
    v30 = *(_QWORD *)(v0 + 1616);
    v31 = *(_QWORD *)(v0 + 1608);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1584))(*(_QWORD *)(v0 + 1456), *(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1416));
    v32 = sub_1002F7F34(v31, v30);
    *(_QWORD *)(v0 + 1664) = v32;
    if (!v29)
    {
      v60 = *(_QWORD *)(v0 + 1520);
      v61 = *(_QWORD *)(v60 + 32);
      *(_QWORD *)(v0 + 1672) = v61;
      v62 = *(_QWORD *)(v61 + 16);
      *(_QWORD *)(v0 + 1680) = v62;
      v63 = *(_QWORD *)(v0 + 1616);
      v64 = *(_QWORD *)(v0 + 1608);
      if (v62)
      {
        *(_QWORD *)(v0 + 1688) = 0;
        *(_QWORD *)(v0 + 1696) = *(_QWORD *)(v61 + 32);
        *(_QWORD *)(v0 + 1704) = *(_QWORD *)(v61 + 40);
        v65 = *(_DWORD *)(v61 + 48);
        *(_BYTE *)(v0 + 1716) = *(_BYTE *)(v61 + 52);
        *(_DWORD *)(v0 + 1712) = v65;
        swift_bridgeObjectRetain(v61);
        __asm { BR              X10 }
      }
      v130 = v32;
      v131 = *(_QWORD *)(v0 + 1568);
      v132 = *(_QWORD *)(v0 + 1560);
      v233 = *(_QWORD *)(v0 + 1464);
      v238 = *(_QWORD *)(v0 + 1456);
      v133 = *(_QWORD *)(v0 + 1424);
      v134 = *(_QWORD *)(v0 + 1416);
      swift_bridgeObjectRetain(v61);
      sub_10001BC14(v132, v131);

      sub_10001EF3C(v64, v63);
      swift_bridgeObjectRelease();
      v135 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
      v135(v233, v134);
      sub_1000126B0(v60, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v135(v238, v134);
      goto LABEL_14;
    }
    v33 = *(_QWORD *)(v0 + 1616);
    v34 = *(_QWORD *)(v0 + 1608);
    v35 = *(_QWORD *)(v0 + 1520);
    v36 = *(_QWORD *)(v0 + 1464);
    v37 = *(_QWORD *)(v0 + 1456);
    v38 = *(_QWORD *)(v0 + 1424);
    v39 = *(_QWORD *)(v0 + 1416);
    sub_10001BC14(*(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1568));
    sub_10001EF3C(v34, v33);
    v40 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v40(v36, v39);
    sub_1000126B0(v35, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    swift_bridgeObjectRelease();
    v40(v37, v39);
    v41 = *(_QWORD *)(v0 + 1520);
    v42 = *(_QWORD *)(v0 + 1512);
    v43 = *(_QWORD *)(v0 + 1504);
    v44 = *(_QWORD *)(v0 + 1496);
    v45 = *(_QWORD *)(v0 + 1488);
    v46 = *(_QWORD *)(v0 + 1464);
    v47 = *(_QWORD *)(v0 + 1456);
    v48 = *(_QWORD *)(v0 + 1448);
    v49 = *(_QWORD *)(v0 + 1440);
    v138 = *(_QWORD *)(v0 + 1408);
    v140 = *(_QWORD *)(v0 + 1400);
    v142 = *(_QWORD *)(v0 + 1392);
    v144 = *(_QWORD *)(v0 + 1384);
    v146 = *(_QWORD *)(v0 + 1376);
    v148 = *(_QWORD *)(v0 + 1352);
    v150 = *(_QWORD *)(v0 + 1336);
    v152 = *(_QWORD *)(v0 + 1312);
    v154 = *(_QWORD *)(v0 + 1296);
    v156 = *(_QWORD *)(v0 + 1288);
    v158 = *(_QWORD *)(v0 + 1280);
    v160 = *(_QWORD *)(v0 + 1272);
    v162 = *(_QWORD *)(v0 + 1264);
    v164 = *(_QWORD *)(v0 + 1256);
    v166 = *(_QWORD *)(v0 + 1248);
    v168 = *(_QWORD *)(v0 + 1240);
    v170 = *(_QWORD *)(v0 + 1216);
    v172 = *(_QWORD *)(v0 + 1208);
    v174 = *(_QWORD *)(v0 + 1200);
    v176 = *(_QWORD *)(v0 + 1192);
    v178 = *(_QWORD *)(v0 + 1184);
    v181 = *(_QWORD *)(v0 + 1152);
    v184 = *(_QWORD *)(v0 + 1144);
    v186 = *(_QWORD *)(v0 + 1136);
    v189 = *(_QWORD *)(v0 + 1128);
    v191 = *(_QWORD *)(v0 + 1120);
    v193 = *(_QWORD *)(v0 + 1112);
    v197 = *(_QWORD *)(v0 + 1104);
    v200 = *(_QWORD *)(v0 + 1096);
    v204 = *(_QWORD *)(v0 + 1064);
    v208 = *(_QWORD *)(v0 + 1048);
    v211 = *(_QWORD *)(v0 + 1040);
    v214 = *(_QWORD *)(v0 + 1032);
    v217 = *(_QWORD *)(v0 + 1024);
    v220 = *(_QWORD *)(v0 + 992);
    v224 = *(_QWORD *)(v0 + 968);
    v228 = *(_QWORD *)(v0 + 952);
    v230 = *(_QWORD *)(v0 + 936);
    v235 = *(_QWORD *)(v0 + 912);
    swift_release();
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v138);
    swift_task_dealloc(v140);
    swift_task_dealloc(v142);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    swift_task_dealloc(v148);
    swift_task_dealloc(v150);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v156);
    swift_task_dealloc(v158);
    swift_task_dealloc(v160);
    swift_task_dealloc(v162);
    swift_task_dealloc(v164);
    swift_task_dealloc(v166);
    swift_task_dealloc(v168);
    swift_task_dealloc(v170);
    swift_task_dealloc(v172);
    swift_task_dealloc(v174);
    swift_task_dealloc(v176);
    swift_task_dealloc(v178);
    swift_task_dealloc(v181);
    swift_task_dealloc(v184);
    swift_task_dealloc(v186);
    swift_task_dealloc(v189);
    swift_task_dealloc(v191);
    swift_task_dealloc(v193);
    swift_task_dealloc(v197);
    swift_task_dealloc(v200);
    swift_task_dealloc(v204);
    swift_task_dealloc(v208);
    swift_task_dealloc(v211);
    swift_task_dealloc(v214);
    swift_task_dealloc(v217);
    swift_task_dealloc(v220);
    swift_task_dealloc(v224);
    swift_task_dealloc(v228);
    swift_task_dealloc(v230);
    swift_task_dealloc(v235);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001978F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1736);
  *(_QWORD *)(*(_QWORD *)v1 + 1744) = v0;
  swift_task_dealloc(v3);
  v4 = v2[216];
  v5 = v2[215];
  v6 = v2[213];
  v7 = v2[212];
  if (v0)
  {
    v8 = v2[113];
    sub_10001BC14(v5, v4);
    sub_10001BC14(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = sub_1001A6294;
  }
  else
  {
    v8 = v2[113];
    sub_10001BC14(v5, v4);
    sub_10001BC14(v7, v6);
    v9 = sub_100197A08;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_100197A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  void (*v81)(uint64_t, uint64_t, uint64_t);
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134[4];

  v1 = *(_QWORD *)(v0 + 1160);
  v2 = *(_QWORD *)(v0 + 1152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1168) + 48))(v2, 1, v1) == 1)
  {
    sub_10001BC14(*(_QWORD *)(v0 + 1696), *(_QWORD *)(v0 + 1704));
    sub_100004048(v2, &qword_1010F1930);
    v3 = *(_QWORD *)(v0 + 1688) + 1;
    if (v3 != *(_QWORD *)(v0 + 1680))
    {
      *(_QWORD *)(v0 + 1688) = v3;
      v48 = *(_QWORD *)(v0 + 1616);
      v49 = *(_QWORD *)(v0 + 1672) + 24 * v3;
      *(_QWORD *)(v0 + 1696) = *(_QWORD *)(v49 + 32);
      *(_QWORD *)(v0 + 1704) = *(_QWORD *)(v49 + 40);
      v50 = *(_DWORD *)(v49 + 48);
      *(_BYTE *)(v0 + 1716) = *(_BYTE *)(v49 + 52);
      *(_DWORD *)(v0 + 1712) = v50;
      __asm { BR              X10 }
    }
    v131 = *(_QWORD *)(v0 + 1744);
    v4 = *(void **)(v0 + 1664);
    v5 = *(_QWORD *)(v0 + 1616);
    v6 = *(_QWORD *)(v0 + 1608);
    v7 = *(_QWORD *)(v0 + 1520);
    v8 = *(_QWORD *)(v0 + 1464);
    v9 = *(_QWORD *)(v0 + 1456);
    v10 = *(_QWORD *)(v0 + 1424);
    v11 = *(_QWORD *)(v0 + 1416);
    sub_10001BC14(*(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1568));

    sub_10001EF3C(v6, v5);
    swift_bridgeObjectRelease();
    v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v12(v8, v11);
    sub_1000126B0(v7, type metadata accessor for KeyDropFetchResponse.LocationPayload);
    v12(v9, v11);
    v13 = *(_QWORD *)(v0 + 1552) + 1;
    if (v13 == *(_QWORD *)(v0 + 1544))
    {
LABEL_4:
      v14 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v0 + 880);
      if (v15)
        v14 = *(_QWORD **)(v0 + 880);
      v114 = v14[2];
      if (v114)
      {
        v16 = *(_QWORD *)(v0 + 1232);
        v127 = *(_QWORD *)(v0 + 1032);
        v110 = *(_QWORD *)(v0 + 1008);
        v17 = *(_QWORD *)(*(_QWORD *)(v0 + 896) + 16);
        v119 = v14 + 4;
        swift_bridgeObjectRetain(v15);
        v18 = 0;
        v19 = v131;
        v105 = v17;
        v107 = v14;
        do
        {
          if (v18 >= v14[2])
          {
            __break(1u);
            JUMPOUT(0x10019B2A8);
          }
          v117 = v18;
          v20 = &v119[3 * v18];
          v21 = *v20;
          v22 = v20[1];
          v23 = v20[2];
          if (v17)
          {
            v24 = *(_QWORD *)(v0 + 896);
            sub_10001BBBC(v21, v22);
            v25 = v24 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
            swift_bridgeObjectRetain(v23);
            swift_bridgeObjectRetain(v24);
            sub_10005972C(v25, *(_QWORD *)(v0 + 1032), type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
            __asm { BR              X10 }
          }
          sub_10001BBBC(*v20, v20[1]);
          swift_bridgeObjectRetain(v23);
          v132 = v19;
          if (qword_1010E99C0 != -1)
            swift_once(&qword_1010E99C0, sub_100173218);
          v26 = *(_QWORD *)(v0 + 1240);
          v27 = *(_QWORD *)(v0 + 1224);
          v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B69B0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v26, v28, v27);
          sub_10001BBBC(v21, v22);
          swift_bridgeObjectRetain(v23);
          sub_10001BBBC(v21, v22);
          swift_bridgeObjectRetain(v23);
          v30 = Logger.logObject.getter(v29);
          v31 = static os_log_type_t.error.getter(v30);
          v32 = os_log_type_enabled(v30, v31);
          v33 = *(_QWORD *)(v0 + 1240);
          v34 = *(_QWORD *)(v0 + 1224);
          if (v32)
          {
            v125 = *(_QWORD *)(v0 + 1224);
            v35 = v22;
            v36 = swift_slowAlloc(22, -1);
            v37 = swift_slowAlloc(32, -1);
            v134[0] = v37;
            *(_DWORD *)v36 = 141558275;
            *(_QWORD *)(v36 + 4) = 1752392040;
            *(_WORD *)(v36 + 12) = 2081;
            *(_QWORD *)(v0 + 616) = v21;
            *(_QWORD *)(v0 + 624) = v35;
            v38 = sub_100153D50();
            v39 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v38);
            *(_QWORD *)(v36 + 14) = sub_100016940(v39, v40, v134);
            swift_bridgeObjectRelease();
            sub_10001BC14(v21, v35);
            swift_bridgeObjectRelease();
            sub_10001BC14(v21, v35);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v36, 0x16u);
            swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1, -1);
            swift_slowDealloc(v36, -1, -1);

            sub_10001BC14(v21, v35);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v33, v125);
          }
          else
          {
            sub_10001BC14(v21, v22);
            swift_bridgeObjectRelease();
            sub_10001BC14(v21, v22);
            swift_bridgeObjectRelease();
            sub_10001BC14(v21, v22);
            swift_bridgeObjectRelease();

            (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v33, v34);
          }
          v14 = v107;
          v19 = v132;
          v18 = v117 + 1;
          v17 = v105;
        }
        while (v117 + 1 != v114);
      }
      else
      {
        swift_bridgeObjectRetain(v15);
      }
      swift_bridgeObjectRelease();
      v66 = *(_QWORD *)(v0 + 1536);
      v67 = *(_QWORD *)(v0 + 1520);
      v68 = *(_QWORD *)(v0 + 1512);
      v69 = *(_QWORD *)(v0 + 1504);
      v70 = *(_QWORD *)(v0 + 1496);
      v71 = *(_QWORD *)(v0 + 1488);
      v72 = *(_QWORD *)(v0 + 1464);
      v73 = *(_QWORD *)(v0 + 1456);
      v74 = *(_QWORD *)(v0 + 1448);
      v84 = *(_QWORD *)(v0 + 1440);
      v85 = *(_QWORD *)(v0 + 1408);
      v86 = *(_QWORD *)(v0 + 1400);
      v87 = *(_QWORD *)(v0 + 1392);
      v88 = *(_QWORD *)(v0 + 1384);
      v89 = *(_QWORD *)(v0 + 1376);
      v90 = *(_QWORD *)(v0 + 1352);
      v91 = *(_QWORD *)(v0 + 1336);
      v92 = *(_QWORD *)(v0 + 1312);
      v93 = *(_QWORD *)(v0 + 1296);
      v94 = *(_QWORD *)(v0 + 1288);
      v95 = *(_QWORD *)(v0 + 1280);
      v96 = *(_QWORD *)(v0 + 1272);
      v97 = *(_QWORD *)(v0 + 1264);
      v98 = *(_QWORD *)(v0 + 1256);
      v99 = *(_QWORD *)(v0 + 1248);
      v100 = *(_QWORD *)(v0 + 1240);
      v101 = *(_QWORD *)(v0 + 1216);
      v102 = *(_QWORD *)(v0 + 1208);
      v103 = *(_QWORD *)(v0 + 1200);
      v104 = *(_QWORD *)(v0 + 1192);
      v106 = *(_QWORD *)(v0 + 1184);
      v108 = *(_QWORD *)(v0 + 1152);
      v109 = *(_QWORD *)(v0 + 1144);
      v111 = *(_QWORD *)(v0 + 1136);
      v112 = *(_QWORD *)(v0 + 1128);
      v113 = *(_QWORD *)(v0 + 1120);
      v115 = *(_QWORD *)(v0 + 1112);
      v116 = *(_QWORD *)(v0 + 1104);
      v118 = *(_QWORD *)(v0 + 1096);
      v120 = *(_QWORD *)(v0 + 1064);
      v121 = *(_QWORD *)(v0 + 1048);
      v122 = *(_QWORD *)(v0 + 1040);
      v123 = *(_QWORD *)(v0 + 1032);
      v124 = *(_QWORD *)(v0 + 1024);
      v126 = *(_QWORD *)(v0 + 992);
      v128 = *(_QWORD *)(v0 + 968);
      v129 = *(_QWORD *)(v0 + 952);
      v130 = *(_QWORD *)(v0 + 936);
      v133 = *(_QWORD *)(v0 + 912);
      swift_beginAccess(v66 + 16, v0 + 440, 0, 0);
      v83 = *(_QWORD *)(v66 + 16);
      swift_bridgeObjectRetain(v83);
      swift_release();
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v112);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v116);
      swift_task_dealloc(v118);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v126);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      swift_task_dealloc(v130);
      swift_task_dealloc(v133);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v83);
    }
    else
    {
      while (1)
      {
        *(_QWORD *)(v0 + 1552) = v13;
        v52 = *(_QWORD **)(v0 + 888);
        if (!v52)
          v52 = _swiftEmptyArrayStorage;
        if (v13 >= v52[2])
        {
          __break(1u);
          JUMPOUT(0x10019B274);
        }
        v53 = *(_QWORD *)(v0 + 1520);
        v54 = *(_QWORD *)(v0 + 1472);
        v55 = *(_QWORD *)(v0 + 1424);
        v56 = *(_QWORD *)(v0 + 1416);
        v57 = *(_QWORD *)(v0 + 1408);
        sub_10005972C((uint64_t)v52+ ((*(unsigned __int8 *)(v0 + 1840) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1840))+ *(_QWORD *)(*(_QWORD *)(v0 + 1480) + 72) * v13, v53, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        v58 = *(_QWORD *)(v53 + 16);
        *(_QWORD *)(v0 + 1560) = v58;
        v59 = *(_QWORD *)(v53 + 24);
        *(_QWORD *)(v0 + 1568) = v59;
        sub_10000F9B8(v53 + *(int *)(v54 + 28), v57, &qword_1010ED860);
        v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
        *(_QWORD *)(v0 + 1576) = v60;
        if (v60(v57, 1, v56) != 1)
          break;
        v61 = *(_QWORD *)(v0 + 1408);
        sub_10001BBBC(v58, v59);
        sub_100004048(v61, &qword_1010ED860);
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v62 = sub_10001A9E8(*(_QWORD *)(v0 + 1224), (uint64_t)qword_1011B69B0);
        v63 = Logger.logObject.getter(v62);
        v64 = static os_log_type_t.error.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          v65 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v65 = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Missing share id in payload.", v65, 2u);
          swift_slowDealloc(v65, -1, -1);
        }
        v51 = *(_QWORD *)(v0 + 1520);
        sub_10001BC14(v58, v59);

        sub_1000126B0(v51, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        v13 = *(_QWORD *)(v0 + 1552) + 1;
        if (v13 == *(_QWORD *)(v0 + 1544))
          goto LABEL_4;
      }
      v75 = *(_QWORD *)(v0 + 1464);
      v76 = *(_QWORD *)(v0 + 1424);
      v77 = *(_QWORD *)(v0 + 1416);
      v78 = *(_QWORD *)(v0 + 1408);
      v79 = *(_QWORD *)(v0 + 1400);
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32);
      *(_QWORD *)(v0 + 1584) = v80;
      v80(v75, v78, v77);
      v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16);
      *(_QWORD *)(v0 + 1592) = v81;
      v81(v79, v75, v77);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v79, 0, 1, v77);
      sub_10001BBBC(v58, v59);
      v82 = (_QWORD *)swift_task_alloc(dword_1010F1944);
      *(_QWORD *)(v0 + 1600) = v82;
      *v82 = v0;
      v82[1] = sub_10018C4F8;
      return sub_1001AB0F8(v58, v59, *(_QWORD *)(v0 + 1400));
    }
  }
  else
  {
    v41 = *(void (**)(void))(v0 + 1584);
    v42 = *(_QWORD *)(v0 + 1528);
    v43 = *(_QWORD *)(v0 + 1216);
    v44 = *(int *)(v1 + 48);
    *(_DWORD *)(v0 + 1848) = v44;
    v45 = v43 + v44;
    v46 = v2 + v44;
    v41();
    sub_1000126EC(v46, v45, type metadata accessor for RawSearchResult);
    return swift_task_switch(sub_10019B434, v42, 0);
  }
}

uint64_t sub_10019B434()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 1752) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_10019B4D4;
  return unsafeBlocking<A>(_:)(v0 + 728, sub_10007C6FC, *(_QWORD *)(v0 + 1528), v3);
}

uint64_t sub_10019B4D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1752));
  swift_release();
  return swift_task_switch(sub_10019B560, v1, 0);
}

uint64_t sub_10019B560()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[113];
  v0[220] = v0[91];
  return swift_task_switch(sub_10019B5C8, v1, 0);
}

uint64_t sub_10019B5C8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[220];
  v2 = v0[202];
  v3 = v0[201];
  v4 = (_QWORD *)swift_allocObject(&unk_10105BF30, 40, 7);
  v0[221] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  sub_10001BD08(v3, v2);
  v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[222] = v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  *v6 = v0;
  v6[1] = sub_10019B6B8;
  return unsafeBlocking<A>(_:)(v0 + 92, sub_1001ADEE4, v4, v7);
}

uint64_t sub_10019B6B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 904);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1776));
  swift_release();
  return swift_task_switch(sub_10019B750, v1, 0);
}

uint64_t sub_10019B750()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t (**v101)(uint64_t, uint64_t, uint64_t);
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (**v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t (**v182)(uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t (*v193)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v196)(uint64_t, uint64_t, uint64_t);
  void (*v197)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t));
  unint64_t v198;
  uint64_t (*v199)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v200)(uint64_t, uint64_t, uint64_t);
  uint64_t v201;
  uint64_t (*v202)(uint64_t, uint64_t, uint64_t);
  uint64_t v203;
  NSObject *v204;
  uint64_t *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (*v209)(uint64_t, uint64_t, uint64_t);
  uint64_t v210;
  uint64_t (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  os_log_type_t v216;
  _BOOL4 v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t (*v226)(uint64_t, uint64_t, uint64_t);
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t (*v230)(uint64_t, uint64_t, uint64_t);
  uint64_t v231;
  uint64_t (*v232)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v233)(uint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t v238;
  uint64_t v239;
  NSObject *v240;
  os_log_type_t v241;
  uint8_t *v242;
  uint64_t (*v243)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v244)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v247)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v248)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v249)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v250)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v251)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v252)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v253)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v254)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v255)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v256)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v257)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v258)(uint64_t, uint64_t, uint64_t);
  uint64_t (***v259)(uint64_t, uint64_t, uint64_t);
  unint64_t v260;
  uint64_t v261;
  uint64_t (*v262)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v263)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v264)(uint64_t, uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t (*v267)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v268)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v269)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v270)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v271)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v272)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v273)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v274)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v275)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v276)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v277)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v278)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v279)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v280)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v281)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v282)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v283)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v284)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v285)(uint64_t, uint64_t, uint64_t);
  uint64_t v286;
  uint64_t (*v287)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v288)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v289)(uint64_t, uint64_t, uint64_t);
  unint64_t v290;
  uint64_t v291;
  uint64_t (*v292)(uint64_t, uint64_t, uint64_t);
  uint64_t v293;
  uint64_t (*v294)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v295)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v296)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v297)(uint64_t, uint64_t, uint64_t);
  uint64_t v298;
  uint64_t (*v299)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v300)(uint64_t, uint64_t, uint64_t);
  uint64_t v301;
  uint64_t (*v302)(uint64_t, uint64_t, uint64_t);
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  uint64_t v306;
  uint64_t (*v307)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v308)(uint64_t, uint64_t, uint64_t);
  uint64_t v309;
  void (*v310)(uint64_t, uint64_t, NSObject *);
  os_log_type_t v311;
  uint64_t v312;
  NSObject *v313;
  uint64_t (*v314)(uint64_t, uint64_t, uint64_t);
  uint64_t (**log)(uint64_t, uint64_t, uint64_t);
  os_log_t logc;
  os_log_t logd;
  NSObject *loga;
  os_log_t logb;
  os_log_t loge;
  uint64_t v321;
  uint64_t (*v322)(uint64_t, uint64_t, uint64_t);
  uint64_t v323;
  _QWORD *v324;
  uint64_t (*v325)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v326;
  uint64_t (*v327)(uint64_t, uint64_t, uint64_t);
  uint64_t v328;
  uint64_t v329;
  uint64_t (*v330)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v331)(uint64_t, uint64_t, uint64_t);
  NSObject *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t (*v335)(uint64_t, uint64_t, uint64_t);
  uint64_t v336;
  void (*v337)(uint64_t, uint64_t, NSObject *);
  uint64_t v338;
  uint64_t v339;
  uint64_t (*v340)(uint64_t, uint64_t, uint64_t);
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t (*v346)(uint64_t, uint64_t, uint64_t);
  uint64_t v347;
  os_log_type_t v348;
  uint64_t (*v349)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v350)(uint64_t, uint64_t, uint64_t);
  uint64_t v351;
  uint64_t (*v352)(uint64_t, uint64_t, uint64_t);
  void (*v353)(uint64_t, uint64_t, uint64_t);
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t (*v357)(uint64_t, uint64_t, uint64_t);
  uint64_t v358;
  uint64_t v359;
  uint64_t (*v360)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v361)(uint64_t, uint64_t, uint64_t);
  void (*v362)(uint64_t, uint64_t, uint64_t);
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t (*v366)(uint64_t, uint64_t, uint64_t);
  uint64_t v367;
  unint64_t v368;
  uint64_t (*v369)(uint64_t, uint64_t, uint64_t);
  uint64_t v370;
  uint64_t v371;
  NSObject *v372;
  uint64_t v373;
  uint64_t (*v374)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v375)(uint64_t, uint64_t, uint64_t);
  uint64_t v376;
  uint8_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t (*v380)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v381)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v382)(uint64_t, uint64_t, uint64_t);
  uint64_t v383[4];

  v1 = *((_QWORD *)v0 + 218);
  v2 = *((_QWORD *)v0 + 182);
  v3 = *((_QWORD *)v0 + 142);
  v4 = *((_QWORD *)v0 + 141);
  v5 = *((_QWORD *)v0 + 135);
  v6 = *((_QWORD *)v0 + 134);
  v7 = *((_QWORD *)v0 + 92);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v2;
  sub_100A77A98((uint64_t (*)(char *))sub_1001ADEF0, v7, v3);
  swift_task_dealloc(v8);
  sub_10000F9B8(v3, v4, &qword_1011091A0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v6);
  v10 = *((_QWORD *)v0 + 141);
  v376 = v1;
  if (v9 == 1)
  {
    v370 = v7;
    sub_100004048(v10, &qword_1011091A0);
    if (qword_1010E99C0 != -1)
      goto LABEL_58;
    while (1)
    {
      v11 = *((unsigned __int8 *)v0 + 1844);
      v353 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v0 + 199);
      v362 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v0 + 198);
      v12 = *((_QWORD *)v0 + 182);
      v13 = *((_QWORD *)v0 + 181);
      v14 = *((_QWORD *)v0 + 177);
      v15 = *((_QWORD *)v0 + 160);
      v16 = *((_QWORD *)v0 + 154);
      v17 = *((_QWORD *)v0 + 153);
      v381 = v0;
      v18 = (v11 + 16) & ~v11;
      v19 = *((_QWORD *)v0 + 179) + v18;
      v20 = v11 | 7;
      v21 = sub_10001A9E8(v17, (uint64_t)qword_1011B69B0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v21, v17);
      v353(v13, v12, v14);
      v22 = swift_allocObject(&unk_10105BF58, v19, v20);
      v362(v22 + v18, v13, v14);
      v23 = swift_allocObject(&unk_10105BF80, 32, 7);
      *(_QWORD *)(v23 + 16) = sub_1001ADF20;
      *(_QWORD *)(v23 + 24) = v22;
      v24 = swift_allocObject(&unk_10105BFA8, 24, 7);
      *(_QWORD *)(v24 + 16) = v370;
      v25 = swift_allocObject(&unk_10105BFD0, 32, 7);
      *(_QWORD *)(v25 + 16) = sub_10005953C;
      *(_QWORD *)(v25 + 24) = v24;
      v26 = swift_allocObject(&unk_10105BFF8, 24, 7);
      *(_QWORD *)(v26 + 16) = v370;
      swift_bridgeObjectRetain(v370);
      v332 = Logger.logObject.getter(v27);
      v326 = static os_log_type_t.error.getter(v332);
      v28 = swift_allocObject(&unk_10105C020, 17, 7);
      *(_BYTE *)(v28 + 16) = 112;
      v354 = swift_allocObject(&unk_10105C048, 17, 7);
      *(_BYTE *)(v354 + 16) = 8;
      v29 = swift_allocObject(&unk_10105C070, 24, 7);
      *(_QWORD *)(v29 + 16) = 1752392040;
      v30 = swift_allocObject(&unk_10105C098, 32, 7);
      *(_QWORD *)(v30 + 16) = sub_1001AE898;
      *(_QWORD *)(v30 + 24) = v29;
      v31 = v30;
      v371 = swift_allocObject(&unk_10105C0C0, 17, 7);
      *(_BYTE *)(v371 + 16) = 33;
      v347 = swift_allocObject(&unk_10105C0E8, 17, 7);
      *(_BYTE *)(v347 + 16) = 8;
      v32 = swift_allocObject(&unk_10105C110, 32, 7);
      *(_QWORD *)(v32 + 16) = sub_10005CBAC;
      *(_QWORD *)(v32 + 24) = v23;
      v33 = swift_allocObject(&unk_10105C138, 32, 7);
      *(_QWORD *)(v33 + 16) = sub_10005CBA4;
      *(_QWORD *)(v33 + 24) = v32;
      v34 = v33;
      v363 = swift_allocObject(&unk_10105C160, 17, 7);
      *(_BYTE *)(v363 + 16) = 32;
      v35 = swift_allocObject(&unk_10105C188, 17, 7);
      *(_BYTE *)(v35 + 16) = 8;
      v36 = v35;
      v341 = v35;
      v37 = swift_allocObject(&unk_10105C1B0, 32, 7);
      *(_QWORD *)(v37 + 16) = sub_1001ADF24;
      *(_QWORD *)(v37 + 24) = v25;
      v38 = swift_allocObject(&unk_10105C1D8, 32, 7);
      *(_QWORD *)(v38 + 16) = sub_10005CBA4;
      *(_QWORD *)(v38 + 24) = v37;
      v336 = swift_allocObject(&unk_10105C200, 17, 7);
      *(_BYTE *)(v336 + 16) = 0;
      v39 = swift_allocObject(&unk_10105C228, 17, 7);
      *(_BYTE *)(v39 + 16) = 8;
      v40 = swift_allocObject(&unk_10105C250, 32, 7);
      *(_QWORD *)(v40 + 16) = sub_1001ADF2C;
      *(_QWORD *)(v40 + 24) = v26;
      v41 = swift_allocObject(&unk_10105C278, 32, 7);
      *(_QWORD *)(v41 + 16) = sub_10005CD4C;
      *(_QWORD *)(v41 + 24) = v40;
      v42 = sub_10001A9A8(&qword_1010EC538);
      v43 = swift_allocObject(v42, 224, 7);
      sub_100882D28(v43, 12);
      *v44 = sub_10005CBC4;
      v44[1] = v28;
      v44[2] = sub_10005CBC4;
      v44[3] = v354;
      v44[4] = sub_10005CBB8;
      v44[5] = v31;
      v44[6] = sub_10005CBC4;
      v44[7] = v371;
      v44[8] = sub_10005CBC4;
      v44[9] = v347;
      v44[10] = sub_10005CBB4;
      v44[11] = v34;
      v45 = v34;
      v44[12] = sub_10005CBC4;
      v44[13] = v363;
      v44[14] = sub_10005CBC4;
      v44[15] = v36;
      v44[16] = sub_10005CBB4;
      v44[17] = v38;
      v44[18] = sub_10005CBC4;
      v44[19] = v336;
      v44[20] = sub_10005CBC4;
      v44[21] = v39;
      v44[22] = sub_10005CBB8;
      v44[23] = v41;
      v321 = v28;
      swift_retain();
      swift_retain();
      v309 = v31;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      v306 = v41;
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v332, v326))
      {
        *(_QWORD *)type = v39;
        v46 = (uint64_t)v381 + 808;
        v47 = (uint64_t)v381 + 816;
        v48 = (uint64_t)v381 + 824;
        v49 = (uint8_t *)sub_1006948A0(42);
        v50 = swift_slowAlloc(64, -1);
        *((_QWORD *)v381 + 102) = 0;
        *((_QWORD *)v381 + 103) = v50;
        *(_WORD *)v49 = 1027;
        *((_QWORD *)v381 + 101) = v49 + 2;
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        *((_QWORD *)v381 + 84) = v321;
        log = (uint64_t (**)(uint64_t, uint64_t, uint64_t))((char *)v381 + 664);
        v51 = (uint64_t)v381 + 808;
        v52 = v376;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v381 + 83, (uint64_t)v381 + 808, (uint64_t)v381 + 816, (uint64_t)v381 + 824);
        if (v376)
          return swift_errorRelease(v52);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        *((_QWORD *)v381 + 84) = v354;
        sub_1006948A8(log, v46, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBB8;
        *((_QWORD *)v381 + 84) = v309;
        sub_1006948A8(log, v46, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        *((_QWORD *)v381 + 84) = v371;
        sub_1006948A8(log, v46, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        *((_QWORD *)v381 + 84) = v347;
        sub_1006948A8(log, v46, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBB4;
        *((_QWORD *)v381 + 84) = v45;
        sub_1006948A8(log, v46, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        *((_QWORD *)v381 + 84) = v363;
        sub_1006948A8(log, v46, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        *((_QWORD *)v381 + 84) = v341;
        sub_1006948A8(log, v46, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBB4;
        *((_QWORD *)v381 + 84) = v38;
        sub_1006948A8(log, v51, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        v53 = v381;
        *((_QWORD *)v381 + 84) = v336;
        sub_1006948A8(log, v51, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBC4;
        *((_QWORD *)v381 + 84) = *(_QWORD *)type;
        sub_1006948A8(log, v51, v47, v48);
        swift_release();
        *((_QWORD *)v381 + 83) = sub_10005CBB8;
        *((_QWORD *)v381 + 84) = v306;
        sub_1006948A8(log, v51, v47, v48);
        v54 = *((_QWORD *)v381 + 160);
        v55 = *((_QWORD *)v381 + 154);
        v56 = *((_QWORD *)v381 + 153);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v332, v326, "Could not reconcile beacon: %{private,mask.hash}s,found beacons: %s, found count: %ld.", v49, 0x2Au);
        swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        sub_100694894((uint64_t)v49);

        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
        v376 = 0;
      }
      else
      {
        v53 = v381;
        v94 = *((_QWORD *)v381 + 160);
        logc = (os_log_t)*((_QWORD *)v381 + 154);
        v327 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v381 + 153);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))logc[1].isa)(v94, v327);
      }
LABEL_19:
      v109 = *((_QWORD *)v53 + 192);
      v110 = *((_QWORD *)v53 + 182);
      swift_beginAccess(v109 + 16, (char *)v53 + 416, 32, 0);
      sub_100BBE398(v110, *(_QWORD *)(v109 + 16));
      v112 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v53 + 199);
      v113 = *((_QWORD *)v53 + 192);
      v114 = *((_QWORD *)v53 + 182);
      v115 = *((_QWORD *)v53 + 181);
      v116 = *((_QWORD *)v53 + 177);
      v117 = *((_QWORD *)v53 + 152);
      v118 = *((_QWORD *)v53 + 151);
      v356 = *((_QWORD *)v53 + 145);
      v365 = v117 + *((int *)v53 + 462);
      v373 = *((_QWORD *)v53 + 178);
      if (v111)
      {
        v344 = *((_QWORD *)v53 + 182);
        v119 = *((_QWORD *)v53 + 133);
        v120 = v113 + 16;
        *((_QWORD *)v53 + 93) = v111;
        swift_endAccess((char *)v53 + 416);
        v121 = v118 + *(int *)(v356 + 48);
        v112(v118, v117, v116);
        sub_10005972C(v365, v121, type metadata accessor for RawSearchResult);
        sub_100A0C1EC(v119, v121);
        sub_1000126B0(v119, type metadata accessor for RawSearchResult);
        (*(void (**)(uint64_t, uint64_t))(v373 + 8))(v118, v116);
        v112(v115, v344, v116);
        v122 = *((_QWORD *)v53 + 93);
        swift_beginAccess(v120, (char *)v53 + 512, 33, 0);
        sub_1000FEF14(v122, v115);
        v123 = (uint64_t)v53 + 512;
      }
      else
      {
        v124 = *((_QWORD *)v53 + 132);
        v125 = v113 + 16;
        swift_endAccess((char *)v53 + 416);
        v112(v115, v114, v116);
        v126 = sub_10001A9A8(&qword_1010ED220);
        v127 = swift_allocObject(v126, ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80))+ *(_QWORD *)(v124 + 72), *(unsigned __int8 *)(v124 + 80) | 7);
        v128 = sub_10084F498(v127, 1);
        v129 = v112;
        v130 = v115;
        v132 = v131;
        v133 = v118 + *(int *)(v356 + 48);
        v129(v118, v117, v116);
        sub_10005972C(v365, v133, type metadata accessor for RawSearchResult);
        sub_1000126EC(v133, v132, type metadata accessor for RawSearchResult);
        v134 = SharingCircleWildAdvertisementKey.init(key:)(v128);
        (*(void (**)(uint64_t, uint64_t))(v373 + 8))(v118, v116);
        v135 = sub_100CA80F4(v134);
        swift_bridgeObjectRelease();
        swift_beginAccess(v125, (char *)v53 + 488, 33, 0);
        sub_1000FEF14(v135, v130);
        v123 = (uint64_t)v53 + 488;
      }
      swift_endAccess(v123);
      v136 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v53;
      v137 = *((int *)v53 + 462);
      v138 = *((unsigned __int8 *)v53 + 1844);
      v310 = (void (*)(uint64_t, uint64_t, NSObject *))*((_QWORD *)v53 + 199);
      v337 = (void (*)(uint64_t, uint64_t, NSObject *))*((_QWORD *)v53 + 198);
      v350 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v53 + 192);
      v139 = *((_QWORD *)v53 + 182);
      v140 = *((_QWORD *)v53 + 181);
      v141 = *((_QWORD *)v53 + 179);
      v142 = *((_QWORD *)v53 + 177);
      v143 = *((_QWORD *)v53 + 159);
      v144 = *((_QWORD *)v53 + 154);
      v145 = *((_QWORD *)v53 + 153);
      v146 = (uint64_t)v136[151];
      v366 = v136[152];
      v374 = v136[147];
      v333 = (uint64_t)v366 + v137;
      v357 = v136[146];
      v147 = (v138 + 16) & ~v138;
      v148 = v141 + v147;
      v149 = v138 | 7;
      v382 = v136;
      v322 = v136[145];
      v150 = sub_100173298();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v144 + 16))(v143, v150, v145);
      v151 = v142;
      v310(v140, v139, v142);
      v152 = swift_allocObject(&unk_10105C2A0, v148, v149);
      logd = v151;
      v337(v152 + v147, v140, v151);
      v338 = swift_allocObject(&unk_10105C2C8, 32, 7);
      *(_QWORD *)(v338 + 16) = sub_1001ADF20;
      *(_QWORD *)(v338 + 24) = v152;
      v153 = v146 + *((int *)v322 + 12);
      v310(v146, (uint64_t)v366, v151);
      sub_10005972C(v333, v153, type metadata accessor for RawSearchResult);
      v154 = *((unsigned __int8 *)v357 + 80);
      v155 = (v154 + 16) & ~v154;
      v156 = swift_allocObject(&unk_10105C2F0, (char *)v374 + v155, v154 | 7);
      sub_100005CF0(v146, v156 + v155, &qword_1010F1938);
      v358 = swift_allocObject(&unk_10105C318, 32, 7);
      *(_QWORD *)(v358 + 16) = sub_1001ADDE0;
      *(_QWORD *)(v358 + 24) = v156;
      v157 = v146 + *((int *)v322 + 12);
      v310(v146, (uint64_t)v366, logd);
      sub_10005972C(v333, v157, type metadata accessor for RawSearchResult);
      v158 = swift_allocObject(&unk_10105C340, (char *)v374 + v155, v154 | 7);
      sub_100005CF0(v146, v158 + v155, &qword_1010F1938);
      v328 = swift_allocObject(&unk_10105C368, 32, 7);
      *(_QWORD *)(v328 + 16) = sub_1001ADDF0;
      *(_QWORD *)(v328 + 24) = v158;
      v159 = v146 + *((int *)v322 + 12);
      v310(v146, (uint64_t)v366, logd);
      sub_10005972C(v333, v159, type metadata accessor for RawSearchResult);
      v160 = (v154 + 24) & ~v154;
      v161 = swift_allocObject(&unk_10105C390, (char *)v374 + v160, v154 | 7);
      *(_QWORD *)(v161 + 16) = v350;
      sub_100005CF0(v146, v161 + v160, &qword_1010F1938);
      v162 = swift_retain();
      loga = Logger.logObject.getter(v162);
      v311 = static os_log_type_t.info.getter(loga);
      v351 = swift_allocObject(&unk_10105C3B8, 17, 7);
      *(_BYTE *)(v351 + 16) = 112;
      v345 = swift_allocObject(&unk_10105C3E0, 17, 7);
      *(_BYTE *)(v345 + 16) = 8;
      v163 = swift_allocObject(&unk_10105C408, 24, 7);
      *(_QWORD *)(v163 + 16) = 1752392040;
      v164 = swift_allocObject(&unk_10105C430, 32, 7);
      *(_QWORD *)(v164 + 16) = sub_1001AE898;
      *(_QWORD *)(v164 + 24) = v163;
      v165 = swift_allocObject(&unk_10105C458, 17, 7);
      *(_BYTE *)(v165 + 16) = 33;
      v166 = v165;
      v167 = swift_allocObject(&unk_10105C480, 17, 7);
      *(_BYTE *)(v167 + 16) = 8;
      v168 = v167;
      v169 = swift_allocObject(&unk_10105C4A8, 32, 7);
      *(_QWORD *)(v169 + 16) = sub_10005CBAC;
      *(_QWORD *)(v169 + 24) = v338;
      v170 = swift_allocObject(&unk_10105C4D0, 32, 7);
      *(_QWORD *)(v170 + 16) = sub_10005CBA4;
      *(_QWORD *)(v170 + 24) = v169;
      v339 = v170;
      v171 = swift_allocObject(&unk_10105C4F8, 17, 7);
      *(_BYTE *)(v171 + 16) = 34;
      v172 = v171;
      v370 = swift_allocObject(&unk_10105C520, 17, 7);
      *(_BYTE *)(v370 + 16) = 8;
      v173 = swift_allocObject(&unk_10105C548, 32, 7);
      *(_QWORD *)(v173 + 16) = sub_1001AE7E0;
      *(_QWORD *)(v173 + 24) = v358;
      v367 = swift_allocObject(&unk_10105C570, 32, 7);
      *(_QWORD *)(v367 + 16) = sub_10005CBA4;
      *(_QWORD *)(v367 + 24) = v173;
      v359 = swift_allocObject(&unk_10105C598, 17, 7);
      *(_BYTE *)(v359 + 16) = 34;
      v334 = swift_allocObject(&unk_10105C5C0, 17, 7);
      *(_BYTE *)(v334 + 16) = 8;
      v174 = swift_allocObject(&unk_10105C5E8, 32, 7);
      *(_QWORD *)(v174 + 16) = sub_1001AE7E4;
      *(_QWORD *)(v174 + 24) = v328;
      v175 = swift_allocObject(&unk_10105C610, 32, 7);
      *(_QWORD *)(v175 + 16) = sub_10005CBA4;
      *(_QWORD *)(v175 + 24) = v174;
      v176 = v175;
      v329 = swift_allocObject(&unk_10105C638, 17, 7);
      *(_BYTE *)(v329 + 16) = 0;
      v323 = swift_allocObject(&unk_10105C660, 17, 7);
      *(_BYTE *)(v323 + 16) = 8;
      v177 = swift_allocObject(&unk_10105C688, 32, 7);
      *(_QWORD *)(v177 + 16) = sub_1001ADE00;
      *(_QWORD *)(v177 + 24) = v161;
      v178 = swift_allocObject(&unk_10105C6B0, 32, 7);
      *(_QWORD *)(v178 + 16) = sub_10005CD4C;
      *(_QWORD *)(v178 + 24) = v177;
      v179 = sub_10001A9A8(&qword_1010EC538);
      v180 = swift_allocObject(v179, 272, 7);
      sub_100882D28(v180, 15);
      *v181 = sub_10005CBC4;
      v181[1] = v351;
      v181[2] = sub_10005CBC4;
      v181[3] = v345;
      v181[4] = sub_10005CBB8;
      v181[5] = v164;
      v181[6] = sub_10005CBC4;
      v181[7] = v166;
      v181[8] = sub_10005CBC4;
      v181[9] = v168;
      v181[10] = sub_10005CBB4;
      v181[11] = v170;
      v181[12] = sub_10005CBC4;
      v181[13] = v172;
      v181[14] = sub_10005CBC4;
      v181[15] = v370;
      v181[16] = sub_10005CBB4;
      v181[17] = v367;
      v181[18] = sub_10005CBC4;
      v181[19] = v359;
      v181[20] = sub_10005CBC4;
      v181[21] = v334;
      v181[22] = sub_10005CBB4;
      v181[23] = v176;
      v181[24] = sub_10005CBC4;
      v181[25] = v329;
      v181[26] = sub_10005CBC4;
      v181[27] = v323;
      v181[28] = sub_10005CBB8;
      v181[29] = v178;
      swift_retain();
      swift_retain();
      *(_QWORD *)typea = v164;
      swift_retain();
      v301 = v166;
      swift_retain();
      v298 = v168;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(loga, v311))
      {
        v293 = v178;
        v182 = v382 + 81;
        v183 = (uint64_t)(v382 + 98);
        v184 = (uint8_t *)sub_1006948A0(52);
        v185 = swift_slowAlloc(96, -1);
        v382[97] = 0;
        v382[98] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v185;
        *(_WORD *)v184 = 1283;
        v382[96] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v184 + 2);
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v351;
        v186 = (uint64_t)(v382 + 96);
        v187 = (uint64_t)(v382 + 97);
        v52 = v376;
        sub_1006948A8(v382 + 81, (uint64_t)(v382 + 96), (uint64_t)(v382 + 97), (uint64_t)(v382 + 98));
        if (v376)
          return swift_errorRelease(v52);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v345;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = sub_10005CBB8;
        v382[82] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))typea;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v301;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v298;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v339;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v172;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v370;
        sub_1006948A8(v182, v186, v187, v183);
        v378 = v185;
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v367;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v359;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v334;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v176;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v329;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v323;
        sub_1006948A8(v182, v186, v187, v183);
        swift_release();
        v382[81] = sub_10005CBB8;
        v382[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v293;
        sub_1006948A8(v182, v186, v187, v183);
        v260 = (unint64_t)v382[213];
        v261 = (uint64_t)v382[212];
        v262 = v382[159];
        v263 = v382[154];
        v264 = v382[153];
        v265 = (uint64_t)v382[152];
        v370 = (uint64_t)v382[142];
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, loga, v311, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v184, 0x34u);
        swift_arrayDestroy(v378, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v378, -1, -1);
        sub_100694894((uint64_t)v184);

        swift_release();
        sub_10001BC14(v261, v260);
        (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v263
         + 1))(v262, v264);
        sub_100004048(v370, &qword_1011091A0);
        sub_100004048(v265, &qword_1010F1938);
        v376 = 0;
      }
      else
      {
        v286 = (uint64_t)v382[212];
        v288 = v382[154];
        v290 = (unint64_t)v382[213];
        v294 = v382[153];
        v188 = (uint64_t)v382[152];
        v307 = v382[159];
        v312 = (uint64_t)v382[142];

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        sub_10001BC14(v286, v290);
        (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v288
         + 1))(v307, v294);
        sub_100004048(v312, &qword_1011091A0);
        sub_100004048(v188, &qword_1010F1938);
      }
      v189 = (uint64_t)v382[211] + 1;
      if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v189 != v382[210])
      {
        v382[211] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v189;
        v226 = v382[202];
        v227 = (uint64_t)v382[209] + 24 * v189;
        v382[212] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v227 + 32);
        v382[213] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v227 + 40);
        v228 = *(_DWORD *)(v227 + 48);
        *((_BYTE *)v382 + 1716) = *(_BYTE *)(v227 + 52);
        *((_DWORD *)v382 + 428) = v228;
        __asm { BR              X10 }
      }
      v0 = v382[208];
      v190 = (unint64_t)v382[202];
      v191 = (uint64_t)v382[201];
      v192 = (uint64_t)v382[190];
      v193 = v382[183];
      v194 = v382[182];
      v195 = v382[178];
      v196 = v382[177];
      sub_10001BC14((uint64_t)v382[195], (unint64_t)v382[196]);

      sub_10001EF3C(v191, v190);
      swift_bridgeObjectRelease();
      v197 = (void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))*((_QWORD *)v195 + 1);
      v197(v193, v196);
      sub_1000126B0(v192, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v197(v194, v196);
      v198 = (unint64_t)v382[194] + 1;
      if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v198 == v382[193])
        break;
      while (1)
      {
        v382[194] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v198;
        v230 = v382[111];
        if (!v230)
          v230 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
        if (v198 >= *((_QWORD *)v230 + 2))
          break;
        v231 = (uint64_t)v382[190];
        v0 = v382[184];
        v232 = v382[178];
        v233 = v382[177];
        v234 = (uint64_t)v382[176];
        sub_10005972C((uint64_t)v230+ ((*((unsigned __int8 *)v382 + 1840) + 32) & ~(unint64_t)*((unsigned __int8 *)v382 + 1840))+ *((_QWORD *)v382[185] + 9) * v198, v231, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        v235 = *(_QWORD *)(v231 + 16);
        v382[195] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v235;
        v236 = *(_QWORD *)(v231 + 24);
        v382[196] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v236;
        sub_10000F9B8(v231 + *((int *)v0 + 7), v234, &qword_1010ED860);
        v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v232 + 6);
        v382[197] = v237;
        if (v237(v234, 1, (uint64_t)v233) != 1)
        {
          v252 = v382[183];
          v253 = v382[178];
          v254 = v382[177];
          v255 = v382[176];
          v256 = v382[175];
          v257 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v253 + 4);
          v382[198] = v257;
          v257((uint64_t)v252, (uint64_t)v255, (uint64_t)v254);
          v258 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v253 + 2);
          v382[199] = v258;
          v258((uint64_t)v256, (uint64_t)v252, (uint64_t)v254);
          (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), _QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v253
           + 7))(v256, 0, 1, v254);
          sub_10001BBBC(v235, v236);
          v259 = (uint64_t (***)(uint64_t, uint64_t, uint64_t))swift_task_alloc(dword_1010F1944);
          v382[200] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v259;
          *v259 = v382;
          v259[1] = (uint64_t (**)(uint64_t, uint64_t, uint64_t))sub_10018C4F8;
          return sub_1001AB0F8(v235, v236, (uint64_t)v382[175]);
        }
        v238 = (uint64_t)v382[176];
        sub_10001BBBC(v235, v236);
        sub_100004048(v238, &qword_1010ED860);
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v239 = sub_10001A9E8((uint64_t)v382[153], (uint64_t)qword_1011B69B0);
        v240 = Logger.logObject.getter(v239);
        v241 = static os_log_type_t.error.getter(v240);
        if (os_log_type_enabled(v240, v241))
        {
          v242 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v242 = 0;
          _os_log_impl((void *)&_mh_execute_header, v240, v241, "Missing share id in payload.", v242, 2u);
          swift_slowDealloc(v242, -1, -1);
        }
        v229 = (uint64_t)v382[190];
        sub_10001BC14(v235, v236);

        sub_1000126B0(v229, type metadata accessor for KeyDropFetchResponse.LocationPayload);
        v198 = (unint64_t)v382[194] + 1;
        if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v198 == v382[193])
          goto LABEL_29;
      }
      __break(1u);
LABEL_58:
      swift_once(&qword_1010E99C0, sub_100173218);
    }
LABEL_29:
    v199 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v200 = v382[110];
    if (v200)
      v199 = v382[110];
    v201 = v376;
    v313 = *((_QWORD *)v199 + 2);
    if (v313)
    {
      v202 = v382[154];
      v360 = v382[129];
      v299 = v382[126];
      v203 = *((_QWORD *)v382[112] + 2);
      v324 = (_QWORD *)((char *)v199 + 32);
      swift_bridgeObjectRetain(v200);
      v204 = 0;
      v330 = v202;
      v291 = v203;
      v295 = v199;
      do
      {
        if ((unint64_t)v204 >= *((_QWORD *)v199 + 2))
        {
          __break(1u);
          JUMPOUT(0x1001A0F00);
        }
        logb = v204;
        v205 = &v324[3 * (_QWORD)v204];
        v207 = *v205;
        v206 = v205[1];
        v208 = v205[2];
        v368 = v206;
        if (v203)
        {
          v209 = v382[112];
          sub_10001BBBC(v207, v206);
          v210 = (uint64_t)v209
               + ((*((unsigned __int8 *)v299 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v299 + 80));
          swift_bridgeObjectRetain(v208);
          swift_bridgeObjectRetain(v209);
          sub_10005972C(v210, (uint64_t)v382[129], type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
          __asm { BR              X10 }
        }
        sub_10001BBBC(v207, v206);
        swift_bridgeObjectRetain(v208);
        v379 = v201;
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v211 = v382[155];
        v212 = (uint64_t)v382[153];
        v213 = sub_10001A9E8(v212, (uint64_t)qword_1011B69B0);
        (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v202 + 2))(v211, v213, v212);
        sub_10001BBBC(v207, v206);
        swift_bridgeObjectRetain(v208);
        sub_10001BBBC(v207, v206);
        swift_bridgeObjectRetain(v208);
        v215 = Logger.logObject.getter(v214);
        v216 = static os_log_type_t.error.getter(v215);
        v217 = os_log_type_enabled(v215, v216);
        v218 = v382[155];
        v219 = v382[153];
        if (v217)
        {
          v220 = swift_slowAlloc(22, -1);
          v221 = swift_slowAlloc(32, -1);
          v383[0] = v221;
          *(_DWORD *)v220 = 141558275;
          *(_QWORD *)(v220 + 4) = 1752392040;
          *(_WORD *)(v220 + 12) = 2081;
          v382[77] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v207;
          v382[78] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v368;
          v222 = sub_100153D50();
          v223 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v222);
          *(_QWORD *)(v220 + 14) = sub_100016940(v223, v224, v383);
          swift_bridgeObjectRelease();
          sub_10001BC14(v207, v368);
          swift_bridgeObjectRelease();
          sub_10001BC14(v207, v368);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v215, v216, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v220, 0x16u);
          swift_arrayDestroy(v221, 1, (char *)&type metadata for Any + 8);
          v225 = v221;
          v202 = v330;
          swift_slowDealloc(v225, -1, -1);
          swift_slowDealloc(v220, -1, -1);

          sub_10001BC14(v207, v368);
          swift_bridgeObjectRelease();
          (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v330
           + 1))(v218, v219);
        }
        else
        {
          sub_10001BC14(v207, v368);
          swift_bridgeObjectRelease();
          sub_10001BC14(v207, v368);
          swift_bridgeObjectRelease();
          sub_10001BC14(v207, v368);
          swift_bridgeObjectRelease();

          (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v202
           + 1))(v218, v219);
        }
        v201 = v379;
        v199 = v295;
        v204 = ((char *)&logb->isa + 1);
        v203 = v291;
      }
      while (((char *)&logb->isa + 1) != v313);
    }
    else
    {
      swift_bridgeObjectRetain(v200);
    }
    swift_bridgeObjectRelease();
    v243 = v382[192];
    v244 = v382[190];
    v245 = v382[189];
    v246 = v382[188];
    v247 = v382[187];
    v248 = v382[186];
    v249 = v382[183];
    v250 = v382[182];
    v251 = v382[181];
    v267 = v382[180];
    v268 = v382[176];
    v269 = v382[175];
    v270 = v382[174];
    v271 = v382[173];
    v272 = v382[172];
    v273 = v382[169];
    v274 = v382[167];
    v275 = v382[164];
    v276 = v382[162];
    v277 = v382[161];
    v278 = v382[160];
    v279 = v382[159];
    v280 = v382[158];
    v281 = v382[157];
    v282 = v382[156];
    v283 = v382[155];
    v284 = v382[152];
    v285 = v382[151];
    v287 = v382[150];
    v289 = v382[149];
    v292 = v382[148];
    v296 = v382[144];
    v297 = v382[143];
    v300 = v382[142];
    v302 = v382[141];
    *(_QWORD *)typeb = v382[140];
    v308 = v382[139];
    v314 = v382[138];
    loge = (os_log_t)v382[137];
    v325 = v382[133];
    v331 = v382[131];
    v335 = v382[130];
    v340 = v382[129];
    v346 = v382[128];
    v352 = v382[124];
    v361 = v382[121];
    v369 = v382[119];
    v375 = v382[117];
    v380 = v382[114];
    swift_beginAccess((char *)v243 + 16, v382 + 55, 0, 0);
    v266 = *((_QWORD *)v243 + 2);
    swift_bridgeObjectRetain(v266);
    swift_release();
    swift_task_dealloc(v244);
    swift_task_dealloc(v245);
    swift_task_dealloc(v246);
    swift_task_dealloc(v247);
    swift_task_dealloc(v248);
    swift_task_dealloc(v249);
    swift_task_dealloc(v250);
    swift_task_dealloc(v251);
    swift_task_dealloc(v267);
    swift_task_dealloc(v268);
    swift_task_dealloc(v269);
    swift_task_dealloc(v270);
    swift_task_dealloc(v271);
    swift_task_dealloc(v272);
    swift_task_dealloc(v273);
    swift_task_dealloc(v274);
    swift_task_dealloc(v275);
    swift_task_dealloc(v276);
    swift_task_dealloc(v277);
    swift_task_dealloc(v278);
    swift_task_dealloc(v279);
    swift_task_dealloc(v280);
    swift_task_dealloc(v281);
    swift_task_dealloc(v282);
    swift_task_dealloc(v283);
    swift_task_dealloc(v284);
    swift_task_dealloc(v285);
    swift_task_dealloc(v287);
    swift_task_dealloc(v289);
    swift_task_dealloc(v292);
    swift_task_dealloc(v296);
    swift_task_dealloc(v297);
    swift_task_dealloc(v300);
    swift_task_dealloc(v302);
    swift_task_dealloc(*(_QWORD *)typeb);
    swift_task_dealloc(v308);
    swift_task_dealloc(v314);
    swift_task_dealloc(loge);
    swift_task_dealloc(v325);
    swift_task_dealloc(v331);
    swift_task_dealloc(v335);
    swift_task_dealloc(v340);
    swift_task_dealloc(v346);
    swift_task_dealloc(v352);
    swift_task_dealloc(v361);
    swift_task_dealloc(v369);
    swift_task_dealloc(v375);
    swift_task_dealloc(v380);
    return ((uint64_t (*)(uint64_t))v382[1])(v266);
  }
  else
  {
    v57 = *((_QWORD *)v0 + 138);
    swift_bridgeObjectRelease();
    sub_1000126EC(v10, v57, type metadata accessor for BeaconKeyManager.IndexInformation);
    if (qword_1010E99C0 != -1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v58 = *((_QWORD *)v0 + 161);
    v59 = *((_QWORD *)v0 + 154);
    v60 = *((_QWORD *)v0 + 153);
    v61 = *((_QWORD *)v0 + 138);
    v62 = *((_QWORD *)v0 + 137);
    v63 = *((_QWORD *)v0 + 136);
    v64 = *((_QWORD *)v0 + 135);
    v65 = sub_10001A9E8(v60, (uint64_t)qword_1011B69B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v58, v65, v60);
    sub_10005972C(v61, v62, type metadata accessor for BeaconKeyManager.IndexInformation);
    v66 = *(unsigned __int8 *)(v64 + 80);
    v67 = (v66 + 16) & ~v66;
    v68 = v67 + v63;
    v69 = v66 | 7;
    v70 = swift_allocObject(&unk_10105C6D8, v68, v66 | 7);
    sub_1000126EC(v62, v70 + v67, type metadata accessor for BeaconKeyManager.IndexInformation);
    v71 = swift_allocObject(&unk_10105C700, 32, 7);
    *(_QWORD *)(v71 + 16) = sub_1001AE4C4;
    *(_QWORD *)(v71 + 24) = v70;
    sub_10005972C(v61, v62, type metadata accessor for BeaconKeyManager.IndexInformation);
    v72 = swift_allocObject(&unk_10105C728, v68, v69);
    v73 = sub_1000126EC(v62, v72 + v67, type metadata accessor for BeaconKeyManager.IndexInformation);
    v372 = Logger.logObject.getter(v73);
    v348 = static os_log_type_t.info.getter(v372);
    v74 = swift_allocObject(&unk_10105C750, 17, 7);
    *(_BYTE *)(v74 + 16) = 112;
    v355 = swift_allocObject(&unk_10105C778, 17, 7);
    *(_BYTE *)(v355 + 16) = 8;
    v75 = swift_allocObject(&unk_10105C7A0, 24, 7);
    *(_QWORD *)(v75 + 16) = 1752392040;
    v76 = swift_allocObject(&unk_10105C7C8, 32, 7);
    *(_QWORD *)(v76 + 16) = sub_1001AE898;
    *(_QWORD *)(v76 + 24) = v75;
    v77 = swift_allocObject(&unk_10105C7F0, 17, 7);
    *(_BYTE *)(v77 + 16) = 33;
    v78 = swift_allocObject(&unk_10105C818, 17, 7);
    *(_BYTE *)(v78 + 16) = 8;
    v79 = swift_allocObject(&unk_10105C840, 32, 7);
    *(_QWORD *)(v79 + 16) = sub_10005CBAC;
    *(_QWORD *)(v79 + 24) = v71;
    v80 = swift_allocObject(&unk_10105C868, 32, 7);
    *(_QWORD *)(v80 + 16) = sub_10005CBA4;
    *(_QWORD *)(v80 + 24) = v79;
    v81 = swift_allocObject(&unk_10105C890, 17, 7);
    *(_BYTE *)(v81 + 16) = 34;
    v82 = swift_allocObject(&unk_10105C8B8, 17, 7);
    *(_BYTE *)(v82 + 16) = 8;
    v83 = swift_allocObject(&unk_10105C8E0, 32, 7);
    *(_QWORD *)(v83 + 16) = sub_1001AE5A4;
    *(_QWORD *)(v83 + 24) = v72;
    v84 = swift_allocObject(&unk_10105C908, 32, 7);
    *(_QWORD *)(v84 + 16) = sub_10005CBA4;
    *(_QWORD *)(v84 + 24) = v83;
    v85 = sub_10001A9A8(&qword_1010EC538);
    v86 = swift_allocObject(v85, 176, 7);
    sub_100882D28(v86, 9);
    *v87 = sub_10005CBC4;
    v87[1] = v74;
    v87[2] = sub_10005CBC4;
    v87[3] = v355;
    v87[4] = sub_10005CBB8;
    v87[5] = v76;
    v87[6] = sub_10005CBC4;
    v87[7] = v77;
    v87[8] = sub_10005CBC4;
    v87[9] = v78;
    v87[10] = sub_10005CBB4;
    v87[11] = v80;
    v87[12] = sub_10005CBC4;
    v87[13] = v81;
    v87[14] = sub_10005CBC4;
    v87[15] = v82;
    v87[16] = sub_10005CBB4;
    v87[17] = v84;
    v364 = v74;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v372, v348))
    {
      v342 = v76;
      v88 = (uint8_t *)swift_slowAlloc(32, -1);
      v89 = swift_slowAlloc(64, -1);
      *((_QWORD *)v0 + 107) = 0;
      *((_QWORD *)v0 + 108) = v89;
      *(_WORD *)v88 = 771;
      *((_QWORD *)v0 + 106) = v88 + 2;
      *((_QWORD *)v0 + 73) = sub_10005CBC4;
      *((_QWORD *)v0 + 74) = v364;
      v52 = v376;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      if (v376)
        return swift_errorRelease(v52);
      v377 = v88;
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBC4;
      *((_QWORD *)v0 + 74) = v355;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBB8;
      *((_QWORD *)v0 + 74) = v342;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBC4;
      *((_QWORD *)v0 + 74) = v77;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBC4;
      *((_QWORD *)v0 + 74) = v78;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      v90 = v0;
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBB4;
      *((_QWORD *)v0 + 74) = v80;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBC4;
      *((_QWORD *)v0 + 74) = v81;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBC4;
      *((_QWORD *)v0 + 74) = v82;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      swift_release();
      *((_QWORD *)v0 + 73) = sub_10005CBB4;
      *((_QWORD *)v0 + 74) = v84;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v0 + 73, (uint64_t)v0 + 848, (uint64_t)v0 + 856, (uint64_t)v0 + 864);
      v91 = *((_QWORD *)v0 + 161);
      v92 = *((_QWORD *)v0 + 154);
      v93 = *((_QWORD *)v90 + 153);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v372, v348, "Reconciled beacon: %{private,mask.hash}s, index: %{public}s.", v377, 0x20u);
      swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      sub_100694894((uint64_t)v377);

      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v93);
      v376 = 0;
      v0 = v90;
    }
    else
    {
      v95 = *((_QWORD *)v0 + 154);
      v343 = *((_QWORD *)v0 + 153);
      v349 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v0 + 161);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      (*(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v95 + 8))(v349, v343);
    }
    v96 = *((_QWORD *)v0 + 138);
    v97 = *(int *)(*((_QWORD *)v0 + 134) + 20);
    *((_DWORD *)v0 + 463) = v97;
    v99 = *(_QWORD *)(v96 + v97 + 24);
    v98 = *(_QWORD *)(v96 + v97 + 32);
    sub_10001AA44((_QWORD *)(v96 + v97), v99);
    v100 = sub_100ABA6B0(v99, v98);
    v53 = v0;
    if ((sub_100510B14(v100, 1u) & 1) == 0)
    {
      if (*((_BYTE *)v0 + 1712) != 3)
      {
        v103 = (_QWORD *)(*((_QWORD *)v0 + 138) + *((int *)v0 + 463));
        v105 = v103[3];
        v104 = v103[4];
        sub_10001AA44(v103, v105);
        if (!sub_100ABA6B0(v105, v104))
        {
          v106 = (_QWORD *)(*((_QWORD *)v0 + 138) + *((int *)v0 + 463));
          v107 = v106[3];
          v108 = v106[4];
          sub_10001AA44(v106, v107);
          dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)v53 + 105, v107, *(_QWORD *)(v108 + 56));
        }
      }
      sub_1000126B0(*((_QWORD *)v53 + 138), type metadata accessor for BeaconKeyManager.IndexInformation);
      goto LABEL_19;
    }
    v101 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))swift_task_alloc(dword_1011110EC);
    *((_QWORD *)v0 + 223) = v101;
    *v101 = v0;
    v101[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001A1170;
    return sub_100A802E8();
  }
}

uint64_t sub_1001A1170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1784);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 904);
  *(_QWORD *)(*(_QWORD *)v1 + 1792) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001A11FC, v3, 0);
}

uint64_t sub_1001A11FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uid_t v12;
  _QWORD *v13;

  v1 = *(int *)(v0 + 1852);
  v2 = *(_QWORD *)(v0 + 1616);
  v3 = *(_QWORD *)(v0 + 1608);
  v4 = *(_QWORD *)(v0 + 1104);
  *(_QWORD *)(v0 + 1800) = *(_QWORD *)(*(_QWORD *)(v0 + 1792) + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  PrivateKey.publicKey.getter(v3, v2);
  v6 = v5;
  v8 = v7;
  v9 = PublicKey.advertisement.getter(v5, v7);
  v11 = v10;
  *(_QWORD *)(v0 + 1808) = v9;
  *(_QWORD *)(v0 + 1816) = v10;
  sub_10001BC14(v6, v8);
  v12 = getuid();
  sub_100A06500(v12);
  v13 = (_QWORD *)swift_task_alloc(dword_1010FCE7C);
  *(_QWORD *)(v0 + 1824) = v13;
  *v13 = v0;
  v13[1] = sub_1001A1320;
  return sub_1004731C8(*(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1104), v4 + v1, v9, v11);
}

uint64_t sub_1001A1320()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1824);
  *(_QWORD *)(*(_QWORD *)v1 + 1832) = v0;
  swift_task_dealloc(v3);
  v4 = v2[227];
  v5 = v2[226];
  v6 = v2[180];
  v7 = v2[178];
  v8 = v2[177];
  v9 = v2[113];
  if (v0)
  {
    sub_10001BC14(v5, v4);
    swift_release();
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v10 = sub_1001A6628;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_10001BC14(v5, v4);
    swift_release();
    v10 = sub_1001A1454;
  }
  return swift_task_switch(v10, v9, 0);
}

uint64_t sub_1001A1454()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t (**v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  void (*v89)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t));
  uint64_t (**v90)(uint64_t, uint64_t, uint64_t);
  unint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t);
  os_log_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t);
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint64_t (**v140)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v149)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v150)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v153)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v155)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t (***v158)(uint64_t, uint64_t, uint64_t);
  unint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t (*v164)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v167)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v169)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v171)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v172)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v174)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v176)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v177)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v179)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v180)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  unint64_t v187;
  uint64_t (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v189)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v190)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t v195;
  uint64_t (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t (*v200)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t (*v204)(uint64_t, uint64_t, uint64_t);
  os_log_t oslogb;
  NSObject *oslog;
  os_log_t osloga;
  os_log_t oslogc;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v217)(uint64_t, uint64_t, uint64_t);
  uint64_t v218;
  uint64_t (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t (*v224)(uint64_t, uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t (*v229)(uint64_t, uint64_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t (*v232)(uint64_t, uint64_t, uint64_t);
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t, uint64_t);
  uint64_t v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v238)(uint64_t, uint64_t, uint64_t);
  uint64_t v239;
  uint64_t (*v240)(uint64_t, uint64_t, uint64_t);
  uint64_t v241;
  uint64_t (*v242)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v243)(uint64_t, uint64_t, uint64_t);
  uint64_t v244;
  uint64_t (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t (*v247)(uint64_t, uint64_t, uint64_t);
  uint64_t v248;
  uint64_t v249;
  uint64_t (*v250)(uint64_t, uint64_t, uint64_t);
  uint64_t v251;
  uint64_t (**v252)(uint64_t, uint64_t, uint64_t);
  uint64_t v253[4];

  v249 = *(_QWORD *)(v0 + 1832);
  if (*(_BYTE *)(v0 + 1712) != 3)
  {
    v1 = (_QWORD *)(*(_QWORD *)(v0 + 1104) + *(int *)(v0 + 1852));
    v3 = v1[3];
    v2 = v1[4];
    sub_10001AA44(v1, v3);
    if (!sub_100ABA6B0(v3, v2))
    {
      v4 = (_QWORD *)(*(_QWORD *)(v0 + 1104) + *(int *)(v0 + 1852));
      v6 = v4[3];
      v5 = v4[4];
      sub_10001AA44(v4, v6);
      dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 840), v6, *(_QWORD *)(v5 + 56));
    }
  }
  sub_1000126B0(*(_QWORD *)(v0 + 1104), type metadata accessor for BeaconKeyManager.IndexInformation);
  v7 = *(_QWORD *)(v0 + 1536);
  v8 = *(_QWORD *)(v0 + 1456);
  swift_beginAccess(v7 + 16, v0 + 416, 32, 0);
  sub_100BBE398(v8, *(_QWORD *)(v7 + 16));
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1592);
  v11 = *(_QWORD *)(v0 + 1536);
  v239 = *(_QWORD *)(v0 + 1448);
  v244 = *(_QWORD *)(v0 + 1424);
  v12 = *(_QWORD *)(v0 + 1416);
  v13 = *(_QWORD *)(v0 + 1216);
  v14 = *(_QWORD *)(v0 + 1208);
  v15 = *(_QWORD *)(v0 + 1160);
  v228 = *(_QWORD *)(v0 + 1456);
  v233 = v13 + *(int *)(v0 + 1848);
  if (v9)
  {
    v16 = *(_QWORD *)(v0 + 1064);
    v17 = v11 + 16;
    *(_QWORD *)(v0 + 744) = v9;
    swift_endAccess(v0 + 416);
    v18 = v14 + *(int *)(v15 + 48);
    v10(v14, v13, v12);
    sub_10005972C(v233, v18, type metadata accessor for RawSearchResult);
    sub_100A0C1EC(v16, v18);
    sub_1000126B0(v16, type metadata accessor for RawSearchResult);
    (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v14, v12);
    v10(v239, v228, v12);
    v19 = *(_QWORD *)(v0 + 744);
    v20 = v0 + 512;
    swift_beginAccess(v17, v0 + 512, 33, 0);
    v21 = v19;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 1056);
    v23 = v11 + 16;
    swift_endAccess(v0 + 416);
    v10(v239, v228, v12);
    v24 = sub_10001A9A8(&qword_1010ED220);
    v25 = swift_allocObject(v24, ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72), *(unsigned __int8 *)(v22 + 80) | 7);
    v26 = sub_10084F498(v25, 1);
    v28 = v27;
    v29 = v14 + *(int *)(v15 + 48);
    v10(v14, v13, v12);
    sub_10005972C(v233, v29, type metadata accessor for RawSearchResult);
    sub_1000126EC(v29, v28, type metadata accessor for RawSearchResult);
    v30 = SharingCircleWildAdvertisementKey.init(key:)(v26);
    (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v14, v12);
    v31 = sub_100CA80F4(v30);
    swift_bridgeObjectRelease();
    v20 = v0 + 488;
    swift_beginAccess(v23, v0 + 488, 33, 0);
    v21 = v31;
  }
  sub_1000FEF14(v21, v239);
  swift_endAccess(v20);
  v32 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v0;
  v33 = *(int *)(v0 + 1848);
  v34 = *(unsigned __int8 *)(v0 + 1844);
  oslogb = *(os_log_t *)(v0 + 1592);
  v234 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1584);
  v225 = *(_QWORD *)(v0 + 1536);
  v35 = *(_QWORD *)(v0 + 1456);
  v36 = *(_QWORD *)(v0 + 1448);
  v37 = *(_QWORD *)(v0 + 1432);
  v38 = *(_QWORD *)(v0 + 1416);
  v39 = v32[159];
  v40 = v32[154];
  v41 = v32[153];
  v42 = (uint64_t)v32[151];
  v240 = v32[152];
  v245 = v32[147];
  v220 = (uint64_t)v240 + v33;
  v229 = v32[146];
  v43 = (v34 + 16) & ~v34;
  v44 = v37 + v43;
  v45 = v34 | 7;
  v252 = v32;
  v217 = v32[145];
  v46 = sub_100173298();
  (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v40
   + 2))(v39, v46, v41);
  ((void (*)(uint64_t, uint64_t, uint64_t))oslogb)(v36, v35, v38);
  v47 = swift_allocObject(&unk_10105C2A0, v44, v45);
  v209 = v38;
  v234(v47 + v43, v36, v38);
  v235 = swift_allocObject(&unk_10105C2C8, 32, 7);
  *(_QWORD *)(v235 + 16) = sub_1001ADF20;
  *(_QWORD *)(v235 + 24) = v47;
  v48 = v42 + *((int *)v217 + 12);
  ((void (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))oslogb)(v42, v240, v38);
  sub_10005972C(v220, v48, type metadata accessor for RawSearchResult);
  v49 = *((unsigned __int8 *)v229 + 80);
  v50 = (v49 + 16) & ~v49;
  v51 = swift_allocObject(&unk_10105C2F0, (char *)v245 + v50, v49 | 7);
  sub_100005CF0(v42, v51 + v50, &qword_1010F1938);
  v230 = swift_allocObject(&unk_10105C318, 32, 7);
  *(_QWORD *)(v230 + 16) = sub_1001ADDE0;
  *(_QWORD *)(v230 + 24) = v51;
  v52 = v42 + *((int *)v217 + 12);
  ((void (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))oslogb)(v42, v240, v209);
  sub_10005972C(v220, v52, type metadata accessor for RawSearchResult);
  v53 = swift_allocObject(&unk_10105C340, (char *)v245 + v50, v49 | 7);
  sub_100005CF0(v42, v53 + v50, &qword_1010F1938);
  v213 = swift_allocObject(&unk_10105C368, 32, 7);
  *(_QWORD *)(v213 + 16) = sub_1001ADDF0;
  *(_QWORD *)(v213 + 24) = v53;
  v54 = v42 + *((int *)v217 + 12);
  ((void (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))oslogb)(v42, v240, v209);
  sub_10005972C(v220, v54, type metadata accessor for RawSearchResult);
  v55 = (v49 + 24) & ~v49;
  v56 = swift_allocObject(&unk_10105C390, (char *)v245 + v55, v49 | 7);
  *(_QWORD *)(v56 + 16) = v225;
  sub_100005CF0(v42, v56 + v55, &qword_1010F1938);
  v57 = swift_retain();
  oslog = Logger.logObject.getter(v57);
  v201 = static os_log_type_t.info.getter(oslog);
  v226 = swift_allocObject(&unk_10105C3B8, 17, 7);
  *(_BYTE *)(v226 + 16) = 112;
  v58 = swift_allocObject(&unk_10105C3E0, 17, 7);
  *(_BYTE *)(v58 + 16) = 8;
  v59 = swift_allocObject(&unk_10105C408, 24, 7);
  *(_QWORD *)(v59 + 16) = 1752392040;
  v60 = swift_allocObject(&unk_10105C430, 32, 7);
  *(_QWORD *)(v60 + 16) = sub_1001AE898;
  *(_QWORD *)(v60 + 24) = v59;
  v223 = swift_allocObject(&unk_10105C458, 17, 7);
  *(_BYTE *)(v223 + 16) = 33;
  v221 = swift_allocObject(&unk_10105C480, 17, 7);
  *(_BYTE *)(v221 + 16) = 8;
  v61 = swift_allocObject(&unk_10105C4A8, 32, 7);
  *(_QWORD *)(v61 + 16) = sub_10005CBAC;
  *(_QWORD *)(v61 + 24) = v235;
  v62 = swift_allocObject(&unk_10105C4D0, 32, 7);
  *(_QWORD *)(v62 + 16) = sub_10005CBA4;
  *(_QWORD *)(v62 + 24) = v61;
  v218 = swift_allocObject(&unk_10105C4F8, 17, 7);
  *(_BYTE *)(v218 + 16) = 34;
  v246 = swift_allocObject(&unk_10105C520, 17, 7);
  *(_BYTE *)(v246 + 16) = 8;
  v63 = swift_allocObject(&unk_10105C548, 32, 7);
  *(_QWORD *)(v63 + 16) = sub_1001AE7E0;
  *(_QWORD *)(v63 + 24) = v230;
  v241 = swift_allocObject(&unk_10105C570, 32, 7);
  *(_QWORD *)(v241 + 16) = sub_10005CBA4;
  *(_QWORD *)(v241 + 24) = v63;
  v236 = swift_allocObject(&unk_10105C598, 17, 7);
  *(_BYTE *)(v236 + 16) = 34;
  v231 = swift_allocObject(&unk_10105C5C0, 17, 7);
  *(_BYTE *)(v231 + 16) = 8;
  v64 = swift_allocObject(&unk_10105C5E8, 32, 7);
  *(_QWORD *)(v64 + 16) = sub_1001AE7E4;
  *(_QWORD *)(v64 + 24) = v213;
  v65 = swift_allocObject(&unk_10105C610, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_10005CBA4;
  *(_QWORD *)(v65 + 24) = v64;
  v214 = swift_allocObject(&unk_10105C638, 17, 7);
  *(_BYTE *)(v214 + 16) = 0;
  v210 = swift_allocObject(&unk_10105C660, 17, 7);
  *(_BYTE *)(v210 + 16) = 8;
  v66 = swift_allocObject(&unk_10105C688, 32, 7);
  *(_QWORD *)(v66 + 16) = sub_1001ADE00;
  *(_QWORD *)(v66 + 24) = v56;
  v67 = swift_allocObject(&unk_10105C6B0, 32, 7);
  *(_QWORD *)(v67 + 16) = sub_10005CD4C;
  *(_QWORD *)(v67 + 24) = v66;
  v68 = sub_10001A9A8(&qword_1010EC538);
  v69 = swift_allocObject(v68, 272, 7);
  sub_100882D28(v69, 15);
  *v70 = sub_10005CBC4;
  v70[1] = v226;
  v70[2] = sub_10005CBC4;
  v70[3] = v58;
  v70[4] = sub_10005CBB8;
  v70[5] = v60;
  v70[6] = sub_10005CBC4;
  v70[7] = v223;
  v70[8] = sub_10005CBC4;
  v70[9] = v221;
  v70[10] = sub_10005CBB4;
  v70[11] = v62;
  v70[12] = sub_10005CBC4;
  v70[13] = v218;
  v70[14] = sub_10005CBC4;
  v70[15] = v246;
  v70[16] = sub_10005CBB4;
  v70[17] = v241;
  v70[18] = sub_10005CBC4;
  v70[19] = v236;
  v70[20] = sub_10005CBC4;
  v70[21] = v231;
  v70[22] = sub_10005CBB4;
  v70[23] = v65;
  v70[24] = sub_10005CBC4;
  v70[25] = v214;
  v70[26] = sub_10005CBC4;
  v70[27] = v210;
  v70[28] = sub_10005CBB8;
  v70[29] = v67;
  swift_retain();
  v198 = v58;
  swift_retain();
  v193 = v60;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v71 = v65;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v201))
  {
    v72 = (uint64_t)(v252 + 97);
    v73 = (uint64_t)(v252 + 98);
    v74 = (uint8_t *)sub_1006948A0(52);
    v75 = swift_slowAlloc(96, -1);
    v252[97] = 0;
    v252[98] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
    *(_WORD *)v74 = 1283;
    v252[96] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v74 + 2);
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v226;
    v76 = v252 + 81;
    v195 = (uint64_t)(v252 + 96);
    v77 = (uint64_t)(v252 + 97);
    sub_1006948A8(v252 + 81, (uint64_t)(v252 + 96), (uint64_t)(v252 + 97), (uint64_t)(v252 + 98));
    if (v249)
      return swift_errorRelease(v249);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v198;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = sub_10005CBB8;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v193;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v223;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v221;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v218;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v246;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v241;
    sub_1006948A8(v76, v195, v72, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v236;
    sub_1006948A8(v76, v195, v77, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v231;
    sub_1006948A8(v76, v195, v77, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v71;
    sub_1006948A8(v76, v195, v77, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v214;
    sub_1006948A8(v76, v195, v77, v73);
    swift_release();
    v252[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v210;
    sub_1006948A8(v76, v195, v77, v73);
    swift_release();
    v252[81] = sub_10005CBB8;
    v252[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v67;
    sub_1006948A8(v76, v195, v77, v73);
    v159 = (unint64_t)v252[213];
    v160 = (uint64_t)v252[212];
    v161 = v252[154];
    v162 = v252[153];
    v251 = (uint64_t)v252[152];
    v243 = v252[159];
    v248 = (uint64_t)v252[142];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v201, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v74, 0x34u);
    swift_arrayDestroy(v75, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    sub_100694894((uint64_t)v74);

    swift_release();
    sub_10001BC14(v160, v159);
    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v161
     + 1))(v243, v162);
    sub_100004048(v248, &qword_1011091A0);
    sub_100004048(v251, &qword_1010F1938);
  }
  else
  {
    v182 = (uint64_t)v252[212];
    v196 = v252[159];
    v184 = v252[154];
    v187 = (unint64_t)v252[213];
    v189 = v252[153];
    v79 = (uint64_t)v252[152];
    v202 = (uint64_t)v252[142];

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001BC14(v182, v187);
    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v184
     + 1))(v196, v189);
    sub_100004048(v202, &qword_1011091A0);
    sub_100004048(v79, &qword_1010F1938);
  }
  v80 = (uint64_t)v252[211] + 1;
  if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v80 != v252[210])
  {
    v252[211] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v80;
    v120 = v252[202];
    v121 = (uint64_t)v252[209] + 24 * v80;
    v252[212] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 32);
    v252[213] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 40);
    v122 = *(_DWORD *)(v121 + 48);
    *((_BYTE *)v252 + 1716) = *(_BYTE *)(v121 + 52);
    *((_DWORD *)v252 + 428) = v122;
    __asm { BR              X10 }
  }
  v81 = v252[208];
  v82 = (unint64_t)v252[202];
  v83 = (uint64_t)v252[201];
  v84 = (uint64_t)v252[190];
  v85 = v252[183];
  v86 = v252[182];
  v87 = v252[178];
  v88 = v252[177];
  sub_10001BC14((uint64_t)v252[195], (unint64_t)v252[196]);

  sub_10001EF3C(v83, v82);
  swift_bridgeObjectRelease();
  v89 = (void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))*((_QWORD *)v87 + 1);
  v90 = v252;
  v89(v85, v88);
  sub_1000126B0(v84, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v89(v86, v88);
  v91 = (unint64_t)v252[194] + 1;
  if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v91 == v252[193])
  {
LABEL_14:
    v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v93 = v90[110];
    if (v93)
      v92 = v90[110];
    v199 = *((_QWORD *)v92 + 2);
    if (v199)
    {
      v94 = (os_log_t)v90[154];
      v237 = v90[129];
      v190 = v90[126];
      v95 = *((_QWORD *)v90[112] + 2);
      v215 = (_QWORD *)((char *)v92 + 32);
      swift_bridgeObjectRetain(v93);
      v96 = 0;
      v203 = v95;
      osloga = v94;
      v185 = v92;
      do
      {
        if (v96 >= *((_QWORD *)v92 + 2))
        {
          __break(1u);
          JUMPOUT(0x1001A5CD8);
        }
        v211 = v96;
        v97 = &v215[3 * v96];
        v98 = *v97;
        v99 = v97[1];
        v100 = v97[2];
        if (v95)
        {
          v101 = v90[112];
          sub_10001BBBC(v98, v99);
          v102 = (uint64_t)v101
               + ((*((unsigned __int8 *)v190 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v190 + 80));
          swift_bridgeObjectRetain(v100);
          swift_bridgeObjectRetain(v101);
          sub_10005972C(v102, (uint64_t)v90[129], type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
          __asm { BR              X10 }
        }
        sub_10001BBBC(*v97, v97[1]);
        swift_bridgeObjectRetain(v100);
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v103 = v90[155];
        v104 = (uint64_t)v90[153];
        v105 = sub_10001A9E8(v104, (uint64_t)qword_1011B69B0);
        ((void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v94[2].isa)(v103, v105, v104);
        sub_10001BBBC(v98, v99);
        swift_bridgeObjectRetain(v100);
        sub_10001BBBC(v98, v99);
        swift_bridgeObjectRetain(v100);
        v107 = Logger.logObject.getter(v106);
        v108 = static os_log_type_t.error.getter(v107);
        v109 = os_log_type_enabled(v107, v108);
        v110 = v90[155];
        v111 = v90[153];
        if (v109)
        {
          v112 = v99;
          v113 = swift_slowAlloc(22, -1);
          v114 = swift_slowAlloc(32, -1);
          v253[0] = v114;
          *(_DWORD *)v113 = 141558275;
          *(_QWORD *)(v113 + 4) = 1752392040;
          *(_WORD *)(v113 + 12) = 2081;
          v90[77] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98;
          v90[78] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v112;
          v115 = sub_100153D50();
          v116 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v115);
          *(_QWORD *)(v113 + 14) = sub_100016940(v116, v117, v253);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v112);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v112);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v113, 0x16u);
          swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
          v118 = v114;
          v95 = v203;
          swift_slowDealloc(v118, -1, -1);
          swift_slowDealloc(v113, -1, -1);

          v119 = v112;
          v94 = osloga;
          sub_10001BC14(v98, v119);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))osloga[1].isa)(v110, v111);
        }
        else
        {
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();

          ((void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v94[1].isa)(v110, v111);
        }
        v92 = v185;
        v96 = v211 + 1;
      }
      while (v211 + 1 != v199);
    }
    else
    {
      swift_bridgeObjectRetain(v93);
    }
    swift_bridgeObjectRelease();
    v140 = v90 + 55;
    v141 = v90[192];
    v142 = v90[190];
    v143 = v90[189];
    v144 = v90[188];
    v145 = v90[187];
    v146 = v90[186];
    v147 = v90[183];
    v148 = v90[182];
    v149 = v90[181];
    v150 = v252[180];
    v164 = v252[176];
    v165 = v252[175];
    v166 = v252[174];
    v167 = v252[173];
    v168 = v252[172];
    v169 = v252[169];
    v170 = v252[167];
    v171 = v252[164];
    v172 = v252[162];
    v173 = v252[161];
    v174 = v252[160];
    v175 = v252[159];
    v176 = v252[158];
    v177 = v252[157];
    v178 = v252[156];
    v179 = v252[155];
    v180 = v252[152];
    v181 = v252[151];
    v183 = v252[150];
    v186 = v252[149];
    v188 = v252[148];
    v191 = v252[144];
    v192 = v252[143];
    v194 = v252[142];
    v197 = v252[141];
    v200 = v252[140];
    v204 = v252[139];
    oslogc = (os_log_t)v252[138];
    v212 = v252[137];
    v216 = v252[133];
    v219 = v252[131];
    v222 = v252[130];
    v224 = v252[129];
    v227 = v252[128];
    v232 = v252[124];
    v238 = v252[121];
    v242 = v252[119];
    v247 = v252[117];
    v250 = v252[114];
    swift_beginAccess((char *)v141 + 16, v140, 0, 0);
    v163 = *((_QWORD *)v141 + 2);
    swift_bridgeObjectRetain(v163);
    swift_release();
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    swift_task_dealloc(v164);
    swift_task_dealloc(v165);
    swift_task_dealloc(v166);
    swift_task_dealloc(v167);
    swift_task_dealloc(v168);
    swift_task_dealloc(v169);
    swift_task_dealloc(v170);
    swift_task_dealloc(v171);
    swift_task_dealloc(v172);
    swift_task_dealloc(v173);
    swift_task_dealloc(v174);
    swift_task_dealloc(v175);
    swift_task_dealloc(v176);
    swift_task_dealloc(v177);
    swift_task_dealloc(v178);
    swift_task_dealloc(v179);
    swift_task_dealloc(v180);
    swift_task_dealloc(v181);
    swift_task_dealloc(v183);
    swift_task_dealloc(v186);
    swift_task_dealloc(v188);
    swift_task_dealloc(v191);
    swift_task_dealloc(v192);
    swift_task_dealloc(v194);
    swift_task_dealloc(v197);
    swift_task_dealloc(v200);
    swift_task_dealloc(v204);
    swift_task_dealloc(oslogc);
    swift_task_dealloc(v212);
    swift_task_dealloc(v216);
    swift_task_dealloc(v219);
    swift_task_dealloc(v222);
    swift_task_dealloc(v224);
    swift_task_dealloc(v227);
    swift_task_dealloc(v232);
    swift_task_dealloc(v238);
    swift_task_dealloc(v242);
    swift_task_dealloc(v247);
    swift_task_dealloc(v250);
    return ((uint64_t (*)(uint64_t))v252[1])(v163);
  }
  else
  {
    while (1)
    {
      v90[194] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91;
      v124 = v90[111];
      if (!v124)
        v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
      if (v91 >= *((_QWORD *)v124 + 2))
      {
        __break(1u);
        JUMPOUT(0x1001A5CA4);
      }
      v125 = *((unsigned __int8 *)v90 + 1840);
      v126 = (uint64_t)v90[190];
      v127 = v90[185];
      v128 = v90[184];
      v129 = v252[178];
      v130 = v252[177];
      v131 = (uint64_t)v252[176];
      sub_10005972C((uint64_t)v124 + ((v125 + 32) & ~v125) + *((_QWORD *)v127 + 9) * v91, v126, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v132 = *(_QWORD *)(v126 + 16);
      v252[195] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v132;
      v133 = *(_QWORD *)(v126 + 24);
      v252[196] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v133;
      sub_10000F9B8(v126 + *((int *)v128 + 7), v131, &qword_1010ED860);
      v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v129 + 6);
      v90 = v252;
      v252[197] = v134;
      if (v134(v131, 1, (uint64_t)v130) != 1)
        break;
      v135 = (uint64_t)v252[176];
      sub_10001BBBC(v132, v133);
      sub_100004048(v135, &qword_1010ED860);
      if (qword_1010E99C0 != -1)
        swift_once(&qword_1010E99C0, sub_100173218);
      v136 = sub_10001A9E8((uint64_t)v252[153], (uint64_t)qword_1011B69B0);
      v137 = Logger.logObject.getter(v136);
      v138 = static os_log_type_t.error.getter(v137);
      if (os_log_type_enabled(v137, v138))
      {
        v139 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v139 = 0;
        _os_log_impl((void *)&_mh_execute_header, v137, v138, "Missing share id in payload.", v139, 2u);
        swift_slowDealloc(v139, -1, -1);
      }
      v123 = (uint64_t)v252[190];
      sub_10001BC14(v132, v133);

      sub_1000126B0(v123, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v91 = (unint64_t)v252[194] + 1;
      if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v91 == v252[193])
        goto LABEL_14;
    }
    v151 = v252[183];
    v152 = v252[178];
    v153 = v252[177];
    v154 = v252[176];
    v155 = v252[175];
    v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v152 + 4);
    v252[198] = v156;
    v156((uint64_t)v151, (uint64_t)v154, (uint64_t)v153);
    v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v152 + 2);
    v252[199] = v157;
    v157((uint64_t)v155, (uint64_t)v151, (uint64_t)v153);
    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), _QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v152
     + 7))(v155, 0, 1, v153);
    sub_10001BBBC(v132, v133);
    v158 = (uint64_t (***)(uint64_t, uint64_t, uint64_t))swift_task_alloc(dword_1010F1944);
    v252[200] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v158;
    *v158 = v252;
    v158[1] = (uint64_t (**)(uint64_t, uint64_t, uint64_t))sub_10018C4F8;
    return sub_1001AB0F8(v132, v133, (uint64_t)v252[175]);
  }
}

uint64_t sub_1001A5F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(_QWORD *)(v0 + 1464);
  v3 = *(_QWORD *)(v0 + 1424);
  v4 = *(_QWORD *)(v0 + 1416);
  sub_10001BC14(*(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1568));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000126B0(v1, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v5 = *(_QWORD *)(v0 + 1520);
  v6 = *(_QWORD *)(v0 + 1512);
  v7 = *(_QWORD *)(v0 + 1504);
  v8 = *(_QWORD *)(v0 + 1496);
  v9 = *(_QWORD *)(v0 + 1488);
  v10 = *(_QWORD *)(v0 + 1464);
  v11 = *(_QWORD *)(v0 + 1456);
  v12 = *(_QWORD *)(v0 + 1448);
  v13 = *(_QWORD *)(v0 + 1440);
  v15 = *(_QWORD *)(v0 + 1408);
  v16 = *(_QWORD *)(v0 + 1400);
  v17 = *(_QWORD *)(v0 + 1392);
  v18 = *(_QWORD *)(v0 + 1384);
  v19 = *(_QWORD *)(v0 + 1376);
  v20 = *(_QWORD *)(v0 + 1352);
  v21 = *(_QWORD *)(v0 + 1336);
  v22 = *(_QWORD *)(v0 + 1312);
  v23 = *(_QWORD *)(v0 + 1296);
  v24 = *(_QWORD *)(v0 + 1288);
  v25 = *(_QWORD *)(v0 + 1280);
  v26 = *(_QWORD *)(v0 + 1272);
  v27 = *(_QWORD *)(v0 + 1264);
  v28 = *(_QWORD *)(v0 + 1256);
  v29 = *(_QWORD *)(v0 + 1248);
  v30 = *(_QWORD *)(v0 + 1240);
  v31 = *(_QWORD *)(v0 + 1216);
  v32 = *(_QWORD *)(v0 + 1208);
  v33 = *(_QWORD *)(v0 + 1200);
  v34 = *(_QWORD *)(v0 + 1192);
  v35 = *(_QWORD *)(v0 + 1184);
  v36 = *(_QWORD *)(v0 + 1152);
  v37 = *(_QWORD *)(v0 + 1144);
  v38 = *(_QWORD *)(v0 + 1136);
  v39 = *(_QWORD *)(v0 + 1128);
  v40 = *(_QWORD *)(v0 + 1120);
  v41 = *(_QWORD *)(v0 + 1112);
  v42 = *(_QWORD *)(v0 + 1104);
  v43 = *(_QWORD *)(v0 + 1096);
  v44 = *(_QWORD *)(v0 + 1064);
  v45 = *(_QWORD *)(v0 + 1048);
  v46 = *(_QWORD *)(v0 + 1040);
  v47 = *(_QWORD *)(v0 + 1032);
  v48 = *(_QWORD *)(v0 + 1024);
  v49 = *(_QWORD *)(v0 + 992);
  v50 = *(_QWORD *)(v0 + 968);
  v51 = *(_QWORD *)(v0 + 952);
  v52 = *(_QWORD *)(v0 + 936);
  v53 = *(_QWORD *)(v0 + 912);
  swift_release();
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A6294()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 1704);
  v2 = *(_QWORD *)(v0 + 1696);
  v3 = *(void **)(v0 + 1664);
  v4 = *(_QWORD *)(v0 + 1616);
  v5 = *(_QWORD *)(v0 + 1608);
  v6 = *(_QWORD *)(v0 + 1520);
  v7 = *(_QWORD *)(v0 + 1464);
  v59 = *(_QWORD *)(v0 + 1456);
  v8 = *(_QWORD *)(v0 + 1424);
  v9 = *(_QWORD *)(v0 + 1416);
  sub_10001BC14(*(_QWORD *)(v0 + 1560), *(_QWORD *)(v0 + 1568));

  sub_10001EF3C(v5, v4);
  sub_10001BC14(v2, v1);
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v7, v9);
  sub_1000126B0(v6, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v10(v59, v9);
  v11 = *(_QWORD *)(v0 + 1520);
  v12 = *(_QWORD *)(v0 + 1512);
  v13 = *(_QWORD *)(v0 + 1504);
  v14 = *(_QWORD *)(v0 + 1496);
  v15 = *(_QWORD *)(v0 + 1488);
  v16 = *(_QWORD *)(v0 + 1464);
  v17 = *(_QWORD *)(v0 + 1456);
  v18 = *(_QWORD *)(v0 + 1448);
  v19 = *(_QWORD *)(v0 + 1440);
  v21 = *(_QWORD *)(v0 + 1408);
  v22 = *(_QWORD *)(v0 + 1400);
  v23 = *(_QWORD *)(v0 + 1392);
  v24 = *(_QWORD *)(v0 + 1384);
  v25 = *(_QWORD *)(v0 + 1376);
  v26 = *(_QWORD *)(v0 + 1352);
  v27 = *(_QWORD *)(v0 + 1336);
  v28 = *(_QWORD *)(v0 + 1312);
  v29 = *(_QWORD *)(v0 + 1296);
  v30 = *(_QWORD *)(v0 + 1288);
  v31 = *(_QWORD *)(v0 + 1280);
  v32 = *(_QWORD *)(v0 + 1272);
  v33 = *(_QWORD *)(v0 + 1264);
  v34 = *(_QWORD *)(v0 + 1256);
  v35 = *(_QWORD *)(v0 + 1248);
  v36 = *(_QWORD *)(v0 + 1240);
  v37 = *(_QWORD *)(v0 + 1216);
  v38 = *(_QWORD *)(v0 + 1208);
  v39 = *(_QWORD *)(v0 + 1200);
  v40 = *(_QWORD *)(v0 + 1192);
  v41 = *(_QWORD *)(v0 + 1184);
  v42 = *(_QWORD *)(v0 + 1152);
  v43 = *(_QWORD *)(v0 + 1144);
  v44 = *(_QWORD *)(v0 + 1136);
  v45 = *(_QWORD *)(v0 + 1128);
  v46 = *(_QWORD *)(v0 + 1120);
  v47 = *(_QWORD *)(v0 + 1112);
  v48 = *(_QWORD *)(v0 + 1104);
  v49 = *(_QWORD *)(v0 + 1096);
  v50 = *(_QWORD *)(v0 + 1064);
  v51 = *(_QWORD *)(v0 + 1048);
  v52 = *(_QWORD *)(v0 + 1040);
  v53 = *(_QWORD *)(v0 + 1032);
  v54 = *(_QWORD *)(v0 + 1024);
  v55 = *(_QWORD *)(v0 + 992);
  v56 = *(_QWORD *)(v0 + 968);
  v57 = *(_QWORD *)(v0 + 952);
  v58 = *(_QWORD *)(v0 + 936);
  v60 = *(_QWORD *)(v0 + 912);
  swift_release();
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001A6628()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (**v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  void (*v89)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t));
  uint64_t (**v90)(uint64_t, uint64_t, uint64_t);
  unint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t (**v139)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v145)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v149)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v152)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v153)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v155)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t (***v158)(uint64_t, uint64_t, uint64_t);
  unint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v167)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v169)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v171)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v172)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v174)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v176)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v177)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v179)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v180)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v182)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v183)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v188)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v189)(uint64_t, uint64_t, uint64_t);
  unint64_t v190;
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v193)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v194)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v198)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v199)(uint64_t, uint64_t, uint64_t);
  uint64_t v200;
  uint64_t (*v201)(uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t (*v203)(uint64_t, uint64_t, uint64_t);
  void (*v204)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t));
  os_log_type_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t (*v208)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v209)(uint64_t, uint64_t, uint64_t);
  NSObject *v210;
  _QWORD *v211;
  uint64_t (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v213)(uint64_t, uint64_t, uint64_t);
  uint64_t v214;
  uint64_t (*v215)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v216)(uint64_t, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  uint64_t (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t (*v222)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t (*v225)(uint64_t, uint64_t, uint64_t);
  uint64_t v226;
  uint64_t (*v227)(uint64_t, uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t (*v231)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v232)(uint64_t, uint64_t, uint64_t);
  uint64_t v233;
  void (*v234)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t));
  uint64_t v235;
  uint64_t v236;
  uint64_t (*v237)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v238)(uint64_t, uint64_t, uint64_t);
  uint64_t v239;
  uint64_t v240;
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  uint64_t (*v243)(uint64_t, uint64_t, uint64_t);
  uint64_t v244;
  uint64_t v245;
  uint64_t (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;
  uint64_t (*v248)(uint64_t, uint64_t, uint64_t);
  uint64_t (**v249)(uint64_t, uint64_t, uint64_t);
  uint64_t v250[4];

  if (*(_BYTE *)(v0 + 1712) != 3)
  {
    v1 = (_QWORD *)(*(_QWORD *)(v0 + 1104) + *(int *)(v0 + 1852));
    v3 = v1[3];
    v2 = v1[4];
    sub_10001AA44(v1, v3);
    if (!sub_100ABA6B0(v3, v2))
    {
      v4 = (_QWORD *)(*(_QWORD *)(v0 + 1104) + *(int *)(v0 + 1852));
      v6 = v4[3];
      v5 = v4[4];
      sub_10001AA44(v4, v6);
      dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 840), v6, *(_QWORD *)(v5 + 56));
    }
  }
  sub_1000126B0(*(_QWORD *)(v0 + 1104), type metadata accessor for BeaconKeyManager.IndexInformation);
  v7 = *(_QWORD *)(v0 + 1536);
  v8 = *(_QWORD *)(v0 + 1456);
  swift_beginAccess(v7 + 16, v0 + 416, 32, 0);
  sub_100BBE398(v8, *(_QWORD *)(v7 + 16));
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1592);
  v11 = *(_QWORD *)(v0 + 1536);
  v240 = *(_QWORD *)(v0 + 1448);
  v245 = *(_QWORD *)(v0 + 1424);
  v12 = *(_QWORD *)(v0 + 1416);
  v13 = *(_QWORD *)(v0 + 1216);
  v14 = *(_QWORD *)(v0 + 1208);
  v15 = *(_QWORD *)(v0 + 1160);
  v228 = *(_QWORD *)(v0 + 1456);
  v233 = v13 + *(int *)(v0 + 1848);
  if (v9)
  {
    v16 = *(_QWORD *)(v0 + 1064);
    v17 = v11 + 16;
    *(_QWORD *)(v0 + 744) = v9;
    swift_endAccess(v0 + 416);
    v18 = v14 + *(int *)(v15 + 48);
    v10(v14, v13, v12);
    sub_10005972C(v233, v18, type metadata accessor for RawSearchResult);
    sub_100A0C1EC(v16, v18);
    sub_1000126B0(v16, type metadata accessor for RawSearchResult);
    (*(void (**)(uint64_t, uint64_t))(v245 + 8))(v14, v12);
    v10(v240, v228, v12);
    v19 = *(_QWORD *)(v0 + 744);
    v20 = v0 + 512;
    swift_beginAccess(v17, v0 + 512, 33, 0);
    v21 = v19;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 1056);
    v23 = v11 + 16;
    swift_endAccess(v0 + 416);
    v10(v240, v228, v12);
    v24 = sub_10001A9A8(&qword_1010ED220);
    v25 = swift_allocObject(v24, ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72), *(unsigned __int8 *)(v22 + 80) | 7);
    v26 = sub_10084F498(v25, 1);
    v28 = v27;
    v29 = v14 + *(int *)(v15 + 48);
    v10(v14, v13, v12);
    sub_10005972C(v233, v29, type metadata accessor for RawSearchResult);
    sub_1000126EC(v29, v28, type metadata accessor for RawSearchResult);
    v30 = SharingCircleWildAdvertisementKey.init(key:)(v26);
    (*(void (**)(uint64_t, uint64_t))(v245 + 8))(v14, v12);
    v31 = sub_100CA80F4(v30);
    swift_bridgeObjectRelease();
    v20 = v0 + 488;
    swift_beginAccess(v23, v0 + 488, 33, 0);
    v21 = v31;
  }
  sub_1000FEF14(v21, v240);
  swift_endAccess(v20);
  v32 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v0;
  v33 = *(int *)(v0 + 1848);
  v34 = *(unsigned __int8 *)(v0 + 1844);
  v204 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v0 + 1592);
  v234 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v0 + 1584);
  v229 = *(_QWORD *)(v0 + 1536);
  v35 = *(_QWORD *)(v0 + 1456);
  v36 = *(_QWORD *)(v0 + 1448);
  v37 = v32[177];
  v38 = v32[159];
  v39 = v32[154];
  v40 = v32[153];
  v41 = (uint64_t)v32[151];
  v241 = v32[152];
  v246 = v32[147];
  v220 = (uint64_t)v241 + v33;
  v223 = v32[146];
  v42 = (v34 + 16) & ~v34;
  v43 = (uint64_t)v32[179] + v42;
  v44 = v34 | 7;
  v249 = v32;
  v213 = v32[145];
  v45 = sub_100173298();
  (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v39
   + 2))(v38, v45, v40);
  v46 = v37;
  v204(v36, v35, v37);
  v47 = swift_allocObject(&unk_10105C2A0, v43, v44);
  v48 = v36;
  v49 = v46;
  v209 = v46;
  v234(v47 + v42, v48, v46);
  v235 = swift_allocObject(&unk_10105C2C8, 32, 7);
  *(_QWORD *)(v235 + 16) = sub_1001ADF20;
  *(_QWORD *)(v235 + 24) = v47;
  v50 = v41 + *((int *)v213 + 12);
  v204(v41, (uint64_t)v241, v49);
  sub_10005972C(v220, v50, type metadata accessor for RawSearchResult);
  v51 = *((unsigned __int8 *)v223 + 80);
  v52 = (v51 + 16) & ~v51;
  v53 = swift_allocObject(&unk_10105C2F0, (char *)v246 + v52, v51 | 7);
  sub_100005CF0(v41, v53 + v52, &qword_1010F1938);
  v217 = swift_allocObject(&unk_10105C318, 32, 7);
  *(_QWORD *)(v217 + 16) = sub_1001ADDE0;
  *(_QWORD *)(v217 + 24) = v53;
  v54 = v41 + *((int *)v213 + 12);
  v204(v41, (uint64_t)v241, v209);
  sub_10005972C(v220, v54, type metadata accessor for RawSearchResult);
  v55 = swift_allocObject(&unk_10105C340, (char *)v246 + v52, v51 | 7);
  sub_100005CF0(v41, v55 + v52, &qword_1010F1938);
  v56 = swift_allocObject(&unk_10105C368, 32, 7);
  *(_QWORD *)(v56 + 16) = sub_1001ADDF0;
  *(_QWORD *)(v56 + 24) = v55;
  v57 = v41 + *((int *)v213 + 12);
  v204(v41, (uint64_t)v241, v209);
  sub_10005972C(v220, v57, type metadata accessor for RawSearchResult);
  v58 = (v51 + 24) & ~v51;
  v59 = swift_allocObject(&unk_10105C390, (char *)v246 + v58, v51 | 7);
  *(_QWORD *)(v59 + 16) = v229;
  sub_100005CF0(v41, v59 + v58, &qword_1010F1938);
  v60 = swift_retain();
  v210 = Logger.logObject.getter(v60);
  v205 = static os_log_type_t.info.getter(v210);
  v61 = swift_allocObject(&unk_10105C3B8, 17, 7);
  *(_BYTE *)(v61 + 16) = 112;
  v62 = v61;
  v63 = swift_allocObject(&unk_10105C3E0, 17, 7);
  *(_BYTE *)(v63 + 16) = 8;
  v64 = swift_allocObject(&unk_10105C408, 24, 7);
  *(_QWORD *)(v64 + 16) = 1752392040;
  v230 = swift_allocObject(&unk_10105C430, 32, 7);
  *(_QWORD *)(v230 + 16) = sub_1001AE898;
  *(_QWORD *)(v230 + 24) = v64;
  v226 = swift_allocObject(&unk_10105C458, 17, 7);
  *(_BYTE *)(v226 + 16) = 33;
  v221 = swift_allocObject(&unk_10105C480, 17, 7);
  *(_BYTE *)(v221 + 16) = 8;
  v65 = swift_allocObject(&unk_10105C4A8, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_10005CBAC;
  *(_QWORD *)(v65 + 24) = v235;
  v66 = swift_allocObject(&unk_10105C4D0, 32, 7);
  *(_QWORD *)(v66 + 16) = sub_10005CBA4;
  *(_QWORD *)(v66 + 24) = v65;
  v224 = v66;
  v67 = swift_allocObject(&unk_10105C4F8, 17, 7);
  *(_BYTE *)(v67 + 16) = 34;
  v247 = swift_allocObject(&unk_10105C520, 17, 7);
  *(_BYTE *)(v247 + 16) = 8;
  v68 = swift_allocObject(&unk_10105C548, 32, 7);
  *(_QWORD *)(v68 + 16) = sub_1001AE7E0;
  *(_QWORD *)(v68 + 24) = v217;
  v242 = swift_allocObject(&unk_10105C570, 32, 7);
  *(_QWORD *)(v242 + 16) = sub_10005CBA4;
  *(_QWORD *)(v242 + 24) = v68;
  v236 = swift_allocObject(&unk_10105C598, 17, 7);
  *(_BYTE *)(v236 + 16) = 34;
  v218 = swift_allocObject(&unk_10105C5C0, 17, 7);
  *(_BYTE *)(v218 + 16) = 8;
  v69 = swift_allocObject(&unk_10105C5E8, 32, 7);
  *(_QWORD *)(v69 + 16) = sub_1001AE7E4;
  *(_QWORD *)(v69 + 24) = v56;
  v196 = swift_allocObject(&unk_10105C610, 32, 7);
  *(_QWORD *)(v196 + 16) = sub_10005CBA4;
  *(_QWORD *)(v196 + 24) = v69;
  v70 = swift_allocObject(&unk_10105C638, 17, 7);
  *(_BYTE *)(v70 + 16) = 0;
  v71 = v70;
  v214 = swift_allocObject(&unk_10105C660, 17, 7);
  *(_BYTE *)(v214 + 16) = 8;
  v72 = swift_allocObject(&unk_10105C688, 32, 7);
  *(_QWORD *)(v72 + 16) = sub_1001ADE00;
  *(_QWORD *)(v72 + 24) = v59;
  v73 = swift_allocObject(&unk_10105C6B0, 32, 7);
  *(_QWORD *)(v73 + 16) = sub_10005CD4C;
  *(_QWORD *)(v73 + 24) = v72;
  v74 = sub_10001A9A8(&qword_1010EC538);
  v75 = swift_allocObject(v74, 272, 7);
  sub_100882D28(v75, 15);
  *v76 = sub_10005CBC4;
  v76[1] = v62;
  v76[2] = sub_10005CBC4;
  v76[3] = v63;
  v76[4] = sub_10005CBB8;
  v76[5] = v230;
  v76[6] = sub_10005CBC4;
  v76[7] = v226;
  v76[8] = sub_10005CBC4;
  v76[9] = v221;
  v76[10] = sub_10005CBB4;
  v76[11] = v66;
  v76[12] = sub_10005CBC4;
  v76[13] = v67;
  v76[14] = sub_10005CBC4;
  v76[15] = v247;
  v76[16] = sub_10005CBB4;
  v76[17] = v242;
  v76[18] = sub_10005CBC4;
  v76[19] = v236;
  v76[20] = sub_10005CBC4;
  v76[21] = v218;
  v76[22] = sub_10005CBB4;
  v76[23] = v196;
  v76[24] = sub_10005CBC4;
  v76[25] = v71;
  v76[26] = sub_10005CBC4;
  v76[27] = v214;
  v76[28] = sub_10005CBB8;
  v76[29] = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v210, v205))
  {
    v77 = (uint8_t *)sub_1006948A0(52);
    v78 = swift_slowAlloc(96, -1);
    v249[97] = 0;
    v249[98] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v78;
    *(_WORD *)v77 = 1283;
    v249[96] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v77 + 2);
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v63;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = sub_10005CBB8;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v230;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v226;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v221;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v224;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v67;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v247;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v242;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v236;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v218;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBB4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v196;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v71;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10005CBC4;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v214;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    swift_release();
    v249[81] = sub_10005CBB8;
    v249[82] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v73;
    sub_1006948A8(v249 + 81, (uint64_t)(v249 + 96), (uint64_t)(v249 + 97), (uint64_t)(v249 + 98));
    v159 = (unint64_t)v249[213];
    v160 = (uint64_t)v249[212];
    v161 = v249[159];
    v162 = v249[154];
    v163 = v249[153];
    v239 = (uint64_t)v249[142];
    v244 = (uint64_t)v249[152];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v210, v205, "Return search result for beacon (wild): %{private,mask.hash}s,\nlocation timestamp %{public}s,\nsource: %{public}s,\ntotal found: %ld.", v77, 0x34u);
    swift_arrayDestroy(v78, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    sub_100694894((uint64_t)v77);

    swift_release();
    sub_10001BC14(v160, v159);
    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v162
     + 1))(v161, v163);
    sub_100004048(v239, &qword_1011091A0);
    v164 = v244;
  }
  else
  {
    v185 = (uint64_t)v249[212];
    v198 = v249[159];
    v188 = v249[154];
    v190 = (unint64_t)v249[213];
    v192 = v249[153];
    v79 = (uint64_t)v249[152];
    v206 = (uint64_t)v249[142];

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001BC14(v185, v190);
    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v188
     + 1))(v198, v192);
    sub_100004048(v206, &qword_1011091A0);
    v164 = v79;
  }
  sub_100004048(v164, &qword_1010F1938);
  v80 = (uint64_t)v249[211] + 1;
  if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v80 != v249[210])
  {
    v249[211] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v80;
    v118 = v249[202];
    v119 = (uint64_t)v249[209] + 24 * v80;
    v249[212] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 32);
    v249[213] = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 40);
    v120 = *(_DWORD *)(v119 + 48);
    *((_BYTE *)v249 + 1716) = *(_BYTE *)(v119 + 52);
    *((_DWORD *)v249 + 428) = v120;
    __asm { BR              X10 }
  }
  v81 = v249[208];
  v82 = (unint64_t)v249[202];
  v83 = (uint64_t)v249[201];
  v84 = (uint64_t)v249[190];
  v85 = v249[183];
  v86 = v249[182];
  v87 = v249[178];
  v88 = v249[177];
  sub_10001BC14((uint64_t)v249[195], (unint64_t)v249[196]);

  sub_10001EF3C(v83, v82);
  swift_bridgeObjectRelease();
  v89 = (void (*)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))*((_QWORD *)v87 + 1);
  v90 = v249;
  v89(v85, v88);
  sub_1000126B0(v84, type metadata accessor for KeyDropFetchResponse.LocationPayload);
  v89(v86, v88);
  v91 = (unint64_t)v249[194] + 1;
  if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v91 == v249[193])
  {
LABEL_12:
    v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v93 = v90[110];
    if (v93)
      v92 = v90[110];
    v200 = *((_QWORD *)v92 + 2);
    if (v200)
    {
      v94 = v90[154];
      v237 = v90[129];
      v193 = v90[126];
      v95 = *((_QWORD *)v90[112] + 2);
      v211 = (_QWORD *)((char *)v92 + 32);
      swift_bridgeObjectRetain(v93);
      v96 = 0;
      v215 = v94;
      v202 = v95;
      v186 = v92;
      do
      {
        if (v96 >= *((_QWORD *)v92 + 2))
        {
          __break(1u);
          JUMPOUT(0x1001AAE94);
        }
        v207 = v96;
        v97 = &v211[3 * v96];
        v98 = *v97;
        v99 = v97[1];
        v100 = v97[2];
        if (v95)
        {
          v101 = v90[112];
          sub_10001BBBC(v98, v99);
          v102 = (uint64_t)v101
               + ((*((unsigned __int8 *)v193 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v193 + 80));
          swift_bridgeObjectRetain(v100);
          swift_bridgeObjectRetain(v101);
          sub_10005972C(v102, (uint64_t)v90[129], type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
          __asm { BR              X10 }
        }
        sub_10001BBBC(*v97, v97[1]);
        swift_bridgeObjectRetain(v100);
        if (qword_1010E99C0 != -1)
          swift_once(&qword_1010E99C0, sub_100173218);
        v103 = v90[155];
        v104 = (uint64_t)v90[153];
        v105 = sub_10001A9E8(v104, (uint64_t)qword_1011B69B0);
        (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))v94 + 2))(v103, v105, v104);
        sub_10001BBBC(v98, v99);
        swift_bridgeObjectRetain(v100);
        sub_10001BBBC(v98, v99);
        swift_bridgeObjectRetain(v100);
        v107 = Logger.logObject.getter(v106);
        v108 = static os_log_type_t.error.getter(v107);
        v109 = os_log_type_enabled(v107, v108);
        v110 = v90[155];
        v231 = v90[153];
        if (v109)
        {
          v111 = swift_slowAlloc(22, -1);
          v112 = swift_slowAlloc(32, -1);
          v250[0] = v112;
          *(_DWORD *)v111 = 141558275;
          *(_QWORD *)(v111 + 4) = 1752392040;
          *(_WORD *)(v111 + 12) = 2081;
          v90[77] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v98;
          v90[78] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v99;
          v113 = sub_100153D50();
          v114 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v113);
          *(_QWORD *)(v111 + 14) = sub_100016940(v114, v115, v250);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "No member ownded device decryption key found for advt: %{private,mask.hash}s.", (uint8_t *)v111, 0x16u);
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          v116 = v112;
          v94 = v215;
          swift_slowDealloc(v116, -1, -1);
          v117 = v111;
          v95 = v202;
          swift_slowDealloc(v117, -1, -1);

          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();
          (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v215
           + 1))(v110, v231);
        }
        else
        {
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();
          sub_10001BC14(v98, v99);
          swift_bridgeObjectRelease();

          (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t)))v94
           + 1))(v110, v231);
        }
        v92 = v186;
        v96 = v207 + 1;
      }
      while (v207 + 1 != v200);
    }
    else
    {
      swift_bridgeObjectRetain(v93);
    }
    swift_bridgeObjectRelease();
    v139 = v90 + 55;
    v140 = v90[192];
    v141 = v90[190];
    v142 = v90[189];
    v143 = v90[188];
    v144 = v90[187];
    v145 = v90[186];
    v146 = v90[183];
    v147 = v90[182];
    v148 = v90[181];
    v149 = v249[180];
    v166 = v249[176];
    v167 = v249[175];
    v168 = v249[174];
    v169 = v249[173];
    v170 = v249[172];
    v171 = v249[169];
    v172 = v249[167];
    v173 = v249[164];
    v174 = v249[162];
    v175 = v249[161];
    v176 = v249[160];
    v177 = v249[159];
    v178 = v249[158];
    v179 = v249[157];
    v180 = v249[156];
    v181 = v249[155];
    v182 = v249[152];
    v183 = v249[151];
    v184 = v249[150];
    v187 = v249[149];
    v189 = v249[148];
    v191 = v249[144];
    v194 = v249[143];
    v195 = v249[142];
    v197 = v249[141];
    v199 = v249[140];
    v201 = v249[139];
    v203 = v249[138];
    v208 = v249[137];
    v212 = v249[133];
    v216 = v249[131];
    v219 = v249[130];
    v222 = v249[129];
    v225 = v249[128];
    v227 = v249[124];
    v232 = v249[121];
    v238 = v249[119];
    v243 = v249[117];
    v248 = v249[114];
    swift_beginAccess((char *)v140 + 16, v139, 0, 0);
    v165 = *((_QWORD *)v140 + 2);
    swift_bridgeObjectRetain(v165);
    swift_release();
    swift_task_dealloc(v141);
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v149);
    swift_task_dealloc(v166);
    swift_task_dealloc(v167);
    swift_task_dealloc(v168);
    swift_task_dealloc(v169);
    swift_task_dealloc(v170);
    swift_task_dealloc(v171);
    swift_task_dealloc(v172);
    swift_task_dealloc(v173);
    swift_task_dealloc(v174);
    swift_task_dealloc(v175);
    swift_task_dealloc(v176);
    swift_task_dealloc(v177);
    swift_task_dealloc(v178);
    swift_task_dealloc(v179);
    swift_task_dealloc(v180);
    swift_task_dealloc(v181);
    swift_task_dealloc(v182);
    swift_task_dealloc(v183);
    swift_task_dealloc(v184);
    swift_task_dealloc(v187);
    swift_task_dealloc(v189);
    swift_task_dealloc(v191);
    swift_task_dealloc(v194);
    swift_task_dealloc(v195);
    swift_task_dealloc(v197);
    swift_task_dealloc(v199);
    swift_task_dealloc(v201);
    swift_task_dealloc(v203);
    swift_task_dealloc(v208);
    swift_task_dealloc(v212);
    swift_task_dealloc(v216);
    swift_task_dealloc(v219);
    swift_task_dealloc(v222);
    swift_task_dealloc(v225);
    swift_task_dealloc(v227);
    swift_task_dealloc(v232);
    swift_task_dealloc(v238);
    swift_task_dealloc(v243);
    swift_task_dealloc(v248);
    return ((uint64_t (*)(uint64_t))v249[1])(v165);
  }
  else
  {
    while (1)
    {
      v90[194] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v91;
      v122 = v90[111];
      if (!v122)
        v122 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
      if (v91 >= *((_QWORD *)v122 + 2))
      {
        __break(1u);
        JUMPOUT(0x1001AAE60);
      }
      v123 = *((unsigned __int8 *)v90 + 1840);
      v124 = (uint64_t)v90[190];
      v125 = v90[185];
      v126 = v249[184];
      v127 = v249[178];
      v128 = v249[177];
      v129 = (uint64_t)v249[176];
      sub_10005972C((uint64_t)v122 + ((v123 + 32) & ~v123) + *((_QWORD *)v125 + 9) * v91, v124, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v130 = *(_QWORD *)(v124 + 16);
      v249[195] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v130;
      v131 = *(_QWORD *)(v124 + 24);
      v249[196] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v131;
      v132 = *((int *)v126 + 7);
      v90 = v249;
      sub_10000F9B8(v124 + v132, v129, &qword_1010ED860);
      v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v127 + 6);
      v249[197] = v133;
      if (v133(v129, 1, (uint64_t)v128) != 1)
        break;
      v134 = (uint64_t)v249[176];
      sub_10001BBBC(v130, v131);
      sub_100004048(v134, &qword_1010ED860);
      if (qword_1010E99C0 != -1)
        swift_once(&qword_1010E99C0, sub_100173218);
      v135 = sub_10001A9E8((uint64_t)v249[153], (uint64_t)qword_1011B69B0);
      v136 = Logger.logObject.getter(v135);
      v137 = static os_log_type_t.error.getter(v136);
      if (os_log_type_enabled(v136, v137))
      {
        v138 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v138 = 0;
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "Missing share id in payload.", v138, 2u);
        swift_slowDealloc(v138, -1, -1);
      }
      v121 = (uint64_t)v249[190];
      sub_10001BC14(v130, v131);

      sub_1000126B0(v121, type metadata accessor for KeyDropFetchResponse.LocationPayload);
      v91 = (unint64_t)v249[194] + 1;
      if ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v91 == v249[193])
        goto LABEL_12;
    }
    v151 = v249[183];
    v152 = v249[178];
    v153 = v249[177];
    v154 = v249[176];
    v155 = v249[175];
    v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v152 + 4);
    v249[198] = v156;
    v156((uint64_t)v151, (uint64_t)v154, (uint64_t)v153);
    v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v152 + 2);
    v249[199] = v157;
    v157((uint64_t)v155, (uint64_t)v151, (uint64_t)v153);
    (*((void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), _QWORD, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))v152
     + 7))(v155, 0, 1, v153);
    sub_10001BBBC(v130, v131);
    v158 = (uint64_t (***)(uint64_t, uint64_t, uint64_t))swift_task_alloc(dword_1010F1944);
    v249[200] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v158;
    *v158 = v249;
    v158[1] = (uint64_t (**)(uint64_t, uint64_t, uint64_t))sub_10018C4F8;
    return sub_1001AB0F8(v130, v131, (uint64_t)v249[175]);
  }
}

uint64_t sub_1001AB0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  v5 = type metadata accessor for EncryptedData(0);
  v4[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[18] = v6;
  v4[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  v4[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[21] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v9);
  v4[23] = swift_task_alloc(v9);
  v4[24] = swift_task_alloc(v9);
  v4[25] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v4[27] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[28] = v12;
  v4[29] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001AB1F8, v3, 0);
}

uint64_t sub_1001AB1F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v6;

  v1 = v0[27];
  v2 = v0[28];
  v3 = v0[26];
  sub_10000F9B8(v0[15], v3, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v0[26], &qword_1010ED860);
    v0[35] = 0;
    v0[36] = 0xF000000000000000;
    v0[34] = 0;
    v4 = *(_QWORD *)(v0[16] + 136);
    v0[37] = v4;
    return swift_task_switch(sub_1001AB3C4, v4, 0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[28] + 32))(v0[29], v0[26], v0[27]);
    v6 = (uint64_t **)swift_task_alloc(dword_10110D194);
    v0[30] = (uint64_t)v6;
    *v6 = v0;
    v6[1] = (uint64_t *)sub_1001AB2E8;
    return sub_10091E694(v0[13], v0[14], v0[29]);
  }
}

uint64_t sub_1001AB2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 240);
  *(_QWORD *)(*(_QWORD *)v3 + 248) = v2;
  swift_task_dealloc(v7);
  v8 = v6[16];
  if (v2)
  {
    v9 = sub_1001AC028;
  }
  else
  {
    v6[32] = a2;
    v6[33] = a1;
    v9 = sub_1001AB360;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1001AB360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 248);
  *(int8x16_t *)(v0 + 280) = vextq_s8(*(int8x16_t *)(v0 + 256), *(int8x16_t *)(v0 + 256), 8uLL);
  *(_QWORD *)(v0 + 272) = v1;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 136);
  *(_QWORD *)(v0 + 296) = v2;
  return swift_task_switch(sub_1001AB3C4, v2, 0);
}

uint64_t sub_1001AB3C4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 304) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_1001AB440;
  return unsafeBlocking<A>(_:)(v0 + 80, sub_10001ED30, *(_QWORD *)(v0 + 296), v3);
}

uint64_t sub_1001AB440()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_release();
  return swift_task_switch(sub_1001AB49C, v1, 0);
}

uint64_t sub_1001AB49C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[16];
  v0[39] = v0[10];
  return swift_task_switch(sub_1001AB4B8, v1, 0);
}

uint64_t sub_1001AB4B8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 312);
  if (v1 >> 60 == 15)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      *(_QWORD *)(v0 + 320) = 1;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
        v2 = sub_1008C5DA8(v2);
      *(_QWORD *)(v0 + 328) = v2;
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        v5 = *(_QWORD *)(v0 + 192);
        v4 = *(_QWORD *)(v0 + 200);
        v7 = *(_QWORD *)(v0 + 176);
        v6 = *(_QWORD *)(v0 + 184);
        v8 = *(_QWORD *)(v0 + 160);
        v9 = *(_QWORD *)(v0 + 128);
        v10 = v3 - 1;
        sub_1000126EC(v2+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * (v3 - 1), v7, type metadata accessor for MemberSharingCircle);
        *(_QWORD *)(v2 + 16) = v10;
        sub_1000126EC(v7, v6, type metadata accessor for MemberSharingCircle);
        sub_1000126EC(v6, v5, type metadata accessor for MemberSharingCircle);
        sub_1000126EC(v5, v4, type metadata accessor for MemberSharingCircle);
        *(_QWORD *)(v0 + 336) = *(_QWORD *)(v9 + 128);
        v11 = v4 + *(int *)(v8 + 28);
        v12 = (_QWORD *)swift_task_alloc(dword_10110D164);
        *(_QWORD *)(v0 + 344) = v12;
        *v12 = v0;
        v12[1] = sub_1001AB8E8;
        return sub_10090C6D8(v0 + 16, v11);
      }
      __break(1u);
    }
    else if (qword_1010E99C0 == -1)
    {
LABEL_14:
      v30 = type metadata accessor for Logger(0);
      v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B69B0);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v34 = 134217984;
        *(_QWORD *)(v0 + 96) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v34 + 4, v34 + 12);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Did not find Circle Shared Secret to decrypt Private Key after %ld attempts.", v34, 0xCu);
        swift_slowDealloc(v34, -1, -1);
      }

      swift_bridgeObjectRelease();
      v21 = 0;
      v23 = 0xF000000000000000;
      goto LABEL_18;
    }
    swift_once(&qword_1010E99C0, sub_100173218);
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(v0 + 272);
  v15 = *(_QWORD *)(v0 + 280);
  sub_10001BD08(v15, *(_QWORD *)(v0 + 288));
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B69B0);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v20 = 134217984;
    *(_QWORD *)(v0 + 88) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v20 + 4, v20 + 12);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found decryption key after %ld attempts.", v20, 0xCu);
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = sub_1002FB3AC(v15, v1);
  v23 = v22;
  swift_bridgeObjectRelease();
  if (v14)
  {
    sub_10001EF3C(v15, v1);
    v24 = *(_QWORD *)(v0 + 200);
    v25 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 192);
    v28 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  sub_10001EF3C(v15, v1);
LABEL_18:
  v36 = *(_QWORD *)(v0 + 200);
  v35 = *(_QWORD *)(v0 + 208);
  v38 = *(_QWORD *)(v0 + 184);
  v37 = *(_QWORD *)(v0 + 192);
  v39 = *(_QWORD *)(v0 + 176);
  v40 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v21, v23);
}

uint64_t sub_1001AB8E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v2[48] = v0;
    v4 = v2[16];
    v5 = sub_1001ABD74;
  }
  else
  {
    v4 = v2[42];
    v5 = sub_1001AB954;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1001AB954()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t (*v20)();
  uint64_t v21;
  uint64_t v22;

  v2 = v0[2];
  v1 = v0[3];
  if (v1 >> 60 == 15)
  {
    v3 = sub_1000D94EC();
    v4 = swift_allocError(&type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, v3, 0, 0);
    *v5 = 9;
    swift_willThrow(v4);
LABEL_6:
    sub_1000D9530(v0 + 2);
    v0[48] = v4;
    v21 = v0[16];
    v20 = sub_1001ABD74;
    return swift_task_switch(v20, v21, 0);
  }
  v22 = v0[44];
  v6 = v0[17];
  v8 = v0[13];
  v7 = v0[14];
  v9 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  sub_10001BBBC(v2, v1);
  v10 = sub_10001BBBC(v2, v1);
  PropertyListDecoder.init()(v10);
  v11 = sub_100006204(&qword_1010F1950, (uint64_t (*)(uint64_t))&type metadata accessor for EncryptedData, (uint64_t)&protocol conformance descriptor for EncryptedData);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, v8, v7, v6, v11);
  v4 = v22;
  if (v22)
  {
    swift_release();
    sub_10001EF3C(v2, v1);
    sub_10001EF3C(v2, v1);
    goto LABEL_6;
  }
  v12 = EncryptedData.decrypt(key:)(v2, v1);
  v14 = v13;
  v0[45] = 0;
  v16 = v0[18];
  v15 = v0[19];
  v17 = v0[17];
  v19 = v0[16];
  v0[46] = v14;
  v0[47] = v12;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  swift_release();
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v2, v1);
  sub_1000D9530(v0 + 2);
  v20 = sub_1001ABB30;
  v21 = v19;
  return swift_task_switch(v20, v21, 0);
}

uint64_t sub_1001ABB30()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for MemberSharingCircle);
  sub_10001BBBC(v2, v1);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 320);
  sub_10001BD08(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B69B0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    *(_QWORD *)(v0 + 88) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Found decryption key after %ld attempts.", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = sub_1002FB3AC(v4, v3);
  v14 = v13;
  swift_bridgeObjectRelease();
  sub_10001EF3C(v4, v3);
  if (v5)
  {
    v15 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 208);
    v25 = *(_QWORD *)(v0 + 184);
    v24 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 176);
    v27 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v12, v14);
  }
}

uint64_t sub_1001ABD74()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 384);
  sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for MemberSharingCircle);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  if (*(_QWORD *)(v2 + 16))
  {
    *(_QWORD *)(v0 + 320) = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
    }
    else if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) != 0)
    {
LABEL_4:
      *(_QWORD *)(v0 + 328) = v2;
      v4 = *(_QWORD *)(v2 + 16);
      if (v4)
      {
        v6 = *(_QWORD *)(v0 + 192);
        v5 = *(_QWORD *)(v0 + 200);
        v8 = *(_QWORD *)(v0 + 176);
        v7 = *(_QWORD *)(v0 + 184);
        v9 = *(_QWORD *)(v0 + 160);
        v10 = *(_QWORD *)(v0 + 128);
        v11 = v4 - 1;
        sub_1000126EC(v2+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 168) + 72) * (v4 - 1), v8, type metadata accessor for MemberSharingCircle);
        *(_QWORD *)(v2 + 16) = v11;
        sub_1000126EC(v8, v7, type metadata accessor for MemberSharingCircle);
        sub_1000126EC(v7, v6, type metadata accessor for MemberSharingCircle);
        sub_1000126EC(v6, v5, type metadata accessor for MemberSharingCircle);
        *(_QWORD *)(v0 + 336) = *(_QWORD *)(v10 + 128);
        v12 = v5 + *(int *)(v9 + 28);
        v13 = (_QWORD *)swift_task_alloc(dword_10110D164);
        *(_QWORD *)(v0 + 344) = v13;
        *v13 = v0;
        v13[1] = sub_1001AB8E8;
        return sub_10090C6D8(v0 + 16, v12);
      }
      __break(1u);
      goto LABEL_13;
    }
    v2 = sub_1008C5DA8(v2);
    goto LABEL_4;
  }
  if (qword_1010E99C0 != -1)
LABEL_13:
    swift_once(&qword_1010E99C0, sub_100173218);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B69B0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    *(_QWORD *)(v0 + 96) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Did not find Circle Shared Secret to decrypt Private Key after %ld attempts.", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }

  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 184);
  v22 = *(_QWORD *)(v0 + 192);
  v24 = *(_QWORD *)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
}

uint64_t sub_1001AC028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AC0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v9 + 184) = a8;
  *(_QWORD *)(v9 + 192) = v8;
  *(_BYTE *)(v9 + 392) = a7;
  *(_QWORD *)(v9 + 168) = a5;
  *(_QWORD *)(v9 + 176) = a6;
  *(_QWORD *)(v9 + 152) = a3;
  *(_QWORD *)(v9 + 160) = a4;
  *(_QWORD *)(v9 + 136) = a1;
  *(_QWORD *)(v9 + 144) = a2;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  *(_QWORD *)(v9 + 200) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  *(_QWORD *)(v9 + 208) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 216) = v12;
  *(_QWORD *)(v9 + 224) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RawSearchResult(0);
  *(_QWORD *)(v9 + 232) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  *(_QWORD *)(v9 + 240) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 248) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 256) = swift_task_alloc(v16);
  *(_QWORD *)(v9 + 264) = swift_task_alloc(v16);
  *(_QWORD *)(v9 + 272) = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1011091A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 280) = swift_task_alloc(v17);
  *(_QWORD *)(v9 + 288) = swift_task_alloc(v17);
  *(_QWORD *)(v9 + 296) = swift_task_alloc(v17);
  v18 = type metadata accessor for UUID(0);
  *(_QWORD *)(v9 + 304) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 + 312) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 320) = swift_task_alloc(v20);
  *(_QWORD *)(v9 + 328) = swift_task_alloc(v20);
  v21 = type metadata accessor for BeaconPayloadv1(0);
  *(_QWORD *)(v9 + 336) = v21;
  *(_QWORD *)(v9 + 344) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001AC258, v8, 0);
}

uint64_t sub_1001AC258()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(void **)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + 136);
  *(_QWORD *)(v0 + 352) = v6;
  v7 = v3;
  sub_10001BBBC(v5, v4);
  sub_10001BBBC(v2, v1);
  BeaconPayloadv1.init(using:data:advertisement:)((uint64_t)v7, v5, v4);
  if (*(_BYTE *)(v0 + 392) != 1)
    return swift_task_switch(sub_1001AC5E0, v6, 0);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = *(_QWORD *)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 248);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 16))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 304));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v12 = *(int **)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 224);
  v40 = *(_BYTE **)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 216);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = *(unsigned __int8 *)(v11 + v12[10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v11 + v12[5], v17);
  v20 = *(double *)(v11 + v12[7]);
  v21 = *(double *)(v11 + v12[8]);
  v22 = *(double *)(v11 + v12[9]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v18, 1, 1, v17);
  sub_10000F9B8(v13, v14, &qword_1011091A0);
  sub_10096339C(v19, v15, 15, v18, v14, 256, v40, v20, v21, v22);
  sub_100004048(v13, &qword_1011091A0);
  v23 = *(_QWORD *)(v0 + 344);
  v24 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 328);
  v26 = *(_QWORD *)(v0 + 304);
  v27 = *(_QWORD *)(v0 + 312);
  v33 = *(_QWORD *)(v0 + 296);
  v34 = *(_QWORD *)(v0 + 288);
  v35 = *(_QWORD *)(v0 + 280);
  v36 = *(_QWORD *)(v0 + 272);
  v37 = *(_QWORD *)(v0 + 264);
  v38 = *(_QWORD *)(v0 + 256);
  v28 = *(_QWORD *)(v0 + 232);
  v39 = *(_QWORD *)(v0 + 224);
  v41 = *(_QWORD *)(v0 + 200);
  v29 = *(_QWORD *)(v0 + 136);
  sub_1000126B0(v23, type metadata accessor for BeaconPayloadv1);
  v30 = sub_10001A9A8(&qword_1010F1938);
  v31 = v29 + *(int *)(v30 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v29, v25, v26);
  sub_1000126EC(v28, v31, type metadata accessor for RawSearchResult);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 0, 1, v30);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v28);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001AC5E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 360) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_1001AC658;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10007C6FC, *(_QWORD *)(v0 + 352), v3);
}

uint64_t sub_1001AC658()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_release();
  return swift_task_switch(sub_1001AC6B4, v1, 0);
}

uint64_t sub_1001AC6B4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[24];
  v0[46] = v0[15];
  return swift_task_switch(sub_1001AC6D0, v1, 0);
}

uint64_t sub_1001AC6D0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = v0[46];
  v3 = v0[21];
  v2 = v0[22];
  v4 = (_QWORD *)swift_allocObject(&unk_10105C930, 40, 7);
  v0[47] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  sub_10001BBBC(v3, v2);
  v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[48] = v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  *v6 = v0;
  v6[1] = sub_1001AC794;
  return unsafeBlocking<A>(_:)(v0 + 7, sub_1001AE660, v4, v7);
}

uint64_t sub_1001AC794()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_release();
  return swift_task_switch(sub_1001AC7F4, v1, 0);
}

uint64_t sub_1001AC7F4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  double v78;
  double v79;
  double v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(void);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  void (*v147)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151[2];

  v1 = v0[7];
  v2 = *(_QWORD *)(v1 + 16);
  v146 = v0 + 14;
  if (v2 >= 2)
  {
    if (qword_1010E99C0 != -1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v3 = v0[21];
    v4 = v0[22];
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B69B0);
    sub_10001BBBC(v3, v4);
    v6 = sub_10001BBBC(v3, v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v11 = v0[21];
    v10 = v0[22];
    if (v9)
    {
      v12 = swift_slowAlloc(22, -1);
      v142 = swift_slowAlloc(32, -1);
      v151[0] = v142;
      *(_DWORD *)v12 = 141558275;
      v0[14] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v146, v0 + 15, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      v0[2] = v11;
      v0[3] = v10;
      v13 = sub_1001AE66C();
      v14 = RawRepresentable<>.hexString.getter(&type metadata for Advertisement, v13);
      v0[16] = sub_100016940(v14, v15, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v11, v10);
      sub_10001BC14(v11, v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Multiple beacons reconciled for advertisement %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v142, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_10001BC14(v0[21], v0[22]);
      sub_10001BC14(v11, v10);
    }

    v2 = *(_QWORD *)(v1 + 16);
  }
  v16 = v0[36];
  v17 = v0[30];
  v18 = v0[31];
  if (v2)
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), v0[36], type metadata accessor for BeaconKeyManager.IndexInformation);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v19(v16, 0, 1, v17);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v19(v0[36], 1, 1, v17);
  }
  v20 = v0[36];
  v21 = v0[30];
  v22 = v0[31];
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    v147 = v19;
    sub_100004048(v0[36], &qword_1011091A0);
    if (qword_1010E99C0 != -1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v23 = v0[21];
    v24 = v0[22];
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B69B0);
    sub_10001BBBC(v23, v24);
    v26 = sub_10001BBBC(v23, v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = os_log_type_enabled(v27, v28);
    v31 = v0[21];
    v30 = v0[22];
    if (v29)
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(32, -1);
      v151[0] = v33;
      *(_DWORD *)v32 = 141558275;
      v0[6] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2081;
      v0[4] = v31;
      v0[5] = v30;
      v34 = sub_1001AE66C();
      v35 = RawRepresentable<>.hexString.getter(&type metadata for Advertisement, v34);
      v0[8] = sub_100016940(v35, v36, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v31, v30);
      sub_10001BC14(v31, v30);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Cannot reconcile advertisement %{private,mask.hash}s.", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      sub_10001BC14(v0[21], v0[22]);
      sub_10001BC14(v31, v30);
    }

    v69 = (int *)v0[42];
    v70 = v0[43];
    v71 = v0[35];
    v72 = v0[30];
    v138 = (_BYTE *)v0[29];
    v73 = v0[27];
    v74 = v0[28];
    v76 = v0[25];
    v75 = v0[26];
    v77 = *(unsigned __int8 *)(v70 + v69[10]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v74, v70 + v69[5], v75);
    v78 = *(double *)(v70 + v69[7]);
    v79 = *(double *)(v70 + v69[8]);
    v80 = *(double *)(v70 + v69[9]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v76, 1, 1, v75);
    v147(v71, 1, 1, v72);
    sub_10096339C(v77, v74, 7, v76, v71, 256, v138, v78, v79, v80);
    swift_release();
    v81 = v0 + 23;
    v82 = 2;
  }
  else
  {
    v37 = v0[37];
    v38 = v0[34];
    v39 = v0[30];
    sub_1000126EC(v0[36], v38, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10005972C(v38, v37, type metadata accessor for BeaconKeyManager.IndexInformation);
    v19(v37, 0, 1, v39);
    if (qword_1010E99C0 != -1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v41 = v0[39];
    v40 = v0[40];
    v42 = v0[38];
    v44 = v0[33];
    v43 = v0[34];
    v45 = v0[32];
    v46 = v0[23];
    v47 = type metadata accessor for Logger(0);
    sub_10001A9E8(v47, (uint64_t)qword_1011B69B0);
    sub_10005972C(v43, v44, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10005972C(v43, v45, type metadata accessor for BeaconKeyManager.IndexInformation);
    v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
    v49 = v48(v40, v46, v42);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.info.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v54 = v0[39];
    v53 = v0[40];
    v55 = v0[38];
    v56 = v0[32];
    v57 = v0[33];
    if (v52)
    {
      v131 = v0[40];
      v127 = v0[30];
      type = v51;
      v58 = swift_slowAlloc(52, -1);
      v135 = swift_slowAlloc(96, -1);
      v151[0] = v135;
      *(_DWORD *)v58 = 141559043;
      v0[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2081;
      v59 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v55, v59);
      v137 = v54;
      v0[10] = sub_100016940(v60, v61, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v57, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v58 + 22) = 2082;
      v62 = (_QWORD *)(v56 + *(int *)(v127 + 20));
      v64 = v62[3];
      v63 = v62[4];
      sub_10001AA44(v62, v64);
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v64, *(_QWORD *)(v63 + 16));
      v0[11] = sub_100016940(v65, v66, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v58 + 24, v58 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v56, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v58 + 32) = 2160;
      v0[12] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v58 + 34, v58 + 42);
      *(_WORD *)(v58 + 42) = 2081;
      v67 = dispatch thunk of CustomStringConvertible.description.getter(v55, v59);
      v0[13] = sub_100016940(v67, v68, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v146, v58 + 44, v58 + 52);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v131, v55);
      _os_log_impl((void *)&_mh_execute_header, v50, type, "\"Reconciled from location fetch - reconciled Beacon: %{private,mask.hash}s,\nindex: %{public}s - initial beacon: %{private,mask.hash}s.", (uint8_t *)v58, 0x34u);
      swift_arrayDestroy(v135, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_1000126B0(v0[33], type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_1000126B0(v56, type metadata accessor for BeaconKeyManager.IndexInformation);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    }

    v83 = (_QWORD *)(v0[34] + *(int *)(v0[30] + 20));
    v85 = v83[3];
    v84 = v83[4];
    sub_10001AA44(v83, v85);
    v86 = sub_100ABA6B0(v85, v84);
    if (v86)
    {
      if (v86 != 1)
      {
        v112 = v0[43];
        v113 = v0[37];
        v114 = v0[34];
        v115 = sub_1000D9414();
        v150 = swift_allocError(&type metadata for BeaconSharingService.BeaconSharingServiceError, v115, 0, 0);
        *v116 = 1;
        swift_willThrow(v150);
        swift_release();
        sub_100004048(v113, &qword_1011091A0);
        sub_1000126B0(v112, type metadata accessor for BeaconPayloadv1);
        sub_1000126B0(v114, type metadata accessor for BeaconKeyManager.IndexInformation);
        v118 = v0[40];
        v117 = v0[41];
        v120 = v0[36];
        v119 = v0[37];
        v122 = v0[34];
        v121 = v0[35];
        v124 = v0[32];
        v123 = v0[33];
        v125 = v0[29];
        v141 = v0[28];
        v145 = v0[25];
        swift_task_dealloc(v0[43]);
        swift_task_dealloc(v117);
        swift_task_dealloc(v118);
        swift_task_dealloc(v119);
        swift_task_dealloc(v120);
        swift_task_dealloc(v121);
        swift_task_dealloc(v122);
        swift_task_dealloc(v123);
        swift_task_dealloc(v124);
        swift_task_dealloc(v125);
        swift_task_dealloc(v141);
        swift_task_dealloc(v145);
        v110 = (uint64_t (*)(void))v0[1];
        return v110();
      }
      v87 = 13;
    }
    else
    {
      v87 = 7;
    }
    v148 = v87;
    v81 = v0 + 41;
    v88 = v0[41];
    v89 = v0[38];
    v90 = v0[34];
    swift_release();
    v48(v88, v90, v89);
    sub_1000126B0(v90, type metadata accessor for BeaconKeyManager.IndexInformation);
    v92 = (int *)v0[42];
    v91 = v0[43];
    v93 = v0[37];
    v94 = v0[35];
    v95 = v0[28];
    v143 = (_BYTE *)v0[29];
    v96 = v0[26];
    v97 = v0[27];
    v98 = v0[25];
    v139 = *(unsigned __int8 *)(v91 + v92[10]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v95, v91 + v92[5], v96);
    v99 = *(double *)(v91 + v92[7]);
    v100 = *(double *)(v91 + v92[8]);
    v101 = *(double *)(v91 + v92[9]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v97 + 56))(v98, 1, 1, v96);
    sub_10000F9B8(v93, v94, &qword_1011091A0);
    sub_10096339C(v139, v95, v148, v98, v94, 256, v143, v99, v100, v101);
    sub_100004048(v93, &qword_1011091A0);
    v82 = 4;
  }
  v102 = *v81;
  v103 = v0[43];
  v104 = v0[39];
  v126 = v0[41];
  v128 = v0[40];
  v105 = v0[38];
  v129 = v0[37];
  v130 = v0[36];
  v132 = v0[35];
  *(_QWORD *)typea = v0[34];
  v136 = v0[33];
  v140 = v0[32];
  v106 = v0[29];
  v144 = v0[28];
  v149 = v0[25];
  v107 = v0[17];
  sub_1000126B0(v103, type metadata accessor for BeaconPayloadv1);
  v108 = sub_10001A9A8(&qword_1010F1938);
  v109 = v107 + *(int *)(v108 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 8 * v82))(v107, v102, v105);
  sub_1000126EC(v106, v109, type metadata accessor for RawSearchResult);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56))(v107, 0, 1, v108);
  swift_task_dealloc(v103);
  swift_task_dealloc(v126);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v132);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v136);
  swift_task_dealloc(v140);
  swift_task_dealloc(v106);
  swift_task_dealloc(v144);
  swift_task_dealloc(v149);
  v110 = (uint64_t (*)(void))v0[1];
  return v110();
}

uint64_t sub_1001AD454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[5];
  uint64_t v19;
  unint64_t v20;

  PrivateKey.publicKey.getter(a2, a3);
  v7 = v6;
  v9 = v8;
  sub_10001BBBC(v6, v8);
  v10 = sub_1007E6F8C(v7, v9);
  v12 = v11;
  sub_10001BC14(v7, v9);
  sub_1002F7394(v10, v12);
  v13 = sub_10001BC14(v7, v9);
  v14 = v19;
  v15 = v20;
  __chkstk_darwin(v13);
  v18[2] = a1;
  v18[3] = v19;
  v18[4] = v20;
  v16 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001AE640, v18, v16);
  result = sub_10001BC14(v14, v15);
  *a4 = v19;
  return result;
}

uint64_t sub_1001AD614(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20));
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  return dispatch thunk of CustomStringConvertible.description.getter(v2, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1001AD65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010F1938);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v5 + 48);
  v9 = (uint64_t)&v7[v8];
  v10 = a1 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  sub_10005972C(v10, v9, type metadata accessor for RawSearchResult);
  v13 = v9 + *(int *)(type metadata accessor for RawSearchResult(0) + 20);
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a2, v13, v14);
  sub_1000126B0(v9, type metadata accessor for RawSearchResult);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v11);
}

uint64_t sub_1001AD764@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_10001A9A8(&qword_1010F1938);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v5 + 48);
  v9 = (uint64_t)&v7[v8];
  v10 = a1 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  sub_10005972C(v10, v9, type metadata accessor for RawSearchResult);
  LOBYTE(v10) = *(_BYTE *)(v9 + *(int *)(type metadata accessor for RawSearchResult(0) + 36));
  sub_1000126B0(v9, type metadata accessor for RawSearchResult);
  *a2 = v10;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v11);
}

uint64_t sub_1001AD850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v20[24];

  v4 = sub_10001A9A8(&qword_1010F1938);
  v5 = __chkstk_darwin(v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(int *)(v5 + 48);
  v9 = (uint64_t)&v7[v8];
  v10 = a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v7, a2, v11);
  sub_10005972C(v10, v9, type metadata accessor for RawSearchResult);
  swift_beginAccess(a1 + 16, v20, 32, 0);
  v13 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v13 + 16) && (v14 = sub_100003FB0((uint64_t)v7), (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
    swift_endAccess(v20);
    v17 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    swift_endAccess(v20);
    v17 = 0;
  }
  sub_1000126B0(v9, type metadata accessor for RawSearchResult);
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v11);
  return v17;
}

uint64_t sub_1001AD984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[8];

  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_1001AE8B0, v7, v5);
  *a4 = v7[7];
  return result;
}

uint64_t sub_1001AD9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_100A08BB0((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1001ADAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_100A08BB0(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t sub_1001ADB74(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[14];
  _BYTE v10[2];

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a3 > 0xFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  memset(v9, 0, sizeof(v9));
  v10[0] = a3;
  v4 = (int)a1;
  if ((int)a1 > a1 >> 32)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
    __DataStorage._length.getter();
    v7 = 0;
    goto LABEL_8;
  }
  v6 = __DataStorage._offset.getter();
  if (__OFSUB__(v4, v6))
LABEL_12:
    __break(1u);
  v5 += v4 - v6;
  __DataStorage._length.getter();
  v7 = v5 + a3;
LABEL_8:
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v7, v9, v10);
  return *(_QWORD *)v9;
}

uint64_t sub_1001ADC68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001ADC94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADCA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADCB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001ADCC4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

uint64_t sub_1001ADCD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADCE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADCF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001ADD80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = v1 + *(int *)(v3 + 20) + ((v4 + 16) & ~v4);
  v6 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_1001ADDE4()
{
  uint64_t v0;

  return sub_1000D72CC(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001ADDF4()
{
  uint64_t v0;

  return sub_1000D7714(*(void (**)(uint64_t *__return_ptr))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001ADE04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADE14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADE24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001ADE34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADE44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADE54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADE64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADE74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001ADE98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADEA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADEB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADEC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADEE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1001AD454(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1001ADEF0(uint64_t a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1001ADF24()
{
  uint64_t v0;

  return sub_1000D76B0(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1001ADF2C()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
}

uint64_t sub_1001ADF38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADF48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADF58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001ADF68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADF78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADF88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADF98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADFA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADFB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001ADFCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001AE02C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80)), v3);
}

uint64_t sub_1001AE074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F1938) - 8) + 80);
  return sub_1001AD65C(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1001AE0BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = sub_10001A9A8(&qword_1010F1938);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v17 = *(_QWORD *)(v2 + 64);
  v18 = v0;
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v0 + v4, v5);
  v7 = v0 + v4 + *(int *)(v1 + 48);
  v8 = (int *)type metadata accessor for RawSearchResult(0);
  v9 = v7 + v8[5];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v7 + v8[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  v14 = v7 + v8[11];
  v15 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v6(v14, v5);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v14 + *(int *)(v15 + 20)));
  }
  v6(v7 + v8[12], v5);
  return swift_deallocObject(v18, v4 + v17, v3 | 7);
}

uint64_t sub_1001AE220@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F1938) - 8) + 80);
  return sub_1001AD764(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1001AE268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = sub_10001A9A8(&qword_1010F1938);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v16 = *(_QWORD *)(v2 + 64);
  swift_release();
  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v0 + ((v3 + 24) & ~v3), v4);
  v6 = v0 + ((v3 + 24) & ~v3) + *(int *)(v1 + 48);
  v7 = (int *)type metadata accessor for RawSearchResult(0);
  v8 = v6 + v7[5];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v12 = v6 + v7[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
    v11(v12, v9);
  v13 = v6 + v7[11];
  v14 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v5(v13, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v13 + *(int *)(v14 + 20)));
  }
  v5(v6 + v7[12], v4);
  return swift_deallocObject(v0, ((v3 + 24) & ~v3) + v16, v3 | 7);
}

uint64_t sub_1001AE3D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F1938) - 8) + 80);
  return sub_1001AD850(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1001AE410()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE420()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE430()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AE440()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE450()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE460()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE470()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE480()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE490()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE4A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE4B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE4C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8) + 80);
  v4 = v1 + ((v3 + 16) & ~v3);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t sub_1001AE51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v7 + *(int *)(v1 + 20)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001AE5A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8) + 80);
  return sub_1001AD614(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1001AE5D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE5E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE5F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AE600()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE610()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE620()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE630()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AE640@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100DCF858(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1001AE660@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_1001AD984(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_1001AE66C()
{
  unint64_t result;

  result = qword_10111C0B0;
  if (!qword_10111C0B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_10111C0B0);
  }
  return result;
}

uint64_t sub_1001AE6B8()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A82108);
}

_QWORD *sub_1001AE6D8(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_1001AE700(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for MemberSharingCircle(0);
  return static UUID.== infix(_:_:)(a1, v3 + *(int *)(v4 + 32)) & 1;
}

uint64_t sub_1001AE74C(uint64_t a1)
{
  sub_10001BBBC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1001AE778(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1001AE7B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100188A58((_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001AE89C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001AE7B4(a1);
}

uint64_t sub_1001AE8B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001AE640(a1);
}

uint64_t sub_1001AE8C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001AE900 + 4 * byte_100E2A890[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_1001AE900()
{
  return 12645;
}

unint64_t sub_1001AE90C()
{
  return 0xD000000000000013;
}

uint64_t sub_1001AEAD0()
{
  return 0x657261776D726966;
}

uint64_t sub_1001AEB10()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1001AEB28(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  __int128 v35;
  _BYTE v36[16];
  _BYTE v37[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F19D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001B12E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PencilPairingLockCheckRequestContent.CodingKeys, &type metadata for PencilPairingLockCheckRequestContent.CodingKeys, v11, v9, v10);
  v35 = *v3;
  v34 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v35 = v3[1];
    v34 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    sub_10016924C((uint64_t)(v3 + 2), (uint64_t)v37);
    sub_10016924C((uint64_t)v37, (uint64_t)&v35);
    v34 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v35 = v3[3];
    v34 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v35 = v3[4];
    v34 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v35 = v3[5];
    v34 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v13 = *((_QWORD *)v3 + 12);
    v14 = *((_QWORD *)v3 + 13);
    LOBYTE(v35) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v35, v5);
    v15 = *((_QWORD *)v3 + 14);
    v16 = *((_QWORD *)v3 + 15);
    LOBYTE(v35) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v35, v5);
    v17 = *((_QWORD *)v3 + 16);
    v18 = *((_QWORD *)v3 + 17);
    LOBYTE(v35) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v35, v5);
    v35 = v3[9];
    v34 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v35 = v3[10];
    v34 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v35 = v3[11];
    v34 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v19 = *((_QWORD *)v3 + 24);
    v20 = *((unsigned __int8 *)v3 + 200);
    LOBYTE(v35) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v35, v5);
    *(_QWORD *)&v35 = *((_QWORD *)v3 + 26);
    v34 = 13;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v22 = sub_1001B1324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, v21, v22);
    v23 = *((_QWORD *)v3 + 27);
    LOBYTE(v35) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v35, v5);
    v35 = v3[14];
    v34 = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v35 = v3[15];
    v34 = 16;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    sub_10016924C((uint64_t)(v3 + 16), (uint64_t)v36);
    sub_10016924C((uint64_t)v36, (uint64_t)&v35);
    v34 = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v35, &v34, v5, &type metadata for Data, v12);
    v24 = *((_QWORD *)v3 + 34);
    v25 = *((_QWORD *)v3 + 35);
    LOBYTE(v35) = 18;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, &v35, v5);
    v26 = *((_QWORD *)v3 + 36);
    v27 = *((_QWORD *)v3 + 37);
    LOBYTE(v35) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v35, v5);
    v28 = *((_QWORD *)v3 + 38);
    v29 = *((_QWORD *)v3 + 39);
    LOBYTE(v35) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v35, v5);
    v30 = *((_QWORD *)v3 + 40);
    v31 = *((_QWORD *)v3 + 41);
    LOBYTE(v35) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, &v35, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001AF09C()
{
  unsigned __int8 *v0;

  return sub_1001AE8C4(*v0);
}

uint64_t sub_1001AF0A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001B15BC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001AF0C8(_BYTE *a1@<X8>)
{
  *a1 = 22;
}

uint64_t sub_1001AF0D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001B12E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF0FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001B12E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001AF124(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[336];

  memcpy(v4, v1, sizeof(v4));
  return sub_1001AEB28(a1);
}

uint64_t *sub_1001AF174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v5 = *(_QWORD *)(a1 + 240);
  v4 = *(_QWORD *)(a1 + 248);
  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(a1 + 264);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 16);
  v41 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 48);
  v43 = *(_QWORD *)(a1 + 80);
  v26 = *(_QWORD *)(a1 + 88);
  v40 = *(_QWORD *)(a1 + 96);
  v42 = *(_QWORD *)(a1 + 104);
  v44 = *(_QWORD *)(a1 + 128);
  v28 = *(_QWORD *)(a1 + 152);
  v29 = *(_QWORD *)(a1 + 144);
  v34 = *(_QWORD *)(a1 + 160);
  v30 = *(_QWORD *)(a1 + 176);
  v31 = *(_QWORD *)(a1 + 184);
  v32 = *(_QWORD *)(a1 + 168);
  v27 = *(_QWORD *)(a1 + 192);
  v38 = *(_QWORD *)(a1 + 208);
  v39 = *(_QWORD *)(a1 + 200);
  v37 = *(_QWORD *)(a1 + 216);
  v33 = *(_QWORD *)(a1 + 224);
  v35 = *(_QWORD *)(a1 + 232);
  v22 = *(_QWORD *)(a1 + 272);
  v36 = *(_QWORD *)(a1 + 280);
  v18 = *(_QWORD *)(a1 + 288);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 296);
  v23 = *(_QWORD *)(a1 + 72);
  sub_10001BBBC(v24, v23);
  sub_10001BBBC(v5, v4);
  sub_10001BBBC(v6, v7);
  sub_10001BD08(v8, v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v41);
  sub_10001BBBC(v43, v26);
  sub_10001BBBC(v40, v42);
  swift_bridgeObjectRetain(v44);
  sub_10001BBBC(v29, v28);
  sub_10001BBBC(v34, v32);
  sub_10001BBBC(v30, v31);
  sub_10001BBBC(v27, v39);
  sub_10001BBBC(v38, v37);
  sub_10001BD08(v33, v35);
  swift_bridgeObjectRetain(v36);
  if (v25 >> 60 != 15)
  {
    v13 = sub_1001EDBAC(v18, v25);
    v15 = v14;
    Data.hexString.getter(v13, v14);
    sub_10001BC14(v13, v15);
    __asm { BR              X11 }
  }
  result = sub_1001B0834((uint64_t *)a1);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v29;
  *(_QWORD *)(a2 + 56) = v28;
  v45 = *(_BYTE *)(a1 + 120);
  *(_QWORD *)(a2 + 64) = v34;
  v16 = *(_QWORD *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 72) = v32;
  *(_QWORD *)(a2 + 80) = v30;
  *(_QWORD *)(a2 + 88) = v31;
  *(_QWORD *)(a2 + 96) = v21;
  *(_QWORD *)(a2 + 104) = v10;
  *(_QWORD *)(a2 + 112) = v20;
  *(_QWORD *)(a2 + 120) = v41;
  *(_QWORD *)(a2 + 128) = v19;
  *(_QWORD *)(a2 + 136) = v11;
  *(_QWORD *)(a2 + 144) = v24;
  *(_QWORD *)(a2 + 152) = v23;
  *(_QWORD *)(a2 + 160) = v43;
  *(_QWORD *)(a2 + 168) = v26;
  *(_QWORD *)(a2 + 176) = v40;
  *(_QWORD *)(a2 + 184) = v42;
  *(_QWORD *)(a2 + 192) = v16;
  *(_BYTE *)(a2 + 200) = v45;
  *(_QWORD *)(a2 + 208) = v44;
  *(_QWORD *)(a2 + 216) = v17;
  *(_QWORD *)(a2 + 224) = v27;
  *(_QWORD *)(a2 + 232) = v39;
  *(_QWORD *)(a2 + 240) = v38;
  *(_QWORD *)(a2 + 248) = v37;
  *(_QWORD *)(a2 + 256) = v33;
  *(_QWORD *)(a2 + 264) = v35;
  *(_QWORD *)(a2 + 272) = 0x302E302E32;
  *(_QWORD *)(a2 + 280) = 0xE500000000000000;
  *(_QWORD *)(a2 + 288) = v22;
  *(_QWORD *)(a2 + 296) = v36;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 328) = 0;
  return result;
}

uint64_t sub_1001AF56C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[135] = a2;
  v2[134] = a1;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[136] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[137] = v4;
  v2[138] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v2[139] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[140] = v6;
  v2[141] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v2[142] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[143] = v8;
  v2[144] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001AF620, 0, 0);
}

void sub_1001AF620()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  void *v38;
  id v39;
  unsigned int v40;
  NSString v41;
  unsigned int v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  void *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  void (__cdecl *v57)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v53 = v0 + 86;
  v54 = v0 + 2;
  v6 = v0[144];
  v7 = v0[143];
  v8 = v0[142];
  v9 = v0[141];
  v55 = v0[140];
  v56 = v0[139];
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v12 = v11;

  v13 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v10, v12, 0xD000000000000011, 0x8000000100ECA2C0, v13);
  v14 = v1;
  v15 = swift_bridgeObjectRelease();
  v16 = Date.init()(v15);
  v17 = Date.epoch.getter(v16);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[131] = v17;
  v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v20 = v19;
  v21 = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100109D28(v18, v20, 0xD000000000000015, 0x8000000100ECA2E0, v21);
  swift_bridgeObjectRelease();
  v0[130] = 1;
  v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v24 = v23;
  v25 = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100109D28(v22, v24, 0xD000000000000013, 0x8000000100ECA300, v25);
  v26 = v14;
  swift_bridgeObjectRelease();
  v27 = sub_100AC2EB8();
  v29 = v28;
  v30 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28((uint64_t)v27, v29, 0x6567412D72657355, 0xEA0000000000746ELL, v30);
  v31 = swift_bridgeObjectRelease();
  v32 = static Locale.current.getter(v31);
  v33 = Locale.acceptLanguageCode.getter(v32);
  v35 = v34;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v9, v56);
  v36 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28(v33, v35, 0x4C2D747065636341, 0xEF65676175676E61, v36);
  v37 = v26;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v38 = (void *)qword_1011B7C08;
  v39 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v40 = objc_msgSend(v39, "isInternalBuild");

  if (v40)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v38, "BOOLForKey:", v41);

    if (v42)
    {
      v43 = swift_isUniquelyReferenced_nonNull_native(v37);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v43);
      swift_bridgeObjectRelease();
    }
  }
  v0[145] = v37;
  v44 = (uint64_t *)v0[134];
  sub_1001B0340(v44);
  sub_1001AF174((uint64_t)v44, (uint64_t)v54);
  v45 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  JSONEncoder.init()(v46);
  memcpy(v53, v54, 0x150uLL);
  v47 = sub_1001B04C4();
  v48 = dispatch thunk of JSONEncoder.encode<A>(_:)(v53, &type metadata for PencilPairingLockCheckRequestContent, v47);
  v0[146] = v48;
  v0[147] = v49;
  v50 = v48;
  v51 = v49;
  swift_release();
  sub_10001BBBC(v50, v51);
  v57 = (void (__cdecl *)())((char *)&dword_101115270 + dword_101115270);
  v52 = (_QWORD *)swift_task_alloc(unk_101115274);
  v0[148] = v52;
  *v52 = v0;
  v52[1] = sub_1001AFD5C;
  v57();
}

uint64_t sub_1001AFD5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1184);
  *(_QWORD *)(v3 + 1192) = a1;
  *(_QWORD *)(v3 + 1200) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1001AFDBC, 0, 0);
}

uint64_t sub_1001AFDBC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[150];
  v2 = v0[149];
  v3 = v0[147];
  v4 = v0[146];
  v5 = v0[138];
  v6 = v0[137];
  v7 = v0[136];
  v0[128] = v2;
  v0[129] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[128];
  v0[151] = v8;
  v9 = v0[129];
  v0[152] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[153] = v10;
  v0[154] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115268 + dword_101115268;
  v13 = (_QWORD *)swift_task_alloc(unk_10111526C);
  v0[155] = v13;
  *v13 = v0;
  v13[1] = sub_1001AFEFC;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[135]);
}

uint64_t sub_1001AFEFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1240);
  *(_QWORD *)(*(_QWORD *)v2 + 1248) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1001B00AC;
  }
  else
  {
    v7 = v4[154];
    v8 = v4[153];
    v4[157] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_1001AFF7C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001AFF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 1256);
  v2 = *(_QWORD *)(v0 + 1248);
  v3 = *(_QWORD *)(v0 + 1160);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v16 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v16);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 1216);
  v7 = *(_QWORD *)(v0 + 1208);
  v8 = *(_QWORD *)(v0 + 1176);
  v9 = *(_QWORD *)(v0 + 1168);
  v10 = *(uint64_t **)(v0 + 1072);
  v11 = v16;
  swift_bridgeObjectRelease();
  swift_release();
  sub_1001B0834(v10);
  sub_1001B06A4((uint64_t *)(v0 + 16));
  sub_10001BC14(v9, v8);
  sub_10001BC14(v7, v6);
  v12 = *(_QWORD *)(v0 + 1176);
  v13 = *(_QWORD *)(v0 + 1168);
  v14 = *(_QWORD *)(v0 + 1128);
  v15 = *(_QWORD *)(v0 + 1104);
  swift_task_dealloc(*(_QWORD *)(v0 + 1152));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v11, v13, v12);
}

uint64_t sub_1001B00AC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;

  v1 = *(_QWORD *)(v0 + 1216);
  v2 = *(_QWORD *)(v0 + 1208);
  sub_10001BC14(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1232));
  sub_10001BC14(v2, v1);
  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v3 = *(_QWORD *)(v0 + 1248);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7AE0);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 1248);
  v10 = *(_QWORD *)(v0 + 1176);
  v11 = *(_QWORD *)(v0 + 1168);
  v12 = *(uint64_t **)(v0 + 1072);
  if (v8)
  {
    v25 = *(_QWORD *)(v0 + 1176);
    v24 = *(_QWORD *)(v0 + 1168);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = v12;
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138543362;
    swift_errorRetain(v9);
    v15 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 1064) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1064, v0 + 1072, v13 + 4, v13 + 12);
    *v14 = v15;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, " Failed to generate BAA certs, %{public}@", v13, 0xCu);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
    swift_release();
    sub_1001B0834(v23);

    swift_errorRelease(v9);
    sub_10001BC14(v24, v25);
    sub_1001B06A4((uint64_t *)(v0 + 16));
  }
  else
  {
    sub_1001B06A4((uint64_t *)(v0 + 16));
    sub_10001BC14(v11, v10);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();
    sub_1001B0834(v12);

  }
  v17 = *(_QWORD *)(v0 + 1160);
  v18 = *(_QWORD *)(v0 + 1176);
  v19 = *(_QWORD *)(v0 + 1168);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1104);
  swift_task_dealloc(*(_QWORD *)(v0 + 1152));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v17, v19, v18);
}

uint64_t *sub_1001B0340(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v12 = a1[16];
  v13 = a1[19];
  v14 = a1[18];
  v15 = a1[21];
  v16 = a1[20];
  v17 = a1[23];
  v18 = a1[22];
  v19 = a1[25];
  v20 = a1[24];
  v21 = a1[27];
  v22 = a1[26];
  v23 = a1[29];
  v26 = a1[30];
  v24 = a1[28];
  v25 = a1[31];
  v28 = a1[32];
  v27 = a1[33];
  v31 = a1[36];
  v29 = a1[35];
  v30 = a1[37];
  sub_10001BD08(*a1, a1[1]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v5, v6);
  sub_10001BBBC(v7, v8);
  sub_10001BBBC(v9, v10);
  swift_bridgeObjectRetain(v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v22, v21);
  sub_10001BD08(v24, v23);
  sub_10001BBBC(v26, v25);
  sub_10001BBBC(v28, v27);
  swift_bridgeObjectRetain(v29);
  sub_10001BD08(v31, v30);
  return a1;
}

unint64_t sub_1001B04C4()
{
  unint64_t result;

  result = qword_1010F19C8;
  if (!qword_1010F19C8)
  {
    result = swift_getWitnessTable(&unk_100E2A910, &type metadata for PencilPairingLockCheckRequestContent);
    atomic_store(result, (unint64_t *)&qword_1010F19C8);
  }
  return result;
}

uint64_t *sub_1001B0508(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v14 = a1[13];
  v15 = a1[15];
  v12 = a1[11];
  v13 = a1[17];
  v16 = a1[19];
  v17 = a1[18];
  v18 = a1[21];
  v19 = a1[20];
  v20 = a1[23];
  v21 = a1[22];
  v22 = a1[26];
  v23 = a1[29];
  v26 = a1[30];
  v24 = a1[28];
  v25 = a1[31];
  v29 = a1[32];
  v28 = a1[33];
  v30 = a1[35];
  v31 = a1[37];
  v32 = a1[39];
  v27 = a1[41];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v4);
  sub_10001BD08(v3, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  sub_10001BBBC(v17, v16);
  sub_10001BBBC(v19, v18);
  sub_10001BBBC(v21, v20);
  swift_bridgeObjectRetain(v22);
  sub_10001BBBC(v24, v23);
  sub_10001BBBC(v26, v25);
  sub_10001BD08(v29, v28);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  return a1;
}

uint64_t *sub_1001B06A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[19];
  v14 = a1[18];
  v15 = a1[21];
  v16 = a1[20];
  v17 = a1[23];
  v18 = a1[22];
  v19 = a1[29];
  v20 = a1[28];
  v21 = a1[31];
  v24 = a1[32];
  v22 = a1[30];
  v23 = a1[33];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v4);
  sub_10001EF3C(v3, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v9);
  sub_10001BC14(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  swift_bridgeObjectRelease();
  sub_10001BC14(v20, v19);
  sub_10001BC14(v22, v21);
  sub_10001EF3C(v24, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_1001B0834(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  v7 = a1[13];
  v9 = a1[19];
  v10 = a1[18];
  v11 = a1[21];
  v12 = a1[20];
  v13 = a1[23];
  v14 = a1[22];
  v15 = a1[25];
  v16 = a1[24];
  v17 = a1[27];
  v18 = a1[26];
  v19 = a1[29];
  v22 = a1[30];
  v20 = a1[28];
  v21 = a1[31];
  v24 = a1[32];
  v23 = a1[33];
  v26 = a1[36];
  v25 = a1[37];
  sub_10001EF3C(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  swift_bridgeObjectRelease();
  sub_10001BC14(v10, v9);
  sub_10001BC14(v12, v11);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001EF3C(v20, v19);
  sub_10001BC14(v22, v21);
  sub_10001BC14(v24, v23);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v26, v25);
  return a1;
}

uint64_t destroy for PencilPairingLockCheckRequestContent(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[4], v2);
  sub_10001BC14(a1[6], a1[7]);
  sub_10001BC14(a1[8], a1[9]);
  sub_10001BC14(a1[10], a1[11]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[18], a1[19]);
  sub_10001BC14(a1[20], a1[21]);
  sub_10001BC14(a1[22], a1[23]);
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[28], a1[29]);
  sub_10001BC14(a1[30], a1[31]);
  v3 = a1[33];
  if (v3 >> 60 != 15)
    sub_10001BC14(a1[32], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PencilPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (uint64_t *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, *(_QWORD *)(a2 + 40));
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  v15 = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v15, v16);
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v17;
  v18 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  v19 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v19;
  v20 = *(_QWORD *)(a2 + 144);
  v21 = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 144) = v20;
  *(_QWORD *)(a1 + 152) = v21;
  v22 = *(_QWORD *)(a2 + 160);
  v23 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 160) = v22;
  *(_QWORD *)(a1 + 168) = v23;
  v24 = *(_QWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 176) = v24;
  *(_QWORD *)(a1 + 184) = v25;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  v26 = *(_QWORD *)(a2 + 208);
  v27 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v26;
  *(_QWORD *)(a1 + 216) = v27;
  v28 = *(_QWORD *)(a2 + 224);
  v29 = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain(v26);
  sub_10001BBBC(v28, v29);
  *(_QWORD *)(a1 + 224) = v28;
  *(_QWORD *)(a1 + 232) = v29;
  v30 = *(_QWORD *)(a2 + 240);
  v31 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 240) = v30;
  *(_QWORD *)(a1 + 248) = v31;
  v32 = (uint64_t *)(a2 + 256);
  v33 = *(_QWORD *)(a2 + 264);
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 256) = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_10001BBBC(*v32, *(_QWORD *)(a2 + 264));
    *(_QWORD *)(a1 + 256) = v34;
    *(_QWORD *)(a1 + 264) = v33;
  }
  v35 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v35;
  v36 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v36;
  v37 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v37;
  v38 = *(_QWORD *)(a2 + 320);
  v39 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v38;
  *(_QWORD *)(a1 + 328) = v39;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v39);
  return a1;
}

uint64_t assignWithCopy for PencilPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = (uint64_t *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v13;
  sub_10001BC14(v16, v17);
LABEL_8:
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v18, v19);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v19;
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v22, v23);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v23;
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v26, v27);
  v28 = *(_QWORD *)(a1 + 80);
  v29 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  sub_10001BC14(v28, v29);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v30 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v31 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v32 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(a2 + 144);
  v34 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v33, v34);
  v35 = *(_QWORD *)(a1 + 144);
  v36 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v33;
  *(_QWORD *)(a1 + 152) = v34;
  sub_10001BC14(v35, v36);
  v37 = *(_QWORD *)(a2 + 160);
  v38 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v37, v38);
  v39 = *(_QWORD *)(a1 + 160);
  v40 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v37;
  *(_QWORD *)(a1 + 168) = v38;
  sub_10001BC14(v39, v40);
  v41 = *(_QWORD *)(a2 + 176);
  v42 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v41, v42);
  v43 = *(_QWORD *)(a1 + 176);
  v44 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v41;
  *(_QWORD *)(a1 + 184) = v42;
  sub_10001BC14(v43, v44);
  v45 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v45;
  v46 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 208) = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  v47 = *(_QWORD *)(a2 + 224);
  v48 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v47, v48);
  v49 = *(_QWORD *)(a1 + 224);
  v50 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v47;
  *(_QWORD *)(a1 + 232) = v48;
  sub_10001BC14(v49, v50);
  v51 = *(_QWORD *)(a2 + 240);
  v52 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v51, v52);
  v53 = *(_QWORD *)(a1 + 240);
  v54 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v51;
  *(_QWORD *)(a1 + 248) = v52;
  sub_10001BC14(v53, v54);
  v55 = (uint64_t *)(a2 + 256);
  v56 = *(_QWORD *)(a2 + 264);
  if (*(_QWORD *)(a1 + 264) >> 60 != 15)
  {
    if (v56 >> 60 != 15)
    {
      v58 = *v55;
      sub_10001BBBC(*v55, *(_QWORD *)(a2 + 264));
      v59 = *(_QWORD *)(a1 + 256);
      v60 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(a1 + 256) = v58;
      *(_QWORD *)(a1 + 264) = v56;
      sub_10001BC14(v59, v60);
      goto LABEL_15;
    }
    sub_1000DC964(a1 + 256);
    goto LABEL_13;
  }
  if (v56 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 256) = *(_OWORD *)v55;
    goto LABEL_15;
  }
  v57 = *v55;
  sub_10001BBBC(*v55, *(_QWORD *)(a2 + 264));
  *(_QWORD *)(a1 + 256) = v57;
  *(_QWORD *)(a1 + 264) = v56;
LABEL_15:
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v61 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v62 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v63 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v64 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 328) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for PencilPairingLockCheckRequestContent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x150uLL);
}

uint64_t assignWithTake for PencilPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 40) = v10;
  sub_10001BC14(v11, v9);
LABEL_6:
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v16, v17);
  v18 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v20;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v21, v22);
  v23 = *(_QWORD *)(a1 + 160);
  v24 = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v23, v24);
  v25 = *(_QWORD *)(a1 + 176);
  v26 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v25, v26);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 232);
  v28 = *(_QWORD *)(a1 + 224);
  v29 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = v27;
  sub_10001BC14(v28, v29);
  v30 = *(_QWORD *)(a1 + 240);
  v31 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001BC14(v30, v31);
  v32 = (_QWORD *)(a2 + 256);
  v33 = *(_QWORD *)(a1 + 264);
  if (v33 >> 60 != 15)
  {
    v34 = *(_QWORD *)(a2 + 264);
    if (v34 >> 60 != 15)
    {
      v35 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = *v32;
      *(_QWORD *)(a1 + 264) = v34;
      sub_10001BC14(v35, v33);
      goto LABEL_11;
    }
    sub_1000DC964(a1 + 256);
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)v32;
LABEL_11:
  v36 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v36;
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v37;
  swift_bridgeObjectRelease();
  v38 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v38;
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v39;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingLockCheckRequestContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 336))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 208);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingLockCheckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 336) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 208) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 336) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckRequestContent()
{
  return &type metadata for PencilPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckRequest()
{
  return &type metadata for PencilPairingLockCheckRequest;
}

unint64_t sub_1001B12E0()
{
  unint64_t result;

  result = qword_1010F19D8;
  if (!qword_1010F19D8)
  {
    result = swift_getWitnessTable(&unk_100E2AA54, &type metadata for PencilPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F19D8);
  }
  return result;
}

unint64_t sub_1001B1324()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1010F19E0;
  if (!qword_1010F19E0)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010FF7C0);
    v2 = sub_100036A58();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F19E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PencilPairingLockCheckRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingLockCheckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_1001B1464 + 4 * byte_100E2A8AB[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_1001B1498 + 4 * byte_100E2A8A6[v4]))();
}

uint64_t sub_1001B1498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B14A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001B14A8);
  return result;
}

uint64_t sub_1001B14B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001B14BCLL);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_1001B14C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B14C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for PencilPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_1001B14E8()
{
  unint64_t result;

  result = qword_1010F19E8;
  if (!qword_1010F19E8)
  {
    result = swift_getWitnessTable(&unk_100E2AA2C, &type metadata for PencilPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F19E8);
  }
  return result;
}

unint64_t sub_1001B1530()
{
  unint64_t result;

  result = qword_1010F19F0;
  if (!qword_1010F19F0)
  {
    result = swift_getWitnessTable("]$#", &type metadata for PencilPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F19F0);
  }
  return result;
}

unint64_t sub_1001B1578()
{
  unint64_t result;

  result = qword_1010F19F8;
  if (!qword_1010F19F8)
  {
    result = swift_getWitnessTable(&unk_100E2A9C4, &type metadata for PencilPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F19F8);
  }
  return result;
}

uint64_t sub_1001B15BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12645 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12645, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x8000000100EC3110;
    if (a2 == 0x8000000100EC3110)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC3110, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x314B64656573 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x314B64656573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374726563, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 7500643 && a2 == 0xE300000000000000)
  {
    v11 = 0xE300000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7500643, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v12 = 0xE900000000000064;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v13 = 0xEB00000000644970;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100ECA360)
  {
    v14 = 0x8000000100ECA360;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065)
  {
    v15 = 0xE900000000000065;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E6F4E68747561, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v16 = 0xEC0000007265626DLL;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL)
  {
    v17 = 0xEF7265626D754E6CLL;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169726553746C61, 0xEF7265626D754E6CLL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x6F636165426D756ELL && a2 == 0xEA0000000000736ELL)
  {
    v18 = 0xEA0000000000736ELL;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F636165426D756ELL, 0xEA0000000000736ELL, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EC8A80)
  {
    v19 = 0x8000000100EC8A80;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC8A80, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x6E55646572616873 && a2 == 0xEA00000000007469)
  {
    v20 = 0xEA00000000007469;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E55646572616873, 0xEA00000000007469, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69)
  {
    v21 = 0xEB000000006E6F69;
LABEL_97:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461747365747461, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_97;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v22 = 0xED00006E67695379;
LABEL_103:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_103;
  }
  if (a1 == 0xD000000000000013)
  {
    v23 = 0x8000000100ECA610;
    if (a2 == 0x8000000100ECA610)
      goto LABEL_108;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100ECA610, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_108:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v24 = 0xEB000000006E6F69;
LABEL_114:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_114;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v25 = 0xEF6E6F6973726556;
LABEL_120:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_120;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v26 = 0xE900000000000064;
LABEL_126:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_126;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 21;
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v27 & 1) != 0)
      return 21;
    else
      return 22;
  }
}

_QWORD *sub_1001B1F18(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    v7 = a2 + 1;
    v8 = a2[2];
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    }
    else
    {
      v10 = *v7;
      sub_10001BBBC(*v7, a2[2]);
      v4[1] = v10;
      v4[2] = v8;
    }
    v11 = a3[7];
    v12 = (char *)v4 + v11;
    v13 = (uint64_t)a2 + v11;
    v14 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[8];
    v16 = (char *)v4 + v15;
    v17 = (uint64_t)a2 + v15;
    v18 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[9];
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = *v21;
    v23 = v21[1];
    sub_10012C644(*v21, v23);
    *v20 = v22;
    v20[1] = v23;
    v24 = a3[11];
    *(_QWORD *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *((_BYTE *)v4 + v24) = *((_BYTE *)a2 + v24);
    v25 = a3[13];
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    *(_WORD *)((char *)v4 + v25) = *(_WORD *)((char *)a2 + v25);
    v26 = a3[14];
    v27 = (_QWORD *)((char *)v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = *v28;
    v30 = v28[1];
    sub_10001BBBC(*v28, v30);
    *v27 = v29;
    v27[1] = v30;
    *(_DWORD *)((char *)v4 + a3[15]) = *(_DWORD *)((char *)a2 + a3[15]);
  }
  return v4;
}

uint64_t sub_1001B2090(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(a1 + 8), v4);
  v5 = a1 + a2[7];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[8];
  v8 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_10012C494(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  return sub_10001BC14(*(_QWORD *)(a1 + a2[14]), *(_QWORD *)(a1 + a2[14] + 8));
}

uint64_t sub_1001B2134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = (uint64_t *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_10001BBBC(*v6, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
  }
  v9 = a3[7];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[8];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[9];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_10012C644(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v23 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_WORD *)(a1 + v23) = *(_WORD *)(a2 + v23);
  v24 = a3[14];
  v25 = (uint64_t *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  v28 = v26[1];
  sub_10001BBBC(*v26, v28);
  *v25 = v27;
  v25[1] = v28;
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1001B2280(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = (_OWORD *)(a1 + 8);
  v7 = (uint64_t *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 != 15)
  {
    if (v8 >> 60 != 15)
    {
      v10 = *v7;
      sub_10001BBBC(*v7, *(_QWORD *)(a2 + 16));
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v8;
      sub_10001BC14(v11, v12);
      goto LABEL_8;
    }
    sub_1000DC964(a1 + 8);
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
LABEL_6:
    *v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  v9 = *v7;
  sub_10001BBBC(*v7, *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v8;
LABEL_8:
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = a3[9];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  v25 = v23[1];
  sub_10012C644(*v23, v25);
  v26 = *v22;
  v27 = v22[1];
  *v22 = v24;
  v22[1] = v25;
  sub_10012C494(v26, v27);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_WORD *)(a1 + a3[13]) = *(_WORD *)(a2 + a3[13]);
  v28 = a3[14];
  v29 = (uint64_t *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v31 = *v30;
  v32 = v30[1];
  sub_10001BBBC(*v30, v32);
  v33 = *v29;
  v34 = v29[1];
  *v29 = v31;
  v29[1] = v32;
  sub_10001BC14(v33, v34);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1001B2428(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[14];
  *(_WORD *)(a1 + a3[13]) = *(_WORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1001B2518(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)(a2 + 16);
    if (v9 >> 60 != 15)
    {
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *v7;
      *(_QWORD *)(a1 + 16) = v9;
      sub_10001BC14(v10, v8);
      goto LABEL_6;
    }
    sub_1000DC964(a1 + 8);
  }
  *v6 = *(_OWORD *)v7;
LABEL_6:
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[9];
  v20 = *(_QWORD *)(a1 + v19);
  v21 = *(_QWORD *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_10012C494(v20, v21);
  v22 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v23 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_WORD *)(a1 + v23) = *(_WORD *)(a2 + v23);
  v24 = a3[14];
  v25 = *(_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  sub_10001BC14(v25, v26);
  *(_DWORD *)(a1 + a3[15]) = *(_DWORD *)(a2 + a3[15]);
  return a1;
}

uint64_t sub_1001B2668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B2674);
}

uint64_t sub_1001B2674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 2);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 28);
    }
    else
    {
      v12 = type metadata accessor for MACAddress(0);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_1001B2714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B2720);
}

uint64_t sub_1001B2720(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 2) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for MACAddress(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for DiscoveredObject(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F1A58, (uint64_t)&nominal type descriptor for DiscoveredObject);
}

uint64_t sub_1001B27CC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[12];

  v5[0] = &unk_100E2AAF8;
  v5[1] = &unk_100E2AB10;
  v5[2] = &unk_100E2AB28;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for MACAddress(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = &unk_100E2AB40;
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[7] = (char *)&value witness table for Builtin.Int8 + 64;
      v5[8] = (char *)&value witness table for Builtin.Int8 + 64;
      v5[9] = &unk_100E2AAF8;
      v5[10] = &unk_100E2AB58;
      v5[11] = (char *)&value witness table for Builtin.Int32 + 64;
      swift_initStructMetadata(a1, 256, 12, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001B28B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  unint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int *v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  int *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  char *v135;
  __int128 v136;
  __int128 v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, char *, uint64_t);
  char *v142;
  int *v143;
  __int128 v144;
  __int128 v145;
  char *v146;
  uint64_t v147;
  void (*v148)(char *, char *, uint64_t);
  char *v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t *v152;
  __int128 *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  __int128 *v158;
  char *v159;
  uint64_t v160;
  void (*v161)(uint64_t, char *, uint64_t);
  char *v162;
  uint64_t v163;
  void (*v164)(char *, char *, uint64_t);
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint8_t *v181;
  uint64_t v182;
  uint64_t v184;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(char *, __int128 *, uint64_t);
  char *v189;
  void (*v190)(char *, unint64_t, uint64_t);
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  __int128 v202;
  uint8_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint8_t *v211;
  uint64_t v212;
  _QWORD v213[6];
  _QWORD v214[6];
  _OWORD v215[2];
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  __int128 v223;
  __int128 v224;
  _BYTE v225[10];

  LODWORD(v203) = a2;
  v208 = a3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v192 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v192 - v9;
  v11 = __chkstk_darwin(v8);
  v201 = (char *)&v192 - v12;
  v13 = __chkstk_darwin(v11);
  v200 = (char *)&v192 - v14;
  v15 = __chkstk_darwin(v13);
  v204 = (unint64_t)&v192 - v16;
  v17 = __chkstk_darwin(v15);
  v197 = (char *)&v192 - v18;
  v19 = __chkstk_darwin(v17);
  v196 = (char *)&v192 - v20;
  __chkstk_darwin(v19);
  *(_QWORD *)&v202 = (char *)&v192 - v21;
  v22 = type metadata accessor for MACAddress(0);
  v23 = *(_QWORD *)(v22 - 8);
  v205 = v22;
  v206 = v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v192 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v192 - v28;
  v30 = __chkstk_darwin(v27);
  v199 = (char *)&v192 - v31;
  v32 = __chkstk_darwin(v30);
  v198 = (char *)&v192 - v33;
  v34 = __chkstk_darwin(v32);
  v194 = (char *)&v192 - v35;
  v36 = __chkstk_darwin(v34);
  v195 = (char *)&v192 - v37;
  v38 = __chkstk_darwin(v36);
  *((_QWORD *)&v202 + 1) = (char *)&v192 - v39;
  __chkstk_darwin(v38);
  v193 = (char *)&v192 - v40;
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v192 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v47 = (char *)&v192 - v46;
  v212 = type metadata accessor for DiscoveredObject(0);
  v207 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v209 = (char *)&v192 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a1);
  v210 = (char *)sub_1001B7400(v49);
  if (!v210)
  {
    swift_bridgeObjectRetain(a1);
    sub_1001B8188(v69, v213);
    sub_100005CF0((uint64_t)v213, (uint64_t)&v220, &qword_1010F1AC8);
    if (v222 >> 60 == 15)
    {
      if (qword_1010EA4A8 != -1)
        swift_once(&qword_1010EA4A8, sub_100D0773C);
      v70 = type metadata accessor for Logger(0);
      sub_10001A9E8(v70, (uint64_t)qword_1011B80D0);
      swift_bridgeObjectRetain(a1);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.error.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v217 = v75;
        *(_DWORD *)v74 = 136446210;
        v211 = v74 + 4;
        swift_bridgeObjectRetain(a1);
        v77 = Dictionary.description.getter(v76, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
        v79 = v78;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v215[0] = sub_100016940(v77, v79, (uint64_t *)&v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v211, v74 + 12);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to create BluetoothAdvertisementData from: %{public}s", v74, 0xCu);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a1, 2);
      }
      v132 = v207;
      v131 = v208;
      v84 = (int *)v212;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v132 + 56))(v131, 1, 1, v84);
    }
    v110 = v220;
    if ((*((_QWORD *)&v220 + 1) & 0x2000000000000000) != 0)
    {
      v82 = (uint64_t)v209;
      v209[2] = 1;
      *(_OWORD *)(v82 + 8) = xmmword_100E22B20;
      sub_10001BBBC(v110, *((_QWORD *)&v110 + 1) & 0xDFFFFFFFFFFFFFFFLL);
      sub_10001BBBC(v110, *((_QWORD *)&v110 + 1) & 0xDFFFFFFFFFFFFFFFLL);
      MACAddress.init(addressToSanitize:type:)(v110, *((_QWORD *)&v110 + 1) & 0xDFFFFFFFFFFFFFFFLL, 1);
      v117 = v205;
      v133 = v206;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v10, 1, v205) != 1)
      {
        v134 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
        v134(v29, v10, v117);
        sub_10012C494(v110, *((uint64_t *)&v110 + 1));
        sub_1001B97A0((uint64_t)v213);
        v135 = v29;
        v84 = (int *)v212;
        v134((char *)(v82 + *(int *)(v212 + 32)), v135, v117);
        v81 = 0;
        v116 = 1;
        goto LABEL_82;
      }
    }
    else
    {
      *((_QWORD *)&v202 + 1) = a1;
      v82 = (uint64_t)v209;
      v209[2] = 0;
      *(_OWORD *)(v82 + 8) = xmmword_100E22B20;
      sub_10001BBBC(v110, *((unint64_t *)&v110 + 1));
      sub_10001BBBC(v110, *((unint64_t *)&v110 + 1));
      sub_1002F7C0C(6, v110, *((uint64_t *)&v110 + 1));
      v111 = v217;
      sub_10001BBBC(v217, *((unint64_t *)&v217 + 1));
      MACAddress.init(addressToSanitize:type:)(v111, *((_QWORD *)&v111 + 1), 1);
      v113 = v205;
      v112 = v206;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v7, 1, v205) != 1)
      {
        v114 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
        v114(v26, v7, v113);
        sub_10012C494(v110, *((uint64_t *)&v110 + 1));
        sub_1001B97A0((uint64_t)v213);
        sub_10001BC14(v111, *((unint64_t *)&v111 + 1));
        v115 = (int *)v212;
        v114((char *)(v82 + *(int *)(v212 + 32)), v26, v113);
        v81 = 0;
        v116 = 1;
        a1 = *((_QWORD *)&v202 + 1);
        v117 = v113;
        v84 = v115;
        goto LABEL_82;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_112;
  }
  v50 = a1;
  if (qword_1010E99C8 != -1)
    swift_once(&qword_1010E99C8, sub_1001B5264);
  v51 = sub_10001A9E8(v41, (uint64_t)qword_1011B69C8);
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v52(v47, v51, v41);
  v53 = v210;
  if (*((_QWORD *)v210 + 2) && (v54 = sub_100003FB0((uint64_t)v47), (v55 & 1) != 0))
  {
    v56 = (uint64_t *)(*((_QWORD *)v53 + 7) + 16 * v54);
    v57 = *v56;
    v58 = v56[1];
    sub_10001BBBC(*v56, v58);
  }
  else
  {
    v57 = 0;
    v58 = 0xF000000000000000;
  }
  v59 = *(void (**)(char *, uint64_t))(v42 + 8);
  v59(v47, v41);
  v60 = sub_1001B7844(v57, v58);
  v211 = (uint8_t *)v62;
  if ((v60 & 0xFF00) == 0x200)
  {
    if (qword_1010E99D0 != -1)
      swift_once(&qword_1010E99D0, sub_1001B5278);
    v63 = sub_10001A9E8(v41, (uint64_t)qword_1011B69E0);
    v52(v45, v63, v41);
    if (*((_QWORD *)v53 + 2) && (v64 = sub_100003FB0((uint64_t)v45), (v65 & 1) != 0))
    {
      v66 = (uint64_t *)(*((_QWORD *)v53 + 7) + 16 * v64);
      v67 = *v66;
      v68 = v66[1];
      sub_10001BBBC(*v66, v68);
    }
    else
    {
      v67 = 0;
      v68 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
    v59(v45, v41);
    v96 = sub_1001B984C(v67, v68);
    v211 = (uint8_t *)v98;
    if (v96 == 2)
    {
      a1 = v50;
      swift_bridgeObjectRetain(v50);
      sub_1001B8188(v99, v213);
      sub_100005CF0((uint64_t)v213, (uint64_t)&v220, &qword_1010F1AC8);
      v84 = (int *)v212;
      v82 = (uint64_t)v209;
      if (v222 >> 60 == 15)
      {
        if (qword_1010EA4A8 != -1)
          swift_once(&qword_1010EA4A8, sub_100D0773C);
        v100 = type metadata accessor for Logger(0);
        sub_10001A9E8(v100, (uint64_t)qword_1011B80D0);
        swift_bridgeObjectRetain(v50);
        v102 = Logger.logObject.getter(v101);
        v103 = static os_log_type_t.error.getter(v102);
        if (os_log_type_enabled(v102, v103))
        {
          v104 = (uint8_t *)swift_slowAlloc(12, -1);
          v105 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v217 = v105;
          *(_DWORD *)v104 = 136446210;
          swift_bridgeObjectRetain(v50);
          v211 = (uint8_t *)&type metadata for Any + 8;
          v107 = Dictionary.description.getter(v106, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
          v109 = v108;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v215[0] = sub_100016940(v107, v109, (uint64_t *)&v217);
          v84 = (int *)v212;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v104 + 4, v104 + 12);
          swift_bridgeObjectRelease_n(a1, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Failed to create BluetoothAdvertisementData from: %{public}s", v104, 0xCu);
          swift_arrayDestroy(v105, 1, v211);
          swift_slowDealloc(v105, -1, -1);
          swift_slowDealloc(v104, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v50, 2);
        }

LABEL_75:
        v132 = v207;
        v131 = v208;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v132 + 56))(v131, 1, 1, v84);
      }
      v144 = v220;
      if ((*((_QWORD *)&v220 + 1) & 0x2000000000000000) != 0)
      {
        v209[2] = 1;
        *(_OWORD *)(v82 + 8) = xmmword_100E22B20;
        sub_10001BBBC(v144, *((_QWORD *)&v144 + 1) & 0xDFFFFFFFFFFFFFFFLL);
        sub_10001BBBC(v144, *((_QWORD *)&v144 + 1) & 0xDFFFFFFFFFFFFFFFLL);
        v162 = v200;
        MACAddress.init(addressToSanitize:type:)(v144, *((_QWORD *)&v144 + 1) & 0xDFFFFFFFFFFFFFFFLL, 1);
        v117 = v205;
        v163 = v206;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v162, 1, v205) != 1)
        {
          v164 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
          v165 = v198;
          v164(v198, v162, v117);
          sub_10012C494(v144, *((uint64_t *)&v144 + 1));
          sub_1001B97A0((uint64_t)v213);
          v164((char *)(v82 + v84[8]), v165, v117);
          goto LABEL_80;
        }
LABEL_115:
        __break(1u);
        JUMPOUT(0x1001B406CLL);
      }
      v209[2] = 0;
      *(_OWORD *)(v82 + 8) = xmmword_100E22B20;
      sub_10001BBBC(v144, *((unint64_t *)&v144 + 1));
      sub_10001BBBC(v144, *((unint64_t *)&v144 + 1));
      sub_1002F7C0C(6, v144, *((uint64_t *)&v144 + 1));
      v145 = v217;
      sub_10001BBBC(v217, *((unint64_t *)&v217 + 1));
      v146 = v201;
      v204 = *((_QWORD *)&v145 + 1);
      v211 = (uint8_t *)v145;
      MACAddress.init(addressToSanitize:type:)(v145, *((_QWORD *)&v145 + 1), 1);
      v117 = v205;
      v147 = v206;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v146, 1, v205) != 1)
      {
        v148 = *(void (**)(char *, char *, uint64_t))(v147 + 32);
        v149 = v199;
        v148(v199, v146, v117);
        sub_10012C494(v144, *((uint64_t *)&v144 + 1));
        sub_1001B97A0((uint64_t)v213);
        sub_10001BC14((uint64_t)v211, v204);
        v148((char *)(v82 + v84[8]), v149, v117);
LABEL_80:
        v81 = 0;
        v211 = 0;
        v204 = 0xC000000000000000;
        goto LABEL_81;
      }
      goto LABEL_113;
    }
    v124 = v97;
    v82 = (uint64_t)v209;
    v209[2] = v96 & 1;
    v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
    v127 = v126;
    a1 = v50;
    v84 = (int *)v212;
    if (*(_QWORD *)(v50 + 16))
    {
      v128 = v125;
      sub_10001BBBC((uint64_t)v211, v124);
      v129 = sub_100518DA0(v128, v127);
      v117 = v205;
      if ((v130 & 1) != 0)
      {
        sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v129, (uint64_t)&v220);
      }
      else
      {
        v220 = 0u;
        v221 = 0u;
      }
    }
    else
    {
      v220 = 0u;
      v221 = 0u;
      sub_10001BBBC((uint64_t)v211, v124);
      v117 = v205;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v221 + 1))
    {
      if ((swift_dynamicCast(&v217, &v220, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
      {
LABEL_69:
        MACAddress.init(stringLiteral:)(0x3030303030303030, 0xEC00000030303030);
LABEL_70:
        *(_QWORD *)(v82 + 8) = v211;
        *(_QWORD *)(v82 + 16) = v124;
        v204 = v124;
        v81 = 1;
LABEL_81:
        v116 = 1;
        goto LABEL_82;
      }
      v155 = v204;
      MACAddress.init(data:type:)(v217);
      v156 = v206;
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v206 + 48))(v155, 1, v117) != 1)
      {
        v190 = *(void (**)(char *, unint64_t, uint64_t))(v156 + 32);
        v191 = v194;
        v190(v194, v155, v117);
        v190((char *)(v82 + v84[8]), (unint64_t)v191, v117);
        goto LABEL_70;
      }
      v157 = (uint64_t *)&unk_1010F9890;
      v158 = (__int128 *)v155;
    }
    else
    {
      v157 = (uint64_t *)&unk_1010F6390;
      v158 = &v220;
    }
    sub_100004048((uint64_t)v158, v157);
    goto LABEL_69;
  }
  v80 = v60;
  v204 = v61;
  swift_bridgeObjectRelease();
  v81 = v80;
  v82 = (uint64_t)v209;
  v209[2] = BYTE1(v80) & 1;
  if (v80 != 1)
  {
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
    v120 = v119;
    a1 = v50;
    v84 = (int *)v212;
    if (*(_QWORD *)(v50 + 16))
    {
      v121 = v118;
      sub_10001BBBC((uint64_t)v211, v204);
      v122 = sub_100518DA0(v121, v120);
      v117 = v205;
      if ((v123 & 1) != 0)
      {
        sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v122, (uint64_t)&v220);
      }
      else
      {
        v220 = 0u;
        v221 = 0u;
      }
    }
    else
    {
      v220 = 0u;
      v221 = 0u;
      sub_10001BBBC((uint64_t)v211, v204);
      v117 = v205;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v221 + 1))
    {
      if ((swift_dynamicCast(&v217, &v220, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
      {
LABEL_60:
        MACAddress.init(stringLiteral:)(0x3030303030303030, 0xEC00000030303030);
LABEL_61:
        v116 = 0;
        v154 = v204;
        *(_QWORD *)(v82 + 8) = v211;
        *(_QWORD *)(v82 + 16) = v154;
        goto LABEL_82;
      }
      v150 = (__int128 *)v202;
      MACAddress.init(data:type:)(v217);
      v151 = v206;
      if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v206 + 48))(v150, 1, v117) != 1)
      {
        v188 = *(void (**)(char *, __int128 *, uint64_t))(v151 + 32);
        v189 = v193;
        v188(v193, v150, v117);
        v188((char *)(v82 + v84[8]), (__int128 *)v189, v117);
        goto LABEL_61;
      }
      v152 = (uint64_t *)&unk_1010F9890;
      v153 = v150;
    }
    else
    {
      v152 = (uint64_t *)&unk_1010F6390;
      v153 = &v220;
    }
    sub_100004048((uint64_t)v153, v152);
    goto LABEL_60;
  }
  a1 = v50;
  swift_bridgeObjectRetain(v50);
  sub_1001B8188(v83, v213);
  sub_100005CF0((uint64_t)v213, (uint64_t)&v220, &qword_1010F1AC8);
  v84 = (int *)v212;
  if (v222 >> 60 == 15)
  {
    if (qword_1010EA4A8 != -1)
      swift_once(&qword_1010EA4A8, sub_100D0773C);
    v85 = type metadata accessor for Logger(0);
    sub_10001A9E8(v85, (uint64_t)qword_1011B80D0);
    swift_bridgeObjectRetain(v50);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v217 = v90;
      *(_DWORD *)v89 = 136446210;
      v209 = (char *)(v89 + 4);
      swift_bridgeObjectRetain(v50);
      v210 = (char *)&type metadata for Any + 8;
      v92 = Dictionary.description.getter(v91, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v94 = v93;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v215[0] = sub_100016940(v92, v94, (uint64_t *)&v217);
      v95 = (int *)v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v209, v89 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      v84 = v95;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Failed to create BluetoothAdvertisementData from: %{public}s", v89, 0xCu);
      swift_arrayDestroy(v90, 1, v210);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v50, 2);
    }

    sub_1001B994C(v80, (uint64_t)v211, v204);
    goto LABEL_75;
  }
  v136 = v220;
  *(_OWORD *)(v82 + 8) = xmmword_100E22B20;
  if ((*((_QWORD *)&v136 + 1) & 0x2000000000000000) == 0)
  {
    sub_10001BBBC(v136, *((unint64_t *)&v136 + 1));
    sub_10001BBBC(v136, *((unint64_t *)&v136 + 1));
    sub_1002F7C0C(6, v136, *((uint64_t *)&v136 + 1));
    v137 = v217;
    sub_10001BBBC(v217, *((unint64_t *)&v217 + 1));
    v138 = v197;
    v202 = v137;
    MACAddress.init(addressToSanitize:type:)(v137, *((_QWORD *)&v137 + 1), 1);
    v139 = v205;
    v140 = v206;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v138, 1, v205) != 1)
    {
      v141 = *(void (**)(char *, char *, uint64_t))(v140 + 32);
      v142 = v195;
      v141(v195, v138, v139);
      sub_10012C494(v136, *((uint64_t *)&v136 + 1));
      sub_1001B97A0((uint64_t)v213);
      sub_1001B994C(v80, (uint64_t)v211, v204);
      sub_10001BC14(v202, *((unint64_t *)&v202 + 1));
      v143 = (int *)v212;
      v141((char *)(v82 + *(int *)(v212 + 32)), v142, v139);
      v84 = v143;
      v116 = 0;
      v211 = 0;
      v204 = 0xC000000000000000;
      v81 = 1;
      a1 = v50;
      v117 = v139;
      goto LABEL_82;
    }
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  sub_10001BBBC(v136, *((_QWORD *)&v136 + 1) & 0xDFFFFFFFFFFFFFFFLL);
  sub_10001BBBC(v136, *((_QWORD *)&v136 + 1) & 0xDFFFFFFFFFFFFFFFLL);
  v159 = v196;
  MACAddress.init(addressToSanitize:type:)(v136, *((_QWORD *)&v136 + 1) & 0xDFFFFFFFFFFFFFFFLL, 1);
  v117 = v205;
  v160 = v206;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(v159, 1, v205) == 1)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  v161 = *(void (**)(uint64_t, char *, uint64_t))(v160 + 32);
  v161(*((_QWORD *)&v202 + 1), v159, v117);
  sub_10012C494(v136, *((uint64_t *)&v136 + 1));
  sub_1001B97A0((uint64_t)v213);
  sub_1001B994C(v80, (uint64_t)v211, v204);
  v161(v82 + v84[8], *((char **)&v202 + 1), v117);
  v116 = 0;
  v211 = 0;
  v204 = 0xC000000000000000;
  v81 = 1;
LABEL_82:
  *(_BYTE *)v82 = v81;
  *(_BYTE *)(v82 + 1) = v116;
  v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataTimestamp);
  if (*(_QWORD *)(a1 + 16) && (v168 = sub_100518DA0(v166, v167), (v169 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v168, (uint64_t)&v217);
  }
  else
  {
    v217 = 0u;
    v218 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v218 + 1))
  {
    sub_100004048((uint64_t)&v217, (uint64_t *)&unk_1010F6390);
    goto LABEL_92;
  }
  v170 = swift_dynamicCast(v215, &v217, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
  if ((v170 & 1) == 0)
  {
LABEL_92:
    if (qword_1010EA4A8 != -1)
      swift_once(&qword_1010EA4A8, sub_100D0773C);
    v171 = type metadata accessor for Logger(0);
    sub_10001A9E8(v171, (uint64_t)qword_1011B80D0);
    swift_bridgeObjectRetain(a1);
    v173 = Logger.logObject.getter(v172);
    v174 = static os_log_type_t.error.getter(v173);
    if (os_log_type_enabled(v173, v174))
    {
      v175 = (uint8_t *)swift_slowAlloc(12, -1);
      v176 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v217 = v176;
      *(_DWORD *)v175 = 136446210;
      v203 = v175 + 4;
      swift_bridgeObjectRetain(a1);
      v178 = Dictionary.description.getter(v177, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v180 = v179;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v215[0] = sub_100016940(v178, v180, (uint64_t *)&v217);
      v84 = (int *)v212;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v215, (char *)v215 + 8, v203, v175 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      v117 = v205;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v173, v174, "Expected CBAdvertisementDataTimestamp key in: %{public}s", v175, 0xCu);
      swift_arrayDestroy(v176, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v176, -1, -1);
      v181 = v175;
      v82 = (uint64_t)v209;
      swift_slowDealloc(v181, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    v132 = v207;
    v131 = v208;
    v182 = v206;
    if (v210)
      sub_10001BC14((uint64_t)v211, v204);
    sub_10001EF3C(*(_QWORD *)(v82 + 8), *(_QWORD *)(v82 + 16));
    (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v82 + v84[8], v117);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v132 + 56))(v131, 1, 1, v84);
  }
  Date.init(timeIntervalSinceReferenceDate:)(v170);
  *(_DWORD *)(v82 + v84[15]) = (_DWORD)v203;
  if (v116)
  {
    if (v81)
      goto LABEL_103;
  }
  else if (v81 != 1)
  {
    goto LABEL_103;
  }
  swift_bridgeObjectRetain(a1);
  sub_1001B8188(v184, v214);
  sub_100005CF0((uint64_t)v214, (uint64_t)v215, &qword_1010F1AC8);
  if (*((_QWORD *)&v216 + 1) >> 60 == 15)
  {
LABEL_103:
    Data.init(stringLiteral:)(0x3030303030303030, 0xEC00000030303030);
    __asm { BR              X10 }
  }
  v217 = v215[0];
  v218 = v215[1];
  v219 = v216;
  swift_bridgeObjectRelease();
  sub_1001B9810(&v217, &v223);
  sub_1001B9810(&v223, (_OWORD *)(v82 + v84[9]));
  *(_QWORD *)(v82 + v84[10]) = v218;
  *(_BYTE *)(v82 + v84[11]) = BYTE8(v218);
  v224 = v219;
  sub_1001B9820((uint64_t *)&v223);
  sub_100059DE8((uint64_t)&v224);
  sub_1001B97A0((uint64_t)v214);
  *(_OWORD *)(v82 + v84[14]) = v224;
  *(_BYTE *)(v82 + v84[12]) = BYTE9(v218);
  sub_100005CF0((uint64_t)&v218 + 10, (uint64_t)v225, &qword_1010F1AD0);
  sub_100005CF0((uint64_t)v225, v82 + v84[13], &qword_1010F1AD0);
  v187 = v207;
  v186 = v208;
  if (v210)
    sub_10001BC14((uint64_t)v211, v204);
  sub_100113048(v82, v186);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v187 + 56))(v186, 0, 1, v84);
  return sub_1000126B0(v82, type metadata accessor for DiscoveredObject);
}

_QWORD *sub_1001B407C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _BYTE __dst[14];
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD v33[5];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;

  v32 = _swiftEmptyArrayStorage;
  sub_10009A9D8(0, 0, 0);
  v4 = _swiftEmptyArrayStorage;
  v30 = a1;
  v31 = a2;
  swift_bridgeObjectRetain(a1);
  sub_100CA9950(&v34);
  v6 = v34;
  v5 = v35;
  v8 = v36;
  v7 = v37;
  v9 = v38;
  sub_100005CF0((uint64_t)&v34, (uint64_t)v39, &qword_1010F1AF0);
  if (v40)
  {
    v10 = sub_1000193A4((unint64_t *)&qword_1010F1B00, &qword_1010F1AF8, (const char *)&protocol conformance descriptor for <A> ArraySlice<A>);
    do
    {
      v11 = sub_10001A9A8(&qword_1010F1AF8);
      v33[3] = v11;
      v33[4] = v10;
      v12 = (_QWORD *)swift_allocObject(&unk_10105CE98, 48, 7);
      v33[0] = v12;
      v12[2] = v5;
      v12[3] = v8;
      v12[4] = v7;
      v12[5] = v9;
      v13 = sub_10001AA44(v33, v11);
      v14 = v13[2];
      v15 = v13[3] >> 1;
      v16 = v15 - v14;
      if (__OFSUB__(v15, v14))
        __break(1u);
      if (v16)
      {
        v17 = (const void *)(v13[1] + v14);
        if (v16 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          v29 = v15 - v14;
          memcpy(__dst, v17, v15 - v14);
          v21 = *(_QWORD *)__dst;
          v22 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v29 << 48);
          sub_1001B998C((uint64_t)&v34);
        }
        else
        {
          v18 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
          sub_1001B998C((uint64_t)&v34);
          v19 = __DataStorage.init(bytes:length:)(v17, v16);
          v20 = v19;
          if ((unint64_t)v16 >= 0x7FFFFFFF)
          {
            v23 = type metadata accessor for Data.RangeReference(0);
            v21 = swift_allocObject(v23, 32, 7);
            *(_QWORD *)(v21 + 16) = 0;
            *(_QWORD *)(v21 + 24) = v16;
            v22 = v20 | 0x8000000000000000;
          }
          else
          {
            v21 = v16 << 32;
            v22 = v19 | 0x4000000000000000;
          }
        }
      }
      else
      {
        sub_1001B998C((uint64_t)&v34);
        v21 = 0;
        v22 = 0xC000000000000000;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
      sub_1001B99B4((uint64_t)&v34);
      v32 = v4;
      v25 = v4[2];
      v24 = v4[3];
      if (v25 >= v24 >> 1)
      {
        sub_10009A9D8(v24 > 1, v25 + 1, 1);
        v4 = v32;
      }
      v4[2] = v25 + 1;
      v26 = &v4[3 * v25];
      *((_BYTE *)v26 + 32) = v6;
      v26[5] = v21;
      v26[6] = v22;
      sub_100CA9950(&v34);
      v6 = v34;
      v5 = v35;
      v8 = v36;
      v7 = v37;
      v9 = v38;
      sub_100005CF0((uint64_t)&v34, (uint64_t)v39, &qword_1010F1AF0);
    }
    while (v40);
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1001B4350(__int16 a1)
{
  Swift::String v1;
  void *object;
  Swift::String v3;

  if ((a1 & 0x100) != 0)
  {
    if ((_BYTE)a1)
      return 0x5079636167656C2ELL;
    else
      return 0x3831657079742ELL;
  }
  else
  {
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    object = v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    v3._countAndFlagsBits = 41;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    return 0x2868736F702ELL;
  }
}

uint64_t sub_1001B440C(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  char v37;
  char v38;

  v35 = a2;
  v3 = sub_10001A9A8(&qword_1010F1D00);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F1D08);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F1D10);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F1D18);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  sub_10001AA44(a1, v16);
  v18 = sub_1001BCB5C();
  v19 = v17;
  v20 = v35;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AdvertismentType.CodingKeys, &type metadata for AdvertismentType.CodingKeys, v18, v16, v19);
  if ((v20 & 0x100) != 0)
  {
    if ((_BYTE)v20)
    {
      v37 = 1;
      v25 = sub_1001BCBE4();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertismentType.LegacyPoshCodingKeys, &v37, v12, &type metadata for AdvertismentType.LegacyPoshCodingKeys, v25);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
    }
    else
    {
      v36 = 0;
      v26 = sub_1001BCC28();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertismentType.Type18CodingKeys, &v36, v12, &type metadata for AdvertismentType.Type18CodingKeys, v26);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    }
  }
  else
  {
    v38 = 2;
    v21 = sub_1001BCBA0();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertismentType.PoshCodingKeys, &v38, v12, &type metadata for AdvertismentType.PoshCodingKeys, v21);
    v22 = v20;
    v23 = v34;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v24, v34);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1001B4680()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F5079636167656CLL;
  if (*v0 != 1)
    v1 = 1752395632;
  if (*v0)
    return v1;
  else
    return 0x383165707974;
}

uint64_t sub_1001B46D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001BC024(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B46F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCB5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4720(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCB5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B4748(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCBE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4770(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCBE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B47A0()
{
  return 0x6B726F7774656ELL;
}

uint64_t sub_1001B47B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6B726F7774656ELL && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B726F7774656ELL, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1001B484C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCBA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4874(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCBA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B489C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCC28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B48C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BCC28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B48EC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001BC16C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_1001B491C(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_1001B440C(a1, *v1 | (v1[1] << 8));
}

uint64_t sub_1001B4944()
{
  unsigned __int8 *v0;

  return sub_1001B4350(*v0 | (unsigned __int16)(v0[1] << 8));
}

uint64_t sub_1001B495C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  ValueMetadata *v12;
  uint64_t result;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[2];

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MACAddress(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x2000000000000000) == 0)
  {
    strcpy((char *)v21, ".wild(advt: ");
    BYTE5(v21[1]) = 0;
    HIWORD(v21[1]) = -5120;
    v19 = a1;
    v20 = a2;
    sub_10012C644(a1, a2);
    v11 = sub_1001AE66C();
    v12 = &type metadata for Advertisement;
LABEL_5:
    v17._countAndFlagsBits = RawRepresentable<>.hexString.getter(v12, v11);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    sub_10012C494(a1, a2);
    return v21[0];
  }
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  sub_10001BBBC(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v21[0] = 0xD000000000000014;
  v21[1] = 0x8000000100ECA630;
  sub_10001BBBC(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  MACAddress.init(addressToSanitize:type:)(a1, a2 & 0xDFFFFFFFFFFFFFFFLL, 1);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v14 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v14);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v16._countAndFlagsBits = 0x203A74766461202CLL;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);
    v19 = a1;
    v20 = a2 & 0xDFFFFFFFFFFFFFFFLL;
    v11 = sub_1001B5DBC();
    v12 = &type metadata for NearOwnerAdvertisement;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B4BA4(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v35 = a2;
  v5 = sub_10001A9A8(&qword_1010F1C48);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F1C50);
  v29 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F1C58);
  v32 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v15);
  v16 = sub_1001BBED0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AdvertisementUnion.CodingKeys, &type metadata for AdvertisementUnion.CodingKeys, v16, v15, v14);
  if ((a3 & 0x2000000000000000) != 0)
  {
    LOBYTE(v33) = 1;
    v22 = v35;
    sub_10001BBBC(v35, a3 & 0xDFFFFFFFFFFFFFFFLL);
    v23 = sub_1001BBF14();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertisementUnion.NearOwnerCodingKeys, &v33, v11, &type metadata for AdvertisementUnion.NearOwnerCodingKeys, v23);
    v33 = v22;
    v34 = a3 & 0xDFFFFFFFFFFFFFFFLL;
    v24 = sub_1001BBF58();
    v25 = v31;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, v26, v31, &type metadata for NearOwnerAdvertisement, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v25);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
    v21 = v22;
  }
  else
  {
    LOBYTE(v33) = 0;
    v17 = v35;
    sub_10001BBBC(v35, a3);
    v18 = sub_1001BBF9C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertisementUnion.WildCodingKeys, &v33, v11, &type metadata for AdvertisementUnion.WildCodingKeys, v18);
    v33 = v17;
    v34 = a3;
    v19 = sub_1001BBFE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, v20, v8, &type metadata for Advertisement, v19);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v11);
    v21 = v17;
  }
  return sub_10012C494(v21, a3);
}

uint64_t sub_1001B4E30()
{
  _BYTE *v0;

  if (*v0)
    return 0x656E774F7261656ELL;
  else
    return 1684826487;
}

uint64_t sub_1001B4E68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001BC590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B4E8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BBED0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4EB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BBED0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B4EDC()
{
  return 12383;
}

uint64_t sub_1001B4EEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BBF14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4F14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BBF14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B4F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1001B4FB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BBF9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B4FE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001BBF9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1001B5008@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1001BC67C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1001B5030(_QWORD *a1)
{
  uint64_t v1;

  return sub_1001B4BA4(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int sub_1001B5048()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)((v2 >> 61) & 1);
  sub_10001BBBC(v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(v4, v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  sub_10012C494(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B50C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *v1;
  v4 = v1[1];
  Hasher._combine(_:)((v4 >> 61) & 1);
  sub_10001BBBC(v3, v4 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(a1, v3, v4 & 0xDFFFFFFFFFFFFFFFLL);
  return sub_10012C494(v3, v4);
}

Swift::Int sub_1001B5124()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)((v2 >> 61) & 1);
  sub_10001BBBC(v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  Data.hash(into:)(v4, v1, v2 & 0xDFFFFFFFFFFFFFFFLL);
  sub_10012C494(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B5198()
{
  uint64_t *v0;

  return sub_1001B495C(*v0, v0[1]);
}

uint64_t sub_1001B51A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if ((v3 & 0x2000000000000000) != 0)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      sub_10012C644(*a1, v3);
      sub_10012C644(v4, v5);
      v6 = v2;
      v7 = v3 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  else if ((v5 & 0x2000000000000000) == 0)
  {
    sub_10012C644(*a1, v3);
    sub_10012C644(v4, v5);
    v6 = v2;
    v7 = v3;
LABEL_7:
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v8 = v9;
    sub_10012C494(v4, v5);
    sub_10012C494(v2, v3);
    return v8 & 1;
  }
  v8 = 0;
  return v8 & 1;
}

void sub_1001B5264(uint64_t a1)
{
  sub_1001B528C(a1, qword_1011B69C8);
}

void sub_1001B5278(uint64_t a1)
{
  sub_1001B528C(a1, qword_1011B69E0);
}

void sub_1001B528C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSString v4;
  id v5;

  v3 = type metadata accessor for UUID(0);
  sub_1000234D8(v3, a2);
  sub_10001A9E8(v3, (uint64_t)a2);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithString:", v4);

  sub_1008C5174();
}

uint64_t sub_1001B532C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;

  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v1 = *v0;
  v2 = v0[1];
  sub_10012C644(*v0, v2);
  v3._countAndFlagsBits = sub_1001B495C(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_10012C494(v1, v2);
  v4._countAndFlagsBits = 0x3A73757461747320;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x3A64616F6C796170;
}

uint64_t sub_1001B5430()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for DiscoveredObject(0) + 44)) >> 4) & 3;
}

uint64_t sub_1001B5454()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  int *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t object;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  Swift::String v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  Swift::String v38;
  uint64_t countAndFlagsBits;
  char v40;
  unint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t v57;
  Swift::String v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v69;
  uint64_t v70;
  unint64_t v71;

  v1 = type metadata accessor for DefaultStringInterpolation.BinaryIntegerRadix(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  if (v0[1] == 1)
  {
    if (*v0)
      v6 = 0x6F5079636167654CLL;
    else
      v6 = 0x38312065707954;
    if (*v0)
      v7 = (void *)0xEA00000000006873;
    else
      v7 = (void *)0xE700000000000000;
  }
  else
  {
    v70 = 0x5B68736F50;
    v71 = 0xE500000000000000;
    LOBYTE(v69._countAndFlagsBits) = v5;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 93;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    v6 = v70;
    v7 = (void *)v71;
  }
  v10 = type metadata accessor for DiscoveredObject(0);
  v11 = (int *)v10;
  v12 = (uint64_t *)&v0[*(int *)(v10 + 36)];
  v14 = *v12;
  v13 = v12[1];
  if ((v13 & 0x2000000000000000) != 0)
  {
    v70 = 0;
    v71 = 0xE000000000000000;
    sub_10001BBBC(v14, v13 & 0xDFFFFFFFFFFFFFFFLL);
    _StringGuts.grow(_:)(70);
    v18._countAndFlagsBits = 0x7461446E6163735BLL;
    v18._object = (void *)0xEB00000000203A65;
    String.append(_:)(v18);
    v19 = type metadata accessor for Date(0);
    v20 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x203A6570797420;
    v22._object = (void *)0xE700000000000000;
    String.append(_:)(v22);
    v23._countAndFlagsBits = v6;
    v23._object = v7;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0x7373657264646120;
    v24._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v24);
    v25 = type metadata accessor for MACAddress(0);
    v26 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x203A56444120;
    v28._object = (void *)0xE600000000000000;
    String.append(_:)(v28);
    v69._countAndFlagsBits = v14;
    v69._object = (void *)(v13 & 0xDFFFFFFFFFFFFFFFLL);
    v29 = sub_1001B5DBC();
    v30._countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for NearOwnerAdvertisement, v29);
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0x3A73757461747320;
    v31._object = (void *)0xE900000000000020;
    String.append(_:)(v31);
    v32._countAndFlagsBits = sub_1000AEDC4(v0[v11[11]]);
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33 = 0xE500000000000000;
    v34._countAndFlagsBits = 0x203A6B6520;
    v34._object = (void *)0xE500000000000000;
    String.append(_:)(v34);
    v35 = v0[v11[12]];
    v69._countAndFlagsBits = 0x203A4D6F427BLL;
    v69._object = (void *)0xE600000000000000;
    if ((v35 & 4) != 0)
      v36 = 1702195828;
    else
      v36 = 0x65736C6166;
    if ((v35 & 4) != 0)
      v33 = 0xE400000000000000;
    v37 = v33;
    String.append(_:)(*(Swift::String *)&v36);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 125;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    countAndFlagsBits = v69._countAndFlagsBits;
    object = (unint64_t)v69._object;
  }
  else
  {
    v15 = &v0[*(int *)(v10 + 52)];
    if ((v15[1] & 1) != 0)
    {
      sub_10001BBBC(v14, v13);
      object = 0xE300000000000000;
      v17 = 4271950;
    }
    else
    {
      v40 = *v15;
      v70 = 0;
      v71 = 0xE000000000000000;
      LOBYTE(v69._countAndFlagsBits) = v40;
      (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DefaultStringInterpolation.BinaryIntegerRadix.hex(_:), v1);
      sub_10001BBBC(v14, v13);
      v41 = sub_1001B5E80();
      DefaultStringInterpolation.appendInterpolation<A>(_:radix:padded:)(&v69, v4, 1, &type metadata for UInt8, v41);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v17 = v70;
      object = v71;
    }
    v70 = 0;
    v71 = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v42._countAndFlagsBits = 0x7461446E6163735BLL;
    v42._object = (void *)0xEB00000000203A65;
    String.append(_:)(v42);
    v43 = type metadata accessor for Date(0);
    v44 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 0x203A6570797420;
    v46._object = (void *)0xE700000000000000;
    String.append(_:)(v46);
    v47._countAndFlagsBits = v6;
    v47._object = v7;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 0x7373657264646120;
    v48._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v48);
    v49 = type metadata accessor for MACAddress(0);
    v50 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 0x203A56444120;
    v52._object = (void *)0xE600000000000000;
    String.append(_:)(v52);
    v69._countAndFlagsBits = v14;
    v69._object = (void *)v13;
    v53 = sub_1001AE66C();
    v54._countAndFlagsBits = RawRepresentable<>.hexString.getter(&type metadata for Advertisement, v53);
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0x3A73757461747320;
    v55._object = (void *)0xE900000000000020;
    String.append(_:)(v55);
    v56._countAndFlagsBits = sub_1000AEDC4(v0[v11[11]]);
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57 = 0xE500000000000000;
    v58._countAndFlagsBits = 0x203A6B6520;
    v58._object = (void *)0xE500000000000000;
    String.append(_:)(v58);
    v59 = v0[v11[12]];
    v69._countAndFlagsBits = 0x203A4D6F427BLL;
    v69._object = (void *)0xE600000000000000;
    if ((v59 & 4) != 0)
      v60 = 1702195828;
    else
      v60 = 0x65736C6166;
    if ((v59 & 4) != 0)
      v57 = 0xE400000000000000;
    v61 = v57;
    String.append(_:)(*(Swift::String *)&v60);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 125;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 0x203A746E696820;
    v63._object = (void *)0xE700000000000000;
    String.append(_:)(v63);
    countAndFlagsBits = v17;
  }
  v64 = object;
  String.append(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  v65._countAndFlagsBits = 0x203A6973737220;
  v65._object = (void *)0xE700000000000000;
  String.append(_:)(v65);
  LODWORD(v69._countAndFlagsBits) = *(_DWORD *)&v0[v11[15]];
  v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = 93;
  v67._object = (void *)0xE100000000000000;
  String.append(_:)(v67);
  sub_10012C494(v14, v13);
  return v70;
}

uint64_t sub_1001B5B28()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;

  v9 = 0;
  v10 = 0xE000000000000000;
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v2._countAndFlagsBits = 123;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3 = v0 + *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  v4 = sub_10001A9A8(&qword_1010F1CB8);
  _print_unlocked<A, B>(_:_:)(v3, &v8, v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._countAndFlagsBits = 125;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return v9;
}

uint64_t sub_1001B5BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;

  v1 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
  __chkstk_darwin(v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BeaconDetails(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DetailedDiscoveredObject(0);
  sub_1001BCAD0(v0 + *(int *)(v8 + 20), (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v3, (uint64_t *)&unk_101115FA0);
    return sub_1001B5454();
  }
  else
  {
    sub_1001BCB18((uint64_t)v3, (uint64_t)v7);
    v18 = 0;
    v19 = 0xE000000000000000;
    v10._countAndFlagsBits = sub_1001B5454();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 32;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v12._countAndFlagsBits = 123;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13 = &v7[*(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20)];
    v14 = sub_10001A9A8(&qword_1010F1CB8);
    _print_unlocked<A, B>(_:_:)(v13, &v17, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v15._countAndFlagsBits = 125;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v9 = v18;
    sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconDetails);
  }
  return v9;
}

unint64_t sub_1001B5DBC()
{
  unint64_t result;

  result = qword_1010F1AB8;
  if (!qword_1010F1AB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NearOwnerAdvertisement, &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F1AB8);
  }
  return result;
}

Swift::Int sub_1001B5E00(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  Swift::Int result;
  char *v6[2];

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F09C(v3);
  v4 = (char *)v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1001B5EC4(v6);
  *a1 = v3;
  return result;
}

unint64_t sub_1001B5E80()
{
  unint64_t result;

  result = qword_1010F1AC0;
  if (!qword_1010F1AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1010F1AC0);
  }
  return result;
}

Swift::Int sub_1001B5EC4(char **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  char *v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char **v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  char v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  Swift::Int v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  char *v140;
  char *v141;
  uint64_t v142;
  char **v143;
  char *v144;
  Swift::Int v145;
  uint64_t v146;
  uint64_t v147;

  v3 = type metadata accessor for UUID(0);
  v147 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v133 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v144 = (char *)&v129 - v7;
  v8 = __chkstk_darwin(v6);
  v141 = (char *)&v129 - v9;
  __chkstk_darwin(v8);
  v140 = (char *)&v129 - v10;
  v11 = (Swift::Int)a1[1];
  result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_141;
    if (v11)
      return sub_1001B693C(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_149;
  v143 = a1;
  v130 = result;
  v136 = v1;
  if (v11 < 2)
  {
    v17 = (char *)_swiftEmptyArrayStorage;
    v135 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
    v129 = _swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      v19 = _swiftEmptyArrayStorage[2];
LABEL_107:
      if (v19 >= 2)
      {
        v122 = *v143;
        do
        {
          v123 = v19 - 2;
          if (v19 < 2)
            goto LABEL_136;
          if (!v122)
            goto LABEL_148;
          v124 = *(_QWORD *)&v17[16 * v123 + 32];
          v125 = *(_QWORD *)&v17[16 * v19 + 24];
          v126 = v136;
          sub_1001B6BB4((unint64_t)&v122[*(_QWORD *)(v147 + 72) * v124], (unint64_t)&v122[*(_QWORD *)(v147 + 72) * *(_QWORD *)&v17[16 * v19 + 16]], (unint64_t)&v122[*(_QWORD *)(v147 + 72) * v125], v135);
          v136 = v126;
          if (v126)
            break;
          if (v125 < v124)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = sub_10088F088((uint64_t)v17);
          if (v123 >= *((_QWORD *)v17 + 2))
            goto LABEL_138;
          v127 = &v17[16 * v123 + 32];
          *(_QWORD *)v127 = v124;
          *((_QWORD *)v127 + 1) = v125;
          v128 = *((_QWORD *)v17 + 2);
          if (v19 > v128)
            goto LABEL_139;
          memmove(&v17[16 * v19 + 16], &v17[16 * v19 + 32], 16 * (v128 - v19));
          *((_QWORD *)v17 + 2) = v128 - 1;
          v19 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v129[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v147 + 80);
    v129 = (_QWORD *)v15;
    v135 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v17 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v20 = v18;
    v21 = v18 + 1;
    v134 = v18;
    if (v18 + 1 >= v11)
    {
      v32 = v18 + 1;
      v41 = v136;
      goto LABEL_58;
    }
    v22 = *v143;
    v145 = v11;
    v23 = v147;
    v24 = *(_QWORD *)(v147 + 72);
    v25 = *(void (**)(_QWORD, _QWORD, _QWORD))(v147 + 16);
    v26 = v140;
    v25(v140, &v22[v24 * v21], v3);
    v27 = &v22[v24 * v20];
    v28 = v141;
    v25(v141, v27, v3);
    v142 = sub_100006204(&qword_1010F1AE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v139) = dispatch thunk of static Comparable.< infix(_:_:)(v26, v28, v3, v142);
    v29 = *(void (**)(_QWORD, _QWORD))(v23 + 8);
    v30 = v28;
    v20 = v134;
    v29(v30, v3);
    v29(v26, v3);
    v31 = v22;
    v32 = v20 + 2;
    v137 = v31;
    v146 = v24;
    if (v20 + 2 >= v145)
    {
      v41 = v136;
      v40 = v145;
      v39 = v24;
      if ((v139 & 1) == 0)
        break;
    }
    else
    {
      v131 = v17;
      v138 = v24 * v21;
      v33 = v31;
      v34 = v24 * v32;
      do
      {
        v35 = v32;
        v36 = v140;
        v25(v140, &v33[v34], v3);
        v37 = v141;
        v25(v141, &v33[v138], v3);
        v38 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v37, v3, v142);
        v29(v37, v3);
        v29(v36, v3);
        if (((v139 ^ v38) & 1) != 0)
        {
          v41 = v136;
          v17 = v131;
          v32 = v35;
          v20 = v134;
          v40 = v145;
          v39 = v146;
          if ((v139 & 1) == 0)
            goto LABEL_38;
          goto LABEL_26;
        }
        v32 = v35 + 1;
        v39 = v146;
        v33 += v146;
      }
      while (v145 != v35 + 1);
      v40 = v145;
      v32 = v145;
      v41 = v136;
      v17 = v131;
      v20 = v134;
      if ((v139 & 1) == 0)
        break;
    }
LABEL_26:
    if (v32 < v20)
      goto LABEL_142;
    if (v20 >= v32)
      break;
    v131 = v17;
    v42 = 0;
    v43 = v39 * (v32 - 1);
    v44 = v32 * v39;
    v45 = v20;
    v46 = v20 * v39;
    v47 = v143;
    v142 = v32;
    do
    {
      if (v45 != v32 + v42 - 1)
      {
        if (!v137)
          goto LABEL_147;
        v48 = v41;
        v49 = &v137[v46];
        v50 = &v137[v43];
        v139 = *(char **)(v147 + 32);
        ((void (*)(char *, char *, uint64_t))v139)(v133, &v137[v46], v3);
        if (v46 < v43 || v49 >= &v137[v44])
        {
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v3);
        }
        else if (v46 != v43)
        {
          swift_arrayInitWithTakeBackToFront(v49, v50);
        }
        ((void (*)(char *, char *, uint64_t))v139)(v50, v133, v3);
        v41 = v48;
        v32 = v142;
        v47 = v143;
        v39 = v146;
      }
      ++v45;
      --v42;
      v43 -= v39;
      v44 -= v39;
      v46 += v39;
    }
    while (v45 < v32 + v42);
    v17 = v131;
    v20 = v134;
    v40 = v145;
    if (v32 < v145)
      goto LABEL_41;
LABEL_58:
    if (v32 < v20)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v136 = v41;
    v142 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v17 = sub_10088E710(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    v71 = *((_QWORD *)v17 + 2);
    v70 = *((_QWORD *)v17 + 3);
    v19 = v71 + 1;
    if (v71 >= v70 >> 1)
      v17 = sub_10088E710((char *)(v70 > 1), v71 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v19;
    v72 = v17 + 32;
    v73 = &v17[16 * v71 + 32];
    v74 = v142;
    *(_QWORD *)v73 = v20;
    *((_QWORD *)v73 + 1) = v74;
    if (v71)
    {
      while (1)
      {
        v75 = v19 - 1;
        if (v19 >= 4)
        {
          v80 = &v72[16 * v19];
          v81 = *((_QWORD *)v80 - 8);
          v82 = *((_QWORD *)v80 - 7);
          v86 = __OFSUB__(v82, v81);
          v83 = v82 - v81;
          if (v86)
            goto LABEL_124;
          v85 = *((_QWORD *)v80 - 6);
          v84 = *((_QWORD *)v80 - 5);
          v86 = __OFSUB__(v84, v85);
          v78 = v84 - v85;
          v79 = v86;
          if (v86)
            goto LABEL_125;
          v87 = v19 - 2;
          v88 = &v72[16 * v19 - 32];
          v90 = *(_QWORD *)v88;
          v89 = *((_QWORD *)v88 + 1);
          v86 = __OFSUB__(v89, v90);
          v91 = v89 - v90;
          if (v86)
            goto LABEL_127;
          v86 = __OFADD__(v78, v91);
          v92 = v78 + v91;
          if (v86)
            goto LABEL_130;
          if (v92 >= v83)
          {
            v110 = &v72[16 * v75];
            v112 = *(_QWORD *)v110;
            v111 = *((_QWORD *)v110 + 1);
            v86 = __OFSUB__(v111, v112);
            v113 = v111 - v112;
            if (v86)
              goto LABEL_134;
            v103 = v78 < v113;
            goto LABEL_95;
          }
        }
        else
        {
          if (v19 != 3)
          {
            v104 = *((_QWORD *)v17 + 4);
            v105 = *((_QWORD *)v17 + 5);
            v86 = __OFSUB__(v105, v104);
            v97 = v105 - v104;
            v98 = v86;
            goto LABEL_89;
          }
          v77 = *((_QWORD *)v17 + 4);
          v76 = *((_QWORD *)v17 + 5);
          v86 = __OFSUB__(v76, v77);
          v78 = v76 - v77;
          v79 = v86;
        }
        if ((v79 & 1) != 0)
          goto LABEL_126;
        v87 = v19 - 2;
        v93 = &v72[16 * v19 - 32];
        v95 = *(_QWORD *)v93;
        v94 = *((_QWORD *)v93 + 1);
        v96 = __OFSUB__(v94, v95);
        v97 = v94 - v95;
        v98 = v96;
        if (v96)
          goto LABEL_129;
        v99 = &v72[16 * v75];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v86 = __OFSUB__(v100, v101);
        v102 = v100 - v101;
        if (v86)
          goto LABEL_132;
        if (__OFADD__(v97, v102))
          goto LABEL_133;
        if (v97 + v102 >= v78)
        {
          v103 = v78 < v102;
LABEL_95:
          if (v103)
            v75 = v87;
          goto LABEL_97;
        }
LABEL_89:
        if ((v98 & 1) != 0)
          goto LABEL_128;
        v106 = &v72[16 * v75];
        v108 = *(_QWORD *)v106;
        v107 = *((_QWORD *)v106 + 1);
        v86 = __OFSUB__(v107, v108);
        v109 = v107 - v108;
        if (v86)
          goto LABEL_131;
        if (v109 < v97)
          goto LABEL_14;
LABEL_97:
        v114 = v75 - 1;
        if (v75 - 1 >= v19)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v143)
          goto LABEL_146;
        v115 = v17;
        v116 = &v72[16 * v114];
        v117 = *(_QWORD *)v116;
        v118 = &v72[16 * v75];
        v119 = *((_QWORD *)v118 + 1);
        v120 = v136;
        sub_1001B6BB4((unint64_t)&(*v143)[*(_QWORD *)(v147 + 72) * *(_QWORD *)v116], (unint64_t)&(*v143)[*(_QWORD *)(v147 + 72) * *(_QWORD *)v118], (unint64_t)&(*v143)[*(_QWORD *)(v147 + 72) * v119], v135);
        v136 = v120;
        if (v120)
          goto LABEL_118;
        if (v119 < v117)
          goto LABEL_121;
        if (v75 > *((_QWORD *)v115 + 2))
          goto LABEL_122;
        *(_QWORD *)v116 = v117;
        *(_QWORD *)&v72[16 * v114 + 8] = v119;
        v121 = *((_QWORD *)v115 + 2);
        if (v75 >= v121)
          goto LABEL_123;
        v17 = v115;
        v19 = v121 - 1;
        memmove(&v72[16 * v75], v118 + 16, 16 * (v121 - 1 - v75));
        *((_QWORD *)v115 + 2) = v121 - 1;
        if (v121 <= 2)
          goto LABEL_14;
      }
    }
    v19 = 1;
LABEL_14:
    v11 = (Swift::Int)v143[1];
    v18 = v142;
    if (v142 >= v11)
      goto LABEL_107;
  }
LABEL_38:
  v47 = v143;
  if (v32 >= v40)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v32, v20))
    goto LABEL_140;
  if (v32 - v20 >= v130)
    goto LABEL_58;
  if (__OFADD__(v20, v130))
    goto LABEL_143;
  if (v20 + v130 >= v40)
    v51 = v40;
  else
    v51 = v20 + v130;
  if (v51 >= v20)
  {
    if (v32 != v51)
    {
      v131 = v17;
      v132 = v51;
      v52 = *(_QWORD *)(v147 + 72);
      v53 = *(char **)(v147 + 16);
      v136 = v41;
      v137 = v53;
      v54 = v52 * (v32 - 1);
      v138 = v52;
      v146 = v32 * v52;
      do
      {
        v56 = 0;
        v142 = v32;
        v139 = (char *)v54;
        while (1)
        {
          v145 = v20;
          v57 = *v47;
          v58 = v140;
          v59 = v47;
          v60 = (void (*)(_QWORD, _QWORD, _QWORD))v137;
          ((void (*)(char *, char *, uint64_t))v137)(v140, &(*v47)[v146 + v56], v3);
          v61 = &v57[v54 + v56];
          v62 = v141;
          v60(v141, v61, v3);
          v63 = sub_100006204(&qword_1010F1AE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)(v58, v62, v3, v63);
          v64 = *(void (**)(_QWORD, _QWORD))(v147 + 8);
          v64(v62, v3);
          v64(v58, v3);
          if ((v57 & 1) == 0)
            break;
          v65 = *v59;
          if (!*v59)
            goto LABEL_145;
          v66 = &v65[v146 + v56];
          v54 = (uint64_t)v139;
          v67 = &v139[(_QWORD)v65 + v56];
          v68 = *(void (**)(_QWORD, _QWORD, _QWORD))(v147 + 32);
          v68(v144, v66, v3);
          swift_arrayInitWithTakeFrontToBack(v66, v67, 1, v3);
          v68(v67, v144, v3);
          v56 -= v138;
          v20 = v145 + 1;
          v55 = v142;
          v47 = v143;
          if (v142 == v145 + 1)
            goto LABEL_51;
        }
        v55 = v142;
        v47 = v59;
        v54 = (uint64_t)v139;
LABEL_51:
        v32 = v55 + 1;
        v54 += v138;
        v146 += v138;
        v20 = v134;
      }
      while (v32 != v132);
      v32 = v132;
      v41 = v136;
      v17 = v131;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B693C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a1;
  v7 = type metadata accessor for UUID(0);
  v38 = *(_QWORD **)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v34 = (char *)&v28 - v11;
  result = __chkstk_darwin(v10);
  v33 = (char *)&v28 - v13;
  v36 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v14 = v38[9];
    v31 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v32 = a4;
    v40 = v14 * (v36 - 1);
    v35 = v14;
    v39 = v14 * v36;
LABEL_5:
    v15 = 0;
    v16 = v30;
    while (1)
    {
      v17 = *a4;
      v18 = v33;
      v19 = v31;
      v31(v33, v39 + v15 + *a4, v7);
      v20 = v34;
      v19(v34, v40 + v15 + v17, v7);
      v21 = sub_100006204(&qword_1010F1AE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v7, v21);
      v22 = (void (*)(char *, uint64_t))v38[1];
      v23 = v20;
      a4 = v32;
      v22(v23, v7);
      result = ((uint64_t (*)(char *, uint64_t))v22)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v40 += v35;
        v39 += v35;
        if (++v36 == v29)
          return result;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = v24 + v39 + v15;
      v26 = v24 + v40 + v15;
      v27 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v27(v37, v25, v7);
      swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v7);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v26, v37, v7);
      v15 -= v35;
      if (v36 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B6BB4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v51 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v50 = (char *)&v45 - v12;
  v52 = v9[9];
  if (!v52)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v52 == -1)
    goto LABEL_62;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v52 == -1)
    goto LABEL_63;
  v14 = (uint64_t)(a2 - a1) / v52;
  v55 = a1;
  v54 = a4;
  v15 = v13 / v52;
  if (v14 >= v13 / v52)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v52;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v15, v8);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v17;
      v53 = a4 + v17;
      v55 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v31 = -v52;
        v46 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v47 = v9;
        v48 = a4;
        v49 = a1;
        do
        {
          v52 = a3 + v31;
          v32 = v50;
          v33 = v46;
          v46(v50, v29 + v31, v8);
          v34 = a2 + v31;
          v35 = v31;
          v36 = v51;
          v33(v51, v34, v8);
          v37 = sub_100006204(&qword_1010F1AE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v33) = dispatch thunk of static Comparable.< infix(_:_:)(v32, v36, v8, v37);
          v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v36, v8);
          v38(v32, v8);
          if ((v33 & 1) != 0)
          {
            v31 = v35;
            v39 = v52;
            if (a3 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v34, 1, v8);
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v52, v34);
            }
            v55 += v31;
          }
          else
          {
            v42 = v53;
            v43 = v53 + v35;
            v53 += v35;
            v31 = v35;
            v39 = v52;
            if (a3 < v42 || v52 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v52, v43, 1, v8);
              v34 = a2;
              v9 = v47;
              v40 = v48;
              v41 = v49;
            }
            else
            {
              v9 = v47;
              v40 = v48;
              v41 = v49;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront(v52, v43);
              v34 = a2;
            }
          }
          v29 = v53;
          if (v53 <= v40)
            break;
          a2 = v34;
          a3 = v39;
        }
        while (v34 > v41);
      }
      goto LABEL_60;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v52;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v14, v8);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v49 = a4 + v16;
    v53 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v50;
        v19(v50, a2, v8);
        v22 = v51;
        v19(v51, a4, v8);
        v23 = sub_100006204(&qword_1010F1AE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v24 = dispatch thunk of static Comparable.< infix(_:_:)(v21, v22, v8, v23);
        v25 = (void (*)(char *, uint64_t))v9[1];
        v25(v22, v8);
        v25(v21, v8);
        v26 = v55;
        if ((v24 & 1) != 0)
        {
          v27 = a2 + v52;
          if (v55 < a2 || v55 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v55, a2, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 == a2)
              v26 = a2;
            else
              swift_arrayInitWithTakeBackToFront(v55, a2);
          }
        }
        else
        {
          v28 = v54 + v52;
          if (v55 < v54 || v55 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v55, v54, 1, v8);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v55 != v54)
              swift_arrayInitWithTakeBackToFront(v55, v54);
          }
          v54 = v28;
          v27 = a2;
        }
        v55 = v26 + v52;
        a4 = v54;
        if (v54 >= v49)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_60:
    sub_10088E808(&v55, &v54, (uint64_t *)&v53);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1001B7108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v34;
  _QWORD v36[3];
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t, __n128);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v40 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1;
    v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v14 = *(_QWORD *)(v6 + 72);
    v41 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
    v36[1] = v12;
    v36[2] = v2;
    v15 = swift_bridgeObjectRetain(v12);
    v44 = _swiftEmptyArrayStorage;
    v16 = (uint64_t)v40;
    v38 = v10;
    v39 = a2;
    v37 = v14;
    while (1)
    {
      v41(v10, v13, v5, v15);
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v17)(v10, 0, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5) == 1)
        break;
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v16, v10, v5);
      if (*(_QWORD *)(a2 + 16) && (v18 = sub_100003FB0(v16), (v19 & 1) != 0))
      {
        v20 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v18);
        v21 = *v20;
        v22 = v20[1];
        sub_10001BBBC(*v20, v22);
        v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of CustomStringConvertible.description.getter(v5, v23);
        v43 = v24;
        v25._countAndFlagsBits = 8250;
        v25._object = (void *)0xE200000000000000;
        String.append(_:)(v25);
        v26._countAndFlagsBits = Data.hexString.getter(v21, v22);
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        sub_10001BC14(v21, v22);
        v27 = v42;
        v28 = v43;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v40, v5);
        if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
          v44 = sub_1007C7438(0, v44[2] + 1, 1, v44);
        v30 = v44[2];
        v29 = v44[3];
        if (v30 >= v29 >> 1)
          v44 = sub_1007C7438((_QWORD *)(v29 > 1), v30 + 1, 1, v44);
        v31 = v44;
        v44[2] = v30 + 1;
        v32 = &v31[2 * v30];
        v32[4] = v27;
        v32[5] = v28;
        v10 = v38;
        a2 = v39;
        v16 = (uint64_t)v40;
        v14 = v37;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
      }
      v13 += v14;
      if (!--v11)
      {
        v17(v10, 1, 1, v5, v15);
        break;
      }
    }
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    v34 = swift_bridgeObjectRetain(a1);
    v44 = _swiftEmptyArrayStorage;
    v33(v10, 1, 1, v5, v34);
  }
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_1001B7400(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v2 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v2 - 8);
  v48 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataServiceDataKey);
  if (!*(_QWORD *)(a1 + 16) || (v7 = sub_100518DA0(v5, v6), (v8 & 1) == 0))
  {
    v51 = 0u;
    v52 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v52 + 1))
  {
LABEL_42:
    sub_100004048((uint64_t)&v51, (uint64_t *)&unk_1010F6390);
    return 0;
  }
  v9 = sub_10001A9A8((uint64_t *)&unk_101116990);
  if ((swift_dynamicCast(&v50, &v51, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(v50 + 64);
  v44 = v50 + 64;
  v11 = 1 << *(_BYTE *)(v50 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v45 = (unint64_t)(v11 + 63) >> 6;
  v46 = v50;
  swift_bridgeObjectRetain(v50);
  v14 = 0;
  v15 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v49 = v14;
      v18 = v17 | (v14 << 6);
    }
    else
    {
      v19 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_48;
      if (v19 >= v45)
      {
LABEL_45:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v15;
      }
      v20 = *(_QWORD *)(v44 + 8 * v19);
      v21 = v14 + 1;
      if (!v20)
      {
        v21 = v14 + 2;
        if (v14 + 2 >= v45)
          goto LABEL_45;
        v20 = *(_QWORD *)(v44 + 8 * v21);
        if (!v20)
        {
          v21 = v14 + 3;
          if (v14 + 3 >= v45)
            goto LABEL_45;
          v20 = *(_QWORD *)(v44 + 8 * v21);
          if (!v20)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v45)
              goto LABEL_45;
            v20 = *(_QWORD *)(v44 + 8 * v21);
            if (!v20)
            {
              v21 = v14 + 5;
              if (v14 + 5 >= v45)
                goto LABEL_45;
              v20 = *(_QWORD *)(v44 + 8 * v21);
              if (!v20)
              {
                v22 = v14 + 6;
                if (v14 + 6 >= v45)
                  goto LABEL_45;
                v20 = *(_QWORD *)(v44 + 8 * v22);
                if (!v20)
                {
                  while (1)
                  {
                    v21 = v22 + 1;
                    if (__OFADD__(v22, 1))
                      goto LABEL_49;
                    if (v21 >= v45)
                      goto LABEL_45;
                    v20 = *(_QWORD *)(v44 + 8 * v21);
                    ++v22;
                    if (v20)
                      goto LABEL_29;
                  }
                }
                v21 = v14 + 6;
              }
            }
          }
        }
      }
LABEL_29:
      v13 = (v20 - 1) & v20;
      v49 = v21;
      v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    v23 = *(void **)(*(_QWORD *)(v46 + 48) + 8 * v18);
    v24 = (uint64_t *)(*(_QWORD *)(v46 + 56) + 16 * v18);
    v25 = *v24;
    v26 = v24[1];
    v27 = v23;
    sub_10001BBBC(v25, v26);
    v28 = v27;
    sub_10001BBBC(v25, v26);
    sub_1008C5174();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
    *(_QWORD *)&v51 = v15;
    v31 = sub_100003FB0((uint64_t)v4);
    v32 = v15[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      break;
    v35 = v30;
    if (v15[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v15 = (_QWORD *)v51;
        if ((v30 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_100A9ACEC();
        v15 = (_QWORD *)v51;
        if ((v35 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_100A86FC0(v34, isUniquelyReferenced_nonNull_native);
      v36 = sub_100003FB0((uint64_t)v4);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_50;
      v31 = v36;
      v15 = (_QWORD *)v51;
      if ((v35 & 1) != 0)
      {
LABEL_8:
        v16 = v15[7] + 16 * v31;
        sub_10001BC14(*(_QWORD *)v16, *(_QWORD *)(v16 + 8));
        *(_QWORD *)v16 = v25;
        *(_QWORD *)(v16 + 8) = v26;
        goto LABEL_9;
      }
    }
    v15[(v31 >> 6) + 8] |= 1 << v31;
    (*(void (**)(unint64_t, char *, uint64_t))(v47 + 16))(v15[6] + *(_QWORD *)(v47 + 72) * v31, v4, v48);
    v38 = (uint64_t *)(v15[7] + 16 * v31);
    *v38 = v25;
    v38[1] = v26;
    v39 = v15[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_47;
    v15[2] = v41;
LABEL_9:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v4, v48);

    sub_10001BC14(v25, v26);
    v14 = v49;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v48);
  __break(1u);
  return result;
}

uint64_t sub_1001B7844(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    Data.subscript.getter(0);
    Data.subscript.getter(1);
    __asm { BR              X10 }
  }
  return 512;
}

unint64_t sub_1001B7958(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t *v4;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (!v6)
    return swift_bridgeObjectRelease();
  v7 = *(_BYTE *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  sub_10001BBBC(v9, v8);
  if (v8 >> 60 == 15)
    return swift_bridgeObjectRelease();
  v10 = (_QWORD *)*a3;
  result = sub_1005191B0(v7);
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = v12;
  if (v10[3] < v16)
  {
    sub_100A86FE4(v16, v4 & 1);
    result = sub_1005191B0(v7);
    if ((v17 & 1) == (v18 & 1))
      goto LABEL_8;
LABEL_6:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt8);
    __break(1u);
  }
  if ((v4 & 1) == 0)
  {
    v21 = result;
    sub_100A9AD00();
    result = v21;
    v19 = (_QWORD *)*a3;
    if ((v17 & 1) != 0)
    {
LABEL_9:
      v20 = v19[7] + 16 * result;
      sub_10001BC14(*(_QWORD *)v20, *(_QWORD *)(v20 + 8));
      *(_QWORD *)v20 = v9;
      *(_QWORD *)(v20 + 8) = v8;
      if (--v6)
      {
LABEL_15:
        v4 = (unint64_t *)(a1 + 72);
        do
        {
          v7 = *((_BYTE *)v4 - 16);
          v9 = *(v4 - 1);
          v8 = *v4;
          sub_10001BBBC(v9, *v4);
          if (v8 >> 60 == 15)
            break;
          v26 = (_QWORD *)*a3;
          result = sub_1005191B0(v7);
          v28 = v26[2];
          v29 = (v27 & 1) == 0;
          v15 = __OFADD__(v28, v29);
          v30 = v28 + v29;
          if (v15)
            goto LABEL_25;
          v17 = v27;
          if (v26[3] < v30)
          {
            sub_100A86FE4(v30, 1);
            result = sub_1005191B0(v7);
            if ((v17 & 1) != (v31 & 1))
              goto LABEL_6;
          }
          v32 = (_QWORD *)*a3;
          if ((v17 & 1) != 0)
          {
            v25 = v32[7] + 16 * result;
            sub_10001BC14(*(_QWORD *)v25, *(_QWORD *)(v25 + 8));
            *(_QWORD *)v25 = v9;
            *(_QWORD *)(v25 + 8) = v8;
          }
          else
          {
            v32[(result >> 6) + 8] |= 1 << result;
            *(_BYTE *)(v32[6] + result) = v7;
            v33 = (uint64_t *)(v32[7] + 16 * result);
            *v33 = v9;
            v33[1] = v8;
            v34 = v32[2];
            v15 = __OFADD__(v34, 1);
            v35 = v34 + 1;
            if (v15)
              goto LABEL_26;
            v32[2] = v35;
          }
          v4 += 3;
        }
        while (--v6);
      }
      return swift_bridgeObjectRelease();
    }
    goto LABEL_12;
  }
LABEL_8:
  v19 = (_QWORD *)*a3;
  if ((v17 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v19[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(v19[6] + result) = v7;
  v22 = (uint64_t *)(v19[7] + 16 * result);
  *v22 = v9;
  v22[1] = v8;
  v23 = v19[2];
  v15 = __OFADD__(v23, 1);
  v24 = v23 + 1;
  if (!v15)
  {
    v19[2] = v24;
    if (--v6)
      goto LABEL_15;
    return swift_bridgeObjectRelease();
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_1001B7BC8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

unint64_t sub_1001B7C0C()
{
  unint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35[13];

  if (BYTE6(v0) < 2uLL)
  {
    if (qword_1010EA4A8 != -1)
      swift_once(&qword_1010EA4A8, sub_100D0773C);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B80D0);
    sub_10001BBBC(v2, v0);
    v4 = sub_10001BBBC(v2, v0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v35[0] = v8;
      *(_DWORD *)v7 = 136446210;
      v9 = Data.hexString.getter(v2, v0);
      v34 = sub_100016940(v9, v10, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v2, v0);
      sub_10001BC14(v2, v0);
      v11 = "No TLV header: %{public}s";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v11, v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
LABEL_25:

      return sub_1006C9334((uint64_t)_swiftEmptyArrayStorage);
    }
    goto LABEL_24;
  }
  if (v1)
  {
    if (v1 == 1)
    {
      LODWORD(v12) = HIDWORD(v2) - v2;
      if (!__OFSUB__(HIDWORD(v2), (_DWORD)v2))
      {
        v12 = (int)v12;
        goto LABEL_12;
      }
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v14 = *(_QWORD *)(v2 + 16);
    v13 = *(_QWORD *)(v2 + 24);
    v15 = __OFSUB__(v13, v14);
    v12 = v13 - v14;
    if (v15)
      goto LABEL_37;
  }
  else
  {
    v12 = BYTE6(v0);
  }
LABEL_12:
  if (v12 > 31)
  {
    if (qword_1010EA4A8 != -1)
      swift_once(&qword_1010EA4A8, sub_100D0773C);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B80D0);
    sub_10001BBBC(v2, v0);
    v17 = sub_10001BBBC(v2, v0);
    v5 = Logger.logObject.getter(v17);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v35[0] = v8;
      *(_DWORD *)v7 = 136446210;
      v18 = Data.hexString.getter(v2, v0);
      v34 = sub_100016940(v18, v19, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v2, v0);
      sub_10001BC14(v2, v0);
      v11 = "TLV too large: %{public}s";
      goto LABEL_23;
    }
LABEL_24:
    sub_10001BC14(v2, v0);
    sub_10001BC14(v2, v0);
    goto LABEL_25;
  }
  if (Data.subscript.getter(0, v2, v0) != 76 || Data.subscript.getter(1, v2, v0))
  {
    if (qword_1010EA4A8 != -1)
      swift_once(&qword_1010EA4A8, sub_100D0773C);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B80D0);
    sub_10001BBBC(v2, v0);
    v21 = sub_10001BBBC(v2, v0);
    v5 = Logger.logObject.getter(v21);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v35[0] = v8;
      *(_DWORD *)v7 = 136446210;
      v22 = Data.hexString.getter(v2, v0);
      v34 = sub_100016940(v22, v23, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v2, v0);
      sub_10001BC14(v2, v0);
      v11 = "Not parsing non-Apple TLV data: %{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  if (v1)
  {
    if (v1 == 1)
      v25 = v2 >> 32;
    else
      v25 = *(_QWORD *)(v2 + 24);
  }
  else
  {
    v25 = BYTE6(v0);
  }
  if (v25 < 2)
  {
LABEL_38:
    __break(1u);
    JUMPOUT(0x1001B8178);
  }
  v26 = ((uint64_t (*)(uint64_t))Data._Representation.subscript.getter)(2);
  v28 = v27;
  sub_100ACE2B4(v26, v27);
  v30 = v29;
  sub_10001BC14(v26, v28);
  v31 = sub_1001B407C(v30, 0);
  swift_release();
  v32 = v31[2];
  if (v32)
  {
    sub_10001A9A8(&qword_1010F1AE8);
    v33 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v32);
  }
  else
  {
    v33 = _swiftEmptyDictionarySingleton;
  }
  v35[0] = (uint64_t)v33;
  sub_1001B7958((uint64_t)v31, 1, v35);
  swift_bridgeObjectRelease();
  return v35[0];
}

void sub_1001B8188(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  unint64_t v26;
  char v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  Swift::String v80;
  Swift::String v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  _QWORD v122[4];
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  __int128 v136;
  __int128 v137;

  v132 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v3);
  v5 = (char *)v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for MACAddress(0);
  v6 = *(_QWORD *)(v130 - 8);
  v7 = __chkstk_darwin(v130);
  v9 = (char *)v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v128 = (char *)v122 - v10;
  v11 = type metadata accessor for Logger(0);
  v127 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v129 = (uint64_t)v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)v122 - v18;
  swift_bridgeObjectRetain(a1);
  v21 = sub_1001B7400(v20);
  v126 = v9;
  if (v21)
  {
    v22 = v21;
    v131 = v11;
    v23 = v6;
    if (qword_1010E99C8 != -1)
      swift_once(&qword_1010E99C8, sub_1001B5264);
    v125 = v5;
    v24 = sub_10001A9E8(v13, (uint64_t)qword_1011B69C8);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v25(v19, v24, v13);
    if (*(_QWORD *)(v22 + 16) && (v26 = sub_100003FB0((uint64_t)v19), (v27 & 1) != 0))
    {
      v28 = (uint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v26);
      v30 = *v28;
      v29 = v28[1];
      sub_10001BBBC(*v28, v29);
    }
    else
    {
      v30 = 0;
      v29 = 0xF000000000000000;
    }
    v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v19, v13);
    if ((sub_1001B7844(v30, v29) & 0xFF00) == 0x200)
    {
      if (qword_1010E99D0 != -1)
        swift_once(&qword_1010E99D0, sub_1001B5278);
      v34 = sub_10001A9E8(v13, (uint64_t)qword_1011B69E0);
      v25(v17, v34, v13);
      if (*(_QWORD *)(v22 + 16))
      {
        v35 = sub_100003FB0((uint64_t)v17);
        v6 = v23;
        if ((v36 & 1) != 0)
        {
          v37 = (uint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v35);
          v39 = *v37;
          v38 = v37[1];
          sub_10001BBBC(*v37, v38);
        }
        else
        {
          v39 = 0;
          v38 = 0xF000000000000000;
        }
      }
      else
      {
        v39 = 0;
        v38 = 0xF000000000000000;
        v6 = v23;
      }
      v11 = v131;
      v31(v17, v13);
      if ((sub_1001B7844(v39, v38) & 0xFF00) == 0x200)
      {
        swift_bridgeObjectRelease();
        if (qword_1010EA4A8 != -1)
          swift_once(&qword_1010EA4A8, sub_100D0773C);
        v63 = sub_10001A9E8(v11, (uint64_t)qword_1011B80D0);
        v64 = v127;
        v65 = v129;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v129, v63, v11);
        swift_bridgeObjectRetain(v22);
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.error.getter(v67);
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc(12, -1);
          v70 = swift_slowAlloc(32, -1);
          v71 = v70;
          v134 = v70;
          *(_DWORD *)v69 = 136446210;
          if (*(_QWORD *)(v22 + 16))
          {
            v131 = v70;
            v72 = swift_bridgeObjectRetain_n(v22, 2);
            *(_QWORD *)&v136 = sub_100508A54(v72);
            sub_1001B5E00(&v136);
            swift_bridgeObjectRelease();
            v73 = v136;
            swift_bridgeObjectRetain(v22);
            v74 = sub_1001B7108(v73, v22);
            swift_release();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v136 = 91;
            *((_QWORD *)&v136 + 1) = 0xE100000000000000;
            v133 = v74;
            v75 = sub_10001A9A8(&qword_1011063B0);
            v76 = sub_1000193A4((unint64_t *)&qword_1010F1AD8, &qword_1011063B0, (const char *)&protocol conformance descriptor for [A]);
            v77 = BidirectionalCollection<>.joined(separator:)(8251, 0xE200000000000000, v75, v76);
            v79 = v78;
            swift_bridgeObjectRelease();
            v80._countAndFlagsBits = v77;
            v80._object = v79;
            String.append(_:)(v80);
            swift_bridgeObjectRelease();
            v81._countAndFlagsBits = 93;
            v81._object = (void *)0xE100000000000000;
            String.append(_:)(v81);
            swift_bridgeObjectRelease();
            v83 = *((_QWORD *)&v136 + 1);
            v82 = v136;
            v65 = v129;
            v71 = v131;
          }
          else
          {
            v83 = 0xE200000000000000;
            v82 = 23899;
          }
          *(_QWORD *)&v136 = sub_100016940(v82, v83, &v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 8, v69 + 4, v69 + 12);
          swift_bridgeObjectRelease_n(v22, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Unhandled serviceData: %{public}s", v69, 0xCu);
          swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v71, -1, -1);
          swift_slowDealloc(v69, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v22, 2);
        }
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v11);
        goto LABEL_64;
      }
      v51 = v62;
      v129 = v61;
      swift_bridgeObjectRelease();
      v44 = 0;
      v45 = 0xC000000000000000;
    }
    else
    {
      v51 = v33;
      v129 = v32;
      swift_bridgeObjectRelease();
      v44 = 0;
      v45 = 0xC000000000000000;
      v6 = v23;
      v11 = v131;
    }
    goto LABEL_38;
  }
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataManufacturerDataKey);
  if (!*(_QWORD *)(a1 + 16) || (v125 = v5, v42 = sub_100518DA0(v40, v41), (v43 & 1) == 0))
  {
    v136 = 0u;
    v137 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v42, (uint64_t)&v136);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v137 + 1))
  {
LABEL_23:
    sub_100004048((uint64_t)&v136, (uint64_t *)&unk_1010F6390);
    goto LABEL_24;
  }
  if ((swift_dynamicCast(&v134, &v136, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
  {
    v44 = v134;
    v45 = v135;
    sub_10001BBBC(v134, v135);
    sub_1001B7BC8(v44, v45);
    v47 = v46;
    if (!*(_QWORD *)(v46 + 16) || (v48 = sub_1005191B0(0x12u), (v49 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1010EA4A8 != -1)
        swift_once(&qword_1010EA4A8, sub_100D0773C);
      v118 = sub_10001A9E8(v11, (uint64_t)qword_1011B80D0);
      v119 = Logger.logObject.getter(v118);
      v120 = static os_log_type_t.error.getter(v119);
      if (!os_log_type_enabled(v119, v120))
      {
        sub_10001BC14(v44, v45);
        sub_10001BC14(v44, v45);

        goto LABEL_64;
      }
      v121 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v121 = 0;
      _os_log_impl((void *)&_mh_execute_header, v119, v120, "No Type18 payload found!", v121, 2u);
      swift_slowDealloc(v121, -1, -1);
      sub_10001BC14(v44, v45);

      v114 = v44;
      v115 = v45;
      goto LABEL_57;
    }
    v50 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 16 * v48);
    v51 = v50[1];
    v129 = *v50;
    sub_10001BBBC(v129, v51);
    swift_bridgeObjectRelease();
    sub_10001BC14(v44, v45);
LABEL_38:
    v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
    if (*(_QWORD *)(a1 + 16) && (v86 = sub_100518DA0(v84, v85), (v87 & 1) != 0))
    {
      sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v86, (uint64_t)&v136);
    }
    else
    {
      v136 = 0u;
      v137 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v137 + 1))
    {
      if ((swift_dynamicCast(&v134, &v136, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v88 = v134;
        v89 = v135;
        sub_10001BBBC(v134, v135);
        v123 = v88;
        v90 = v88;
        v91 = (uint64_t)v125;
        MACAddress.init(data:type:)(v90);
        v92 = v130;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v91, 1, v130) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v128, v91, v92);
          v116 = (char *)&loc_1001B8CD4 + *((int *)qword_1001B9780 + (v51 >> 62));
          v122[3] = v89;
          __asm { BR              X9 }
        }
        swift_bridgeObjectRelease();
        sub_100004048(v91, (uint64_t *)&unk_1010F9890);
        if (qword_1010EA4A8 != -1)
          swift_once(&qword_1010EA4A8, sub_100D0773C);
        sub_10001A9E8(v11, (uint64_t)qword_1011B80D0);
        v93 = v123;
        sub_10001BBBC(v123, v89);
        v94 = sub_10001BBBC(v93, v89);
        v95 = Logger.logObject.getter(v94);
        v96 = static os_log_type_t.error.getter(v95);
        if (os_log_type_enabled(v95, v96))
        {
          v97 = (uint8_t *)swift_slowAlloc(12, -1);
          v98 = swift_slowAlloc(32, -1);
          v127 = v44;
          v99 = v98;
          *(_QWORD *)&v136 = v98;
          v131 = v51;
          *(_DWORD *)v97 = 136446210;
          v100 = Data.hexString.getter(v93, v89);
          v134 = sub_100016940(v100, v101, (uint64_t *)&v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v97 + 4, v97 + 12);
          swift_bridgeObjectRelease();
          sub_10001BC14(v93, v89);
          sub_10001BC14(v93, v89);
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Not a MAC address: %{public}s", v97, 0xCu);
          swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v99, -1, -1);
          swift_slowDealloc(v97, -1, -1);

          sub_10001BC14(v93, v89);
          v102 = v127;
          v103 = v45;
LABEL_54:
          sub_10001BC14(v102, v103);
          v114 = v129;
          v115 = v131;
LABEL_57:
          sub_10001BC14(v114, v115);
          goto LABEL_64;
        }

        sub_10001BC14(v93, v89);
        sub_10001BC14(v93, v89);
        sub_10001BC14(v93, v89);
        goto LABEL_56;
      }
    }
    else
    {
      sub_100004048((uint64_t)&v136, (uint64_t *)&unk_1010F6390);
    }
    if (qword_1010EA4A8 != -1)
      swift_once(&qword_1010EA4A8, sub_100D0773C);
    sub_10001A9E8(v11, (uint64_t)qword_1011B80D0);
    swift_bridgeObjectRetain(a1);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.error.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(12, -1);
      v108 = swift_slowAlloc(32, -1);
      v127 = v44;
      v109 = v108;
      *(_QWORD *)&v136 = v108;
      v131 = v51;
      *(_DWORD *)v107 = 136446210;
      swift_bridgeObjectRetain(a1);
      v111 = Dictionary.description.getter(v110, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v124 = v45;
      v113 = v112;
      swift_bridgeObjectRelease();
      v134 = sub_100016940(v111, v113, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v107 + 4, v107 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Missing critical data [CBAdvertisementDataDeviceAddress] in %{public}s", v107, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v107, -1, -1);

      v102 = v127;
      v103 = v124;
      goto LABEL_54;
    }
    swift_bridgeObjectRelease_n(a1, 2);

LABEL_56:
    sub_10001BC14(v44, v45);
    v114 = v129;
    v115 = v51;
    goto LABEL_57;
  }
LABEL_24:
  if (qword_1010EA4A8 != -1)
    swift_once(&qword_1010EA4A8, sub_100D0773C);
  sub_10001A9E8(v11, (uint64_t)qword_1011B80D0);
  swift_bridgeObjectRetain(a1);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.error.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v136 = v56;
    *(_DWORD *)v55 = 136446210;
    swift_bridgeObjectRetain(a1);
    v58 = Dictionary.description.getter(v57, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v60 = v59;
    swift_bridgeObjectRelease();
    v134 = sub_100016940(v58, v60, (uint64_t *)&v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Missing critical data in %{public}s", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
LABEL_64:
  v117 = v132;
  *v132 = 0;
  v117[1] = 0;
  v117[2] = 0;
  v117[3] = 0;
  v117[4] = 0;
  v117[5] = 0xF000000000000000;
}

uint64_t sub_1001B97A0(uint64_t a1)
{
  sub_1001B97D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_1001B97D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 60 != 15)
  {
    sub_10012C494(result, a2);
    return sub_10001BC14(a5, a6);
  }
  return result;
}

_OWORD *sub_1001B9810(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t *sub_1001B9820(uint64_t *a1)
{
  sub_10012C644(*a1, a1[1]);
  return a1;
}

uint64_t sub_1001B984C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    Data.subscript.getter(0);
    __asm { BR              X10 }
  }
  return 2;
}

uint64_t sub_1001B994C(uint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xFF00) != 0x200)
    return sub_10001BC14(a2, a3);
  return result;
}

uint64_t sub_1001B9968()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001B998C(uint64_t a1)
{
  swift_unknownObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1001B99B4(uint64_t a1)
{
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_1001B99DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v76;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    v7 = a2 + 1;
    v8 = a2[2];
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v7;
    }
    else
    {
      v10 = *v7;
      sub_10001BBBC(*v7, a2[2]);
      v4[1] = v10;
      v4[2] = v8;
    }
    v11 = (int *)type metadata accessor for DiscoveredObject(0);
    v12 = v11[7];
    v13 = (char *)v4 + v12;
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = v11[8];
    v17 = (char *)v4 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = v11[9];
    v21 = (_QWORD *)((char *)v4 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = *v22;
    v24 = v22[1];
    sub_10012C644(*v22, v24);
    *v21 = v23;
    v21[1] = v24;
    *(_QWORD *)((char *)v4 + v11[10]) = *(uint64_t *)((char *)a2 + v11[10]);
    *((_BYTE *)v4 + v11[11]) = *((_BYTE *)a2 + v11[11]);
    *((_BYTE *)v4 + v11[12]) = *((_BYTE *)a2 + v11[12]);
    *(_WORD *)((char *)v4 + v11[13]) = *(_WORD *)((char *)a2 + v11[13]);
    v25 = v11[14];
    v26 = (_QWORD *)((char *)v4 + v25);
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = *v27;
    v29 = v27[1];
    sub_10001BBBC(*v27, v29);
    *v26 = v28;
    v26[1] = v29;
    *(_DWORD *)((char *)v4 + v11[15]) = *(_DWORD *)((char *)a2 + v11[15]);
    v30 = *(int *)(a3 + 20);
    v31 = (char *)v4 + v30;
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for BeaconDetails(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v36 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v31, v32, v36);
      v37 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
      v38 = *(_OWORD *)&v32[v37 + 24];
      *(_OWORD *)&v31[v37 + 24] = v38;
      (**(void (***)(void))(v38 - 8))();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v39 = *(int *)(a3 + 24);
    v40 = (char *)v4 + v39;
    v41 = (char *)a2 + v39;
    v42 = (int *)type metadata accessor for AccessoryMetadata(0);
    v43 = *((_QWORD *)v42 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
    {
      v44 = sub_10001A9A8(&qword_101115E60);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v40, v41, v45);
      v46 = v42[5];
      v47 = (uint64_t *)&v40[v46];
      v48 = (uint64_t *)&v41[v46];
      v49 = *v48;
      v50 = v48[1];
      sub_10001BBBC(*v48, v50);
      *v47 = v49;
      v47[1] = v50;
      v51 = v42[6];
      v52 = &v40[v51];
      v53 = &v41[v51];
      v54 = *((_QWORD *)v53 + 1);
      *(_QWORD *)v52 = *(_QWORD *)v53;
      *((_QWORD *)v52 + 1) = v54;
      v55 = v42[7];
      v56 = &v40[v55];
      v57 = &v41[v55];
      v58 = *((_QWORD *)v57 + 1);
      *(_QWORD *)v56 = *(_QWORD *)v57;
      *((_QWORD *)v56 + 1) = v58;
      *(_DWORD *)&v40[v42[8]] = *(_DWORD *)&v41[v42[8]];
      v59 = v42[9];
      v60 = &v40[v59];
      v61 = &v41[v59];
      *(_DWORD *)v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      v62 = v42[10];
      v63 = &v40[v62];
      v64 = &v41[v62];
      *(_OWORD *)v63 = *(_OWORD *)v64;
      v63[16] = v64[16];
      v65 = v42[11];
      v66 = &v40[v65];
      v67 = &v41[v65];
      v66[8] = v67[8];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      v68 = v42[12];
      v69 = &v40[v68];
      v70 = &v41[v68];
      *(_DWORD *)v69 = *(_DWORD *)v70;
      v69[4] = v70[4];
      v40[v42[13]] = v41[v42[13]];
      v40[v42[14]] = v41[v42[14]];
      v71 = v42[15];
      v72 = &v40[v71];
      v73 = &v41[v71];
      v74 = *((_QWORD *)v73 + 1);
      *(_QWORD *)v72 = *(_QWORD *)v73;
      *((_QWORD *)v72 + 1) = v74;
      v75 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v43 + 56);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v58);
      v76 = swift_bridgeObjectRetain(v74);
      v75(v40, 0, 1, v42, v76);
    }
  }
  return v4;
}

uint64_t type metadata accessor for BeaconDetails(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F1C08, (uint64_t)&nominal type descriptor for BeaconDetails);
}

uint64_t sub_1001B9DD4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(a1 + 8), v4);
  v5 = (int *)type metadata accessor for DiscoveredObject(0);
  v6 = a1 + v5[7];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + v5[8];
  v9 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  sub_10012C494(*(_QWORD *)(a1 + v5[9]), *(_QWORD *)(a1 + v5[9] + 8));
  sub_10001BC14(*(_QWORD *)(a1 + v5[14]), *(_QWORD *)(a1 + v5[14] + 8));
  v10 = a1 + *(int *)(a2 + 20);
  v11 = type metadata accessor for BeaconDetails(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
    v13 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v10 + *(int *)(v13 + 20)));
  }
  v14 = a1 + *(int *)(a2 + 24);
  v15 = type metadata accessor for AccessoryMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15);
  if (!(_DWORD)result)
  {
    v17 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v14, v17);
    sub_10001BC14(*(_QWORD *)(v14 + *(int *)(v15 + 20)), *(_QWORD *)(v14 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001B9F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v74;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = (uint64_t *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_10001BBBC(*v6, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
  }
  v9 = (int *)type metadata accessor for DiscoveredObject(0);
  v10 = v9[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = v9[8];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = v9[9];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_10012C644(*v20, v22);
  *v19 = v21;
  v19[1] = v22;
  *(_QWORD *)(a1 + v9[10]) = *(_QWORD *)(a2 + v9[10]);
  *(_BYTE *)(a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  *(_WORD *)(a1 + v9[13]) = *(_WORD *)(a2 + v9[13]);
  v23 = v9[14];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  v27 = v25[1];
  sub_10001BBBC(*v25, v27);
  *v24 = v26;
  v24[1] = v27;
  *(_DWORD *)(a1 + v9[15]) = *(_DWORD *)(a2 + v9[15]);
  v28 = *(int *)(a3 + 20);
  v29 = (char *)(a1 + v28);
  v30 = (char *)(a2 + v28);
  v31 = type metadata accessor for BeaconDetails(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v34 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v29, v30, v34);
    v35 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
    v36 = *(_OWORD *)&v30[v35 + 24];
    *(_OWORD *)&v29[v35 + 24] = v36;
    (**(void (***)(void))(v36 - 8))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v37 = *(int *)(a3 + 24);
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = (int *)type metadata accessor for AccessoryMetadata(0);
  v41 = *((_QWORD *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    v42 = sub_10001A9A8(&qword_101115E60);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v38, v39, v43);
    v44 = v40[5];
    v45 = (uint64_t *)&v38[v44];
    v46 = (uint64_t *)&v39[v44];
    v47 = *v46;
    v48 = v46[1];
    sub_10001BBBC(*v46, v48);
    *v45 = v47;
    v45[1] = v48;
    v49 = v40[6];
    v50 = &v38[v49];
    v51 = &v39[v49];
    v52 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    v53 = v40[7];
    v54 = &v38[v53];
    v55 = &v39[v53];
    v56 = *((_QWORD *)v55 + 1);
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *((_QWORD *)v54 + 1) = v56;
    *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
    v57 = v40[9];
    v58 = &v38[v57];
    v59 = &v39[v57];
    *(_DWORD *)v58 = *(_DWORD *)v59;
    v58[4] = v59[4];
    v60 = v40[10];
    v61 = &v38[v60];
    v62 = &v39[v60];
    *(_OWORD *)v61 = *(_OWORD *)v62;
    v61[16] = v62[16];
    v63 = v40[11];
    v64 = &v38[v63];
    v65 = &v39[v63];
    v64[8] = v65[8];
    *(_QWORD *)v64 = *(_QWORD *)v65;
    v66 = v40[12];
    v67 = &v38[v66];
    v68 = &v39[v66];
    *(_DWORD *)v67 = *(_DWORD *)v68;
    v67[4] = v68[4];
    v38[v40[13]] = v39[v40[13]];
    v38[v40[14]] = v39[v40[14]];
    v69 = v40[15];
    v70 = &v38[v69];
    v71 = &v39[v69];
    v72 = *((_QWORD *)v71 + 1);
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *((_QWORD *)v70 + 1) = v72;
    v73 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v41 + 56);
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v56);
    v74 = swift_bridgeObjectRetain(v72);
    v73(v38, 0, 1, v40, v74);
  }
  return a1;
}

uint64_t sub_1001BA334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  int *v51;
  uint64_t v52;
  uint64_t (*v53)(_BYTE *, uint64_t, int *);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  void (*v89)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  int v117;
  uint64_t v118;
  char *v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = (_OWORD *)(a1 + 8);
  v7 = (uint64_t *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 == 15)
  {
    if (v8 >> 60 != 15)
    {
      v9 = *v7;
      sub_10001BBBC(*v7, *(_QWORD *)(a2 + 16));
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
    sub_1000DC964(a1 + 8);
LABEL_6:
    *v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  v10 = *v7;
  sub_10001BBBC(*v7, *(_QWORD *)(a2 + 16));
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v8;
  sub_10001BC14(v11, v12);
LABEL_8:
  v13 = (int *)type metadata accessor for DiscoveredObject(0);
  v14 = v13[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = v13[8];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  v22 = v13[9];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10012C644(*v24, v26);
  v27 = *v23;
  v28 = v23[1];
  *v23 = v25;
  v23[1] = v26;
  sub_10012C494(v27, v28);
  *(_QWORD *)(a1 + v13[10]) = *(_QWORD *)(a2 + v13[10]);
  *(_BYTE *)(a1 + v13[11]) = *(_BYTE *)(a2 + v13[11]);
  *(_BYTE *)(a1 + v13[12]) = *(_BYTE *)(a2 + v13[12]);
  *(_WORD *)(a1 + v13[13]) = *(_WORD *)(a2 + v13[13]);
  v29 = v13[14];
  v30 = (uint64_t *)(a1 + v29);
  v31 = (uint64_t *)(a2 + v29);
  v32 = *v31;
  v33 = v31[1];
  sub_10001BBBC(*v31, v33);
  v34 = *v30;
  v35 = v30[1];
  *v30 = v32;
  v30[1] = v33;
  sub_10001BC14(v34, v35);
  *(_DWORD *)(a1 + v13[15]) = *(_DWORD *)(a2 + v13[15]);
  v36 = *(int *)(a3 + 20);
  v37 = (char *)(a1 + v36);
  v38 = (char *)(a2 + v36);
  v39 = type metadata accessor for BeaconDetails(0);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  LODWORD(v30) = v41(v37, 1, v39);
  v42 = v41(v38, 1, v39);
  if ((_DWORD)v30)
  {
    if (!v42)
    {
      v43 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v37, v38, v43);
      v44 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
      v45 = &v37[v44];
      v46 = *(_QWORD *)&v38[v44 + 24];
      *((_QWORD *)v45 + 3) = v46;
      *((_QWORD *)v45 + 4) = *(_QWORD *)&v38[v44 + 32];
      (**(void (***)(void))(v46 - 8))();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v42)
  {
    sub_1000126B0((uint64_t)v37, type metadata accessor for BeaconDetails);
LABEL_13:
    v47 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_14;
  }
  v93 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 24))(v37, v38, v93);
  v94 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_1001BA974(&v37[*(int *)(v94 + 20)], &v38[*(int *)(v94 + 20)]);
LABEL_14:
  v48 = *(int *)(a3 + 24);
  v49 = (_BYTE *)(a1 + v48);
  v50 = (_BYTE *)(a2 + v48);
  v51 = (int *)type metadata accessor for AccessoryMetadata(0);
  v52 = *((_QWORD *)v51 - 1);
  v53 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      v95 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v95 - 8) + 24))(v49, v50, v95);
      v96 = v51[5];
      v97 = (uint64_t *)&v49[v96];
      v98 = (uint64_t *)&v50[v96];
      v99 = *v98;
      v100 = v98[1];
      sub_10001BBBC(*v98, v100);
      v101 = *v97;
      v102 = v97[1];
      *v97 = v99;
      v97[1] = v100;
      sub_10001BC14(v101, v102);
      v103 = v51[6];
      v104 = &v49[v103];
      v105 = &v50[v103];
      *v104 = *v105;
      v106 = v105[1];
      v104[1] = v106;
      swift_bridgeObjectRetain(v106);
      swift_bridgeObjectRelease();
      v107 = v51[7];
      v108 = &v49[v107];
      v109 = &v50[v107];
      *v108 = *v109;
      v110 = v109[1];
      v108[1] = v110;
      swift_bridgeObjectRetain(v110);
      swift_bridgeObjectRelease();
      v111 = v51[8];
      v112 = &v49[v111];
      v113 = &v50[v111];
      *(_WORD *)v112 = *(_WORD *)v113;
      v112[2] = v113[2];
      v112[3] = v113[3];
      v114 = v51[9];
      v115 = &v49[v114];
      v116 = &v50[v114];
      v117 = *(_DWORD *)v116;
      v115[4] = v116[4];
      *(_DWORD *)v115 = v117;
      v118 = v51[10];
      v119 = &v49[v118];
      v120 = &v50[v118];
      v121 = *(_OWORD *)v120;
      v119[16] = v120[16];
      *(_OWORD *)v119 = v121;
      v122 = v51[11];
      v123 = &v49[v122];
      v124 = &v50[v122];
      v125 = *(_QWORD *)v124;
      v123[8] = v124[8];
      *(_QWORD *)v123 = v125;
      v126 = v51[12];
      v127 = &v49[v126];
      v128 = &v50[v126];
      LODWORD(v125) = *(_DWORD *)v128;
      v127[4] = v128[4];
      *(_DWORD *)v127 = v125;
      v49[v51[13]] = v50[v51[13]];
      v49[v51[14]] = v50[v51[14]];
      v129 = v51[15];
      v130 = &v49[v129];
      v131 = &v50[v129];
      *v130 = *v131;
      v132 = v131[1];
      v130[1] = v132;
      swift_bridgeObjectRetain(v132);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000126B0((uint64_t)v49, type metadata accessor for AccessoryMetadata);
    goto LABEL_19;
  }
  if (v55)
  {
LABEL_19:
    v91 = sub_10001A9A8(&qword_101115E60);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
    return a1;
  }
  v56 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v49, v50, v56);
  v57 = v51[5];
  v58 = (uint64_t *)&v49[v57];
  v59 = (uint64_t *)&v50[v57];
  v60 = *v59;
  v61 = v59[1];
  sub_10001BBBC(*v59, v61);
  *v58 = v60;
  v58[1] = v61;
  v62 = v51[6];
  v63 = &v49[v62];
  v64 = &v50[v62];
  *v63 = *v64;
  v65 = v64[1];
  v63[1] = v65;
  v66 = v51[7];
  v67 = &v49[v66];
  v68 = &v50[v66];
  *v67 = *v68;
  v69 = v68[1];
  v67[1] = v69;
  *(_DWORD *)&v49[v51[8]] = *(_DWORD *)&v50[v51[8]];
  v70 = v51[9];
  v71 = &v49[v70];
  v72 = &v50[v70];
  v73 = *(_DWORD *)v72;
  v71[4] = v72[4];
  *(_DWORD *)v71 = v73;
  v74 = v51[10];
  v75 = &v49[v74];
  v76 = &v50[v74];
  v77 = *(_OWORD *)v76;
  v75[16] = v76[16];
  *(_OWORD *)v75 = v77;
  v78 = v51[11];
  v79 = &v49[v78];
  v80 = &v50[v78];
  v81 = *(_QWORD *)v80;
  v79[8] = v80[8];
  *(_QWORD *)v79 = v81;
  v82 = v51[12];
  v83 = &v49[v82];
  v84 = &v50[v82];
  LODWORD(v81) = *(_DWORD *)v84;
  v83[4] = v84[4];
  *(_DWORD *)v83 = v81;
  v49[v51[13]] = v50[v51[13]];
  v49[v51[14]] = v50[v51[14]];
  v85 = v51[15];
  v86 = &v49[v85];
  v87 = &v50[v85];
  *v86 = *v87;
  v88 = v87[1];
  v86[1] = v88;
  v89 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v52 + 56);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v69);
  v90 = swift_bridgeObjectRetain(v88);
  v89(v49, 0, 1, v51, v90);
  return a1;
}

_QWORD *sub_1001BA974(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

uint64_t sub_1001BAADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = (int *)type metadata accessor for DiscoveredObject(0);
  v7 = v6[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = v6[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_OWORD *)(a1 + v6[9]) = *(_OWORD *)(a2 + v6[9]);
  *(_QWORD *)(a1 + v6[10]) = *(_QWORD *)(a2 + v6[10]);
  *(_BYTE *)(a1 + v6[11]) = *(_BYTE *)(a2 + v6[11]);
  *(_BYTE *)(a1 + v6[12]) = *(_BYTE *)(a2 + v6[12]);
  *(_WORD *)(a1 + v6[13]) = *(_WORD *)(a2 + v6[13]);
  *(_OWORD *)(a1 + v6[14]) = *(_OWORD *)(a2 + v6[14]);
  *(_DWORD *)(a1 + v6[15]) = *(_DWORD *)(a2 + v6[15]);
  v15 = *(int *)(a3 + 20);
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = type metadata accessor for BeaconDetails(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v16, v17, v21);
    v22 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
    v23 = &v16[v22];
    v24 = &v17[v22];
    v25 = *((_OWORD *)v24 + 1);
    *(_OWORD *)v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v25;
    *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v26 = *(int *)(a3 + 24);
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = (int *)type metadata accessor for AccessoryMetadata(0);
  v30 = *((_QWORD *)v29 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_10001A9A8(&qword_101115E60);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v27, v28, v32);
    *(_OWORD *)&v27[v29[5]] = *(_OWORD *)&v28[v29[5]];
    *(_OWORD *)&v27[v29[6]] = *(_OWORD *)&v28[v29[6]];
    *(_OWORD *)&v27[v29[7]] = *(_OWORD *)&v28[v29[7]];
    *(_DWORD *)&v27[v29[8]] = *(_DWORD *)&v28[v29[8]];
    v33 = v29[9];
    v34 = &v27[v33];
    v35 = &v28[v33];
    *(_DWORD *)v34 = *(_DWORD *)v35;
    v34[4] = v35[4];
    v36 = v29[10];
    v37 = &v27[v36];
    v38 = &v28[v36];
    *(_OWORD *)v37 = *(_OWORD *)v38;
    v37[16] = v38[16];
    v39 = v29[11];
    v40 = &v27[v39];
    v41 = &v28[v39];
    v40[8] = v41[8];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v42 = v29[12];
    v43 = &v27[v42];
    v44 = &v28[v42];
    *(_DWORD *)v43 = *(_DWORD *)v44;
    v43[4] = v44[4];
    v27[v29[13]] = v28[v29[13]];
    v27[v29[14]] = v28[v29[14]];
    *(_OWORD *)&v27[v29[15]] = *(_OWORD *)&v28[v29[15]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v30 + 56))(v27, 0, 1, v29);
  }
  return a1;
}

uint64_t sub_1001BADF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, uint64_t, int *);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = (_OWORD *)(a1 + 8);
  v7 = (_OWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9 >> 60 == 15)
  {
    sub_1000DC964(a1 + 8);
LABEL_4:
    *v6 = *v7;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 16) = v9;
  sub_10001BC14(v10, v8);
LABEL_6:
  v11 = (int *)type metadata accessor for DiscoveredObject(0);
  v12 = v11[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = v11[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = v11[9];
  v21 = *(_QWORD *)(a1 + v20);
  v22 = *(_QWORD *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_10012C494(v21, v22);
  *(_QWORD *)(a1 + v11[10]) = *(_QWORD *)(a2 + v11[10]);
  *(_BYTE *)(a1 + v11[11]) = *(_BYTE *)(a2 + v11[11]);
  *(_BYTE *)(a1 + v11[12]) = *(_BYTE *)(a2 + v11[12]);
  *(_WORD *)(a1 + v11[13]) = *(_WORD *)(a2 + v11[13]);
  v23 = v11[14];
  v24 = *(_QWORD *)(a1 + v23);
  v25 = *(_QWORD *)(a1 + v23 + 8);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  sub_10001BC14(v24, v25);
  *(_DWORD *)(a1 + v11[15]) = *(_DWORD *)(a2 + v11[15]);
  v26 = *(int *)(a3 + 20);
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for BeaconDetails(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      v34 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v27, v28, v34);
      v35 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
      v36 = &v27[v35];
      v37 = &v28[v35];
      v38 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v38;
      *((_QWORD *)v36 + 4) = *((_QWORD *)v37 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v33)
  {
    sub_1000126B0((uint64_t)v27, type metadata accessor for BeaconDetails);
LABEL_11:
    v39 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_12;
  }
  v63 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v27, v28, v63);
  v64 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  v65 = &v27[v64];
  v66 = &v28[v64];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
  v67 = *((_OWORD *)v66 + 1);
  *(_OWORD *)v65 = *(_OWORD *)v66;
  *((_OWORD *)v65 + 1) = v67;
  *((_QWORD *)v65 + 4) = *((_QWORD *)v66 + 4);
LABEL_12:
  v40 = *(int *)(a3 + 24);
  v41 = (_BYTE *)(a1 + v40);
  v42 = (_BYTE *)(a2 + v40);
  v43 = (int *)type metadata accessor for AccessoryMetadata(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      v68 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v41, v42, v68);
      v69 = v43[5];
      v70 = *(_QWORD *)&v41[v69];
      v71 = *(_QWORD *)&v41[v69 + 8];
      *(_OWORD *)&v41[v69] = *(_OWORD *)&v42[v69];
      sub_10001BC14(v70, v71);
      v72 = v43[6];
      v73 = &v41[v72];
      v74 = (uint64_t *)&v42[v72];
      v76 = *v74;
      v75 = v74[1];
      *v73 = v76;
      v73[1] = v75;
      swift_bridgeObjectRelease();
      v77 = v43[7];
      v78 = &v41[v77];
      v79 = (uint64_t *)&v42[v77];
      v81 = *v79;
      v80 = v79[1];
      *v78 = v81;
      v78[1] = v80;
      swift_bridgeObjectRelease();
      *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
      v82 = v43[9];
      v83 = &v41[v82];
      v84 = &v42[v82];
      *(_DWORD *)v83 = *(_DWORD *)v84;
      v83[4] = v84[4];
      v85 = v43[10];
      v86 = &v41[v85];
      v87 = &v42[v85];
      *(_OWORD *)v86 = *(_OWORD *)v87;
      v86[16] = v87[16];
      v88 = v43[11];
      v89 = &v41[v88];
      v90 = &v42[v88];
      *(_QWORD *)v89 = *(_QWORD *)v90;
      v89[8] = v90[8];
      v91 = v43[12];
      v92 = &v41[v91];
      v93 = &v42[v91];
      *(_DWORD *)v92 = *(_DWORD *)v93;
      v92[4] = v93[4];
      v41[v43[13]] = v42[v43[13]];
      v41[v43[14]] = v42[v43[14]];
      v94 = v43[15];
      v95 = &v41[v94];
      v96 = (uint64_t *)&v42[v94];
      v98 = *v96;
      v97 = v96[1];
      *v95 = v98;
      v95[1] = v97;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1000126B0((uint64_t)v41, type metadata accessor for AccessoryMetadata);
    goto LABEL_17;
  }
  if (v47)
  {
LABEL_17:
    v61 = sub_10001A9A8(&qword_101115E60);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    return a1;
  }
  v48 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v41, v42, v48);
  *(_OWORD *)&v41[v43[5]] = *(_OWORD *)&v42[v43[5]];
  *(_OWORD *)&v41[v43[6]] = *(_OWORD *)&v42[v43[6]];
  *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
  *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
  v49 = v43[9];
  v50 = &v41[v49];
  v51 = &v42[v49];
  *(_DWORD *)v50 = *(_DWORD *)v51;
  v50[4] = v51[4];
  v52 = v43[10];
  v53 = &v41[v52];
  v54 = &v42[v52];
  *(_OWORD *)v53 = *(_OWORD *)v54;
  v53[16] = v54[16];
  v55 = v43[11];
  v56 = &v41[v55];
  v57 = &v42[v55];
  v56[8] = v57[8];
  *(_QWORD *)v56 = *(_QWORD *)v57;
  v58 = v43[12];
  v59 = &v41[v58];
  v60 = &v42[v58];
  *(_DWORD *)v59 = *(_DWORD *)v60;
  v59[4] = v60[4];
  v41[v43[13]] = v42[v43[13]];
  v41[v43[14]] = v42[v43[14]];
  *(_OWORD *)&v41[v43[15]] = *(_OWORD *)&v42[v43[15]];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  return a1;
}

uint64_t sub_1001BB33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BB348);
}

uint64_t sub_1001BB348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for DiscoveredObject(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = sub_10001A9A8(&qword_101115E60);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1001BB3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BB3F4);
}

uint64_t sub_1001BB3F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for DiscoveredObject(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_10001A9A8(&qword_101115E60);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for DetailedDiscoveredObject(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F1B60, (uint64_t)&nominal type descriptor for DetailedDiscoveredObject);
}

void sub_1001BB4B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  v2 = type metadata accessor for DiscoveredObject(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100149C5C(319, &qword_1010F1B70, type metadata accessor for BeaconDetails);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100149C5C(319, (unint64_t *)&unk_1010F1B78, type metadata accessor for AccessoryMetadata);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v8, a1 + 16);
      }
    }
  }
}

uint64_t *sub_1001BB570(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t sub_1001BB618(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20));
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
}

uint64_t sub_1001BB660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  v6 = *(_OWORD *)(a2 + v5 + 24);
  *(_OWORD *)(a1 + v5 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  return a1;
}

uint64_t sub_1001BB6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_1001BA974((_QWORD *)(a1 + *(int *)(v5 + 20)), (_QWORD *)(a2 + *(int *)(v5 + 20)));
  return a1;
}

uint64_t sub_1001BB72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 32);
  return a1;
}

uint64_t sub_1001BB794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(a1 + v5));
  v8 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v7 + 32);
  return a1;
}

uint64_t sub_1001BB80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BB818);
}

uint64_t sub_1001BB818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001BB854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BB860);
}

uint64_t sub_1001BB860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1001BB8A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for BeaconKeyManager.IndexInformation(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for BluetoothManufacturerData(uint64_t a1)
{
  sub_10012C494(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10012C644(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v7, v6);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10012C644(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10012C494(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v9, v8);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  sub_10001BC14(v10, v11);
  return a1;
}

__n128 initializeWithTake for AccessoryInfoResponseContent.PublicKeys(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BluetoothManufacturerData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10012C494(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for BluetoothManufacturerData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 40) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 40) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BluetoothManufacturerData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BluetoothManufacturerData()
{
  return &type metadata for BluetoothManufacturerData;
}

uint64_t *initializeBufferWithCopyOfBuffer for AdvertisementUnion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_10012C644(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AdvertisementUnion(uint64_t *a1)
{
  return sub_10012C494(*a1, a1[1]);
}

uint64_t *assignWithCopy for AdvertisementUnion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_10012C644(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10012C494(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AdvertisementUnion(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10012C494(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdvertisementUnion(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AdvertisementUnion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_1001BBCA8(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_1001BBCB4(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_1001BBCC4(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion()
{
  return &type metadata for AdvertisementUnion;
}

_WORD *initializeBufferWithCopyOfBuffer for AdvertismentType(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvertismentType(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1001BBD40 + 4 * byte_100E2AAB0[v4]))();
}

uint64_t sub_1001BBD58(unsigned __int16 *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (a1[1])
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  return v1;
}

void sub_1001BBD64(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2))
    JUMPOUT(0x1001BBD6CLL);
  JUMPOUT(0x1001BBD7CLL);
}

uint64_t storeEnumTagSinglePayload for AdvertismentType(_WORD *a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3)
    v5 = v5;
  else
    v5 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_1001BBE08 + 4 * byte_100E2AABA[v5]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1001BBDE8 + 4 * byte_100E2AAB5[v5]))();
}

uint64_t sub_1001BBDE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001BBE08(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1001BBE10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001BBE18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001BBE20(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1001BBE28(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1001BBE34(unsigned __int8 *a1)
{
  if (a1[1])
    return (*a1 | (a1[1] << 8)) - 255;
  else
    return 0;
}

_BYTE *sub_1001BBE54(_BYTE *result, int a2)
{
  if (a2)
  {
    *result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvertismentType()
{
  return &type metadata for AdvertismentType;
}

unint64_t sub_1001BBE8C()
{
  unint64_t result;

  result = qword_1010F1C40;
  if (!qword_1010F1C40)
  {
    result = swift_getWitnessTable(&unk_100E2AC9C, &type metadata for AdvertisementUnion);
    atomic_store(result, (unint64_t *)&qword_1010F1C40);
  }
  return result;
}

unint64_t sub_1001BBED0()
{
  unint64_t result;

  result = qword_1010F1C60;
  if (!qword_1010F1C60)
  {
    result = swift_getWitnessTable(&unk_100E2B48C, &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1C60);
  }
  return result;
}

unint64_t sub_1001BBF14()
{
  unint64_t result;

  result = qword_1010F1C68;
  if (!qword_1010F1C68)
  {
    result = swift_getWitnessTable(&unk_100E2B43C, &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1C68);
  }
  return result;
}

unint64_t sub_1001BBF58()
{
  unint64_t result;

  result = qword_1010F1C70;
  if (!qword_1010F1C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NearOwnerAdvertisement, &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F1C70);
  }
  return result;
}

unint64_t sub_1001BBF9C()
{
  unint64_t result;

  result = qword_1010F1C78;
  if (!qword_1010F1C78)
  {
    result = swift_getWitnessTable(&unk_100E2B3EC, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1C78);
  }
  return result;
}

unint64_t sub_1001BBFE0()
{
  unint64_t result;

  result = qword_1010F1C80;
  if (!qword_1010F1C80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1010F1C80);
  }
  return result;
}

uint64_t sub_1001BC024(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x383165707974 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x383165707974, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F5079636167656CLL && a2 == 0xEA00000000006873)
  {
    v7 = 0xEA00000000006873;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5079636167656CLL, 0xEA00000000006873, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1752395632 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1752395632, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001BC16C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  char v48[2];
  char v49;

  v2 = sub_10001A9A8(&qword_1010F1CC0);
  v3 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  v41 = v3;
  __chkstk_darwin(v2);
  v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_10001A9A8(&qword_1010F1CC8);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v43 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F1CD0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F1CD8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v45 = a1;
  sub_10001AA44(a1, v14);
  v16 = sub_1001BCB5C();
  v17 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AdvertismentType.CodingKeys, &type metadata for AdvertismentType.CodingKeys, v16, v14, v15);
  if (!v17)
  {
    v38 = v7;
    v46 = v6;
    v19 = v43;
    v18 = v44;
    v20 = v11;
    v21 = KeyedDecodingContainer.allKeys.getter(v10);
    if (*(_QWORD *)(v21 + 16) == 1)
    {
      if (*(_BYTE *)(v21 + 32))
      {
        if (*(_BYTE *)(v21 + 32) != 1)
        {
          v49 = 2;
          v33 = sub_1001BCBA0();
          v34 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertismentType.PoshCodingKeys, &v49, v10, &type metadata for AdvertismentType.PoshCodingKeys, v33);
          v35 = v18;
          v36 = v40;
          v23 = KeyedDecodingContainer.decode(_:forKey:)(v34, v40);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v35, v36);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
          v31 = v45;
          v30 = 0;
          goto LABEL_9;
        }
        v48[0] = 1;
        v22 = sub_1001BCBE4();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertismentType.LegacyPoshCodingKeys, v48, v10, &type metadata for AdvertismentType.LegacyPoshCodingKeys, v22);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v42);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        v23 = 1;
      }
      else
      {
        v47 = 0;
        v29 = sub_1001BCC28();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertismentType.Type18CodingKeys, &v47, v10, &type metadata for AdvertismentType.Type18CodingKeys, v29);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v46);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        v23 = 0;
      }
      v30 = 1;
      v31 = v45;
LABEL_9:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
      return v23 | (v30 << 8);
    }
    v24 = type metadata accessor for DecodingError(0);
    swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
    v26 = v25;
    sub_10001A9A8(&qword_1010F1CA0);
    *v26 = &type metadata for AdvertismentType;
    v27 = KeyedDecodingContainer.codingPath.getter(v10);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v27, 0xD00000000000002BLL, 0x8000000100ECA650, 0);
    v28 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow(v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v10);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
}

uint64_t sub_1001BC590(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1684826487 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684826487, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656E774F7261656ELL && a2 == 0xE900000000000072)
  {
    swift_bridgeObjectRelease(0xE900000000000072);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E774F7261656ELL, 0xE900000000000072, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_1001BC67C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;

  v2 = sub_10001A9A8(&qword_1010F1C88);
  v3 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  v29 = v3;
  __chkstk_darwin(v2);
  v30 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F1C90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = sub_10001A9A8(&qword_1010F1C98);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  v31 = a1;
  v13 = sub_10001AA44(a1, v11);
  v14 = sub_1001BBED0();
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AdvertisementUnion.CodingKeys, &type metadata for AdvertisementUnion.CodingKeys, v14, v11, v12);
  if (!v15)
  {
    v27[1] = v6;
    v16 = v30;
    v33 = v8;
    if (*(_QWORD *)(KeyedDecodingContainer.allKeys.getter(v7) + 16) == 1)
    {
      LOBYTE(v32) = 1;
      v17 = sub_1001BBF14();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for AdvertisementUnion.NearOwnerCodingKeys, &v32, v7, &type metadata for AdvertisementUnion.NearOwnerCodingKeys, v17);
      v18 = sub_1001BCA48();
      v19 = v28;
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for NearOwnerAdvertisement, v20, v28, &type metadata for NearOwnerAdvertisement, v18);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v19);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
      v13 = v32;
    }
    else
    {
      v21 = type metadata accessor for DecodingError(0);
      swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
      v23 = v22;
      sub_10001A9A8(&qword_1010F1CA0);
      v13 = v10;
      *v23 = &type metadata for AdvertisementUnion;
      v24 = KeyedDecodingContainer.codingPath.getter(v7);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v24, 0xD00000000000002BLL, 0x8000000100ECA650, 0);
      v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
      swift_willThrow(v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
    }
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  return v13;
}

unint64_t sub_1001BCA48()
{
  unint64_t result;

  result = qword_1010F1CA8;
  if (!qword_1010F1CA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NearOwnerAdvertisement, &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1010F1CA8);
  }
  return result;
}

unint64_t sub_1001BCA8C()
{
  unint64_t result;

  result = qword_1010F1CB0;
  if (!qword_1010F1CB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1010F1CB0);
  }
  return result;
}

uint64_t sub_1001BCAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BCB18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001BCB5C()
{
  unint64_t result;

  result = qword_1010F1CE0;
  if (!qword_1010F1CE0)
  {
    result = swift_getWitnessTable(&unk_100E2B39C, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1CE0);
  }
  return result;
}

unint64_t sub_1001BCBA0()
{
  unint64_t result;

  result = qword_1010F1CE8;
  if (!qword_1010F1CE8)
  {
    result = swift_getWitnessTable(&unk_100E2B34C, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1CE8);
  }
  return result;
}

unint64_t sub_1001BCBE4()
{
  unint64_t result;

  result = qword_1010F1CF0;
  if (!qword_1010F1CF0)
  {
    result = swift_getWitnessTable(&unk_100E2B2FC, &type metadata for AdvertismentType.LegacyPoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1CF0);
  }
  return result;
}

unint64_t sub_1001BCC28()
{
  unint64_t result;

  result = qword_1010F1CF8;
  if (!qword_1010F1CF8)
  {
    result = swift_getWitnessTable(&unk_100E2B2AC, &type metadata for AdvertismentType.Type18CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1CF8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AdvertismentType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001BCCB8 + 4 * byte_100E2AAC4[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001BCCEC + 4 * byte_100E2AABF[v4]))();
}

uint64_t sub_1001BCCEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BCCF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001BCCFCLL);
  return result;
}

uint64_t sub_1001BCD08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001BCD10);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001BCD14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BCD1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertismentType.CodingKeys()
{
  return &type metadata for AdvertismentType.CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.Type18CodingKeys()
{
  return &type metadata for AdvertismentType.Type18CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.LegacyPoshCodingKeys()
{
  return &type metadata for AdvertismentType.LegacyPoshCodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.PoshCodingKeys()
{
  return &type metadata for AdvertismentType.PoshCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AdvertisementUnion.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001BCDB8 + 4 * byte_100E2AACE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001BCDEC + 4 * byte_100E2AAC9[v4]))();
}

uint64_t sub_1001BCDEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BCDF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001BCDFCLL);
  return result;
}

uint64_t sub_1001BCE08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001BCE10);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001BCE14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BCE1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.CodingKeys()
{
  return &type metadata for AdvertisementUnion.CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.WildCodingKeys()
{
  return &type metadata for AdvertisementUnion.WildCodingKeys;
}

uint64_t _s12searchpartyd16AdvertismentTypeO14PoshCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001BCE88 + 4 * byte_100E2AAD3[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001BCEA8 + 4 * byte_100E2AAD8[v4]))();
}

_BYTE *sub_1001BCE88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001BCEA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001BCEB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001BCEB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001BCEC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001BCEC8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.NearOwnerCodingKeys()
{
  return &type metadata for AdvertisementUnion.NearOwnerCodingKeys;
}

unint64_t sub_1001BCEE8()
{
  unint64_t result;

  result = qword_1010F1D20;
  if (!qword_1010F1D20)
  {
    result = swift_getWitnessTable(&unk_100E2AF04, &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D20);
  }
  return result;
}

unint64_t sub_1001BCF30()
{
  unint64_t result;

  result = qword_1010F1D28;
  if (!qword_1010F1D28)
  {
    result = swift_getWitnessTable(&unk_100E2AFBC, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D28);
  }
  return result;
}

unint64_t sub_1001BCF78()
{
  unint64_t result;

  result = qword_1010F1D30;
  if (!qword_1010F1D30)
  {
    result = swift_getWitnessTable(&unk_100E2B074, &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D30);
  }
  return result;
}

unint64_t sub_1001BCFC0()
{
  unint64_t result;

  result = qword_1010F1D38;
  if (!qword_1010F1D38)
  {
    result = swift_getWitnessTable(&unk_100E2B12C, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D38);
  }
  return result;
}

unint64_t sub_1001BD008()
{
  unint64_t result;

  result = qword_1010F1D40;
  if (!qword_1010F1D40)
  {
    result = swift_getWitnessTable(&unk_100E2B284, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D40);
  }
  return result;
}

unint64_t sub_1001BD050()
{
  unint64_t result;

  result = qword_1010F1D48;
  if (!qword_1010F1D48)
  {
    result = swift_getWitnessTable(&unk_100E2B1A4, &type metadata for AdvertismentType.Type18CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D48);
  }
  return result;
}

unint64_t sub_1001BD098()
{
  unint64_t result;

  result = qword_1010F1D50;
  if (!qword_1010F1D50)
  {
    result = swift_getWitnessTable(&unk_100E2B1CC, &type metadata for AdvertismentType.Type18CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D50);
  }
  return result;
}

unint64_t sub_1001BD0E0()
{
  unint64_t result;

  result = qword_1010F1D58;
  if (!qword_1010F1D58)
  {
    result = swift_getWitnessTable(&unk_100E2B154, &type metadata for AdvertismentType.LegacyPoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D58);
  }
  return result;
}

unint64_t sub_1001BD128()
{
  unint64_t result;

  result = qword_1010F1D60;
  if (!qword_1010F1D60)
  {
    result = swift_getWitnessTable(&unk_100E2B17C, &type metadata for AdvertismentType.LegacyPoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D60);
  }
  return result;
}

unint64_t sub_1001BD170()
{
  unint64_t result;

  result = qword_1010F1D68;
  if (!qword_1010F1D68)
  {
    result = swift_getWitnessTable(&unk_100E2B09C, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D68);
  }
  return result;
}

unint64_t sub_1001BD1B8()
{
  unint64_t result;

  result = qword_1010F1D70;
  if (!qword_1010F1D70)
  {
    result = swift_getWitnessTable(&unk_100E2B0C4, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D70);
  }
  return result;
}

unint64_t sub_1001BD200()
{
  unint64_t result;

  result = qword_1010F1D78;
  if (!qword_1010F1D78)
  {
    result = swift_getWitnessTable(&unk_100E2B1F4, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D78);
  }
  return result;
}

unint64_t sub_1001BD248()
{
  unint64_t result;

  result = qword_1010F1D80;
  if (!qword_1010F1D80)
  {
    result = swift_getWitnessTable(&unk_100E2B21C, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D80);
  }
  return result;
}

unint64_t sub_1001BD290()
{
  unint64_t result;

  result = qword_1010F1D88;
  if (!qword_1010F1D88)
  {
    result = swift_getWitnessTable(&unk_100E2AF2C, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D88);
  }
  return result;
}

unint64_t sub_1001BD2D8()
{
  unint64_t result;

  result = qword_1010F1D90;
  if (!qword_1010F1D90)
  {
    result = swift_getWitnessTable(&unk_100E2AF54, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D90);
  }
  return result;
}

unint64_t sub_1001BD320()
{
  unint64_t result;

  result = qword_1010F1D98;
  if (!qword_1010F1D98)
  {
    result = swift_getWitnessTable("e%#", &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1D98);
  }
  return result;
}

unint64_t sub_1001BD368()
{
  unint64_t result;

  result = qword_1010F1DA0;
  if (!qword_1010F1DA0)
  {
    result = swift_getWitnessTable(byte_100E2AE9C, &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1DA0);
  }
  return result;
}

unint64_t sub_1001BD3B0()
{
  unint64_t result;

  result = qword_1010F1DA8;
  if (!qword_1010F1DA8)
  {
    result = swift_getWitnessTable(byte_100E2AFE4, &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F1DA8);
  }
  return result;
}

unint64_t sub_1001BD3F8()
{
  unint64_t result;

  result = qword_1010F1DB0;
  if (!qword_1010F1DB0)
  {
    result = swift_getWitnessTable("e##", &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, &qword_1010F1DB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustEnvelopeTransformer()
{
  return &type metadata for CircleTrustEnvelopeTransformer;
}

uint64_t sub_1001BD458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v6[18] = a5;
  v6[19] = a6;
  v6[16] = a3;
  v6[17] = a4;
  v6[14] = a1;
  v6[15] = a2;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[20] = swift_task_alloc(v7);
  v6[21] = swift_task_alloc(v7);
  v6[22] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v6[23] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[24] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[25] = swift_task_alloc(v10);
  v6[26] = swift_task_alloc(v10);
  v6[27] = swift_task_alloc(v10);
  v11 = (_QWORD *)swift_task_alloc(dword_1010F1DC4);
  v6[28] = v11;
  *v11 = v6;
  v11[1] = sub_1001BD540;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_1001BD540(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*v2 + 224);
  v4 = *v2;
  *(_QWORD *)(v4 + 232) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1001BD608, 0, 0);
  v5 = *(_QWORD *)(v4 + 208);
  v6 = *(_QWORD *)(v4 + 200);
  v8 = *(_QWORD *)(v4 + 168);
  v7 = *(_QWORD *)(v4 + 176);
  v9 = *(_QWORD *)(v4 + 160);
  swift_task_dealloc(*(_QWORD *)(v4 + 216));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1001BD608()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[29];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v0[30] = v2;
  v3 = swift_allocObject(v2, 128, 15);
  v0[31] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  return swift_task_switch(sub_1001BD69C, v3, 0);
}

uint64_t sub_1001BD69C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for PropertyListEncoder(0);
  v2 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[32] = PropertyListEncoder.init()(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10110D15C);
  v0[33] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1001BD70C;
  return sub_10090B7AC(v0[16], v0[15]);
}

uint64_t sub_1001BD70C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 264);
  v3[34] = a1;
  v3[35] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1001BD820;
  else
    v5 = sub_1001BD778;
  return swift_task_switch(v5, v3[31], 0);
}

uint64_t sub_1001BD778()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v0[12] = v0[34];
  v1 = v0[35];
  v2 = sub_10001A9A8(&qword_1010F1DC8);
  v3 = sub_1001BEC48();
  v0[36] = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 12, v2, v3);
  v0[37] = v4;
  swift_bridgeObjectRelease();
  swift_release();
  if (v1)
  {
    v0[43] = v1;
    v5 = sub_1001BDA8C;
  }
  else
  {
    v5 = sub_1001BD864;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001BD820()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 280);
  return swift_task_switch(sub_1001BDA8C, 0, 0);
}

uint64_t sub_1001BD864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 304) = type metadata accessor for OwnerPeerTrust(0);
  v3 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v0 + 312) = v3;
  *(_DWORD *)(v0 + 432) = *(_DWORD *)(v3 + 24);
  v4 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v14 = dispatch thunk of CustomStringConvertible.description.getter(v1, v4);
  v15 = v5;
  v6._countAndFlagsBits = 124;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v4);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = String.utf8Data.getter(v14, v15);
  v10 = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 80) = v8;
  *(_QWORD *)(v0 + 88) = v10;
  v11 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v11);
  sub_10001BC14(v8, v10);
  *(_BYTE *)(v0 + 440) = *(_BYTE *)(v2 + *(int *)(v3 + 28));
  v12 = (_QWORD *)swift_task_alloc(dword_1010F1DE4);
  *(_QWORD *)(v0 + 320) = v12;
  *v12 = v0;
  v12[1] = sub_1001BD9CC;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_1001BD9CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 320);
  v4 = *(_QWORD **)v2;
  v4[41] = a1;
  v4[42] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_1001BDBF8, 0, 0);
  v6 = v4[15] + *(int *)(v4[38] + 28);
  v8 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
  v7 = (_QWORD *)swift_task_alloc(unk_10111223C);
  v4[44] = v7;
  *v7 = v4;
  v7[1] = sub_1001BDB18;
  return v8(v6);
}

uint64_t sub_1001BDA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 248));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDB18(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)();
  _QWORD *v12;
  uint64_t (*v13)(char, uint64_t, uint64_t);

  v8 = *(_QWORD *)(*(_QWORD *)v4 + 352);
  v9 = *(_QWORD **)v4;
  v9[45] = a3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9[49] = v3;
    v10 = sub_1001BDDC0;
    return swift_task_switch(v10, 0, 0);
  }
  if (!a3)
  {
    v10 = sub_1001BDF70;
    return swift_task_switch(v10, 0, 0);
  }
  v13 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v12 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  v9[46] = v12;
  *v12 = v9;
  v12[1] = sub_1001BDCA8;
  return v13(a1, a2, a3);
}

uint64_t sub_1001BDBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  sub_10001BC14(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 368);
  *(_QWORD *)(*v3 + 376) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = *(_QWORD *)(v5 + 328);
    v8 = sub_1001BDD7C;
  }
  else
  {
    v9 = *(_QWORD *)(v5 + 328);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 384) = a2;
    v8 = sub_1001BDD2C;
    v7 = v9;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_1001BDD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease();
  if (v1)
    v2 = sub_1001BDE88;
  else
    v2 = sub_1001BDF70;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001BDD7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 392) = *(_QWORD *)(v0 + 376);
  return swift_task_switch(sub_1001BDDC0, 0, 0);
}

uint64_t sub_1001BDDC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  swift_release();
  sub_10001BC14(v1, v2);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 16))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 128) + *(int *)(v0 + 432), *(_QWORD *)(v0 + 184));
  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(*(_QWORD *)(v0 + 176), 0, 1, *(_QWORD *)(v0 + 184));
  v3 = *(int *)(v1 + 32);
  *(_DWORD *)(v0 + 436) = v3;
  v4 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + v3));
  v5 = sub_100508A54(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 104) = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 400) = v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  v8 = sub_1001BEFD8();
  *v6 = v0;
  v6[1] = sub_1001BE03C;
  return Sequence.asyncCompactMap<A>(_:)(&unk_1010F1DF0, *(_QWORD *)(v0 + 232), v7, *(_QWORD *)(v0 + 304), v8);
}

uint64_t sub_1001BDF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(*(_QWORD *)(v0 + 176), 1, 1, *(_QWORD *)(v0 + 184));
  v3 = *(int *)(v1 + 32);
  *(_DWORD *)(v0 + 436) = v3;
  v4 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + v3));
  v5 = sub_100508A54(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 104) = v5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 400) = v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  v8 = sub_1001BEFD8();
  *v6 = v0;
  v6[1] = sub_1001BE03C;
  return Sequence.asyncCompactMap<A>(_:)(&unk_1010F1DF0, *(_QWORD *)(v0 + 232), v7, *(_QWORD *)(v0 + 304), v8);
}

uint64_t sub_1001BE03C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1001BE0A0, 0, 0);
}

uint64_t sub_1001BE0A0()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 408) + 16) + 1;
  v2 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 128) + *(int *)(v0 + 436)));
  v3 = sub_100508A54(v2);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 16);
  swift_release();
  if (v1 == v4)
  {
    swift_bridgeObjectRelease();
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Peer trusts count is not equals to sharing circles members count!!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 288);
    v10 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 184);
    v27 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 176);

    v14 = sub_1001C08CC();
    v15 = swift_allocError(&type metadata for CircleTrustEnvelopeTransformerError, v14, 0, 0);
    *v16 = 0;
    swift_willThrow(v15);
    swift_release();
    sub_10001BC14(v11, v10);
    swift_release();
    swift_release();
    sub_1001C0844(v13);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v27, v26);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 168);
    v19 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 40) = v23;
    *(_QWORD *)(v0 + 48) = &off_10109BDA0;
    v24 = unk_1010F1E04;
    v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1010F1E00 + dword_1010F1E00);
    swift_retain();
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v0 + 416) = v25;
    *v25 = v0;
    v25[1] = sub_1001BE324;
    return v28(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 120), v0 + 16);
  }
}

uint64_t sub_1001BE324(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = (_QWORD *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = v1;
  v4 = v3[52];
  v3[53] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v5 = sub_1001BE700;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3 + 2);
    v5 = sub_1001BE3AC;
  }
  return swift_task_switch(v5, 0, 0);
}

int *sub_1001BE3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  int *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 208);
  v55 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 192);
  v49 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  v53 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 168);
  v51 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v57 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 128);
  swift_release();
  swift_release();
  swift_release();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v2, v7 + *(int *)(v1 + 20), v4);
  sub_10000F9B8(v6, v5, &qword_1010ED860);
  v8(v49, v55, v4);
  sub_10000F9B8(v53, v51, &qword_1010ED860);
  result = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v10 = *(_QWORD *)(v57 + result[16]);
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + result[17]);
  if (v11 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v11 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v48 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + result[17]);
  v12 = result[15];
  v13 = (uint64_t *)(v57 + result[14]);
  v14 = v13[1];
  v45 = *v13;
  v43 = v14;
  v15 = *(_QWORD *)(v57 + v12 + 8);
  v47 = *(_QWORD *)(v57 + v12);
  v58 = *(_QWORD *)(v0 + 64);
  v54 = *(_QWORD *)(v0 + 296);
  v52 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 216);
  v46 = v16;
  v18 = *(_QWORD *)(v0 + 192);
  v42 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 184);
  v56 = v20;
  v21 = *(_QWORD *)(v0 + 168);
  v41 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 152);
  if (*(unsigned __int8 *)(v0 + 440) >= 2u)
    v23 = 2;
  else
    v23 = 4;
  v50 = v23;
  v24 = *(_QWORD *)(v0 + 112);
  v44 = v10;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  sub_1001C0844(v20);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v19);
  v25 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v26 = (uint64_t *)(v22 + v25[8]);
  v27 = *(_QWORD *)(v22 + v25[7]);
  v28 = v26[1];
  v38 = *v26;
  v29 = (uint64_t *)(v22 + v25[9]);
  v30 = v29[1];
  v39 = *v29;
  v40 = v27;
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  v31(v24, v17, v19);
  v32 = (int *)type metadata accessor for CircleTrustEnvelopeV1(0);
  sub_1001C0884(v21, v24 + v32[5]);
  v31(v24 + v32[6], v42, v19);
  sub_1001C0884(v41, v24 + v32[7]);
  v33 = (_QWORD *)(v24 + v32[8]);
  *v33 = v45;
  v33[1] = v43;
  v34 = (_QWORD *)(v24 + v32[9]);
  *v34 = v47;
  v34[1] = v15;
  *(_DWORD *)(v24 + v32[10]) = v44;
  *(_DWORD *)(v24 + v32[11]) = v48;
  v35 = (_QWORD *)(v24 + v32[12]);
  *v35 = v38;
  v35[1] = v28;
  *(_QWORD *)(v24 + v32[13]) = v40;
  v36 = (_QWORD *)(v24 + v32[14]);
  *v36 = v39;
  v36[1] = v30;
  v37 = (_QWORD *)(v24 + v32[15]);
  *v37 = v52;
  v37[1] = v54;
  *(_QWORD *)(v24 + v32[16]) = v58;
  *(_BYTE *)(v24 + v32[17]) = v50;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v28);
  swift_task_dealloc(v46);
  swift_task_dealloc(v17);
  swift_task_dealloc(v42);
  swift_task_dealloc(v56);
  swift_task_dealloc(v21);
  swift_task_dealloc(v41);
  return (int *)(*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BE700()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 176);
  swift_release();
  sub_10001BC14(v2, v1);
  swift_release();
  swift_release();
  sub_1001C0844(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v7 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BE7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[7] = v7;
  v3[8] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001BE854, a3, 0);
}

uint64_t sub_1001BE854()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10105D450, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *v10 = v0;
  v10[1] = sub_1001BE938;
  return unsafeBlocking<A>(_:)(v0[2], sub_1001C09C8, v8, v11);
}

uint64_t sub_1001BE938()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 72);
  v2 = *(_QWORD *)(*v0 + 64);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1001BE998()
{
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_1001BE9AC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_1001BEA98;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001BEA98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001BEAF4, 0, 0);
}

uint64_t sub_1001BEAF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 128);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconStoreActor available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD000000000000010;
    v11[1] = 0x8000000100EC6470;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

unint64_t sub_1001BEC48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010F1DD0;
  if (!qword_1010F1DD0)
  {
    v1 = sub_10001F784(&qword_1010F1DC8);
    v2 = sub_100006204(&qword_1010F1DD8, type metadata accessor for KeyDropInterface.KeyPackage, (uint64_t)&unk_100E707F8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F1DD0);
  }
  return result;
}

uint64_t sub_1001BECC4()
{
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_1001BECD8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB10 + dword_1010EBB10);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_1001BEDC4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001BEDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001BEE20, 0, 0);
}

uint64_t sub_1001BEE20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 128);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No FamilyCircleService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD000000000000013;
    v11[1] = 0x8000000100ECA680;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001BEF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010F1DEC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004C28;
  return sub_1001BE7E8(a1, a2, v2);
}

unint64_t sub_1001BEFD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F1DF8;
  if (!qword_1010F1DF8)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F7730);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010F1DF8);
  }
  return result;
}

uint64_t sub_1001BF024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for PeerTrustEnvelopeV1(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[8] = swift_task_alloc(v7);
  v4[9] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[11] = v9;
  v4[12] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnerPeerTrust(0);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[14] = v11;
  v4[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001BF114, 0, 0);
}

void sub_1001BF114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 128) = v2;
  v3 = *(_QWORD *)(v0 + 120);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 112);
    v5 = type metadata accessor for OwnerSharingCircle(0);
    *(_QWORD *)(v0 + 136) = v5;
    *(_DWORD *)(v0 + 216) = *(_DWORD *)(v5 + 20);
    v6 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 220) = v6;
    v7 = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 152) = 0;
    *(_QWORD *)(v0 + 160) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 144) = v7;
    v8 = v1 + ((v6 + 32) & ~(unint64_t)v6);
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v8, v3, type metadata accessor for OwnerPeerTrust);
    __asm { BR              X11 }
  }
  v9 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  __asm { BR              X1 }
}

uint64_t sub_1001BFB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = sub_1001C0798;
  }
  else
  {
    v3 = sub_1001BFC14;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001BFC14()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(v6, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v9 = (_QWORD *)(v6 + *(int *)(v8 + 20));
  *v9 = v4;
  v9[1] = v3;
  v10 = (uint64_t *)(v6 + *(int *)(v8 + 24));
  *v10 = v1;
  v10[1] = v2;
  sub_10005972C(v6, v7, type metadata accessor for PeerTrustEnvelopeV1);
  sub_10001BBBC(v1, v2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  v12 = *(_QWORD *)(v0 + 160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v12 = sub_1007C8234(0, *(_QWORD *)(v12 + 16) + 1, 1, *(_QWORD *)(v0 + 160));
  v14 = *(_QWORD *)(v12 + 16);
  v13 = *(_QWORD *)(v12 + 24);
  if (v14 >= v13 >> 1)
    v12 = sub_1007C8234(v13 > 1, v14 + 1, 1, v12);
  v16 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v31 = *(_QWORD *)(v0 + 120);
  v32 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 72);
  v19 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 56);
  v21 = *(_QWORD *)(v0 + 64);
  v30 = *(_QWORD *)(v0 + 152) + 1;
  *(_QWORD *)(v12 + 16) = v14 + 1;
  sub_1001C0910(v21, v12+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v14);
  sub_10001BC14(v16, v15);
  sub_1000126B0(v20, type metadata accessor for PeerTrustEnvelopeV1);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  sub_1000126B0(v31, type metadata accessor for OwnerPeerTrust);
  if (v30 != v32)
  {
    v27 = *(_QWORD *)(v0 + 144);
    v28 = *(_QWORD *)(v0 + 152) + 1;
    *(_QWORD *)(v0 + 152) = v28;
    *(_QWORD *)(v0 + 160) = v12;
    v29 = *(_QWORD *)(v0 + 120);
    sub_10005972C(*(_QWORD *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 220) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 220))+ v27 * v28, v29, type metadata accessor for OwnerPeerTrust);
    __asm { BR              X11 }
  }
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v12);
}

uint64_t sub_1001C0798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  sub_10001BC14(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C0844(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001C0884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001C08CC()
{
  unint64_t result;

  result = qword_1010F1E08;
  if (!qword_1010F1E08)
  {
    result = swift_getWitnessTable(byte_100E2B59C, &type metadata for CircleTrustEnvelopeTransformerError);
    atomic_store(result, (unint64_t *)&qword_1010F1E08);
  }
  return result;
}

uint64_t sub_1001C0910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C0954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001C09C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A80D08(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t storeEnumTagSinglePayload for CircleTrustEnvelopeTransformerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001C0A54 + 4 * byte_100E2B4E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001C0A88 + 4 * byte_100E2B4E0[v4]))();
}

uint64_t sub_1001C0A88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C0A90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C0A98);
  return result;
}

uint64_t sub_1001C0AA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C0AACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001C0AB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C0AB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustEnvelopeTransformerError()
{
  return &type metadata for CircleTrustEnvelopeTransformerError;
}

unint64_t sub_1001C0AD8()
{
  unint64_t result;

  result = qword_1010F1E10;
  if (!qword_1010F1E10)
  {
    result = swift_getWitnessTable(byte_100E2B574, &type metadata for CircleTrustEnvelopeTransformerError);
    atomic_store(result, (unint64_t *)&qword_1010F1E10);
  }
  return result;
}

uint64_t sub_1001C0B24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C0B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v10);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16))
  {
    v7 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    v9[1] = a2;
    swift_bridgeObjectRetain(a2);
    v9[2] = a1;
    sub_10005972C(v7, (uint64_t)v6, type metadata accessor for OwnerSharingCircle);
    __asm { BR              X10 }
  }
  return 0;
}

BOOL sub_1001C1560(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = qword_100E2B718[result];
  if (qword_100E2B718[*(char *)(a2 + 32)] == v3)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = qword_100E2B718[*(char *)(a2 + i)];
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C15D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_1001C1F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a3);
    __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_1001C2974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[15];

  v4 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v5 = __chkstk_darwin(v4);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16))
  {
    v9 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v10 = *(_QWORD *)(v6 + 72);
    v12[12] = v5;
    v12[13] = v10;
    v12[9] = a2;
    swift_bridgeObjectRetain(a2);
    v12[8] = 0;
    v12[11] = a1;
    v12[14] = v8;
    sub_10005972C(v9, (uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
    __asm { BR              X10 }
  }
  return 0;
}

BOOL sub_1001C4368(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C43C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 32));
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2);
    return 1;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v14 = 5;
  while (1)
  {
    v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1))
      break;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 8 * v14));
    v7 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
    ++v14;
    if (v15 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C451C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v5 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v6 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v7 = v6;
      sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
      v8 = static NSObject.== infix(_:_:)(v7, a1);

      if ((v8 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v4 == 1)
        goto LABEL_18;
      if (v5)
        break;
      v5 = 5;
      while (1)
      {
        v15 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
          break;
        v16 = *(id *)(a2 + 8 * v5);
        v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0)
          goto LABEL_6;
        ++v5;
        if (v15 == v4)
          goto LABEL_18;
      }
      __break(1u);
    }
    v10 = 1;
    while (1)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      v13 = v11;
      v14 = static NSObject.== infix(_:_:)(v11, a1);
      swift_unknownObjectRelease(v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
      ++v10;
      if (v12 == v4)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

