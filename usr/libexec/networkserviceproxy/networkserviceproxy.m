void sub_100001DFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  pid_t pid;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  __int128 v22;
  _OWORD v23[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling get privacy proxy traffic state", (uint8_t *)&v22, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "proxyTrafficState"));
      sub_100002440(v4, "NSPServerPrivacyProxyTraffic", v10);

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v13 = v12;
      if (v12
        && (pid = xpc_connection_get_pid(v12),
            v22 = 0u,
            memset(v23, 0, sizeof(v23)),
            proc_pidinfo(pid, 13, 1uLL, &v22, 64) == 64))
      {
        v15 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v15, (const char *)v23, 0x10uLL);
      }
      else
      {
        v15 = 0;
      }

      v19 = nplog_obj(v16, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = "";
        if (v15)
          v21 = v15;
        LODWORD(v22) = 136315138;
        *(_QWORD *)((char *)&v22 + 4) = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "getting traffic state for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v22, 0xCu);
      }

      if (v15)
        free(v15);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100001FE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  xpc_object_t reply;
  void *v12;
  xpc_connection_t v13;
  _xpc_connection_s *v14;
  _xpc_connection_s *v15;
  pid_t pid;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  xpc_connection_t remote_connection;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "process proxy service status request", (uint8_t *)&v26, 2u);
      }

      v10 = *(void **)(a1 + 72);
      if (v10)
      {
        reply = (xpc_object_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "serviceStatus"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(reply, "serialize"));
        sub_1000029A8(v4, "NSPServerPrivacyProxyServiceStatus", v12);
      }
      else
      {
        v23 = v4;
        reply = xpc_dictionary_create_reply(v23);
        remote_connection = xpc_dictionary_get_remote_connection(v23);
        v12 = (void *)objc_claimAutoreleasedReturnValue(remote_connection);

        if (reply && v12)
          xpc_connection_send_message((xpc_connection_t)v12, reply);
      }

    }
    else
    {
      v13 = xpc_dictionary_get_remote_connection(v4);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v13);
      v15 = v14;
      if (v14
        && (pid = xpc_connection_get_pid(v14),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v17 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v17, (const char *)v27, 0x10uLL);
      }
      else
      {
        v17 = 0;
      }

      v21 = nplog_obj(v18, v19, v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v17)
          v25 = v17;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "getting service status for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v17)
        free(v17);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10000221C(uint64_t a1, void *a2)
{
  xpc_type_t type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  _xpc_connection_s *v14;
  dispatch_time_t v15;
  xpc_object_t object;
  _QWORD handler[6];
  __int128 buf;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  object = a2;
  if (object)
  {
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_connection)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = object;
      v10 = v9;
      if (v8)
      {
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v19 = 0x3032000000;
        v20 = sub_10000312C;
        v21 = sub_100054A8C;
        v11 = v9;
        v22 = v11;
        v12 = NPGetInternalQueue(v11);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        xpc_connection_set_target_queue((xpc_connection_t)v11, v13);

        v14 = *(_xpc_connection_s **)(*((_QWORD *)&buf + 1) + 40);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1000024E8;
        handler[3] = &unk_1000F5F78;
        handler[4] = v8;
        handler[5] = &buf;
        xpc_connection_set_event_handler(v14, handler);
        xpc_connection_resume(*(xpc_connection_t *)(*((_QWORD *)&buf + 1) + 40));
        if (deviceClassIsHomepod())
        {
          v15 = dispatch_time(0, 30000000000);
          dispatch_after(v15, (dispatch_queue_t)&_dispatch_main_q, &stru_1000F5F98);
        }
        _Block_object_dispose(&buf, 8);

      }
    }
    else
    {
      type = xpc_get_type(object);
      if (type == (xpc_type_t)&_xpc_type_error)
      {
        v6 = nplog_obj(type, v4, v5);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = xpc_dictionary_get_string(object, _xpc_error_key_description);
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Exiting, got invalid XPC connection: %s", (uint8_t *)&buf, 0xCu);
        }

        exit(1);
      }
    }
  }

}

void sub_100002420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_100002440(void *a1, const char *a2, void *a3)
{
  id v5;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  id v9;
  id v10;

  v10 = a3;
  v5 = a1;
  reply = xpc_dictionary_create_reply(v5);
  remote_connection = xpc_dictionary_get_remote_connection(v5);
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

  if (reply && v8)
  {
    if (v10)
    {
      v9 = reply;
      xpc_dictionary_set_uint64(v9, a2, objc_msgSend(v10, "unsignedIntValue"));

    }
    xpc_connection_send_message(v8, reply);
  }

}

void sub_1000024E8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t object;

  object = a2;
  if (object && xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    switch(xpc_dictionary_get_int64(object, "NSPServerCommandType"))
    {
      case 1:
        sub_100054A94(*(_QWORD *)(a1 + 32), object);
        break;
      case 2:
        sub_100054B2C(*(_QWORD *)(a1 + 32), object);
        break;
      case 3:
        sub_100054CB0(*(_QWORD *)(a1 + 32), object);
        break;
      case 4:
        sub_100054E64(*(_QWORD *)(a1 + 32), object);
        break;
      case 5:
        sub_100055058(*(_QWORD *)(a1 + 32), object);
        break;
      case 6:
        sub_100055264(*(_QWORD *)(a1 + 32), object);
        break;
      case 7:
        sub_100055A94(*(_QWORD *)(a1 + 32), object);
        break;
      case 11:
        sub_100055C88(*(_QWORD *)(a1 + 32), object);
        break;
      case 12:
        sub_100055D60(*(_QWORD *)(a1 + 32), (uint64_t)object);
        break;
      case 13:
        sub_100055F0C(*(_QWORD *)(a1 + 32), object);
        break;
      case 14:
        sub_100056084(*(_QWORD *)(a1 + 32), object);
        break;
      case 15:
        sub_100056284(*(_QWORD *)(a1 + 32), object);
        break;
      case 16:
        sub_1000563C4(*(_QWORD *)(a1 + 32), object);
        break;
      case 17:
        sub_1000569A4(*(_QWORD *)(a1 + 32), object);
        break;
      case 18:
        sub_100056BC0(*(_QWORD *)(a1 + 32), object);
        break;
      case 19:
        sub_100057F34(*(_QWORD *)(a1 + 32), object);
        break;
      case 20:
        sub_100002CC8(*(_QWORD *)(a1 + 32), object);
        break;
      case 21:
        sub_1000583EC(*(_QWORD *)(a1 + 32), object);
        break;
      case 22:
        sub_100001DFC(*(_QWORD *)(a1 + 32), object);
        break;
      case 23:
        sub_100058620(*(_QWORD *)(a1 + 32), object);
        break;
      case 24:
        sub_100058838(*(_QWORD *)(a1 + 32), object);
        break;
      case 25:
        sub_100058AD4(*(_QWORD *)(a1 + 32), object);
        break;
      case 26:
        sub_100058F20(*(_QWORD *)(a1 + 32), object);
        break;
      case 27:
        sub_100059020(*(_QWORD *)(a1 + 32), object);
        break;
      case 28:
        sub_1000590DC(*(_QWORD *)(a1 + 32), v5, v6);
        break;
      case 29:
        sub_100059164(*(_QWORD *)(a1 + 32), v5, v6);
        break;
      case 30:
        sub_10005672C(*(_QWORD *)(a1 + 32), object);
        break;
      case 31:
        sub_100058D08(*(_QWORD *)(a1 + 32), object);
        break;
      case 32:
        sub_1000591EC(*(_QWORD *)(a1 + 32), object);
        break;
      case 33:
        sub_100001FE4(*(_QWORD *)(a1 + 32), object);
        break;
      case 34:
        sub_100056DF8(*(_QWORD *)(a1 + 32), object);
        break;
      case 35:
        sub_100057184(*(_QWORD *)(a1 + 32), object);
        break;
      case 36:
        sub_1000576C8(*(_QWORD *)(a1 + 32), object);
        break;
      case 37:
        sub_100059A00(*(_QWORD *)(a1 + 32), object);
        break;
      case 38:
        sub_100059C5C(*(_QWORD *)(a1 + 32), object);
        break;
      case 39:
        sub_10005A28C(*(_QWORD *)(a1 + 32), object);
        break;
      case 40:
        sub_10005A4A8(*(_QWORD *)(a1 + 32), object);
        break;
      case 41:
        sub_100002A60(*(_QWORD *)(a1 + 32), object);
        break;
      case 42:
        sub_10005A928(*(_QWORD *)(a1 + 32), object);
        break;
      case 43:
        sub_100059E44(*(_QWORD *)(a1 + 32), object);
        break;
      case 44:
        sub_10005A0A0(*(_QWORD *)(a1 + 32), object);
        break;
      case 45:
        sub_10005AB24(*(_QWORD *)(a1 + 32), object);
        break;
      case 46:
        sub_10005AF44(*(_QWORD *)(a1 + 32), object);
        break;
      case 47:
        sub_10005B160(*(_QWORD *)(a1 + 32), object);
        break;
      case 48:
        sub_10005A6D0(*(_QWORD *)(a1 + 32), object);
        break;
      case 49:
        sub_100059440(*(_QWORD *)(a1 + 32), object);
        break;
      case 50:
        sub_10005971C(*(_QWORD *)(a1 + 32), object);
        break;
      case 51:
        sub_10005B388(*(id **)(a1 + 32), object);
        break;
      case 52:
        sub_10005C160(*(_QWORD *)(a1 + 32), object);
        break;
      case 53:
        sub_10005C52C(*(_BYTE **)(a1 + 32), object);
        break;
      case 54:
        sub_10005C78C(*(_QWORD *)(a1 + 32), object);
        break;
      case 55:
        sub_10005C9A8(*(_QWORD *)(a1 + 32), object);
        break;
      case 56:
        sub_10005CBD0(*(_QWORD *)(a1 + 32), object);
        break;
      case 57:
        sub_10005CDEC(*(_QWORD *)(a1 + 32), object);
        break;
      case 58:
        sub_10005D008(*(_QWORD *)(a1 + 32), object);
        break;
      case 59:
        sub_10005D1EC(*(id **)(a1 + 32), object);
        break;
      case 60:
        sub_10005BF34(*(_QWORD *)(a1 + 32), object);
        break;
      case 61:
        sub_10005D438(*(_QWORD *)(a1 + 32), object);
        break;
      case 62:
        sub_10005D694(*(_QWORD *)(a1 + 32), object);
        break;
      case 63:
        sub_1000578F4(*(_QWORD *)(a1 + 32), object);
        break;
      case 64:
        sub_100057B40(*(_QWORD *)(a1 + 32), object);
        break;
      case 65:
        sub_10005D8F4(*(_QWORD *)(a1 + 32), object);
        break;
      case 66:
        sub_10005DB10(*(_QWORD *)(a1 + 32), object);
        break;
      case 67:
        sub_10005E574(*(_QWORD *)(a1 + 32), object);
        break;
      case 68:
        sub_10005EA40(*(_QWORD *)(a1 + 32), object);
        break;
      case 69:
        sub_10005EC9C(*(_QWORD *)(a1 + 32), object);
        break;
      default:
        xpc_connection_cancel(*(xpc_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
        goto LABEL_3;
    }
  }
  else
  {
LABEL_3:
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;

  }
}

void sub_1000029A8(void *a1, const char *a2, void *a3)
{
  id v5;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  id v9;
  void *v10;
  id v11;

  v11 = a3;
  v5 = a1;
  reply = xpc_dictionary_create_reply(v5);
  remote_connection = xpc_dictionary_get_remote_connection(v5);
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

  if (reply && v8)
  {
    if (v11)
    {
      v9 = reply;
      v10 = (void *)_CFXPCCreateXPCObjectFromCFObject(v11);
      xpc_dictionary_set_value(v9, a2, v10);

    }
    xpc_connection_send_message(v8, reply);
  }

}

void sub_100002A60(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  void *v13;
  id v14;
  void *v15;
  xpc_connection_t v16;
  _xpc_connection_s *v17;
  _xpc_connection_s *v18;
  pid_t pid;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  __int128 v27;
  _OWORD v28[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v27) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling get privacy proxy account type", (uint8_t *)&v27, 2u);
      }

      reply = xpc_dictionary_create_reply(v4);
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      if (v12)
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "proxyAccountType"));
        if (v13)
        {
          v14 = reply;
          xpc_dictionary_set_uint64(v14, "NSPServerPrivacyProxyAccountType", objc_msgSend(v13, "unsignedIntValue"));

        }
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "proxyAccountUnlimited"));
        xpc_dictionary_set_BOOL(reply, "NSPServerPrivacyProxyAccountUnlimited", (BOOL)objc_msgSend(v15, "BOOLValue"));

        xpc_connection_send_message(v12, reply);
      }

    }
    else
    {
      v16 = xpc_dictionary_get_remote_connection(v4);
      v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v16);
      v18 = v17;
      if (v17
        && (pid = xpc_connection_get_pid(v17),
            v27 = 0u,
            memset(v28, 0, sizeof(v28)),
            proc_pidinfo(pid, 13, 1uLL, &v27, 64) == 64))
      {
        v20 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v20, (const char *)v28, 0x10uLL);
      }
      else
      {
        v20 = 0;
      }

      v24 = nplog_obj(v21, v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = "";
        if (v20)
          v26 = v20;
        LODWORD(v27) = 136315138;
        *(_QWORD *)((char *)&v27 + 4) = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "getting privacy proxy account type failed due to missing entitlement for %s", (uint8_t *)&v27, 0xCu);
      }

      if (v20)
        free(v20);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100002CC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  xpc_connection_t v25;
  _xpc_connection_s *v26;
  _xpc_connection_s *v27;
  pid_t pid;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  void *v36;
  unsigned int v37;
  __int128 buffer;
  _OWORD v39[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buffer) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling get privacy proxy user tier", (uint8_t *)&buffer, 2u);
      }

      reply = xpc_dictionary_create_reply(v4);
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      if (!v12)
        goto LABEL_30;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userTier"));

      if (v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userTier"));
        if (v14)
        {
          v15 = reply;
          xpc_dictionary_set_uint64(v15, "NSPServerPrivacyProxyUserTier", objc_msgSend(v14, "unsignedIntValue"));

        }
      }
      v16 = *(id *)(a1 + 40);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "userTier"));
      if (objc_msgSend(v17, "unsignedIntegerValue") == (id)1)
      {
        v18 = *(id *)(a1 + 40);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "willResetSubscriberTierTomorrow"));
        if (objc_msgSend(v19, "BOOLValue"))
        {
          v20 = *(id *)(a1 + 40);
          v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "resetTomorrowDate"));
          if (v21)
          {
            v22 = (void *)v21;
            v36 = v20;
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resetTomorrowDate"));
            v37 = objc_msgSend(v23, "isDateInTomorrow:", v24);

            if (v37)
              xpc_dictionary_set_BOOL(reply, "NSPServerPrivacyProxySetUntilTomorrow", 1);
            goto LABEL_29;
          }

        }
      }

LABEL_29:
      xpc_connection_send_message(v12, reply);
LABEL_30:

      goto LABEL_31;
    }
    v25 = xpc_dictionary_get_remote_connection(v4);
    v26 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v25);
    v27 = v26;
    if (v26
      && (pid = xpc_connection_get_pid(v26),
          buffer = 0u,
          memset(v39, 0, sizeof(v39)),
          proc_pidinfo(pid, 13, 1uLL, &buffer, 64) == 64))
    {
      v29 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
      strncpy(v29, (const char *)v39, 0x10uLL);
    }
    else
    {
      v29 = 0;
    }

    v33 = nplog_obj(v30, v31, v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      v35 = "";
      if (v29)
        v35 = v29;
      LODWORD(buffer) = 136315138;
      *(_QWORD *)((char *)&buffer + 4) = v35;
      _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "getting user tier for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&buffer, 0xCu);
    }

    if (v29)
      free(v29);
    sub_10006C088(v4, 1001, CFSTR("Permission denied"));
  }
LABEL_31:

}

uint64_t sub_10000301C(void *a1, void *a2)
{
  id v3;
  xpc_connection_t remote_connection;
  void *v5;
  void *v6;
  void *v7;
  int v8;

  v3 = a2;
  remote_connection = xpc_dictionary_get_remote_connection(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(remote_connection);
  if (v5)
  {
    v6 = (void *)xpc_connection_copy_entitlement_value(v5, objc_msgSend(v3, "UTF8String"));
    v7 = v6;
    if (v6 && xpc_get_type(v6) == (xpc_type_t)&_xpc_type_BOOL)
      v8 = xpc_BOOL_get_value(v7) << 31 >> 31;
    else
      LOBYTE(v8) = 0;

  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8 & 1;
}

uint64_t sub_1000030BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000030CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000030DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000030EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000030FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000310C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000311C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000312C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000313C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000314C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000315C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000316C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000317C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10000318C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id *sub_100004B84(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id *v13;
  id *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, void *);
  void *v43;
  id v44;
  __int128 *p_buf;
  objc_super v46;
  uint8_t v47[4];
  id v48;
  __int128 buf;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v12 = v9;
  if (!a1)
    goto LABEL_16;
  if (!v7)
  {
    v36 = nplog_obj(v9, v10, v11);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyTokenRegistration initWithAgentUUID:agentDescription:delegate:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "%s called with null agentUUID", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_19;
  }
  if (!v8)
  {
    v38 = nplog_obj(v9, v10, v11);
    v37 = objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyTokenRegistration initWithAgentUUID:agentDescription:delegate:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "%s called with null agentDescription", (uint8_t *)&buf, 0xCu);
    }
LABEL_19:

    goto LABEL_15;
  }
  v46.receiver = a1;
  v46.super_class = (Class)NSPPrivacyProxyTokenRegistration;
  v13 = (id *)objc_msgSendSuper2(&v46, "init");
  a1 = v13;
  if (v13)
  {
    objc_storeWeak(v13 + 1, v12);
    v14 = sub_100041130((id *)[NSPPrivacyProxyTokenAgent alloc], a1, v7, v8);
    v15 = a1[2];
    a1[2] = v14;

    v16 = objc_msgSend(objc_alloc((Class)NWNetworkAgentRegistration), "initWithNetworkAgentClass:", objc_opt_class(NSPPrivacyProxyTokenAgent));
    v17 = a1[3];
    a1[3] = v16;

    if (a1[2])
    {
      v21 = a1[3] == 0;
      v22 = nplog_obj(v18, v19, v20);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      v24 = v23;
      if (!v21)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v8;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Looking for existing proxy agent registration for %@", (uint8_t *)&buf, 0xCu);
        }

        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v50 = 0x3032000000;
        v51 = sub_1000030BC;
        v52 = sub_100005090;
        v53 = 0;
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        v40 = _NSConcreteStackBlock;
        v41 = 3221225472;
        v42 = sub_100005098;
        v43 = &unk_1000F52F8;
        v44 = v7;
        p_buf = &buf;
        objc_msgSend(v25, "iterateFileHandlesWithBlock:", &v40);

        if (!*(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
          goto LABEL_13;
        v29 = nplog_obj(v26, v27, v28);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v47 = 138412290;
          v48 = v8;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Found existing proxy registration for %@", v47, 0xCu);
        }

        v31 = (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "agentFlags", v40, v41, v42, v43);
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "agentUUID"));
        objc_msgSend(a1[2], "setAgentUUID:", v32);

        objc_msgSend(a1[2], "setActive:", v31 & 1);
        objc_msgSend(a1[2], "setVoluntary:", (v31 >> 1) & 1);
        objc_msgSend(a1[2], "setUserActivated:", (v31 >> 2) & 1);
        objc_msgSend(a1[2], "setKernelActivated:", (v31 >> 3) & 1);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "handle"));
        v34 = dup((int)objc_msgSend(v33, "fileDescriptor"));

        if ((objc_msgSend(a1[3], "setRegisteredNetworkAgent:fileDescriptor:", a1[2], v34) & 1) != 0)
        {
LABEL_13:

          _Block_object_dispose(&buf, 8);
          goto LABEL_16;
        }
        close(v34);

        _Block_object_dispose(&buf, 8);
LABEL_15:
        a1 = 0;
        goto LABEL_16;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyTokenRegistration initWithAgentUUID:agentDescription:delegate:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%s called with null _tokenAgentRegistration", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v39 = nplog_obj(v18, v19, v20);
      v24 = objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyTokenRegistration initWithAgentUUID:agentDescription:delegate:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%s called with null _tokenAgent", (uint8_t *)&buf, 0xCu);
      }
    }

    goto LABEL_15;
  }
LABEL_16:

  return a1;
}

void sub_100005064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100005090(uint64_t a1)
{

}

uint64_t sub_100005098(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_6;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
  v6 = objc_msgSend(v5, "isEqual:", &off_1000FF1A0);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
    v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = v3;
      v5 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v10;
      goto LABEL_5;
    }
LABEL_6:
    v11 = 1;
    goto LABEL_7;
  }
LABEL_5:
  v11 = v6 ^ 1;

LABEL_7:
  return v11;
}

void sub_100005168(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  const char *v10;

  v3 = a2;
  v6 = v3;
  if (a1)
  {
    if (v3)
    {
      if (objc_msgSend(*(id *)(a1 + 24), "isRegistered"))
        objc_msgSend(*(id *)(a1 + 24), "addToken:", v6);
    }
    else
    {
      v7 = nplog_obj(0, v4, v5);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        v9 = 136315138;
        v10 = "-[NSPPrivacyProxyTokenRegistration addToken:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "%s called with null token", (uint8_t *)&v9, 0xCu);
      }

    }
  }

}

void sub_100005328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100005340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "agentDescription"));
    v11 = 138412290;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Token low water mark hit for %@ agent", (uint8_t *)&v11, 0xCu);

  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    WeakRetained = objc_loadWeakRetained((id *)(v7 + 8));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "tokenLowWaterMarkReached");

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = 0;

}

void sub_10000554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100005564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  void *v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _DWORD v13[2];
  __int16 v14;
  void *v15;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_DWORD *)(a1 + 64);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "agentDescription"));
    v13[0] = 67109378;
    v13[1] = v6;
    v14 = 2112;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received error %d for %@ agent", (uint8_t *)v13, 0x12u);

  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v8 + 8));
    v10 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "reportErrorForTokenRegistration:error:withOptions:", v10, *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

uint64_t sub_10000567C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_8;
  v5 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sessionType"));
  if ((objc_msgSend(v6, "isEqual:", &off_1000FF1A0) & 1) == 0)
  {

LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "agentUUID"));
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v9 = *(void **)(v8 + 16);
  else
    v9 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "agentUUID"));
  v11 = objc_msgSend(v7, "isEqual:", v10);

  if ((v11 & 1) == 0)
    goto LABEL_8;
  v12 = 1;
LABEL_9:

  return v12;
}

void sub_100005760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  id v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  _BYTE v73[24];
  void *v74;
  uint64_t v75;

  if (!a1)
    return;
  if (!*(_QWORD *)(a1 + 24))
  {
    v69 = nplog_obj(a1, a2, a3);
    v70 = objc_claimAutoreleasedReturnValue(v69);
    if (!os_log_type_enabled(v70, OS_LOG_TYPE_FAULT))
    {
LABEL_42:

      return;
    }
    *(_DWORD *)v73 = 136315138;
    *(_QWORD *)&v73[4] = "-[NSPPrivacyProxyTokenRegistration registerTokenAgentWithLowWaterMark:]";
    v71 = "%s called with null self.tokenAgentRegistration";
LABEL_44:
    _os_log_fault_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, v71, v73, 0xCu);
    goto LABEL_42;
  }
  v4 = *(void **)(a1 + 16);
  if (!v4)
  {
    v72 = nplog_obj(0, a2, a3);
    v70 = objc_claimAutoreleasedReturnValue(v72);
    if (!os_log_type_enabled(v70, OS_LOG_TYPE_FAULT))
      goto LABEL_42;
    *(_DWORD *)v73 = 136315138;
    *(_QWORD *)&v73[4] = "-[NSPPrivacyProxyTokenRegistration registerTokenAgentWithLowWaterMark:]";
    v71 = "%s called with null self.tokenAgent";
    goto LABEL_44;
  }
  objc_msgSend(v4, "setActive:", 1);
  objc_msgSend(*(id *)(a1 + 16), "setVoluntary:", 0);
  objc_msgSend(*(id *)(a1 + 16), "setUserActivated:", 0);
  objc_msgSend(*(id *)(a1 + 16), "setKernelActivated:", 0);
  v6 = objc_msgSend(*(id *)(a1 + 24), "isRegistered");
  v7 = (int)v6;
  v10 = nplog_obj(v6, v8, v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (!v7)
  {
    if (v12)
    {
      v29 = *(id *)(a1 + 16);
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "agentDescription"));
      v31 = *(id *)(a1 + 16);
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "agentUUID"));
      *(_DWORD *)v73 = 138412546;
      *(_QWORD *)&v73[4] = v30;
      *(_WORD *)&v73[12] = 2112;
      *(_QWORD *)&v73[14] = v32;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Registering %@ token agent (%@)", v73, 0x16u);

    }
    v33 = *(_QWORD *)(a1 + 16);
    v34 = *(id *)(a1 + 24);
    LOBYTE(v33) = objc_msgSend(v34, "registerNetworkAgent:", v33);

    if ((v33 & 1) == 0)
    {
      v38 = nplog_obj(v35, v36, v37);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        v61 = *(id *)(a1 + 16);
        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "agentDescription"));
        v63 = *(id *)(a1 + 16);
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "agentUUID"));
        *(_DWORD *)v73 = 138412546;
        *(_QWORD *)&v73[4] = v62;
        *(_WORD *)&v73[12] = 2112;
        *(_QWORD *)&v73[14] = v64;
        _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Failed to register %@ token agent (%@)", v73, 0x16u);

      }
    }
    v40 = objc_msgSend(*(id *)(a1 + 24), "setLowWaterMark:", a2);
    if ((v40 & 1) != 0)
      goto LABEL_23;
    v43 = nplog_obj(v40, v41, v42);
    v28 = objc_claimAutoreleasedReturnValue(v43);
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    goto LABEL_38;
  }
  if (v12)
  {
    v13 = *(id *)(a1 + 16);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "agentDescription"));
    v15 = *(id *)(a1 + 16);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "agentUUID"));
    *(_DWORD *)v73 = 138412546;
    *(_QWORD *)&v73[4] = v14;
    *(_WORD *)&v73[12] = 2112;
    *(_QWORD *)&v73[14] = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Updating %@ token agent (%@)", v73, 0x16u);

  }
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(id *)(a1 + 24);
  LOBYTE(v17) = objc_msgSend(v18, "updateNetworkAgent:", v17);

  if ((v17 & 1) == 0)
  {
    v22 = nplog_obj(v19, v20, v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v57 = *(id *)(a1 + 16);
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "agentDescription"));
      v59 = *(id *)(a1 + 16);
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "agentUUID"));
      *(_DWORD *)v73 = 138412546;
      *(_QWORD *)&v73[4] = v58;
      *(_WORD *)&v73[12] = 2112;
      *(_QWORD *)&v73[14] = v60;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to update %@ token agent (%@)", v73, 0x16u);

    }
  }
  v24 = objc_msgSend(*(id *)(a1 + 24), "setLowWaterMark:", a2);
  if ((v24 & 1) != 0)
    goto LABEL_23;
  v27 = nplog_obj(v24, v25, v26);
  v28 = objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
LABEL_38:
    v65 = *(id *)(a1 + 16);
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "agentDescription"));
    v67 = *(id *)(a1 + 16);
    v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "agentUUID"));
    *(_DWORD *)v73 = 134218498;
    *(_QWORD *)&v73[4] = a2;
    *(_WORD *)&v73[12] = 2112;
    *(_QWORD *)&v73[14] = v66;
    *(_WORD *)&v73[22] = 2112;
    v74 = v68;
    _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to set low water mark(%lu) on %@ token agent (%@)", v73, 0x20u);

  }
LABEL_22:

LABEL_23:
  *(_QWORD *)v73 = _NSConcreteStackBlock;
  *(_QWORD *)&v73[8] = 3221225472;
  *(_QWORD *)&v73[16] = sub_10000567C;
  v74 = &unk_1000F5370;
  v75 = a1;
  v44 = objc_retainBlock(v73);
  if (objc_msgSend(*(id *)(a1 + 24), "isRegistered"))
  {
    v45 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
    v46 = *(void **)(a1 + 24);
    v47 = *(id *)(a1 + 16);
    v48 = v46;
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "agentUUID"));
    v50 = *(id *)(a1 + 16);
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "agentUUID"));
    v52 = objc_msgSend(v45, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:", v48, &off_1000FF1A0, v49, v51, 0);

    if (v52)
    {
      v53 = objc_msgSend(*(id *)(a1 + 16), "isActive");
      if (objc_msgSend(*(id *)(a1 + 16), "isVoluntary"))
        v53 |= 2uLL;
      if (objc_msgSend(*(id *)(a1 + 16), "isUserActivated"))
        v53 |= 4uLL;
      if (objc_msgSend(*(id *)(a1 + 16), "isKernelActivated"))
        v54 = v53 | 8;
      else
        v54 = v53;
      objc_msgSend(v52, "setAgentFlags:", v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v55, "setFileHandle:matchingPredicate:", v52, v44);
    }
    else
    {
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v55, "removeFileHandleMatchingPredicate:", v44);
    }

  }
  else
  {
    v52 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    objc_msgSend(v52, "removeFileHandleMatchingPredicate:", v44);
  }

  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v56, "commit");

}

void sub_100005E50(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  uint8_t buf[4];
  void *v13;

  if (a1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 24), "isRegistered");
    if ((_DWORD)v2)
    {
      v5 = nplog_obj(v2, v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(id *)(a1 + 16);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "agentUUID"));
        *(_DWORD *)buf = 138412290;
        v13 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Un-registering token agent with UUID %@", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 24), "unregisterNetworkAgent");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100005F98;
      v11[3] = &unk_1000F5370;
      v11[4] = a1;
      objc_msgSend(v9, "removeFileHandleMatchingPredicate:", v11);

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v10, "commit");

    }
  }
}

id sub_100005F98(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF1A0))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        v8 = *(void **)(v7 + 16);
      else
        v8 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "agentUUID"));
      v10 = objc_msgSend(v6, "isEqual:", v9);

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1000060EC(id a1)
{
  NSPPrivacyProxyLocationMonitor *v1;
  void *v2;

  if (objc_opt_class(CLLocation))
  {
    v1 = objc_alloc_init(NSPPrivacyProxyLocationMonitor);
    v2 = (void *)qword_100112DA8;
    qword_100112DA8 = (uint64_t)v1;

  }
}

void sub_1000062B8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 48), a2);
}

void sub_1000064F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  void *v17;
  void *v18;
  void *v19;
  const char *v20;
  void *v21;
  void *v22;
  id Property;
  uint64_t v24;
  _OWORD v25[4];
  _BYTE v26[128];
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  void *v30;

  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (v6)
  {
    v10 = nplog_obj(v6, v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v28 = v24;
      v29 = 2112;
      v30 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%@: Error in looking up geocode: %@", buf, 0x16u);
    }

  }
  memset(v25, 0, sizeof(v25));
  if (objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", v25, v26, 16))
  {
    v12 = (void *)**((_QWORD **)&v25[0] + 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(**((id **)&v25[0] + 1), "ISOcountryCode"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "timeZone"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "abbreviation"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), v13, v15));
    v18 = *(void **)(a1 + 32);
    if (v18)
      objc_setProperty_atomic(v18, v16, v17, 40);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    if (v19)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      v22 = *(void **)(a1 + 32);
      if (v22)
        Property = objc_getProperty(v22, v20, 40, 1);
      else
        Property = 0;
      objc_msgSend(v21, "didUpdateCountryPlusTimezone:", Property);

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

id sub_10000686C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v10;
  uint64_t v11;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v10 = 138412290;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: location monitor timer fired, requesting location ...", (uint8_t *)&v10, 0xCu);
  }

  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v8 = *(void **)(v7 + 24);
  else
    v8 = 0;
  objc_msgSend(v8, "requestLocation");
  return objc_msgSend(*(id *)(a1 + 32), "setUserEventAgentTimer");
}

void sub_100006D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100006D40(uint64_t a1)
{

}

void sub_100006D48(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_double(v4, "LocationMonitorTimeInterval", *(double *)(*(_QWORD *)(a1 + 32) + 56));
  xpc_set_event("com.apple.networkserviceproxy", "MessageResponse", v4);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_1000070A8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v3, "didUpdateSignificantLocation");

  }
}

void sub_100007464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100007484(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastObject"));
  v5 = objc_msgSend(v2, "copy");

  objc_msgSend(*(id *)(a1 + 40), "handleLocationUpdate:", v5);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_100007658(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  const char *v17;

  v4 = nplog_obj();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = "active";
    if (a2)
      v6 = "idle";
    v16 = 136315138;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "network context is %s", (uint8_t *)&v16, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = a2;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 72);
  if ((a2 & 1) != 0)
  {
    if (!v8)
      return;
    *(_QWORD *)(v7 + 72) = 0;

    v9 = nplog_obj();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      goto LABEL_13;
    LOWORD(v16) = 0;
    v11 = "shared network transaction released";
    goto LABEL_12;
  }
  if (v8)
    return;
  v12 = os_transaction_create("com.apple.networkserviceproxy.shared-network-transaction");
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(void **)(v13 + 72);
  *(_QWORD *)(v13 + 72) = v12;

  v15 = nplog_obj();
  v10 = objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    LOWORD(v16) = 0;
    v11 = "shared network transaction acquired";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v16, 2u);
  }
LABEL_13:

}

void sub_1000077E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  v2 = nplog_obj();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "network context idleness check timer fired", buf, 2u);
  }

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 9))
  {
    v4 = nplog_obj();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "network context is idle, releasing shared network transaction", v8, 2u);
    }

    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 72);
    *(_QWORD *)(v6 + 72) = 0;

  }
}

void sub_1000078C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  dispatch_source_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  dispatch_time_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD v20[6];

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 72))
  {
    *(_BYTE *)(v1 + 9) = 1;
    v3 = os_transaction_create("com.apple.networkserviceproxy.shared-network-transaction");
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 72);
    *(_QWORD *)(v4 + 72) = v3;

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      v10 = NPGetInternalQueue(v6);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v11);
      v13 = *(void **)(v9 + 80);
      *(_QWORD *)(v9 + 80) = v12;

      v14 = *(void **)(v9 + 80);
      if (v14)
      {
        v15 = v14;
        v16 = dispatch_time(0, 30000000000);
        dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0);

        v17 = *(NSObject **)(v9 + 80);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1000077E8;
        v20[3] = &unk_1000F5450;
        v20[4] = v9;
        dispatch_source_set_event_handler(v17, v20);
        dispatch_resume(*(dispatch_object_t *)(v9 + 80));
      }
    }
    v18 = nplog_obj(v6, v7, v8);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "shared network transaction acquired", (uint8_t *)v20, 2u);
    }

  }
}

void sub_100007A48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = NPGetInternalQueue(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100007AFC;
  v7[3] = &unk_1000F5478;
  v8 = v3;
  v6 = v3;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  dispatch_async(v5, v7);

  objc_destroyWeak(&v9);
}

void sub_100007AFC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id WeakRetained;
  const char *v8;
  void *v9;
  uint8_t v10[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v5 = nplog_obj(v2, v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resurrection timer fired", v10, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    objc_setProperty_atomic(WeakRetained, v8, 0, 40);
    sub_100007BA0(v9, 0);
  }

}

void sub_100007BA0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  uint64_t v27;
  id v28;
  uint8_t *v29;
  uint8_t buf[8];
  uint8_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  uint64_t v35;
  _QWORD v36[5];
  id v37;

  v3 = a2;
  if (a1)
  {
    v4 = sub_1000549E8();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    v6 = (void *)v5;
    if (v5)
      v7 = *(void **)(v5 + 40);
    else
      v7 = 0;
    v8 = v7;

    if (v8)
    {
      if ((*(_BYTE *)(a1 + 8) & 1) == 0)
      {
        objc_msgSend(v8, "setResurrectionDate:", 0);
        *(_BYTE *)(a1 + 8) = 1;
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "configServerEnabled"));
        v13 = objc_msgSend(v12, "BOOLValue");

        v17 = nplog_obj(v14, v15, v16);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        if ((v13 & 1) != 0)
        {
          if (v19)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Fetching Waldo", buf, 2u);
          }

          *(_QWORD *)buf = 0;
          v31 = buf;
          v32 = 0x3032000000;
          v33 = sub_1000030DC;
          v34 = sub_100008A98;
          v35 = os_transaction_create("com.apple.networkserviceproxy.refreshWaldo");
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "timestamp"));
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          v25[2] = sub_10000A45C;
          v25[3] = &unk_1000F56F8;
          v26 = v8;
          v27 = a1;
          v28 = v3;
          v29 = buf;
          sub_1000093E4(a1, 0, v20, v25);

          _Block_object_dispose(buf, 8);
          v21 = (void *)v35;
        }
        else
        {
          if (v19)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Waldo is disabled, re-establishing trust", buf, 2u);
          }

          v36[0] = _NSConcreteStackBlock;
          v36[1] = 3221225472;
          v36[2] = sub_10000A3DC;
          v36[3] = &unk_1000F56A8;
          v36[4] = a1;
          v37 = v3;
          sub_100009FD8(a1, v36);
          v21 = v37;
        }

LABEL_20:
        goto LABEL_21;
      }
      v24 = nplog_obj(v9, v10, v11);
      v23 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Waldo refresh is already pending", buf, 2u);
      }
    }
    else
    {
      v22 = nplog_obj(v9, v10, v11);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "No configuration, cannot refresh Waldo", buf, 2u);
      }
    }

    if (v3)
      (*((void (**)(id, _QWORD, _QWORD))v3 + 2))(v3, 0, 0);
    goto LABEL_20;
  }
LABEL_21:

}

void sub_100007E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008078(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a3;
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("MessageResult"));

  if (v7)
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, CFSTR("RequestLog"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100008124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  id Property;
  const char *v13;
  void *v14;
  __int16 v15;
  __int16 v16;

  v4 = nplog_obj();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)a2)
  {
    if (!v6)
      goto LABEL_7;
    v16 = 0;
    v7 = "Tuscany refresh succeeded";
    v8 = (uint8_t *)&v16;
  }
  else
  {
    if (!v6)
      goto LABEL_7;
    v15 = 0;
    v7 = "Tuscany refresh failed";
    v8 = (uint8_t *)&v15;
  }
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
LABEL_7:

  v10 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (v10)
    Property = objc_getProperty(v10, v9, 48, 1);
  else
    Property = 0;
  (*(void (**)(uint64_t, uint64_t, id))(v11 + 16))(v11, a2, Property);
  v14 = *(void **)(a1 + 32);
  if (v14)
    objc_setProperty_atomic(v14, v13, 0, 48);
}

void sub_100008580(uint64_t a1, uint64_t a2)
{
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", a2, 200, 0, 0));
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_1000087D8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  if (a1)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v17 = NPGetInternalQueue(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    dispatch_assert_queue_V2(v18);

    if (v11 && (!v12 || (v19 = objc_msgSend(v12, "compare:", v16), v19 == (id)-1)))
    {
      v24 = nplog_obj(v19, v20, v21);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v11;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Sending request for %@", (uint8_t *)&buf, 0xCu);
      }

      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v34 = 0x3032000000;
      v35 = sub_1000030DC;
      v36 = sub_100008A98;
      v37 = 0;
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100008AA0;
      v27[3] = &unk_1000F5540;
      v28 = v11;
      v29 = a1;
      p_buf = &buf;
      v30 = v14;
      v31 = v15;
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dataTaskWithURL:completionHandler:", v28, v27));
      objc_storeStrong((id *)(*((_QWORD *)&buf + 1) + 40), v26);
      objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "resume");

      _Block_object_dispose(&buf, 8);
    }
    else
    {
      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v11;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Current results for %@ have not yet expired", (uint8_t *)&buf, 0xCu);
      }

      (*((void (**)(id, _QWORD, _QWORD))v15 + 2))(v15, 0, 0);
    }

  }
}

void sub_100008A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100008A98(uint64_t a1)
{

}

void sub_100008AA0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = NPGetInternalQueue(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100008BC4;
  v19[3] = &unk_1000F5518;
  v20 = v9;
  v12 = *(id *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(void **)(a1 + 48);
  v21 = v12;
  v22 = v13;
  v15 = *(_QWORD *)(a1 + 64);
  v23 = v8;
  v27 = v15;
  v24 = v7;
  v25 = v14;
  v26 = *(id *)(a1 + 56);
  v16 = v7;
  v17 = v8;
  v18 = v9;
  dispatch_async(v11, v19);

}

uint64_t sub_100008BC4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  void *v14;
  const char *v15;
  id Property;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t isKindOfClass;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _BOOL4 v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  const char *v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v42;
  uint64_t v43;
  void *v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  uint64_t v48;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "domain"));
    if (objc_msgSend(v3, "isEqualToString:", NSURLErrorDomain))
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "code");

      if (v4 == (id)-999)
      {
        v8 = nplog_obj(v5, v6, v7);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(void **)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          v46 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Request for %@ was cancelled", buf, 0xCu);
        }
LABEL_15:

        goto LABEL_16;
      }
    }
    else
    {

    }
    v11 = nplog_obj(v5, v6, v7);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v43 = *(_QWORD *)(a1 + 32);
      v42 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v46 = v42;
      v47 = 2112;
      v48 = v43;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Request for %@ resulted in error: %@", buf, 0x16u);
    }

    v14 = *(void **)(a1 + 48);
    if (v14 && objc_getProperty(v14, v13, 48, 1))
    {
      Property = *(id *)(a1 + 48);
      if (Property)
        Property = objc_getProperty(Property, v15, 48, 1);
      v17 = *(void **)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
      v19 = Property;
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localizedDescription"));
      objc_msgSend(v19, "appendFormat:", CFSTR("FAIL %@ %@\n"), v18, v9);

      goto LABEL_15;
    }
  }
LABEL_16:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = objc_opt_class(NSHTTPURLResponse);
  isKindOfClass = objc_opt_isKindOfClass(v20, v21);
  if ((isKindOfClass & 1) != 0)
  {
    v25 = nplog_obj(isKindOfClass, v23, v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG);

    if (v27)
    {
      v31 = nplog_obj(v28, v29, v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "allHeaderFields"));
        *(_DWORD *)buf = 138412290;
        v46 = v44;
        _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Got response headers: %@", buf, 0xCu);

      }
    }
    if (!*(_QWORD *)(a1 + 32))
    {
      v33 = *(void **)(a1 + 48);
      if (v33)
      {
        if (objc_getProperty(v33, v29, 48, 1))
        {
          v35 = *(id *)(a1 + 48);
          if (v35)
            v35 = objc_getProperty(v35, v34, 48, 1);
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *(void **)(a1 + 56);
          v38 = v35;
          objc_msgSend(v38, "appendFormat:", CFSTR("SUCCESS %@ %ld\n"), v36, objc_msgSend(v37, "statusCode"));

        }
      }
    }
  }
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v40 = *(void **)(v39 + 40);
  *(_QWORD *)(v39 + 40) = 0;

  (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
}

void sub_1000093E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[4];
  id v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[5];
  id v29;
  _QWORD v30[5];
  id v31;
  _QWORD v32[5];
  id v33;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v10 = sub_1000549E8();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)v11;
    if (v11)
      v13 = *(void **)(v11 + 40);
    else
      v13 = 0;
    v14 = v13;

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "createConfigFetchURLWithPath:timestamp:", v7, v8));
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x3032000000;
    v32[3] = sub_1000030DC;
    v32[4] = sub_100008A98;
    v33 = 0;
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x3032000000;
    v30[3] = sub_1000030DC;
    v30[4] = sub_100008A98;
    v31 = 0;
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x3032000000;
    v28[3] = sub_1000030DC;
    v28[4] = sub_100008A98;
    v29 = 0;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "privacyProxyURLSession"));
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100009620;
    v23[3] = &unk_1000F5568;
    v25 = v30;
    v26 = v32;
    v27 = v28;
    v17 = v15;
    v24 = v17;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10000998C;
    v18[3] = &unk_1000F5590;
    v19 = v9;
    v20 = v28;
    v21 = v30;
    v22 = v32;
    sub_1000087D8(a1, v17, 0, v16, v23, v18);

    _Block_object_dispose(v28, 8);
    _Block_object_dispose(v30, 8);

    _Block_object_dispose(v32, 8);
  }

}

void sub_1000095F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100009620(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t isKindOfClass;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  uint32_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint8_t buf[4];
  NSObject *v49;
  __int16 v50;
  uint64_t v51;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = objc_opt_class(NSHTTPURLResponse);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    {
      v8 = v5;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allHeaderFields"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("X-Modified")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NPUtilities stripWhitespace:](NPUtilities, "stripWhitespace:", v10));

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allHeaderFields"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("X-POI")));
      v14 = objc_claimAutoreleasedReturnValue(+[NPUtilities stripWhitespace:](NPUtilities, "stripWhitespace:", v13));

      if (v11)
      {
        v15 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v11, "integerValue")));
        v16 = *(_QWORD *)(a1[5] + 8);
        v17 = *(void **)(v16 + 40);
        *(_QWORD *)(v16 + 40) = v15;

      }
      v18 = -[NSObject length](v14, "length");
      if (v18)
      {
        v21 = nplog_obj(v18, v19, v20);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v49 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Got geohash %@ from the X-POI header", buf, 0xCu);
        }

        objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v14);
      }
      v23 = objc_msgSend(v8, "statusCode");
      if (v23 != (id)200)
      {
        v43 = nplog_obj(v23, v24, v25);
        v27 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v44 = objc_msgSend(v8, "statusCode");
          v45 = a1[4];
          *(_DWORD *)buf = 134218242;
          v49 = v44;
          v50 = 2112;
          v51 = v45;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Received HTTP response code %ld for %@, not parsing JSON", buf, 0x16u);
        }
        goto LABEL_18;
      }
      v47 = 0;
      v26 = objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v6, 0, &v47));
      v27 = v47;
      v28 = *(_QWORD *)(a1[7] + 8);
      v29 = *(void **)(v28 + 40);
      *(_QWORD *)(v28 + 40) = v26;

      v33 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
      if (v33)
      {
        v34 = objc_opt_class(NSDictionary);
        isKindOfClass = objc_opt_isKindOfClass(v33, v34);
        if ((isKindOfClass & 1) != 0)
        {
LABEL_18:

          goto LABEL_19;
        }
        v38 = nplog_obj(isKindOfClass, v36, v37);
        v39 = objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v40 = "Parsed JSON object is not a dictionary";
          v41 = v39;
          v42 = 2;
LABEL_21:
          _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, v40, buf, v42);
        }
      }
      else
      {
        v46 = nplog_obj(v30, v31, v32);
        v39 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v49 = v27;
          v40 = "Failed to parse JSON data into a JSON object: %@";
          v41 = v39;
          v42 = 12;
          goto LABEL_21;
        }
      }

      goto LABEL_18;
    }
  }
LABEL_19:

}

uint64_t sub_10000998C(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, BOOL, _QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], a2 == 0, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40));
}

id sub_1000099C0(uint64_t a1, uint64_t a2)
{
  id result;

  result = objc_retainBlock(*(id *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1000099E8(uint64_t a1)
{

}

void sub_1000099F0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int8x16_t v15;
  _QWORD v16[4];
  id v17;
  id v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;

  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") <= a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = 0;

    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = 0;

  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a2));
    if (v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "edgeSets"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v4));

      if ((objc_msgSend(v6, "hasEdges") & 1) == 0)
        objc_msgSend(v6, "setTimestamp:", &off_1000FF1B8);
      v7 = *(_QWORD *)(a1 + 48);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "timestamp"));
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100009BB0;
      v16[3] = &unk_1000F55E0;
      v17 = v4;
      v18 = v6;
      v15 = *(int8x16_t *)(a1 + 40);
      v9 = (id)v15.i64[0];
      v19 = vextq_s8(v15, v15, 8uLL);
      v20 = *(_QWORD *)(a1 + 72);
      v21 = a2;
      v10 = v6;
      sub_1000093E4(v7, v17, v8, v16);

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) + 16))();
    }

  }
}

void sub_100009BB0(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (!a2)
  {
    v21 = *(void **)(a1 + 40);
    if (v21)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "currentNetworkInfo"));
      objc_msgSend(v22, "setLastFallbackReason:", 16);

      objc_msgSend(*(id *)(a1 + 40), "setShouldSave:", 1);
    }
    goto LABEL_9;
  }
  if (!v9)
  {
LABEL_9:
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40) + 16))();
    goto LABEL_10;
  }
  v12 = objc_msgSend(objc_alloc((Class)NPWaldo), "initWithIdentifier:timestamp:fromDictionary:source:", *(_QWORD *)(a1 + 32), v10, v9, 1);
  v13 = v12;
  if (!v12 || !objc_msgSend(v12, "hasEdges"))
  {

    goto LABEL_9;
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100009D40;
  v23[3] = &unk_1000F55B8;
  v24 = v13;
  v25 = *(id *)(a1 + 40);
  v14 = v11;
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(void **)(a1 + 56);
  v26 = v14;
  v27 = v15;
  v28 = v16;
  v17 = *(id *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_QWORD *)(a1 + 72);
  v29 = v17;
  v30 = v18;
  v31 = v19;
  v20 = v13;
  objc_msgSend(v20, "resolveWithCompletionHandler:", v23);

LABEL_10:
}

uint64_t sub_100009D40(uint64_t a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  NPWaldoLocationManager *v19;
  SEL v20;
  const char *v21;
  void *v22;
  void *v24;
  int v25;
  void *v26;

  v4 = NPGetInternalQueue(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  dispatch_assert_queue_V2(v5);

  if ((a2 & 1) == 0)
  {
    v9 = nplog_obj(v6, v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
      v25 = 138412290;
      v26 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%@: Failed to resolve downloaded Waldo", (uint8_t *)&v25, 0xCu);

    }
  }
  v11 = *(void **)(a1 + 40);
  if (v11)
  {
    objc_msgSend(v11, "merge:missingSettingsOnly:", *(_QWORD *)(a1 + 32), 0);
    objc_msgSend(*(id *)(a1 + 40), "link");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "locationManager"));
    objc_msgSend(v12, "setCurrentGeohash:", *(_QWORD *)(a1 + 48));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "edgesGeneration"));
    if (!v13)
    {
      objc_msgSend(*(id *)(a1 + 40), "setEdgesGeneration:", &off_1000FF1D0);
      objc_msgSend(*(id *)(a1 + 40), "setUsedEdgesGeneration:", &off_1000FF1D0);
    }
    v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "edgesGeneration"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v14, "unsignedIntValue") + 1));
    objc_msgSend(*(id *)(a1 + 40), "setEdgesGeneration:", v15);

  }
  else
  {
    v16 = *(void **)(a1 + 56);
    v17 = *(id *)(a1 + 32);
    v18 = v17;
    if (v16)
    {
      objc_msgSend(v17, "setDelegate:", v16);
      v19 = -[NPWaldoLocationManager initWithWaldo:]([NPWaldoLocationManager alloc], "initWithWaldo:", v18);
      objc_msgSend(v18, "setLocationManager:", v19);

      if (objc_getProperty(v16, v20, 32, 1))
        objc_msgSend(v18, "setCurrentNetworkCharacteristics:", objc_getProperty(v16, v21, 32, 1));
    }

    objc_msgSend(*(id *)(a1 + 32), "link");
    objc_msgSend(*(id *)(a1 + 32), "setEdgesGeneration:", &off_1000FF1D0);
    objc_msgSend(*(id *)(a1 + 32), "setUsedEdgesGeneration:", &off_1000FF1B8);
    objc_msgSend(*(id *)(a1 + 32), "setShouldSave:", 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "edgeSets"));
    v14 = objc_msgSend(v22, "mutableCopy");

    objc_msgSend(v14, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 72));
    objc_msgSend(*(id *)(a1 + 64), "setEdgeSets:", v14);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40) + 16))();
}

void sub_100009FD8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  _QWORD *v16;
  _QWORD v17[5];
  id v18;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = NPGetInternalQueue(v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    dispatch_assert_queue_V2(v6);

    v7 = sub_1000549E8();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    v9 = (void *)v8;
    if (v8)
      v10 = *(void **)(v8 + 40);
    else
      v10 = 0;
    v11 = v10;

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "edgeSets"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allValues"));

    v17[0] = 0;
    v17[1] = v17;
    v17[2] = 0x3032000000;
    v17[3] = sub_1000030DC;
    v17[4] = sub_100008A98;
    v18 = (id)os_transaction_create("com.apple.networkserviceproxy.establishTrust");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10000A3A4;
    v14[3] = &unk_1000F5680;
    v15 = v4;
    v16 = v17;
    sub_10000A144(a1, v13, 0, 1, 0, v14);

    _Block_object_dispose(v17, 8);
  }

}

void sub_10000A12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000A144(uint64_t a1, void *a2, uint64_t a3, char a4, char a5, void *a6)
{
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD block[4];
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  char v21;
  char v22;

  v11 = a2;
  v12 = a6;
  v13 = v12;
  if (a1)
  {
    v14 = NPGetInternalQueue(v12);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000A220;
    block[3] = &unk_1000F5658;
    v20 = a3;
    v17 = v11;
    v18 = a1;
    v21 = a4;
    v22 = a5;
    v19 = v13;
    dispatch_async(v15, block);

  }
}

void sub_10000A220(uint64_t a1)
{
  unint64_t v2;
  const char *v3;
  void *v4;
  void *v5;
  id Property;
  id v7;
  void *v8;
  int8x16_t v9;
  _QWORD v10[4];
  int8x16_t v11;
  id v12;
  uint64_t v13;
  __int16 v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= (unint64_t)objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(_QWORD *)(a1 + 56)));
    v5 = *(void **)(a1 + 40);
    if (v5)
      Property = objc_getProperty(v5, v3, 32, 1);
    else
      Property = 0;
    objc_msgSend(v4, "setCurrentNetworkCharacteristics:", Property);
    if (objc_msgSend(v4, "hasEdges"))
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10000A360;
      v10[3] = &unk_1000F5630;
      v14 = *(_WORD *)(a1 + 64);
      v9 = *(int8x16_t *)(a1 + 32);
      v7 = (id)v9.i64[0];
      v11 = vextq_s8(v9, v9, 8uLL);
      v8 = *(void **)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 56);
      v12 = v8;
      objc_msgSend(v4, "establishTrustWithCompletionHandler:", v10);

    }
    else
    {
      sub_10000A144(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56) + 1, *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(_QWORD *)(a1 + 48));
    }

  }
}

uint64_t sub_10000A360(uint64_t a1, int a2, char a3)
{
  _BOOL8 v3;
  _BOOL8 v4;

  if (!a2)
  {
    v3 = 0;
    if ((a3 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    v4 = 1;
    return sub_10000A144(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, v3, v4, *(_QWORD *)(a1 + 48));
  }
  v3 = *(_BYTE *)(a1 + 64) != 0;
  if ((a3 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  v4 = *(_BYTE *)(a1 + 65) != 0;
  return sub_10000A144(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, v3, v4, *(_QWORD *)(a1 + 48));
}

void sub_10000A3A4(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

uint64_t sub_10000A3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  v6 = sub_1000549E8();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  sub_1000637A0((uint64_t)v7);

  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *(_BYTE *)(v8 + 8) = 0;
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  return result;
}

void sub_10000A45C(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  void *v30;
  id v31;
  SEL v32;
  void *v33;
  SEL v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  void (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *i;
  void *v55;
  void *v56;
  void *v57;
  unsigned __int8 v58;
  void *v59;
  id v60;
  id v61;
  _OWORD *v62;
  _OWORD *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  _QWORD v74[5];
  id v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  id (*v79)(uint64_t, uint64_t);
  void (*v80)(uint64_t);
  id v81;
  _QWORD v82[5];
  id v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 buf;
  void (*v89)(uint64_t, unint64_t);
  void *v90;
  id v91;
  id v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t *v96;
  _QWORD v97[4];
  id v98[12];

  v9 = a3;
  v73 = a4;
  v71 = a5;
  v72 = v9;
  if (a2)
  {
    if (v9)
    {
      v10 = objc_msgSend(objc_alloc((Class)NSPConfiguration), "initWithTimestamp:fromDictionary:waldoSource:", v73, v9, 1);
      if (v10)
      {
        objc_msgSend(v10, "setIgnoreInvalidCerts:", objc_msgSend(*(id *)(a1 + 32), "ignoreInvalidCerts"));
        objc_msgSend(*(id *)(a1 + 32), "merge:", v10);
        objc_msgSend(*(id *)(a1 + 32), "evaluateEnableRatios");
        v11 = sub_1000549E8();
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        sub_100062748((uint64_t)v12);

      }
    }
    v13 = *(void **)(a1 + 40);
    if (v13)
    {
      v14 = sub_1000549E8();
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16 = (void *)v15;
      if (v15)
        v17 = *(void **)(v15 + 40);
      else
        v17 = 0;
      v18 = v17;

      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "resurrectionDate"));
      if (v19)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "resurrectionDate"));
        objc_msgSend(v20, "timeIntervalSinceNow");
        v22 = v21;

        if (v22 > 0.0)
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "resurrectionDate"));
          v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v23, 1, 2));

          v27 = nplog_obj(v24, v25, v26);
          v28 = objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v69;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Resurrection date is %@, starting timer", (uint8_t *)&buf, 0xCu);
          }

          objc_initWeak((id *)&buf, v13);
          v29 = objc_alloc((Class)NSTimer);
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "resurrectionDate"));
          v97[0] = _NSConcreteStackBlock;
          v97[1] = 3221225472;
          v97[2] = sub_100007A48;
          v97[3] = &unk_1000F54A0;
          objc_copyWeak(v98, (id *)&buf);
          v31 = objc_msgSend(v29, "initWithFireDate:interval:repeats:block:", v30, 0, v97, 0.0);
          objc_setProperty_atomic(v13, v32, v31, 40);

          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
          v35 = objc_getProperty(v13, v34, 40, 1);
          objc_msgSend(v33, "addTimer:forMode:", v35, NSDefaultRunLoopMode);

          v36 = sub_1000549E8();
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          sub_100062748((uint64_t)v37);

          objc_destroyWeak(v98);
          objc_destroyWeak((id *)&buf);

          v38 = *(_QWORD *)(a1 + 40);
          if (v38)
            *(_BYTE *)(v38 + 8) = 0;
          v39 = sub_1000549E8();
          v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
          sub_1000637A0((uint64_t)v40);

          v41 = *(_QWORD *)(a1 + 48);
          if (v41)
          {
            v42 = *(void (**)(void))(v41 + 16);
LABEL_21:
            v42();
            goto LABEL_38;
          }
          goto LABEL_38;
        }
      }

      v45 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      v45 = 0;
    }
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 3221225472;
    v74[2] = sub_10000AB58;
    v74[3] = &unk_1000F56D0;
    v74[4] = v45;
    v75 = *(id *)(a1 + 48);
    v67 = v45;
    v68 = v74;
    if (v45)
    {
      v46 = objc_alloc_init((Class)NSMutableArray);
      v47 = sub_1000549E8();
      v48 = objc_claimAutoreleasedReturnValue(v47);
      v49 = (void *)v48;
      if (v48)
        v50 = *(void **)(v48 + 40);
      else
        v50 = 0;
      v70 = v50;

      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "appRules"));
      v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
      if (v52)
      {
        v53 = *(_QWORD *)v85;
        do
        {
          for (i = 0; i != v52; i = (char *)i + 1)
          {
            if (*(_QWORD *)v85 != v53)
              objc_enumerationMutation(v51);
            v55 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * (_QWORD)i);
            v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "edgeSetIdentifier", v67, v68));
            if (v56)
            {
              v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "edgeSetIdentifier"));
              v58 = objc_msgSend(v46, "containsObject:", v57);

              if ((v58 & 1) == 0)
              {
                v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "edgeSetIdentifier"));
                objc_msgSend(v46, "addObject:", v59);

              }
            }
          }
          v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
        }
        while (v52);
      }

      v82[0] = 0;
      v82[1] = v82;
      v82[2] = 0x3032000000;
      v82[3] = sub_1000030DC;
      v82[4] = sub_100008A98;
      v83 = (id)os_transaction_create("com.apple.networkserviceproxy.fetchHostsFiles");
      v76 = 0;
      v77 = &v76;
      v78 = 0x3032000000;
      v79 = sub_1000099C0;
      v80 = sub_1000099E8;
      v81 = 0;
      *(_QWORD *)&buf = _NSConcreteStackBlock;
      *((_QWORD *)&buf + 1) = 3221225472;
      v89 = sub_1000099F0;
      v90 = &unk_1000F5608;
      v60 = v46;
      v91 = v60;
      v94 = v68;
      v95 = v82;
      v96 = &v76;
      v61 = v70;
      v92 = v61;
      v93 = v67;
      v62 = objc_retainBlock(&buf);
      v63 = objc_retainBlock(v62);
      v64 = (void *)v77[5];
      v77[5] = (uint64_t)v63;

      (*(void (**)(void))(v77[5] + 16))();
      _Block_object_dispose(&v76, 8);

      _Block_object_dispose(v82, 8);
    }

    goto LABEL_38;
  }
  v43 = *(_QWORD *)(a1 + 40);
  if (v43)
    *(_BYTE *)(v43 + 8) = 0;
  v44 = *(_QWORD *)(a1 + 48);
  if (v44)
  {
    v42 = *(void (**)(void))(v44 + 16);
    goto LABEL_21;
  }
LABEL_38:
  objc_msgSend(*(id *)(a1 + 32), "saveToKeychain", v67);
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v66 = *(void **)(v65 + 40);
  *(_QWORD *)(v65 + 40) = 0;

}

void sub_10000AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id location)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_10000AB58(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  uint64_t v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10000ABC8;
  v2[3] = &unk_1000F56A8;
  v1 = *(void **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = v1;
  sub_100009FD8(v3, v2);

}

uint64_t sub_10000ABC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  v6 = sub_1000549E8();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  sub_1000637A0((uint64_t)v7);

  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    *(_BYTE *)(v8 + 8) = 0;
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  return result;
}

BOOL sub_10000B9B4(uint64_t a1)
{
  void *v1;
  _BOOL8 v2;

  if (!a1)
    return 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "tokenKeyInfo"));
  v2 = objc_msgSend(v1, "length") != 0;

  return v2;
}

void sub_10000B9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id *v11;
  id WeakRetained;
  id v13;
  int v14;
  void *v15;

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(id *)(a1 + 24);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "vendor"));
      v14 = 138412290;
      v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "reset token fetch timer for \"%@\"", (uint8_t *)&v14, 0xCu);

    }
    v8 = *(NSObject **)(a1 + 64);
    if (v8)
    {
      dispatch_source_cancel(v8);
      v9 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;

    }
    v10 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 8) = 0;

    v11 = (id *)(a1 + 16);
    WeakRetained = objc_loadWeakRetained(v11);
    objc_msgSend(WeakRetained, "updateUserEventAgentData");

    v13 = objc_loadWeakRetained(v11);
    objc_msgSend(v13, "setUserEventAgentTokenFetchParameters");

  }
}

void sub_10000BB1C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 64), a2);
}

void sub_10000BB2C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 80), a2);
}

void sub_10000BC74(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "vendor"));

    if (v2)
    {
      v6 = nplog_obj(v3, v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(id *)(a1 + 24);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
        v11 = 138412290;
        v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing proxy tokens for \"%@\" from keychain", (uint8_t *)&v11, 0xCu);

      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "vendor"));
      +[NPUtilities removeDataFromKeychainWithIdentifier:accountName:](NPUtilities, "removeDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.ProxyToken"), v10);

    }
  }
}

void sub_10000BDEC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  _QWORD v9[6];
  _QWORD v10[5];
  id v11;

  if (a1)
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      objc_msgSend(v2, "timeIntervalSinceNow");
      if (v4 <= 0.0)
      {
        v10[0] = 0;
        v10[1] = v10;
        v10[2] = 0x3032000000;
        v10[3] = sub_1000030EC;
        v10[4] = sub_10000C20C;
        v11 = (id)os_transaction_create("com.apple.networkserviceproxy.tokenManagerRetry");
        v5 = NPGetInternalQueue(v11);
        v6 = objc_claimAutoreleasedReturnValue(v5);
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_10000C214;
        v9[3] = &unk_1000F5428;
        v9[4] = a1;
        v9[5] = v10;
        dispatch_async(v6, v9);

        _Block_object_dispose(v10, 8);
      }
      else
      {
        sub_10000BF0C(a1, (unint64_t)v4, v3);
      }
    }
    v7 = sub_10000C614(a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    if (v8)
      sub_10000C8EC(a1);
  }
}

void sub_10000BEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000BF0C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  NSObject *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  dispatch_source_t v18;
  void *v19;
  NSObject *v20;
  dispatch_time_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  id *v26;
  id WeakRetained;
  id v28;
  id v29;
  void *v30;
  _QWORD handler[4];
  id v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  unint64_t v36;

  v3 = a2;
  v5 = *(NSObject **)(a1 + 64);
  if (v5)
  {
    dispatch_source_cancel(v5);
    v6 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;

  }
  if (!v3)
  {
    v7 = *(_QWORD *)(a1 + 72);
    if (v7 < 8)
    {
      v10 = dword_1000C0164[v7];
      v5 = arc4random_uniform(6u);
      v3 = ((_DWORD)v5 + v10);
    }
    else
    {
      v8 = nplog_obj(v5, a2, a3);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v29 = *(id *)(a1 + 24);
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "vendor"));
        *(_DWORD *)buf = 138412546;
        v34 = v30;
        v35 = 1024;
        LODWORD(v36) = 8;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch tokens for \"%@\" after %u attempts", buf, 0x12u);

      }
      v5 = arc4random_uniform(6u);
      v3 = ((_DWORD)v5 + 1800);
    }
  }
  v11 = nplog_obj(v5, a2, a3);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(id *)(a1 + 24);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "vendor"));
    *(_DWORD *)buf = 138412546;
    v34 = v14;
    v35 = 2048;
    v36 = v3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Retry: fetching token for \"%@\" after %lu seconds", buf, 0x16u);

  }
  v16 = NPGetInternalQueue(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v17);
  v19 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v18;

  if (*(_QWORD *)(a1 + 64))
  {
    v20 = *(id *)(a1 + 64);
    v21 = dispatch_time(0x8000000000000000, 1000000000 * v3);
    dispatch_source_set_timer(v20, v21, 0xFFFFFFFFFFFFFFFFLL, 0);

    objc_initWeak((id *)buf, (id)a1);
    v22 = *(void **)(a1 + 64);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10000EC58;
    handler[3] = &unk_1000F57C0;
    v23 = v22;
    objc_copyWeak(&v32, (id *)buf);
    dispatch_source_set_event_handler(v23, handler);

    dispatch_resume(*(dispatch_object_t *)(a1 + 64));
    objc_destroyWeak(&v32);
    objc_destroyWeak((id *)buf);
  }
  v24 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)v3));
  v25 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v24;

  v26 = (id *)(a1 + 16);
  WeakRetained = objc_loadWeakRetained(v26);
  objc_msgSend(WeakRetained, "updateUserEventAgentData");

  v28 = objc_loadWeakRetained(v26);
  objc_msgSend(v28, "setUserEventAgentTokenFetchParameters");

}

void sub_10000C20C(uint64_t a1)
{

}

void sub_10000C214(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10000C26C;
  v2[3] = &unk_1000F5748;
  v1 = *(_QWORD *)(a1 + 32);
  v2[4] = *(_QWORD *)(a1 + 40);
  sub_10000C280(v1, v2);
}

void sub_10000C26C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10000C280(uint64_t a1, void *a2)
{
  void (**v3)(id, uint64_t);
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id WeakRetained;
  uint64_t v20;
  NSObject *v21;
  id v22;
  void *v23;
  id v24;
  _QWORD v25[4];
  void (**v26)(id, uint64_t);
  __int128 *p_buf;
  id v28;
  id location;
  __int128 buf;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;

  v3 = a2;
  if (!a1)
    goto LABEL_8;
  v4 = sub_10000B9B4(a1);
  if (!v4)
    goto LABEL_6;
  v7 = 30;
  if (!*(_BYTE *)(a1 + 11))
    v7 = 10;
  if (*(_QWORD *)(a1 + 32) > v7)
  {
LABEL_6:
    if (v3)
      v3[2](v3, 1);
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    v8 = nplog_obj(v4, v5, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(id *)(a1 + 24);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "vendor"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "token fetch request for \"%@\" is already pending", (uint8_t *)&buf, 0xCu);

    }
    if (v3)
      goto LABEL_24;
  }
  else if (*(_QWORD *)(a1 + 64))
  {
    v12 = nplog_obj(v4, v5, v6);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = *(id *)(a1 + 24);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "vendor"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "token fetch request for \"%@\" has a pending timer", (uint8_t *)&buf, 0xCu);

    }
    if (v3)
      goto LABEL_24;
  }
  else
  {
    v16 = objc_msgSend(*(id *)(a1 + 56), "status");
    if (v16 == (id)1)
    {
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v31 = 0x3032000000;
      v32 = sub_1000030EC;
      v33 = sub_10000C20C;
      v34 = (id)os_transaction_create("com.apple.networkserviceproxy.tokenManagerRefreshPool");
      objc_initWeak(&location, (id)a1);
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10000DE4C;
      v25[3] = &unk_1000F5798;
      objc_copyWeak(&v28, &location);
      v26 = v3;
      p_buf = &buf;
      objc_msgSend(WeakRetained, "requestAccessTokenWithCompletionHandler:", v25);

      objc_destroyWeak(&v28);
      objc_destroyWeak(&location);
      _Block_object_dispose(&buf, 8);

      goto LABEL_8;
    }
    v20 = nplog_obj(v16, v17, v18);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(id *)(a1 + 24);
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "vendor"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "deferring token fetch for \"%@\", path is not satisfied", (uint8_t *)&buf, 0xCu);

    }
    *(_BYTE *)(a1 + 9) = 1;
    v24 = objc_loadWeakRetained((id *)(a1 + 16));
    objc_msgSend(v24, "setUserEventAgentTokenFetchParameters");

    if (v3)
LABEL_24:
      v3[2](v3, 0);
  }
LABEL_8:

}

void sub_10000C5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

id sub_10000C614(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  NSSet *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *i;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  void *v28;
  id v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "vendor"));
  v3 = +[NPUtilities copyDataFromKeychainWithIdentifier:accountName:](NPUtilities, "copyDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.ProxyToken"), v2);

  if (v3)
  {
    v4 = objc_opt_class(NSArray);
    v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(NSPToken), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v35 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v6, v3, &v35));
    v8 = v35;

    if (v7)
      v12 = v8 == 0;
    else
      v12 = 0;
    if (v12)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v7));
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
      if (v16)
      {
        v19 = v16;
        v20 = 0;
        v21 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v19; i = (char *)i + 1)
          {
            if (*(_QWORD *)v32 != v21)
              objc_enumerationMutation(v15);
            v23 = *(_QWORD **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
            if (v23)
              v23 = (_QWORD *)v23[1];
            v24 = v23;
            v20 += (uint64_t)objc_msgSend(v24, "count");

          }
          v19 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
        }
        while (v19);
      }
      else
      {
        v20 = 0;
      }
      *(_QWORD *)(a1 + 32) = v20;
      v25 = nplog_obj(0, v17, v18);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        v28 = *(void **)(a1 + 32);
        v29 = *(id *)(a1 + 24);
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "vendor"));
        *(_DWORD *)buf = 134218242;
        v37 = v28;
        v38 = 2112;
        v39 = v30;
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Received %lu tokens from keychain for \"%@\"", buf, 0x16u);

      }
    }
    else
    {
      v13 = nplog_obj(v9, v10, v11);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v37 = v8;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "unarchivedObjectOfClass for token info list failed with error: %@", buf, 0xCu);
      }

      v15 = 0;
      *(_QWORD *)(a1 + 32) = 0;
    }

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

void sub_10000C8EC(uint64_t a1)
{
  uint64_t *v2;
  NSPPrivacyProxyTokenRegistration *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  NSPProxyAgentStats *v26;
  __CFString *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  id v35;
  unint64_t v36;
  void *v37;
  id v38;
  unint64_t v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  NSPProxyAgentStats *v51;
  id v52;
  _QWORD block[5];
  uint8_t buf[4];
  unint64_t v55;
  __int16 v56;
  void *v57;

  if (a1 && sub_10000B9B4(a1))
  {
    v2 = (uint64_t *)(a1 + 40);
    if (!*(_QWORD *)(a1 + 40))
    {
      v3 = [NSPPrivacyProxyTokenRegistration alloc];
      v4 = *(void **)(a1 + 48);
      v5 = *(id *)(a1 + 24);
      v6 = v4;
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vendor"));
      v8 = sub_100004B84((id *)&v3->super.isa, v6, v7, (void *)a1);
      objc_storeStrong((id *)(a1 + 40), v8);

      v10 = *(id *)(a1 + 40);
      if (*(_BYTE *)(a1 + 11))
      {
        if (objc_msgSend(*(id *)(a1 + 24), "proxyHop") == 1)
          v11 = 15;
        else
          v11 = 5;
      }
      else
      {
        v11 = 5;
      }
      sub_100005760((uint64_t)v10, v11, v9);

    }
    sub_10000D374(a1);
    v15 = *(_QWORD *)(a1 + 40);
    if (v15)
    {
      v12 = objc_msgSend(*(id *)(v15 + 24), "tokenCount");
      v16 = v12;
    }
    else
    {
      v16 = 0;
    }
    if (*(_QWORD *)(a1 + 32))
    {
      if (*(_BYTE *)(a1 + 11))
      {
        v12 = objc_msgSend(*(id *)(a1 + 24), "proxyHop");
        v17 = 10;
        if ((_DWORD)v12 == 1)
          v17 = 30;
      }
      else
      {
        v17 = 10;
      }
      if (v16 < v17)
      {
        v18 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(a1 + 11))
        {
          v12 = objc_msgSend(*(id *)(a1 + 24), "proxyHop");
          v19 = 10;
          if ((_DWORD)v12 == 1)
            v19 = 30;
        }
        else
        {
          v19 = 10;
        }
        if (v18 <= v19 - v16)
        {
          v21 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          if (*(_BYTE *)(a1 + 11))
          {
            v12 = objc_msgSend(*(id *)(a1 + 24), "proxyHop");
            v20 = 10;
            if ((_DWORD)v12 == 1)
              v20 = 30;
          }
          else
          {
            v20 = 10;
          }
          v21 = v20 - v16;
        }
        v22 = nplog_obj(v12, v13, v14);
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v24 = *(id *)(a1 + 24);
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "vendor"));
          *(_DWORD *)buf = 134218242;
          v55 = v21;
          v56 = 2112;
          v57 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "adding %lu tokens to token agent[%@]", buf, 0x16u);

        }
        *(_QWORD *)(a1 + 96) += v21;
        if (v21)
        {
          v26 = objc_alloc_init(NSPProxyAgentStats);
          v27 = sub_10000E59C(a1);
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          -[NSPProxyAgentStats setTierType:](v26, "setTierType:", v28);

          if (objc_msgSend(*(id *)(a1 + 24), "proxyHop") == 1)
            -[NSPProxyAgentStats setIngressProxyTokensAdded:](v26, "setIngressProxyTokensAdded:", v21);
          else
            -[NSPProxyAgentStats setEgressProxyTokensAdded:](v26, "setEgressProxyTokensAdded:", v21);
          v51 = v26;
          -[NSPProxyAnalytics sendAnalytics](v26, "sendAnalytics");
          v29 = sub_10000C614(a1);
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          v52 = objc_msgSend(v30, "count");
          if (v52)
          {
            v31 = 0;
            while (1)
            {
              v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "firstObject"));
              v33 = (_QWORD *)v32;
              if (v32)
                v34 = *(void **)(v32 + 8);
              else
                v34 = 0;
              v35 = v34;
              if ((unint64_t)objc_msgSend(v35, "count") <= v21)
              {
                if (v33)
                  v37 = (void *)v33[1];
                else
                  v37 = 0;
                v38 = v37;
                v36 = (unint64_t)objc_msgSend(v38, "count");

                if (!v36)
                  goto LABEL_56;
              }
              else
              {

                v36 = v21;
              }
              v39 = v36;
              do
              {
                if (v33)
                  v40 = (void *)v33[1];
                else
                  v40 = 0;
                v41 = v40;
                v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "firstObject"));

                sub_100005168(*v2, v42);
                if (v33)
                  v43 = (void *)v33[1];
                else
                  v43 = 0;
                v44 = v43;
                objc_msgSend(v44, "removeObject:", v42);

                --v39;
              }
              while (v39);
LABEL_56:
              *(_QWORD *)(a1 + 32) -= v36;
              if (v33)
                v45 = (void *)v33[1];
              else
                v45 = 0;
              v46 = v45;
              v47 = objc_msgSend(v46, "count");

              if (!v47)
                objc_msgSend(v30, "removeObject:", v33);
              v21 -= v36;

              if (v21)
              {
                if ((id)++v31 != v52)
                  continue;
              }
              break;
            }
          }
          sub_10000D80C(a1, (uint64_t)v30);

        }
        if (*v2)
        {
          v48 = objc_msgSend(*(id *)(*v2 + 24), "tokenCount");
          if ((_DWORD)v48)
          {
            v49 = NPGetInternalQueue(v48);
            v50 = objc_claimAutoreleasedReturnValue(v49);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10000E64C;
            block[3] = &unk_1000F5450;
            block[4] = a1;
            dispatch_async(v50, block);

          }
        }
      }
    }
  }
}

void sub_10000D344(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 24), a2);
}

void sub_10000D354(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 40), a2);
}

void sub_10000D364(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 56), a2);
}

void sub_10000D374(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *i;
  uint64_t v11;
  id *v12;
  void *v13;
  id v14;
  double v15;
  BOOL v16;
  id v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  id v33;
  void *v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  _QWORD block[6];
  _BYTE buf[24];
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v2 = objc_alloc_init((Class)NSMutableArray);
      v3 = sub_10000C614(a1);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      v5 = *(_QWORD *)(a1 + 32);
      v6 = (char *)objc_msgSend(v4, "count");
      if (v6)
      {
        v9 = v6;
        for (i = 0; i != v9; ++i)
        {
          v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", i));
          v12 = (id *)v11;
          if (v11)
            v13 = *(void **)(v11 + 24);
          else
            v13 = 0;
          v14 = v13;
          objc_msgSend(v14, "timeIntervalSinceNow");
          v16 = v15 > 0.0;

          if (!v16)
          {
            if (v12)
              v17 = v12[1];
            else
              v17 = 0;
            v18 = *(_QWORD *)(a1 + 32);
            v19 = v17;
            LODWORD(v18) = v18 < (unint64_t)objc_msgSend(v19, "count");

            if ((_DWORD)v18)
            {
              v26 = nplog_obj(v20, v21, v22);
              v27 = objc_claimAutoreleasedReturnValue(v26);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
              {
                v28 = *(id *)(a1 + 24);
                v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "vendor"));
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v29;
                v49 = (void *)v29;
                _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "self.tokenCount < tokenInfo.tokens.count for \"%@\"", buf, 0xCu);

              }
            }
            if (v12)
            {
              v23 = v12[1];
              *(_QWORD *)(a1 + 104) += objc_msgSend(v23, "count");

              v24 = v12[1];
            }
            else
            {
              *(_QWORD *)(a1 + 104) += objc_msgSend(0, "count");
              v24 = 0;
            }
            v25 = v24;
            *(_QWORD *)(a1 + 32) -= objc_msgSend(v25, "count");

            objc_msgSend(v2, "addObject:", v12);
          }

        }
      }
      v30 = nplog_obj(v6, v7, v8);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(_QWORD *)(a1 + 32);
        v33 = *(id *)(a1 + 24);
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "vendor"));
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v5 - v32;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v34;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Cleaned up %lu expired tokens for \"%@\"", buf, 0x16u);

      }
      objc_msgSend(v4, "removeObjectsInArray:", v2);
      if (v5 != *(_QWORD *)(a1 + 32))
      {
        sub_10000D80C(a1, (uint64_t)v4);
        v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
        v46 = *(id *)(a1 + 24);
        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "vendor"));
        v48 = sub_10000D9B0(a1);

        +[NSPCoreData saveTokenEvent:eventType:vendor:tokenCount:](NSPCoreData, "saveTokenEvent:eventType:vendor:tokenCount:", v45, 5, v47, v48);
      }

    }
    v35 = sub_10000B9B4(a1);
    if (v35)
    {
      v38 = 30;
      if (!*(_BYTE *)(a1 + 11))
        v38 = 10;
      if (*(_QWORD *)(a1 + 32) <= v38)
      {
        v39 = nplog_obj(v35, v36, v37);
        v40 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = *(id *)(a1 + 24);
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "vendor"));
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v42;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Proxy \"%@\", hit cached low water mark", buf, 0xCu);

        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v52 = sub_1000030EC;
        v53 = sub_10000C20C;
        v54 = (id)os_transaction_create("com.apple.networkserviceproxy.removeExpiredTokens");
        v43 = NPGetInternalQueue(v54);
        v44 = objc_claimAutoreleasedReturnValue(v43);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10000D9E4;
        block[3] = &unk_1000F5428;
        block[4] = a1;
        block[5] = buf;
        dispatch_async(v44, block);

        _Block_object_dispose(buf, 8);
      }
    }
  }
}

void sub_10000D7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000D80C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  BOOL v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  void *v18;

  v14 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", a2, 1, &v14));
  v4 = v14;
  v7 = nplog_obj(v4, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (v3)
    v10 = v4 == 0;
  else
    v10 = 0;
  if (v10)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(void **)(a1 + 32);
      v12 = *(id *)(a1 + 24);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "vendor"));
      *(_DWORD *)buf = 134218242;
      v16 = v11;
      v17 = 2112;
      v18 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Saving %lu proxy tokens for \"%@\" in the keychain", buf, 0x16u);

    }
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "vendor"));
    +[NPUtilities saveDataToKeychain:withIdentifier:accountName:](NPUtilities, "saveDataToKeychain:withIdentifier:accountName:", v3, CFSTR("com.apple.NetworkServiceProxy.ProxyToken"), v9);
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    v16 = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "archivedDataWithRootObject for token info list failed with error: %@", buf, 0xCu);
  }

}

uint64_t sub_10000D9B0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 32);
    v1 = *(_QWORD *)(result + 40);
    if (v1)
      v1 = objc_msgSend(*(id *)(v1 + 24), "tokenCount");
    return v1 + v2;
  }
  return result;
}

void sub_10000D9E4(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "tokenLowWaterMarkReached:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10000DA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[6];
  __int128 buf;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(id *)(a1 + 24);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "vendor"));
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Flushing tokens for \"%@\"", (uint8_t *)&buf, 0xCu);

    }
    *(_QWORD *)(a1 + 32) = 0;
    sub_10000BC74(a1);
    sub_10000DBDC(a1);
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v12 = 0x3032000000;
    v13 = sub_1000030EC;
    v14 = sub_10000C20C;
    v15 = (id)os_transaction_create("com.apple.networkserviceproxy.flushProxyTokensLowWaterMark");
    v8 = NPGetInternalQueue(v15);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10000DDF0;
    v10[3] = &unk_1000F5428;
    v10[4] = a1;
    v10[5] = &buf;
    dispatch_async(v9, v10);

    _Block_object_dispose(&buf, 8);
  }
}

void sub_10000DBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000DBDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v16[6];
  _QWORD v17[5];
  id v18;
  uint8_t buf[4];
  void *v20;

  if (a1 && sub_10000B9B4(a1))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
      v2 = objc_msgSend(*(id *)(v2 + 24), "tokenCount");
    if (!(v2 + v3))
    {
      v17[0] = 0;
      v17[1] = v17;
      v17[2] = 0x3032000000;
      v17[3] = sub_1000030EC;
      v17[4] = sub_10000C20C;
      v18 = (id)os_transaction_create("com.apple.networkserviceproxy.emptyProxyTokens");
      v6 = nplog_obj(v18, v4, v5);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = *(id *)(a1 + 24);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
        *(_DWORD *)buf = 138412290;
        v20 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "no tokens available for proxy[%@]", buf, 0xCu);

      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v11 = *(id *)(a1 + 24);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "vendor"));
      +[NSPCoreData saveTokenEvent:eventType:vendor:tokenCount:](NSPCoreData, "saveTokenEvent:eventType:vendor:tokenCount:", v10, 1, v12, 0);

      v14 = NPGetInternalQueue(v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10000EAC8;
      v16[3] = &unk_1000F5428;
      v16[4] = a1;
      v16[5] = v17;
      dispatch_async(v15, v16);

      _Block_object_dispose(v17, 8);
    }
  }
}

void sub_10000DDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000DDF0(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "tokenLowWaterMarkReached:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10000DE4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id *WeakRetained;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  __CFString *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  void *v63;
  uint64_t v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  _QWORD v71[2];
  void (*v72)(uint64_t);
  void *v73;
  id v74;
  uint64_t v75;
  id location;
  _BYTE buf[24];
  void *v78;
  id *v79;
  id v80;
  id v81;
  id v82;
  id v83[2];

  v4 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v71[0] = _NSConcreteStackBlock;
    v71[1] = 3221225472;
    v72 = sub_10000E560;
    v73 = &unk_1000F5770;
    v6 = *(id *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v74 = v6;
    v75 = v7;
    v8 = v4;
    v9 = v71;
    v12 = v9;
    if (WeakRetained[3])
    {
      v13 = sub_10000B9B4((uint64_t)WeakRetained);
      if (!v13)
      {
        v22 = nplog_obj(v13, v14, v15);
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          v24 = WeakRetained[3];
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "vendor"));
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "proxy for \"%@\" does not require any token", buf, 0xCu);

        }
        ((void (*)(void *, uint64_t))v72)(v12, 1);
        goto LABEL_12;
      }
      if (*((_BYTE *)WeakRetained + 8))
      {
        v16 = nplog_obj(v13, v14, v15);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v18 = WeakRetained[3];
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "vendor"));
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "token fetch request for \"%@\" is already pending", buf, 0xCu);

        }
      }
      else if (WeakRetained[8])
      {
        v26 = nplog_obj(v13, v14, v15);
        v17 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v27 = WeakRetained[3];
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "vendor"));
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v28;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "token fetch request for \"%@\" has a pending timer", buf, 0xCu);

        }
      }
      else
      {
        v29 = objc_msgSend(WeakRetained[7], "status");
        if (v29 != (id)1)
        {
          v37 = nplog_obj(v29, v30, v31);
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            v39 = WeakRetained[3];
            v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "vendor"));
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v40;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "deferring token fetch for \"%@\", path is not satisfied", buf, 0xCu);

          }
          *((_BYTE *)WeakRetained + 9) = 1;
          v41 = objc_loadWeakRetained(WeakRetained + 2);
          objc_msgSend(v41, "setUserEventAgentTokenFetchParameters");

          ((void (*)(void *, _QWORD))v72)(v12, 0);
          goto LABEL_12;
        }
        v32 = 30;
        if (!*((_BYTE *)WeakRetained + 11))
          v32 = 10;
        if ((unint64_t)WeakRetained[4] <= v32)
        {
          *((_BYTE *)WeakRetained + 8) = 1;
          v42 = sub_10000EB1C((uint64_t)WeakRetained);
          v65 = (void *)objc_claimAutoreleasedReturnValue(v42);
          v45 = nplog_obj(v65, v43, v44);
          v46 = objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            v47 = WeakRetained[3];
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "vendor"));
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v48;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v65;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Fetch tokens for \"%@\" on %@", buf, 0x16u);

          }
          objc_initWeak(&location, WeakRetained);
          v49 = 60;
          if (!*((_BYTE *)WeakRetained + 11))
            v49 = 30;
          v64 = v49;
          v50 = WeakRetained[3];
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "tokenKeyInfo"));

          v51 = WeakRetained[3];
          v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "tokenChallenge"));

          v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyTokenManager sharedTokenManager](NSPPrivacyTokenManager, "sharedTokenManager"));
          v52 = sub_10000EB1C((uint64_t)WeakRetained);
          v69 = (void *)objc_claimAutoreleasedReturnValue(v52);
          v53 = sub_10000E59C((uint64_t)WeakRetained);
          v68 = (void *)objc_claimAutoreleasedReturnValue(v53);
          v62 = WeakRetained[3];
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "proxyURL"));
          v55 = WeakRetained[3];
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "vendor"));
          v57 = WeakRetained[4];
          v58 = WeakRetained[9];
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_10000EDC0;
          v78 = &unk_1000F5810;
          objc_copyWeak(v83, &location);
          v59 = v64 - (_QWORD)v57;
          v79 = WeakRetained;
          v60 = v63;
          v80 = v60;
          v66 = v65;
          v81 = v66;
          v82 = v12;
          objc_msgSend(v70, "fetchPrivacyTokensOnInterface:tierType:proxyURL:tokenVendor:tokenIssuancePublicKey:tokenChallenge:tokenCount:accessToken:retryAttempt:completionHandler:", v69, v68, v54, v56, v60, v67, v59, v8, v58, buf);

          objc_destroyWeak(v83);
          objc_destroyWeak(&location);

          goto LABEL_12;
        }
        v33 = nplog_obj(1, v30, v31);
        v17 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v34 = WeakRetained[3];
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "vendor"));
          v36 = WeakRetained[4];
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v35;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v36;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "ignoring token fetch for \"%@\", token count %lu", buf, 0x16u);

        }
      }
    }
    else
    {
      v61 = nplog_obj(v9, v10, v11);
      v17 = objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "-[NSPProxyTokenInfo requestTokensWithAccessToken:completionHandler:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "%s called with null self.proxyInfo", buf, 0xCu);
      }
    }

    ((void (*)(void *, _QWORD))v72)(v12, 0);
LABEL_12:

    goto LABEL_13;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v21 = *(void **)(v20 + 40);
  *(_QWORD *)(v20 + 40) = 0;

LABEL_13:
}

void sub_10000E530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_10000E560(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

__CFString *sub_10000E59C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  __CFString *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tierString"));

  if (v3)
  {
    v4 = v3;
  }
  else if (*(_BYTE *)(a1 + 11))
  {
    v4 = CFSTR("SUBSCRIBER");
  }
  else
  {
    v4 = CFSTR("FREE");
  }

  return v4;
}

uint64_t sub_10000E610(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 11))
    {
      if (objc_msgSend(*(id *)(result + 24), "proxyHop") == 1)
        return 15;
      else
        return 5;
    }
    else
    {
      return 5;
    }
  }
  return result;
}

void sub_10000E64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  id WeakRetained;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD v23[6];
  __int128 buf;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD **)(a1 + 32);
    if (v6)
      v6 = (_QWORD *)v6[3];
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "vendor"));
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "\"%@\" tokens added", (uint8_t *)&buf, 0xCu);

  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    WeakRetained = objc_loadWeakRetained((id *)(v9 + 16));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "tokenAdded");

  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v12 = *(_BYTE *)(v11 + 11) ? 30 : 10;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v11 + 24), "vendor"));
    v14 = +[NSPCoreData triggerProactiveTokenFetch:lowerTokenCountThreshold:](NSPCoreData, "triggerProactiveTokenFetch:lowerTokenCountThreshold:", v13, v12 + (v12 >> 1));

    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v16 = *(id *)(v11 + 24);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "vendor"));
      v19 = *(_QWORD *)(v11 + 32);
      v18 = *(_QWORD *)(v11 + 40);
      if (v18)
        v20 = objc_msgSend(*(id *)(v18 + 24), "tokenCount");
      else
        v20 = 0;

      +[NSPCoreData saveTokenEvent:eventType:vendor:tokenCount:](NSPCoreData, "saveTokenEvent:eventType:vendor:tokenCount:", v15, 4, v17, v20 + v19);
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v25 = 0x3032000000;
      v26 = sub_1000030EC;
      v27 = sub_10000C20C;
      v28 = (id)os_transaction_create("com.apple.networkserviceproxy.proactiveTokenFetch");
      v21 = NPGetInternalQueue(v28);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10000FC88;
      v23[3] = &unk_1000F5428;
      v23[4] = v11;
      v23[5] = &buf;
      dispatch_async(v22, v23);

      _Block_object_dispose(&buf, 8);
    }
  }
}

void sub_10000E8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000E8D0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSPProxyAgentStats *v5;
  __CFString *v6;
  void *v7;
  id v8;
  _QWORD v9[6];
  _QWORD v10[5];
  id v11;

  if (a1 && sub_10000B9B4(a1))
  {
    v2 = 30;
    if (!*(_BYTE *)(a1 + 11))
      v2 = 10;
    if (*(_QWORD *)(a1 + 32) <= v2)
    {
      v10[0] = 0;
      v10[1] = v10;
      v10[2] = 0x3032000000;
      v10[3] = sub_1000030EC;
      v10[4] = sub_10000C20C;
      v11 = (id)os_transaction_create("com.apple.networkserviceproxy.checkCachedTokenCount");
      v3 = NPGetInternalQueue(v11);
      v4 = objc_claimAutoreleasedReturnValue(v3);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_10000EA6C;
      v9[3] = &unk_1000F5428;
      v9[4] = a1;
      v9[5] = v10;
      dispatch_async(v4, v9);

      ++*(_QWORD *)(a1 + 128);
      v5 = objc_alloc_init(NSPProxyAgentStats);
      v6 = sub_10000E59C(a1);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      -[NSPProxyAgentStats setTierType:](v5, "setTierType:", v7);

      v8 = *(id *)(a1 + 24);
      LODWORD(v7) = objc_msgSend(v8, "proxyHop");

      if ((_DWORD)v7 == 1)
        -[NSPProxyAgentStats setIngressProxyLowWaterMarkHitCount:](v5, "setIngressProxyLowWaterMarkHitCount:", (char *)-[NSPProxyAgentStats ingressProxyLowWaterMarkHitCount](v5, "ingressProxyLowWaterMarkHitCount") + 1);
      else
        -[NSPProxyAgentStats setEgressProxyLowWaterMarkHitCount:](v5, "setEgressProxyLowWaterMarkHitCount:", (char *)-[NSPProxyAgentStats egressProxyLowWaterMarkHitCount](v5, "egressProxyLowWaterMarkHitCount") + 1);
      -[NSPProxyAnalytics sendAnalytics](v5, "sendAnalytics");

      _Block_object_dispose(v10, 8);
    }
  }
}

void sub_10000EA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000EA6C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "tokenLowWaterMarkReached:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10000EAC8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "tokensEmpty");

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

id sub_10000EB1C(uint64_t a1)
{
  void *v1;
  void *v2;

  if (*(_BYTE *)(a1 + 10))
  {
    v1 = 0;
  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "interface"));
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "interfaceName"));

  }
  return v1;
}

void sub_10000EB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;

  if (a1 && *(_BYTE *)(a1 + 9))
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(id *)(a1 + 24);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "vendor"));
      v11 = 138412290;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Retry fetching tokens for \"%@\" on network or key change", (uint8_t *)&v11, 0xCu);

    }
    v8 = *(_QWORD *)(a1 + 72);
    sub_10000B9FC(a1, v9, v10);
    *(_QWORD *)(a1 + 72) = v8;
    sub_10000C280(a1, 0);
  }
}

void sub_10000EC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  _QWORD *v7;
  void *v8;
  uint8_t v9[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Token fetch retry timer fired", v9, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(*((dispatch_source_t *)WeakRetained + 8));
    v8 = (void *)v7[8];
    v7[8] = 0;

    sub_10000C280(v7, 0);
  }

}

double sub_10000ECF4(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  double v5;
  double v6;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "allHeaderFields"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Retry-After")));

  if (v2)
  {
    v3 = objc_alloc_init((Class)NSNumberFormatter);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "numberFromString:", v2));
    objc_msgSend(v4, "doubleValue");
    v6 = v5;

  }
  else
  {
    v6 = 0.0;
  }

  return v6;
}

void sub_10000ED84(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  id v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 16));
  else
    WeakRetained = 0;
  v3 = WeakRetained;
  objc_msgSend(WeakRetained, "tokenFetched");

}

void sub_10000EDC0(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, int a7)
{
  id v13;
  _BYTE *WeakRetained;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  id v28;
  NSObject *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  NSObject *v64;
  id v65;
  void *v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  id v96;
  void *v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  unint64_t v109;
  uint64_t v110;
  void *v111;
  _BOOL4 v112;
  id v113;
  id v114;
  void *v115;
  id v116;
  void *v117;
  uint64_t v118;
  void *v119;
  id v120;
  id v121;
  uint64_t (*v122)(uint64_t, uint64_t);
  _QWORD v123[4];
  id v124;
  _BYTE *v125;
  _QWORD v126[4];
  id v127;
  _BYTE *v128;
  _QWORD v129[4];
  id v130;
  _BYTE *v131;
  _QWORD block[4];
  id v133;
  _BYTE *v134;
  double v135;
  _BYTE buf[24];
  uint64_t (*v137)(uint64_t, uint64_t);
  void (*v138)(uint64_t);
  id v139;

  v13 = a3;
  v122 = a4;
  v121 = a5;
  v120 = a6;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v15 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[8] = 0;
    if (a2)
    {
      if (objc_msgSend(v13, "statusCode") == (id)200)
      {
        v16 = objc_msgSend(v121, "count");
        if (v16)
        {
          v19 = nplog_obj(v16, v17, v18);
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(id *)(v15 + 24);
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "vendor"));
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v22;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Token fetch successful for \"%@\"", buf, 0xCu);

          }
          ++*(_QWORD *)(v15 + 88);
          v23 = v121;
          v24 = v120;
          v119 = v23;
          if (objc_msgSend(v23, "count"))
          {
            if (!v24 || (objc_msgSend(v24, "timeIntervalSinceNow"), v27 < 0.0))
            {
              v28 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceNow:", 86400.0);

              v24 = v28;
            }
            v29 = sub_10003DD80((id *)[NSPToken alloc], v24);
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v119));
            sub_100010990((uint64_t)v29, v30);

            v31 = sub_10000C614(v15);
            v32 = (id)objc_claimAutoreleasedReturnValue(v31);
            if (!v32)
              v32 = objc_alloc_init((Class)NSMutableArray);
            objc_msgSend(v32, "addObject:", v29);
            *(_QWORD *)(v15 + 32) += objc_msgSend(v119, "count");
            sub_10000D80C(v15, (uint64_t)v32);
            v36 = nplog_obj(v33, v34, v35);
            v37 = objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              v38 = objc_msgSend(v119, "count");
              v39 = *(id *)(v15 + 24);
              v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "vendor"));
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v38;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v40;
              *(_WORD *)&buf[22] = 2112;
              v137 = (uint64_t (*)(uint64_t, uint64_t))v24;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Cache %lu tokens for proxy \"%@\", expiration %@", buf, 0x20u);

            }
          }
          else
          {
            v118 = nplog_obj(0, v25, v26);
            v29 = objc_claimAutoreleasedReturnValue(v118);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = "-[NSPProxyTokenInfo cacheTokens:expirationTime:]";
              _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "%s called with null (tokens.count > 0)", buf, 0xCu);
            }
          }

          sub_10000B9FC(v15, v41, v42);
          sub_10000C8EC(v15);
          sub_10000E8D0(v15);
          v44 = NPGetInternalQueue(v43);
          v45 = objc_claimAutoreleasedReturnValue(v44);
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_10000ED84;
          v137 = (uint64_t (*)(uint64_t, uint64_t))&unk_1000F5450;
          v138 = (void (*)(uint64_t))v15;
          dispatch_async(v45, buf);

          v46 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          v47 = *(_QWORD **)(a1 + 32);
          if (v47)
            v47 = (_QWORD *)v47[3];
          v48 = v47;
          v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "vendor"));
          v50 = sub_10000D9B0(*(_QWORD *)(a1 + 32));

          +[NSPCoreData saveTokenEvent:eventType:vendor:tokenCount:](NSPCoreData, "saveTokenEvent:eventType:vendor:tokenCount:", v46, 2, v49, v50);
          goto LABEL_65;
        }
      }
    }
    if (objc_msgSend(v13, "statusCode") == (id)429)
    {
      v53 = nplog_obj(429, v51, v52);
      v54 = objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        v114 = *(id *)(v15 + 24);
        v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "vendor"));
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v115;
        _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Token fetch failed for \"%@\" with too many requests", buf, 0xCu);

      }
      ++*(_QWORD *)(v15 + 112);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      v56 = *(_QWORD **)(a1 + 32);
      if (v56)
        v56 = (_QWORD *)v56[3];
      v57 = v56;
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "vendor"));
      v59 = sub_10000D9B0(*(_QWORD *)(a1 + 32));

      +[NSPCoreData saveTokenEvent:eventType:vendor:tokenCount:](NSPCoreData, "saveTokenEvent:eventType:vendor:tokenCount:", v55, 3, v58, v59);
      v61 = sub_10000ECF4(v13);
      if (v61 <= 0.0)
        v62 = 86400.0;
      else
        v62 = v61;
      *(_BYTE *)(v15 + 9) = 0;
      sub_10000BF0C(v15, (unint64_t)v62, v60);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v137 = sub_1000030EC;
      v138 = sub_10000C20C;
      v139 = (id)os_transaction_create("com.apple.networkserviceproxy.tokenRateLimited");
      v63 = NPGetInternalQueue(v139);
      v64 = objc_claimAutoreleasedReturnValue(v63);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10000FA4C;
      block[3] = &unk_1000F57E8;
      v135 = v62;
      v133 = (id)v15;
      v134 = buf;
      dispatch_async(v64, block);

      _Block_object_dispose(buf, 8);
      goto LABEL_64;
    }
    v65 = *(id *)(v15 + 24);
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "tokenKeyInfo"));
    v67 = *(void **)(a1 + 40);
    v68 = v66;
    v69 = v67;
    v70 = (void *)v69;
    if (v68 | v69 && (!v68 || !v69 || !objc_msgSend((id)v68, "isEqual:", v69)))
    {
      v71 = (id)v68;
LABEL_48:

      v103 = nplog_obj(v100, v101, v102);
      v104 = objc_claimAutoreleasedReturnValue(v103);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "Token fetch failed, retrying immediately", buf, 2u);
      }

      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v137 = sub_1000030EC;
      v138 = sub_10000C20C;
      v139 = (id)os_transaction_create("com.apple.networkserviceproxy.tokenRefreshPoolKeyChanged");
      v105 = NPGetInternalQueue(v139);
      v106 = objc_claimAutoreleasedReturnValue(v105);
      v129[0] = _NSConcreteStackBlock;
      v129[1] = 3221225472;
      v129[2] = sub_10000FAAC;
      v129[3] = &unk_1000F5428;
      v130 = (id)v15;
      v131 = buf;
      dispatch_async(v106, v129);

      _Block_object_dispose(buf, 8);
      goto LABEL_64;
    }

    v71 = *(id *)(v15 + 56);
    if (objc_msgSend(v71, "status") == (id)1)
    {
      v72 = sub_10000EB1C(v15);
      v70 = (void *)objc_claimAutoreleasedReturnValue(v72);
      if (v70)
      {
        v73 = sub_10000EB1C(v15);
        v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        v75 = *(void **)(a1 + 48);
        v76 = v74;
        v77 = v75;
        v78 = (void *)v77;
        if (v76 | v77 && (!v76 || !v77 || !objc_msgSend((id)v76, "isEqual:", v77)))
        {

          goto LABEL_48;
        }

      }
    }

    v82 = nplog_obj(v79, v80, v81);
    v83 = objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      v116 = *(id *)(v15 + 24);
      v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v116, "vendor"));
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v117;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = objc_msgSend(v13, "statusCode");
      *(_WORD *)&buf[22] = 2112;
      v137 = v122;
      _os_log_error_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "Token fetch failed for \"%@\" with %lu, error %@", buf, 0x20u);

    }
    ++*(_QWORD *)(v15 + 112);
    v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v85 = *(_QWORD **)(a1 + 32);
    if (v85)
      v85 = (_QWORD *)v85[3];
    v86 = v85;
    v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "vendor"));
    v88 = sub_10000D9B0(*(_QWORD *)(a1 + 32));

    +[NSPCoreData saveTokenEvent:eventType:vendor:tokenCount:](NSPCoreData, "saveTokenEvent:eventType:vendor:tokenCount:", v84, 3, v87, v88);
    if (objc_msgSend(v13, "statusCode") == (id)404 || a7)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v137 = sub_1000030EC;
      v138 = sub_10000C20C;
      v139 = (id)os_transaction_create("com.apple.networkserviceproxy.tokenInfoInvalid");
      v107 = NPGetInternalQueue(v139);
      v108 = objc_claimAutoreleasedReturnValue(v107);
      v126[0] = _NSConcreteStackBlock;
      v126[1] = 3221225472;
      v126[2] = sub_10000FB18;
      v126[3] = &unk_1000F5428;
      v127 = (id)v15;
      v128 = buf;
      dispatch_async(v108, v126);

      _Block_object_dispose(buf, 8);
    }
    else
    {
      v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectForKeyedSubscript:", CFSTR("X-Apple-Client-Action")));

      v91 = objc_msgSend(v90, "isEqualToString:", CFSTR("Switch-Proxy"));
      if ((_DWORD)v91)
      {
        v94 = nplog_obj(v91, v92, v93);
        v95 = objc_claimAutoreleasedReturnValue(v94);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          v96 = *(id *)(v15 + 24);
          v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "vendor"));
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v97;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "Received switch proxy from server for \"%@\"", buf, 0xCu);

        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v137 = sub_1000030EC;
        v138 = sub_10000C20C;
        v139 = (id)os_transaction_create("com.apple.networkserviceproxy.switchProxy");
        v98 = NPGetInternalQueue(v139);
        v99 = objc_claimAutoreleasedReturnValue(v98);
        v123[0] = _NSConcreteStackBlock;
        v123[1] = 3221225472;
        v123[2] = sub_10000FB74;
        v123[3] = &unk_1000F5428;
        v124 = (id)v15;
        v125 = buf;
        dispatch_async(v99, v123);

        _Block_object_dispose(buf, 8);
      }

    }
    v109 = (unint64_t)sub_10000ECF4(v13);
    *(_BYTE *)(v15 + 9) = v109 == 0;
    sub_10000BF0C(v15, v109, v110);
    ++*(_QWORD *)(v15 + 72);
    if (v122)
    {
      v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "domain"));
      if ((objc_msgSend(v111, "isEqualToString:", NSURLErrorDomain) & 1) != 0)
      {
        if (objc_msgSend(v122, "code") == (id)-1009)
        {

LABEL_62:
          --*(_QWORD *)(v15 + 72);
          goto LABEL_63;
        }
        v112 = objc_msgSend(v122, "code") == (id)-1005;

        if (v112)
          goto LABEL_62;
      }
      else
      {

      }
    }
LABEL_63:
    v113 = objc_loadWeakRetained((id *)(v15 + 16));
    objc_msgSend(v113, "updateUserEventAgentData");

LABEL_64:
    v46 = objc_loadWeakRetained((id *)(v15 + 16));
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v15 + 24), "proxyURL"));
    objc_msgSend(v46, "reportTokenFetchFailure:statusCode:", v49, objc_msgSend(v13, "statusCode"));
LABEL_65:

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_10000FA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10000FA4C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "tokenRateLimited:untilDate:", v4, *(double *)(a1 + 48));

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

uint64_t sub_10000FAAC(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10000FB04;
  v3[3] = &unk_1000F5748;
  v1 = *(_QWORD *)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return sub_10000C280(v1, v3);
}

void sub_10000FB04(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10000FB18(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "tokenInfoInvalid:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10000FB74(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "switchProxy:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10000FC88(uint64_t a1)
{
  _QWORD v1[4];

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10000FCE0;
  v1[3] = &unk_1000F5838;
  sub_10000C280(*(_QWORD *)(a1 + 32), v1);
}

void sub_10000FCE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const __CFString *v17;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
      v7 = (_QWORD *)v7[3];
    v8 = v7;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
    v10 = (void *)v9;
    v11 = CFSTR("failed");
    if (v3)
      v11 = CFSTR("succeeded");
    v14 = 138412546;
    v15 = v9;
    v16 = 2112;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "proactive Token fetch for vendor %@ %@", (uint8_t *)&v14, 0x16u);

  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = 0;

}

void sub_100010990(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 8), a2);
}

void sub_100011E1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  char v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD v23[4];
  id v24;
  char v25;
  uint8_t buf[4];
  id v27;

  v5 = a3;
  if (!objc_msgSend(a2, "result"))
  {
    v16 = nplog_obj(0, v6, v7);
    v13 = objc_claimAutoreleasedReturnValue(v16);
    v15 = 1;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    *(_WORD *)buf = 0;
    v17 = "Oblivious config validated by transparency, allowing";
    v18 = v13;
    v19 = 2;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v17, buf, v19);
    goto LABEL_12;
  }
  v8 = _os_feature_enabled_impl("NetworkServiceProxy", "TransparencyValidation");
  v9 = v8;
  v12 = nplog_obj(v8, v10, v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
  if ((v9 & 1) == 0)
  {
    if (!v14)
    {
      v15 = 1;
      goto LABEL_12;
    }
    *(_DWORD *)buf = 138412290;
    v27 = v5;
    v17 = "Oblivious config not validated by transparency (error %@), allowing since feature flag is not enabled";
    v15 = 1;
    v18 = v13;
    v19 = 12;
    goto LABEL_10;
  }
  if (v14)
  {
    *(_DWORD *)buf = 138412290;
    v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Oblivious config not validated by transparency (error %@), blocking", buf, 0xCu);
  }
  v15 = 0;
LABEL_12:

  v21 = NPGetInternalQueue(v20);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100011FEC;
  v23[3] = &unk_1000F5860;
  v24 = *(id *)(a1 + 32);
  v25 = v15;
  dispatch_async(v22, v23);

}

uint64_t sub_100011FEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10001243C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100012474(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  id result;

  v3 = *(void **)(a1 + 32);
  if (a2)
    v4 = 2;
  else
    v4 = 3;
  result = objc_msgSend(v3, "setTransparencyState:", v4);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    result = objc_msgSend(*(id *)(a1 + 32), "pathReady");
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(a1 + 32), "setupProxyAgentsForceUpdateDelegate:", 1);
  }
  return result;
}

void sub_10001528C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1000152C8(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  dispatch_time_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD block[5];

  v5 = a3;
  switch(a2)
  {
    case 1:
    case 4:
      v6 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      if (v6)
        nw_connection_cancel(v6);
      break;
    case 3:
      v7 = dispatch_time(0, 5000000000);
      v8 = NPGetInternalQueue(v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000153C4;
      block[3] = &unk_1000F58B0;
      block[4] = *(_QWORD *)(a1 + 32);
      dispatch_after(v7, v9, block);

      break;
    case 5:
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = 0;

      break;
    default:
      break;
  }

}

void sub_1000153C4(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v1)
    nw_connection_cancel(v1);
}

void sub_1000153DC(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;
  id v6;

  v6 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained)
    v5 = objc_msgSend(WeakRetained, "copyAddressesFromDoHAnswer:", v6);
  else
    v5 = 0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  nw_connection_cancel(*(nw_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

int64_t sub_10001550C(id a1, NSString *a2, NSString *a3)
{
  NSString *v4;
  unsigned int v5;
  unsigned int v6;

  v4 = a3;
  v5 = -[NSString containsString:](a2, "containsString:", CFSTR(":"));
  v6 = -[NSString containsString:](v4, "containsString:", CFSTR(":"));

  if (v5 == v6)
    v5 = arc4random_uniform(2u) == 0;
  if (v5)
    return -1;
  else
    return 1;
}

void sub_100015C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id location,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  id *v63;

  objc_destroyWeak(v63);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100015C78(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[2];

  v3 = a2;
  if (nw_protocol_options_is_http3())
  {
    v9[0] = 0;
    v9[1] = 0;
    nw_http3_set_resumable_session_agent(v3, v9);
    v4 = nw_http3_set_idle_timeout(v3, 0);
    v5 = NPGetInternalQueue(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100015D88;
    v7[3] = &unk_1000F5968;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    nw_http3_set_resumable_session_handler(v3, 20, v6, v7);

    objc_destroyWeak(&v8);
  }

}

void sub_100015D6C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100015D88(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "quicRegistration"));

    if (v6)
    {
      v10 = nplog_obj(v7, v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortName"));
        v14 = 138412290;
        v15 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "proxied content path [%@] received session ticket", (uint8_t *)&v14, 0xCu);

      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "quicRegistration"));
      sub_1000427B4((uint64_t)v13, v3);

    }
  }

}

void sub_100015E98(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "count"))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100015EF0(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (objc_msgSend(v4, "count"))
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100015F48(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  _BYTE v26[22];
  __int16 v27;
  void *v28;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = objc_msgSend(WeakRetained, "setFetchingSessionTickets:", 0);
    v9 = nplog_obj(v6, v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortName"));
      *(_DWORD *)v26 = 138412290;
      *(_QWORD *)&v26[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "proxied content path [%@] done fetching session tickets", v26, 0xCu);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "delegate"));
    v13 = objc_msgSend(v12, "disableDoHBootstrapResults");

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "arrayByAddingObjectsFromArray:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)));
    v17 = nplog_obj(v14, v15, v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortName"));
      v20 = "";
      *(_DWORD *)v26 = 138412802;
      *(_QWORD *)&v26[4] = v19;
      if (v13)
        v20 = " (ignoring)";
      *(_WORD *)&v26[12] = 2082;
      *(_QWORD *)&v26[14] = v20;
      v27 = 2112;
      v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "proxied content path [%@] received resolved addresses%{public}s: %@", v26, 0x20u);

    }
    if (v13)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resolvedAddresses"));

      if (!v21)
      {
LABEL_14:
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "delegate", v22, *(_QWORD *)v26, *(_QWORD *)&v26[8]));
        objc_msgSend(v25, "updateUserEventAgentData");

        goto LABEL_15;
      }
      v22 = 0;
    }
    else
    {
      if (!objc_msgSend(v14, "count"))
        goto LABEL_14;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resolvedAddresses"));
      v24 = objc_msgSend(v14, "isEqualToArray:", v23);

      v22 = v14;
      if ((v24 & 1) != 0)
        goto LABEL_14;
    }
    objc_msgSend(v5, "setResolvedAddresses:", v22, *(_OWORD *)v26);
    objc_msgSend(v5, "resetQUICProxyAgentForceUpdateDelegate:", 0);
    objc_msgSend(v5, "resetResolverAgentForceUpdateDelegate:", 0);
    goto LABEL_14;
  }
LABEL_15:

}

void sub_100017AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100017B24(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_6;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
  v6 = objc_msgSend(v5, "isEqual:", &off_1000FF1E8);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolverAgentUUID"));
    v9 = objc_msgSend(v7, "isEqual:", v8);

    if (v9)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v11 = v3;
      v5 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v11;
      goto LABEL_5;
    }
LABEL_6:
    v12 = 1;
    goto LABEL_7;
  }
LABEL_5:
  v12 = v6 ^ 1;

LABEL_7:
  return v12;
}

id sub_100017C14(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF1E8))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolverAgentUUID"));
      v8 = objc_msgSend(v6, "isEqual:", v7);

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id sub_100017ED4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF1E8))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolverAgentUUID"));
      v8 = objc_msgSend(v6, "isEqual:", v7);

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_10001DFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location,uint64_t a29,uint64_t a30,char a31)
{
  id *v31;

  objc_destroyWeak(v31);
  _Block_object_dispose(&a22, 8);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_10001DFF8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = NPGetInternalQueue(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10001E12C;
  v17[3] = &unk_1000F5A08;
  v23 = *(_QWORD *)(a1 + 48);
  objc_copyWeak(&v25, (id *)(a1 + 64));
  v18 = v9;
  v19 = v7;
  v20 = v8;
  v21 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 56);
  v22 = v12;
  v24 = v13;
  v14 = v8;
  v15 = v7;
  v16 = v9;
  dispatch_async(v11, v17);

  objc_destroyWeak(&v25);
}

void sub_10001E12C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t WeakRetained;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int v20;
  const __CFString *v21;
  __int16 v22;
  uint64_t v23;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 88));
  v7 = (void *)WeakRetained;
  if (WeakRetained)
  {
    if (!*(_QWORD *)(a1 + 32))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v17 = *(_QWORD *)(a1 + 48);
        v18 = objc_opt_class(NSHTTPURLResponse);
        WeakRetained = objc_opt_isKindOfClass(v17, v18);
        if ((WeakRetained & 1) != 0)
        {
          WeakRetained = (uint64_t)objc_msgSend(*(id *)(a1 + 48), "statusCode");
          if (WeakRetained == 200)
          {
            v19 = objc_msgSend(*(id *)(a1 + 40), "copy");
            objc_msgSend(v7, "setDomainFilter:", v19);

          }
        }
      }
    }
    v8 = nplog_obj(WeakRetained, v5, v6);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domainFilter"));
      v11 = CFSTR("successful");
      v12 = *(_QWORD *)(a1 + 56);
      if (!v10)
        v11 = CFSTR("failed");
      v20 = 138412546;
      v21 = v11;
      v22 = 2112;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received %@ response for %@", (uint8_t *)&v20, 0x16u);

    }
    v13 = *(_QWORD *)(a1 + 64);
    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "domainFilter"));
      (*(void (**)(uint64_t, BOOL))(v13 + 16))(v13, v14 != 0);

    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = 0;

}

void sub_10001EC38(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 32), a2);
}

void sub_10001EC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  _DWORD v10[2];

  v5 = *(_DWORD *)(a1 + 12);
  v6 = 30;
  if (v5 > 19)
  {
    if (v5 != 20)
    {
      if (v5 == 100)
        goto LABEL_12;
      if (v5 != 50)
        goto LABEL_9;
    }
LABEL_8:
    v6 = 60;
    goto LABEL_12;
  }
  if (v5 >= 0xFFFFFFFE)
    goto LABEL_12;
  if (v5 == 10)
    goto LABEL_8;
LABEL_9:
  v7 = nplog_obj(a1, a2, a3, a4);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v9 = *(_DWORD *)(a1 + 12);
    v10[0] = 67109120;
    v10[1] = v9;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "unknown link quality value %d", (uint8_t *)v10, 8u);
  }

  v6 = 30;
LABEL_12:
  *(_QWORD *)(a1 + 72) = v6;
}

id *sub_10001ED40(id *a1, void *a2, void *a3, int a4, void *a5, char a6)
{
  id v11;
  id v12;
  id v13;
  id *v14;
  objc_super v16;

  v11 = a2;
  v12 = a3;
  v13 = a5;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)NSPProber;
    v14 = (id *)objc_msgSendSuper2(&v16, "init");
    a1 = v14;
    if (v14)
    {
      objc_storeWeak(v14 + 2, v11);
      objc_storeStrong(a1 + 3, a3);
      *((_DWORD *)a1 + 3) = a4;
      *((_BYTE *)a1 + 11) = a6;
      objc_storeStrong(a1 + 11, a5);
    }
  }

  return a1;
}

void sub_10001EE08(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD block[5];

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration ephemeralSessionConfiguration](NSURLSessionConfiguration, "ephemeralSessionConfiguration"));
    v3 = v2;
    if (*(_BYTE *)(a1 + 11))
    {
      objc_msgSend(v2, "set_sourceApplicationSecondaryIdentifier:", CFSTR("com.apple.nsp.proxyAgentProbe"));
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_socketStreamProperties"));
      if (v4)
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_socketStreamProperties"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v5));

      }
      else
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      }

      objc_msgSend(v6, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, _kCFStreamPropertyPrefersNoProxy);
      objc_msgSend(v3, "set_socketStreamProperties:", v6);

    }
    v7 = objc_alloc_init((Class)NSOperationQueue);
    v8 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v7;

    v10 = NPGetInternalQueue(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_msgSend(*(id *)(a1 + 48), "setUnderlyingQueue:", v11);

    v12 = objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v3, 0, *(_QWORD *)(a1 + 48)));
    v13 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;

    objc_msgSend(*(id *)(a1 + 32), "setSessionDescription:", CFSTR("probe"));
    v14 = *(void **)(a1 + 80);
    if (v14)
    {
      v15 = objc_msgSend(v14, "timeIntervalSinceNow");
      if ((unint64_t)v17)
      {
        sub_10001EFD0(a1, (unint64_t)v17, v16);
      }
      else
      {
        v18 = NPGetInternalQueue(v15);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10001F2B0;
        block[3] = &unk_1000F5450;
        block[4] = a1;
        dispatch_async(v19, block);

      }
    }

  }
}

void sub_10001EFD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  NSObject *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  id inited;
  uint64_t v16;
  NSObject *v17;
  dispatch_source_t v18;
  void *v19;
  NSObject *v20;
  dispatch_time_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  id WeakRetained;
  uint64_t v27;
  _QWORD handler[4];
  id v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  unint64_t v33;

  v3 = a2;
  v5 = *(NSObject **)(a1 + 56);
  if (v5)
  {
    dispatch_source_cancel(v5);
    v6 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;

  }
  *(_BYTE *)(a1 + 9) = 1;
  if (!v3)
  {
    v7 = *(_QWORD *)(a1 + 64);
    if (v7 < 8)
    {
      v11 = dword_1000C01A0[v7];
      v5 = arc4random_uniform(6u);
      v10 = (_DWORD)v5 + v11;
    }
    else
    {
      v8 = nplog_obj(v5, a2, a3);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v27 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 138412546;
        v31 = v27;
        v32 = 1024;
        LODWORD(v33) = 8;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Probe[%@] failed %u attempts", buf, 0x12u);
      }

      v5 = arc4random_uniform(6u);
      v10 = (_DWORD)v5 + 1800;
    }
    v3 = v10;
    ++*(_QWORD *)(a1 + 64);
  }
  v12 = nplog_obj(v5, a2, a3);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412546;
    v31 = v14;
    v32 = 2048;
    v33 = v3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Retry Probe[%@] after %lu seconds", buf, 0x16u);
  }

  inited = objc_initWeak((id *)buf, (id)a1);
  v16 = NPGetInternalQueue(inited);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v17);
  v19 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v18;

  if (*(_QWORD *)(a1 + 56))
  {
    v20 = *(id *)(a1 + 56);
    v21 = dispatch_time(0x8000000000000000, 1000000000 * v3);
    dispatch_source_set_timer(v20, v21, 0xFFFFFFFFFFFFFFFFLL, 0);

    v22 = *(void **)(a1 + 56);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10001F99C;
    handler[3] = &unk_1000F57C0;
    v23 = v22;
    objc_copyWeak(&v29, (id *)buf);
    dispatch_source_set_event_handler(v23, handler);

    dispatch_resume(*(dispatch_object_t *)(a1 + 56));
    objc_destroyWeak(&v29);
  }
  v24 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)v3));
  v25 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v24;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
  objc_msgSend(WeakRetained, "setUserEventAgentProberParameters");

  objc_destroyWeak((id *)buf);
}

void sub_10001F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001F2B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];
  _QWORD v5[5];
  id v6;

  sub_10000D364(*(_QWORD *)(a1 + 32), 0);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    *(_BYTE *)(v2 + 9) = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3032000000;
  v5[3] = sub_1000030EC;
  v5[4] = sub_10000C20C;
  v6 = (id)os_transaction_create("com.apple.networkserviceproxy.setupProbeTimerFired");
  v3 = *(_QWORD *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001F38C;
  v4[3] = &unk_1000F58B0;
  v4[4] = v5;
  sub_10001F3A0(v3, v4);
  _Block_object_dispose(v5, 8);

}

void sub_10001F374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001F38C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10001F3A0(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  id inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *WeakRetained;
  void *v9;
  id v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  void *v39;
  _QWORD v40[5];
  void (**v41)(_QWORD);
  id v42;
  id location;
  uint8_t buf[4];
  id v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;

  v3 = a2;
  if (a1)
  {
    inited = objc_initWeak(&location, (id)a1);
    if (*(_BYTE *)(a1 + 10))
    {
      v7 = nplog_obj(inited, v5, v6);
      WeakRetained = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_ERROR))
      {
        v9 = *(void **)(a1 + 24);
        *(_DWORD *)buf = 138412290;
        v45 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_ERROR, "previous probe[%@] is already pending", buf, 0xCu);
      }
    }
    else
    {
      v10 = *(id *)(a1 + 88);
      v11 = objc_msgSend(v10, "status") == (id)1;

      if (v11)
      {
        *(_BYTE *)(a1 + 10) = 1;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("http://netcts.cdn-apple.com")));
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:cachePolicy:timeoutInterval:](NSMutableURLRequest, "requestWithURL:cachePolicy:timeoutInterval:", v15, 4, (double)*(unint64_t *)(a1 + 72)));
        v17 = *(id *)(a1 + 88);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "interface"));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "interfaceName"));
        objc_msgSend(v16, "setBoundInterfaceIdentifier:", v19);

        v23 = nplog_obj(v20, v21, v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v39 = v15;
          v25 = *(id *)(a1 + 24);
          v26 = *(_QWORD *)(a1 + 64);
          v27 = *(id *)(a1 + 88);
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "interface"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "interfaceName"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NPUtilities stringFromLinkQualityValue:](NPUtilities, "stringFromLinkQualityValue:", *(unsigned int *)(a1 + 12)));
          *(_DWORD *)buf = 138413058;
          v45 = v25;
          v46 = 2048;
          v47 = v26 + 1;
          v48 = 2112;
          v49 = v29;
          v50 = 2112;
          v51 = v30;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[%@] send probe[%lu] over %@ with link quality %@", buf, 0x2Au);

          v15 = v39;
        }

        v31 = *(id *)(a1 + 32);
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_10001FFF0;
        v40[3] = &unk_1000F5A58;
        objc_copyWeak(&v42, &location);
        v40[4] = a1;
        v41 = v3;
        v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "dataTaskWithRequest:completionHandler:", v16, v40));
        v33 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v32;

        v34 = *(id *)(a1 + 40);
        objc_msgSend(v34, "setDelegate:", a1);

        v35 = *(id *)(a1 + 40);
        objc_msgSend(v35, "resume");

        objc_destroyWeak(&v42);
        goto LABEL_13;
      }
      v36 = nplog_obj(v12, v13, v14);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(void **)(a1 + 24);
        *(_DWORD *)buf = 138412290;
        v45 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "deferring probe[%@], path is not satisfied", buf, 0xCu);
      }

      *(_BYTE *)(a1 + 9) = 1;
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
      -[NSObject setUserEventAgentProberParameters](WeakRetained, "setUserEventAgentProberParameters");
    }

    v3[2](v3);
LABEL_13:
    objc_destroyWeak(&location);
  }

}

void sub_10001F754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001F8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id WeakRetained;
  int v11;
  uint64_t v12;

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 24);
      v11 = 138412290;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reset probe[%@] timer", (uint8_t *)&v11, 0xCu);
    }

    v7 = *(NSObject **)(a1 + 56);
    if (v7)
    {
      dispatch_source_cancel(v7);
      v8 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;

    }
    *(_WORD *)(a1 + 9) = 0;
    v9 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    objc_msgSend(WeakRetained, "setUserEventAgentProberParameters");

  }
}

void sub_10001F99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  dispatch_source_t *WeakRetained;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[8];
  uint8_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Probe retry timer fired", buf, 2u);
  }

  WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 32));
  v7 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(WeakRetained[7]);
    v8 = *(void **)(v7 + 56);
    *(_QWORD *)(v7 + 56) = 0;

    *(_BYTE *)(v7 + 9) = 0;
    *(_QWORD *)buf = 0;
    v11 = buf;
    v12 = 0x3032000000;
    v13 = sub_1000030EC;
    v14 = sub_10000C20C;
    v15 = (id)os_transaction_create("com.apple.networkserviceproxy.agentProbeTimerFired");
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10001FAD0;
    v9[3] = &unk_1000F58B0;
    v9[4] = buf;
    sub_10001F3A0(v7, v9);
    _Block_object_dispose(buf, 8);

  }
}

void sub_10001FAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FAD0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_10001FAE4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  ++*(_QWORD *)(a1 + 104);
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3032000000;
  v5[3] = sub_1000030EC;
  v5[4] = sub_10000C20C;
  v6 = (id)os_transaction_create("com.apple.networkserviceproxy.probeFailedReport");
  v2 = NPGetInternalQueue(v6);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001FBC8;
  v4[3] = &unk_1000F5428;
  v4[4] = a1;
  v4[5] = v5;
  dispatch_async(v3, v4);

  _Block_object_dispose(v5, 8);
}

void sub_10001FBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FBC8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "probeFailed:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10001FC24(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  ++*(_QWORD *)(a1 + 96);
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3032000000;
  v5[3] = sub_1000030EC;
  v5[4] = sub_10000C20C;
  v6 = (id)os_transaction_create("com.apple.networkserviceproxy.probeSuccessReport");
  v2 = NPGetInternalQueue(v6);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001FD08;
  v4[3] = &unk_1000F5428;
  v4[4] = a1;
  v4[5] = v5;
  dispatch_async(v3, v4);

  _Block_object_dispose(v5, 8);
}

void sub_10001FCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FD08(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "probeSuccess:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10001FD64(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  ++*(_QWORD *)(a1 + 112);
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3032000000;
  v5[3] = sub_1000030EC;
  v5[4] = sub_10000C20C;
  v6 = (id)os_transaction_create("com.apple.networkserviceproxy.probeRedirected");
  v2 = NPGetInternalQueue(v6);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10001FE48;
  v4[3] = &unk_1000F5428;
  v4[4] = a1;
  v4[5] = v5;
  dispatch_async(v3, v4);

  _Block_object_dispose(v5, 8);
}

void sub_10001FE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FE48(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "probeRedirected:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10001FEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD block[7];
  _QWORD v7[5];
  id v8;

  ++*(_QWORD *)(a1 + 120);
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x3032000000;
  v7[3] = sub_1000030EC;
  v7[4] = sub_10000C20C;
  v8 = (id)os_transaction_create("com.apple.networkserviceproxy.probeServerError");
  v4 = NPGetInternalQueue(v8);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001FF90;
  block[3] = &unk_1000F57E8;
  block[5] = v7;
  block[6] = a2;
  block[4] = a1;
  dispatch_async(v5, block);

  _Block_object_dispose(v7, 8);
}

void sub_10001FF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FF90(_QWORD *a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a1[4];
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    v4 = a1[4];
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "probeServerError:httpStatusCode:", v4, a1[6]);

  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10001FFF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _BYTE *WeakRetained;
  uint64_t v11;
  uint64_t isKindOfClass;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  NSPProbeHTTPErrorCodeStats *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v11 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[10] = 0;
    isKindOfClass = sub_10001EFD0(WeakRetained, 0);
    if (v9)
    {
      v15 = nplog_obj(isKindOfClass, v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = *(_QWORD *)(a1 + 32);
        if (v17)
          v17 = *(_QWORD *)(v17 + 24);
        v35 = 138412546;
        v36 = v17;
        v37 = 2112;
        v38 = (uint64_t)v9;
        v18 = "Probe[%@] failed with error %@";
        v19 = v16;
        v20 = 22;
LABEL_27:
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v35, v20);
        goto LABEL_17;
      }
      goto LABEL_17;
    }
    if (!v7
      || (v21 = objc_opt_class(NSHTTPURLResponse),
          isKindOfClass = objc_opt_isKindOfClass(v8, v21),
          (isKindOfClass & 1) == 0))
    {
      v29 = nplog_obj(isKindOfClass, v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v34 = *(_QWORD *)(a1 + 32);
        if (v34)
          v34 = *(_QWORD *)(v34 + 24);
        v35 = 138412290;
        v36 = v34;
        v18 = "Probe[%@] failed to receive expected response";
        v19 = v16;
        v20 = 12;
        goto LABEL_27;
      }
LABEL_17:

LABEL_18:
      sub_10001FAE4(v11);
      goto LABEL_19;
    }
    v22 = (uint64_t)objc_msgSend(v8, "statusCode");
    v25 = nplog_obj(v22, v23, v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *(_QWORD *)(a1 + 32);
      if (v27)
        v27 = *(_QWORD *)(v27 + 24);
      v35 = 138412546;
      v36 = v27;
      v37 = 2048;
      v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Probe[%@] received response %ld", (uint8_t *)&v35, 0x16u);
    }

    if ((unint64_t)(v22 - 200) > 0x63)
    {
      if (v22 >= 400)
      {
        sub_10001FEA4(v11, v22);
        v30 = objc_alloc_init(NSPProbeHTTPErrorCodeStats);
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v11 + 88), "interface"));
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NPUtilities getInterfaceTypeString:](NPUtilities, "getInterfaceTypeString:", objc_msgSend(v31, "type")));
        -[NSPProbeHTTPErrorCodeStats setInterfaceType:](v30, "setInterfaceType:", v32);

        -[NSPProbeHTTPErrorCodeStats setDirectPath:](v30, "setDirectPath:", *(_BYTE *)(v11 + 11) == 0);
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v22));
        -[NSPProbeHTTPErrorCodeStats setHTTPErrorCode:](v30, "setHTTPErrorCode:", v33);

        -[NSPProxyAnalytics sendAnalytics](v30, "sendAnalytics");
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    v28 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v7, 134217984);
    if (objc_msgSend(v28, "isEqualToString:", CFSTR("<HTML><HEAD><TITLE>Success</TITLE></HEAD><BODY>Success</BODY></HTML>")))sub_10001FC24(v11);
    else
      sub_10001FD64(v11);

  }
LABEL_19:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10002032C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];
  _QWORD v6[5];
  id v7;

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      *(_BYTE *)(a1 + 8) = 1;
      sub_10001EC48(a1, a2, a3, a4);
      v6[0] = 0;
      v6[1] = v6;
      v6[2] = 0x3032000000;
      v6[3] = sub_1000030EC;
      v6[4] = sub_10000C20C;
      v7 = (id)os_transaction_create("com.apple.networkserviceproxy.sendProbe");
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_10002040C;
      v5[3] = &unk_1000F58B0;
      v5[4] = v6;
      sub_10001F3A0(a1, v5);
      _Block_object_dispose(v6, 8);

    }
  }
}

void sub_1000203F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002040C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100020420(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100020434(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  __int128 buf;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v11 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 88), a2);
    if (objc_msgSend(v11, "status") == (id)1)
    {
      if (*(_BYTE *)(a1 + 9))
      {
        v6 = nplog_obj(1, v4, v5);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(_QWORD *)(a1 + 24);
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Retry probing[%@] on network change", (uint8_t *)&buf, 0xCu);
        }

        sub_10001F8B0(a1, v9, v10);
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v14 = 0x3032000000;
        v15 = sub_1000030EC;
        v16 = sub_10000C20C;
        v17 = (id)os_transaction_create("com.apple.networkserviceproxy.probePathChange");
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_100020420;
        v12[3] = &unk_1000F58B0;
        v12[4] = &buf;
        sub_10001F3A0(a1, v12);
        _Block_object_dispose(&buf, 8);

      }
    }
  }

}

void sub_1000205A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000206D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  unsigned int v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  const char *v65;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_self(a1);
  if (!v5)
  {
    v56 = nplog_obj(v7, v8, v9);
    v46 = objc_claimAutoreleasedReturnValue(v56);
    if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    v64 = 136315138;
    v65 = "+[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]";
    v57 = "%s called with null proxy1";
LABEL_41:
    _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)v46, OS_LOG_TYPE_FAULT, v57, (uint8_t *)&v64, 0xCu);
    goto LABEL_20;
  }
  v10 = objc_msgSend(v5, "proxyHop");
  if (v10 != objc_msgSend(v6, "proxyHop"))
  {
LABEL_21:
    v54 = 0;
    goto LABEL_22;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "proxyURL"));

  if (!v11)
  {
    v58 = nplog_obj(v12, v13, v14);
    v46 = objc_claimAutoreleasedReturnValue(v58);
    if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    v64 = 136315138;
    v65 = "+[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]";
    v57 = "%s called with null proxy1.proxyURL";
    goto LABEL_41;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "proxyURL"));

  if (!v15)
  {
    v59 = nplog_obj(v16, v17, v18);
    v46 = objc_claimAutoreleasedReturnValue(v59);
    if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    v64 = 136315138;
    v65 = "+[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]";
    v57 = "%s called with null proxy2.proxyURL";
    goto LABEL_41;
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "proxyURL"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "proxyURL"));
  v21 = objc_msgSend(v19, "isEqualToString:", v20);

  if (!v21)
    goto LABEL_21;
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "proxyKeyInfos"));

  if (!v22)
  {
    v60 = nplog_obj(v23, v24, v25);
    v46 = objc_claimAutoreleasedReturnValue(v60);
    if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    v64 = 136315138;
    v65 = "+[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]";
    v57 = "%s called with null proxy1.proxyKeyInfos";
    goto LABEL_41;
  }
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "proxyKeyInfos"));

  if (!v26)
  {
    v61 = nplog_obj(v27, v28, v29);
    v46 = objc_claimAutoreleasedReturnValue(v61);
    if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    v64 = 136315138;
    v65 = "+[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]";
    v57 = "%s called with null proxy2.proxyKeyInfos";
    goto LABEL_41;
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "proxyKeyInfos"));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "proxyKeyInfos"));
  v32 = objc_msgSend(v30, "isEqualToArray:", v31);

  if (!v32)
    goto LABEL_21;
  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tokenKeyInfo"));

  if (!v33)
  {
    v62 = nplog_obj(v34, v35, v36);
    v46 = objc_claimAutoreleasedReturnValue(v62);
    if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    v64 = 136315138;
    v65 = "+[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]";
    v57 = "%s called with null proxy1.tokenKeyInfo";
    goto LABEL_41;
  }
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "tokenKeyInfo"));

  if (!v37)
  {
    v63 = nplog_obj(v38, v39, v40);
    v46 = objc_claimAutoreleasedReturnValue(v63);
    if (!os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    v64 = 136315138;
    v65 = "+[NSPPrivacyProxyAgentManager proxyMatch:proxy2:]";
    v57 = "%s called with null proxy2.tokenKeyInfo";
    goto LABEL_41;
  }
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tokenKeyInfo"));
  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "tokenKeyInfo"));
  v43 = objc_msgSend(v41, "isEqualToData:", v42);

  if (!v43)
    goto LABEL_21;
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tcpProxyFqdn"));
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "tcpProxyFqdn"));
  v46 = v44;
  v47 = v45;
  v48 = (void *)v47;
  if (v46 | v47 && (!v46 || !v47 || !objc_msgSend((id)v46, "isEqual:", v47)))
  {

LABEL_20:
    goto LABEL_21;
  }

  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "preferredPathConfigUri"));
  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "preferredPathConfigUri"));
  v51 = v49;
  v52 = v50;
  v53 = (void *)v52;
  if (!(v51 | v52))
    goto LABEL_17;
  v54 = 0;
  if (!v51 || !v52)
    goto LABEL_18;
  if (objc_msgSend((id)v51, "isEqual:", v52))
LABEL_17:
    v54 = 1;
  else
    v54 = 0;
LABEL_18:

LABEL_22:
  return v54;
}

void sub_100020F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v11 = 138412290;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Token challenge changed for \"%@\", flushing tokens", (uint8_t *)&v11, 0xCu);

  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 40);
    if (v10)
    {
      objc_msgSend(*(id *)(v10 + 24), "flushTokens");
      v9 = *(_QWORD *)(a1 + 40);
    }
  }
  sub_10000DA40(v9, v7, v8);
}

void sub_100020FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v9 = 138412290;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Token key changed for \"%@\"", (uint8_t *)&v9, 0xCu);

  }
  sub_10000EB68(*(_QWORD *)(a1 + 40), v7, v8);
}

void sub_10002304C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 88), a2);
}

void sub_10002305C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 96), a2);
}

void sub_10002306C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 104), a2);
}

void sub_10002307C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 112), a2);
}

void sub_10002308C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 120), a2);
}

void sub_10002309C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 128), a2);
}

void sub_1000230AC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 136), a2);
}

void sub_1000230BC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 144), a2);
}

void sub_1000230CC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 152), a2);
}

void sub_1000230DC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 336), a2);
}

void sub_1000230EC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 72), a2);
}

void sub_1000230FC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 160), a2);
}

void sub_10002310C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 208), a2);
}

void sub_10002311C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 216), a2);
}

void sub_10002312C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 224), a2);
}

void sub_10002313C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 232), a2);
}

void sub_10002314C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 288), a2);
}

void sub_10002315C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 352), a2);
}

void sub_10002316C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 368), a2);
}

void sub_10002317C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 376), a2);
}

void sub_10002318C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 384), a2);
}

void sub_10002319C(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 272), a2);
}

void sub_1000231AC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 392), a2);
}

void sub_1000231BC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 240), a2);
}

void sub_1000231CC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 256), a2);
}

void sub_1000231DC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 512), a2);
}

void sub_1000231EC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 400), a2);
}

void sub_1000231FC(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 408), a2);
}

void sub_100023568(uint64_t a1)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 360), 0);
}

id sub_10002357C(uint64_t a1)
{
  CFPropertyListRef v1;
  void *v2;
  uint64_t v3;
  uint64_t isKindOfClass;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  void *v12;

  objc_opt_self(a1);
  if (!os_variant_allows_internal_security_policies("com.apple.networkserviceproxy"))
    return 0;
  v1 = CFPreferencesCopyAppValue(CFSTR("NSPProxyPathRestoreIntervalSeconds"), kCFPreferencesCurrentApplication);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if (v2
    && (v3 = objc_opt_class(NSNumber),
        isKindOfClass = objc_opt_isKindOfClass(v2, v3),
        (isKindOfClass & 1) != 0))
  {
    v7 = nplog_obj(isKindOfClass, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543362;
      v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Detected proxy path restore interval in preferences file: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    v9 = objc_msgSend(v2, "unsignedIntegerValue");
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_100023690()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  uint64_t isKindOfClass;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  void *v12;

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPPreferredProxy"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1
    && (v2 = objc_opt_class(NSString),
        isKindOfClass = objc_opt_isKindOfClass(v1, v2),
        (isKindOfClass & 1) != 0))
  {
    v7 = nplog_obj(isKindOfClass, v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543362;
      v12 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Detected preferred proxy in preferences file: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    v9 = v1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_100023784()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  uint64_t isKindOfClass;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  void *v12;

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPPreferredObliviousProxy"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1
    && (v2 = objc_opt_class(NSString),
        isKindOfClass = objc_opt_isKindOfClass(v1, v2),
        (isKindOfClass & 1) != 0))
  {
    v7 = nplog_obj(isKindOfClass, v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543362;
      v12 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Detected preferred oblivious proxy in preferences file: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    v9 = v1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_100023878()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  uint64_t isKindOfClass;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  void *v12;

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPOverrideIngressProxy"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1
    && (v2 = objc_opt_class(NSString),
        isKindOfClass = objc_opt_isKindOfClass(v1, v2),
        (isKindOfClass & 1) != 0))
  {
    v7 = nplog_obj(isKindOfClass, v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543362;
      v12 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Detected override ingress proxy in preferences file: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    v9 = v1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_10002396C()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  uint64_t isKindOfClass;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  void *v12;

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPOverrideFallbackIngressProxy"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1
    && (v2 = objc_opt_class(NSString),
        isKindOfClass = objc_opt_isKindOfClass(v1, v2),
        (isKindOfClass & 1) != 0))
  {
    v7 = nplog_obj(isKindOfClass, v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543362;
      v12 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Detected override fallback ingress proxy in preferences file: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    v9 = v1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_100023A60()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  uint64_t isKindOfClass;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  void *v12;

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPOverrideIngressProxyKey"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1
    && (v2 = objc_opt_class(NSData),
        isKindOfClass = objc_opt_isKindOfClass(v1, v2),
        (isKindOfClass & 1) != 0))
  {
    v7 = nplog_obj(isKindOfClass, v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543362;
      v12 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Detected override ingress proxy key in preferences file: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    v9 = v1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_100023B54()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  uint64_t isKindOfClass;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  int v11;
  void *v12;

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPOverrideEnabledMaps"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1
    && (v2 = objc_opt_class(NSArray),
        isKindOfClass = objc_opt_isKindOfClass(v1, v2),
        (isKindOfClass & 1) != 0))
  {
    v7 = nplog_obj(isKindOfClass, v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543362;
      v12 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Detected overridden enabled proxied content maps in preferences file: %{public}@", (uint8_t *)&v11, 0xCu);
    }

    v9 = v1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_100023C48()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v9[2];

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPDisableProxiedContentDoHBootstrap"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1 && (v2 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
  {
    v3 = objc_msgSend(v1, "BOOLValue");
    v6 = nplog_obj(v3, v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67240192;
      v9[1] = (_DWORD)v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Detected DoH bootstrap disabled in preferences file: %{public}d", (uint8_t *)v9, 8u);
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id sub_100023D48()
{
  CFPropertyListRef v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _DWORD v9[2];

  v0 = CFPreferencesCopyAppValue(CFSTR("NSPForceFallback"), kCFPreferencesCurrentApplication);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  if (v1 && (v2 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v1, v2) & 1) != 0))
  {
    v3 = objc_msgSend(v1, "BOOLValue");
    v6 = nplog_obj(v3, v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67240192;
      v9[1] = (_DWORD)v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Detected force fallback in preferences file: %{public}d", (uint8_t *)v9, 8u);
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

NSObject *sub_100023FC0(uint64_t a1)
{
  CFPropertyListRef v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  id v21;
  uint64_t v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  int v26;

  objc_opt_self(a1);
  v1 = CFPreferencesCopyAppValue(CFSTR("NSPProxyAgentManagerPreferences"), kCFPreferencesCurrentApplication);
  if (v1)
  {
    v4 = v1;
    v5 = objc_opt_class(NSDictionary);
    v6 = objc_opt_class(NSString);
    v7 = objc_opt_class(NSNumber);
    v8 = objc_opt_class(NSArray);
    v9 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v6, v7, v8, objc_opt_class(NSData), 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v22 = 0;
    v11 = objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v10, v4, &v22));

    CFRelease(v4);
    v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v11, "objectForKeyedSubscript:", CFSTR("Version")));
    v13 = objc_msgSend(v12, "unsignedIntegerValue");
    if (v13 == (id)1)
    {
      v16 = v11;
    }
    else
    {
      v18 = nplog_obj(v13, v14, v15);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v21 = objc_msgSend(v12, "unsignedIntegerValue");
        *(_DWORD *)buf = 134218240;
        v24 = v21;
        v25 = 1024;
        v26 = 1;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "saved version %lu does not match current version %u", buf, 0x12u);
      }

      v16 = 0;
    }

  }
  else
  {
    v17 = nplog_obj(0, v2, v3);
    v11 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "no saved proxy agent data", buf, 2u);
    }
    v16 = 0;
  }

  return v16;
}

void sub_1000252FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void sub_10002531C(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  dispatch_source_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  dispatch_time_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  _QWORD handler[5];
  id v20;
  id location;

  if (a1)
  {
    v4 = *(NSObject **)(a1 + 360);
    if (v4)
    {
      dispatch_source_cancel(v4);
      v5 = *(void **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = 0;

    }
    if (a2)
    {
      v6 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)a2));
      v7 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v6;

      v9 = NPGetInternalQueue(v8);
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v10);
      v12 = *(void **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = v11;

      v13 = *(void **)(a1 + 360);
      if (v13)
      {
        v14 = v13;
        v15 = dispatch_time(0x8000000000000000, 1000000000 * a2);
        dispatch_source_set_timer(v14, v15, 0xFFFFFFFFFFFFFFFFLL, 0);

        objc_initWeak(&location, (id)a1);
        v16 = *(void **)(a1 + 360);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1000279D4;
        handler[3] = &unk_1000F5AA8;
        v17 = v16;
        objc_copyWeak(&v20, &location);
        handler[4] = a1;
        dispatch_source_set_event_handler(v17, handler);

        dispatch_resume(*(dispatch_object_t *)(a1 + 360));
        objc_destroyWeak(&v20);
        objc_destroyWeak(&location);
      }
    }
    else
    {
      v18 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

    }
  }
}

void sub_1000254A0(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 80));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "tokenIssuanceAllowed");

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_1000254F4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  unsigned __int8 v62;
  id v63;
  id v64;
  id v65;
  NSObject *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  NSObject *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  NSObject *v78;
  NSPProxyTokenInfo *v79;
  NSPProxyTokenInfo *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  NSPCandidateQuicProxyPath *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  id v94;
  void *v95;
  id v96;
  uint64_t v97;
  void *v98;
  void *v99;
  id v100;
  void *v101;
  int v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  id v111;
  NSObject *v112;
  id obj;
  id obja;
  uint64_t v115;
  void *v116;
  id v117;
  void *v118;
  id *location;
  id v120;
  _QWORD v121[4];
  id v122;
  _QWORD v123[4];
  id v124;
  _QWORD block[6];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE buf[24];
  uint64_t (*v131)(uint64_t, uint64_t);
  void (*v132)(uint64_t);
  id v133;

  v120 = a2;
  if (!a1 || (objc_msgSend((id)a1, "forceFallback") & 1) != 0)
    goto LABEL_63;
  v3 = *(id *)(a1 + 224);
  location = (id *)(a1 + 224);
  if (!v3)
  {
    v23 = *(id *)(a1 + 168);
    if (v23)
    {
      v24 = v23;
      v25 = *(id *)(a1 + 168);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("IngressProxyURL")));
      if (v26)
      {
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("EgressProxyURL")));

        if (v27)
        {
          v28 = *(id *)(a1 + 168);
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("IngressProxyURL")));
          v30 = *(id *)(a1 + 168);
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("EgressProxyURL")));
          v32 = sub_1000286BC((id *)a1, v29, v31);
          v33 = (id)objc_claimAutoreleasedReturnValue(v32);

          objc_msgSend(*(id *)(a1 + 168), "removeObjectForKey:", CFSTR("IngressProxyURL"));
          objc_msgSend(*(id *)(a1 + 168), "removeObjectForKey:", CFSTR("EgressProxyURL"));
          if (v33)
            goto LABEL_42;
        }
      }
      else
      {

      }
    }
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredProxy"));

    if (v120 && !v50)
    {
      v33 = v120;
      goto LABEL_42;
    }
    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredProxy"));

    if (v51)
    {
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      obj = *(id *)(a1 + 104);
      v117 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, buf, 16);
      if (v117)
      {
        v115 = *(_QWORD *)v127;
LABEL_30:
        v52 = 0;
        while (1)
        {
          if (*(_QWORD *)v127 != v115)
            objc_enumerationMutation(obj);
          v53 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * v52);
          v54 = *(id *)(a1 + 88);
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "objectAtIndex:", *(unsigned int *)objc_msgSend(v53, "proxies")));

          v56 = *(id *)(a1 + 88);
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "objectAtIndex:", *((unsigned int *)objc_msgSend(v53, "proxies")
                                                                                              + 1)));

          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "proxyURL"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredProxy"));
          if (objc_msgSend(v58, "isEqualToString:", v59))
            break;
          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "proxyURL"));
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredProxy"));
          v62 = objc_msgSend(v60, "isEqualToString:", v61);

          if ((v62 & 1) != 0)
            goto LABEL_39;

          if (v117 == (id)++v52)
          {
            v117 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v126, buf, 16);
            if (v117)
              goto LABEL_30;
            goto LABEL_37;
          }
        }

LABEL_39:
        v63 = v53;

        if (!v63)
          goto LABEL_41;
        v33 = v63;
        goto LABEL_42;
      }
LABEL_37:

    }
LABEL_41:
    v64 = sub_1000282B8(*(void **)(a1 + 112));
    v33 = (id)objc_claimAutoreleasedReturnValue(v64);
    if (!v33)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v131 = sub_1000030EC;
      v132 = sub_10000C20C;
      v133 = (id)os_transaction_create("com.apple.networkserviceproxy.refreshProxyInfo");
      v103 = NPGetInternalQueue(v133);
      v104 = objc_claimAutoreleasedReturnValue(v103);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100029CC4;
      block[3] = &unk_1000F5428;
      block[4] = a1;
      block[5] = buf;
      dispatch_async(v104, block);

      _Block_object_dispose(buf, 8);
      goto LABEL_63;
    }
LABEL_42:
    v65 = *(id *)(a1 + 88);
    v116 = v33;
    v66 = objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "objectAtIndexedSubscript:", *(unsigned int *)objc_msgSend(v33, "proxies")));

    v67 = *(id *)(a1 + 88);
    v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "objectAtIndexedSubscript:", *((unsigned int *)objc_msgSend(v116, "proxies") + 1)));

    if (v66)
    {
      if (v118)
      {
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxy"));
        if (v71)
        {

        }
        else
        {
          v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxyKey"));

          if (!v72)
          {
            v78 = v66;
            goto LABEL_52;
          }
        }
        v73 = -[NSObject copy](v66, "copy");

        v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxy"));
        if (v74)
        {
          v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxy"));
          -[NSObject setProxyURL:](v73, "setProxyURL:", v75);

        }
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxyKey"));

        if (v76)
        {
          -[NSObject clearProxyKeyInfos](v73, "clearProxyKeyInfos");
          v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxyKey"));
          -[NSObject addProxyKeyInfo:](v73, "addProxyKeyInfo:", v77);

        }
        v78 = v73;
LABEL_52:
        v112 = v78;
        v79 = sub_100028CFC(a1, v78);
        obja = (id)objc_claimAutoreleasedReturnValue(v79);
        v80 = sub_100028CFC(a1, v118);
        v81 = objc_claimAutoreleasedReturnValue(v80);
        v84 = (void *)v81;
        if (obja)
        {
          if (v81)
          {
            v85 = -[NSPCandidateProxyPath initWithIngressProxy:egressProxy:proxyPathWeight:preferredPathConfigURI:preferredPathPatterns:]([NSPCandidateQuicProxyPath alloc], "initWithIngressProxy:egressProxy:proxyPathWeight:preferredPathConfigURI:preferredPathPatterns:", obja, v81, objc_msgSend(v116, "weight"), 0, 0);
            objc_storeStrong(location, v85);

            v89 = nplog_obj(v86, v87, v88);
            v90 = objc_claimAutoreleasedReturnValue(v89);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              v111 = *location;
              v91 = objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "ingressProxy"));
              v92 = (void *)v91;
              if (v91)
                v93 = *(void **)(v91 + 24);
              else
                v93 = 0;
              v94 = v93;
              v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v94, "vendor"));
              v96 = *location;
              v97 = objc_claimAutoreleasedReturnValue(objc_msgSend(v96, "egressProxy"));
              v98 = (void *)v97;
              if (v97)
                v99 = *(void **)(v97 + 24);
              else
                v99 = 0;
              v100 = v99;
              v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v100, "vendor"));
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v95;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v101;
              _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "Setting candidate proxy path ([%@]-[%@])", buf, 0x16u);

            }
            v102 = 0;
            goto LABEL_61;
          }
          v110 = nplog_obj(0, v82, v83);
          v90 = objc_claimAutoreleasedReturnValue(v110);
          if (!os_log_type_enabled(v90, OS_LOG_TYPE_FAULT))
          {
LABEL_76:
            v102 = 1;
LABEL_61:

            v66 = v112;
LABEL_62:

            if (v102)
              goto LABEL_63;
            v3 = *location;
            goto LABEL_4;
          }
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyAgentManager setupCandidateQuicProxyPath:]";
          v109 = "%s called with null egressProxyTokenInfo";
        }
        else
        {
          v108 = nplog_obj(v81, v82, v83);
          v90 = objc_claimAutoreleasedReturnValue(v108);
          if (!os_log_type_enabled(v90, OS_LOG_TYPE_FAULT))
            goto LABEL_76;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyAgentManager setupCandidateQuicProxyPath:]";
          v109 = "%s called with null ingressProxyTokenInfo";
        }
        _os_log_fault_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_FAULT, v109, buf, 0xCu);
        goto LABEL_76;
      }
      v106 = nplog_obj(v68, v69, v70);
      v107 = objc_claimAutoreleasedReturnValue(v106);
      if (os_log_type_enabled(v107, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyAgentManager setupCandidateQuicProxyPath:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_FAULT, "%s called with null egressProxyInfo", buf, 0xCu);
      }

    }
    else
    {
      v105 = nplog_obj(v68, v69, v70);
      v66 = objc_claimAutoreleasedReturnValue(v105);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyAgentManager setupCandidateQuicProxyPath:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_FAULT, "%s called with null ingressProxyInfo", buf, 0xCu);
      }
    }
    v102 = 1;
    goto LABEL_62;
  }
LABEL_4:
  v4 = objc_msgSend(v3, "proxyPathReady");
  if ((_DWORD)v4)
  {
    v7 = nplog_obj(v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *location;
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ingressProxy"));
      v11 = (void *)v10;
      if (v10)
        v12 = *(void **)(v10 + 24);
      else
        v12 = 0;
      v13 = v12;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "vendor"));
      v15 = *location;
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "egressProxy"));
      v17 = (void *)v16;
      if (v16)
        v18 = *(void **)(v16 + 24);
      else
        v18 = 0;
      v19 = v18;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "vendor"));
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v20;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting quic proxy path ([%@]-[%@])", buf, 0x16u);

    }
    sub_10002988C(a1, v21, v22);
  }
  else
  {
    v34 = *location;
    v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "ingressProxy"));
    v36 = (void *)v35;
    if (v35)
      v37 = *(void **)(v35 + 24);
    else
      v37 = 0;
    v38 = v37;

    v39 = *location;
    v40 = objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "egressProxy"));
    v41 = (void *)v40;
    if (v40)
      v42 = *(void **)(v40 + 24);
    else
      v42 = 0;
    v43 = v42;

    v44 = *location;
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "ingressProxy"));
    v123[0] = _NSConcreteStackBlock;
    v123[1] = 3221225472;
    v123[2] = sub_100029D1C;
    v123[3] = &unk_1000F5720;

    v124 = v38;
    v46 = v38;
    sub_10000C280((uint64_t)v45, v123);

    v47 = *location;
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "egressProxy"));
    v121[0] = _NSConcreteStackBlock;
    v121[1] = 3221225472;
    v121[2] = sub_100029E00;
    v121[3] = &unk_1000F5720;

    v122 = v43;
    v49 = v43;
    sub_10000C280((uint64_t)v48, v121);

  }
  sub_1000291A4((id *)a1);
  objc_msgSend((id)a1, "updateUserEventAgentData");
  sub_100029EE4(a1);
LABEL_63:

}

void sub_10002601C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_10002603C(id *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id *v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  NSPProxyTokenInfo *v72;
  void *v73;
  NSPProxyTokenInfo *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  NSPCandidateFallbackProxyPath *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  id v93;
  uint64_t v94;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  int v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  id v108;
  void *v109;
  id v110;
  id v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  char *v116;
  void *v117;
  id v118;
  id v119;
  void *v120;
  void *v121;
  id v122;
  id v123;
  NSObject *v124;
  char *v125;
  void *v126;
  id v127;
  void *v128;
  void *v129;
  id v130;
  id v131;
  id v132;
  _QWORD v133[4];
  id v134;
  _QWORD v135[4];
  id v136;
  uint8_t buf[4];
  const char *v138;
  __int16 v139;
  void *v140;
  __int16 v141;
  void *v142;
  __int16 v143;
  void *v144;

  v3 = a2;
  if (!a1)
    goto LABEL_60;
  v5 = a1 + 29;
  v4 = a1[29];
  if (v4)
    goto LABEL_3;
  v27 = a1[21];
  if (v27)
  {
    v28 = v27;
    v29 = a1[21];
    v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("IngressFallbackProxyURL")));
    if (v30)
    {
      v31 = (void *)v30;
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[21], "objectForKeyedSubscript:", CFSTR("EgressFallbackProxyURL")));

      if (v32)
      {
        v33 = a1[21];
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("IngressFallbackProxyURL")));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[21], "objectForKeyedSubscript:", CFSTR("EgressFallbackProxyURL")));
        v36 = sub_100028978(a1, v34, v35);
        v37 = (id)objc_claimAutoreleasedReturnValue(v36);

        objc_msgSend(a1[21], "removeObjectForKey:", CFSTR("IngressFallbackProxyURL"));
        objc_msgSend(a1[21], "removeObjectForKey:", CFSTR("EgressFallbackProxyURL"));
        if (v37)
          goto LABEL_31;
      }
    }
    else
    {

    }
  }
  v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overridePreferredProxy"));

  if (v3 && !v54)
  {
    v37 = v3;
    goto LABEL_31;
  }
  v55 = sub_100028484(a1);
  v37 = (id)objc_claimAutoreleasedReturnValue(v55);
  if (v37)
  {
LABEL_31:
    v58 = a1[11];
    v59 = objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectAtIndexedSubscript:", *(unsigned int *)objc_msgSend(v37, "proxies")));

    v60 = a1[11];
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "objectAtIndexedSubscript:", *((unsigned int *)objc_msgSend(v37, "proxies") + 1)));

    if (v59)
    {
      if (v61)
      {
        v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overrideFallbackIngressProxy"));
        if (v65)
        {

        }
        else
        {
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overrideIngressProxyKey"));

          if (!v66)
            goto LABEL_41;
        }
        v67 = -[NSObject copy](v59, "copy");

        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overrideFallbackIngressProxy"));
        if (v68)
        {
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overrideFallbackIngressProxy"));
          -[NSObject setProxyURL:](v67, "setProxyURL:", v69);

        }
        v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overrideIngressProxyKey"));

        if (v70)
        {
          -[NSObject clearProxyKeyInfos](v67, "clearProxyKeyInfos");
          v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overrideIngressProxyKey"));
          -[NSObject addProxyKeyInfo:](v67, "addProxyKeyInfo:", v71);

        }
        v59 = v67;
LABEL_41:
        v72 = sub_100028CFC((uint64_t)a1, v59);
        v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
        v74 = sub_100028CFC((uint64_t)a1, v61);
        v75 = objc_claimAutoreleasedReturnValue(v74);
        v78 = (void *)v75;
        if (v73)
        {
          if (v75)
          {
            v79 = -[NSPCandidateProxyPath initWithIngressProxy:egressProxy:proxyPathWeight:preferredPathConfigURI:preferredPathPatterns:]([NSPCandidateFallbackProxyPath alloc], "initWithIngressProxy:egressProxy:proxyPathWeight:preferredPathConfigURI:preferredPathPatterns:", v73, v75, objc_msgSend(v37, "weight"), 0, 0);
            objc_storeStrong(a1 + 29, v79);

            v83 = nplog_obj(v80, v81, v82);
            v84 = objc_claimAutoreleasedReturnValue(v83);
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              v122 = *v5;
              v85 = objc_claimAutoreleasedReturnValue(objc_msgSend(v122, "ingressProxy"));
              v120 = (void *)v85;
              if (v85)
                v86 = *(void **)(v85 + 24);
              else
                v86 = 0;
              v118 = v86;
              v116 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "tcpProxyFqdn"));
              v114 = *v5;
              v87 = objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "ingressProxy"));
              v124 = v59;
              v112 = (void *)v87;
              if (v87)
                v88 = *(void **)(v87 + 24);
              else
                v88 = 0;
              v111 = v88;
              v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v111, "vendor"));
              v110 = *v5;
              v90 = objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "egressProxy"));
              v131 = v37;
              v132 = v3;
              v126 = v78;
              v109 = (void *)v90;
              if (v90)
                v91 = *(void **)(v90 + 24);
              else
                v91 = 0;
              v108 = v91;
              v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "tcpProxyFqdn"));
              v93 = *v5;
              v94 = objc_claimAutoreleasedReturnValue(objc_msgSend(v93, "egressProxy"));
              v95 = (void *)v94;
              v129 = v61;
              if (v94)
                v96 = *(void **)(v94 + 24);
              else
                v96 = 0;
              v97 = v96;
              v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "vendor"));
              *(_DWORD *)buf = 138413058;
              v138 = v116;
              v139 = 2112;
              v140 = v89;
              v141 = 2112;
              v142 = v92;
              v143 = 2112;
              v144 = v98;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Setting candidate fallback proxy path (%@[%@]-%@[%@])", buf, 0x2Au);

              v99 = 0;
              v37 = v131;
              v3 = v132;
              v61 = v129;
              v59 = v124;
              v78 = v126;
            }
            else
            {
              v99 = 0;
            }
            goto LABEL_54;
          }
          v107 = nplog_obj(0, v76, v77);
          v84 = objc_claimAutoreleasedReturnValue(v107);
          if (!os_log_type_enabled(v84, OS_LOG_TYPE_FAULT))
          {
LABEL_70:
            v99 = 1;
LABEL_54:

LABEL_55:
            if (v99)
              goto LABEL_60;
            v4 = *v5;
LABEL_3:
            v6 = objc_msgSend(v4, "proxyPathReady");
            if ((_DWORD)v6)
            {
              v9 = nplog_obj(v6, v7, v8);
              v10 = objc_claimAutoreleasedReturnValue(v9);
              if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              {
                v130 = *v5;
                v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "ingressProxy"));
                v128 = (void *)v11;
                if (v11)
                  v12 = *(void **)(v11 + 24);
                else
                  v12 = 0;
                v127 = v12;
                v125 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "tcpProxyFqdn"));
                v123 = *v5;
                v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "ingressProxy"));
                v121 = (void *)v13;
                if (v13)
                  v14 = *(void **)(v13 + 24);
                else
                  v14 = 0;
                v119 = v14;
                v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "vendor"));
                v115 = *v5;
                v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "egressProxy"));
                v16 = (void *)v15;
                if (v15)
                  v17 = *(void **)(v15 + 24);
                else
                  v17 = 0;
                v113 = v17;
                v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "tcpProxyFqdn"));
                v19 = *v5;
                v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "egressProxy"));
                v21 = (void *)v20;
                if (v20)
                  v22 = *(void **)(v20 + 24);
                else
                  v22 = 0;
                v23 = v22;
                v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "vendor"));
                *(_DWORD *)buf = 138413058;
                v138 = v125;
                v139 = 2112;
                v140 = v117;
                v141 = 2112;
                v142 = v18;
                v143 = 2112;
                v144 = v24;
                _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting fallback proxy path (%@[%@]-%@[%@])", buf, 0x2Au);

              }
              sub_10002AF70((uint64_t)a1, v25, v26);
            }
            else
            {
              v38 = *v5;
              v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "ingressProxy"));
              v40 = (void *)v39;
              if (v39)
                v41 = *(void **)(v39 + 24);
              else
                v41 = 0;
              v42 = v41;

              v43 = *v5;
              v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "egressProxy"));
              v45 = (void *)v44;
              if (v44)
                v46 = *(void **)(v44 + 24);
              else
                v46 = 0;
              v47 = v46;

              v48 = *v5;
              v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "ingressProxy"));
              v135[0] = _NSConcreteStackBlock;
              v135[1] = 3221225472;
              v135[2] = sub_10002B39C;
              v135[3] = &unk_1000F5720;

              v136 = v42;
              v50 = v42;
              sub_10000C280((uint64_t)v49, v135);

              v51 = *v5;
              v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "egressProxy"));
              v133[0] = _NSConcreteStackBlock;
              v133[1] = 3221225472;
              v133[2] = sub_10002B480;
              v133[3] = &unk_1000F5720;

              v134 = v47;
              v53 = v47;
              sub_10000C280((uint64_t)v52, v133);

            }
            sub_1000291A4(a1);
            objc_msgSend(a1, "updateUserEventAgentData");
            sub_100029EE4((uint64_t)a1);
            goto LABEL_60;
          }
          *(_DWORD *)buf = 136315138;
          v138 = "-[NSPPrivacyProxyAgentManager setupCandidateFallbackProxyPath:]";
          v106 = "%s called with null egressFallbackProxyTokenInfo";
        }
        else
        {
          v105 = nplog_obj(v75, v76, v77);
          v84 = objc_claimAutoreleasedReturnValue(v105);
          if (!os_log_type_enabled(v84, OS_LOG_TYPE_FAULT))
            goto LABEL_70;
          *(_DWORD *)buf = 136315138;
          v138 = "-[NSPPrivacyProxyAgentManager setupCandidateFallbackProxyPath:]";
          v106 = "%s called with null ingressFallbackProxyTokenInfo";
        }
        _os_log_fault_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_FAULT, v106, buf, 0xCu);
        goto LABEL_70;
      }
      v103 = nplog_obj(v62, v63, v64);
      v104 = objc_claimAutoreleasedReturnValue(v103);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v138 = "-[NSPPrivacyProxyAgentManager setupCandidateFallbackProxyPath:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_FAULT, "%s called with null egressFallbackProxyInfo", buf, 0xCu);
      }

    }
    else
    {
      v102 = nplog_obj(v62, v63, v64);
      v59 = objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v138 = "-[NSPPrivacyProxyAgentManager setupCandidateFallbackProxyPath:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "%s called with null ingressFallbackProxyInfo", buf, 0xCu);
      }
    }
    v99 = 1;
    goto LABEL_55;
  }
  v100 = nplog_obj(0, v56, v57);
  v101 = objc_claimAutoreleasedReturnValue(v100);
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "no available fallback proxy path", buf, 2u);
  }

LABEL_60:
}

void sub_100026F10(uint64_t a1)
{
  NSPProbeStats *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  v2 = objc_alloc_init(NSPProbeStats);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "tierString"));
  -[NSPProbeStats setTierType:](v2, "setTierType:", v3);

  -[NSPProbeStats setProbeReason:](v2, "setProbeReason:", *(_QWORD *)(a1 + 520));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 368), "interface"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NPUtilities getInterfaceTypeString:](NPUtilities, "getInterfaceTypeString:", objc_msgSend(v4, "type")));
  -[NSPProbeStats setProbeInterface:](v2, "setProbeInterface:", v5);

  v6 = *(_QWORD *)(a1 + 272);
  v7 = *(id *)(a1 + 280);
  objc_msgSend(v7, "timeIntervalSinceDate:", v6);
  -[NSPProbeStats setProbeDurationSec:](v2, "setProbeDurationSec:", (unint64_t)v8);

  v9 = *(_QWORD *)(a1 + 240);
  if (v9)
    v10 = *(_QWORD *)(v9 + 64);
  else
    v10 = 0;
  -[NSPProbeStats setProxyProbeCount:](v2, "setProxyProbeCount:", v10);
  v11 = *(_QWORD *)(a1 + 240);
  if (v11)
    v12 = *(_QWORD *)(v11 + 96);
  else
    v12 = 0;
  -[NSPProbeStats setProxyProbeSuccessCount:](v2, "setProxyProbeSuccessCount:", v12);
  v13 = *(_QWORD *)(a1 + 240);
  if (v13)
    v14 = *(_QWORD *)(v13 + 104);
  else
    v14 = 0;
  -[NSPProbeStats setProxyProbeFailedCount:](v2, "setProxyProbeFailedCount:", v14);
  v15 = *(_QWORD *)(a1 + 240);
  if (v15)
    v16 = *(_QWORD *)(v15 + 112);
  else
    v16 = 0;
  -[NSPProbeStats setProxyProbeRedirectedCount:](v2, "setProxyProbeRedirectedCount:", v16);
  v17 = *(_QWORD *)(a1 + 240);
  if (v17)
    v18 = *(_QWORD *)(v17 + 120);
  else
    v18 = 0;
  -[NSPProbeStats setProxyProbeServerErrorCount:](v2, "setProxyProbeServerErrorCount:", v18);
  v19 = *(_QWORD *)(a1 + 248);
  if (v19)
    v20 = *(_QWORD *)(v19 + 64);
  else
    v20 = 0;
  -[NSPProbeStats setDirectProbeCount:](v2, "setDirectProbeCount:", v20);
  v21 = *(_QWORD *)(a1 + 248);
  if (v21)
    v22 = *(_QWORD *)(v21 + 96);
  else
    v22 = 0;
  -[NSPProbeStats setDirectProbeSuccessCount:](v2, "setDirectProbeSuccessCount:", v22);
  v23 = *(_QWORD *)(a1 + 248);
  if (v23)
    v24 = *(_QWORD *)(v23 + 104);
  else
    v24 = 0;
  -[NSPProbeStats setDirectProbeFailedCount:](v2, "setDirectProbeFailedCount:", v24);
  v25 = *(_QWORD *)(a1 + 248);
  if (v25)
    v26 = *(_QWORD *)(v25 + 112);
  else
    v26 = 0;
  -[NSPProbeStats setDirectProbeRedirectedCount:](v2, "setDirectProbeRedirectedCount:", v26);
  v27 = *(_QWORD *)(a1 + 248);
  if (v27)
    v28 = *(_QWORD *)(v27 + 120);
  else
    v28 = 0;
  -[NSPProbeStats setDirectProbeServerErrorCount:](v2, "setDirectProbeServerErrorCount:", v28);
  -[NSPProxyAnalytics sendAnalytics](v2, "sendAnalytics");

  v29 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;

  v30 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;

  v31 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;

  v32 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;

  *(_QWORD *)(a1 + 520) = 0;
}

void sub_100027130(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 536), a2);
}

void sub_100027140(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v3 = a2;
  if (a1)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v4 = *(id *)(a1 + 344);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v9, "resetError", (_QWORD)v11);
          if (v3)
            objc_msgSend(v9, "handleNetworkCharacteristicsChange:", v3);
          else
            objc_msgSend(v9, "resetStats");
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }

    v10 = *(void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;

    sub_10002C510(a1);
  }

}

void sub_1000279D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id *WeakRetained;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD v18[6];
  uint8_t buf[8];
  uint8_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Token issuance limit timer fired", buf, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
      v8 = *(NSObject **)(v7 + 360);
    else
      v8 = 0;
    dispatch_source_cancel(v8);
    sub_100023568(*(_QWORD *)(a1 + 32));
    sub_10001EC38(*(_QWORD *)(a1 + 32), 0);
    *(_QWORD *)buf = 0;
    v20 = buf;
    v21 = 0x3032000000;
    v22 = sub_1000030EC;
    v23 = sub_10000C20C;
    v24 = (id)os_transaction_create("com.apple.networkserviceproxy.tokenIssuanceTimerFired");
    v9 = WeakRetained[11];
    v10 = WeakRetained[12];
    v11 = WeakRetained[13];
    v12 = WeakRetained[15];
    v13 = WeakRetained[17];
    v14 = WeakRetained[19];
    objc_msgSend(WeakRetained, "updateProxyInfo:resolverInfo:proxyPathList:fallbackProxyPathList:obliviousConfigs:proxiedContentMaps:", v9, v10, v11, v12, v13, v14);

    v16 = NPGetInternalQueue(v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100027BC8;
    v18[3] = &unk_1000F5428;
    v18[4] = *(_QWORD *)(a1 + 32);
    v18[5] = buf;
    dispatch_async(v17, v18);

    _Block_object_dispose(buf, 8);
  }

}

void sub_100027BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100027BC8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 80));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "tokenIssuanceAllowed");

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

uint64_t sub_100027C1C(id *a1, void *a2, void *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  id v28;
  uint64_t v29;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  const char *v38;

  v5 = a2;
  v6 = a3;
  if (v5)
    v7 = (void *)v5[3];
  else
    v7 = 0;
  v8 = objc_msgSend(v7, "proxyHop");
  if ((_DWORD)v8 != 2)
  {
    v29 = nplog_obj(v8, v9, v10);
    v16 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v38 = "-[NSPPrivacyProxyAgentManager alternateEgressProxyExists:proxyPathEnumerator:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "%s called with null (proxyTokenInfo.proxyInfo.proxyHop == NSPPrivacyProxyProxyInfo_ProxyHop_EGRESS_ONLY)", buf, 0xCu);
    }
    goto LABEL_26;
  }
  if (v5)
    v11 = (void *)v5[3];
  else
    v11 = 0;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "proxyURL"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overridePreferredProxy"));
  v14 = objc_msgSend(v12, "isEqualToString:", v13);

  if ((v14 & 1) == 0)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v16 = v6;
    v17 = -[NSObject countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v17)
    {
      v18 = v17;
      v31 = v6;
      v19 = *(_QWORD *)v33;
LABEL_10:
      v20 = 0;
      while (1)
      {
        if (*(_QWORD *)v33 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v20);
        if (objc_msgSend(v21, "weight"))
        {
          v22 = a1[11];
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectAtIndex:", *((unsigned int *)objc_msgSend(v21, "proxies")
                                                                                              + 1)));

          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "proxyURL"));
          v25 = v5 ? (void *)v5[3] : 0;
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "proxyURL"));
          v27 = objc_msgSend(v24, "isEqualToString:", v26);

          if (!v27)
            break;
        }
        if (v18 == (id)++v20)
        {
          v28 = -[NSObject countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
          v18 = v28;
          if (!v28)
          {
            v15 = 0;
            goto LABEL_23;
          }
          goto LABEL_10;
        }
      }
      v15 = 1;
LABEL_23:
      v6 = v31;
      goto LABEL_27;
    }
LABEL_26:
    v15 = 0;
LABEL_27:

    goto LABEL_28;
  }
  v15 = 0;
LABEL_28:

  return v15;
}

void sub_100027E98(id *a1, void *a2)
{
  id *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  _BYTE v28[128];

  v3 = a2;
  if (a1 && sub_100027C1C(a1, v3, a1[14]))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    obj = a1[14];
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v23;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v9 = a1[11];
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndex:", *((unsigned int *)objc_msgSend(v8, "proxies")
                                                                                             + 1)));

          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "proxyURL"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[3], "proxyURL"));
          v13 = objc_msgSend(v11, "isEqualToString:", v12);

          if (v13)
          {
            v17 = nplog_obj(v14, v15, v16);
            v18 = objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v19 = v3[3];
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "vendor"));
              *(_DWORD *)buf = 138412290;
              v27 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "remove \"%@\" from proxy path enumerator", buf, 0xCu);

            }
            objc_msgSend(a1[14], "removeObject:", v8);

            goto LABEL_15;
          }

        }
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_15:

  }
}

void sub_1000280A8(id *a1, void *a2)
{
  id *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  _BYTE v28[128];

  v3 = a2;
  if (a1 && sub_100027C1C(a1, v3, a1[16]))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    obj = a1[16];
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v23;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v6)
            objc_enumerationMutation(obj);
          v8 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v9 = a1[11];
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndex:", *((unsigned int *)objc_msgSend(v8, "proxies")
                                                                                             + 1)));

          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "proxyURL"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[3], "proxyURL"));
          v13 = objc_msgSend(v11, "isEqualToString:", v12);

          if (v13)
          {
            v17 = nplog_obj(v14, v15, v16);
            v18 = objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v19 = v3[3];
              v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "vendor"));
              *(_DWORD *)buf = 138412290;
              v27 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "remove \"%@\" from proxy path enumerator", buf, 0xCu);

            }
            objc_msgSend(a1[16], "removeObject:", v8);

            goto LABEL_15;
          }

        }
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_15:

  }
}

id sub_1000282B8(void *a1)
{
  id v1;
  id v2;
  id v3;
  int v4;
  uint64_t v5;
  void *i;
  uint32_t v7;
  uint32_t v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *j;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];

  v1 = a1;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (!v2)
    goto LABEL_19;
  v3 = v2;
  v4 = 0;
  v5 = *(_QWORD *)v22;
  do
  {
    for (i = 0; i != v3; i = (char *)i + 1)
    {
      if (*(_QWORD *)v22 != v5)
        objc_enumerationMutation(v1);
      v4 += objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i), "weight");
    }
    v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  }
  while (v3);
  if (v4)
  {
    do
      v7 = arc4random_uniform(v4 + 1);
    while (!v7);
    v8 = v7;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v9 = v1;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    if (v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)v18;
      v13 = v8;
      while (2)
      {
        for (j = 0; j != v10; j = (char *)j + 1)
        {
          if (*(_QWORD *)v18 != v12)
            objc_enumerationMutation(v9);
          v15 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)j);
          v11 += objc_msgSend(v15, "weight", (_QWORD)v17);
          if (v11 >= v13)
          {
            v10 = v15;
            goto LABEL_21;
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v10)
          continue;
        break;
      }
    }
LABEL_21:

  }
  else
  {
LABEL_19:
    v10 = 0;
  }

  return v10;
}

id sub_100028484(id *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  id v15;
  id obj;
  uint64_t v18;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overridePreferredProxy"));

  if (v2)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    obj = a1[15];
    v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v19)
    {
      v18 = *(_QWORD *)v21;
LABEL_5:
      v3 = 0;
      while (1)
      {
        if (*(_QWORD *)v21 != v18)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v3);
        v5 = a1[11];
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndex:", *(unsigned int *)objc_msgSend(v4, "proxies")));

        v7 = a1[11];
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndex:", *((unsigned int *)objc_msgSend(v4, "proxies")
                                                                                          + 1)));

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "proxyURL"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overridePreferredProxy"));
        if (objc_msgSend(v9, "isEqualToString:", v10))
          break;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "proxyURL"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "overridePreferredProxy"));
        v13 = objc_msgSend(v11, "isEqualToString:", v12);

        if ((v13 & 1) != 0)
          goto LABEL_14;

        if (v19 == (id)++v3)
        {
          v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
          if (v19)
            goto LABEL_5;
          goto LABEL_12;
        }
      }

LABEL_14:
      v14 = v4;

      if (v14)
        return v14;
    }
    else
    {
LABEL_12:

    }
  }
  v15 = sub_1000282B8(a1[16]);
  v14 = (id)objc_claimAutoreleasedReturnValue(v15);
  return v14;
}

id *sub_1000286BC(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id *v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  unsigned int v24;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  NSObject *obj;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  const char *v38;

  v5 = a2;
  v6 = a3;
  v29 = v6;
  if (!a1)
    goto LABEL_17;
  if (!v5)
  {
    v26 = nplog_obj(v6, v7, v8);
    obj = objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(obj, OS_LOG_TYPE_FAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 136315138;
    v38 = "-[NSPPrivacyProxyAgentManager proxyPathWithIngressProxyURL:egressProxyURL:]";
    v27 = "%s called with null ingressProxyURL";
    goto LABEL_22;
  }
  if (v6)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    obj = a1[13];
    v9 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v33 != v11)
            objc_enumerationMutation(obj);
          v13 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
          v14 = a1[11];
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndex:", *(unsigned int *)objc_msgSend(v13, "proxies")));

          v16 = a1[11];
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndex:", *((unsigned int *)objc_msgSend(v13, "proxies")
                                                                                              + 1)));

          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "proxyURL"));
          if ((objc_msgSend(v18, "isEqualToString:", v5) & 1) != 0)
          {
            v31 = v15;
            v19 = a1;
            v20 = v10;
            v21 = v11;
            v22 = v5;
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "proxyURL"));
            v24 = objc_msgSend(v23, "isEqualToString:", v29);

            v5 = v22;
            v11 = v21;
            v10 = v20;
            a1 = v19;
            v15 = v31;

            if (v24)
            {
              a1 = v13;

              goto LABEL_16;
            }
          }
          else
          {

          }
        }
        v10 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v10);
    }
    goto LABEL_15;
  }
  v28 = nplog_obj(0, v7, v8);
  obj = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(obj, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    v38 = "-[NSPPrivacyProxyAgentManager proxyPathWithIngressProxyURL:egressProxyURL:]";
    v27 = "%s called with null egressProxyURL";
LABEL_22:
    _os_log_fault_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_FAULT, v27, buf, 0xCu);
  }
LABEL_15:
  a1 = 0;
LABEL_16:

LABEL_17:
  return a1;
}

id *sub_100028978(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id *v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  unsigned int v24;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  NSObject *obj;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t v36[128];
  uint8_t buf[4];
  const char *v38;

  v5 = a2;
  v6 = a3;
  v29 = v6;
  if (!a1)
    goto LABEL_17;
  if (!v5)
  {
    v26 = nplog_obj(v6, v7, v8);
    obj = objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(obj, OS_LOG_TYPE_FAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 136315138;
    v38 = "-[NSPPrivacyProxyAgentManager fallbackProxyPathWithIngressProxyURL:egressProxyURL:]";
    v27 = "%s called with null ingressProxyURL";
    goto LABEL_22;
  }
  if (v6)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    obj = a1[15];
    v9 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v33 != v11)
            objc_enumerationMutation(obj);
          v13 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
          v14 = a1[11];
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndex:", *(unsigned int *)objc_msgSend(v13, "proxies")));

          v16 = a1[11];
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndex:", *((unsigned int *)objc_msgSend(v13, "proxies")
                                                                                              + 1)));

          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "proxyURL"));
          if ((objc_msgSend(v18, "isEqualToString:", v5) & 1) != 0)
          {
            v31 = v15;
            v19 = a1;
            v20 = v10;
            v21 = v11;
            v22 = v5;
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "proxyURL"));
            v24 = objc_msgSend(v23, "isEqualToString:", v29);

            v5 = v22;
            v11 = v21;
            v10 = v20;
            a1 = v19;
            v15 = v31;

            if (v24)
            {
              a1 = v13;

              goto LABEL_16;
            }
          }
          else
          {

          }
        }
        v10 = -[NSObject countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v10);
    }
    goto LABEL_15;
  }
  v28 = nplog_obj(0, v7, v8);
  obj = objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(obj, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    v38 = "-[NSPPrivacyProxyAgentManager fallbackProxyPathWithIngressProxyURL:egressProxyURL:]";
    v27 = "%s called with null egressProxyURL";
LABEL_22:
    _os_log_fault_impl((void *)&_mh_execute_header, obj, OS_LOG_TYPE_FAULT, v27, buf, 0xCu);
  }
LABEL_15:
  a1 = 0;
LABEL_16:

LABEL_17:
  return a1;
}

void sub_100028C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id *WeakRetained;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint8_t v14[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Proxy path restore timer fired", v14, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v7 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    v8 = WeakRetained[13];
    v9 = objc_msgSend(v8, "mutableCopy");
    v10 = *(void **)(v7 + 112);
    *(_QWORD *)(v7 + 112) = v9;

    v11 = *(id *)(v7 + 120);
    v12 = objc_msgSend(v11, "mutableCopy");
    v13 = *(void **)(v7 + 128);
    *(_QWORD *)(v7 + 128) = v12;

    sub_100027140(v7, 0);
  }

}

NSPProxyTokenInfo *sub_100028CFC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *p_super;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  NSPProxyTokenInfo *v18;
  void *v19;
  char v20;
  char v21;
  id v22;
  id v23;
  id v24;
  NSPProxyTokenInfo *v25;
  id v26;
  uint64_t v27;
  NSData *networkSignature;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSPProxyTokenInfo *v32;
  NSPProxyTokenInfo *v33;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  id obj;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t v43[128];
  uint8_t buf[4];
  const char *v45;

  v6 = a2;
  if (!v6)
  {
    v35 = nplog_obj(0, v4, v5);
    p_super = objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(p_super, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v45 = "-[NSPPrivacyProxyAgentManager getProxyTokenInfoForProxyInfo:]";
      _os_log_fault_impl((void *)&_mh_execute_header, p_super, OS_LOG_TYPE_FAULT, "%s called with null proxyInfo", buf, 0xCu);
    }
    goto LABEL_27;
  }
  obj = a2;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  p_super = *(id *)(a1 + 352);
  v8 = -[NSObject countByEnumeratingWithState:objects:count:](p_super, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v40;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v40 != v10)
          objc_enumerationMutation(p_super);
        v12 = *(_QWORD **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v11);
        if (v12)
          v13 = (void *)v12[3];
        else
          v13 = 0;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "proxyURL"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "proxyURL"));
        v16 = objc_msgSend(v14, "isEqualToString:", v15);

        if ((v16 & 1) != 0)
        {
          v32 = v12;
          goto LABEL_20;
        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v17 = -[NSObject countByEnumeratingWithState:objects:count:](p_super, "countByEnumeratingWithState:objects:count:", &v39, v43, 16);
      v9 = v17;
    }
    while (v17);
  }

  v18 = [NSPProxyTokenInfo alloc];
  v19 = *(void **)(a1 + 368);
  v20 = *(_BYTE *)(a1 + 13);
  v21 = *(_BYTE *)(a1 + 12);
  v22 = (id)a1;
  v23 = v6;
  v24 = v19;
  if (v18)
  {
    v25 = -[NSPProxyTokenInfo init](v18, "init");
    v18 = v25;
    if (v25)
    {
      objc_storeWeak((id *)&v25->_delegate, v22);
      objc_storeStrong((id *)&v18->_proxyInfo, obj);
      objc_storeStrong((id *)&v18->_tokenPath, v19);
      v18->_subscriber = v20;
      v18->_useDefaultInterface = v21;
      v26 = +[NPUtilities copyCurrentNetworkCharacteristicsForPath:](NPUtilities, "copyCurrentNetworkCharacteristicsForPath:", v18->_tokenPath);
      v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("Signature")));
      networkSignature = v18->_networkSignature;
      v18->_networkSignature = (NSData *)v27;

    }
  }

  if (!v18)
  {
    v36 = nplog_obj(v29, v30, v31);
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v45 = "-[NSPPrivacyProxyAgentManager getProxyTokenInfoForProxyInfo:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "%s called with null proxyTokenInfo", buf, 0xCu);
    }

    p_super = 0;
LABEL_27:
    v33 = 0;
    goto LABEL_21;
  }
  objc_msgSend(*(id *)(a1 + 352), "addObject:", v18);
  sub_10000BDEC((uint64_t)v18);
  v32 = v18;
  p_super = &v32->super;
LABEL_20:
  v33 = v32;
LABEL_21:

  return v33;
}

_QWORD *sub_100029008(uint64_t a1, int a2)
{
  id v2;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  _QWORD *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (!a1)
    return 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = *(id *)(a1 + 352);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v19;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v8);
        if (v9)
          v10 = (void *)v9[3];
        else
          v10 = 0;
        v11 = v10;
        if (objc_msgSend(v11, "proxyHop", (_QWORD)v18) != 2)
          goto LABEL_19;
        if (a2)
        {
          v12 = v9 ? (void *)v9[3] : 0;
          v2 = v12;
          if ((objc_msgSend(v2, "supportsFallback") & 1) == 0)
          {

LABEL_19:
            goto LABEL_20;
          }
        }
        v13 = sub_10000D9B0((uint64_t)v9);
        v14 = sub_10000E610((uint64_t)v9);
        if (a2)

        if (v13 >= v14)
        {
          v16 = v9;
          goto LABEL_26;
        }
LABEL_20:
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v15 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v6 = v15;
    }
    while (v15);
  }
  v16 = 0;
LABEL_26:

  return v16;
}

void sub_1000291A4(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  unsigned __int8 v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned __int8 v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned __int8 v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unsigned __int8 v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  _BYTE v90[128];
  _BYTE v91[128];
  _BYTE v92[128];
  _BYTE v93[128];
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];

  if (a1)
  {
    v54 = objc_alloc_init((Class)NSMutableArray);
    v85 = 0u;
    v86 = 0u;
    v87 = 0u;
    v88 = 0u;
    v2 = a1[44];
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v85, v96, 16);
    if (!v3)
      goto LABEL_90;
    v4 = v3;
    v5 = *(_QWORD *)v86;
    v55 = *(_QWORD *)v86;
    v56 = v2;
    while (1)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v86 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v85 + 1) + 8 * (_QWORD)v6);
        if (v7)
          v8 = *(void **)(v7 + 24);
        else
          v8 = 0;
        if (objc_msgSend(v8, "proxyHop") == 1)
        {
          v9 = a1[26];
          if (objc_msgSend(v9, "matchIngress:", v7))
            goto LABEL_55;
          v10 = a1[27];
          if (objc_msgSend(v10, "matchIngress:", v7))
            goto LABEL_54;
          v11 = a1[28];
          if (objc_msgSend(v11, "matchIngress:", v7))
            goto LABEL_53;
          v12 = objc_msgSend(a1[29], "matchIngress:", v7);

          if ((v12 & 1) != 0)
            goto LABEL_56;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v13 = a1[38];
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v81, v95, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v82;
LABEL_16:
            v17 = 0;
            while (1)
            {
              if (*(_QWORD *)v82 != v16)
                objc_enumerationMutation(v13);
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[38], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v81 + 1) + 8 * v17)));
              v19 = objc_msgSend(v18, "matchIngress:", v7);

              if ((v19 & 1) != 0)
                goto LABEL_84;
              if (v15 == (id)++v17)
              {
                v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v81, v95, 16);
                if (v15)
                  goto LABEL_16;
                break;
              }
            }
          }

          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v13 = a1[39];
          v20 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v77, v94, 16);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)v78;
LABEL_24:
            v23 = 0;
            while (1)
            {
              if (*(_QWORD *)v78 != v22)
                objc_enumerationMutation(v13);
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[39], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v23)));
              v25 = objc_msgSend(v24, "matchIngress:", v7);

              if ((v25 & 1) != 0)
                goto LABEL_84;
              if (v21 == (id)++v23)
              {
                v21 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v77, v94, 16);
                if (v21)
                  goto LABEL_24;
                break;
              }
            }
          }

          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v26 = a1[40];
          v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v73, v93, 16);
          v5 = v55;
          if (v27)
          {
            v28 = v27;
            v29 = *(_QWORD *)v74;
LABEL_32:
            v30 = 0;
            while (1)
            {
              if (*(_QWORD *)v74 != v29)
                objc_enumerationMutation(v26);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v73 + 1) + 8 * v30), "matchIngress:", v7) & 1) != 0)
                break;
              if (v28 == (id)++v30)
              {
                v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v73, v93, 16);
                if (v28)
                  goto LABEL_32;
                goto LABEL_38;
              }
            }
LABEL_85:

LABEL_86:
            v2 = v56;
            goto LABEL_56;
          }
LABEL_38:

          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v26 = a1[43];
          v31 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v69, v92, 16);
          if (v31)
          {
            v32 = v31;
            v33 = *(_QWORD *)v70;
LABEL_40:
            v34 = 0;
            while (1)
            {
              if (*(_QWORD *)v70 != v33)
                objc_enumerationMutation(v26);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v69 + 1) + 8 * v34), "matchIngress:", v7) & 1) != 0)
                goto LABEL_85;
              if (v32 == (id)++v34)
              {
                v32 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v69, v92, 16);
                if (v32)
                  goto LABEL_40;
                break;
              }
            }
          }

          objc_msgSend(v54, "addObject:", v7);
          v2 = v56;
        }
        if (v7)
          v35 = *(void **)(v7 + 24);
        else
          v35 = 0;
        if (objc_msgSend(v35, "proxyHop") == 2)
        {
          v9 = a1[26];
          if (objc_msgSend(v9, "matchEgress:", v7))
            goto LABEL_55;
          v10 = a1[27];
          if (objc_msgSend(v10, "matchEgress:", v7))
            goto LABEL_54;
          v11 = a1[28];
          if (objc_msgSend(v11, "matchEgress:", v7))
          {
LABEL_53:

LABEL_54:
LABEL_55:

            goto LABEL_56;
          }
          v36 = objc_msgSend(a1[29], "matchEgress:", v7);

          if ((v36 & 1) == 0)
          {
            v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v13 = a1[38];
            v37 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v65, v91, 16);
            if (v37)
            {
              v38 = v37;
              v39 = *(_QWORD *)v66;
LABEL_61:
              v40 = 0;
              while (1)
              {
                if (*(_QWORD *)v66 != v39)
                  objc_enumerationMutation(v13);
                v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[38], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * v40)));
                v42 = objc_msgSend(v41, "matchEgress:", v7);

                if ((v42 & 1) != 0)
                  goto LABEL_84;
                if (v38 == (id)++v40)
                {
                  v38 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v65, v91, 16);
                  if (v38)
                    goto LABEL_61;
                  break;
                }
              }
            }

            v63 = 0u;
            v64 = 0u;
            v61 = 0u;
            v62 = 0u;
            v13 = a1[39];
            v43 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v61, v90, 16);
            if (v43)
            {
              v44 = v43;
              v45 = *(_QWORD *)v62;
LABEL_69:
              v46 = 0;
              while (1)
              {
                if (*(_QWORD *)v62 != v45)
                  objc_enumerationMutation(v13);
                v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[39], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * v46)));
                v48 = objc_msgSend(v47, "matchEgress:", v7);

                if ((v48 & 1) != 0)
                  break;
                if (v44 == (id)++v46)
                {
                  v44 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v61, v90, 16);
                  if (v44)
                    goto LABEL_69;
                  goto LABEL_75;
                }
              }
LABEL_84:

              v5 = v55;
              v2 = v56;
              goto LABEL_56;
            }
LABEL_75:

            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v26 = a1[40];
            v49 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v57, v89, 16);
            v5 = v55;
            if (v49)
            {
              v50 = v49;
              v51 = *(_QWORD *)v58;
LABEL_77:
              v52 = 0;
              while (1)
              {
                if (*(_QWORD *)v58 != v51)
                  objc_enumerationMutation(v26);
                if ((objc_msgSend(*(id *)(*((_QWORD *)&v57 + 1) + 8 * v52), "matchEgress:", v7) & 1) != 0)
                  goto LABEL_85;
                if (v50 == (id)++v52)
                {
                  v50 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v57, v89, 16);
                  if (v50)
                    goto LABEL_77;
                  break;
                }
              }
            }

            objc_msgSend(v54, "addObject:", v7);
            goto LABEL_86;
          }
        }
LABEL_56:
        v6 = (char *)v6 + 1;
      }
      while (v6 != v4);
      v53 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v85, v96, 16);
      v4 = v53;
      if (!v53)
      {
LABEL_90:

        objc_msgSend(a1[44], "removeObjectsInArray:", v54);
        return;
      }
    }
  }
}

void sub_10002988C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v3;
  void *v5;
  _UNKNOWN **v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  _BOOL8 v14;
  unsigned __int8 v15;
  BOOL v16;
  char v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  NSPQuicProxyPath *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  NSPQuicProxyPath *v41;
  id v42;
  id v43;
  id v44;
  _QWORD *v45;
  uint8_t buf[4];
  const char *v47;

  v3 = (id *)(a1 + 224);
  if (*(_QWORD *)(a1 + 224))
  {
    if ((objc_msgSend((id)a1, "forceFallback") & 1) == 0)
    {
      v45 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 208), "egressProxy"));
      v5 = *(void **)(a1 + 208);
      v6 = &AnalyticsSendEventLazy_ptr;
      if (v5)
      {
        v7 = *v3;
        v8 = v5;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ingressProxy"));
        v10 = *v3;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "egressProxy"));
        v12 = *v3;
        objc_msgSend(v8, "updateIngressProxy:egressProxy:proxyPathWeight:", v9, v11, objc_msgSend(v12, "proxyPathWeight"));

      }
      else
      {
        v41 = [NSPQuicProxyPath alloc];
        v44 = *(id *)(a1 + 224);
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "ingressProxy"));
        v43 = *(id *)(a1 + 224);
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "egressProxy"));
        v42 = *(id *)(a1 + 224);
        v37 = objc_msgSend(v42, "proxyPathWeight");
        v13 = *(void **)(a1 + 216);
        v14 = v13 != 0;
        v40 = v13;
        v15 = objc_msgSend((id)a1, "forceFallback");
        v16 = *(_BYTE *)(a1 + 13) == 0;
        v17 = *(_BYTE *)(a1 + 15);
        v18 = *(void **)(a1 + 400);
        v19 = *(id *)(a1 + 368);
        v20 = v18;
        v21 = +[NPUtilities copyCurrentNetworkCharacteristicsForPath:](NPUtilities, "copyCurrentNetworkCharacteristicsForPath:", v19);
        BYTE2(v36) = v17;
        BYTE1(v36) = v16;
        LOBYTE(v36) = v15;
        v22 = -[NSPQuicProxyPath initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:](v41, "initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:", a1, v39, v38, v37, v14, 0, v36, v20, v21);
        objc_storeStrong((id *)(a1 + 208), v22);

        v6 = &AnalyticsSendEventLazy_ptr;
        objc_msgSend(*(id *)(a1 + 208), "resetSingleHopProxyAgent");
        objc_msgSend(*(id *)(a1 + 208), "resetMultiHopProxyAgent");
      }
      if (v45)
        v23 = (void *)v45[3];
      else
        v23 = 0;
      v24 = v23;
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "vendor"));
      v26 = *(id *)(a1 + 208);
      v27 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "egressProxy"));
      v28 = v27;
      if (v27)
        v27 = (_QWORD *)v27[3];
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "vendor"));
      v30 = v25;
      v31 = v29;
      v32 = (void *)v31;
      if (!(v30 | v31) || v30 && v31 && objc_msgSend((id)v30, "isEqual:", v31))
      {

      }
      else
      {

        v24 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
        v30 = *(_QWORD *)(a1 + 288);
        *(_QWORD *)(a1 + 288) = v24;
      }

      objc_msgSend(*(id *)(a1 + 208), "resetStats");
      objc_msgSend(*(id *)(a1 + 208), "resetError");
      ++*(_QWORD *)(a1 + 480);
      ++*(_QWORD *)(a1 + 496);
      objc_storeStrong(v3, 0);
      objc_msgSend((id)a1, "tokensEmpty");
      v33 = v6[92];
      ++*(_QWORD *)(a1 + 544);
      objc_msgSend(v33, "postNotification:value:", CFSTR("com.apple.networkserviceproxy.privacy-proxy-path-changed"));

    }
  }
  else
  {
    v34 = nplog_obj(a1, a2, a3);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v47 = "-[NSPPrivacyProxyAgentManager setupQuicProxyPath]";
      _os_log_fault_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "%s called with null self.candidateQuicProxyPath", buf, 0xCu);
    }

  }
}

void sub_100029CC4(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 80));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "refreshProxyInfo:", 9);

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_100029D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Token fetch for Quic[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_100029E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Token fetch for Quic[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_100029EE4(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *i;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *j;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  uint32_t v84;
  id v85;
  void *v86;
  void *v87;
  id v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint8_t buf[4];
  void *v98;
  _BYTE v99[128];
  _BYTE v100[128];

  if (a1)
  {
    v2 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v2, "setValue:forKey:", &off_1000FF200, CFSTR("Version"));
    v3 = objc_alloc_init((Class)NSMutableDictionary);
    v4 = *(void **)(a1 + 208);
    if (v4)
    {
      v5 = v4;
      v6 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ingressProxy"));
      v7 = v6;
      if (v6)
        v6 = (_QWORD *)v6[3];
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "proxyURL"));
      objc_msgSend(v3, "setValue:forKey:", v8, CFSTR("IngressProxyURL"));

      v9 = *(id *)(a1 + 208);
      v10 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "egressProxy"));
      v11 = v10;
      if (v10)
        v10 = (_QWORD *)v10[3];
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "proxyURL"));
      objc_msgSend(v3, "setValue:forKey:", v12, CFSTR("EgressProxyURL"));

    }
    v13 = *(void **)(a1 + 216);
    if (v13)
    {
      v14 = v13;
      v15 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ingressProxy"));
      v16 = v15;
      if (v15)
        v15 = (_QWORD *)v15[3];
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "proxyURL"));
      objc_msgSend(v3, "setValue:forKey:", v17, CFSTR("IngressFallbackProxyURL"));

      v18 = *(id *)(a1 + 216);
      v19 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "egressProxy"));
      v20 = v19;
      if (v19)
        v19 = (_QWORD *)v19[3];
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "proxyURL"));
      objc_msgSend(v3, "setValue:forKey:", v21, CFSTR("EgressFallbackProxyURL"));

    }
    if (objc_msgSend(v3, "count"))
      objc_msgSend(v2, "setValue:forKey:", v3, CFSTR("ConfiguredProxies"));
    v86 = v3;
    v87 = v2;
    v22 = objc_alloc_init((Class)NSMutableArray);
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v23 = *(id *)(a1 + 312);
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v93, v100, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v94;
      do
      {
        for (i = 0; i != v25; i = (char *)i + 1)
        {
          if (*(_QWORD *)v94 != v26)
            objc_enumerationMutation(v23);
          v28 = *(_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)i);
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 312), "objectForKeyedSubscript:", v28));
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "domainFilter"));

          if (v30)
          {
            v31 = objc_alloc_init((Class)NSMutableDictionary);
            v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "preferredPathConfigURI"));
            objc_msgSend(v31, "setValue:forKey:", v32, CFSTR("PreferredPathConfigURL"));

            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "domainFilter"));
            objc_msgSend(v31, "setValue:forKey:", v33, CFSTR("DomainFilter"));

            objc_msgSend(v31, "setValue:forKey:", v28, CFSTR("Vendor"));
            objc_msgSend(v22, "addObject:", v31);

          }
        }
        v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v93, v100, 16);
      }
      while (v25);
    }

    v34 = v87;
    if (objc_msgSend(v22, "count"))
      objc_msgSend(v87, "setValue:forKey:", v22, CFSTR("PreferredPaths"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredProxy"));

    if (v35)
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredProxy"));
      objc_msgSend(v87, "setValue:forKey:", v36, CFSTR("OverridePreferredProxy"));

    }
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredObliviousProxy"));

    if (v37)
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overridePreferredObliviousProxy"));
      objc_msgSend(v87, "setValue:forKey:", v38, CFSTR("OverridePreferredObliviousProxy"));

    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxy"));

    if (v39)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxy"));
      objc_msgSend(v87, "setValue:forKey:", v40, CFSTR("OverrideIngressProxy"));

    }
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideFallbackIngressProxy"));

    if (v41)
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideFallbackIngressProxy"));
      objc_msgSend(v87, "setValue:forKey:", v42, CFSTR("OverrideFallbackIngressProxy"));

    }
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxyKey"));

    if (v43)
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)a1, "overrideIngressProxyKey"));
      objc_msgSend(v87, "setValue:forKey:", v44, CFSTR("OverrideIngressProxyKey"));

    }
    v45 = *(_QWORD *)(a1 + 160);
    if (v45)
      objc_msgSend(v87, "setValue:forKey:", v45, CFSTR("OverrideEnabledMaps"));
    if (*(_BYTE *)(a1 + 11))
    {
      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v87, "setValue:forKey:", v46, CFSTR("DisableProxiedContentDoHBootstrap"));

    }
    v47 = objc_alloc_init((Class)NSMutableArray);
    v48 = *(void **)(a1 + 328);
    if (v48)
    {
      v85 = v22;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v49 = v48;
      v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v89, v99, 16);
      if (v50)
      {
        v51 = v50;
        v52 = *(_QWORD *)v90;
        v53 = v47;
        do
        {
          for (j = 0; j != v51; j = (char *)j + 1)
          {
            if (*(_QWORD *)v90 != v52)
              objc_enumerationMutation(v49);
            v55 = *(_QWORD *)(*((_QWORD *)&v89 + 1) + 8 * (_QWORD)j);
            v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 328), "objectForKey:", v55, v85, v86));

            if (v56)
            {
              v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 328), "objectForKey:", v55));
              v58 = objc_alloc_init((Class)NSMutableDictionary);
              v59 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "ingressProxy"));
              v60 = v59;
              if (v59)
                v59 = (_QWORD *)v59[3];
              v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "vendor"));
              objc_msgSend(v58, "setValue:forKey:", v61, CFSTR("NetworkSpecificProxyVendor"));

              v62 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "ingressProxy"));
              v63 = v62;
              if (v62)
                v62 = (_QWORD *)v62[3];
              v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "proxyURL"));
              objc_msgSend(v58, "setValue:forKey:", v64, CFSTR("NetworkSpecificIngressProxyURL"));

              v65 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "egressProxy"));
              v66 = v65;
              if (v65)
                v65 = (_QWORD *)v65[3];
              v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "proxyURL"));
              objc_msgSend(v58, "setValue:forKey:", v67, CFSTR("NetworkSpecificEgressProxyURL"));

              v47 = v53;
              objc_msgSend(v53, "addObject:", v58);

            }
          }
          v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v89, v99, 16);
        }
        while (v51);
      }

      v34 = v87;
      v22 = v85;
    }
    if (objc_msgSend(v47, "count", v85))
      objc_msgSend(v34, "setValue:forKey:", v47, CFSTR("NetworkSpecificPaths"));
    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend((id)a1, "forceFallback")));
    objc_msgSend(v34, "setValue:forKey:", v68, CFSTR("ForceFallback"));

    v88 = 0;
    v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v34, 1, &v88));
    v70 = v88;
    v73 = v70;
    if (!v69 || v70)
    {
      v81 = nplog_obj(v70, v71, v72);
      v80 = objc_claimAutoreleasedReturnValue(v81);
      if (!os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        goto LABEL_68;
      *(_DWORD *)buf = 138412290;
      v98 = v73;
      v82 = "archivedDataWithRootObject failed with error: %@";
      v83 = v80;
      v84 = 12;
    }
    else
    {
      _CFPreferencesSetFileProtectionClass(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost, 0, 3);
      CFPreferencesSetAppValue(CFSTR("NSPProxyAgentManagerPreferences"), v69, kCFPreferencesCurrentApplication);
      v74 = CFPreferencesAppSynchronize(kCFPreferencesCurrentApplication);
      v75 = v74;
      v78 = nplog_obj(v74, v76, v77);
      v79 = objc_claimAutoreleasedReturnValue(v78);
      v80 = v79;
      if (v75)
      {
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Saved proxy agent information to preference file", buf, 2u);
        }
        goto LABEL_68;
      }
      if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
LABEL_68:

        return;
      }
      *(_WORD *)buf = 0;
      v82 = "Failed to write configured proxies to preference file";
      v83 = v80;
      v84 = 2;
    }
    _os_log_error_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, v82, buf, v84);
    goto LABEL_68;
  }
}

void sub_10002A778(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  _UNKNOWN **v12;
  void *v13;
  NSPQuicProxyPath *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  char v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  NSPQuicProxyPath *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSPQuicProxyPath *v34;
  uint8_t buf[4];
  const char *v36;

  v3 = a2;
  if ((objc_msgSend((id)a1, "forceFallback") & 1) != 0)
    goto LABEL_10;
  v6 = *(void **)(a1 + 312);
  if (!v6)
  {
    v28 = nplog_obj(0, v4, v5);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    {
LABEL_14:

      goto LABEL_10;
    }
    *(_DWORD *)buf = 136315138;
    v36 = "-[NSPPrivacyProxyAgentManager setupPreferredQUICProxyPathForVendor:]";
    v30 = "%s called with null self.candidatePreferredQUICProxyPaths";
LABEL_16:
    _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, v30, buf, 0xCu);
    goto LABEL_14;
  }
  if (!v3)
  {
    v31 = nplog_obj(v6, v4, v5);
    v29 = objc_claimAutoreleasedReturnValue(v31);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      goto LABEL_14;
    *(_DWORD *)buf = 136315138;
    v36 = "-[NSPPrivacyProxyAgentManager setupPreferredQUICProxyPathForVendor:]";
    v30 = "%s called with null vendor";
    goto LABEL_16;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v3));
  v8 = *(void **)(a1 + 304);
  if (!v8)
  {
    v9 = objc_alloc_init((Class)NSMutableDictionary);
    v10 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v9;

    v8 = *(void **)(a1 + 304);
  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v3));
  v12 = &AnalyticsSendEventLazy_ptr;
  if (v11)
  {
    v13 = (void *)v11;
    v14 = (NSPQuicProxyPath *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ingressProxy"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "egressProxy"));
    objc_msgSend(v13, "updateIngressProxy:egressProxy:proxyPathWeight:", v14, v15, objc_msgSend(v7, "proxyPathWeight"));

  }
  else
  {
    v34 = [NSPQuicProxyPath alloc];
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ingressProxy"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "egressProxy"));
    v33 = objc_msgSend(v7, "proxyPathWeight");
    v18 = *(_BYTE *)(a1 + 13) == 0;
    v19 = *(_BYTE *)(a1 + 15);
    v20 = *(void **)(a1 + 400);
    v21 = *(id *)(a1 + 368);
    v22 = v20;
    v23 = +[NPUtilities copyCurrentNetworkCharacteristicsForPath:](NPUtilities, "copyCurrentNetworkCharacteristicsForPath:", v21);
    BYTE2(v32) = v19;
    BYTE1(v32) = v18;
    LOBYTE(v32) = 0;
    v24 = (void *)v16;
    v25 = -[NSPQuicProxyPath initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:](v34, "initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:", a1, v16, v17, v33, 1, 1, v32, v22, v23);

    v12 = &AnalyticsSendEventLazy_ptr;
    v26 = *(void **)(a1 + 304);
    v14 = v25;
    objc_msgSend(v26, "setObject:forKeyedSubscript:", v14, v3);
    -[NSPQuicProxyPath resetMultiHopProxyAgent](v14, "resetMultiHopProxyAgent");
    v13 = v14;
  }

  objc_msgSend(v13, "resetStats");
  objc_msgSend(v13, "resetError");
  sub_1000291A4((id *)a1);
  objc_msgSend((id)a1, "updateUserEventAgentData");
  v27 = v12[92];
  ++*(_QWORD *)(a1 + 544);
  objc_msgSend(v27, "postNotification:value:", CFSTR("com.apple.networkserviceproxy.privacy-proxy-path-changed"));

LABEL_10:
}

void sub_10002AA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Token fetch for Quic[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_10002AB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Token fetch for Quic[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_10002AC40(id *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  id *WeakRetained;
  id *v11;
  void *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  const __CFString *v16;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v13 = 138412546;
    v14 = v7;
    v15 = 2112;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Domain filter fetch for Quic[%@] %@", (uint8_t *)&v13, 0x16u);

  }
  WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  v11 = WeakRetained;
  if (WeakRetained && v3)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[39], "objectForKeyedSubscript:", a1[5]));
    if (objc_msgSend(v12, "proxyPathReady"))
      sub_10002A778((uint64_t)v11, a1[5]);
    objc_msgSend(v11, "updateUserEventAgentData");
    sub_100029EE4((uint64_t)v11);

  }
}

void sub_10002AF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v3;
  id *v5;
  id v6;
  _UNKNOWN **v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  unsigned __int8 v15;
  BOOL v16;
  char v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSPFallbackProxyPath *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSPFallbackProxyPath *v40;
  id v41;
  id v42;
  id v43;
  _QWORD *v44;
  uint8_t buf[4];
  const char *v46;

  v3 = (id *)(a1 + 232);
  if (*(_QWORD *)(a1 + 232))
  {
    v5 = (id *)(a1 + 216);
    v44 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 216), "egressProxy"));
    v6 = *v5;
    v7 = &AnalyticsSendEventLazy_ptr;
    if (*v5)
    {
      v8 = *v3;
      v9 = v6;
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ingressProxy"));
      v11 = *v3;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "egressProxy"));
      v13 = *v3;
      objc_msgSend(v9, "updateIngressProxy:egressProxy:proxyPathWeight:", v10, v12, objc_msgSend(v13, "proxyPathWeight"));

    }
    else
    {
      v40 = [NSPFallbackProxyPath alloc];
      v43 = *(id *)(a1 + 232);
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "ingressProxy"));
      v42 = *(id *)(a1 + 232);
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "egressProxy"));
      v41 = *(id *)(a1 + 232);
      v14 = objc_msgSend(v41, "proxyPathWeight");
      v15 = objc_msgSend((id)a1, "forceFallback");
      v16 = *(_BYTE *)(a1 + 13) == 0;
      v17 = *(_BYTE *)(a1 + 15);
      v18 = *(void **)(a1 + 400);
      v19 = *(id *)(a1 + 368);
      v20 = v18;
      v21 = +[NPUtilities copyCurrentNetworkCharacteristicsForPath:](NPUtilities, "copyCurrentNetworkCharacteristicsForPath:", v19);
      BYTE2(v37) = v17;
      BYTE1(v37) = v16;
      LOBYTE(v37) = v15;
      v22 = v14;
      v7 = &AnalyticsSendEventLazy_ptr;
      v23 = -[NSPProxyPath initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:](v40, "initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:", a1, v39, v38, v22, 0, 0, v37, v20, v21);
      objc_storeStrong(v5, v23);

      objc_msgSend(*(id *)(a1 + 216), "resetSingleHopProxyAgent");
      objc_msgSend(*(id *)(a1 + 216), "resetMultiHopProxyAgent");
    }
    if (v44)
      v24 = (void *)v44[3];
    else
      v24 = 0;
    v25 = v24;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "vendor"));
    v27 = *v5;
    v28 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "egressProxy"));
    v29 = v28;
    if (v28)
      v28 = (_QWORD *)v28[3];
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "vendor"));
    v31 = v26;
    v32 = v30;
    v33 = (void *)v32;
    if (!(v31 | v32) || v31 && v32 && objc_msgSend((id)v31, "isEqual:", v32))
    {

    }
    else
    {

      v25 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v31 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v25;
    }

    objc_msgSend(*(id *)(a1 + 216), "resetStats");
    objc_msgSend(*(id *)(a1 + 216), "resetError");
    *(int64x2_t *)(a1 + 488) = vaddq_s64(*(int64x2_t *)(a1 + 488), vdupq_n_s64(1uLL));
    objc_msgSend(*(id *)(a1 + 208), "enableFallback:", 1);
    objc_msgSend(*(id *)(a1 + 208), "resetSingleHopProxyAgent");
    objc_msgSend(*(id *)(a1 + 208), "resetMultiHopProxyAgent");
    objc_storeStrong(v3, 0);
    objc_msgSend((id)a1, "tokensEmpty");
    v34 = v7[92];
    ++*(_QWORD *)(a1 + 544);
    objc_msgSend(v34, "postNotification:value:", CFSTR("com.apple.networkserviceproxy.privacy-proxy-path-changed"));

  }
  else
  {
    v35 = nplog_obj(a1, a2, a3);
    v36 = objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v46 = "-[NSPPrivacyProxyAgentManager setupFallbackProxyPath]";
      _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "%s called with null self.candidateFallbackProxyPath", buf, 0xCu);
    }

  }
}

void sub_10002B39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token fetch for Fallback[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_10002B480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token fetch for Fallback[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_10002B564(id *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *j;
  void *v28;
  char v29;
  uint32_t v30;
  id v31;
  uint32_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  void *v37;
  unsigned int v38;
  id v39;
  id v40;
  uint64_t v41;
  void *k;
  void *v43;
  unsigned int v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  NSPProxyTokenInfo *v51;
  NSPProxiedContentPath *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  const char *v58;
  uint32_t v59;
  void *v60;
  unsigned int v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  NSPProxyTokenInfo *v66;
  void *v67;
  NSPProxyTokenInfo *v68;
  void *v69;
  NSPProxiedContentPath *v70;
  id v71;
  NSPProxyTokenInfo *v72;
  uint64_t v73;
  unsigned int v74;
  NSPProxiedContentPath *v75;
  id v76;
  id *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  id v81;
  id v82;
  uint64_t v83;
  void *m;
  void *v85;
  unsigned int v86;
  unsigned __int8 v87;
  id v88;
  void *v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  void *v97;
  void *v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  id v108;
  uint64_t v109;
  void *v110;
  void *v111;
  id v112;
  void *v113;
  id v114;
  void *v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id *location;
  uint64_t v122;
  id v123;
  void *v124;
  uint64_t v125;
  id v126;
  id obj;
  id obja;
  id *v129;
  _QWORD v130[4];
  id v131;
  _QWORD v132[4];
  id v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  _BYTE v166[128];
  _BYTE v167[128];
  _BYTE v168[128];
  _BYTE v169[128];
  _BYTE v170[128];
  uint8_t v171[128];
  uint8_t buf[4];
  void *v173;
  __int16 v174;
  unsigned int v175;
  _BYTE v176[128];
  _BYTE v177[128];

  if (!a1 || !a1[19])
    return;
  location = a1 + 40;
  v3 = a1[40];
  if (!v3)
  {
    v4 = objc_alloc_init((Class)NSMutableArray);
    objc_storeStrong(location, v4);

    v3 = *location;
  }
  v164 = 0u;
  v165 = 0u;
  v162 = 0u;
  v163 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v162, v177, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v163;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v163 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v162 + 1) + 8 * (_QWORD)i), "setDelegate:", a1);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v162, v177, 16);
    }
    while (v7);
  }

  v118 = objc_alloc_init((Class)NSMutableArray);
  v126 = objc_alloc_init((Class)NSMutableArray);
  v158 = 0u;
  v159 = 0u;
  v160 = 0u;
  v161 = 0u;
  v129 = a1;
  obj = a1[19];
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v158, v176, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v159;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v159 != v12)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * (_QWORD)v13);
        v15 = v129[20];
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
        v1 = (uint64_t)objc_msgSend(v15, "containsObject:", v16);

        if ((v1 & 1) == 0)
        {
          if (!objc_msgSend(v14, "enabled"))
            goto LABEL_61;
          if (objc_msgSend(v14, "hasPercentEnabled"))
          {
            if (!objc_msgSend(v14, "percentEnabled"))
              goto LABEL_61;
            if (objc_msgSend(v14, "percentEnabled") <= 0x63)
            {
              v30 = arc4random_uniform(0x64u);
              v31 = objc_msgSend(v14, "percentEnabled");
              v32 = v31;
              v35 = nplog_obj(v31, v33, v34);
              v17 = objc_claimAutoreleasedReturnValue(v35);
              v36 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              if (v30 > v32)
              {
                if (v36)
                {
                  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
                  v38 = objc_msgSend(v14, "percentEnabled");
                  *(_DWORD *)buf = 138412546;
                  v173 = v37;
                  v174 = 1024;
                  v175 = v38;
                  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Not enabling map for %@ (%u%% chance of enablement)", buf, 0x12u);
                  goto LABEL_83;
                }
                goto LABEL_60;
              }
              if (v36)
              {
                v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
                v61 = objc_msgSend(v14, "percentEnabled");
                *(_DWORD *)buf = 138412546;
                v173 = v60;
                v174 = 1024;
                v175 = v61;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Enabling map for %@ (%u%% chance of enablement)", buf, 0x12u);

              }
            }
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier"));
            objc_msgSend(v126, "addObject:", v62);

          }
        }
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v17 = *location;
        v18 = -[NSObject countByEnumeratingWithState:objects:count:](v17, "countByEnumeratingWithState:objects:count:", &v154, v171, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v155;
LABEL_20:
          v21 = 0;
          while (1)
          {
            if (*(_QWORD *)v155 != v20)
              objc_enumerationMutation(v17);
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v154 + 1) + 8 * v21), "associatedMaps"));
            v1 = (uint64_t)objc_msgSend(v22, "containsObject:", v14);

            if ((v1 & 1) != 0)
              goto LABEL_60;
            if (v19 == (id)++v21)
            {
              v19 = -[NSObject countByEnumeratingWithState:objects:count:](v17, "countByEnumeratingWithState:objects:count:", &v154, v171, 16);
              if (v19)
                goto LABEL_20;
              break;
            }
          }
        }

        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v23 = *location;
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v150, v170, 16);
        if (v24)
        {
          v25 = v24;
          v26 = *(_QWORD *)v151;
          while (2)
          {
            for (j = 0; j != v25; j = (char *)j + 1)
            {
              if (*(_QWORD *)v151 != v26)
                objc_enumerationMutation(v23);
              v28 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * (_QWORD)j);
              if (objc_msgSend(v28, "matchesMap:", v14))
              {
                objc_msgSend(v28, "addMap:", v14);
                v29 = 1;
                goto LABEL_43;
              }
            }
            v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v150, v170, 16);
            if (v25)
              continue;
            break;
          }
        }
        v29 = 0;
LABEL_43:

        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        v1 = (uint64_t)v118;
        v39 = objc_msgSend((id)v1, "countByEnumeratingWithState:objects:count:", &v146, v169, 16);
        if (v39)
        {
          v40 = v39;
          v41 = *(_QWORD *)v147;
          while (2)
          {
            for (k = 0; k != v40; k = (char *)k + 1)
            {
              if (*(_QWORD *)v147 != v41)
                objc_enumerationMutation((id)v1);
              v43 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * (_QWORD)k);
              if (objc_msgSend(v43, "matchesMap:", v14))
              {
                objc_msgSend(v43, "addMap:", v14);
                v17 = v1;
                goto LABEL_60;
              }
            }
            v40 = objc_msgSend((id)v1, "countByEnumeratingWithState:objects:count:", &v146, v169, 16);
            if (v40)
              continue;
            break;
          }
        }

        if ((v29 & 1) == 0)
        {
          if (!objc_msgSend(v14, "proxiesCount") && objc_msgSend(v14, "hasResolver"))
          {
            v44 = objc_msgSend(v14, "resolver");
            v45 = v129[12];
            if ((unint64_t)objc_msgSend(v45, "count") <= v44)
            {

            }
            else
            {
              v46 = v129[12];
              v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "objectAtIndex:", objc_msgSend(v14, "resolver")));

              if (v17)
              {
                if (-[NSObject hasProxyIndex](v17, "hasProxyIndex"))
                {
                  v50 = v129[11];
                  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectAtIndex:", -[NSObject proxyIndex](v17, "proxyIndex")));

                  if (v37)
                  {
                    v51 = sub_100028CFC((uint64_t)v129, v37);
                    v52 = (NSPProxiedContentPath *)objc_claimAutoreleasedReturnValue(v51);
                  }
                  else
                  {
                    v52 = 0;
                  }
                }
                else
                {
                  v52 = 0;
                  v37 = 0;
                }
                v75 = -[NSPProxiedContentPath initWithDelegate:initialMap:ingressProxy:egressProxy:resolver:]([NSPProxiedContentPath alloc], "initWithDelegate:initialMap:ingressProxy:egressProxy:resolver:", v129, v14, 0, v52, v17);
                objc_msgSend((id)v1, "addObject:", v75);

LABEL_82:
LABEL_83:

LABEL_60:
                goto LABEL_61;
              }
            }
            v73 = nplog_obj(v47, v48, v49);
            v17 = objc_claimAutoreleasedReturnValue(v73);
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
              goto LABEL_60;
            v74 = objc_msgSend(v14, "resolver");
            *(_DWORD *)buf = 67109120;
            LODWORD(v173) = v74;
            v57 = v17;
            v58 = "Failed to add proxied content path, invalid resolver %u";
            v59 = 8;
LABEL_67:
            _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, v58, buf, v59);
            goto LABEL_60;
          }
          v53 = objc_msgSend(v14, "proxiesCount");
          if (!v53 || (v53 = objc_msgSend(v14, "proxiesCount"), (unint64_t)v53 >= 3))
          {
            v56 = nplog_obj(v53, v54, v55);
            v17 = objc_claimAutoreleasedReturnValue(v56);
            if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
              goto LABEL_60;
            *(_DWORD *)buf = 138412290;
            v173 = v14;
            v57 = v17;
            v58 = "Failed to add proxied content path, invalid number of proxies (%@)";
            v59 = 12;
            goto LABEL_67;
          }
          if (objc_msgSend(v14, "proxiesCount") == (id)2)
          {
            v63 = v129[11];
            v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectAtIndex:", *(unsigned int *)objc_msgSend(v14, "proxies")));

            v64 = v129[11];
            v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "objectAtIndex:", *((unsigned int *)objc_msgSend(v14, "proxies")
                                                                                                + 1)));

            v66 = sub_100028CFC((uint64_t)v129, v17);
            v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
            v68 = sub_100028CFC((uint64_t)v129, v65);
            v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
            v70 = -[NSPProxiedContentPath initWithDelegate:initialMap:ingressProxy:egressProxy:resolver:]([NSPProxiedContentPath alloc], "initWithDelegate:initialMap:ingressProxy:egressProxy:resolver:", v129, v14, v67, v69, 0);
            objc_msgSend((id)v1, "addObject:", v70);

            goto LABEL_60;
          }
          if (objc_msgSend(v14, "proxiesCount") == (id)1)
          {
            v71 = v129[11];
            v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "objectAtIndex:", *(unsigned int *)objc_msgSend(v14, "proxies")));

            v72 = sub_100028CFC((uint64_t)v129, v17);
            v37 = (void *)objc_claimAutoreleasedReturnValue(v72);
            v52 = -[NSPProxiedContentPath initWithDelegate:initialMap:ingressProxy:egressProxy:resolver:]([NSPProxiedContentPath alloc], "initWithDelegate:initialMap:ingressProxy:egressProxy:resolver:", v129, v14, 0, v37, 0);
            objc_msgSend((id)v1, "addObject:", v52);
            goto LABEL_82;
          }
        }
LABEL_61:
        v13 = (char *)v13 + 1;
      }
      while (v13 != v11);
      v76 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v158, v176, 16);
      v11 = v76;
    }
    while (v76);
  }

  objc_msgSend(*location, "addObjectsFromArray:", v118);
  v119 = objc_alloc_init((Class)NSMutableArray);
  v142 = 0u;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v120 = *location;
  v77 = v129;
  v123 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v142, v168, 16);
  if (!v123)
    goto LABEL_111;
  v122 = *(_QWORD *)v143;
  do
  {
    v78 = 0;
    do
    {
      if (*(_QWORD *)v143 != v122)
        objc_enumerationMutation(v120);
      v79 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * v78);
      obja = objc_alloc_init((Class)NSMutableArray);
      v138 = 0u;
      v139 = 0u;
      v140 = 0u;
      v141 = 0u;
      v124 = v79;
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "associatedMaps"));
      v81 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v138, v167, 16);
      v125 = v78;
      if (v81)
      {
        v82 = v81;
        v83 = *(_QWORD *)v139;
        do
        {
          for (m = 0; m != v82; m = (char *)m + 1)
          {
            if (*(_QWORD *)v139 != v83)
              objc_enumerationMutation(v80);
            v85 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * (_QWORD)m);
            v86 = objc_msgSend(v85, "enabled");
            if (v86)
            {
              if (!objc_msgSend(v85, "hasPercentEnabled"))
              {
                v87 = 1;
                goto LABEL_102;
              }
              v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "identifier"));
              if ((objc_msgSend(v126, "containsObject:", v1) & 1) != 0)
              {
                v87 = 1;
LABEL_100:

                goto LABEL_102;
              }
            }
            v88 = v77[20];
            v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "identifier"));
            v87 = objc_msgSend(v88, "containsObject:", v89);

            v77 = v129;
            if (v86)
              goto LABEL_100;
LABEL_102:
            if (!objc_msgSend(v77[19], "containsObject:", v85) || (v87 & 1) == 0)
              objc_msgSend(obja, "addObject:", v85);
          }
          v82 = objc_msgSend(v80, "countByEnumeratingWithState:objects:count:", &v138, v167, 16);
        }
        while (v82);
      }

      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "associatedMaps"));
      objc_msgSend(v90, "removeObjectsInArray:", obja);

      v91 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "associatedMaps"));
      v92 = objc_msgSend(v91, "count");

      if (!v92)
      {
        objc_msgSend(v124, "removeProxyAgents");
        objc_msgSend(v119, "addObject:", v124);
      }

      v78 = v125 + 1;
    }
    while ((id)(v125 + 1) != v123);
    v123 = objc_msgSend(v120, "countByEnumeratingWithState:objects:count:", &v142, v168, 16);
  }
  while (v123);
LABEL_111:

  objc_msgSend(*location, "removeObjectsInArray:", v119);
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v93 = *location;
  v94 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &v134, v166, 16);
  if (v94)
  {
    v95 = v94;
    v96 = *(_QWORD *)v135;
    do
    {
      v97 = 0;
      do
      {
        if (*(_QWORD *)v135 != v96)
          objc_enumerationMutation(v93);
        v98 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * (_QWORD)v97);
        v99 = objc_msgSend(v98, "pathReady");
        if ((_DWORD)v99)
        {
          v102 = nplog_obj(v99, v100, v101);
          v103 = objc_claimAutoreleasedReturnValue(v102);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "shortName"));
            *(_DWORD *)buf = 138412290;
            v173 = v104;
            _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "Setting up proxied content path (%@)", buf, 0xCu);

          }
          objc_msgSend(v98, "setupProxyAgentsForceUpdateDelegate:", 1);
        }
        else
        {
          v105 = objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "ingressProxy"));
          v106 = (void *)v105;
          if (v105)
            v107 = *(void **)(v105 + 24);
          else
            v107 = 0;
          v108 = v107;

          v109 = objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "egressProxy"));
          v110 = (void *)v109;
          if (v109)
            v111 = *(void **)(v109 + 24);
          else
            v111 = 0;
          v112 = v111;

          v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "ingressProxy"));
          v132[0] = _NSConcreteStackBlock;
          v132[1] = 3221225472;
          v132[2] = sub_10002C334;
          v132[3] = &unk_1000F5720;
          v133 = v108;
          v114 = v108;
          sub_10000C280((uint64_t)v113, v132);

          v115 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "egressProxy"));
          v130[0] = _NSConcreteStackBlock;
          v130[1] = 3221225472;
          v130[2] = sub_10002C418;
          v130[3] = &unk_1000F5720;
          v131 = v112;
          v116 = v112;
          sub_10000C280((uint64_t)v115, v130);

          v77 = v129;
        }
        v97 = (char *)v97 + 1;
      }
      while (v95 != v97);
      v117 = objc_msgSend(v93, "countByEnumeratingWithState:objects:count:", &v134, v166, 16);
      v95 = v117;
    }
    while (v117);
  }

  sub_1000291A4(v77);
  objc_msgSend(v77, "updateUserEventAgentData");
  sub_100029EE4((uint64_t)v77);

}

void sub_10002C334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token fetch for Proxied Content[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_10002C418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token fetch for Proxied Content[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_10002C510(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *j;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *k;
  void *v22;
  id *v23;
  id *v24;
  _UNKNOWN **v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unsigned int v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  unsigned int v50;
  id v51;
  void *v52;
  unsigned __int8 v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  id v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  void *m;
  void *v66;
  void *v67;
  unsigned int v68;
  id WeakRetained;
  unsigned int v70;
  unsigned int v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  void *n;
  uint64_t v88;
  void *v89;
  unsigned __int8 v90;
  uint64_t v91;
  NSObject *v92;
  id v93;
  void *v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  NSObject *v101;
  uint32_t v102;
  uint32_t v103;
  uint32_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  id v109;
  id v110;
  uint64_t v111;
  void *ii;
  void *v113;
  void *v114;
  unsigned int v115;
  id v116;
  void *v117;
  char v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  char *v124;
  void *v125;
  uint64_t v126;
  void *v127;
  id v128;
  id v129;
  id v130;
  uint64_t v131;
  void *jj;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  unsigned __int8 v137;
  void *v138;
  id v139;
  NSPProxyTokenInfo *v140;
  void *v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  NSPObliviousPath *v146;
  id v147;
  char *v148;
  void *v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  id v154;
  id v155;
  uint64_t v156;
  void *kk;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  unsigned int v162;
  void *v163;
  void *v164;
  unsigned __int8 v165;
  id v166;
  id v167;
  id v168;
  id v169;
  uint64_t v170;
  void *v171;
  void *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  void *v178;
  uint64_t v179;
  void *v180;
  void *v181;
  id v182;
  void *v183;
  id v184;
  id v185;
  uint64_t v186;
  int v187;
  id obj;
  uint64_t v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  id v194;
  id v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  id v200;
  id *v201;
  char *v202;
  id v203;
  uint64_t v204;
  char v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  void *v212;
  unsigned int v213;
  char *v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  NSPObliviousPath *v218;
  uint64_t v219;
  NSObject *v220;
  int v221;
  id v222;
  id v223;
  char v224;
  void *v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  void *v229;
  id v230;
  id v231;
  id v232;
  id v233;
  char *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  _QWORD v240[4];
  id v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  _BYTE v314[128];
  _BYTE v315[128];
  _BYTE v316[128];
  _BYTE v317[128];
  _BYTE v318[128];
  _BYTE v319[128];
  _BYTE v320[128];
  _BYTE v321[128];
  _BYTE v322[128];
  _BYTE v323[128];
  _BYTE v324[128];
  uint8_t v325[128];
  uint8_t buf[4];
  void *v327;
  __int16 v328;
  void *v329;
  _BYTE v330[128];
  _BYTE v331[128];
  _BYTE v332[128];
  _BYTE v333[128];
  _BYTE v334[128];
  _BYTE v335[128];

  if (a1)
  {
    v2 = *(id *)(a1 + 136);

    if (v2)
    {
      v187 = *(unsigned __int8 *)(a1 + 10);
      if (!*(_BYTE *)(a1 + 10))
        *(_BYTE *)(a1 + 10) = 1;
      v3 = *(id *)(a1 + 344);

      if (!v3)
      {
        v4 = objc_alloc_init((Class)NSMutableArray);
        objc_storeStrong((id *)(a1 + 344), v4);

      }
      v313 = 0u;
      v312 = 0u;
      v311 = 0u;
      v310 = 0u;
      v5 = *(id *)(a1 + 344);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v310, v335, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v311;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v311 != v8)
              objc_enumerationMutation(v5);
            objc_msgSend(*(id *)(*((_QWORD *)&v310 + 1) + 8 * (_QWORD)i), "setDelegate:", a1);
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v310, v335, 16);
        }
        while (v7);
      }
      v201 = (id *)(a1 + 344);

      v10 = objc_alloc_init((Class)NSMutableSet);
      v196 = objc_alloc_init((Class)NSMutableDictionary);
      v306 = 0u;
      v307 = 0u;
      v308 = 0u;
      v309 = 0u;
      v204 = a1;
      v11 = *(id *)(a1 + 136);
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v306, v334, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v307;
        do
        {
          for (j = 0; j != v13; j = (char *)j + 1)
          {
            if (*(_QWORD *)v307 != v14)
              objc_enumerationMutation(v11);
            v16 = *(void **)(*((_QWORD *)&v306 + 1) + 8 * (_QWORD)j);
            v302 = 0u;
            v303 = 0u;
            v304 = 0u;
            v305 = 0u;
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "obliviousTargets"));
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v302, v333, 16);
            if (v18)
            {
              v19 = v18;
              v20 = *(_QWORD *)v303;
              do
              {
                for (k = 0; k != v19; k = (char *)k + 1)
                {
                  if (*(_QWORD *)v303 != v20)
                    objc_enumerationMutation(v17);
                  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v302 + 1)
                                                                                     + 8 * (_QWORD)k), "targetHost"));
                  objc_msgSend(v10, "addObject:", v22);

                }
                v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v302, v333, 16);
              }
              while (v19);
            }

          }
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v306, v334, 16);
        }
        while (v13);
      }

      v300 = 0u;
      v301 = 0u;
      v298 = 0u;
      v299 = 0u;
      obj = v10;
      v23 = (id *)v204;
      v190 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v298, v332, 16);
      if (v190)
      {
        v24 = (id *)(v204 + 80);
        v25 = &AnalyticsSendEventLazy_ptr;
        v189 = *(_QWORD *)v299;
        do
        {
          v26 = 0;
          do
          {
            if (*(_QWORD *)v299 != v189)
            {
              v27 = v26;
              objc_enumerationMutation(obj);
              v26 = v27;
            }
            v191 = v26;
            v28 = *(void **)(*((_QWORD *)&v298 + 1) + 8 * v26);
            v294 = 0u;
            v295 = 0u;
            v296 = 0u;
            v297 = 0u;
            v29 = v23[17];
            v227 = v28;
            v211 = -[NSObject countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v294, v331, 16);
            if (v211)
            {
              v224 = 0;
              v30 = *(id *)v295;
              v220 = v29;
              v207 = *(id *)v295;
              do
              {
                v31 = 0;
                do
                {
                  if (*(id *)v295 != v30)
                  {
                    v32 = v31;
                    objc_enumerationMutation(v29);
                    v31 = v32;
                  }
                  v215 = v31;
                  v33 = *(void **)(*((_QWORD *)&v294 + 1) + 8 * v31);
                  v290 = 0u;
                  v291 = 0u;
                  v292 = 0u;
                  v293 = 0u;
                  v235 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "obliviousTargets"));
                  v34 = objc_msgSend(v235, "countByEnumeratingWithState:objects:count:", &v290, v330, 16);
                  if (v34)
                  {
                    v35 = v34;
                    v36 = *(_QWORD *)v291;
                    while (2)
                    {
                      v37 = 0;
                      v230 = v35;
                      do
                      {
                        if (*(_QWORD *)v291 != v36)
                          objc_enumerationMutation(v235);
                        v38 = *(void **)(*((_QWORD *)&v290 + 1) + 8 * (_QWORD)v37);
                        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "targetHost"));
                        v40 = objc_msgSend(v39, "isEqualToString:", v28);

                        if (v40)
                        {
                          v41 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "overridePreferredObliviousProxy"));
                          if (v41)
                          {
                            v42 = (void *)v41;
                            v43 = v36;
                            v44 = objc_msgSend(v38, "proxyIndex");
                            v45 = v23[11];
                            if ((unint64_t)objc_msgSend(v45, "count") <= v44)
                            {

                              v36 = v43;
                              v35 = v230;
                            }
                            else
                            {
                              v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "overridePreferredObliviousProxy"));
                              v47 = v23[11];
                              v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "objectAtIndex:", objc_msgSend(v38, "proxyIndex")));
                              v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "proxyURL"));
                              v50 = objc_msgSend(v46, "isEqualToString:", v49);

                              v23 = (id *)v204;
                              v24 = (id *)(v204 + 80);

                              v36 = v43;
                              v35 = v230;
                              if (v50)
                              {
                                v54 = objc_msgSend(v196, "setObject:forKeyedSubscript:", v38, v227);
                                v57 = nplog_obj(v54, v55, v56);
                                v58 = objc_claimAutoreleasedReturnValue(v57);
                                if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                                {
                                  *(_DWORD *)buf = 138412546;
                                  v327 = v38;
                                  v328 = 2112;
                                  v329 = v227;
                                  _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "Selected preferred oblivious target config %@ for %@", buf, 0x16u);
                                }

LABEL_125:
                                v25 = &AnalyticsSendEventLazy_ptr;
                                goto LABEL_126;
                              }
                            }
                          }
                          v51 = v23[18];
                          v25 = &AnalyticsSendEventLazy_ptr;
                          v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v38, "proxyIndex")));
                          v53 = objc_msgSend(v51, "containsObject:", v52);

                          v28 = v227;
                          v224 |= v53 ^ 1;
                        }
                        else
                        {
                          v25 = &AnalyticsSendEventLazy_ptr;
                        }
                        v37 = (char *)v37 + 1;
                      }
                      while (v35 != v37);
                      v35 = objc_msgSend(v235, "countByEnumeratingWithState:objects:count:", &v290, v330, 16);
                      if (v35)
                        continue;
                      break;
                    }
                  }

                  v31 = v215 + 1;
                  v29 = v220;
                  v30 = v207;
                }
                while ((id)(v215 + 1) != v211);
                v211 = -[NSObject countByEnumeratingWithState:objects:count:](v220, "countByEnumeratingWithState:objects:count:", &v294, v331, 16);
              }
              while (v211);
            }
            else
            {
              v224 = 0;
            }

            v288 = 0u;
            v289 = 0u;
            v286 = 0u;
            v287 = 0u;
            v60 = v23[17];
            v194 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v286, v325, 16);
            if (v194)
            {
              v205 = 0;
              v221 = 0;
              v192 = *(_QWORD *)v287;
              v193 = v60;
              do
              {
                v61 = 0;
                do
                {
                  if (*(_QWORD *)v287 != v192)
                    objc_enumerationMutation(v60);
                  v198 = v61;
                  v62 = *(void **)(*((_QWORD *)&v286 + 1) + 8 * v61);
                  v282 = 0u;
                  v283 = 0u;
                  v284 = 0u;
                  v285 = 0u;
                  v216 = v62;
                  v231 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "obliviousTargets"));
                  v63 = objc_msgSend(v231, "countByEnumeratingWithState:objects:count:", &v282, v324, 16);
                  if (v63)
                  {
                    v64 = v63;
                    v236 = *(_QWORD *)v283;
                    do
                    {
                      for (m = 0; m != v64; m = (char *)m + 1)
                      {
                        if (*(_QWORD *)v283 != v236)
                          objc_enumerationMutation(v231);
                        v66 = *(void **)(*((_QWORD *)&v282 + 1) + 8 * (_QWORD)m);
                        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "targetHost"));
                        v68 = objc_msgSend(v67, "isEqualToString:", v28);

                        if (v68)
                        {
                          if (_os_feature_enabled_impl("NetworkServiceProxy", "RelayNameEnforcement")
                            && objc_msgSend(v216, "obliviousHTTPType") == 2
                            && (WeakRetained = objc_loadWeakRetained(v24),
                                v70 = objc_msgSend(WeakRetained, "usesDefaultConfigurationServer"),
                                WeakRetained,
                                v70))
                          {
                            v71 = objc_msgSend(v66, "proxyIndex");
                            v72 = v23[11];
                            v73 = objc_msgSend(v72, "count");

                            if ((unint64_t)v73 <= v71)
                            {
                              v81 = 0;
                            }
                            else
                            {
                              v77 = v23[11];
                              v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "objectAtIndex:", objc_msgSend(v66, "proxyIndex")));

                              v212 = v78;
                              v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v78, "proxyURL"));
                              v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v79));

                              v208 = v80;
                              v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "host"));
                              v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("cloudflare.com"), CFSTR("fastly-edge.com"), CFSTR("akamaized.net"), 0));
                              v278 = 0u;
                              v279 = 0u;
                              v280 = 0u;
                              v281 = 0u;
                              v83 = v82;
                              v84 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v278, v323, 16);
                              if (v84)
                              {
                                v85 = v84;
                                v86 = *(_QWORD *)v279;
                                while (2)
                                {
                                  for (n = 0; n != v85; n = (char *)n + 1)
                                  {
                                    if (*(_QWORD *)v279 != v86)
                                      objc_enumerationMutation(v83);
                                    v88 = *(_QWORD *)(*((_QWORD *)&v278 + 1) + 8 * (_QWORD)n);
                                    if ((objc_msgSend(v81, "isEqualToString:", v88) & 1) == 0)
                                    {
                                      v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".%@"), v88));
                                      v90 = objc_msgSend(v81, "hasSuffix:", v89);

                                      if ((v90 & 1) == 0)
                                        continue;
                                    }

                                    v24 = (id *)(v204 + 80);
                                    v23 = (id *)v204;
                                    v25 = &AnalyticsSendEventLazy_ptr;
                                    goto LABEL_90;
                                  }
                                  v85 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v278, v323, 16);
                                  v23 = (id *)v204;
                                  v28 = v227;
                                  if (v85)
                                    continue;
                                  break;
                                }
                              }

                              v24 = (id *)(v204 + 80);
                            }
                            v91 = nplog_obj(v74, v75, v76);
                            v92 = objc_claimAutoreleasedReturnValue(v91);
                            if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 138412546;
                              v327 = v28;
                              v328 = 2112;
                              v329 = v81;
                              _os_log_error_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "Oblivious target %@ has proxy %@ not in the approved list", buf, 0x16u);
                            }

                            v205 = 1;
                            v25 = &AnalyticsSendEventLazy_ptr;
                          }
                          else
                          {
LABEL_90:
                            v93 = v23[18];
                            v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25[120], "numberWithUnsignedInt:", objc_msgSend(v66, "proxyIndex")));
                            v95 = objc_msgSend(v93, "containsObject:", v94) & v224;

                            if ((v95 & 1) == 0)
                              v221 += objc_msgSend(v66, "weight");
                            v28 = v227;
                          }
                        }
                      }
                      v64 = objc_msgSend(v231, "countByEnumeratingWithState:objects:count:", &v282, v324, 16);
                    }
                    while (v64);
                  }

                  v61 = v198 + 1;
                  v60 = v193;
                }
                while ((id)(v198 + 1) != v194);
                v194 = objc_msgSend(v193, "countByEnumeratingWithState:objects:count:", &v286, v325, 16);
              }
              while (v194);

              v99 = v221;
              if (((v221 == 0) & v205) != 0)
              {
                v100 = nplog_obj(v96, v97, v98);
                v101 = objc_claimAutoreleasedReturnValue(v100);
                if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v327 = v28;
                  _os_log_error_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "Oblivious target %@ has no proxies in the approved list, ignoring", buf, 0xCu);
                }
                goto LABEL_127;
              }
            }
            else
            {

              v99 = 0;
            }
            do
            {
              v102 = arc4random_uniform(v99 + 1);
              v103 = v102;
            }
            while (v99 && !v102);
            v276 = 0u;
            v277 = 0u;
            v274 = 0u;
            v275 = 0u;
            v101 = v23[17];
            v232 = -[NSObject countByEnumeratingWithState:objects:count:](v101, "countByEnumeratingWithState:objects:count:", &v274, v322, 16);
            if (v232)
            {
              v220 = v101;
              v104 = 0;
              v105 = *(_QWORD *)v275;
              v217 = *(_QWORD *)v275;
              do
              {
                v106 = 0;
                do
                {
                  if (*(_QWORD *)v275 != v105)
                    objc_enumerationMutation(v220);
                  v237 = v106;
                  v107 = *(void **)(*((_QWORD *)&v274 + 1) + 8 * v106);
                  v270 = 0u;
                  v271 = 0u;
                  v272 = 0u;
                  v273 = 0u;
                  v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "obliviousTargets"));
                  v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v270, v321, 16);
                  if (v109)
                  {
                    v110 = v109;
                    v111 = *(_QWORD *)v271;
                    while (2)
                    {
                      for (ii = 0; ii != v110; ii = (char *)ii + 1)
                      {
                        if (*(_QWORD *)v271 != v111)
                          objc_enumerationMutation(v108);
                        v113 = *(void **)(*((_QWORD *)&v270 + 1) + 8 * (_QWORD)ii);
                        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v113, "targetHost"));
                        v115 = objc_msgSend(v114, "isEqualToString:", v227);

                        if (v115)
                        {
                          v116 = v23[18];
                          v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v113, "proxyIndex")));
                          v118 = objc_msgSend(v116, "containsObject:", v117) & v224;

                          if ((v118 & 1) != 0)
                          {
                            v23 = (id *)v204;
                          }
                          else
                          {
                            v104 += objc_msgSend(v113, "weight");
                            v23 = (id *)v204;
                            if (v103 <= v104)
                            {
                              v119 = objc_msgSend(v196, "setObject:forKeyedSubscript:", v113, v227);
                              v122 = nplog_obj(v119, v120, v121);
                              v123 = objc_claimAutoreleasedReturnValue(v122);
                              if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
                              {
                                *(_DWORD *)buf = 138412546;
                                v327 = v113;
                                v328 = 2112;
                                v329 = v227;
                                _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_INFO, "Selected oblivious target config %@ for %@", buf, 0x16u);
                              }

                              v24 = (id *)(v204 + 80);
                              goto LABEL_125;
                            }
                          }
                        }
                      }
                      v110 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v270, v321, 16);
                      if (v110)
                        continue;
                      break;
                    }
                  }

                  v106 = v237 + 1;
                  v24 = (id *)(v204 + 80);
                  v25 = &AnalyticsSendEventLazy_ptr;
                  v105 = v217;
                }
                while ((id)(v237 + 1) != v232);
                v232 = -[NSObject countByEnumeratingWithState:objects:count:](v220, "countByEnumeratingWithState:objects:count:", &v274, v322, 16);
              }
              while (v232);
LABEL_126:
              v101 = v220;
            }
LABEL_127:

            v26 = v191 + 1;
          }
          while ((id)(v191 + 1) != v190);
          v190 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v298, v332, 16);
        }
        while (v190);
      }

      v206 = objc_alloc_init((Class)NSMutableArray);
      v266 = 0u;
      v267 = 0u;
      v268 = 0u;
      v269 = 0u;
      v195 = v23[17];
      v199 = (char *)objc_msgSend(v195, "countByEnumeratingWithState:objects:count:", &v266, v320, 16);
      if (v199)
      {
        v197 = *(_QWORD *)v267;
        do
        {
          v124 = 0;
          do
          {
            if (*(_QWORD *)v267 != v197)
              objc_enumerationMutation(v195);
            v202 = v124;
            v125 = *(void **)(*((_QWORD *)&v266 + 1) + 8 * (_QWORD)v124);
            v262 = 0u;
            v263 = 0u;
            v264 = 0u;
            v265 = 0u;
            v209 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "obliviousTargets"));
            v233 = objc_msgSend(v209, "countByEnumeratingWithState:objects:count:", &v262, v319, 16);
            if (v233)
            {
              v228 = *(_QWORD *)v263;
              do
              {
                v126 = 0;
                do
                {
                  if (*(_QWORD *)v263 != v228)
                    objc_enumerationMutation(v209);
                  v238 = v126;
                  v127 = *(void **)(*((_QWORD *)&v262 + 1) + 8 * v126);
                  v258 = 0u;
                  v259 = 0u;
                  v260 = 0u;
                  v261 = 0u;
                  v128 = *v201;
                  v129 = objc_msgSend(v128, "countByEnumeratingWithState:objects:count:", &v258, v318, 16);
                  if (v129)
                  {
                    v130 = v129;
                    v131 = *(_QWORD *)v259;
                    do
                    {
                      for (jj = 0; jj != v130; jj = (char *)jj + 1)
                      {
                        if (*(_QWORD *)v259 != v131)
                          objc_enumerationMutation(v128);
                        v133 = *(void **)(*((_QWORD *)&v258 + 1) + 8 * (_QWORD)jj);
                        v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "obliviousConfig"));
                        v135 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "obliviousHTTPConfig"));
                        if ((objc_msgSend(v134, "isEqualToData:", v135) & 1) != 0)
                        {
                          v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "obliviousTarget"));
                          v137 = objc_msgSend(v136, "isEqual:", v127);

                          if ((v137 & 1) != 0)
                            goto LABEL_153;
                        }
                        else
                        {

                        }
                      }
                      v130 = objc_msgSend(v128, "countByEnumeratingWithState:objects:count:", &v258, v318, 16);
                    }
                    while (v130);
                  }

                  v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v127, "targetHost"));
                  v128 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v196, "objectForKeyedSubscript:", v138));

                  if (v128 && !objc_msgSend(v128, "isEqual:", v127))
                  {
LABEL_153:
                    v23 = (id *)v204;
                  }
                  else
                  {
                    v139 = *(id *)(v204 + 88);
                    v225 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v139, "objectAtIndex:", objc_msgSend(v127, "proxyIndex")));

                    v140 = sub_100028CFC(v204, v225);
                    v222 = (id)objc_claimAutoreleasedReturnValue(v140);
                    v218 = [NSPObliviousPath alloc];
                    v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "obliviousHTTPConfig"));
                    v213 = objc_msgSend(v125, "obliviousHTTPType");
                    v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "transparencyKeyBundle"));
                    v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "transparencyProof"));
                    v144 = *(id *)(v204 + 368);
                    v145 = +[NPUtilities copyCurrentNetworkCharacteristicsForPath:](NPUtilities, "copyCurrentNetworkCharacteristicsForPath:", v144);
                    LOBYTE(v186) = 0;
                    v146 = -[NSPObliviousPath initWithDelegate:obliviousConfig:obliviousHTTPType:transparencyKeyBundle:transparencyProof:obliviousTarget:proxyInfo:allowFailOpen:networkCharacteristics:](v218, "initWithDelegate:obliviousConfig:obliviousHTTPType:transparencyKeyBundle:transparencyProof:obliviousTarget:proxyInfo:allowFailOpen:networkCharacteristics:", v204, v141, v213, v142, v143, v127, v222, v186, v145);

                    v23 = (id *)v204;
                    objc_msgSend(v206, "addObject:", v146);

                  }
                  v126 = v238 + 1;
                }
                while ((id)(v238 + 1) != v233);
                v233 = objc_msgSend(v209, "countByEnumeratingWithState:objects:count:", &v262, v319, 16);
              }
              while (v233);
            }

            v124 = v202 + 1;
          }
          while (v202 + 1 != v199);
          v199 = (char *)objc_msgSend(v195, "countByEnumeratingWithState:objects:count:", &v266, v320, 16);
        }
        while (v199);
      }

      v147 = *v201;
      objc_msgSend(v147, "addObjectsFromArray:", v206);

      v200 = objc_alloc_init((Class)NSMutableArray);
      v254 = 0u;
      v255 = 0u;
      v256 = 0u;
      v257 = 0u;
      v203 = *v201;
      v214 = (char *)objc_msgSend(v203, "countByEnumeratingWithState:objects:count:", &v254, v317, 16);
      if (v214)
      {
        v210 = *(id *)v255;
        do
        {
          v148 = 0;
          do
          {
            if (*(id *)v255 != v210)
              objc_enumerationMutation(v203);
            v234 = v148;
            v149 = *(void **)(*((_QWORD *)&v254 + 1) + 8 * (_QWORD)v148);
            v250 = 0u;
            v251 = 0u;
            v252 = 0u;
            v253 = 0u;
            v150 = v23[17];
            v223 = objc_msgSend(v150, "countByEnumeratingWithState:objects:count:", &v250, v316, 16);
            if (v223)
            {
              v151 = *(_QWORD *)v251;
              v229 = v150;
              v219 = *(_QWORD *)v251;
              do
              {
                v152 = 0;
                do
                {
                  if (*(_QWORD *)v251 != v151)
                    objc_enumerationMutation(v150);
                  v226 = v152;
                  v153 = *(void **)(*((_QWORD *)&v250 + 1) + 8 * v152);
                  v246 = 0u;
                  v247 = 0u;
                  v248 = 0u;
                  v249 = 0u;
                  v239 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "obliviousTargets"));
                  v154 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v246, v315, 16);
                  if (v154)
                  {
                    v155 = v154;
                    v156 = *(_QWORD *)v247;
                    do
                    {
                      for (kk = 0; kk != v155; kk = (char *)kk + 1)
                      {
                        if (*(_QWORD *)v247 != v156)
                          objc_enumerationMutation(v239);
                        v158 = *(void **)(*((_QWORD *)&v246 + 1) + 8 * (_QWORD)kk);
                        v159 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v153, "obliviousHTTPConfig"));
                        v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v149, "obliviousConfig"));
                        if ((objc_msgSend(v159, "isEqualToData:", v160) & 1) != 0)
                        {
                          v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v149, "obliviousTarget"));
                          v162 = objc_msgSend(v158, "isEqual:", v161);

                          if (v162)
                          {
                            v163 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v158, "targetHost"));
                            v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v196, "objectForKeyedSubscript:", v163));

                            if (v164)
                            {
                              v165 = objc_msgSend(v164, "isEqual:", v158);

                              if ((v165 & 1) != 0)
                              {

                                v23 = (id *)v204;
                                goto LABEL_184;
                              }
                            }
                          }
                        }
                        else
                        {

                        }
                      }
                      v155 = objc_msgSend(v239, "countByEnumeratingWithState:objects:count:", &v246, v315, 16);
                    }
                    while (v155);
                  }

                  v152 = v226 + 1;
                  v23 = (id *)v204;
                  v150 = v229;
                  v151 = v219;
                }
                while ((id)(v226 + 1) != v223);
                v223 = objc_msgSend(v229, "countByEnumeratingWithState:objects:count:", &v250, v316, 16);
              }
              while (v223);
            }

            objc_msgSend(v149, "removeProxyAgents");
            objc_msgSend(v200, "addObject:", v149);
LABEL_184:
            v148 = v234 + 1;
          }
          while (v234 + 1 != v214);
          v214 = (char *)objc_msgSend(v203, "countByEnumeratingWithState:objects:count:", &v254, v317, 16);
        }
        while (v214);
      }

      v166 = *v201;
      objc_msgSend(v166, "removeObjectsInArray:", v200);

      v244 = 0u;
      v245 = 0u;
      v242 = 0u;
      v243 = 0u;
      v167 = *v201;
      v168 = objc_msgSend(v167, "countByEnumeratingWithState:objects:count:", &v242, v314, 16);
      if (v168)
      {
        v169 = v168;
        v170 = *(_QWORD *)v243;
        do
        {
          v171 = 0;
          do
          {
            if (*(_QWORD *)v243 != v170)
              objc_enumerationMutation(v167);
            v172 = *(void **)(*((_QWORD *)&v242 + 1) + 8 * (_QWORD)v171);
            objc_msgSend(v172, "resetStats");
            objc_msgSend(v172, "resetError");
            v173 = objc_msgSend(v172, "pathReady");
            if ((_DWORD)v173)
            {
              v176 = nplog_obj(v173, v174, v175);
              v177 = objc_claimAutoreleasedReturnValue(v176);
              if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
              {
                v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "shortName"));
                *(_DWORD *)buf = 138412290;
                v327 = v178;
                _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEFAULT, "Setting up oblivious path (%@)", buf, 0xCu);

              }
              objc_msgSend(v172, "setupProxyAgentsForceUpdateDelegate:", 1);
            }
            else
            {
              v179 = objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "proxyInfo"));
              v180 = (void *)v179;
              if (v179)
                v181 = *(void **)(v179 + 24);
              else
                v181 = 0;
              v182 = v181;

              v183 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v172, "proxyInfo"));
              v240[0] = _NSConcreteStackBlock;
              v240[1] = 3221225472;
              v240[2] = sub_10002DBC4;
              v240[3] = &unk_1000F5720;
              v184 = v182;
              v241 = v184;
              sub_10000C280((uint64_t)v183, v240);

            }
            v171 = (char *)v171 + 1;
          }
          while (v169 != v171);
          v185 = objc_msgSend(v167, "countByEnumeratingWithState:objects:count:", &v242, v314, 16);
          v169 = v185;
        }
        while (v185);
      }

      if (!v187)
        *(_BYTE *)(v204 + 10) = 0;
      sub_1000291A4((id *)v204);
      objc_msgSend((id)v204, "updateUserEventAgentData");

    }
  }
}

void sub_10002DBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token fetch for Oblivious[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_10002FB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_100030C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
      v7 = (_QWORD *)v7[3];
    v8 = v7;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
    v10 = (void *)v9;
    v11 = CFSTR("failed");
    if (v3)
      v11 = CFSTR("succesfully");
    v12 = 138412546;
    v13 = v9;
    v14 = 2112;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token for \"%@\" fetched %@", (uint8_t *)&v12, 0x16u);

  }
}

void sub_100030D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
      v7 = (_QWORD *)v7[3];
    v8 = v7;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
    v10 = (void *)v9;
    v11 = CFSTR("failed");
    if (v3)
      v11 = CFSTR("succesfully");
    v12 = 138412546;
    v13 = v9;
    v14 = 2112;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token for \"%@\" fetched %@", (uint8_t *)&v12, 0x16u);

  }
}

void sub_100030E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
      v7 = (_QWORD *)v7[3];
    v8 = v7;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
    v10 = (void *)v9;
    v11 = CFSTR("failed");
    if (v3)
      v11 = CFSTR("succesfully");
    v12 = 138412546;
    v13 = v9;
    v14 = 2112;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token for \"%@\" fetched %@", (uint8_t *)&v12, 0x16u);

  }
}

void sub_100030F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
      v7 = (_QWORD *)v7[3];
    v8 = v7;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
    v10 = (void *)v9;
    v11 = CFSTR("failed");
    if (v3)
      v11 = CFSTR("succesfully");
    v12 = 138412546;
    v13 = v9;
    v14 = 2112;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token for \"%@\" fetched %@", (uint8_t *)&v12, 0x16u);

  }
}

void sub_100031050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD **)(a1 + 32);
    if (v7)
      v7 = (_QWORD *)v7[3];
    v8 = v7;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "vendor"));
    v10 = (void *)v9;
    v11 = CFSTR("failed");
    if (v3)
      v11 = CFSTR("succesfully");
    v12 = 138412546;
    v13 = v9;
    v14 = 2112;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token for \"%@\" fetched %@", (uint8_t *)&v12, 0x16u);

  }
}

void sub_100031148(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  char *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  id v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  char *v49;
  id v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  void *i;
  void *v79;
  void *v80;
  id v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  void *v87;
  void *v88;
  unsigned int v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  NSPProxyTokenInfo *v105;
  void *v106;
  NSPProxyTokenInfo *v107;
  BOOL v108;
  char v109;
  void *v110;
  id v111;
  id v112;
  id v113;
  NSPQuicProxyPath *v114;
  void *v115;
  id v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  void *j;
  void *v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  void *k;
  void *v136;
  uint64_t v137;
  unsigned int v138;
  void *v139;
  NSObject *v140;
  NSPQuicProxyPath *v141;
  void *v142;
  id v143;
  uint64_t v144;
  id v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  _QWORD v162[4];
  id v163;
  _QWORD v164[4];
  id v165;
  _QWORD v166[4];
  id v167;
  _QWORD v168[4];
  id v169;
  uint8_t v170[16];
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _BYTE v175[128];
  _BYTE v176[128];
  _BYTE v177[128];
  uint8_t v178[128];
  uint8_t buf[4];
  const char *v180;
  __int16 v181;
  void *v182;

  if (a1)
  {
    v2 = *(void **)(a1 + 224);
    if (v2)
    {
      v3 = objc_msgSend(v2, "proxyPathReady");
      if ((_DWORD)v3)
      {
        v6 = nplog_obj(v3, v4, v5);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(id *)(a1 + 224);
          v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ingressProxy"));
          v10 = (void *)v9;
          if (v9)
            v11 = *(void **)(v9 + 24);
          else
            v11 = 0;
          v12 = v11;
          v13 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "vendor"));
          v14 = *(id *)(a1 + 224);
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "egressProxy"));
          v16 = (void *)v15;
          if (v15)
            v17 = *(void **)(v15 + 24);
          else
            v17 = 0;
          v18 = v17;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "vendor"));
          *(_DWORD *)buf = 138412546;
          v180 = v13;
          v181 = 2112;
          v182 = v19;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting quic proxy path (%@-%@)", buf, 0x16u);

        }
        sub_10002988C(a1, v20, v21);
      }
      else
      {
        v22 = *(id *)(a1 + 224);
        v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "ingressProxy"));
        v24 = (void *)v23;
        if (v23)
          v25 = *(void **)(v23 + 24);
        else
          v25 = 0;
        v26 = v25;

        v27 = *(id *)(a1 + 224);
        v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "egressProxy"));
        v29 = (void *)v28;
        if (v28)
          v30 = *(void **)(v28 + 24);
        else
          v30 = 0;
        v31 = v30;

        v32 = *(id *)(a1 + 224);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "ingressProxy"));
        v168[0] = _NSConcreteStackBlock;
        v168[1] = 3221225472;
        v168[2] = sub_100031CB0;
        v168[3] = &unk_1000F5720;

        v169 = v26;
        v34 = v26;
        sub_10000C280((uint64_t)v33, v168);

        v35 = *(id *)(a1 + 224);
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "egressProxy"));
        v166[0] = _NSConcreteStackBlock;
        v166[1] = 3221225472;
        v166[2] = sub_100031D94;
        v166[3] = &unk_1000F5720;

        v167 = v31;
        v37 = v31;
        sub_10000C280((uint64_t)v36, v166);

      }
    }
    v38 = *(void **)(a1 + 232);
    if (v38)
    {
      v39 = objc_msgSend(v38, "proxyPathReady");
      if ((_DWORD)v39)
      {
        v42 = nplog_obj(v39, v40, v41);
        v43 = objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          v44 = *(id *)(a1 + 232);
          v45 = objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "ingressProxy"));
          v46 = (void *)v45;
          if (v45)
            v47 = *(void **)(v45 + 24);
          else
            v47 = 0;
          v48 = v47;
          v49 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "vendor"));
          v50 = *(id *)(a1 + 232);
          v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "egressProxy"));
          v52 = (void *)v51;
          if (v51)
            v53 = *(void **)(v51 + 24);
          else
            v53 = 0;
          v54 = v53;
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "vendor"));
          *(_DWORD *)buf = 138412546;
          v180 = v49;
          v181 = 2112;
          v182 = v55;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Setting fallback proxy path (%@-%@)", buf, 0x16u);

        }
        sub_10002AF70(a1, v56, v57);
      }
      else
      {
        v58 = *(id *)(a1 + 232);
        v59 = objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "ingressProxy"));
        v60 = (void *)v59;
        if (v59)
          v61 = *(void **)(v59 + 24);
        else
          v61 = 0;
        v62 = v61;

        v63 = *(id *)(a1 + 232);
        v64 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "egressProxy"));
        v65 = (void *)v64;
        if (v64)
          v66 = *(void **)(v64 + 24);
        else
          v66 = 0;
        v67 = v66;

        v68 = *(id *)(a1 + 232);
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "ingressProxy"));
        v164[0] = _NSConcreteStackBlock;
        v164[1] = 3221225472;
        v164[2] = sub_100031E78;
        v164[3] = &unk_1000F5720;

        v165 = v62;
        v70 = v62;
        sub_10000C280((uint64_t)v69, v164);

        v71 = *(id *)(a1 + 232);
        v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "egressProxy"));
        v162[0] = _NSConcreteStackBlock;
        v162[1] = 3221225472;
        v162[2] = sub_100031F5C;
        v162[3] = &unk_1000F5720;

        v163 = v67;
        v73 = v67;
        sub_10000C280((uint64_t)v72, v162);

      }
    }
    v160 = 0u;
    v161 = 0u;
    v158 = 0u;
    v159 = 0u;
    v74 = *(id *)(a1 + 312);
    v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v158, v178, 16);
    if (v75)
    {
      v76 = v75;
      v77 = *(_QWORD *)v159;
      do
      {
        for (i = 0; i != v76; i = (char *)i + 1)
        {
          if (*(_QWORD *)v159 != v77)
            objc_enumerationMutation(v74);
          v79 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * (_QWORD)i);
          v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 312), "objectForKeyedSubscript:", v79));
          if (objc_msgSend(v80, "proxyPathReady"))
            sub_10002A778(a1, v79);

        }
        v76 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v158, v178, 16);
      }
      while (v76);
    }

    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v81 = *(id *)(a1 + 336);
    v145 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v154, v177, 16);
    if (v145)
    {
      v82 = *(_QWORD *)v155;
      v143 = v81;
      v144 = *(_QWORD *)v155;
      do
      {
        v83 = 0;
        do
        {
          if (*(_QWORD *)v155 != v82)
            objc_enumerationMutation(v81);
          v84 = *(void **)(*((_QWORD *)&v154 + 1) + 8 * (_QWORD)v83);
          v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 336), "objectForKeyedSubscript:", v84));
          if (v85)
          {
            v86 = *(id *)(a1 + 368);
            v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "interface"));
            v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "interfaceName"));
            v89 = objc_msgSend(v84, "isEqualToString:", v88);

            if (v89)
            {
              v90 = v84;
              v91 = v85;
              v92 = objc_msgSend((id)a1, "forceFallback");
              if ((v92 & 1) == 0)
              {
                if (v90)
                {
                  v173 = 0u;
                  v174 = 0u;
                  v171 = 0u;
                  v172 = 0u;
                  v95 = *(id *)(a1 + 88);
                  v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v171, buf, 16);
                  if (v96)
                  {
                    v97 = v96;
                    v98 = *(_QWORD *)v172;
LABEL_50:
                    v99 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v172 != v98)
                        objc_enumerationMutation(v95);
                      v100 = *(void **)(*((_QWORD *)&v171 + 1) + 8 * v99);
                      if (objc_msgSend(v100, "proxyHop") == 2
                        || objc_msgSend(v100, "proxyHop") == 3)
                      {
                        break;
                      }
                      if (v97 == (id)++v99)
                      {
                        v97 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v171, buf, 16);
                        if (v97)
                          goto LABEL_50;
                        goto LABEL_57;
                      }
                    }
                    v104 = v100;

                    if (!v104)
                      goto LABEL_64;
                    v105 = sub_100028CFC(a1, v91);
                    v106 = (void *)objc_claimAutoreleasedReturnValue(v105);
                    v140 = v104;
                    v107 = sub_100028CFC(a1, v104);
                    v139 = (void *)objc_claimAutoreleasedReturnValue(v107);
                    v141 = [NSPQuicProxyPath alloc];
                    v142 = v91;
                    v138 = objc_msgSend(v91, "supportsFallback");
                    v108 = *(_BYTE *)(a1 + 13) == 0;
                    v109 = *(_BYTE *)(a1 + 15);
                    v110 = *(void **)(a1 + 400);
                    v111 = *(id *)(a1 + 368);
                    v112 = v110;
                    v113 = +[NPUtilities copyCurrentNetworkCharacteristicsForPath:](NPUtilities, "copyCurrentNetworkCharacteristicsForPath:", v111);
                    BYTE2(v137) = v109;
                    BYTE1(v137) = v108;
                    LOBYTE(v137) = 0;
                    v114 = -[NSPQuicProxyPath initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:](v141, "initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:", a1, v106, v139, 0, v138, 1, v137, v112, v113);

                    v115 = *(void **)(a1 + 328);
                    if (!v115)
                    {
                      v116 = objc_alloc_init((Class)NSMutableDictionary);
                      v117 = *(void **)(a1 + 328);
                      *(_QWORD *)(a1 + 328) = v116;

                      v115 = *(void **)(a1 + 328);
                    }
                    objc_msgSend(v115, "setObject:forKey:", v114, v90);
                    v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 336), "objectForKey:", v90));

                    if (v118)
                      objc_msgSend(*(id *)(a1 + 336), "removeObjectForKey:", v90);
                    v91 = v142;
                    v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "vendor"));
                    v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Agent_%@_%@"), v90, v119));

                    -[NSPQuicProxyPath setupNetworkSpecificMultiHopProxyRegistrations:](v114, "setupNetworkSpecificMultiHopProxyRegistrations:", v120);
                    -[NSPProxyPath resetStats](v114, "resetStats");
                    -[NSPProxyPath resetError](v114, "resetError");
                    ++*(_QWORD *)(a1 + 544);
                    +[NPUtilities postNotification:value:](NPUtilities, "postNotification:value:", CFSTR("com.apple.networkserviceproxy.privacy-proxy-path-changed"));

                    v81 = v143;
                    v121 = v140;
                  }
                  else
                  {
LABEL_57:

LABEL_64:
                    v122 = nplog_obj(v101, v102, v103);
                    v121 = objc_claimAutoreleasedReturnValue(v122);
                    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)v170 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "Could not find a suitable egress proxy", v170, 2u);
                    }
                    v81 = v143;
                  }
                }
                else
                {
                  v123 = nplog_obj(v92, v93, v94);
                  v121 = objc_claimAutoreleasedReturnValue(v123);
                  if (os_log_type_enabled(v121, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 136315138;
                    v180 = "-[NSPPrivacyProxyAgentManager setupNetworkSpecificQUICProxyPathFor:andIngress:]";
                    _os_log_fault_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_FAULT, "%s called with null networkPath", buf, 0xCu);
                  }
                }

              }
              v82 = v144;
            }
          }

          v83 = (char *)v83 + 1;
        }
        while (v83 != v145);
        v124 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v154, v177, 16);
        v145 = v124;
      }
      while (v124);
    }

    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v125 = *(id *)(a1 + 320);
    v126 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v150, v176, 16);
    if (v126)
    {
      v127 = v126;
      v128 = *(_QWORD *)v151;
      do
      {
        for (j = 0; j != v127; j = (char *)j + 1)
        {
          if (*(_QWORD *)v151 != v128)
            objc_enumerationMutation(v125);
          v130 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * (_QWORD)j);
          if (objc_msgSend(v130, "pathReady"))
            objc_msgSend(v130, "setupProxyAgentsForceUpdateDelegate:", 0);
        }
        v127 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v150, v176, 16);
      }
      while (v127);
    }

    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v131 = *(id *)(a1 + 344);
    v132 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v146, v175, 16);
    if (v132)
    {
      v133 = v132;
      v134 = *(_QWORD *)v147;
      do
      {
        for (k = 0; k != v133; k = (char *)k + 1)
        {
          if (*(_QWORD *)v147 != v134)
            objc_enumerationMutation(v131);
          v136 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * (_QWORD)k);
          if (objc_msgSend(v136, "pathReady"))
            objc_msgSend(v136, "setupProxyAgentsForceUpdateDelegate:", 0);
        }
        v133 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v146, v175, 16);
      }
      while (v133);
    }

    sub_1000291A4((id *)a1);
    objc_msgSend((id)a1, "updateUserEventAgentData");
    sub_100029EE4(a1);
  }
}

void sub_100031CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Token fetch for Quic[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_100031D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Token fetch for Quic[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_100031E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token fetch for Fallback[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_100031F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vendor"));
    v8 = (void *)v7;
    v9 = CFSTR("failed");
    if (v3)
      v9 = CFSTR("succeeded");
    v10 = 138412546;
    v11 = v7;
    v12 = 2112;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Token fetch for Fallback[%@] %@", (uint8_t *)&v10, 0x16u);

  }
}

void sub_100032040(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  dispatch_source_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  dispatch_time_t v14;
  void *v15;
  NSObject *v16;
  _QWORD handler[4];
  id v18;
  id buf[2];

  if (a1)
  {
    v2 = *(id *)(a1 + 200);
    if (v2)
    {

    }
    else if (!*(_BYTE *)(a1 + 17))
    {
      v5 = nplog_obj(0, v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "set token replenish timer", (uint8_t *)buf, 2u);
      }

      v8 = NPGetInternalQueue(v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v9);
      v11 = *(void **)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v10;

      v12 = *(void **)(a1 + 200);
      if (v12)
      {
        v13 = v12;
        v14 = dispatch_time(0, 60000000000);
        dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0);

        objc_initWeak(buf, (id)a1);
        v15 = *(void **)(a1 + 200);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1000321CC;
        handler[3] = &unk_1000F57C0;
        v16 = v15;
        objc_copyWeak(&v18, buf);
        dispatch_source_set_event_handler(v16, handler);

        dispatch_resume(*(dispatch_object_t *)(a1 + 200));
        objc_destroyWeak(&v18);
        objc_destroyWeak(buf);
      }
    }
  }
}

void sub_1000321CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  dispatch_source_t *WeakRetained;
  dispatch_source_t *v7;
  dispatch_source_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id *v52;
  NSPOutageReasonStats *v53;
  dispatch_source_t v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  int v59;
  void *v60;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v59) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Replenish timer fired", (uint8_t *)&v59, 2u);
  }

  WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(WeakRetained[25]);
    v8 = v7[25];
    v7[25] = 0;

    v9 = v7[26];
    if (v9
      && (v10 = v9,
          v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject ingressProxy](v7[26], "ingressProxy")),
          v12 = sub_10000D9B0((uint64_t)v11),
          v11,
          v10,
          !v12))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject ingressProxy](v7[26], "ingressProxy"));
      v39 = nplog_obj(v25, v37, v38);
      v29 = objc_claimAutoreleasedReturnValue(v39);
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        goto LABEL_29;
      v30 = v7[26];
      v40 = objc_claimAutoreleasedReturnValue(-[NSObject ingressProxy](v30, "ingressProxy"));
      v32 = (void *)v40;
      if (v40)
        v41 = *(void **)(v40 + 24);
      else
        v41 = 0;
      v34 = v41;
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "proxyURL"));
      v59 = 138412290;
      v60 = v35;
      v36 = "Ingress quic proxy %@ has 0 tokens";
    }
    else
    {
      v13 = v7[27];
      if (v13
        && (v14 = v13,
            v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject ingressProxy](v7[27], "ingressProxy")),
            v16 = sub_10000D9B0((uint64_t)v15),
            v15,
            v14,
            !v16))
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject ingressProxy](v7[27], "ingressProxy"));
        v44 = nplog_obj(v25, v42, v43);
        v29 = objc_claimAutoreleasedReturnValue(v44);
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
          goto LABEL_29;
        v30 = v7[27];
        v45 = objc_claimAutoreleasedReturnValue(-[NSObject ingressProxy](v30, "ingressProxy"));
        v32 = (void *)v45;
        if (v45)
          v46 = *(void **)(v45 + 24);
        else
          v46 = 0;
        v34 = v46;
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "proxyURL"));
        v59 = 138412290;
        v60 = v35;
        v36 = "Ingress fallback proxy %@ has 0 tokens";
      }
      else
      {
        v17 = v7[26];
        if (v17
          && (v18 = v17,
              v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject egressProxy](v7[26], "egressProxy")),
              v20 = sub_10000D9B0((uint64_t)v19),
              v19,
              v18,
              !v20))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject egressProxy](v7[26], "egressProxy"));
          v49 = nplog_obj(v25, v47, v48);
          v29 = objc_claimAutoreleasedReturnValue(v49);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            goto LABEL_29;
          v30 = v7[26];
          v50 = objc_claimAutoreleasedReturnValue(-[NSObject ingressProxy](v30, "ingressProxy"));
          v32 = (void *)v50;
          if (v50)
            v51 = *(void **)(v50 + 24);
          else
            v51 = 0;
          v34 = v51;
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "proxyURL"));
          v59 = 138412290;
          v60 = v35;
          v36 = "Egress quic proxy %@ has 0 tokens";
        }
        else
        {
          v21 = v7[27];
          if (!v21)
            goto LABEL_33;
          v22 = v21;
          v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject egressProxy](v7[27], "egressProxy"));
          v24 = sub_10000D9B0((uint64_t)v23);

          if (v24)
            goto LABEL_33;
          v25 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject egressProxy](v7[27], "egressProxy"));
          v28 = nplog_obj(v25, v26, v27);
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            goto LABEL_29;
          v30 = v7[27];
          v31 = objc_claimAutoreleasedReturnValue(-[NSObject egressProxy](v30, "egressProxy"));
          v32 = (void *)v31;
          if (v31)
            v33 = *(void **)(v31 + 24);
          else
            v33 = 0;
          v34 = v33;
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "proxyURL"));
          v59 = 138412290;
          v60 = v35;
          v36 = "Egress fallback proxy %@ has 0 tokens";
        }
      }
    }
    _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, v36, (uint8_t *)&v59, 0xCu);

LABEL_29:
    if (v25)
    {
      v52 = v25;
      if (!*((_BYTE *)v7 + 17))
      {
        v53 = objc_alloc_init(NSPOutageReasonStats);
        v54 = v7[64];
        v7[64] = &v53->super.super;

        v55 = (void *)objc_claimAutoreleasedReturnValue(-[dispatch_source_t tierString](v7, "tierString"));
        -[NSObject setTierType:](v7[64], "setTierType:", v55);

        -[NSObject setOutageReasonType:](v7[64], "setOutageReasonType:", CFSTR("Token"));
        -[NSObject setOutageReasonSubType:](v7[64], "setOutageReasonSubType:", CFSTR("TokenFetchFailure"));
        v56 = v52[3];
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "proxyURL"));
        -[NSObject setTokenProxy:](v7[64], "setTokenProxy:", v57);

      }
      *((_BYTE *)v7 + 17) = 1;
      v58 = objc_loadWeakRetained((id *)v7 + 10);
      objc_msgSend(v58, "tokenFetchOutage");

      -[dispatch_source_t updateUserEventAgentData](v7, "updateUserEventAgentData");
    }
  }
LABEL_33:

}

void sub_100032BD8(void *a1, void *a2, uint64_t a3)
{
  NSPSwitchEgressProxyStats *v5;
  void *v6;
  void *v7;
  id *v8;

  v8 = a2;
  if (a1)
  {
    v5 = objc_alloc_init(NSPSwitchEgressProxyStats);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "tierString"));
    -[NSPSwitchEgressProxyStats setTierType:](v5, "setTierType:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8[3], "vendor"));
    -[NSPSwitchEgressProxyStats setVendor:](v5, "setVendor:", v7);

    -[NSPSwitchEgressProxyStats setPrimaryProxy:](v5, "setPrimaryProxy:", a3 ^ 1);
    -[NSPSwitchEgressProxyStats setFallbackProxy:](v5, "setFallbackProxy:", a3);
    -[NSPProxyAnalytics sendAnalytics](v5, "sendAnalytics");

  }
}

void sub_10003315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100033184(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id *v9;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v3 = objc_loadWeakRetained(WeakRetained + 10);
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      v6 = *(_QWORD *)(v5 + 24);
    else
      v6 = 0;
    objc_msgSend(v3, "badTokenInfoForProxy:", v6);

  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;

}

void sub_10003346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100033494(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v2 = objc_loadWeakRetained(WeakRetained + 10);
    objc_msgSend(v2, "tokenIssuanceLimitReached");

  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

id sub_1000336B8(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "host"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "port"));

  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "port"));
    objc_msgSend(v3, "appendFormat:", CFSTR(".%@"), v5);

  }
  return v3;
}

void sub_100036084(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id WeakRetained;
  _QWORD v7[5];
  id v8;
  id location;
  _QWORD v10[5];
  id v11;

  v5 = a2;
  if (a1 && !*(_BYTE *)(a1 + 16))
  {
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x3032000000;
    v10[3] = sub_1000030EC;
    v10[4] = sub_10000C20C;
    v11 = (id)os_transaction_create("com.apple.networkserviceproxy.proxyConnectivityCheck");
    objc_initWeak(&location, (id)a1);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000361D4;
    v7[3] = &unk_1000F5B68;
    objc_copyWeak(&v8, &location);
    v7[4] = v10;
    objc_msgSend(WeakRetained, "checkPrivacyProxyConnectivityOnInterface:proxyConnectivityCheckType:completionHandler:", v5, a3, v7);

    *(_BYTE *)(a1 + 16) = 1;
    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
    _Block_object_dispose(v10, 8);

  }
}

void sub_1000361AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1000361D4(uint64_t a1)
{
  _BYTE *WeakRetained;
  uint64_t v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
    WeakRetained[16] = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  v5 = WeakRetained;

}

void sub_100036224(id *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSPOutageReasonStats *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  const char *v36;

  v5 = a2;
  if (v5)
  {
    v6 = objc_alloc_init(NSPOutageReasonStats);
    v7 = a1[63];
    a1[63] = v6;

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "tierString"));
    objc_msgSend(a1[63], "setTierType:", v8);

    objc_msgSend(a1[63], "setOutageReasonType:", CFSTR("Proxy"));
    objc_msgSend(a1[63], "setOutageReasonSubType:", v5);
    v9 = a1[26];
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ingressProxy"));
    v11 = (void *)v10;
    if (v10)
      v12 = *(void **)(v10 + 24);
    else
      v12 = 0;
    v13 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "proxyURL"));
    objc_msgSend(a1[63], "setPrimaryIngressProxy:", v14);

    v15 = a1[26];
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "egressProxy"));
    v17 = (void *)v16;
    if (v16)
      v18 = *(void **)(v16 + 24);
    else
      v18 = 0;
    v19 = v18;
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "proxyURL"));
    objc_msgSend(a1[63], "setPrimaryEgressProxy:", v20);

    v21 = a1[27];
    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "ingressProxy"));
    v23 = (void *)v22;
    if (v22)
      v24 = *(void **)(v22 + 24);
    else
      v24 = 0;
    v25 = v24;
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "tcpProxyFqdn"));
    objc_msgSend(a1[63], "setFallbackIngressProxy:", v26);

    v27 = a1[27];
    v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "egressProxy"));
    v29 = (void *)v28;
    if (v28)
      v30 = *(void **)(v28 + 24);
    else
      v30 = 0;
    v31 = v30;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "tcpProxyFqdn"));
    objc_msgSend(a1[63], "setFallbackEgressProxy:", v32);

  }
  else
  {
    v33 = nplog_obj(0, v3, v4);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
    {
      v35 = 136315138;
      v36 = "-[NSPPrivacyProxyAgentManager setProxyOutageReason:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "%s called with null outageReasonSubType", (uint8_t *)&v35, 0xCu);
    }

  }
}

void sub_1000364B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSPProber *v24;
  int v25;
  id v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSPProber *v31;
  int v32;
  id v33;
  id *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __CFString *v39;
  int v40;
  __CFString *v41;

  if (!*(_QWORD *)(a1 + 520))
  {
    *(_QWORD *)(a1 + 520) = a2;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    objc_storeStrong((id *)(a1 + 272), v11);

    v15 = nplog_obj(v12, v13, v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 520);
      v18 = CFSTR("Unknown");
      if (v17 == 2)
        v18 = CFSTR("DNS");
      if (v17 == 1)
        v19 = CFSTR("Proxy");
      else
        v19 = (__CFString *)v18;
      v20 = v19;
      v40 = 138412290;
      v41 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Start probing[%@]", (uint8_t *)&v40, 0xCu);

    }
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        v38 = nplog_obj(v21, v22, v23);
        v5 = objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          v39 = *(__CFString **)(a1 + 520);
          v40 = 134217984;
          v41 = v39;
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Bad probing reason %ld", (uint8_t *)&v40, 0xCu);
        }
        goto LABEL_22;
      }
      v24 = [NSPProber alloc];
      v25 = *(_DWORD *)(a1 + 20);
      v26 = *(id *)(a1 + 368);
      v27 = sub_10001ED40((id *)&v24->super.isa, (void *)a1, CFSTR("Proxy"), v25, v26, 1);
      objc_storeStrong((id *)(a1 + 240), v27);

      sub_10001EE08(*(_QWORD *)(a1 + 240));
      sub_10002032C(*(_QWORD *)(a1 + 240), v28, v29, v30);
    }
    v31 = [NSPProber alloc];
    v32 = *(_DWORD *)(a1 + 20);
    v33 = *(id *)(a1 + 368);
    v34 = sub_10001ED40((id *)&v31->super.isa, (void *)a1, CFSTR("Direct"), v32, v33, 0);
    objc_storeStrong((id *)(a1 + 248), v34);

    sub_10001EE08(*(_QWORD *)(a1 + 248));
    sub_10002032C(*(_QWORD *)(a1 + 248), v35, v36, v37);
    return;
  }
  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_QWORD *)(a1 + 520);
    v7 = CFSTR("Unknown");
    if (v6 == 2)
      v7 = CFSTR("DNS");
    if (v6 == 1)
      v8 = CFSTR("Proxy");
    else
      v8 = (__CFString *)v7;
    v9 = v8;
    v40 = 138412290;
    v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Already probing for %@", (uint8_t *)&v40, 0xCu);

  }
LABEL_22:

}

void sub_10003A0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003A0E0(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 80));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "refreshProxyInfo:", 11);

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_10003A764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003A784(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2
    && (!*(_QWORD *)(v2 + 264)
     || ((v3 = objc_loadWeakRetained((id *)(v2 + 80)), v4 = v3, (v5 = *(_QWORD *)(a1 + 32)) == 0)
       ? (v6 = 0)
       : (v6 = *(_QWORD *)(v5 + 264)),
         objc_msgSend(v3, "reportPrivacyProxySuccessOnInterface:", v6),
         v4,
         (v2 = *(_QWORD *)(a1 + 32)) != 0)))
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 80));
  }
  else
  {
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "proxyConnectivityActive");

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;

}

void sub_10003BCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003BD04(uint64_t a1)
{
  void *v2;
  double v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  void *v7;
  xpc_object_t xdict;

  xdict = xpc_dictionary_create(0, 0, 0);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "timeIntervalSinceReferenceDate");
    v4 = (uint64_t)v3;
  }
  else
  {
    v4 = -1;
  }
  xpc_dictionary_set_int64(xdict, "TokenFetchDate", v4);
  if (*(_BYTE *)(a1 + 48))
    v5 = 1;
  else
    v5 = -1;
  xpc_dictionary_set_int64(xdict, "TokenFetchOnNetworkChange", v5);
  xpc_set_event("com.apple.networkserviceproxy", "MessageResponse", xdict);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

}

void sub_10003BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003BE8C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  double v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  double v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int64_t v23;
  uint64_t v24;
  void *v25;
  xpc_object_t xdict;

  xdict = xpc_dictionary_create(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (v3 = *(id *)(v2 + 240)) != 0 && (v4 = v3[10], v3, v4))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = *(id *)(v5 + 240);
      v7 = v6;
      if (v6)
        v6 = (_QWORD *)v6[10];
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    objc_msgSend(v6, "timeIntervalSinceReferenceDate");
    xpc_dictionary_set_int64(xdict, "ProxyPathProber", (uint64_t)v8);

  }
  else
  {
    xpc_dictionary_set_int64(xdict, "ProxyPathProber", -1);
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 && (v10 = (unsigned __int8 *)*(id *)(v9 + 240)) != 0 && (v11 = v10[9], v10, v11))
    v12 = 1;
  else
    v12 = -1;
  xpc_dictionary_set_int64(xdict, "ProxyPathProbeOnNetworkChange", v12);
  v13 = *(_QWORD *)(a1 + 32);
  if (v13 && (v14 = *(id *)(v13 + 248)) != 0 && (v15 = v14[10], v14, v15))
  {
    v16 = *(_QWORD *)(a1 + 32);
    if (v16)
    {
      v17 = *(id *)(v16 + 248);
      v18 = v17;
      if (v17)
        v17 = (_QWORD *)v17[10];
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    objc_msgSend(v17, "timeIntervalSinceReferenceDate");
    xpc_dictionary_set_int64(xdict, "DirectPathProber", (uint64_t)v19);

  }
  else
  {
    xpc_dictionary_set_int64(xdict, "DirectPathProber", -1);
  }
  v20 = *(_QWORD *)(a1 + 32);
  if (v20
    && (v21 = (unsigned __int8 *)*(id *)(v20 + 248)) != 0
    && (v22 = v21[9], v21, v22))
  {
    v23 = 1;
  }
  else
  {
    v23 = -1;
  }
  xpc_dictionary_set_int64(xdict, "DirectPathProbeOnNetworkChange", v23);
  xpc_set_event("com.apple.networkserviceproxy", "MessageResponse", xdict);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v25 = *(void **)(v24 + 40);
  *(_QWORD *)(v24 + 40) = 0;

}

void sub_10003C198(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t count;
  uint64_t object_at_index;
  NSObject *v7;
  const sockaddr *address;
  char *v9;
  char *v10;
  int sa_family;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v17 = v3;
    count = nw_array_get_count(v3);
    v4 = v17;
    if (count)
    {
      object_at_index = nw_array_get_object_at_index(v17, 0);
      v7 = objc_claimAutoreleasedReturnValue(object_at_index);
      address = nw_endpoint_get_address(v7);
      v9 = nw_endpoint_copy_address_string(v7);
      if (!v9)
      {
LABEL_12:

        v4 = v17;
        goto LABEL_13;
      }
      v10 = v9;
      sa_family = address->sa_family;
      if (sa_family == 30)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NPUtilities createMaskedIPv6Address:prefix:](NPUtilities, "createMaskedIPv6Address:prefix:", v12, 56));
      }
      else
      {
        if (sa_family != 2)
        {
LABEL_9:
          v15 = *(_QWORD *)(a1 + 32);
          if (v15)
            v16 = *(_QWORD *)(v15 + 536);
          else
            v16 = 0;
          objc_msgSend(*(id *)(a1 + 40), "setTokenServerAddress:", v16);
          objc_msgSend(*(id *)(a1 + 40), "sendAnalytics");
          free(v10);
          goto LABEL_12;
        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NPUtilities createMaskedIPv4Address:prefix:](NPUtilities, "createMaskedIPv4Address:prefix:", v12, 24));
      }
      v14 = v13;
      sub_100027130(*(_QWORD *)(a1 + 32), v13);

      goto LABEL_9;
    }
  }
LABEL_13:

}

id sub_10003CCCC()
{
  if (qword_100112DC8 != -1)
    dispatch_once(&qword_100112DC8, &stru_1000F5CD0);
  return (id)qword_100112DC0;
}

uint64_t sub_10003CD0C(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  v3 = a2;
  v4 = a1;
  v5 = sub_10003CCCC();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "arrayForKey:", CFSTR("AppleLanguages")));

  if (v8
    || (os_unfair_lock_lock((os_unfair_lock_t)&unk_100112DB8),
        v8 = objc_msgSend(0, "copy"),
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112DB8),
        v8))
  {
    v9 = sub_10003CCCC();
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizations"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle preferredLocalizationsFromArray:forPreferences:](NSBundle, "preferredLocalizationsFromArray:forPreferences:", v11, v8));

  }
  else
  {
    v12 = 0;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizations"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle preferredLocalizationsFromArray:forPreferences:](NSBundle, "preferredLocalizationsFromArray:forPreferences:", v13, v12));

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
  if (qword_100112DD0 != -1)
    dispatch_once(&qword_100112DD0, &stru_1000F5CF0);
  v16 = CFBundleCopyLocalizedStringForLocalization(qword_100112DD8, v4, v3, 0, v15);

  return v16;
}

uint64_t sub_10003CEA4(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  int v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unsigned __int8 v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  v1 = a1;
  if (!qword_100112DE0)
  {
    v14 = 0;
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v3 = objc_msgSend(v2, "fileExistsAtPath:isDirectory:", CFSTR("/System/Library/PrivateFrameworks/UIKitCore.framework"), &v14);
    v4 = v14;

    if (v3 && v4 != 0)
    {
      v6 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/UIKitCore.framework")));
      v7 = (void *)qword_100112DE0;
      qword_100112DE0 = v6;

      if (qword_100112DE0)
      {
        objc_msgSend((id)qword_100112DE0, "load");
        qword_100112DE8 = (uint64_t)objc_msgSend((id)qword_100112DE0, "classNamed:", CFSTR("UIDevice"));
        v10 = nplog_obj(qword_100112DE8, v8, v9);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          v16 = "NSPResourcesGetUIDeviceClass";
          v17 = 2112;
          v18 = qword_100112DE0;
          v19 = 2112;
          v20 = qword_100112DE8;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s: bundle %@ class %@", buf, 0x20u);
        }

      }
    }
  }
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(objc_retainAutorelease((id)qword_100112DE8), "modelSpecificLocalizedStringKeyForKey:", v1));

  return v12;
}

uint64_t sub_10003D038(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  v2 = sub_10003CCCC();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URLForResource:withExtension:", v1, CFSTR("png")));

  return v4;
}

void sub_10003D090(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSBundle), "initWithPath:", CFSTR("/System/Library/PrivateFrameworks/NetworkServiceProxy.framework"));
  v2 = (void *)qword_100112DC0;
  qword_100112DC0 = (uint64_t)v1;

}

void sub_10003D0C4(id a1)
{
  const __CFURL *v1;

  v1 = CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, (const UInt8 *)"/System/Library/PrivateFrameworks/NetworkServiceProxy.framework", 63, 0);
  qword_100112DD8 = (uint64_t)CFBundleCreate(kCFAllocatorDefault, v1);
  CFRelease(v1);
}

void sub_10003D8DC(uint64_t a1, void *a2)
{
  NSPEventsPredictor *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[NSPEventsPredictor initWithMLModel:]([NSPEventsPredictor alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

id *sub_10003DD80(id *a1, void *a2)
{
  id v4;
  id *v5;
  objc_super v7;

  v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)NSPToken;
    v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5)
      objc_storeStrong(v5 + 3, a2);
  }

  return a1;
}

void sub_10003E048(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 16), a2);
}

id sub_10003E094(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  id Property;
  id v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;

  v3 = a2;
  objc_opt_self(a1);
  if (v3)
    Property = objc_getProperty(v3, v4, 56, 1);
  else
    Property = 0;
  v6 = Property;

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "issuerName"));
  v9 = (void *)v7;
  if (v6)
  {
    if (v3)
      v10 = objc_getProperty(v3, v8, 56, 1);
    else
      v10 = 0;
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@"), v9, v11));

  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v7));
  }

  return v12;
}

id sub_10003E184(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSSet *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  id v17;
  uint8_t buf[4];
  id v19;

  v3 = a2;
  objc_opt_self(a1);
  v4 = +[NPUtilities copyDataFromKeychainWithIdentifier:accountName:](NPUtilities, "copyDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.Tokens"), v3);

  if (v4)
  {
    v5 = objc_opt_class(NSArray);
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(NSData), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v17 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v7, v4, &v17));
    v9 = v17;

    if (!v8 || v9)
    {
      v14 = nplog_obj(v10, v11, v12);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "unarchivedObjectOfClass for token array failed with error: %@", buf, 0xCu);
      }

      v13 = 0;
    }
    else
    {
      v13 = v8;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

id sub_10003E304(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  NSSet *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  id v17;
  uint8_t buf[4];
  id v19;

  v3 = a2;
  objc_opt_self(a1);
  v4 = +[NPUtilities copyDataFromKeychainWithIdentifier:accountName:](NPUtilities, "copyDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.OneTimeTokens"), v3);

  if (v4)
  {
    v5 = objc_opt_class(NSArray);
    v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(NSPToken), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v17 = 0;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v7, v4, &v17));
    v9 = v17;

    if (!v8 || v9)
    {
      v14 = nplog_obj(v10, v11, v12);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "unarchivedObjectOfClass for token array failed with error: %@", buf, 0xCu);
      }

      v13 = 0;
    }
    else
    {
      v13 = v8;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_10003E484(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  BOOL v14;
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  id v20;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v16 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v16));
  v8 = v16;
  v11 = nplog_obj(v8, v9, v10);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = v12;
  if (v7)
    v14 = v8 == 0;
  else
    v14 = 0;
  if (v14)
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v15 = objc_msgSend(v5, "count");
      *(_DWORD *)buf = 134218242;
      v18 = v15;
      v19 = 2112;
      v20 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Saving %lu private access tokens for \"%@\" in the keychain", buf, 0x16u);
    }

    +[NPUtilities saveDataToKeychain:withIdentifier:accountName:](NPUtilities, "saveDataToKeychain:withIdentifier:accountName:", v7, CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.Tokens"), v6);
  }
  else
  {
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v18 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "archivedDataWithRootObject for token array failed with error: %@", buf, 0xCu);
    }

  }
}

void sub_10003E61C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  uint8_t buf[4];
  _QWORD v35[2];
  _BYTE v36[128];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v33 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v33));
  v8 = v33;
  v11 = v8;
  if (v7)
    v12 = v8 == 0;
  else
    v12 = 0;
  if (v12)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v15 = v5;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
    if (v16)
    {
      v17 = v16;
      v18 = 0;
      v19 = *(_QWORD *)v30;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v30 != v19)
            objc_enumerationMutation(v15);
          v21 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v20);
          if (v21)
            v22 = *(void **)(v21 + 8);
          else
            v22 = 0;
          v18 += objc_msgSend(v22, "count", (_QWORD)v29);
          v20 = (char *)v20 + 1;
        }
        while (v17 != v20);
        v23 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
        v17 = v23;
      }
      while (v23);
    }
    else
    {
      v18 = 0;
    }

    v27 = nplog_obj(v24, v25, v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109378;
      LODWORD(v35[0]) = v18;
      WORD2(v35[0]) = 2112;
      *(_QWORD *)((char *)v35 + 6) = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Saving %u private access tokens for \"%@\" in the keychain", buf, 0x12u);
    }

    +[NPUtilities saveDataToKeychain:withIdentifier:accountName:](NPUtilities, "saveDataToKeychain:withIdentifier:accountName:", v7, CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.OneTimeTokens"), v6);
  }
  else
  {
    v13 = nplog_obj(v8, v9, v10);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v35[0] = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "archivedDataWithRootObject for token array failed with error: %@", buf, 0xCu);
    }

  }
}

void sub_10003E874(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_self(a1);
  v7 = nplog_obj(v4, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = 138412290;
    v10 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Clearing private access tokens for \"%@\" in the keychain", (uint8_t *)&v9, 0xCu);
  }

  +[NPUtilities removeDataFromKeychainWithIdentifier:accountName:](NPUtilities, "removeDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.Tokens"), v3);
}

void sub_10003E944(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_self(a1);
  v7 = nplog_obj(v4, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = 138412290;
    v10 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Clearing long lived tokens for \"%@\" in the keychain", (uint8_t *)&v9, 0xCu);
  }

  +[NPUtilities removeDataFromKeychainWithIdentifier:accountName:](NPUtilities, "removeDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.LongLivedTokens"), v3);
}

void sub_10003EA14(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_self(a1);
  v7 = nplog_obj(v4, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = 138412290;
    v10 = v3;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Clearing one-time tokens for \"%@\" in the keychain", (uint8_t *)&v9, 0xCu);
  }

  +[NPUtilities removeDataFromKeychainWithIdentifier:accountName:](NPUtilities, "removeDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.OneTimeTokens"), v3);
}

id sub_10003EAE4(uint64_t a1, void *a2, void *a3, _DWORD *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  const char *v36;

  v7 = a2;
  v8 = a3;
  v9 = objc_opt_self(a1);
  if (v7)
  {
    v12 = sub_10003E094((uint64_t)NSPPrivateAccessTokenCache, v7);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    v14 = sub_10003E184((uint64_t)NSPPrivateAccessTokenCache, v13);
    if (!objc_msgSend(v14, "count"))
    {
      v28 = 0;
LABEL_20:

      goto LABEL_21;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v14));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "firstObject"));
    if (!v16)
      goto LABEL_7;
    if (v8 && !(v17 = sub_1000AA12C((uint64_t)NSPPrivateAccessTokenResponse, v16, v8)))
    {
      v32 = nplog_obj(v17, v18, v19);
      v30 = objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v35 = 138412290;
        v36 = (const char *)v13;
        v31 = "Cached token from keychain for \"%@\" has non-matching key, flushing tokens";
        goto LABEL_17;
      }
    }
    else
    {
      v20 = sub_1000AA2D0((uint64_t)NSPPrivateAccessTokenResponse, v16, v7);
      if (v20)
      {
LABEL_7:
        objc_msgSend(v15, "removeObjectAtIndex:", 0);
        if (a4)
          *a4 = objc_msgSend(v15, "count");
        sub_10003E484((uint64_t)NSPPrivateAccessTokenCache, v15, v13);
        v26 = nplog_obj(v23, v24, v25);
        v27 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v35 = 138412290;
          v36 = (const char *)v13;
          _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Received cached token from keychain for \"%@\"", (uint8_t *)&v35, 0xCu);
        }

        v28 = v16;
        goto LABEL_19;
      }
      v29 = nplog_obj(v20, v21, v22);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v35 = 138412290;
        v36 = (const char *)v13;
        v31 = "Cached token from keychain for \"%@\" has non-matching challenege, flushing tokens";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v31, (uint8_t *)&v35, 0xCu);
      }
    }

    sub_10003E874((uint64_t)NSPPrivateAccessTokenCache, v13);
    v28 = 0;
LABEL_19:

    goto LABEL_20;
  }
  v34 = nplog_obj(v9, v10, v11);
  v13 = objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
  {
    v35 = 136315138;
    v36 = "+[NSPPrivateAccessTokenCache copyTokenFromCacheForChallenge:tokenKey:tokensRemaining:]";
    _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "%s called with null challenge", (uint8_t *)&v35, 0xCu);
  }
  v28 = 0;
LABEL_21:

  return v28;
}

void sub_10003EDAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  uint8_t buf[4];
  id v19;

  v5 = a3;
  v6 = a2;
  objc_opt_self(a1);
  v7 = sub_10003E094((uint64_t)NSPPrivateAccessTokenCache, v6);
  v17 = (id)objc_claimAutoreleasedReturnValue(v7);

  v8 = sub_10003E184((uint64_t)NSPPrivateAccessTokenCache, v17);
  if (objc_msgSend(v8, "count"))
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v8));
  else
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v10 = v9;
  objc_msgSend(v9, "addObject:", v5);

  objc_opt_self(NSPPrivateAccessTokenCache);
  v11 = +[NPUtilities totalDataInKeychainWithIdentifier:](NPUtilities, "totalDataInKeychainWithIdentifier:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.Tokens"));
  v14 = nplog_obj(v11, v12, v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  v16 = v15;
  if ((unint64_t)v11 < 0x186A1)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v19 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Keychain tokens total %zu bytes, not flushing keychain", buf, 0xCu);
    }

  }
  else
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Keychain tokens total %zu bytes, flushing keychain", buf, 0xCu);
    }

    +[NPUtilities removeDataFromKeychainWithIdentifier:](NPUtilities, "removeDataFromKeychainWithIdentifier:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.Tokens"));
  }
  sub_10003E484((uint64_t)NSPPrivateAccessTokenCache, v10, v17);

}

id sub_10003EF88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  id v12;
  NSSet *v13;
  void *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v36;
  id v37;
  uint8_t buf[4];
  const char *v39;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_self(a1);
  if (v5)
  {
    v10 = sub_10003E094((uint64_t)NSPPrivateAccessTokenCache, v5);
    v11 = (id)objc_claimAutoreleasedReturnValue(v10);
    objc_opt_self(NSPPrivateAccessTokenCache);
    v12 = +[NPUtilities copyDataFromKeychainWithIdentifier:accountName:](NPUtilities, "copyDataFromKeychainWithIdentifier:accountName:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.LongLivedTokens"), v11);

    if (!v12)
    {
      v20 = 0;
LABEL_24:

      goto LABEL_25;
    }
    v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSData), 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v37 = 0;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v14, v12, &v37));
    v16 = (char *)v37;

    if (!v15 || v16)
    {
      v21 = nplog_obj(v17, v18, v19);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v39 = v16;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "unarchivedObjectOfClass for token data failed with error: %@", buf, 0xCu);
      }

      v20 = 0;
    }
    else
    {
      v20 = v15;
    }

    if (!v20)
    {
LABEL_23:
      v12 = 0;
      goto LABEL_24;
    }
    if (v6 && !(v23 = sub_1000AA12C((uint64_t)NSPPrivateAccessTokenResponse, v20, v6)))
    {
      v34 = nplog_obj(v23, v24, v25);
      v32 = objc_claimAutoreleasedReturnValue(v34);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
LABEL_22:

        sub_10003E944((uint64_t)NSPPrivateAccessTokenCache, v11);
        goto LABEL_23;
      }
      *(_DWORD *)buf = 138412290;
      v39 = (const char *)v11;
      v33 = "Cached long-lived token from keychain for \"%@\" has non-matching key, flushing tokens";
    }
    else
    {
      v26 = sub_1000AA2D0((uint64_t)NSPPrivateAccessTokenResponse, v20, v5);
      v27 = v26;
      v30 = nplog_obj(v26, v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      v32 = v31;
      if (v27)
      {
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v39 = (const char *)v11;
          _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Received cached long-lived token from keychain for \"%@\"", buf, 0xCu);
        }

        v20 = v20;
        v12 = v20;
        goto LABEL_24;
      }
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        goto LABEL_22;
      *(_DWORD *)buf = 138412290;
      v39 = (const char *)v11;
      v33 = "Cached long-lived token from keychain for \"%@\" has non-matching challenege, flushing tokens";
    }
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v33, buf, 0xCu);
    goto LABEL_22;
  }
  v36 = nplog_obj(v7, v8, v9);
  v11 = objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    v39 = "+[NSPPrivateAccessTokenCache copyLongLivedTokenFromCacheForChallenge:tokenKey:]";
    _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%s called with null challenge", buf, 0xCu);
  }
  v12 = 0;
LABEL_25:

  return v12;
}

void sub_10003F2E4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  uint8_t buf[4];
  void *v24;

  v5 = a3;
  v6 = a2;
  objc_opt_self(a1);
  v7 = sub_10003E094((uint64_t)NSPPrivateAccessTokenCache, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v22 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, &v22));

  v10 = v22;
  v13 = v10;
  if (v9)
    v14 = v10 == 0;
  else
    v14 = 0;
  if (v14)
  {
    objc_opt_self(NSPPrivateAccessTokenCache);
    v17 = +[NPUtilities removeDataFromKeychainWithIdentifier:](NPUtilities, "removeDataFromKeychainWithIdentifier:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.OneTimeTokens"));
    v20 = nplog_obj(v17, v18, v19);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v24 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Saving long-lived token for \"%@\" in the keychain", buf, 0xCu);
    }

    +[NPUtilities saveDataToKeychain:withIdentifier:accountName:](NPUtilities, "saveDataToKeychain:withIdentifier:accountName:", v9, CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.LongLivedTokens"), v8);
  }
  else
  {
    v15 = nplog_obj(v10, v11, v12);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v24 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "archivedDataWithRootObject for token data failed with error: %@", buf, 0xCu);
    }

  }
}

void sub_10003F4A8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  double v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  BOOL v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_alloc_init((Class)NSMutableArray);
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v34;
    v28 = v4;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v34 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v9);
        if (v10)
          v11 = (void *)v10[3];
        else
          v11 = 0;
        v12 = v11;
        objc_msgSend(v12, "timeIntervalSinceNow");
        if (v13 <= 0.0)
        {

LABEL_20:
          objc_msgSend(v4, "addObject:", v10);
          goto LABEL_22;
        }
        if (v10)
          v14 = (void *)v10[2];
        else
          v14 = 0;
        v15 = v14;
        if (objc_msgSend(v15, "count"))
        {
          if (v10)
            v16 = (void *)v10[2];
          else
            v16 = 0;
          v17 = v16;
          v18 = objc_msgSend(v17, "count");
          if (v10)
            v19 = (void *)v10[1];
          else
            v19 = 0;
          v20 = objc_msgSend(v19, "count");

          v21 = v18 >= v20;
          v4 = v28;
          if (!v21)
            goto LABEL_20;
        }
        else
        {

        }
LABEL_22:
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v22 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
      v7 = v22;
    }
    while (v22);
  }

  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v23 = v4;
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v30;
    do
    {
      v27 = 0;
      do
      {
        if (*(_QWORD *)v30 != v26)
          objc_enumerationMutation(v23);
        objc_msgSend(v5, "removeObject:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v27));
        v27 = (char *)v27 + 1;
      }
      while (v25 != v27);
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v29, v37, 16);
    }
    while (v25);
  }

}

id sub_10003F70C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, _DWORD *a6, _QWORD *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  id v22;
  id v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  id v28;
  void *v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  _BOOL4 v54;
  void *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  void *v63;
  id v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  NSObject *v68;
  const char *v70;
  uint64_t v71;
  id v72;
  NSObject *v73;
  id v74;
  id v75;
  _QWORD *v77;
  id v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint8_t buf[4];
  const char *v85;
  __int16 v86;
  NSObject *v87;
  _BYTE v88[128];

  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = objc_opt_self(a1);
  if (v12)
  {
    v19 = v16;
    v20 = sub_10003E094((uint64_t)NSPPrivateAccessTokenCache, v12);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    v22 = sub_10003E304((uint64_t)NSPPrivateAccessTokenCache, v21);
    v23 = objc_msgSend(v22, "mutableCopy");

    v24 = v23;
    sub_10003F4A8(v19, v23);
    if (!objc_msgSend(v23, "count"))
    {
      v64 = 0;
LABEL_62:

      goto LABEL_63;
    }
    v25 = (_QWORD *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "firstObject"));
    v26 = v25;
    if (v25)
      v25 = (_QWORD *)v25[1];
    v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "firstObject"));
    v77 = v26;
    if (v26)
      v27 = (void *)v26[2];
    else
      v27 = 0;
    v28 = v27;
    v78 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "firstObject"));

    v29 = v79;
    if (!v79)
      goto LABEL_17;
    if (v13)
    {
      v30 = sub_1000AA12C((uint64_t)NSPPrivateAccessTokenResponse, v79, v13);
      if (!v30)
      {
        v33 = nplog_obj(v30, v31, v32);
        v34 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v85 = (const char *)v21;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Cached one-time token from keychain for \"%@\" has non-matching key, but not expired. Returning token.", buf, 0xCu);
        }

        v29 = v79;
      }
    }
    v35 = sub_1000AA2D0((uint64_t)NSPPrivateAccessTokenResponse, v29, v12);
    if (v35)
    {
      v38 = sub_10003EF88((uint64_t)NSPPrivateAccessTokenCache, v14, 0);
      v41 = v38;
      if (v38)
      {
        v38 = objc_msgSend(v38, "isEqualToData:", v15);
        if ((v38 & 1) != 0)
        {

LABEL_17:
          if (v77)
            v42 = (void *)v77[1];
          else
            v42 = 0;
          objc_msgSend(v42, "removeObjectAtIndex:", 0);
          if (v78)
          {
            if (v77)
              v43 = (void *)v77[2];
            else
              v43 = 0;
            objc_msgSend(v43, "removeObjectAtIndex:", 0);
          }
          if (v77)
            v44 = (void *)v77[1];
          else
            v44 = 0;
          if (!objc_msgSend(v44, "count"))
            objc_msgSend(v23, "removeObjectAtIndex:", 0);
          if (a6)
          {
            v73 = v21;
            v74 = v14;
            v75 = v12;
            *a6 = 0;
            v80 = 0u;
            v81 = 0u;
            v82 = 0u;
            v83 = 0u;
            v72 = v23;
            v45 = v23;
            v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v80, v88, 16);
            if (v46)
            {
              v47 = v46;
              v48 = *(_QWORD *)v81;
              do
              {
                v49 = 0;
                do
                {
                  if (*(_QWORD *)v81 != v48)
                    objc_enumerationMutation(v45);
                  v50 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * (_QWORD)v49);
                  if (v50)
                    v51 = *(void **)(v50 + 8);
                  else
                    v51 = 0;
                  if (objc_msgSend(v51, "count"))
                  {
                    v52 = v50 ? *(void **)(v50 + 8) : 0;
                    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "firstObject"));
                    v54 = sub_1000AA12C((uint64_t)NSPPrivateAccessTokenResponse, v53, v13);

                    if (v54)
                    {
                      if (v50)
                        v55 = *(void **)(v50 + 8);
                      else
                        v55 = 0;
                      v56 = v55;
                      *a6 += objc_msgSend(v56, "count");

                    }
                  }
                  v49 = (char *)v49 + 1;
                }
                while (v47 != v49);
                v57 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v80, v88, 16);
                v47 = v57;
              }
              while (v57);
            }

            v14 = v74;
            v12 = v75;
            v24 = v72;
            v21 = v73;
          }
          sub_10003E61C((uint64_t)NSPPrivateAccessTokenCache, v24, v21);
          v61 = nplog_obj(v58, v59, v60);
          v62 = objc_claimAutoreleasedReturnValue(v61);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
          {
            v70 = " with salt";
            if (!v78)
              v70 = "";
            *(_DWORD *)buf = 136446466;
            v85 = v70;
            v86 = 2112;
            v87 = v21;
            _os_log_debug_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "Received cached one-time token%{public}s from keychain for \"%@\"", buf, 0x16u);
          }

          if (a7)
            *a7 = objc_retainAutorelease(v78);
          v63 = v79;
          v64 = v79;
          goto LABEL_61;
        }
      }
      v67 = nplog_obj(v38, v39, v40);
      v68 = objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "Matching long-lived token not found in the cache, flushing one-time tokens", buf, 2u);
      }

      sub_10003EA14((uint64_t)NSPPrivateAccessTokenCache, v21);
      v64 = 0;
      v24 = v23;
    }
    else
    {
      v65 = nplog_obj(v35, v36, v37);
      v66 = objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v85 = (const char *)v21;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Cached one-time token from keychain for \"%@\" has non-matching challenege, flushing tokens", buf, 0xCu);
      }

      sub_10003EA14((uint64_t)NSPPrivateAccessTokenCache, v21);
      v64 = 0;
    }
    v63 = v79;
LABEL_61:

    goto LABEL_62;
  }
  v71 = nplog_obj(v16, v17, v18);
  v21 = objc_claimAutoreleasedReturnValue(v71);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    v85 = "+[NSPPrivateAccessTokenCache copyOneTimeTokenFromCacheForChallenge:tokenKey:longLivedTokenChallenge:longLivedT"
          "oken:tokensRemaining:outSalt:]";
    _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "%s called with null challenge", buf, 0xCu);
  }
  v64 = 0;
LABEL_63:

  return v64;
}

void sub_10003FCD4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  BOOL v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  void *i;
  double v52;
  id v53;
  id *v54;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  void *v66;
  NSObject *v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint8_t v83[128];
  uint8_t buf[4];
  const char *v85;

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = objc_opt_self(a1);
  if (objc_msgSend(v16, "count"))
  {
    v25 = sub_10003EF88((uint64_t)NSPPrivateAccessTokenCache, v20, 0);
    v28 = v25;
    if (v25)
    {
      v25 = -[NSObject isEqualToData:](v25, "isEqualToData:", v21);
      if ((v25 & 1) != 0)
      {
        v67 = v28;
        v68 = v21;
        v69 = v20;
        v71 = v18;
        v72 = v16;
        v73 = v15;
        v74 = v17;
        v29 = sub_10003E094((uint64_t)NSPPrivateAccessTokenCache, v15);
        v66 = (void *)objc_claimAutoreleasedReturnValue(v29);
        v30 = sub_10003E304((uint64_t)NSPPrivateAccessTokenCache, v66);
        v31 = objc_msgSend(v30, "mutableCopy");

        sub_10003F4A8(v22, v31);
        v32 = v31;
        v70 = v19;
        v33 = v19;
        objc_opt_self(v22);
        v34 = objc_alloc_init((Class)NSMutableArray);
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v35 = v32;
        v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v79, buf, 16);
        if (!v36)
          goto LABEL_23;
        v37 = v36;
        v38 = *(_QWORD *)v80;
        while (1)
        {
          v39 = 0;
          do
          {
            if (*(_QWORD *)v80 != v38)
              objc_enumerationMutation(v35);
            v40 = *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)v39);
            if (v40)
              v41 = *(void **)(v40 + 8);
            else
              v41 = 0;
            v42 = v41;
            if (!objc_msgSend(v42, "count"))
            {

LABEL_17:
              objc_msgSend(v34, "addObject:", v40);
              goto LABEL_18;
            }
            if (v40)
              v43 = *(void **)(v40 + 8);
            else
              v43 = 0;
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "firstObject"));
            v45 = sub_1000AA12C((uint64_t)NSPPrivateAccessTokenResponse, v44, v33);

            if (!v45)
              goto LABEL_17;
LABEL_18:
            v39 = (char *)v39 + 1;
          }
          while (v37 != v39);
          v46 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v79, buf, 16);
          v37 = v46;
          if (!v46)
          {
LABEL_23:

            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v47 = v34;
            v48 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
            if (v48)
            {
              v49 = v48;
              v50 = *(_QWORD *)v76;
              do
              {
                for (i = 0; i != v49; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v76 != v50)
                    objc_enumerationMutation(v47);
                  objc_msgSend(v35, "removeObject:", *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)i));
                }
                v49 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v75, v83, 16);
              }
              while (v49);
            }

            if (!v35)
              v35 = objc_alloc_init((Class)NSMutableArray);
            v18 = v71;
            v16 = v72;
            if (!v71 || (objc_msgSend(v71, "timeIntervalSinceNow"), v52 < 0.0))
            {
              v53 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceNow:", 86400.0);

              v18 = v53;
            }
            v15 = v73;
            v54 = sub_10003DD80((id *)[NSPToken alloc], v18);
            v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v72));
            sub_100010990((uint64_t)v54, v55);

            v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v74));
            sub_10003E048((uint64_t)v54, v56);

            objc_msgSend(v35, "addObject:", v54);
            objc_opt_self(NSPPrivateAccessTokenCache);
            v57 = (const char *)+[NPUtilities totalDataInKeychainWithIdentifier:](NPUtilities, "totalDataInKeychainWithIdentifier:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.OneTimeTokens"));
            v60 = nplog_obj(v57, v58, v59);
            v61 = objc_claimAutoreleasedReturnValue(v60);
            v62 = v61;
            if ((unint64_t)v57 < 0x186A1)
            {
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134217984;
                v85 = v57;
                _os_log_debug_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "Keychain one-time tokens total %zu bytes, not flushing keychain", buf, 0xCu);
              }

            }
            else
            {
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                v85 = v57;
                _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Keychain one-time tokens total %zu bytes, flushing keychain", buf, 0xCu);
              }

              +[NPUtilities removeDataFromKeychainWithIdentifier:](NPUtilities, "removeDataFromKeychainWithIdentifier:", CFSTR("com.apple.NetworkServiceProxy.PrivateAccessTokens.OneTimeTokens"));
            }
            sub_10003E61C((uint64_t)NSPPrivateAccessTokenCache, v35, v66);

            v17 = v74;
            v20 = v69;
            v19 = v70;
            v28 = v67;
            v21 = v68;
            goto LABEL_46;
          }
        }
      }
    }
    v63 = nplog_obj(v25, v26, v27);
    v64 = objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "Matching long-lived token not found in the cache, not adding one-time token", buf, 2u);
    }

  }
  else
  {
    v65 = nplog_obj(0, v23, v24);
    v28 = objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v85 = "+[NSPPrivateAccessTokenCache addOneTimeTokensToCacheForChallenge:tokens:salts:expirationTime:tokenKey:longLi"
            "vedTokenChallenge:longLivedToken:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "%s called with null (tokens.count > 0)", buf, 0xCu);
    }
  }
LABEL_46:

}

void sub_100040288(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_10003E094((uint64_t)NSPPrivateAccessTokenCache, v3);
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);

  sub_10003EA14((uint64_t)NSPPrivateAccessTokenCache, v5);
}

uint64_t sub_1000402E8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  uint64_t v23;
  void *v24;
  void *v25;
  double v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *j;
  id v32;
  id v33;
  uint64_t v34;
  void *k;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  char v40;
  uint64_t v41;
  void *m;
  double v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  void *n;
  NSObject *v49;
  void *v50;
  id v51;
  void *v52;
  NSObject *v53;
  NSObject *v54;
  void *v55;
  unsigned __int8 v56;
  void *v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  void *ii;
  uint64_t v73;
  double v74;
  uint64_t v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  void *jj;
  uint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  const char *v101;
  uint64_t v102;
  char v104;
  id v105;
  void *v106;
  void *v107;
  NSObject *v108;
  id obj;
  id v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE v139[128];
  _BYTE v140[128];
  _QWORD v141[2];
  _QWORD v142[2];
  _BYTE v143[128];
  _BYTE v144[128];
  _BYTE v145[128];
  _BYTE v146[128];
  uint8_t v147[128];
  uint8_t buf[4];
  id v149;
  __int16 v150;
  void *v151;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "issuerName"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "originNames"));
  v9 = objc_msgSend(v8, "count");

  if (v6 && (unint64_t)v9 >= 2)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "originNames"));
    v11 = objc_msgSend(v10, "containsObject:", v6);

    if ((v11 & 1) != 0)
    {
      v106 = v7;
      v107 = v5;
      v105 = v6;
      v108 = v6;
LABEL_7:
      v104 = 0;
      goto LABEL_8;
    }
    v85 = nplog_obj(v12, v13, v14);
    v49 = objc_claimAutoreleasedReturnValue(v85);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "originNames"));
      *(_DWORD *)buf = 138412546;
      v149 = v6;
      v150 = 2112;
      v151 = v86;
      _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to find origin name %@ in %@", buf, 0x16u);

    }
  }
  else
  {
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "originName"));
    if (v15)
    {
      v107 = v5;
      v108 = v15;
      v105 = v6;
      v106 = v7;
      goto LABEL_7;
    }
    v87 = objc_msgSend(v5, "typeRequiresOriginName");
    if (!(_DWORD)v87)
    {
      v105 = v6;
      v106 = v7;
      v107 = v5;
      v108 = 0;
      v104 = 1;
LABEL_8:
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v17 = objc_alloc_init((Class)NSMutableArray);
      v135 = 0u;
      v136 = 0u;
      v137 = 0u;
      v138 = 0u;
      v18 = (id)qword_100112DF0;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v135, v147, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v136;
        do
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(_QWORD *)v136 != v21)
              objc_enumerationMutation(v18);
            v23 = *(_QWORD *)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)i);
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100112DF0, "objectForKeyedSubscript:", v23));
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("Time")));
            objc_msgSend(v16, "timeIntervalSinceDate:", v25);
            if (v26 >= 21600.0)
              objc_msgSend(v17, "addObject:", v23);

          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v135, v147, 16);
        }
        while (v20);
      }

      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      v27 = v17;
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v131, v146, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v132;
        do
        {
          for (j = 0; j != v29; j = (char *)j + 1)
          {
            if (*(_QWORD *)v132 != v30)
              objc_enumerationMutation(v27);
            objc_msgSend((id)qword_100112DF0, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(*((_QWORD *)&v131 + 1) + 8 * (_QWORD)j));
          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v131, v146, 16);
        }
        while (v29);
      }

      v110 = objc_alloc_init((Class)NSMutableArray);
      v129 = 0u;
      v130 = 0u;
      v127 = 0u;
      v128 = 0u;
      obj = (id)qword_100112DF8;
      v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v145, 16);
      if (v32)
      {
        v33 = v32;
        v34 = *(_QWORD *)v128;
        do
        {
          for (k = 0; k != v33; k = (char *)k + 1)
          {
            if (*(_QWORD *)v128 != v34)
              objc_enumerationMutation(obj);
            v36 = *(_QWORD *)(*((_QWORD *)&v127 + 1) + 8 * (_QWORD)k);
            v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100112DF8, "objectForKeyedSubscript:", v36));
            v123 = 0u;
            v124 = 0u;
            v125 = 0u;
            v126 = 0u;
            v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v123, v144, 16);
            if (!v38)
              goto LABEL_37;
            v39 = v38;
            v40 = 0;
            v41 = *(_QWORD *)v124;
            do
            {
              for (m = 0; m != v39; m = (char *)m + 1)
              {
                if (*(_QWORD *)v124 != v41)
                  objc_enumerationMutation(v37);
                objc_msgSend(v16, "timeIntervalSinceDate:", *(_QWORD *)(*((_QWORD *)&v123 + 1) + 8 * (_QWORD)m));
                v40 |= v43 < 300.0;
              }
              v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v123, v144, 16);
            }
            while (v39);
            if ((v40 & 1) == 0)
LABEL_37:
              objc_msgSend(v110, "addObject:", v36);

          }
          v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v145, 16);
        }
        while (v33);
      }

      v121 = 0u;
      v122 = 0u;
      v119 = 0u;
      v120 = 0u;
      v44 = v110;
      v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v119, v143, 16);
      if (v45)
      {
        v46 = v45;
        v47 = *(_QWORD *)v120;
        do
        {
          for (n = 0; n != v46; n = (char *)n + 1)
          {
            if (*(_QWORD *)v120 != v47)
              objc_enumerationMutation(v44);
            objc_msgSend((id)qword_100112DF0, "setObject:forKeyedSubscript:", 0, *(_QWORD *)(*((_QWORD *)&v119 + 1) + 8 * (_QWORD)n));
          }
          v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v119, v143, 16);
        }
        while (v46);
      }

      v49 = v108;
      if (objc_msgSend(v107, "tokenType") != 3)
      {
LABEL_55:
        if ((v104 & 1) != 0)
          goto LABEL_70;
        v64 = (void *)qword_100112DF8;
        if (!qword_100112DF8)
        {
          v65 = objc_alloc_init((Class)NSMutableDictionary);
          v66 = (void *)qword_100112DF8;
          qword_100112DF8 = (uint64_t)v65;

          v64 = (void *)qword_100112DF8;
        }
        v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "objectForKeyedSubscript:", v108));
        v68 = objc_alloc_init((Class)NSMutableArray);
        if (!v67)
          goto LABEL_69;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v54 = v67;
        v69 = -[NSObject countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v115, v140, 16);
        if (v69)
        {
          v70 = v69;
          v71 = *(_QWORD *)v116;
          do
          {
            for (ii = 0; ii != v70; ii = (char *)ii + 1)
            {
              if (*(_QWORD *)v116 != v71)
                objc_enumerationMutation(v54);
              v73 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 8 * (_QWORD)ii);
              objc_msgSend(v16, "timeIntervalSinceDate:", v73);
              if (v74 < 300.0)
                objc_msgSend(v68, "addObject:", v73);
            }
            v70 = -[NSObject countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v115, v140, 16);
          }
          while (v70);
        }

        v49 = v108;
        if ((unint64_t)objc_msgSend(v68, "count") < 0xA)
        {
LABEL_69:
          objc_msgSend(v68, "addObject:", v16);
          objc_msgSend((id)qword_100112DF8, "setObject:forKeyedSubscript:", v68, v49);

LABEL_70:
          v75 = qword_100112E00;
          v76 = objc_alloc_init((Class)NSMutableArray);
          if (!v75)
            goto LABEL_81;
          v113 = 0u;
          v114 = 0u;
          v111 = 0u;
          v112 = 0u;
          v77 = (id)qword_100112E00;
          v78 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v111, v139, 16);
          if (v78)
          {
            v79 = v78;
            v80 = *(_QWORD *)v112;
            do
            {
              for (jj = 0; jj != v79; jj = (char *)jj + 1)
              {
                if (*(_QWORD *)v112 != v80)
                  objc_enumerationMutation(v77);
                v82 = *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)jj);
                objc_msgSend(v16, "timeIntervalSinceDate:", v82);
                if (v83 < 60.0)
                  objc_msgSend(v76, "addObject:", v82);
              }
              v79 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v111, v139, 16);
            }
            while (v79);
          }

          if ((unint64_t)objc_msgSend(v76, "count") > 9)
          {
            v91 = (void *)qword_100112E00;
            qword_100112E00 = (uint64_t)v76;

            v95 = nplog_obj(v92, v93, v94);
            v54 = objc_claimAutoreleasedReturnValue(v95);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Overall token rate exceeded, rejecting request", buf, 2u);
            }
            v84 = 0;
          }
          else
          {
LABEL_81:
            objc_msgSend(v76, "addObject:", v16);
            v54 = qword_100112E00;
            qword_100112E00 = (uint64_t)v76;
            v84 = 1;
          }
          v49 = v108;
          goto LABEL_97;
        }
        objc_msgSend((id)qword_100112DF8, "setObject:forKeyedSubscript:", v68, v108);

        v99 = nplog_obj(v96, v97, v98);
        v100 = objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v101 = "Origin rate exceeded, rejecting request";
LABEL_100:
          _os_log_error_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, v101, buf, 2u);
          goto LABEL_96;
        }
        goto LABEL_96;
      }
      v50 = (void *)qword_100112DF0;
      if (!qword_100112DF0)
      {
        v51 = objc_alloc_init((Class)NSMutableDictionary);
        v52 = (void *)qword_100112DF0;
        qword_100112DF0 = (uint64_t)v51;

        v50 = (void *)qword_100112DF0;
      }
      v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "objectForKeyedSubscript:", v108));
      v54 = v53;
      if (v53)
      {
        v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v53, "objectForKeyedSubscript:", CFSTR("Issuer")));
        v56 = objc_msgSend(v55, "isEqualToString:", v106);

        if ((v56 & 1) != 0)
        {
LABEL_54:

          goto LABEL_55;
        }
        v57 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject objectForKeyedSubscript:](v54, "objectForKeyedSubscript:", CFSTR("Time")));
        objc_msgSend(v16, "timeIntervalSinceDate:", v57);
        v59 = v58;

        if (v59 < 21600.0)
        {
          v102 = nplog_obj(v60, v61, v62);
          v100 = objc_claimAutoreleasedReturnValue(v102);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v101 = "Issuer name changed, rejecting request";
            goto LABEL_100;
          }
LABEL_96:

          v84 = 0;
LABEL_97:

          v7 = v106;
          v5 = v107;
          v6 = v105;
          goto LABEL_98;
        }
      }
      v141[0] = CFSTR("Issuer");
      v141[1] = CFSTR("Time");
      v142[0] = v106;
      v142[1] = v16;
      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v142, v141, 2));
      objc_msgSend((id)qword_100112DF0, "setObject:forKeyedSubscript:", v63, v108);

      goto LABEL_54;
    }
    v90 = nplog_obj(v87, v88, v89);
    v49 = objc_claimAutoreleasedReturnValue(v90);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to find origin name in challenge", buf, 2u);
    }
  }
  v84 = 0;
LABEL_98:

  return v84;
}

id *sub_100040CF4(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  objc_super v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)NSPPrivacyProxyConfigAgent;
    v10 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v10;
    if (v10)
    {
      objc_msgSend(v10, "setActive:", 1);
      objc_msgSend(a1, "setKernelActivated:", 0);
      objc_msgSend(a1, "setUserActivated:", 0);
      objc_msgSend(a1, "setVoluntary:", 1);
      objc_msgSend(a1, "setAgentUUID:", v8);
      objc_msgSend(a1, "setAgentDescription:", v9);
      objc_storeWeak(a1 + 7, v7);
    }
  }

  return a1;
}

void sub_100040E0C(id a1)
{
  NSString *v1;
  uint64_t v2;
  void *v3;

  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nw_proxy_config_get_agent_domain(a1));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100112E08;
  qword_100112E08 = v2;

}

void sub_100040E80(id a1)
{
  NSString *v1;
  uint64_t v2;
  void *v3;

  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", nw_proxy_config_get_agent_type(a1));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_100112E18;
  qword_100112E18 = v2;

}

id *sub_100041130(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  objc_super v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)NSPPrivacyProxyTokenAgent;
    v10 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v10;
    if (v10)
    {
      objc_msgSend(v10, "setActive:", 1);
      objc_msgSend(a1, "setKernelActivated:", 0);
      objc_msgSend(a1, "setUserActivated:", 0);
      objc_msgSend(a1, "setVoluntary:", 0);
      objc_msgSend(a1, "setAgentUUID:", v8);
      objc_msgSend(a1, "setAgentDescription:", v9);
      objc_storeWeak(a1 + 4, v7);
    }
  }

  return a1;
}

void sub_100041454(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint8_t buf[4];
  int v46;

  if (a1)
  {
    v4 = ((uint64_t (*)(void))NPGetInternalQueue)();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    dispatch_assert_queue_V2(v5);

    v9 = *(_QWORD *)(a1 + 8);
    if (!a2)
    {
      if (!v9)
      {
        v33 = nplog_obj(0, v6, v7, v8);
        v11 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "DNS proxy not stopping because it was not running", buf, 2u);
        }
        goto LABEL_19;
      }
      mrc_dns_proxy_invalidate();
      v13 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

      v18 = nplog_obj(v14, v15, v16, v17);
      v11 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v12 = "DNS proxy request to stop";
        goto LABEL_9;
      }
LABEL_19:

      return;
    }
    if (v9)
    {
      v10 = nplog_obj(v9, v6, v7, v8);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v12 = "DNS proxy already running, not starting again";
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
    v44 = 0;
    v19 = mrc_dns_proxy_parameters_create(&v44);
    v11 = v19;
    if (v44 || !v19)
    {
      v34 = nplog_obj(v19, v20, v21, v22);
      v31 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v46 = v44;
        v32 = "Unable to create DNS proxy parameters - %d";
        goto LABEL_24;
      }
    }
    else
    {
      v23 = if_nametoindex("lo0");
      mrc_dns_proxy_parameters_add_input_interface(v11, v23);
      v24 = mrc_dns_proxy_create(v11, &v44);
      v25 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v24;

      if (!v44)
      {
        v35 = mrc_dns_proxy_set_event_handler(*(_QWORD *)(a1 + 8), &stru_1000F5DB8);
        v36 = *(_QWORD *)(a1 + 8);
        v37 = NPGetInternalQueue(v35);
        v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        mrc_dns_proxy_set_queue(v36, v38);

        v39 = mrc_dns_proxy_activate(*(_QWORD *)(a1 + 8));
        v43 = nplog_obj(v39, v40, v41, v42);
        v31 = objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v46 = v23;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "DNS proxy request to start on lo0 (index %d)", buf, 8u);
        }
        goto LABEL_18;
      }
      v30 = nplog_obj(v26, v27, v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v46 = v44;
        v32 = "Unable to create DNS proxy - %d";
LABEL_24:
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, v32, buf, 8u);
      }
    }
LABEL_18:

    goto LABEL_19;
  }
}

uint64_t sub_100041724(uint64_t result)
{
  if (result)
  {
    if (qword_100112E30 != -1)
      dispatch_once(&qword_100112E30, &stru_1000F5D78);
    return byte_100112E28;
  }
  return result;
}

void sub_100041768(id a1)
{
  uint64_t v1;

  v1 = getpid();
  if (!sandbox_check(v1, "mach-lookup", SANDBOX_CHECK_NO_REPORT | 2u))
    byte_100112E28 = 1;
}

void sub_1000417BC(id a1, int a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;

  v5 = nplog_obj(a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2 + 1) > 3)
      v7 = "<INVALID EVENT>";
    else
      v7 = off_1000F5DD8[a2 + 1];
    v8 = 136315394;
    v9 = v7;
    v10 = 1024;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DNS proxy event handler got %s event (error %d)", (uint8_t *)&v8, 0x12u);
  }

}

void sub_1000418A4(void *a1, void *a2, void *a3, int a4, uint64_t a5)
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v15;
  char isKindOfClass;
  const char *v17;
  const char *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *i;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  char v30;
  void *v31;
  id v32;
  uint64_t v33;
  char v34;
  id v35;
  int v36;
  const char *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *j;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  id v48;
  const char *v49;
  id v50;
  uint64_t v51;
  char v52;
  id v53;
  void *v54;
  id v55;
  uint64_t v56;
  char v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  id v72;
  const char *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  _BYTE v88[128];

  v8 = a2;
  v9 = a3;
  if (a1 && v8 && (a5 & 0xC) != 4)
  {
    v10 = objc_opt_class(NSArray);
    v78 = a1;
    if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0
      || (v11 = v8,
          v12 = objc_opt_class(NSSet),
          v13 = objc_opt_isKindOfClass(v11, v12),
          v11,
          (v13 & 1) != 0))
    {
      v14 = v8;
      v15 = objc_opt_class(NSSet);
      isKindOfClass = objc_opt_isKindOfClass(v14, v15);
      if ((isKindOfClass & 1) != 0)
        v17 = ")}";
      else
        v17 = ")";
      v18 = "{(";
      if ((isKindOfClass & 1) == 0)
        v18 = "(";
      v71 = v9;
      v75 = (4 * a4 + 4);
      objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = %s"), v75, " ", v9, v18);
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v19 = v14;
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v83, v88, 16);
      if (v20)
      {
        v21 = v20;
        v73 = v17;
        v69 = v8;
        v22 = (4 * a4 + 8);
        v23 = (a4 + 2);
        v24 = *(_QWORD *)v84;
        do
        {
          for (i = 0; i != v21; i = (char *)i + 1)
          {
            if (*(_QWORD *)v84 != v24)
              objc_enumerationMutation(v19);
            v26 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * (_QWORD)i);
            if ((objc_opt_respondsToSelector(v26, "descriptionWithIndent:options:") & 1) != 0)
            {
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "descriptionWithIndent:options:", v23, a5));
              objc_msgSend(v78, "appendFormat:", CFSTR("\n%*s{%@"), v22, " ", v27);

              objc_msgSend(v78, "appendFormat:", CFSTR("\n%*s},"), v22, " ", v65);
            }
            else
            {
              v28 = v26;
              v29 = objc_opt_class(NSString);
              if (v28 && (v30 = objc_opt_isKindOfClass(v28, v29), v28, (a5 & 3) == 3) && (v30 & 1) != 0)
              {
                objc_msgSend(v78, "appendFormat:", CFSTR("\n%*s<%lu-char-str>,"), v22, " ", objc_msgSend(v28, "length"));
              }
              else
              {
                v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "description"));
                objc_msgSend(v78, "appendFormat:", CFSTR("\n%*s%@,"), v22, " ", v31);

              }
            }
          }
          v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v83, v88, 16);
        }
        while (v21);

        a1 = v78;
        objc_msgSend(v78, "appendFormat:", CFSTR("\n%*s"), v75, " ");
        v8 = v69;
        v17 = v73;
      }
      else
      {

      }
      objc_msgSend(a1, "appendFormat:", CFSTR("%s"), v17);

      v9 = v71;
    }
    else
    {
      v32 = v11;
      v33 = objc_opt_class(NSDictionary);
      v34 = objc_opt_isKindOfClass(v32, v33);

      if ((v34 & 1) == 0)
      {
        v55 = v32;
        v56 = objc_opt_class(NSUUID);
        v57 = objc_opt_isKindOfClass(v55, v56);

        if ((v57 & 1) != 0)
        {
          v58 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "UUIDString"));
          objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = %@"), (4 * a4 + 4), " ", v9, v58);
        }
        else
        {
          if (sub_100042058(v55))
          {
            if ((~(_DWORD)a5 & 3) != 0)
              objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = %@"), (4 * a4 + 4), " ", v9, v55);
            else
              objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = <%lu-char-str>"), (4 * a4 + 4), " ", v9, objc_msgSend(v55, "length"));
            goto LABEL_28;
          }
          if (sub_10004209C(v55))
          {
            v59 = (4 * a4 + 4);
            v60 = v55;
            v61 = objc_msgSend(v60, "length");
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "description"));

            objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = %u:%@"), v59, " ", v9, v61, v62);
            goto LABEL_28;
          }
          v58 = v55;
          if ((((uint64_t (*)(void))objc_opt_respondsToSelector)() & 1) != 0)
          {
            v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "descriptionWithIndent:options:"));
            objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = {%@"), (4 * (a4 + 1)), " ", v9, v63);

            objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s}"), (4 * (a4 + 1)), " ", v66, v67);
          }
          else
          {
            v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "description"));
            objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = %@"), (4 * a4 + 4), " ", v9, v64);

          }
        }

        goto LABEL_28;
      }
      v35 = v32;
      v36 = 4 * a4;
      v37 = " ";
      objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = {"), (4 * a4 + 4), " ", v9);
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v38 = v35;
      v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v79, v87, 16);
      if (v39)
      {
        v40 = v39;
        v68 = (v36 + 4);
        v70 = v8;
        v72 = v9;
        v76 = (v36 + 8);
        v74 = a4 + 2;
        v41 = *(_QWORD *)v80;
        do
        {
          for (j = 0; j != v40; j = (char *)j + 1)
          {
            if (*(_QWORD *)v80 != v41)
              objc_enumerationMutation(v38);
            v43 = *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)j);
            v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", v43));
            if ((objc_opt_respondsToSelector(v44, "descriptionWithIndent:options:") & 1) != 0)
            {
              v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "descriptionWithIndent:options:", v74, a5));
              objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s%@ = {%@"), v76, v37, v43, v45);

              objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s},"), v76, v37);
            }
            else
            {
              v46 = v38;
              v47 = v41;
              v48 = v40;
              v49 = v37;
              v50 = v44;
              v51 = objc_opt_class(NSString);
              if (v50 && (v52 = objc_opt_isKindOfClass(v50, v51), v50, (a5 & 3) == 3) && (v52 & 1) != 0)
              {
                v53 = objc_msgSend(v50, "length");
                v37 = v49;
                a1 = v78;
                objc_msgSend(v78, "appendFormat:", CFSTR("\n%*s%@ = <%lu-char-str>"), v76, v49, v43, v53);
              }
              else
              {
                v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "description"));
                v37 = v49;
                a1 = v78;
                objc_msgSend(v78, "appendFormat:", CFSTR("\n%*s%@ = %@"), v76, v49, v43, v54);

              }
              v40 = v48;
              v41 = v47;
              v38 = v46;
            }

          }
          v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v79, v87, 16);
        }
        while (v40);

        objc_msgSend(a1, "appendFormat:", CFSTR("\n%*s"), v68, v37);
        v8 = v70;
        v9 = v72;
      }
      else
      {

      }
      objc_msgSend(a1, "appendString:", CFSTR("}"));

    }
  }
LABEL_28:

}

uint64_t sub_100042058(void *a1)
{
  id v1;
  uint64_t v2;
  char isKindOfClass;

  v1 = a1;
  v2 = objc_opt_class(NSString);
  isKindOfClass = objc_opt_isKindOfClass(v1, v2);

  return isKindOfClass & 1;
}

uint64_t sub_10004209C(void *a1)
{
  id v1;
  uint64_t v2;
  char isKindOfClass;

  v1 = a1;
  v2 = objc_opt_class(NSData);
  isKindOfClass = objc_opt_isKindOfClass(v1, v2);

  return isKindOfClass & 1;
}

id sub_1000420E0(id result, int a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;

  if (result && (a5 & 0xC) != 4)
  {
    v7 = CFSTR("NO");
    if (a2)
      v7 = CFSTR("YES");
    return objc_msgSend(result, "appendFormat:", CFSTR("\n%*s%@ = %@"), (4 * a4 + 4), " ", a3, v7, v5, v6);
  }
  return result;
}

id sub_100042144(id result, uint64_t a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    if ((a5 & 0xC) != 4)
      return objc_msgSend(result, "appendFormat:", CFSTR("\n%*s%@ = %lld"), (4 * a4 + 4), " ", a3, a2, v5, v6);
  }
  return result;
}

id *sub_100042190(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id *v16;
  id *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, void *);
  void *v47;
  id v48;
  __int128 *p_buf;
  objc_super v50;
  uint8_t v51[4];
  id v52;
  __int16 v53;
  id v54;
  __int128 buf;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t);
  id v59;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v15 = v12;
  if (!a1)
    goto LABEL_16;
  if (!v9)
  {
    v40 = nplog_obj(v12, v13, v14);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyNetworkRegistration initWithAgentUUID:name:agentDescription:delegate:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "%s called with null agentUUID", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_19;
  }
  if (!v11)
  {
    v42 = nplog_obj(v12, v13, v14);
    v41 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyNetworkRegistration initWithAgentUUID:name:agentDescription:delegate:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "%s called with null agentDescription", (uint8_t *)&buf, 0xCu);
    }
LABEL_19:

    goto LABEL_15;
  }
  v50.receiver = a1;
  v50.super_class = (Class)NSPPrivacyProxyNetworkRegistration;
  v16 = (id *)objc_msgSendSuper2(&v50, "init");
  a1 = v16;
  if (v16)
  {
    objc_storeWeak(v16 + 1, v15);
    v17 = sub_100040CF4((id *)[NSPPrivacyProxyConfigAgent alloc], a1, v9, v11);
    v18 = a1[2];
    a1[2] = v17;

    v19 = objc_msgSend(objc_alloc((Class)NWNetworkAgentRegistration), "initWithNetworkAgentClass:", objc_opt_class(NSPPrivacyProxyConfigAgent));
    v20 = a1[3];
    a1[3] = v19;

    if (a1[2])
    {
      v24 = a1[3] == 0;
      v25 = nplog_obj(v21, v22, v23);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      v27 = v26;
      if (!v24)
      {
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v11;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Looking for existing proxy agent registration for %@", (uint8_t *)&buf, 0xCu);
        }

        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v56 = 0x3032000000;
        v57 = sub_1000030FC;
        v58 = sub_1000426BC;
        v59 = 0;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        v44 = _NSConcreteStackBlock;
        v45 = 3221225472;
        v46 = sub_1000426C4;
        v47 = &unk_1000F52F8;
        v29 = v9;
        v48 = v29;
        p_buf = &buf;
        objc_msgSend(v28, "iterateFileHandlesWithBlock:", &v44);

        if (!*(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
          goto LABEL_13;
        v33 = nplog_obj(v30, v31, v32);
        v34 = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v51 = 138412546;
          v52 = v11;
          v53 = 2112;
          v54 = v29;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Found existing proxy registration for %@ (%@)", v51, 0x16u);
        }

        v35 = (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "agentFlags", v44, v45, v46, v47);
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "agentUUID"));
        objc_msgSend(a1[2], "setAgentUUID:", v36);

        objc_msgSend(a1[2], "setActive:", v35 & 1);
        objc_msgSend(a1[2], "setVoluntary:", (v35 >> 1) & 1);
        objc_msgSend(a1[2], "setUserActivated:", (v35 >> 2) & 1);
        objc_msgSend(a1[2], "setKernelActivated:", (v35 >> 3) & 1);
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "handle"));
        v38 = dup((int)objc_msgSend(v37, "fileDescriptor"));

        if ((objc_msgSend(a1[3], "setRegisteredNetworkAgent:fileDescriptor:", a1[2], v38) & 1) != 0)
        {
LABEL_13:

          _Block_object_dispose(&buf, 8);
          goto LABEL_16;
        }
        close(v38);

        _Block_object_dispose(&buf, 8);
LABEL_15:
        a1 = 0;
        goto LABEL_16;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyNetworkRegistration initWithAgentUUID:name:agentDescription:delegate:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%s called with null _proxyConfigAgentRegistration", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v43 = nplog_obj(v21, v22, v23);
      v27 = objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyNetworkRegistration initWithAgentUUID:name:agentDescription:delegate:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%s called with null _proxyConfigAgent", (uint8_t *)&buf, 0xCu);
      }
    }

    goto LABEL_15;
  }
LABEL_16:

  return a1;
}

void sub_100042690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000426BC(uint64_t a1)
{

}

uint64_t sub_1000426C4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_6;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
  v6 = objc_msgSend(v5, "isEqual:", &off_1000FF230);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
    v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

    if (v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v10 = v3;
      v5 = *(void **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = v10;
      goto LABEL_5;
    }
LABEL_6:
    v11 = 1;
    goto LABEL_7;
  }
LABEL_5:
  v11 = v6 ^ 1;

LABEL_7:
  return v11;
}

id *sub_100042794(id *a1)
{
  if (a1)
    a1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[2], "agentDescription"));
  return a1;
}

void sub_1000427B4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  const char *v10;

  v3 = a2;
  v6 = v3;
  if (a1)
  {
    if (v3)
    {
      if (objc_msgSend(*(id *)(a1 + 24), "isRegistered"))
        objc_msgSend(*(id *)(a1 + 24), "addToken:", v6);
    }
    else
    {
      v7 = nplog_obj(0, v4, v5);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        v9 = 136315138;
        v10 = "-[NSPPrivacyProxyNetworkRegistration addResumableSessionData:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "%s called with null resumableSessionData", (uint8_t *)&v9, 0xCu);
      }

    }
  }

}

_QWORD *sub_100042890(_QWORD *result, uint64_t a2)
{
  if (result)
  {
    result = (_QWORD *)result[3];
    if (result)
      return objc_msgSend(result, "setLowWaterMark:", a2);
  }
  return result;
}

void sub_10004298C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000429A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  id WeakRetained;
  char v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "agentDescription"));
    v14 = 138412290;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resumable session low water mark hit for %@ agent", (uint8_t *)&v14, 0xCu);

  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    WeakRetained = objc_loadWeakRetained((id *)(v7 + 8));
  else
    WeakRetained = 0;
  v9 = objc_opt_respondsToSelector(WeakRetained, "resumableSessionLowWaterMarkReached");

  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      v11 = objc_loadWeakRetained((id *)(v10 + 8));
    else
      v11 = 0;
    objc_msgSend(v11, "resumableSessionLowWaterMarkReached");

  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = 0;

}

void sub_100042BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100042C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  void *v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _DWORD v13[2];
  __int16 v14;
  void *v15;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v6 = *(_DWORD *)(a1 + 64);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "agentDescription"));
    v13[0] = 67109378;
    v13[1] = v6;
    v14 = 2112;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received error %d for %@ agent", (uint8_t *)v13, 0x12u);

  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v8 + 8));
    v10 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "reportErrorForNetworkRegistration:error:withOptions:", v10, *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

uint64_t sub_100042D18(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_8;
  v5 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sessionType"));
  if ((objc_msgSend(v6, "isEqual:", &off_1000FF230) & 1) == 0)
  {

LABEL_8:
    v12 = 0;
    goto LABEL_9;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "agentUUID"));
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v9 = *(void **)(v8 + 16);
  else
    v9 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "agentUUID"));
  v11 = objc_msgSend(v7, "isEqual:", v10);

  if ((v11 & 1) == 0)
    goto LABEL_8;
  v12 = 1;
LABEL_9:

  return v12;
}

void sub_100042DFC(id *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  const char *v6;
  id v7;
  id v8;
  const char *v9;
  id v10;
  id v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id Property;
  const char *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  const char *v33;
  void *v34;
  id v35;
  id v36;
  _BYTE *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id *v49;
  id WeakRetained;
  id v51;
  unsigned __int8 v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  _BYTE v58[24];
  void *v59;
  id *v60;

  if (!a1[3])
  {
    v54 = nplog_obj(a1, a2, a3);
    v55 = objc_claimAutoreleasedReturnValue(v54);
    if (!os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
      goto LABEL_40;
    *(_DWORD *)v58 = 136315138;
    *(_QWORD *)&v58[4] = "-[NSPPrivacyProxyNetworkRegistration resetProxyAgent]";
    v56 = "%s called with null self.proxyConfigAgentRegistration";
LABEL_42:
    _os_log_fault_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_FAULT, v56, v58, 0xCu);
    goto LABEL_40;
  }
  v4 = a1[2];
  if (v4)
  {
    objc_msgSend(v4, "setActive:", 1);
    objc_msgSend(a1[2], "setVoluntary:", 0);
    objc_msgSend(a1[2], "setUserActivated:", 0);
    objc_msgSend(a1[2], "setKernelActivated:", 0);
    v5 = a1[2];
    v7 = a1[4];
    if (v5)
      objc_setProperty_atomic(v5, v6, v7, 32);

    v8 = a1[2];
    v10 = a1[5];
    if (v8)
      objc_setProperty_atomic(v8, v9, v10, 40);

    v11 = objc_msgSend(a1[3], "isRegistered");
    v12 = (int)v11;
    v15 = nplog_obj(v11, v13, v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v17)
      {
        v18 = a1[2];
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "agentDescription"));
        v20 = a1[2];
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "agentUUID"));
        Property = a1[2];
        v24 = Property;
        if (Property)
          Property = objc_getProperty(Property, v23, 40, 1);
        v25 = Property;
        *(_DWORD *)v58 = 138412802;
        *(_QWORD *)&v58[4] = v19;
        *(_WORD *)&v58[12] = 2112;
        *(_QWORD *)&v58[14] = v21;
        *(_WORD *)&v58[22] = 2112;
        v59 = v25;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Updated %@ proxy agent (%@) with hash %@", v58, 0x20u);

      }
      v26 = a1[2];
      v27 = a1[3];
      objc_msgSend(v27, "updateNetworkAgent:", v26);
    }
    else
    {
      if (v17)
      {
        v28 = a1[2];
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "agentDescription"));
        v30 = a1[2];
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "agentUUID"));
        v32 = a1[2];
        v34 = v32;
        if (v32)
          v32 = objc_getProperty(v32, v33, 40, 1);
        v35 = v32;
        *(_DWORD *)v58 = 138412802;
        *(_QWORD *)&v58[4] = v29;
        *(_WORD *)&v58[12] = 2112;
        *(_QWORD *)&v58[14] = v31;
        *(_WORD *)&v58[22] = 2112;
        v59 = v35;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Registered %@ proxy agent (%@) with hash %@", v58, 0x20u);

      }
      v36 = a1[2];
      v27 = a1[3];
      objc_msgSend(v27, "registerNetworkAgent:", v36);
    }

    *(_QWORD *)v58 = _NSConcreteStackBlock;
    *(_QWORD *)&v58[8] = 3221225472;
    *(_QWORD *)&v58[16] = sub_100042D18;
    v59 = &unk_1000F5370;
    v60 = a1;
    v37 = objc_retainBlock(v58);
    if (objc_msgSend(a1[3], "isRegistered"))
    {
      v38 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
      v39 = a1[3];
      v40 = a1[2];
      v41 = v39;
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "agentUUID"));
      v43 = a1[2];
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "agentUUID"));
      v45 = objc_msgSend(v38, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:", v41, &off_1000FF230, v42, v44, 0);

      if (v45)
      {
        v46 = objc_msgSend(a1[2], "isActive");
        if (objc_msgSend(a1[2], "isVoluntary"))
          v46 |= 2uLL;
        if (objc_msgSend(a1[2], "isUserActivated"))
          v46 |= 4uLL;
        if (objc_msgSend(a1[2], "isKernelActivated"))
          v47 = v46 | 8;
        else
          v47 = v46;
        objc_msgSend(v45, "setAgentFlags:", v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        objc_msgSend(v48, "setFileHandle:matchingPredicate:", v45, v37);
      }
      else
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        objc_msgSend(v48, "removeFileHandleMatchingPredicate:", v37);
      }

    }
    else
    {
      v45 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v45, "removeFileHandleMatchingPredicate:", v37);
    }

    v49 = a1 + 1;
    WeakRetained = objc_loadWeakRetained(a1 + 1);
    if ((objc_opt_respondsToSelector(WeakRetained, "deferCommit") & 1) != 0)
    {
      v51 = objc_loadWeakRetained(v49);
      v52 = objc_msgSend(v51, "deferCommit");

      if ((v52 & 1) != 0)
        goto LABEL_36;
    }
    else
    {

    }
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    objc_msgSend(v53, "commit");

LABEL_36:
    return;
  }
  v57 = nplog_obj(0, a2, a3);
  v55 = objc_claimAutoreleasedReturnValue(v57);
  if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)v58 = 136315138;
    *(_QWORD *)&v58[4] = "-[NSPPrivacyProxyNetworkRegistration resetProxyAgent]";
    v56 = "%s called with null self.proxyConfigAgent";
    goto LABEL_42;
  }
LABEL_40:

}

void sub_100043354(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  id WeakRetained;
  id v11;
  unsigned __int8 v12;
  void *v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;

  if (a1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 24), "isRegistered");
    if ((_DWORD)v2)
    {
      v5 = nplog_obj(v2, v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(id *)(a1 + 16);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "agentUUID"));
        *(_DWORD *)buf = 138412290;
        v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Un-registering proxy agent with UUID %@", buf, 0xCu);

      }
      objc_msgSend(*(id *)(a1 + 24), "unregisterNetworkAgent");
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1000434F8;
      v15[3] = &unk_1000F5370;
      v15[4] = a1;
      objc_msgSend(v9, "removeFileHandleMatchingPredicate:", v15);

      WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
      if ((objc_opt_respondsToSelector(WeakRetained, "deferCommit") & 1) != 0)
      {
        v11 = objc_loadWeakRetained((id *)(a1 + 8));
        v12 = objc_msgSend(v11, "deferCommit");

        if ((v12 & 1) != 0)
          goto LABEL_10;
      }
      else
      {

      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v13, "commit");

LABEL_10:
      v14 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

    }
  }
}

id sub_1000434F8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF230))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        v8 = *(void **)(v7 + 16);
      else
        v8 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "agentUUID"));
      v10 = objc_msgSend(v6, "isEqual:", v9);

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_1000435D4(uint64_t a1)
{
  id v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  void *v4;

  if (a1)
  {
    v1 = *(id *)(a1 + 32);
    if (v1 && (v2 = (unsigned __int8 *)malloc_type_malloc(0x20uLL, 0xB19B3FE5uLL)) != 0)
    {
      v3 = v2;
      CC_SHA256(objc_msgSend(v1, "bytes"), (CC_LONG)objc_msgSend(v1, "length"), v2);
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v3, 16));
      free(v3);
    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id *sub_1000436D0(id *result, void *a2, void *a3)
{
  if (result)
    return sub_100042190(result, a2, 0, CFSTR("MultiHop"), a3);
  return result;
}

uint64_t sub_1000436EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, char a11, char a12, char a13, void *a14, void *a15, char a16, char a17, void *a18, unsigned __int8 a19, char a20,void *a21,char a22,void *a23,void *a24,void *a25,char a26,void *a27)
{
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  const char *v43;
  const char *v44;
  nw_endpoint_t url;
  nw_endpoint_t v46;
  uint64_t v47;
  uint64_t v48;
  nw_endpoint_t v49;
  NSObject *masque;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  uint64_t v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  void *i;
  nw_endpoint_t v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  void *j;
  nw_endpoint_t v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  void *k;
  void *v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  void *m;
  void *v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  id v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t default_privacy_proxy;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  id v97;
  id v98;
  id v99;
  uint64_t v100;
  void *n;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  void *ii;
  void *v107;
  NSObject *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  void *v126;
  void *v127;
  id v128;
  void *v129;
  NSObject *log;
  NSObject *v131;
  void *v132;
  NSObject *v133;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  id v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _BYTE v169[128];
  _BYTE v170[128];
  uint8_t buf[24];
  _BYTE v172[128];
  _BYTE v173[128];
  _BYTE v174[128];
  _BYTE v175[128];

  v144 = a2;
  v33 = a3;
  v143 = a4;
  v142 = a5;
  v141 = a6;
  v140 = a7;
  v139 = a8;
  v137 = a9;
  v34 = a14;
  v35 = a15;
  v36 = a18;
  v138 = a21;
  v136 = a23;
  v135 = a24;
  v37 = a25;
  v38 = a27;
  v41 = v38;
  v129 = v33;
  if (!a1)
  {
    v113 = 0;
    v42 = v144;
    goto LABEL_109;
  }
  v42 = v144;
  if (!v144)
  {
    v115 = nplog_obj(v38, v39, v40);
    log = objc_claimAutoreleasedReturnValue(v115);
    if (!os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
    {
LABEL_113:
      v113 = 0;
      goto LABEL_108;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:first"
                         "ProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstProxyHo"
                         "pNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHopSuppor"
                         "tsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egressToken"
                         "AgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgentUUID:shou"
                         "ldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPatterns:alternateA"
                         "gentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
    v116 = "%s called with null firstHopProxyURL";
LABEL_131:
    _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, v116, buf, 0xCu);
    goto LABEL_113;
  }
  if (!v33)
  {
    v117 = nplog_obj(v38, v39, v40);
    log = objc_claimAutoreleasedReturnValue(v117);
    if (!os_log_type_enabled(log, OS_LOG_TYPE_FAULT))
      goto LABEL_113;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:first"
                         "ProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstProxyHo"
                         "pNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHopSuppor"
                         "tsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egressToken"
                         "AgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgentUUID:shou"
                         "ldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPatterns:alternateA"
                         "gentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
    v116 = "%s called with null secondHopProxyURL";
    goto LABEL_131;
  }
  v128 = v37;
  v43 = (const char *)objc_msgSend(v144, "UTF8String");
  v44 = (const char *)objc_msgSend(v33, "UTF8String");
  url = nw_endpoint_create_url(v43);
  v46 = nw_endpoint_create_url(v44);
  v49 = v46;
  log = url;
  if (!url)
  {
    v118 = nplog_obj(v46, v47, v48);
    v133 = objc_claimAutoreleasedReturnValue(v118);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:fir"
                           "stProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstPro"
                           "xyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHop"
                           "SupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                           "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgen"
                           "tUUID:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPattern"
                           "s:alternateAgentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_FAULT, "%s called with null firstHopProxyEndpoint", buf, 0xCu);
    }
    v113 = 0;
    goto LABEL_106;
  }
  if (!v46)
  {
    v119 = nplog_obj(0, v47, v48);
    v133 = objc_claimAutoreleasedReturnValue(v119);
    v37 = v128;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:fir"
                           "stProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstPro"
                           "xyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHop"
                           "SupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                           "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgen"
                           "tUUID:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPattern"
                           "s:alternateAgentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_FAULT, "%s called with null secondHopProxyEndpoint", buf, 0xCu);
    }
    v113 = 0;
    goto LABEL_107;
  }
  masque = nw_proxy_hop_create_masque(url);
  v51 = nw_proxy_hop_create_masque(v49);
  v132 = (void *)v51;
  v133 = masque;
  if (!masque)
  {
    v120 = nplog_obj(v51, v52, v53);
    v92 = objc_claimAutoreleasedReturnValue(v120);
    if (!os_log_type_enabled(v92, OS_LOG_TYPE_FAULT))
    {
LABEL_123:
      v113 = 0;
      goto LABEL_105;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:first"
                         "ProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstProxyHo"
                         "pNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHopSuppor"
                         "tsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egressToken"
                         "AgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgentUUID:shou"
                         "ldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPatterns:alternateA"
                         "gentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
    v121 = "%s called with null firstHopProxy";
LABEL_133:
    _os_log_fault_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_FAULT, v121, buf, 0xCu);
    goto LABEL_123;
  }
  if (!v51)
  {
    v122 = nplog_obj(0, v52, v53);
    v92 = objc_claimAutoreleasedReturnValue(v122);
    if (!os_log_type_enabled(v92, OS_LOG_TYPE_FAULT))
      goto LABEL_123;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:first"
                         "ProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstProxyHo"
                         "pNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHopSuppor"
                         "tsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egressToken"
                         "AgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgentUUID:shou"
                         "ldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPatterns:alternateA"
                         "gentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
    v121 = "%s called with null secondHopProxy";
    goto LABEL_133;
  }
  v54 = masque;
  v55 = v141;
  if ((objc_msgSend(v55, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
  {
    v56 = 2;
  }
  else if (objc_msgSend(v55, "isEqualToString:", CFSTR("draft-12")))
  {
    v56 = 2;
  }
  else
  {
    v56 = 1;
  }
  nw_proxy_hop_set_masque_version(v54, v56);

  v57 = v132;
  v58 = v140;
  if ((objc_msgSend(v58, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
  {
    v59 = 2;
  }
  else if (objc_msgSend(v58, "isEqualToString:", CFSTR("draft-12")))
  {
    v59 = 2;
  }
  else
  {
    v59 = 1;
  }
  nw_proxy_hop_set_masque_version(v57, v59);

  if (a10)
    nw_proxy_hop_set_supports_resumption(v54, 1);
  if (a11)
    nw_proxy_hop_set_supports_resumption(v57, 1);
  v127 = v35;
  if (a12)
    nw_proxy_hop_set_use_x25519(v54, 1);
  v131 = v49;
  v126 = v34;
  if (a13)
    nw_proxy_hop_set_use_x25519(v57, 1);
  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  v60 = v139;
  v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v165, v175, 16);
  if (v61)
  {
    v62 = v61;
    v63 = *(_QWORD *)v166;
    do
    {
      for (i = 0; i != v62; i = (char *)i + 1)
      {
        if (*(_QWORD *)v166 != v63)
          objc_enumerationMutation(v60);
        v65 = sub_100044358(*(void **)(*((_QWORD *)&v165 + 1) + 8 * (_QWORD)i));
        if (v65)
          nw_proxy_hop_add_next_hop_host(v54, v65);

      }
      v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v165, v175, 16);
    }
    while (v62);
  }

  v163 = 0u;
  v164 = 0u;
  v161 = 0u;
  v162 = 0u;
  v66 = v137;
  v67 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v161, v174, 16);
  if (v67)
  {
    v68 = v67;
    v69 = *(_QWORD *)v162;
    do
    {
      for (j = 0; j != v68; j = (char *)j + 1)
      {
        if (*(_QWORD *)v162 != v69)
          objc_enumerationMutation(v66);
        v71 = sub_100044358(*(void **)(*((_QWORD *)&v161 + 1) + 8 * (_QWORD)j));
        if (v71)
          nw_proxy_hop_add_next_hop_host(v57, v71);

      }
      v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v161, v174, 16);
    }
    while (v68);
  }

  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v72 = v143;
  v73 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v157, v173, 16);
  if (v73)
  {
    v74 = v73;
    v75 = *(_QWORD *)v158;
    do
    {
      for (k = 0; k != v74; k = (char *)k + 1)
      {
        if (*(_QWORD *)v158 != v75)
          objc_enumerationMutation(v72);
        v77 = *(void **)(*((_QWORD *)&v157 + 1) + 8 * (_QWORD)k);
        if (objc_msgSend(v77, "length"))
          nw_proxy_hop_add_server_raw_public_key(v54, objc_msgSend(v77, "bytes"), objc_msgSend(v77, "length"));
      }
      v74 = objc_msgSend(v72, "countByEnumeratingWithState:objects:count:", &v157, v173, 16);
    }
    while (v74);
  }

  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  v78 = v142;
  v79 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v153, v172, 16);
  if (v79)
  {
    v80 = v79;
    v81 = *(_QWORD *)v154;
    do
    {
      for (m = 0; m != v80; m = (char *)m + 1)
      {
        if (*(_QWORD *)v154 != v81)
          objc_enumerationMutation(v78);
        v83 = *(void **)(*((_QWORD *)&v153 + 1) + 8 * (_QWORD)m);
        if (objc_msgSend(v83, "length"))
          nw_proxy_hop_add_server_raw_public_key(v57, objc_msgSend(v83, "bytes"), objc_msgSend(v83, "length"));
      }
      v80 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v153, v172, 16);
    }
    while (v80);
  }

  v34 = v126;
  if (v126)
  {
    *(_OWORD *)buf = 0uLL;
    objc_msgSend(v126, "getUUIDBytes:", buf);
    if (a16)
      v85 = "PrivateToken token=";
    else
      v85 = "PrivacyToken token=";
    v84 = nw_proxy_hop_add_token_header(v54, "proxy-authorization", v85, "", buf);
  }
  v35 = v127;
  if (v127)
  {
    *(_OWORD *)buf = 0uLL;
    objc_msgSend(v127, "getUUIDBytes:", buf);
    if (a17)
      v86 = "PrivateToken token=";
    else
      v86 = "PrivacyToken token=";
    v84 = nw_proxy_hop_add_token_header(v57, "proxy-authorization", v86, "", buf);
  }
  if (a20)
  {
    if (os_variant_has_internal_diagnostics("com.apple.networkserviceproxy")
      && objc_msgSend(v138, "length"))
    {
      v87 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("\"%@\""), v138)));
      v88 = (const char *)objc_msgSend(v87, "UTF8String");

      if (!v88)
        goto LABEL_79;
    }
    else
    {
      v88 = "";
    }
    v84 = nw_proxy_hop_add_extra_header(v57, "sec-ch-geohash", v88);
  }
LABEL_79:
  if (a22)
    v84 = nw_proxy_hop_add_extra_header(v57, "sec-ch-filter-dns", "?1");
  v49 = v131;
  if (a26)
    v84 = nw_proxy_hop_supports_udp_proxying_over_http2(v54, 1);
  v89 = nw_array_create(v84);
  v92 = v89;
  if (v89)
  {
    nw_array_append(v89, v54);
    nw_array_append(v92, v57);
    default_privacy_proxy = nw_proxy_config_create_default_privacy_proxy(v92);
    if (default_privacy_proxy)
    {
      v96 = default_privacy_proxy;
      if (v36)
      {
        *(_OWORD *)buf = 0uLL;
        objc_msgSend(v36, "getUUIDBytes:", buf);
        nw_proxy_config_set_fallback_proxy_agent(v96, buf);
      }
      nw_proxy_config_set_is_privacy_proxy(v96, 1, a19);
      v151 = 0u;
      v152 = 0u;
      v149 = 0u;
      v150 = 0u;
      v97 = v136;
      v98 = objc_msgSend(v97, "countByEnumeratingWithState:objects:count:", &v149, v170, 16);
      if (v98)
      {
        v99 = v98;
        v100 = *(_QWORD *)v150;
        do
        {
          for (n = 0; n != v99; n = (char *)n + 1)
          {
            if (*(_QWORD *)v150 != v100)
              objc_enumerationMutation(v97);
            nw_proxy_config_add_preferred_domain(v96, objc_msgSend(*(id *)(*((_QWORD *)&v149 + 1) + 8 * (_QWORD)n), "UTF8String"));
          }
          v99 = objc_msgSend(v97, "countByEnumeratingWithState:objects:count:", &v149, v170, 16);
        }
        while (v99);
      }

      v147 = 0u;
      v148 = 0u;
      v145 = 0u;
      v146 = 0u;
      v102 = v135;
      v103 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v145, v169, 16);
      if (v103)
      {
        v104 = v103;
        v105 = *(_QWORD *)v146;
        do
        {
          for (ii = 0; ii != v104; ii = (char *)ii + 1)
          {
            if (*(_QWORD *)v146 != v105)
              objc_enumerationMutation(v102);
            v107 = *(void **)(*((_QWORD *)&v145 + 1) + 8 * (_QWORD)ii);
            *(_OWORD *)buf = 0uLL;
            objc_msgSend(v107, "getUUIDBytes:", buf);
            nw_proxy_config_add_alternate_agent(v96, buf);
          }
          v104 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v145, v169, 16);
        }
        while (v104);
      }

      if (v41)
      {
        v108 = v96;
        nw_proxy_config_set_epoch(v108, objc_msgSend(v41, "unsignedShortValue"));

      }
      v109 = nw_proxy_config_copy_agent_data(v96);
      v110 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v109;

      objc_storeStrong((id *)(a1 + 40), a25);
      sub_100042DFC((id *)a1, v111, v112);
      v113 = 1;
      v49 = v131;
      goto LABEL_104;
    }
    v124 = nplog_obj(0, v94, v95);
    v125 = objc_claimAutoreleasedReturnValue(v124);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:fir"
                           "stProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstPro"
                           "xyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHop"
                           "SupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                           "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgen"
                           "tUUID:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPattern"
                           "s:alternateAgentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", buf, 0xCu);
    }

    v96 = 0;
  }
  else
  {
    v123 = nplog_obj(0, v90, v91);
    v96 = objc_claimAutoreleasedReturnValue(v123);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopNetworkRegistration setProxyAgentConfiguration:secondProxyHopURL:fir"
                           "stProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firstPro"
                           "xyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyHop"
                           "SupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                           "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:fallbackAgen"
                           "tUUID:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:preferredPathPattern"
                           "s:alternateAgentUUIDs:fallbackProxyConfigHash:fallbackSupportsUDPProxying:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", buf, 0xCu);
    }
  }
  v113 = 0;
LABEL_104:

  v42 = v144;
LABEL_105:

LABEL_106:
  v37 = v128;
LABEL_107:

LABEL_108:
LABEL_109:

  return v113;
}

nw_endpoint_t sub_100044358(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  nw_endpoint_t host;

  v1 = a1;
  if (objc_msgSend(v1, "containsString:", CFSTR(":")))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(":")));
    if (objc_msgSend(v2, "count") == (id)2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lastObject"));
      host = nw_endpoint_create_host((const char *)objc_msgSend(v3, "UTF8String"), (const char *)objc_msgSend(v4, "UTF8String"));

    }
    else
    {
      host = nw_endpoint_create_host((const char *)objc_msgSend(v1, "UTF8String"), "443");
    }

  }
  else
  {
    host = 0;
  }

  return host;
}

id *sub_100044438(id *result, void *a2, void *a3)
{
  if (result)
    return sub_100042190(result, a2, 0, CFSTR("SingleHop"), a3);
  return result;
}

uint64_t sub_100044454(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6, void *a7, int a8, void *a9, unsigned __int8 a10, void *a11, void *a12)
{
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  nw_endpoint_t url;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *masque;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *i;
  void *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t default_privacy_proxy;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v69;
  NSObject *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 buf;
  _BYTE v80[128];

  v18 = a2;
  v74 = a3;
  v19 = a4;
  v73 = a7;
  v20 = a9;
  v21 = a11;
  v22 = a12;
  v25 = v22;
  if (!a1)
  {
    v59 = 0;
    v60 = v73;
    goto LABEL_39;
  }
  if (!v18)
  {
    v62 = nplog_obj(v22, v23, v24);
    v29 = objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopNetworkRegistration setProxyAgentConfiguration:proxyKeyA"
                                      "rray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesStandar"
                                      "dToken:fallbackAgentUUID:shouldFailOpen:fallbackProxyConfigHash:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "%s called with null proxyURL", (uint8_t *)&buf, 0xCu);
    }
    v59 = 0;
    v60 = v73;
    goto LABEL_38;
  }
  v72 = v18;
  url = nw_endpoint_create_url((const char *)objc_msgSend(v18, "UTF8String"));
  v29 = url;
  if (!url)
  {
    v63 = nplog_obj(0, v27, v28);
    v33 = objc_claimAutoreleasedReturnValue(v63);
    v60 = v73;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopNetworkRegistration setProxyAgentConfiguration:proxyKeyA"
                                      "rray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesStandar"
                                      "dToken:fallbackAgentUUID:shouldFailOpen:fallbackProxyConfigHash:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "%s called with null proxyHopEndpoint", (uint8_t *)&buf, 0xCu);
    }
    v59 = 0;
    goto LABEL_37;
  }
  masque = nw_proxy_hop_create_masque(url);
  v33 = masque;
  if (!masque)
  {
    v64 = nplog_obj(0, v31, v32);
    v49 = objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopNetworkRegistration setProxyAgentConfiguration:proxyKeyA"
                                      "rray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesStandar"
                                      "dToken:fallbackAgentUUID:shouldFailOpen:fallbackProxyConfigHash:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "%s called with null proxyHop", (uint8_t *)&buf, 0xCu);
    }
    v59 = 0;
    goto LABEL_36;
  }
  v70 = v29;
  v34 = masque;
  v71 = v19;
  v35 = v19;
  v69 = v33;
  if ((objc_msgSend(v35, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
  {
    v36 = 2;
  }
  else if (objc_msgSend(v35, "isEqualToString:", CFSTR("draft-12")))
  {
    v36 = 2;
  }
  else
  {
    v36 = 1;
  }
  v37 = v25;
  nw_proxy_hop_set_masque_version(v34, v36);

  if (a5)
    nw_proxy_hop_set_supports_resumption(v34, 1);
  if (a6)
    nw_proxy_hop_set_use_x25519(v34, 1);
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v38 = v74;
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
  if (v39)
  {
    v40 = v39;
    v41 = *(_QWORD *)v76;
    do
    {
      for (i = 0; i != v40; i = (char *)i + 1)
      {
        if (*(_QWORD *)v76 != v41)
          objc_enumerationMutation(v38);
        v43 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v43, "length"))
          nw_proxy_hop_add_server_raw_public_key(v34, objc_msgSend(v43, "bytes"), objc_msgSend(v43, "length"));
      }
      v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v75, v80, 16);
    }
    while (v40);
  }

  v44 = (uint64_t)v73;
  if (v73)
  {
    buf = 0uLL;
    objc_msgSend(v73, "getUUIDBytes:", &buf);
    if (a8)
      v45 = "PrivateToken token=";
    else
      v45 = "PrivacyToken token=";
    v44 = nw_proxy_hop_add_token_header(v34, "proxy-authorization", v45, "", &buf);
  }
  v46 = nw_array_create(v44);
  v49 = v46;
  v19 = v71;
  v25 = v37;
  if (v46)
  {
    nw_array_append(v46, v34);
    default_privacy_proxy = nw_proxy_config_create_default_privacy_proxy(v49);
    v33 = v69;
    if (default_privacy_proxy)
    {
      v53 = default_privacy_proxy;
      if (v20)
      {
        buf = 0uLL;
        objc_msgSend(v20, "getUUIDBytes:", &buf);
        nw_proxy_config_set_fallback_proxy_agent(v53, &buf);
      }
      nw_proxy_config_set_is_privacy_proxy(v53, 1, a10);
      if (v25)
      {
        v54 = v53;
        nw_proxy_config_set_epoch(v54, objc_msgSend(v25, "unsignedShortValue"));

      }
      v55 = nw_proxy_config_copy_agent_data(v53);
      v56 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v55;

      objc_storeStrong((id *)(a1 + 40), a11);
      sub_100042DFC((id *)a1, v57, v58);
      v59 = 1;
      goto LABEL_35;
    }
    v66 = nplog_obj(0, v51, v52);
    v67 = objc_claimAutoreleasedReturnValue(v66);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopNetworkRegistration setProxyAgentConfiguration:proxyKeyA"
                                      "rray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesStandar"
                                      "dToken:fallbackAgentUUID:shouldFailOpen:fallbackProxyConfigHash:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", (uint8_t *)&buf, 0xCu);
    }

    v53 = 0;
  }
  else
  {
    v65 = nplog_obj(0, v47, v48);
    v53 = objc_claimAutoreleasedReturnValue(v65);
    v33 = v69;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopNetworkRegistration setProxyAgentConfiguration:proxyKeyA"
                                      "rray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesStandar"
                                      "dToken:fallbackAgentUUID:shouldFailOpen:fallbackProxyConfigHash:configEpoch:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", (uint8_t *)&buf, 0xCu);
    }
  }
  v59 = 0;
LABEL_35:

  v29 = v70;
LABEL_36:

  v60 = v73;
LABEL_37:

  v18 = v72;
LABEL_38:

LABEL_39:
  return v59;
}

id *sub_1000449D0(id *a1, void *a2, void *a3, void *a4)
{
  id *v4;
  id v7;
  id v8;
  id v9;
  void *v10;
  id *v11;

  v4 = a1;
  if (a1)
  {
    v7 = a4;
    v8 = a3;
    v9 = a2;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ObliviousHop-%@"), v8));
    v11 = sub_100042190(v4, v9, v8, v10, v7);

    v4 = v11;
  }
  return v4;
}

uint64_t sub_100044A88(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6, void *a7, int a8, void *a9, unsigned __int8 a10, void *a11, void *a12, unsigned int a13, void *a14)
{
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *masque;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *i;
  void *v43;
  uint64_t oblivious_http_with_context;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *default_privacy_proxy;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  nw_endpoint_t url;
  void *v80;
  id v81;
  id v82;
  id v83;
  id v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 buf;
  _BYTE v90[128];

  v19 = a2;
  v84 = a3;
  v83 = a4;
  v82 = a7;
  v20 = a9;
  v21 = a11;
  v22 = a12;
  v23 = a14;
  v81 = v23;
  if (!a1)
  {
    v57 = 0;
    v26 = v19;
    v47 = v82;
    v27 = v20;
    v62 = v23;
    goto LABEL_48;
  }
  v26 = v19;
  if (!v19)
  {
    v67 = nplog_obj(v23, v24, v25);
    v65 = objc_claimAutoreleasedReturnValue(v67);
    v27 = v20;
    if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:proxy"
                                      "KeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesSta"
                                      "ndardToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:obliviou"
                                      "sHTTPType:fallbackProxyConfigHash:]";
      v68 = "%s called with null proxyURL";
      goto LABEL_68;
    }
LABEL_54:
    v57 = 0;
    v47 = v82;
    v62 = v81;
    goto LABEL_47;
  }
  v27 = v20;
  if (!v21)
  {
    v69 = nplog_obj(v23, v24, v25);
    v65 = objc_claimAutoreleasedReturnValue(v69);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:proxy"
                                      "KeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesSta"
                                      "ndardToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:obliviou"
                                      "sHTTPType:fallbackProxyConfigHash:]";
      v68 = "%s called with null obliviousConfig";
      goto LABEL_68;
    }
    goto LABEL_54;
  }
  if (!v22)
  {
    v70 = nplog_obj(v23, v24, v25);
    v65 = objc_claimAutoreleasedReturnValue(v70);
    if (!os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
      goto LABEL_54;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:proxyKe"
                                    "yArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesStandar"
                                    "dToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPT"
                                    "ype:fallbackProxyConfigHash:]";
    v68 = "%s called with null obliviousPath";
LABEL_68:
    _os_log_fault_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, v68, (uint8_t *)&buf, 0xCu);
    goto LABEL_54;
  }
  v28 = a1;
  url = nw_endpoint_create_url((const char *)objc_msgSend(v19, "UTF8String"));
  if (!url)
  {
    v34 = v22;
    v71 = nplog_obj(0, v29, v30);
    v35 = objc_claimAutoreleasedReturnValue(v71);
    v47 = v82;
    v62 = v81;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:proxy"
                                      "KeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesSta"
                                      "ndardToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:obliviou"
                                      "sHTTPType:fallbackProxyConfigHash:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "%s called with null proxyHopEndpoint", (uint8_t *)&buf, 0xCu);
    }
    v57 = 0;
    goto LABEL_46;
  }
  masque = (void *)nw_proxy_hop_create_masque();
  v34 = v22;
  if (!masque)
  {
    v72 = nplog_obj(0, v32, v33);
    v73 = objc_claimAutoreleasedReturnValue(v72);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:proxy"
                                      "KeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesSta"
                                      "ndardToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:obliviou"
                                      "sHTTPType:fallbackProxyConfigHash:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_FAULT, "%s called with null proxyHop", (uint8_t *)&buf, 0xCu);
    }

    v35 = 0;
    v57 = 0;
    v47 = v82;
    v62 = v81;
    goto LABEL_46;
  }
  v35 = masque;
  v36 = v83;
  if ((objc_msgSend(v36, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
  {
    v37 = 2;
  }
  else if (objc_msgSend(v36, "isEqualToString:", CFSTR("draft-12")))
  {
    v37 = 2;
  }
  else
  {
    v37 = 1;
  }
  nw_proxy_hop_set_masque_version(v35, v37);

  if (a5)
    nw_proxy_hop_set_supports_resumption(v35, 1);
  v80 = v26;
  if (a6)
    nw_proxy_hop_set_use_x25519(v35, 1);
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v38 = v84;
  v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v85, v90, 16);
  if (v39)
  {
    v40 = v39;
    v41 = *(_QWORD *)v86;
    do
    {
      for (i = 0; i != v40; i = (char *)i + 1)
      {
        if (*(_QWORD *)v86 != v41)
          objc_enumerationMutation(v38);
        v43 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v43, "length"))
          nw_proxy_hop_add_server_raw_public_key(v35, objc_msgSend(v43, "bytes"), objc_msgSend(v43, "length"));
      }
      v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v85, v90, 16);
    }
    while (v40);
  }

  v47 = v82;
  if (v82)
  {
    buf = 0uLL;
    objc_msgSend(v82, "getUUIDBytes:", &buf);
    if (a8)
      v48 = "PrivateToken token=";
    else
      v48 = "PrivacyToken token=";
    oblivious_http_with_context = nw_proxy_hop_add_token_header(v35, "proxy-authorization", v48, "", &buf);
  }
  v27 = v20;
  if (a13 > 1)
  {
    if (a13 != 2)
    {
LABEL_43:
      v63 = nplog_obj(oblivious_http_with_context, v45, v46);
      v64 = objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:pro"
                                        "xyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUse"
                                        "sStandardToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:ob"
                                        "liviousHTTPType:fallbackProxyConfigHash:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "%s called with null obliviousHop", (uint8_t *)&buf, 0xCu);
      }

      v57 = 0;
      v26 = v80;
      v62 = v81;
      goto LABEL_46;
    }
    oblivious_http_with_context = nw_proxy_hop_create_oblivious_http_with_context(objc_msgSend(v21, "bytes"), objc_msgSend(v21, "length"), objc_msgSend(v34, "UTF8String"), 0);
    v49 = (void *)oblivious_http_with_context;
  }
  else
  {
    oblivious_http_with_context = nw_proxy_hop_create_oblivious_http(objc_msgSend(v21, "bytes"), objc_msgSend(v21, "length"), objc_msgSend(v34, "UTF8String"));
    v49 = (void *)oblivious_http_with_context;
    if (a13 == 1)
      oblivious_http_with_context = nw_proxy_hop_set_enable_chunked_oblivious_http(oblivious_http_with_context, 1);
  }
  if (!v49)
    goto LABEL_43;
  v50 = nw_array_create(oblivious_http_with_context);
  v53 = (void *)v50;
  if (v50)
  {
    nw_array_append(v50, v35);
    nw_array_append(v53, v49);
    default_privacy_proxy = nw_proxy_config_create_default_privacy_proxy(v53);
    if (default_privacy_proxy)
    {
      if (v20)
      {
        buf = 0uLL;
        objc_msgSend(v20, "getUUIDBytes:", &buf);
        nw_proxy_config_set_fallback_proxy_agent(default_privacy_proxy, &buf);
      }
      v57 = 1;
      nw_proxy_config_set_is_privacy_proxy(default_privacy_proxy, 1, a10);
      v58 = nw_proxy_config_copy_agent_data(default_privacy_proxy);
      v59 = *(void **)(v28 + 32);
      *(_QWORD *)(v28 + 32) = v58;

      objc_storeStrong((id *)(v28 + 40), a14);
      sub_100042DFC((id *)v28, v60, v61);
    }
    else
    {
      v75 = nplog_obj(0, v54, v55);
      v76 = objc_claimAutoreleasedReturnValue(v75);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:pro"
                                        "xyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUse"
                                        "sStandardToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:ob"
                                        "liviousHTTPType:fallbackProxyConfigHash:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", (uint8_t *)&buf, 0xCu);
      }

      v57 = 0;
    }
    v62 = v81;
  }
  else
  {
    v74 = nplog_obj(0, v51, v52);
    default_privacy_proxy = objc_claimAutoreleasedReturnValue(v74);
    v62 = v81;
    if (os_log_type_enabled(default_privacy_proxy, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsNetworkRegistration setProxyAgentConfiguration:proxy"
                                      "KeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUsesSta"
                                      "ndardToken:fallbackAgentUUID:shouldFailOpen:obliviousConfig:obliviousPath:obliviou"
                                      "sHTTPType:fallbackProxyConfigHash:]";
      _os_log_fault_impl((void *)&_mh_execute_header, default_privacy_proxy, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", (uint8_t *)&buf, 0xCu);
    }
    v57 = 0;
  }

  v26 = v80;
  v47 = v82;
LABEL_46:

  v22 = v34;
  v65 = url;
LABEL_47:

LABEL_48:
  return v57;
}

id *sub_1000451D4(id *result, void *a2, void *a3)
{
  if (result)
    return sub_100042190(result, a2, 0, CFSTR("MultiHopFallback"), a3);
  return result;
}

uint64_t sub_1000451F0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, char a11, char a12, char a13, void *a14, void *a15, char a16, char a17, unsigned __int8 a18, char a19, void *a20,char a21,char a22,void *a23)
{
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  const char *v38;
  const char *v39;
  NSObject *url;
  nw_endpoint_t v41;
  uint64_t v42;
  uint64_t v43;
  nw_endpoint_t v44;
  NSObject *masque;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  NSObject *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  void *i;
  nw_endpoint_t v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  void *j;
  nw_endpoint_t v69;
  id v70;
  id v71;
  id v72;
  uint64_t v73;
  void *k;
  void *v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  void *m;
  void *v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  id v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t fallback_privacy_proxy;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  NSObject *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  void *v114;
  void *v115;
  NSObject *v116;
  NSObject *v117;
  id v118;
  id v119;
  uint64_t v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint8_t buf[24];
  _BYTE v146[128];
  _BYTE v147[128];
  _BYTE v148[128];
  _BYTE v149[128];

  v122 = a2;
  v30 = a3;
  v128 = a4;
  v127 = a5;
  v31 = a6;
  v32 = a7;
  v126 = a8;
  v125 = a9;
  v124 = a14;
  v123 = a15;
  v121 = a20;
  v33 = a23;
  v36 = v33;
  v120 = a1;
  if (!a1)
  {
    v100 = 0;
    v37 = v122;
    goto LABEL_92;
  }
  v37 = v122;
  if (!v122)
  {
    v102 = nplog_obj(v33, v34, v35);
    url = objc_claimAutoreleasedReturnValue(v102);
    if (!os_log_type_enabled(url, OS_LOG_TYPE_FAULT))
    {
LABEL_96:
      v100 = 0;
      goto LABEL_91;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                         "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firs"
                         "tProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyH"
                         "opSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                         "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:shouldFailOpen"
                         ":allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackSupportsUDPProxying:configEpoch:]";
    v103 = "%s called with null firstHopProxyURL";
LABEL_112:
    _os_log_fault_impl((void *)&_mh_execute_header, url, OS_LOG_TYPE_FAULT, v103, buf, 0xCu);
    goto LABEL_96;
  }
  if (!v30)
  {
    v104 = nplog_obj(v33, v34, v35);
    url = objc_claimAutoreleasedReturnValue(v104);
    if (!os_log_type_enabled(url, OS_LOG_TYPE_FAULT))
      goto LABEL_96;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                         "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firs"
                         "tProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyH"
                         "opSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                         "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:shouldFailOpen"
                         ":allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackSupportsUDPProxying:configEpoch:]";
    v103 = "%s called with null secondHopProxyURL";
    goto LABEL_112;
  }
  v38 = (const char *)objc_msgSend(v122, "UTF8String");
  v39 = (const char *)objc_msgSend(v30, "UTF8String");
  url = nw_endpoint_create_url(v38);
  v41 = nw_endpoint_create_url(v39);
  v44 = v41;
  v119 = v30;
  if (!url)
  {
    v105 = nplog_obj(v41, v42, v43);
    masque = objc_claimAutoreleasedReturnValue(v105);
    if (!os_log_type_enabled(masque, OS_LOG_TYPE_FAULT))
    {
LABEL_100:
      v100 = 0;
      goto LABEL_90;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                         "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firs"
                         "tProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyH"
                         "opSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                         "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:shouldFailOpen"
                         ":allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackSupportsUDPProxying:configEpoch:]";
    v106 = "%s called with null firstHopProxyEndpoint";
LABEL_114:
    _os_log_fault_impl((void *)&_mh_execute_header, masque, OS_LOG_TYPE_FAULT, v106, buf, 0xCu);
    goto LABEL_100;
  }
  if (!v41)
  {
    v107 = nplog_obj(0, v42, v43);
    masque = objc_claimAutoreleasedReturnValue(v107);
    if (!os_log_type_enabled(masque, OS_LOG_TYPE_FAULT))
      goto LABEL_100;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                         "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firs"
                         "tProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyH"
                         "opSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                         "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:shouldFailOpen"
                         ":allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackSupportsUDPProxying:configEpoch:]";
    v106 = "%s called with null secondHopProxyEndpoint";
    goto LABEL_114;
  }
  masque = nw_proxy_hop_create_masque(url);
  v46 = nw_proxy_hop_create_masque(v44);
  v49 = (void *)v46;
  v118 = v32;
  if (!masque)
  {
    v108 = nplog_obj(v46, v47, v48);
    v90 = objc_claimAutoreleasedReturnValue(v108);
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_FAULT))
      goto LABEL_104;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                         "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firs"
                         "tProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyH"
                         "opSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                         "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:shouldFailOpen"
                         ":allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackSupportsUDPProxying:configEpoch:]";
    v109 = "%s called with null firstHopProxy";
LABEL_116:
    _os_log_fault_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_FAULT, v109, buf, 0xCu);
    goto LABEL_104;
  }
  if (v46)
  {
    v116 = v44;
    v117 = url;
    v50 = masque;
    v51 = v31;
    v114 = v36;
    if ((objc_msgSend(v51, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
    {
      v52 = 2;
    }
    else if (objc_msgSend(v51, "isEqualToString:", CFSTR("draft-12")))
    {
      v52 = 2;
    }
    else
    {
      v52 = 1;
    }
    nw_proxy_hop_set_masque_version(v50, v52);

    v53 = v49;
    v54 = v32;
    if ((objc_msgSend(v54, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
    {
      v55 = 2;
    }
    else if (objc_msgSend(v54, "isEqualToString:", CFSTR("draft-12")))
    {
      v55 = 2;
    }
    else
    {
      v55 = 1;
    }
    nw_proxy_hop_set_masque_version(v53, v55);

    if (a10)
      nw_proxy_hop_set_supports_resumption(v50, 1);
    v115 = v49;
    if (a11)
      nw_proxy_hop_set_supports_resumption(v53, 1);
    v56 = masque;
    if (a12)
      nw_proxy_hop_set_use_x25519(v50, 1);
    v57 = v31;
    if (a13)
      nw_proxy_hop_set_use_x25519(v53, 1);
    v143 = 0u;
    v144 = 0u;
    v141 = 0u;
    v142 = 0u;
    v58 = v126;
    v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v141, v149, 16);
    if (v59)
    {
      v60 = v59;
      v61 = *(_QWORD *)v142;
      do
      {
        for (i = 0; i != v60; i = (char *)i + 1)
        {
          if (*(_QWORD *)v142 != v61)
            objc_enumerationMutation(v58);
          v63 = sub_100044358(*(void **)(*((_QWORD *)&v141 + 1) + 8 * (_QWORD)i));
          if (v63)
            nw_proxy_hop_add_next_hop_host(v50, v63);

        }
        v60 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v141, v149, 16);
      }
      while (v60);
    }

    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    v64 = v125;
    v65 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v137, v148, 16);
    if (v65)
    {
      v66 = v65;
      v67 = *(_QWORD *)v138;
      do
      {
        for (j = 0; j != v66; j = (char *)j + 1)
        {
          if (*(_QWORD *)v138 != v67)
            objc_enumerationMutation(v64);
          v69 = sub_100044358(*(void **)(*((_QWORD *)&v137 + 1) + 8 * (_QWORD)j));
          if (v69)
            nw_proxy_hop_add_next_hop_host(v53, v69);

        }
        v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v137, v148, 16);
      }
      while (v66);
    }

    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v70 = v128;
    v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v133, v147, 16);
    if (v71)
    {
      v72 = v71;
      v73 = *(_QWORD *)v134;
      do
      {
        for (k = 0; k != v72; k = (char *)k + 1)
        {
          if (*(_QWORD *)v134 != v73)
            objc_enumerationMutation(v70);
          v75 = *(void **)(*((_QWORD *)&v133 + 1) + 8 * (_QWORD)k);
          if (objc_msgSend(v75, "length"))
            nw_proxy_hop_add_server_raw_public_key(v50, objc_msgSend(v75, "bytes"), objc_msgSend(v75, "length"));
        }
        v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v133, v147, 16);
      }
      while (v72);
    }

    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v76 = v127;
    v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v129, v146, 16);
    if (v77)
    {
      v78 = v77;
      v79 = *(_QWORD *)v130;
      do
      {
        for (m = 0; m != v78; m = (char *)m + 1)
        {
          if (*(_QWORD *)v130 != v79)
            objc_enumerationMutation(v76);
          v81 = *(void **)(*((_QWORD *)&v129 + 1) + 8 * (_QWORD)m);
          if (objc_msgSend(v81, "length"))
            nw_proxy_hop_add_server_raw_public_key(v53, objc_msgSend(v81, "bytes"), objc_msgSend(v81, "length"));
        }
        v78 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v129, v146, 16);
      }
      while (v78);
    }

    if (v124)
    {
      *(_OWORD *)buf = 0uLL;
      objc_msgSend(v124, "getUUIDBytes:", buf);
      if (a16)
        v82 = "PrivateToken token=";
      else
        v82 = "PrivacyToken token=";
      nw_proxy_hop_add_token_header(v50, "proxy-authorization", v82, "", buf);
    }
    v31 = v57;
    v83 = (uint64_t)v123;
    if (v123)
    {
      *(_OWORD *)buf = 0uLL;
      objc_msgSend(v123, "getUUIDBytes:", buf);
      if (a17)
        v84 = "PrivateToken token=";
      else
        v84 = "PrivacyToken token=";
      v83 = nw_proxy_hop_add_token_header(v53, "proxy-authorization", v84, "", buf);
    }
    masque = v56;
    v49 = v115;
    if (!a19)
      goto LABEL_79;
    if (os_variant_has_internal_diagnostics("com.apple.networkserviceproxy")
      && objc_msgSend(v121, "length"))
    {
      v85 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("\"%@\""), v121)));
      v86 = (const char *)objc_msgSend(v85, "UTF8String");

      if (!v86)
        goto LABEL_79;
    }
    else
    {
      v86 = "";
    }
    v83 = nw_proxy_hop_add_extra_header(v53, "sec-ch-geohash", v86);
LABEL_79:
    if (a21)
      v83 = nw_proxy_hop_add_extra_header(v53, "sec-ch-filter-dns", "?1");
    v87 = nw_array_create(v83);
    v90 = v87;
    if (v87)
    {
      nw_array_append(v87, v50);
      nw_array_append(v90, v53);
      if (a22)
        nw_proxy_hop_supports_udp_proxying_over_http2(v50, 1);
      fallback_privacy_proxy = nw_proxy_config_create_fallback_privacy_proxy(v90);
      v37 = v122;
      v36 = v114;
      if (fallback_privacy_proxy)
      {
        v94 = fallback_privacy_proxy;
        nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 1, a18);
        if (v114)
        {
          v95 = v94;
          nw_proxy_config_set_epoch(v95, objc_msgSend(v114, "unsignedShortValue"));

        }
        v96 = nw_proxy_config_copy_agent_data(v94);
        v97 = *(void **)(v120 + 32);
        *(_QWORD *)(v120 + 32) = v96;

        sub_100042DFC((id *)v120, v98, v99);
        v100 = 1;
      }
      else
      {
        v112 = nplog_obj(0, v92, v93);
        v113 = objc_claimAutoreleasedReturnValue(v112);
        if (os_log_type_enabled(v113, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondPro"
                               "xyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHop"
                               "Version:firstProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResum"
                               "ption:secondProxyHopSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:i"
                               "ngressTokenAgentUUID:egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUs"
                               "esStandardToken:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:fallba"
                               "ckSupportsUDPProxying:configEpoch:]";
          _os_log_fault_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", buf, 0xCu);
        }

        v94 = 0;
        v100 = 0;
      }
    }
    else
    {
      v111 = nplog_obj(0, v88, v89);
      v94 = objc_claimAutoreleasedReturnValue(v111);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxy"
                             "HopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVers"
                             "ion:firstProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:"
                             "secondProxyHopSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTo"
                             "kenAgentUUID:egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandard"
                             "Token:shouldFailOpen:allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackSupportsUD"
                             "PProxying:configEpoch:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", buf, 0xCu);
      }
      v100 = 0;
      v37 = v122;
      v36 = v114;
    }

    v44 = v116;
    url = v117;
    goto LABEL_89;
  }
  v110 = nplog_obj(0, v47, v48);
  v90 = objc_claimAutoreleasedReturnValue(v110);
  if (os_log_type_enabled(v90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyMultiHopFallbackNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                         "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:firs"
                         "tProxyHopNextHopsArray:secondProxyHopNextHopsArray:firstProxyHopSupportsResumption:secondProxyH"
                         "opSupportsResumption:firstProxyHopUsesX25519:secondProxyHopUsesX25519:ingressTokenAgentUUID:egr"
                         "essTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:shouldFailOpen"
                         ":allowGeohash:geohashOverride:enableDNSFilteringHint:fallbackSupportsUDPProxying:configEpoch:]";
    v109 = "%s called with null secondHopProxy";
    goto LABEL_116;
  }
LABEL_104:
  v100 = 0;
LABEL_89:

  v32 = v118;
LABEL_90:

  v30 = v119;
LABEL_91:

LABEL_92:
  return v100;
}

id *sub_100045C4C(id *result, void *a2, void *a3)
{
  if (result)
    return sub_100042190(result, a2, 0, CFSTR("SingleHopFallback"), a3);
  return result;
}

uint64_t sub_100045C68(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6, void *a7, int a8, unsigned __int8 a9, void *a10)
{
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  nw_endpoint_t url;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *masque;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  void *i;
  void *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t fallback_privacy_proxy;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  int v65;
  NSObject *v66;
  void *v67;
  id v68;
  id v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 buf;
  _BYTE v75[128];

  v17 = a2;
  v69 = a3;
  v18 = a4;
  v19 = a7;
  v20 = a10;
  v23 = v20;
  if (a1)
  {
    if (v17)
    {
      url = nw_endpoint_create_url((const char *)objc_msgSend(v17, "UTF8String"));
      v27 = url;
      if (url)
      {
        masque = nw_proxy_hop_create_masque(url);
        v31 = masque;
        if (masque)
        {
          v65 = a8;
          v68 = v17;
          v32 = masque;
          v33 = v18;
          if ((objc_msgSend(v33, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
          {
            v34 = 2;
          }
          else if (objc_msgSend(v33, "isEqualToString:", CFSTR("draft-12")))
          {
            v34 = 2;
          }
          else
          {
            v34 = 1;
          }
          v66 = v27;
          v67 = v23;
          nw_proxy_hop_set_masque_version(v32, v34);

          if (a5)
            nw_proxy_hop_set_supports_resumption(v32, 1);
          v35 = v18;
          if (a6)
            nw_proxy_hop_set_use_x25519(v32, 1);
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v36 = v69;
          v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v70, v75, 16);
          if (v37)
          {
            v38 = v37;
            v39 = *(_QWORD *)v71;
            do
            {
              for (i = 0; i != v38; i = (char *)i + 1)
              {
                if (*(_QWORD *)v71 != v39)
                  objc_enumerationMutation(v36);
                v41 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v41, "length"))
                  nw_proxy_hop_add_server_raw_public_key(v32, objc_msgSend(v41, "bytes"), objc_msgSend(v41, "length"));
              }
              v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v70, v75, 16);
            }
            while (v38);
          }

          v42 = (uint64_t)v19;
          if (v19)
          {
            buf = 0uLL;
            objc_msgSend(v19, "getUUIDBytes:", &buf);
            if (v65)
              v43 = "PrivateToken token=";
            else
              v43 = "PrivacyToken token=";
            v42 = nw_proxy_hop_add_token_header(v32, "proxy-authorization", v43, "", &buf);
          }
          v44 = nw_array_create(v42);
          v47 = v44;
          if (v44)
          {
            nw_array_append(v44, v32);
            fallback_privacy_proxy = nw_proxy_config_create_fallback_privacy_proxy(v47);
            v18 = v35;
            if (fallback_privacy_proxy)
            {
              v51 = fallback_privacy_proxy;
              nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 1, a9);
              v23 = v67;
              v17 = v68;
              v27 = v66;
              if (v67)
              {
                v52 = v51;
                nw_proxy_config_set_epoch(v52, objc_msgSend(v67, "unsignedShortValue"));

              }
              v53 = nw_proxy_config_copy_agent_data(v51);
              v54 = *(void **)(a1 + 32);
              *(_QWORD *)(a1 + 32) = v53;

              sub_100042DFC((id *)a1, v55, v56);
              v57 = 1;
            }
            else
            {
              v63 = nplog_obj(0, v49, v50);
              v64 = objc_claimAutoreleasedReturnValue(v63);
              v23 = v67;
              v17 = v68;
              v27 = v66;
              if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
              {
                LODWORD(buf) = 136315138;
                *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopFallbackNetworkRegistration setProxyAgentConfi"
                                                "guration:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenA"
                                                "gentUUID:proxyHopUsesStandardToken:shouldFailOpen:configEpoch:]";
                _os_log_fault_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", (uint8_t *)&buf, 0xCu);
              }

              v51 = 0;
              v57 = 0;
            }
          }
          else
          {
            v62 = nplog_obj(0, v45, v46);
            v51 = objc_claimAutoreleasedReturnValue(v62);
            v18 = v35;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
            {
              LODWORD(buf) = 136315138;
              *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopFallbackNetworkRegistration setProxyAgentConfigu"
                                              "ration:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgent"
                                              "UUID:proxyHopUsesStandardToken:shouldFailOpen:configEpoch:]";
              _os_log_fault_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", (uint8_t *)&buf, 0xCu);
            }
            v57 = 0;
            v23 = v67;
            v17 = v68;
            v27 = v66;
          }

        }
        else
        {
          v61 = nplog_obj(0, v29, v30);
          v47 = objc_claimAutoreleasedReturnValue(v61);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
          {
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopFallbackNetworkRegistration setProxyAgentConfigura"
                                            "tion:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID"
                                            ":proxyHopUsesStandardToken:shouldFailOpen:configEpoch:]";
            _os_log_fault_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "%s called with null proxyHop", (uint8_t *)&buf, 0xCu);
          }
          v57 = 0;
        }

      }
      else
      {
        v60 = nplog_obj(0, v25, v26);
        v31 = objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
        {
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopFallbackNetworkRegistration setProxyAgentConfigurati"
                                          "on:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:pro"
                                          "xyHopUsesStandardToken:shouldFailOpen:configEpoch:]";
          _os_log_fault_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "%s called with null proxyHopEndpoint", (uint8_t *)&buf, 0xCu);
        }
        v57 = 0;
      }

    }
    else
    {
      v59 = nplog_obj(v20, v21, v22);
      v27 = objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxySingleHopFallbackNetworkRegistration setProxyAgentConfiguration"
                                        ":proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHo"
                                        "pUsesStandardToken:shouldFailOpen:configEpoch:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%s called with null proxyURL", (uint8_t *)&buf, 0xCu);
      }
      v57 = 0;
    }

  }
  else
  {
    v57 = 0;
  }

  return v57;
}

id *sub_10004618C(id *a1, void *a2, void *a3, void *a4)
{
  id *v4;
  id v7;
  id v8;
  id v9;
  void *v10;
  id *v11;

  v4 = a1;
  if (a1)
  {
    v7 = a4;
    v8 = a3;
    v9 = a2;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ObliviousHopFallback-%@"), v8));
    v11 = sub_100042190(v4, v9, v8, v10, v7);

    v4 = v11;
  }
  return v4;
}

uint64_t sub_100046244(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6, void *a7, int a8, unsigned __int8 a9, void *a10, void *a11, unsigned int a12)
{
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  nw_endpoint_t url;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *masque;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *i;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t oblivious_http_with_context;
  const char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t fallback_privacy_proxy;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  void *v61;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 buf;
  _BYTE v83[128];

  v19 = a2;
  v77 = a3;
  v76 = a4;
  v75 = a7;
  v20 = a10;
  v21 = a11;
  v24 = v21;
  if (!a1)
  {
    v54 = 0;
    v61 = v75;
    goto LABEL_46;
  }
  if (!v19)
  {
    v63 = nplog_obj(v21, v22, v23);
    v28 = objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfigurati"
                                      "on:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHo"
                                      "pUsesStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
      v64 = "%s called with null proxyURL";
      goto LABEL_66;
    }
LABEL_52:
    v54 = 0;
    v61 = v75;
    goto LABEL_45;
  }
  if (!v20)
  {
    v65 = nplog_obj(v21, v22, v23);
    v28 = objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfigurati"
                                      "on:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHo"
                                      "pUsesStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
      v64 = "%s called with null obliviousConfig";
      goto LABEL_66;
    }
    goto LABEL_52;
  }
  if (!v21)
  {
    v66 = nplog_obj(0, v22, v23);
    v28 = objc_claimAutoreleasedReturnValue(v66);
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
      goto LABEL_52;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfiguration"
                                    ":proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHopUse"
                                    "sStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
    v64 = "%s called with null obliviousPath";
LABEL_66:
    _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, v64, (uint8_t *)&buf, 0xCu);
    goto LABEL_52;
  }
  url = nw_endpoint_create_url((const char *)objc_msgSend(v19, "UTF8String"));
  v28 = url;
  v74 = v19;
  if (!url)
  {
    v67 = nplog_obj(0, v26, v27);
    v32 = objc_claimAutoreleasedReturnValue(v67);
    v61 = v75;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfigurati"
                                      "on:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHo"
                                      "pUsesStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%s called with null proxyHopEndpoint", (uint8_t *)&buf, 0xCu);
    }
    v54 = 0;
    goto LABEL_44;
  }
  masque = (void *)nw_proxy_hop_create_masque(url);
  if (!masque)
  {
    v68 = nplog_obj(0, v30, v31);
    v69 = objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfigurati"
                                      "on:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHo"
                                      "pUsesStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_FAULT, "%s called with null proxyHop", (uint8_t *)&buf, 0xCu);
    }

    v32 = 0;
    v54 = 0;
    v61 = v75;
    goto LABEL_44;
  }
  v32 = masque;
  v33 = v76;
  if ((objc_msgSend(v33, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
  {
    v34 = 2;
  }
  else if (objc_msgSend(v33, "isEqualToString:", CFSTR("draft-12")))
  {
    v34 = 2;
  }
  else
  {
    v34 = 1;
  }
  v73 = v28;
  nw_proxy_hop_set_masque_version(v32, v34);

  if (a5)
    nw_proxy_hop_set_supports_resumption(v32, 1);
  if (a6)
    nw_proxy_hop_set_use_x25519(v32, 1);
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v35 = v77;
  v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
  if (v36)
  {
    v37 = v36;
    v38 = *(_QWORD *)v79;
    do
    {
      for (i = 0; i != v37; i = (char *)i + 1)
      {
        if (*(_QWORD *)v79 != v38)
          objc_enumerationMutation(v35);
        v40 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v40, "length"))
          nw_proxy_hop_add_server_raw_public_key(v32, objc_msgSend(v40, "bytes"), objc_msgSend(v40, "length"));
      }
      v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v78, v83, 16);
    }
    while (v37);
  }

  oblivious_http_with_context = (uint64_t)v75;
  if (v75)
  {
    buf = 0uLL;
    objc_msgSend(v75, "getUUIDBytes:", &buf);
    if (a8)
      v44 = "PrivateToken token=";
    else
      v44 = "PrivacyToken token=";
    oblivious_http_with_context = nw_proxy_hop_add_token_header(v32, "proxy-authorization", v44, "", &buf);
  }
  if (a12 > 1)
  {
    if (a12 != 2)
    {
LABEL_40:
      v59 = nplog_obj(oblivious_http_with_context, v41, v42);
      v60 = objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfigura"
                                        "tion:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:pro"
                                        "xyHopUsesStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_FAULT, "%s called with null obliviousHop", (uint8_t *)&buf, 0xCu);
      }

      v54 = 0;
      goto LABEL_43;
    }
    oblivious_http_with_context = nw_proxy_hop_create_oblivious_http_with_context(objc_msgSend(v20, "bytes"), objc_msgSend(v20, "length"), objc_msgSend(v24, "UTF8String"), 0);
    v45 = (void *)oblivious_http_with_context;
  }
  else
  {
    oblivious_http_with_context = nw_proxy_hop_create_oblivious_http(objc_msgSend(v20, "bytes"), objc_msgSend(v20, "length"), objc_msgSend(v24, "UTF8String"));
    v45 = (void *)oblivious_http_with_context;
    if (a12 == 1)
      oblivious_http_with_context = nw_proxy_hop_set_enable_chunked_oblivious_http(oblivious_http_with_context, 1);
  }
  if (!v45)
    goto LABEL_40;
  v46 = nw_array_create(oblivious_http_with_context);
  v49 = (void *)v46;
  if (!v46)
  {
    v70 = nplog_obj(0, v47, v48);
    v53 = objc_claimAutoreleasedReturnValue(v70);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfigurati"
                                      "on:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHo"
                                      "pUsesStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_64;
  }
  nw_array_append(v46, v32);
  nw_array_append(v49, v45);
  fallback_privacy_proxy = nw_proxy_config_create_fallback_privacy_proxy(v49);
  v53 = fallback_privacy_proxy;
  if (!fallback_privacy_proxy)
  {
    v71 = nplog_obj(0, v51, v52);
    v72 = objc_claimAutoreleasedReturnValue(v71);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "-[NSPPrivacyProxyObliviousHopsFallbackNetworkRegistration setProxyAgentConfigurati"
                                      "on:proxyKeyArray:proxyVersion:supportsResumption:usesX25519:tokenAgentUUID:proxyHo"
                                      "pUsesStandardToken:shouldFailOpen:obliviousConfig:obliviousPath:obliviousHTTPType:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", (uint8_t *)&buf, 0xCu);
    }

LABEL_64:
    v54 = 0;
    goto LABEL_39;
  }
  v54 = 1;
  nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 1, a9);
  v55 = nw_proxy_config_copy_agent_data(v53);
  v56 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v55;

  sub_100042DFC((id *)a1, v57, v58);
LABEL_39:

LABEL_43:
  v61 = v75;
  v28 = v73;
LABEL_44:

  v19 = v74;
LABEL_45:

LABEL_46:
  return v54;
}

id *sub_1000468EC(id *a1, void *a2, uint64_t a3, void *a4)
{
  id *v4;
  id v7;
  id v8;
  void *v9;
  id *v10;

  v4 = a1;
  if (a1)
  {
    v7 = a4;
    v8 = a2;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ProxiedContent-%@"), a3));
    v10 = sub_100042190(v4, v8, 0, v9, v7);

    v4 = v10;
  }
  return v4;
}

BOOL sub_100046998(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, int a8, char a9, void *a10, void *a11, char a12, char a13, void *a14, void *a15, void *a16, char a17)
{
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  nw_endpoint_t url;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void *v33;
  NSObject *masque;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  id v39;
  uint64_t v40;
  int v41;
  void *v42;
  CFPropertyListRef v43;
  void *v44;
  void *v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  void *i;
  void *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  _BOOL8 v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  void *k;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *default_privacy_proxy;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  void *j;
  id v94;
  uint64_t port;
  void *host_with_numeric_port;
  SEL v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  NSObject *v111;
  char *v112;
  id obj;
  NSObject *v114;
  void *v116;
  id v117;
  id v118;
  id v119;
  id *self;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _BYTE v139[128];
  _BYTE v140[128];
  _BYTE v141[128];
  uint8_t buf[24];

  v124 = a2;
  v123 = a3;
  v126 = a4;
  v119 = a5;
  v125 = a6;
  v118 = a7;
  v23 = a10;
  v117 = a11;
  v122 = a14;
  v121 = a15;
  obj = a16;
  v24 = a16;
  v27 = v24;
  self = a1;
  if (!a1)
  {
    v77 = 0;
    v33 = v123;
    v28 = v124;
    goto LABEL_84;
  }
  v28 = v124;
  if (!v124)
  {
    v103 = nplog_obj(v24, v25, v26);
    v32 = objc_claimAutoreleasedReturnValue(v103);
    v33 = v123;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                           "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:fi"
                           "rstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:egressTo"
                           "kenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:resolvedAddresses"
                           ":fallbackAgentUUID:fallbackProxyConfigHash:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%s called with null firstHopProxyURL", buf, 0xCu);
    }
    v77 = 0;
    goto LABEL_83;
  }
  url = nw_endpoint_create_url((const char *)objc_msgSend(v124, "UTF8String"));
  v32 = url;
  v33 = v123;
  if (!url)
  {
    v104 = nplog_obj(0, v30, v31);
    v37 = objc_claimAutoreleasedReturnValue(v104);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                           "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:fi"
                           "rstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:egressTo"
                           "kenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:resolvedAddresses"
                           ":fallbackAgentUUID:fallbackProxyConfigHash:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "%s called with null firstHopProxyEndpoint", buf, 0xCu);
    }
    v77 = 0;
    goto LABEL_82;
  }
  masque = nw_proxy_hop_create_masque(url);
  v37 = masque;
  if (!masque)
  {
    v105 = nplog_obj(0, v35, v36);
    v64 = objc_claimAutoreleasedReturnValue(v105);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                           "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:fi"
                           "rstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:egressTo"
                           "kenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:resolvedAddresses"
                           ":fallbackAgentUUID:fallbackProxyConfigHash:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "%s called with null firstHopProxy", buf, 0xCu);
    }
    v77 = 0;
    goto LABEL_81;
  }
  v38 = masque;
  v39 = v125;
  if ((objc_msgSend(v39, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
  {
    v40 = 2;
  }
  else if (objc_msgSend(v39, "isEqualToString:", CFSTR("draft-12")))
  {
    v40 = 2;
  }
  else
  {
    v40 = 1;
  }
  v41 = a8;
  v114 = v37;
  v116 = v27;
  nw_proxy_hop_set_masque_version(v38, v40);

  if (v41)
  {
    nw_proxy_hop_set_supports_resumption(v38, 1);
    *(_OWORD *)buf = 0uLL;
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self[2], "agentUUID"));
    objc_msgSend(v42, "getUUIDBytes:", buf);

    nw_proxy_hop_set_resumable_session_agent(v38, buf);
  }
  nw_proxy_hop_set_supports_l4s(v38, 1);
  nw_proxy_hop_set_use_x25519(v38, 1);
  v43 = CFPreferencesCopyAppValue(CFSTR("NSPEnableMultipath"), kCFPreferencesCurrentApplication);
  v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
  v45 = v23;
  if (!v44 || (v46 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v44, v46) & 1) == 0))
  {

    if (v123)
      goto LABEL_19;
    goto LABEL_41;
  }
  v47 = objc_msgSend(v44, "BOOLValue");
  v48 = (int)v47;
  v51 = nplog_obj(v47, v49, v50);
  v52 = objc_claimAutoreleasedReturnValue(v51);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v48;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Detected enable multipath in preferences file: %{public}d", buf, 8u);
  }

  if (v48)
    nw_proxy_hop_set_enable_multipath(v38, 1);
  if (!v123)
LABEL_41:
    nw_proxy_hop_add_extra_header(v38, "user-agent", "");
LABEL_19:
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v53 = v126;
  v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v135, v141, 16);
  if (v54)
  {
    v55 = v54;
    v56 = *(_QWORD *)v136;
    do
    {
      for (i = 0; i != v55; i = (char *)i + 1)
      {
        if (*(_QWORD *)v136 != v56)
          objc_enumerationMutation(v53);
        v58 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v58, "length"))
          nw_proxy_hop_add_server_raw_public_key(v38, objc_msgSend(v58, "bytes"), objc_msgSend(v58, "length"));
      }
      v55 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v135, v141, 16);
    }
    while (v55);
  }

  v23 = v45;
  if (v45)
  {
    *(_OWORD *)buf = 0uLL;
    objc_msgSend(v45, "getUUIDBytes:", buf);
    if (a12)
      v60 = "PrivateToken token=";
    else
      v60 = "PrivacyToken token=";
    v59 = nw_proxy_hop_add_token_header(v38, "proxy-authorization", v60, "", buf);
  }
  v61 = nw_array_create(v59);
  if (v61)
  {
    v64 = v61;
    nw_array_append(v61, v38);
    if (!v123)
    {
LABEL_66:
      default_privacy_proxy = (void *)nw_proxy_config_create_default_privacy_proxy(v64);
      v77 = default_privacy_proxy != 0;
      if (default_privacy_proxy)
      {
        if (v121)
        {
          *(_OWORD *)buf = 0uLL;
          objc_msgSend(v121, "getUUIDBytes:", buf);
          nw_proxy_config_set_fallback_proxy_agent(default_privacy_proxy, buf);
        }
        if (a17)
        {
          nw_proxy_config_set_is_privacy_proxy(default_privacy_proxy, 1, 0);
        }
        else
        {
          nw_proxy_config_set_is_privacy_proxy(default_privacy_proxy, 0, 1);
          nw_proxy_config_set_use_fast_fallback(default_privacy_proxy, 1);
        }
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        v89 = v122;
        v90 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", &v127, v139, 16);
        if (v90)
        {
          v91 = v90;
          v92 = *(_QWORD *)v128;
          do
          {
            for (j = 0; j != v91; j = (char *)j + 1)
            {
              if (*(_QWORD *)v128 != v92)
                objc_enumerationMutation(v89);
              v94 = objc_msgSend(*(id *)(*((_QWORD *)&v127 + 1) + 8 * (_QWORD)j), "UTF8String", v112);
              port = nw_endpoint_get_port(v32);
              host_with_numeric_port = (void *)nw_endpoint_create_host_with_numeric_port(v94, port);
              nw_proxy_config_add_resolved_endpoint(default_privacy_proxy, host_with_numeric_port);

            }
            v91 = objc_msgSend(v89, "countByEnumeratingWithState:objects:count:", &v127, v139, 16);
          }
          while (v91);
        }

        objc_setProperty_atomic(self, v97, default_privacy_proxy, 48);
        v98 = nw_proxy_config_copy_agent_data(default_privacy_proxy);
        v99 = self[4];
        self[4] = (id)v98;

        objc_storeStrong(self + 5, obj);
        sub_100042DFC(self, v100, v101);
        v23 = v45;
      }
      else
      {
        v108 = nplog_obj(0, v86, v87);
        v109 = objc_claimAutoreleasedReturnValue(v108);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentNetworkRegistration setProxyAgentConfiguration:secondProxy"
                               "HopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVe"
                               "rsion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentU"
                               "UID:egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:r"
                               "esolvedAddresses:fallbackAgentUUID:fallbackProxyConfigHash:isPrivacyProxy:]";
          _os_log_fault_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", buf, 0xCu);
        }

      }
      v28 = v124;
      v37 = v114;
      v27 = v116;

      v33 = v123;
      goto LABEL_81;
    }
    v65 = (const char *)objc_msgSend(v123, "UTF8String");
    if (v65 && (v65 = (const char *)nw_endpoint_create_url(v65)) != 0)
    {
      v68 = (char *)v65;
      v69 = (void *)nw_proxy_hop_create_masque(v65);
      if (v69)
      {
        v112 = v68;
        v72 = v69;
        v73 = v118;
        if ((objc_msgSend(v73, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
        {
          v74 = 2;
        }
        else if (objc_msgSend(v73, "isEqualToString:", CFSTR("draft-12"), v68, a16))
        {
          v74 = 2;
        }
        else
        {
          v74 = 1;
        }
        nw_proxy_hop_set_masque_version(v72, v74);

        if (a9)
        {
          nw_proxy_hop_set_supports_resumption(v72, 1);
          *(_OWORD *)buf = 0uLL;
          v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(self[2], "agentUUID"));
          objc_msgSend(v78, "getUUIDBytes:", buf);

          nw_proxy_hop_set_resumable_session_agent(v72, buf);
        }
        nw_proxy_hop_set_supports_l4s(v72, 1);
        nw_proxy_hop_set_use_x25519(v72, 1);
        nw_proxy_hop_add_extra_header(v72, "user-agent", "");
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        v79 = v119;
        v80 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v131, v140, 16);
        if (v80)
        {
          v81 = v80;
          v82 = *(_QWORD *)v132;
          do
          {
            for (k = 0; k != v81; k = (char *)k + 1)
            {
              if (*(_QWORD *)v132 != v82)
                objc_enumerationMutation(v79);
              v84 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * (_QWORD)k);
              if (objc_msgSend(v84, "length", v112))
                nw_proxy_hop_add_server_raw_public_key(v72, objc_msgSend(v84, "bytes"), objc_msgSend(v84, "length"));
            }
            v81 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v131, v140, 16);
          }
          while (v81);
        }

        if (v117)
        {
          *(_OWORD *)buf = 0uLL;
          objc_msgSend(v117, "getUUIDBytes:", buf);
          if (a13)
            v85 = "PrivateToken token=";
          else
            v85 = "PrivacyToken token=";
          nw_proxy_hop_add_token_header(v72, "proxy-authorization", v85, "", buf);
        }
        nw_array_append(v64, v72);

        v23 = v45;
        goto LABEL_66;
      }
      v110 = nplog_obj(0, v70, v71);
      v111 = objc_claimAutoreleasedReturnValue(v110);
      if (os_log_type_enabled(v111, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentNetworkRegistration setProxyAgentConfiguration:secondProxyHo"
                             "pURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersio"
                             "n:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:eg"
                             "ressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:resolvedA"
                             "ddresses:fallbackAgentUUID:fallbackProxyConfigHash:isPrivacyProxy:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_FAULT, "%s called with null secondHopProxy", buf, 0xCu);
      }

    }
    else
    {
      v75 = nplog_obj(v65, v66, v67);
      v76 = objc_claimAutoreleasedReturnValue(v75);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentNetworkRegistration setProxyAgentConfiguration:secondProxyHo"
                             "pURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersio"
                             "n:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:eg"
                             "ressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:resolvedA"
                             "ddresses:fallbackAgentUUID:fallbackProxyConfigHash:isPrivacyProxy:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_FAULT, "%s called with null secondHopProxyEndpoint", buf, 0xCu);
      }

    }
  }
  else
  {
    v106 = nplog_obj(0, v62, v63);
    v107 = objc_claimAutoreleasedReturnValue(v106);
    if (os_log_type_enabled(v107, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentNetworkRegistration setProxyAgentConfiguration:secondProxyHopU"
                           "RL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVersion:fi"
                           "rstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:egressTo"
                           "kenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:resolvedAddresses"
                           ":fallbackAgentUUID:fallbackProxyConfigHash:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", buf, 0xCu);
    }

    v64 = 0;
  }
  v77 = 0;
  v28 = v124;
  v37 = v114;
  v27 = v116;
LABEL_81:

LABEL_82:
LABEL_83:

LABEL_84:
  return v77;
}

id *sub_100047448(id *a1, void *a2, uint64_t a3, void *a4)
{
  id *v4;
  id v7;
  id v8;
  void *v9;
  id *v10;

  v4 = a1;
  if (a1)
  {
    v7 = a4;
    v8 = a2;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ProxiedContentFallback-%@"), a3));
    v10 = sub_100042190(v4, v8, 0, v9, v7);

    v4 = v10;
  }
  return v4;
}

BOOL sub_1000474F4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, int a8, char a9, void *a10, void *a11, char a12, char a13, char a14)
{
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  nw_endpoint_t url;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *masque;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *i;
  void *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  _BOOL8 v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  void *j;
  void *v70;
  const char *v71;
  uint64_t fallback_privacy_proxy;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  NSObject *v89;
  id v90;
  NSObject *v91;
  NSObject *v92;
  id v93;
  id v94;
  void *v95;
  void *v96;
  void *v97;
  id v98;
  id v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _BYTE v108[128];
  uint8_t buf[24];
  _BYTE v110[128];

  v21 = a2;
  v22 = a3;
  v23 = a4;
  v99 = a5;
  v24 = a6;
  v98 = a7;
  v25 = a10;
  v26 = a11;
  v97 = v26;
  if (!a1)
  {
    v64 = 0;
    goto LABEL_69;
  }
  if (!v21)
  {
    v81 = nplog_obj(v26, v27, v28);
    v32 = objc_claimAutoreleasedReturnValue(v81);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentFallbackNetworkRegistration setProxyAgentConfiguration:secondP"
                           "roxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVe"
                           "rsion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:"
                           "egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "%s called with null firstHopProxyURL", buf, 0xCu);
    }
    v64 = 0;
    goto LABEL_68;
  }
  url = nw_endpoint_create_url((const char *)objc_msgSend(v21, "UTF8String"));
  v32 = url;
  if (!url)
  {
    v82 = nplog_obj(0, v30, v31);
    v36 = objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentFallbackNetworkRegistration setProxyAgentConfiguration:secondP"
                           "roxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVe"
                           "rsion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:"
                           "egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "%s called with null firstHopProxyEndpoint", buf, 0xCu);
    }
    v64 = 0;
    goto LABEL_67;
  }
  masque = nw_proxy_hop_create_masque(url);
  v36 = masque;
  v93 = v24;
  if (!masque)
  {
    v83 = nplog_obj(0, v34, v35);
    v51 = objc_claimAutoreleasedReturnValue(v83);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentFallbackNetworkRegistration setProxyAgentConfiguration:secondP"
                           "roxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVe"
                           "rsion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:"
                           "egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "%s called with null firstHopProxy", buf, 0xCu);
    }
    v64 = 0;
    goto LABEL_66;
  }
  v91 = masque;
  v92 = v32;
  v95 = v25;
  v37 = masque;
  v38 = v24;
  if ((objc_msgSend(v38, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
  {
    v39 = 2;
  }
  else if (objc_msgSend(v38, "isEqualToString:", CFSTR("draft-12")))
  {
    v39 = 2;
  }
  else
  {
    v39 = 1;
  }
  nw_proxy_hop_set_masque_version(v37, v39);

  if (a8)
    nw_proxy_hop_set_supports_resumption(v37, 1);
  nw_proxy_hop_set_supports_l4s(v37, 1);
  v96 = v22;
  if (!v22)
    nw_proxy_hop_add_extra_header(v37, "user-agent", "");
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v94 = v23;
  v40 = v23;
  v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v104, v110, 16);
  if (v41)
  {
    v42 = v41;
    v43 = *(_QWORD *)v105;
    do
    {
      for (i = 0; i != v42; i = (char *)i + 1)
      {
        if (*(_QWORD *)v105 != v43)
          objc_enumerationMutation(v40);
        v45 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v45, "length"))
          nw_proxy_hop_add_server_raw_public_key(v37, objc_msgSend(v45, "bytes"), objc_msgSend(v45, "length"));
      }
      v42 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v104, v110, 16);
    }
    while (v42);
  }

  v25 = v95;
  if (v95)
  {
    *(_OWORD *)buf = 0uLL;
    objc_msgSend(v95, "getUUIDBytes:", buf);
    if (a12)
      v47 = "PrivateToken token=";
    else
      v47 = "PrivacyToken token=";
    v46 = nw_proxy_hop_add_token_header(v37, "proxy-authorization", v47, "", buf);
  }
  v48 = nw_array_create(v46);
  v22 = v96;
  if (!v48)
  {
    v84 = nplog_obj(0, v49, v50);
    v85 = objc_claimAutoreleasedReturnValue(v84);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentFallbackNetworkRegistration setProxyAgentConfiguration:secondP"
                           "roxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVe"
                           "rsion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:"
                           "egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_FAULT, "%s called with null proxyHopArray", buf, 0xCu);
    }

    v51 = 0;
    v64 = 0;
    v23 = v94;
    goto LABEL_65;
  }
  v51 = v48;
  nw_array_append(v48, v37);
  v23 = v94;
  if (!v96)
    goto LABEL_59;
  v52 = (const char *)objc_msgSend(v96, "UTF8String");
  if (v52 && (v52 = (const char *)nw_endpoint_create_url(v52)) != 0)
  {
    v55 = (char *)v52;
    v56 = (void *)nw_proxy_hop_create_masque(v52);
    if (v56)
    {
      v59 = v56;
      v60 = v98;
      if ((objc_msgSend(v60, "isEqualToString:", CFSTR("RFC9298")) & 1) != 0)
      {
        v61 = 2;
      }
      else if (objc_msgSend(v60, "isEqualToString:", CFSTR("draft-12")))
      {
        v61 = 2;
      }
      else
      {
        v61 = 1;
      }
      v90 = v21;
      nw_proxy_hop_set_masque_version(v59, v61);

      if (a9)
        nw_proxy_hop_set_supports_resumption(v59, 1);
      nw_proxy_hop_set_supports_l4s(v59, 1);
      nw_proxy_hop_add_extra_header(v59, "user-agent", "");
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v65 = v99;
      v66 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v100, v108, 16);
      if (v66)
      {
        v67 = v66;
        v68 = *(_QWORD *)v101;
        do
        {
          for (j = 0; j != v67; j = (char *)j + 1)
          {
            if (*(_QWORD *)v101 != v68)
              objc_enumerationMutation(v65);
            v70 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * (_QWORD)j);
            if (objc_msgSend(v70, "length", v90))
              nw_proxy_hop_add_server_raw_public_key(v59, objc_msgSend(v70, "bytes"), objc_msgSend(v70, "length"));
          }
          v67 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v100, v108, 16);
        }
        while (v67);
      }

      if (v97)
      {
        *(_OWORD *)buf = 0uLL;
        objc_msgSend(v97, "getUUIDBytes:", buf);
        if (a13)
          v71 = "PrivateToken token=";
        else
          v71 = "PrivacyToken token=";
        nw_proxy_hop_add_token_header(v59, "proxy-authorization", v71, "", buf);
      }
      nw_array_append(v51, v59);

      v21 = v90;
      v25 = v95;
      v22 = v96;
      v23 = v94;
LABEL_59:
      fallback_privacy_proxy = nw_proxy_config_create_fallback_privacy_proxy(v51);
      v75 = (void *)fallback_privacy_proxy;
      v64 = fallback_privacy_proxy != 0;
      if (fallback_privacy_proxy)
      {
        if (a14)
        {
          nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 1, 0);
        }
        else
        {
          nw_proxy_config_set_is_privacy_proxy(fallback_privacy_proxy, 0, 1);
          nw_proxy_config_set_use_fast_fallback(v75, 1);
        }
        v76 = nw_proxy_config_copy_agent_data(v75);
        v77 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v76;

        sub_100042DFC((id *)a1, v78, v79);
      }
      else
      {
        v86 = nplog_obj(0, v73, v74);
        v87 = objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentFallbackNetworkRegistration setProxyAgentConfiguration:sec"
                               "ondProxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondPr"
                               "oxyHopVersion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTok"
                               "enAgentUUID:egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandar"
                               "dToken:isPrivacyProxy:]";
          _os_log_fault_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_FAULT, "%s called with null proxyConfiguration", buf, 0xCu);
        }

      }
      goto LABEL_65;
    }
    v88 = nplog_obj(0, v57, v58);
    v89 = objc_claimAutoreleasedReturnValue(v88);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentFallbackNetworkRegistration setProxyAgentConfiguration:secondP"
                           "roxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVe"
                           "rsion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:"
                           "egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "%s called with null secondHopProxy", buf, 0xCu);
    }

  }
  else
  {
    v62 = nplog_obj(v52, v53, v54);
    v63 = objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "-[NSPPrivacyProxyProxiedContentFallbackNetworkRegistration setProxyAgentConfiguration:secondP"
                           "roxyHopURL:firstProxyHopKeyArray:secondProxyHopKeyArray:firstProxyHopVersion:secondProxyHopVe"
                           "rsion:firstProxyHopSupportsResumption:secondProxyHopSupportsResumption:ingressTokenAgentUUID:"
                           "egressTokenAgentUUID:firstProxyHopUsesStandardToken:secondProxyHopUsesStandardToken:isPrivacyProxy:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "%s called with null secondHopProxyEndpoint", buf, 0xCu);
    }

  }
  v64 = 0;
LABEL_65:
  v36 = v91;
  v32 = v92;
LABEL_66:

  v24 = v93;
LABEL_67:

LABEL_68:
LABEL_69:

  return v64;
}

void sub_100048328(uint64_t a1, void *a2)
{
  NSPEventsDenormalizer *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[NSPEventsDenormalizer initWithMLModel:]([NSPEventsDenormalizer alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

id *sub_1000486F4(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  objc_super v17;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)NSPPvDConfigurationFetcher;
    a1 = (id *)objc_msgSendSuper2(&v17, "init");
    if (a1)
    {
      v7 = objc_alloc_init((Class)NSOperationQueue);
      v8 = a1[2];
      a1[2] = v7;

      v10 = NPGetInternalQueue(v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      objc_msgSend(a1[2], "setUnderlyingQueue:", v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration ephemeralSessionConfiguration](NSURLSessionConfiguration, "ephemeralSessionConfiguration"));
      objc_msgSend(v12, "setWaitsForConnectivity:", 1);
      v13 = a1[2];
      v14 = objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v12, a1, v13));
      v15 = a1[1];
      a1[1] = (id)v14;

      objc_storeWeak(a1 + 3, v5);
      objc_storeWeak(a1 + 4, v6);

    }
  }

  return a1;
}

void sub_100049454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100049470(uint64_t a1)
{

}

void sub_100049478(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t isKindOfClass;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  id v41;
  uint8_t buf[4];
  NSObject *v43;
  __int16 v44;
  uint64_t v45;

  v7 = a2;
  v8 = a4;
  v11 = v8;
  if (v8)
  {
    v12 = nplog_obj(v8, v9, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedDescription"));
      v15 = a1[4];
      *(_DWORD *)buf = 138543618;
      v43 = v14;
      v44 = 2112;
      v45 = v15;
      v16 = "Fetching proxy configuration resulted in error: %{public}@ with url: %@";
      v17 = v13;
      v18 = 22;
      goto LABEL_4;
    }
  }
  else
  {
    v19 = objc_msgSend(a3, "statusCode");
    v22 = v19;
    if (v7 && v19 == 200)
    {
      v41 = 0;
      v23 = objc_claimAutoreleasedReturnValue(+[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:", v7, 0, &v41));
      v13 = v41;
      v24 = *(_QWORD *)(a1[6] + 8);
      v25 = *(void **)(v24 + 40);
      *(_QWORD *)(v24 + 40) = v23;

      v29 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
      if (!v29)
      {
        v30 = nplog_obj(v26, v27, v28);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v40 = a1[4];
          *(_DWORD *)buf = 138412546;
          v43 = v13;
          v44 = 2112;
          v45 = v40;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Fetching proxy configuration resulted in malformed JSON object: %@ with url: %@", buf, 0x16u);
        }

        v29 = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
      }
      v32 = objc_opt_class(NSDictionary);
      isKindOfClass = objc_opt_isKindOfClass(v29, v32);
      if ((isKindOfClass & 1) == 0)
      {
        v36 = nplog_obj(isKindOfClass, v34, v35);
        v14 = objc_claimAutoreleasedReturnValue(v36);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_13;
        v39 = a1[4];
        *(_DWORD *)buf = 138412290;
        v43 = v39;
        v16 = "Fetching proxy configuration resulted in JSON object that is not a dictionary with url: %@";
        v17 = v14;
        v18 = 12;
LABEL_4:
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
LABEL_13:

      }
    }
    else
    {
      v37 = nplog_obj(v19, v20, v21);
      v13 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v38 = a1[4];
        *(_DWORD *)buf = 134218242;
        v43 = v22;
        v44 = 2112;
        v45 = v38;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Fetching proxy configuration resulted in unexpected response: %ld with url: %@", buf, 0x16u);
      }
    }
  }

  (*(void (**)(void))(a1[5] + 16))();
}

void sub_100049734(void *a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  char isKindOfClass;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  BOOL v24;
  id v25;
  id v26;
  uint64_t v27;
  void *j;
  void *v29;
  id v30;
  void *v31;
  BOOL v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id obj;
  id val;
  _QWORD v41[5];
  id v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t);
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  id location;
  _BYTE v58[128];
  _BYTE v59[128];

  v37 = a2;
  v36 = a3;
  val = a1;
  if (a1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKey:", CFSTR("identifier")));
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKey:", CFSTR("proxies")));
      if (!v6)
      {

        goto LABEL_40;
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKey:", CFSTR("expires")));

      if (v7)
      {
        if (objc_msgSend(val, "configurationValidated:withURL:", v37, v36))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "objectForKey:", CFSTR("proxies")));
          v38 = objc_alloc_init((Class)NSMutableArray);
          objc_initWeak(&location, val);
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          obj = v8;
          v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
          if (!v9)
            goto LABEL_27;
          v10 = *(_QWORD *)v54;
          while (1)
          {
            for (i = 0; i != v9; i = (char *)i + 1)
            {
              if (*(_QWORD *)v54 != v10)
                objc_enumerationMutation(obj);
              v12 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i);
              v13 = objc_opt_class(NSDictionary);
              if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
              {
                v14 = v12;
                v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("proxy")));
                if (v15
                  && (v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("proxy"))),
                      v17 = objc_opt_class(NSString),
                      isKindOfClass = objc_opt_isKindOfClass(v16, v17),
                      v16,
                      v15,
                      (isKindOfClass & 1) != 0))
                {
                  v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("proxy")));
                }
                else
                {
                  v19 = 0;
                }

              }
              else
              {
                v20 = objc_opt_class(NSString);
                if ((objc_opt_isKindOfClass(v12, v20) & 1) == 0)
                  continue;
                v19 = v12;
              }
              if (v19)
              {
                v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v19));
                v22 = v21;
                if (v21)
                {
                  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "host"));
                  v24 = v23 == 0;

                  if (!v24 && (objc_msgSend(v38, "containsObject:", v22) & 1) == 0)
                    objc_msgSend(v38, "addObject:", v22);
                }

              }
            }
            v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
            if (!v9)
            {
LABEL_27:

              v51 = 0u;
              v52 = 0u;
              v49 = 0u;
              v50 = 0u;
              v25 = v38;
              v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
              if (v26)
              {
                v27 = *(_QWORD *)v50;
                do
                {
                  for (j = 0; j != v26; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v50 != v27)
                      objc_enumerationMutation(v25);
                    v29 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)j);
                    if (v29)
                    {
                      v30 = objc_alloc_init((Class)NSURLComponents);
                      objc_msgSend(v30, "setPath:", CFSTR("/.well-known/pvd"));
                      objc_msgSend(v30, "setScheme:", CFSTR("https"));
                      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "port"));
                      v32 = v31 == 0;

                      if (!v32)
                      {
                        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "port"));
                        objc_msgSend(v30, "setPort:", v33);

                      }
                      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "host"));
                      objc_msgSend(v30, "setHost:", v34);

                      v43 = 0;
                      v44 = &v43;
                      v45 = 0x3032000000;
                      v46 = sub_10000310C;
                      v47 = sub_100049470;
                      v48 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "URL"));
                      v35 = v44[5];
                      v41[0] = _NSConcreteStackBlock;
                      v41[1] = 3221225472;
                      v41[2] = sub_100049C68;
                      v41[3] = &unk_1000F5E28;
                      objc_copyWeak(&v42, &location);
                      v41[4] = &v43;
                      objc_msgSend(val, "fetchIndividualProxyConfig:completionHander:", v35, v41);
                      objc_destroyWeak(&v42);
                      _Block_object_dispose(&v43, 8);

                    }
                  }
                  v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
                }
                while (v26);
              }

              objc_destroyWeak(&location);
              break;
            }
          }
        }
      }
    }
  }
LABEL_40:

}

void sub_100049C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100049C68(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  if (a2)
  {
    v3 = (id *)(a1 + 40);
    v4 = a2;
    WeakRetained = objc_loadWeakRetained(v3);
    objc_msgSend(WeakRetained, "didReceiveProxyConfig:from:", v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));

  }
}

uint64_t sub_100049ED4()
{
  if (qword_100112E40 != -1)
    dispatch_once(&qword_100112E40, &stru_1000F5E48);
  return byte_100112E38;
}

void sub_100049F14(id a1)
{
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0))
    byte_100112E38 = v2 != 0;
}

void sub_10004A2E4(id a1)
{
  NSPDeviceIdentityCertificate *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  CFPropertyListRef v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  BOOL v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  uint64_t v28;
  id v29;
  objc_super v30;
  uint8_t buf[4];
  NSObject *v32;
  __int16 v33;
  uint64_t v34;

  v1 = [NSPDeviceIdentityCertificate alloc];
  if (!v1)
  {
    v5 = 0;
    goto LABEL_24;
  }
  v30.receiver = v1;
  v30.super_class = (Class)NSPDeviceIdentityCertificate;
  v2 = objc_msgSendSuper2(&v30, "init");
  if (!v2)
  {
    v28 = nplog_obj(0, v3, v4);
    v14 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[super init] failed", buf, 2u);
    }
    v5 = 0;
    goto LABEL_23;
  }
  v5 = v2;
  v6 = CFPreferencesCopyAppValue(CFSTR("DeviceIdentityInfo"), kCFPreferencesCurrentApplication);
  if (!v6)
  {
    v18 = nplog_obj(0, v7, v8);
    v14 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "no saved device identity info", buf, 2u);
    }
    goto LABEL_23;
  }
  v9 = v6;
  v29 = 0;
  v10 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v6, &v29);
  v11 = v29;
  v14 = v11;
  if (v10)
    v15 = v11 == 0;
  else
    v15 = 0;
  if (!v15)
  {
    v16 = nplog_obj(v11, v12, v13);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v32 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to create a decoder for the device identity info: %@", buf, 0xCu);
    }

    CFRelease(v9);
LABEL_22:

    goto LABEL_23;
  }
  CFRelease(v9);
  v19 = objc_msgSend(v5, "initWithCoder:", v10);
  if (!v19)
  {
    v22 = nplog_obj(0, v20, v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to decode device identity info", buf, 2u);
    }

    v5 = 0;
    goto LABEL_22;
  }
  v5 = v19;
  if (v19[2] != 1)
  {
    v24 = nplog_obj(v19, v20, v21);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      v26 = v5[2];
      *(_DWORD *)buf = 134218240;
      v32 = v26;
      v33 = 2048;
      v34 = 1;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Saved disk version of device identity info (%ld) does not match latest supported version (%ld)", buf, 0x16u);
    }

    v5 = objc_msgSend(v5, "init");
    goto LABEL_22;
  }
  v14 = v10;
LABEL_23:

LABEL_24:
  v27 = (void *)qword_100112E48;
  qword_100112E48 = (uint64_t)v5;

}

void sub_10004AA50(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10004AA9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id WeakRetained;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void (*v16)(void);
  uint64_t v17;
  NSObject *v18;
  int v19;
  id v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = NPGetInternalQueue(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  dispatch_assert_queue_V2(v11);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v15 = WeakRetained;
  if (WeakRetained)
  {
    if (v7 && v8 && !v9)
    {
      v16 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    }
    else
    {
      v17 = nplog_obj(WeakRetained, v13, v14);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = 138412290;
        v20 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "failed to sign data from host with error %@", (uint8_t *)&v19, 0xCu);
      }

      v16 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    }
    v16();
  }

}

void sub_10004ABD8(uint64_t a1, __SecKey *a2, void *a3, void *a4)
{
  id v7;
  __CFError *v8;
  uint64_t v9;
  NSObject *v10;
  id WeakRetained;
  NSPDeviceIdentityStats *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  id *v19;
  id v20;
  void *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint32_t v25;
  NSDateComponents *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  __CFError *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  CFDataRef v48;
  uint64_t v49;
  uint64_t v50;
  CFDataRef v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSDateComponents *v61;
  void *v62;
  CFErrorRef error;
  uint8_t buf[4];
  CFErrorRef v65;

  v7 = a3;
  v8 = a4;
  v9 = NPGetInternalQueue(v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  dispatch_assert_queue_V2(v10);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v12 = objc_alloc_init(NSPDeviceIdentityStats);
    v15 = nplog_obj(v12, v13, v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = v16;
    if (!v8)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "device identity request successful", buf, 2u);
      }

      error = 0;
      v48 = SecKeyCreateSignature(a2, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, *(CFDataRef *)(a1 + 32), &error);
      v51 = v48;
      if (!v48 || error)
      {
        v52 = nplog_obj(v48, v49, v50);
        v53 = objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v65 = error;
          _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "failed to sign data with error %@", buf, 0xCu);
        }

        (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      }
      else
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        -[NSPDeviceIdentityStats setSuccess:](v12, "setSuccess:", 1);
      }

      goto LABEL_34;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v65 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "device identity request failed with error: %@", buf, 0xCu);
    }

    v18 = MobileActivationErrorDomain;
    if ((mobileactivationErrorHasDomainAndErrorCode(v8, MobileActivationErrorDomain, -8) & 1) != 0
      || (mobileactivationErrorHasDomainAndErrorCode(v8, v18, -6) & 1) != 0
      || (mobileactivationErrorHasDomainAndErrorCode(v8, v18, -24) & 1) != 0
      || (v19 = *(id **)(a1 + 40)) == 0
      || (v20 = v19[3]) != 0
      && (v21 = v20, objc_msgSend(v19[3], "timeIntervalSinceNow"), v23 = v22, v21, v23 >= 0.0))
    {
LABEL_33:
      -[NSPDeviceIdentityStats setSuccess:](v12, "setSuccess:", 0);
      v60 = (void *)objc_claimAutoreleasedReturnValue(-[__CFError domain](v8, "domain"));
      -[NSPDeviceIdentityStats setErrorDomain:](v12, "setErrorDomain:", v60);

      -[NSPDeviceIdentityStats setErrorCode:](v12, "setErrorCode:", -[__CFError code](v8, "code"));
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_34:
      -[NSPProxyAnalytics sendAnalytics](v12, "sendAnalytics");

      goto LABEL_35;
    }
    v24 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v25 = arc4random_uniform(5u);
    v26 = objc_opt_new(NSDateComponents);
    -[NSDateComponents setDay:](v26, "setDay:", v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
    v61 = v26;
    v62 = (void *)v24;
    v28 = objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "dateByAddingComponents:toDate:options:", v26, v24, 0));
    v29 = v19[3];
    v19[3] = (id)v28;

    v33 = nplog_obj(v30, v31, v32);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = v19[3];
      v36 = (__CFError *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v35, 1, 2));
      *(_DWORD *)buf = 138412290;
      v65 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Device identity would be fetched on %@", buf, 0xCu);

    }
    v39 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    if (v39)
    {
      objc_msgSend(v19, "encodeWithCoder:", v39);
      _CFPreferencesSetFileProtectionClass(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost, 0, 3);
      v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject encodedData](v39, "encodedData"));
      CFPreferencesSetAppValue(CFSTR("DeviceIdentityInfo"), v40, kCFPreferencesCurrentApplication);

      v41 = CFPreferencesAppSynchronize(kCFPreferencesCurrentApplication);
      v42 = v41;
      v45 = nplog_obj(v41, v43, v44);
      v46 = objc_claimAutoreleasedReturnValue(v45);
      v47 = v46;
      if (v42)
      {
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Saved device identity info to preference file", buf, 2u);
        }

LABEL_32:
        goto LABEL_33;
      }
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
LABEL_30:

        v59 = nplog_obj(v56, v57, v58);
        v39 = objc_claimAutoreleasedReturnValue(v59);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Failed to write device identity info to file", buf, 2u);
        }
        goto LABEL_32;
      }
      *(_WORD *)buf = 0;
      v55 = "Failed to write device identity info to preference file";
    }
    else
    {
      v54 = nplog_obj(0, v37, v38);
      v47 = objc_claimAutoreleasedReturnValue(v54);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        goto LABEL_30;
      *(_WORD *)buf = 0;
      v55 = "NSKeyedArchiver initialize failed";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, v55, buf, 2u);
    goto LABEL_30;
  }
LABEL_35:
  if (a2)
    CFRelease(a2);

}

id *sub_10004B18C(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  void *v11;
  uint64_t v12;
  uint64_t isKindOfClass;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSSet *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  objc_super v38;
  id v39;
  uint8_t buf[4];
  id v41;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v38.receiver = a1;
    v38.super_class = (Class)NSPServerODoH;
    v10 = (id *)objc_msgSendSuper2(&v38, "init");
    a1 = v10;
    if (v10)
    {
      objc_storeWeak(v10 + 3, v7);
      objc_storeStrong(a1 + 8, a3);
      objc_storeStrong(a1 + 19, a4);
      objc_opt_self(NSPServerODoH);
      v11 = (void *)CFPreferencesCopyAppValue(CFSTR("NSPPreferredResolver"), kCFPreferencesCurrentApplication);
      if (v11
        && (v12 = objc_opt_class(NSString),
            isKindOfClass = objc_opt_isKindOfClass(v11, v12),
            (isKindOfClass & 1) != 0))
      {
        v16 = nplog_obj(isKindOfClass, v14, v15);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v41 = v11;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Detected preferred resolver: %{public}@", buf, 0xCu);
        }

        v18 = v11;
      }
      else
      {
        v18 = 0;
      }

      v19 = a1[2];
      a1[2] = v18;

      objc_opt_self(NSPServerODoH);
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      v21 = objc_msgSend(v20, "copyAuxiliaryDataForKey:", CFSTR("NSPServerODoHAuxilaryData"));

      if (v21 && (v22 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v21, v22) & 1) == 0))
      {
        v24 = objc_opt_class(NSDictionary);
        v25 = objc_opt_class(NSString);
        v26 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v24, v25, objc_opt_class(NSDate), 0);
        v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        v39 = 0;
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v27, v21, &v39));
        v29 = v39;

        if (!v28 || v29)
        {
          v33 = nplog_obj(v30, v31, v32);
          v34 = objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v41 = v29;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "failed to unarchivedObjectOfClasses with error %@", buf, 0xCu);
          }

          v23 = 0;
        }
        else
        {
          v23 = v28;
        }

        if (v23)
        {
          v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("NSPServerODoHAuxilaryDataResolverSwitchedDateKey")));
          v36 = a1[17];
          a1[17] = (id)v35;

        }
      }
      else
      {

        v23 = 0;
      }

    }
  }

  return a1;
}

id sub_10004B4A8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  id v11;
  int v12;
  uint64_t v13;
  void *j;
  uint32_t v15;
  uint32_t v16;
  uint32_t v17;
  id v18;
  id v19;
  uint32_t v20;
  uint64_t v21;
  void *k;
  void *v23;
  id v24;
  id v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  _BYTE v41[128];

  if (*(_QWORD *)(a1 + 16))
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v2 = *(id *)(a1 + 112);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v36;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v36 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dohURL"));
          v9 = objc_msgSend(v8, "isEqualToString:", *(_QWORD *)(a1 + 16));

          if ((v9 & 1) != 0)
          {
            v24 = v7;
            goto LABEL_32;
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
        if (v4)
          continue;
        break;
      }
    }

  }
  v2 = *(id *)(a1 + 120);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v10 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    v13 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v11; j = (char *)j + 1)
      {
        if (*(_QWORD *)v32 != v13)
          objc_enumerationMutation(v2);
        v12 += objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j), "weight");
      }
      v11 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
    }
    while (v11);
    if (v12)
    {
      v15 = v12 + 1;
      do
        v16 = arc4random_uniform(v15);
      while (!v16);
      v17 = v16;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v2 = v2;
      v18 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
      if (v18)
      {
        v19 = v18;
        v20 = 0;
        v21 = *(_QWORD *)v28;
        while (2)
        {
          for (k = 0; k != v19; k = (char *)k + 1)
          {
            if (*(_QWORD *)v28 != v21)
              objc_enumerationMutation(v2);
            v23 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)k);
            v20 += objc_msgSend(v23, "weight", (_QWORD)v27);
            if (v17 <= v20)
            {
              v25 = v23;

              goto LABEL_33;
            }
          }
          v19 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
          if (v19)
            continue;
          break;
        }
      }

    }
  }
  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject", (_QWORD)v27));
LABEL_32:
  v25 = v24;
LABEL_33:

  return v25;
}

void sub_10004B740(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  if (a1)
  {
    v2 = *(id *)(a1 + 112);
    v3 = objc_msgSend(v2, "mutableCopy");
    v4 = *(void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v3;

    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = *(id *)(a1 + 120);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v10, "hasObliviousDoHConfig", (_QWORD)v11) & 1) == 0)
            objc_msgSend(*(id *)(a1 + 120), "removeObject:", v10);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v7);
    }

  }
}

void sub_10004B86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  void *v7;
  uint8_t v8[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Candidate resolver restore timer fired", v8, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
    sub_10004B740((uint64_t)WeakRetained);

}

void sub_10004B8F0(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 112), a2);
    sub_10004B740(a1);
    objc_msgSend(*(id *)(a1 + 32), "setResolver:", 0);
  }

}

void sub_10004B948(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  _QWORD *v11;

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@ cleaning up DNS network agent", (uint8_t *)&v10, 0xCu);
    }

    sub_10004BA2C((uint64_t)a1);
    v6 = (void *)a1[4];
    a1[4] = 0;

    v7 = (void *)a1[5];
    a1[5] = 0;

    sub_10004BBC8((uint64_t)a1);
    v8 = (void *)a1[6];
    a1[6] = 0;

    v9 = (void *)a1[7];
    a1[7] = 0;

  }
}

uint64_t sub_10004BA2C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  void *v21;

  if (!a1)
    return 0;
  v2 = *(NSObject **)(a1 + 128);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = 0;

  }
  v4 = *(id *)(a1 + 32);
  if (!v4)
    return 1;
  v5 = *(_QWORD *)(a1 + 40);

  if (!v5)
    return 1;
  v6 = objc_msgSend(*(id *)(a1 + 40), "isRegistered");
  if (!(_DWORD)v6)
    return 1;
  v9 = nplog_obj(v6, v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(id *)(a1 + 32);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "agentUUID"));
    *(_DWORD *)buf = 138412546;
    v19 = a1;
    v20 = 2112;
    v21 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@ un-registering DNS network agent with UUID %@", buf, 0x16u);

  }
  v13 = objc_msgSend(*(id *)(a1 + 40), "unregisterNetworkAgent");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10004D62C;
  v17[3] = &unk_1000F5370;
  v17[4] = a1;
  objc_msgSend(v14, "removeFileHandleMatchingPredicate:", v17);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v15, "commit");

  return (uint64_t)v13;
}

void sub_10004BBC8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[5];
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  void *v17;

  v2 = *(id *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);

    if (v3)
    {
      v4 = objc_msgSend(*(id *)(a1 + 56), "isRegistered");
      if ((_DWORD)v4)
      {
        v7 = nplog_obj(v4, v5, v6);
        v8 = objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = *(id *)(a1 + 48);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "agentUUID"));
          *(_DWORD *)buf = 138412546;
          v15 = a1;
          v16 = 2112;
          v17 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@ un-registering bootstrap DNS network agent with UUID %@", buf, 0x16u);

        }
        objc_msgSend(*(id *)(a1 + 56), "unregisterNetworkAgent");
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_10004D708;
        v13[3] = &unk_1000F5370;
        v13[4] = a1;
        objc_msgSend(v11, "removeFileHandleMatchingPredicate:", v13);

        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        objc_msgSend(v12, "commit");

      }
    }
  }
}

uint64_t sub_10004BD30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id *v6;
  NSPPrivacyProxyBootstrapDNSAgent *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  id v49;
  id v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  NSObject *v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  unsigned int v83;
  id v84;
  id v85;
  id v86;
  void *v87;
  id v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  id v101;
  void *v102;
  void *v103;
  int *v104;
  char *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  _QWORD v112[5];
  _QWORD v113[6];
  uint8_t v114[4];
  uint64_t v115;
  __int16 v116;
  void *v117;
  __int16 v118;
  char *v119;
  _BYTE buf[24];
  uint64_t (*v121)(uint64_t, uint64_t);
  void (*v122)(uint64_t);
  id v123;

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_49;
  if (!v3)
  {
    sub_10004BBC8(a1);
    objc_storeStrong((id *)(a1 + 48), 0);
    objc_storeStrong((id *)(a1 + 56), 0);
LABEL_17:
    a1 = 1;
    goto LABEL_49;
  }
  v6 = (id *)(a1 + 48);
  v5 = *(void **)(a1 + 48);
  if (!v5)
  {
    v7 = -[NSPPrivacyProxyDNSAgent initWithDelegate:]([NSPPrivacyProxyBootstrapDNSAgent alloc], "initWithDelegate:", a1);
    objc_storeStrong((id *)(a1 + 48), v7);

    v8 = objc_msgSend(objc_alloc((Class)NWNetworkAgentRegistration), "initWithNetworkAgentClass:", objc_opt_class(NSPPrivacyProxyBootstrapDNSAgent));
    objc_storeStrong((id *)(a1 + 56), v8);

    v5 = *(void **)(a1 + 48);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resolver"));

  if (!v9)
    objc_msgSend(*v6, "setResolver:", v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager singleHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "singleHopProxyAgentUUID"));
  objc_msgSend(*v6, "setProxyAgentUUID:", v10);

  v14 = nplog_obj(v11, v12, v13);
  v15 = objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = *(id *)(a1 + 48);
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "resolver"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "dohURL"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%@ setting up bootstrap DNS network agent to %{public}@", buf, 0x16u);

  }
  v19 = objc_msgSend(*(id *)(a1 + 56), "isRegistered");
  if (!(_DWORD)v19)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v121 = sub_10000311C;
    v122 = sub_10004C758;
    v123 = 0;
    v33 = nplog_obj(v19, v20, v21);
    v34 = objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      v35 = *v6;
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "agentUUID"));
      *(_DWORD *)v114 = 138412546;
      v115 = a1;
      v116 = 2112;
      v117 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%@ looking for bootstrap DNS network agent registration file handle with agent UUID %@", v114, 0x16u);

    }
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    v113[0] = _NSConcreteStackBlock;
    v113[1] = 3221225472;
    v113[2] = sub_10004C760;
    v113[3] = &unk_1000F52F8;
    v113[4] = a1;
    v113[5] = buf;
    objc_msgSend(v37, "iterateFileHandlesWithBlock:", v113);

    v40 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v40)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "handle"));
      v42 = dup((int)objc_msgSend(v41, "fileDescriptor"));

      if ((v42 & 0x80000000) != 0)
      {
        v95 = nplog_obj(v43, v44, v45);
        v96 = objc_claimAutoreleasedReturnValue(v95);
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "agentUUID"));
          v104 = __error();
          v105 = strerror(*v104);
          *(_DWORD *)v114 = 138412802;
          v115 = a1;
          v116 = 2112;
          v117 = v103;
          v118 = 2080;
          v119 = v105;
          _os_log_error_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "%@: failed to dup the bootstrap DNS network agent registration file handle [%@], error: %s", v114, 0x20u);

        }
        goto LABEL_47;
      }
      v46 = nplog_obj(v43, v44, v45);
      v47 = objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "agentUUID"));
        *(_DWORD *)v114 = 138412546;
        v115 = a1;
        v116 = 2112;
        v117 = v48;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%@: re-using existing bootstrap DNS network agent registration file handle [%@]", v114, 0x16u);

      }
      v49 = *(id *)(a1 + 56);
      v50 = *(id *)(a1 + 48);
      v51 = objc_msgSend(v49, "setRegisteredNetworkAgent:fileDescriptor:", v50, v42);

      if ((v51 & 1) == 0)
      {
        v97 = nplog_obj(v52, v53, v54);
        v98 = objc_claimAutoreleasedReturnValue(v97);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
        {
          v106 = *v6;
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v106, "agentUUID"));
          *(_DWORD *)v114 = 138412546;
          v115 = a1;
          v116 = 2112;
          v117 = v107;
          _os_log_error_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "%@: failed to set the registered bootstrap DNS network agent [%@]", v114, 0x16u);

        }
        close(v42);
        goto LABEL_47;
      }
      v55 = *(id *)(a1 + 56);
      v56 = objc_msgSend(v55, "isRegistered");

      if (v56)
      {
        v60 = nplog_obj(v57, v58, v59);
        v61 = objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          v62 = *v6;
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "agentUUID"));
          *(_DWORD *)v114 = 138412546;
          v115 = a1;
          v116 = 2112;
          v117 = v63;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "%@ updating registered bootstrap DNS network agent [%@]", v114, 0x16u);

        }
        v64 = *(id *)(a1 + 56);
        v65 = *(id *)(a1 + 48);
        v66 = objc_msgSend(v64, "updateNetworkAgent:", v65);

        if ((v66 & 1) == 0)
        {
          v70 = nplog_obj(v67, v68, v69);
          v71 = objc_claimAutoreleasedReturnValue(v70);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            v110 = *v6;
            v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "agentUUID"));
            *(_DWORD *)v114 = 138412546;
            v115 = a1;
            v116 = 2112;
            v117 = v111;
            _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%@: failed to update the registered bootstrap DNS network agent [%@]", v114, 0x16u);

          }
LABEL_46:

LABEL_47:
          a1 = 0;
          goto LABEL_48;
        }
      }
    }
    else
    {
      v72 = nplog_obj(0, v38, v39);
      v73 = objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        v74 = *v6;
        v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "agentUUID"));
        *(_DWORD *)v114 = 138412546;
        v115 = a1;
        v116 = 2112;
        v117 = v75;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "%@ registering bootstrap DNS network agent [%@]", v114, 0x16u);

      }
      v76 = *(id *)(a1 + 56);
      v77 = *(id *)(a1 + 48);
      v78 = objc_msgSend(v76, "registerNetworkAgent:", v77);

      if ((v78 & 1) == 0)
      {
        v99 = nplog_obj(v79, v80, v81);
        v71 = objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          v108 = *v6;
          v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "agentUUID"));
          *(_DWORD *)v114 = 138412546;
          v115 = a1;
          v116 = 2112;
          v117 = v109;
          _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "%@: failed to register bootstrap DNS network agent [%@]", v114, 0x16u);

        }
        goto LABEL_46;
      }
      v82 = *(id *)(a1 + 56);
      v83 = objc_msgSend(v82, "isRegistered");

      if (v83)
      {
        v84 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
        v85 = *(id *)(a1 + 56);
        v86 = *(id *)(a1 + 48);
        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "agentUUID"));
        v88 = *v6;
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "agentUUID"));
        v90 = objc_msgSend(v84, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:", v85, &off_1000FF2A8, v87, v89);
        v91 = *(void **)(*(_QWORD *)&buf[8] + 40);
        *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v90;

        v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        v93 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        v112[0] = _NSConcreteStackBlock;
        v112[1] = 3221225472;
        v112[2] = sub_10004C860;
        v112[3] = &unk_1000F5370;
        v112[4] = a1;
        objc_msgSend(v92, "setFileHandle:matchingPredicate:", v93, v112);

        v94 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        objc_msgSend(v94, "commit");

      }
    }
    a1 = 1;
LABEL_48:
    _Block_object_dispose(buf, 8);

    goto LABEL_49;
  }
  v22 = nplog_obj(v19, v20, v21);
  v23 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    v24 = *(id *)(a1 + 48);
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "agentUUID"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%@ updating bootstrap DNS network agent with UUID %@", buf, 0x16u);

  }
  v26 = *(_QWORD *)(a1 + 48);
  v27 = *(id *)(a1 + 56);
  LOBYTE(v26) = objc_msgSend(v27, "updateNetworkAgent:", v26);

  if ((v26 & 1) != 0)
    goto LABEL_17;
  v31 = nplog_obj(v28, v29, v30);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    v101 = *(id *)(a1 + 48);
    v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v101, "agentUUID"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v102;
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%@: failed to update the registered bootstrap DNS network agent [%@]", buf, 0x16u);

  }
  a1 = 0;
LABEL_49:

  return a1;
}

void sub_10004C6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004C758(uint64_t a1)
{

}

uint64_t sub_10004C760(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_8;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
  v6 = objc_msgSend(v5, "isEqual:", &off_1000FF2A8);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = *(void **)(v8 + 48);
    else
      v9 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "agentUUID"));
    v11 = objc_msgSend(v7, "isEqual:", v10);

    if (v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v13 = v3;
      v5 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v13;
      goto LABEL_7;
    }
LABEL_8:
    v14 = 1;
    goto LABEL_9;
  }
LABEL_7:
  v14 = v6 ^ 1;

LABEL_9:
  return v14;
}

id sub_10004C860(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF2A8))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        v8 = *(void **)(v7 + 48);
      else
        v8 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "agentUUID"));
      v10 = objc_msgSend(v6, "isEqual:", v9);

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

uint64_t sub_10004C93C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id *v3;
  NSPPrivacyProxyDNSAgent *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  dispatch_source_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  dispatch_time_t v25;
  void *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  id v56;
  id v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  unsigned __int8 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  NSObject *v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  unsigned int v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  void *v98;
  id v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  id v110;
  void *v111;
  void *v112;
  int *v113;
  char *v114;
  id v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  void *v120;
  _QWORD v121[5];
  _QWORD v122[6];
  _BYTE location[12];
  __int16 v124;
  void *v125;
  __int16 v126;
  char *v127;
  _BYTE buf[24];
  uint64_t (*v129)(uint64_t, uint64_t);
  void (*v130)(uint64_t);
  id v131;

  v1 = a1;
  if (!a1)
    return v1;
  v3 = (id *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    v4 = -[NSPPrivacyProxyDNSAgent initWithDelegate:]([NSPPrivacyProxyDNSAgent alloc], "initWithDelegate:", v1);
    objc_storeStrong((id *)(v1 + 32), v4);

    v5 = objc_msgSend(objc_alloc((Class)NWNetworkAgentRegistration), "initWithNetworkAgentClass:", objc_opt_class(NSPPrivacyProxyDNSAgent));
    objc_storeStrong((id *)(v1 + 40), v5);

    v2 = *(void **)(v1 + 32);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "resolver"));

  if (!v6)
  {
    v7 = sub_10004B4A8(v1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(*(id *)(v1 + 32), "setResolver:", v8);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager singleHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "singleHopProxyAgentUUID"));
  objc_msgSend(*v3, "setProxyAgentUUID:", v9);

  v13 = nplog_obj(v10, v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = *(id *)(v1 + 32);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "resolver"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "dohURL"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v1;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ setting up DNS network agent to %{public}@", buf, 0x16u);

  }
  if (!*(_QWORD *)(v1 + 128))
  {
    v19 = NPGetInternalQueue(v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    v21 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v20);
    v22 = *(void **)(v1 + 128);
    *(_QWORD *)(v1 + 128) = v21;

    v23 = *(void **)(v1 + 128);
    if (v23)
    {
      v24 = v23;
      v25 = dispatch_time(0x8000000000000000, 1800000000000);
      dispatch_source_set_timer(v24, v25, 0x1A3185C5000uLL, 0);

      objc_initWeak((id *)location, (id)v1);
      v26 = *(void **)(v1 + 128);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_10004B86C;
      v129 = (uint64_t (*)(uint64_t, uint64_t))&unk_1000F57C0;
      v27 = v26;
      objc_copyWeak((id *)&v130, (id *)location);
      dispatch_source_set_event_handler(v27, buf);

      dispatch_resume(*(dispatch_object_t *)(v1 + 128));
      objc_destroyWeak((id *)&v130);
      objc_destroyWeak((id *)location);
    }
  }
  v28 = objc_msgSend(*(id *)(v1 + 40), "isRegistered");
  if (!(_DWORD)v28)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v129 = sub_10000311C;
    v130 = sub_10004C758;
    v131 = 0;
    v40 = nplog_obj(v28, v29, v30);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      v42 = *v3;
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "agentUUID"));
      *(_DWORD *)location = 138412546;
      *(_QWORD *)&location[4] = v1;
      v124 = 2112;
      v125 = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%@ looking for DNS network agent registration file handle with agent UUID %@", location, 0x16u);

    }
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    v122[0] = _NSConcreteStackBlock;
    v122[1] = 3221225472;
    v122[2] = sub_10004D450;
    v122[3] = &unk_1000F52F8;
    v122[4] = v1;
    v122[5] = buf;
    objc_msgSend(v44, "iterateFileHandlesWithBlock:", v122);

    v47 = *(void **)(*(_QWORD *)&buf[8] + 40);
    if (v47)
    {
      v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "handle"));
      v49 = dup((int)objc_msgSend(v48, "fileDescriptor"));

      if ((v49 & 0x80000000) != 0)
      {
        v104 = nplog_obj(v50, v51, v52);
        v105 = objc_claimAutoreleasedReturnValue(v104);
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "agentUUID"));
          v113 = __error();
          v114 = strerror(*v113);
          *(_DWORD *)location = 138412802;
          *(_QWORD *)&location[4] = v1;
          v124 = 2112;
          v125 = v112;
          v126 = 2080;
          v127 = v114;
          _os_log_error_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "%@: failed to dup the DNS network agent registration file handle [%@], error: %s", location, 0x20u);

        }
        goto LABEL_48;
      }
      v53 = nplog_obj(v50, v51, v52);
      v54 = objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)&buf[8] + 40), "agentUUID"));
        *(_DWORD *)location = 138412546;
        *(_QWORD *)&location[4] = v1;
        v124 = 2112;
        v125 = v55;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "%@: re-using existing DNS network agent registration file handle [%@]", location, 0x16u);

      }
      v56 = *(id *)(v1 + 40);
      v57 = *(id *)(v1 + 32);
      v58 = objc_msgSend(v56, "setRegisteredNetworkAgent:fileDescriptor:", v57, v49);

      if ((v58 & 1) == 0)
      {
        v106 = nplog_obj(v59, v60, v61);
        v107 = objc_claimAutoreleasedReturnValue(v106);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          v115 = *v3;
          v116 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v115, "agentUUID"));
          *(_DWORD *)location = 138412546;
          *(_QWORD *)&location[4] = v1;
          v124 = 2112;
          v125 = v116;
          _os_log_error_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "%@: failed to set the registered DNS network agent [%@]", location, 0x16u);

        }
        close(v49);
        goto LABEL_48;
      }
      v62 = *(id *)(v1 + 40);
      v63 = objc_msgSend(v62, "isRegistered");

      if (v63)
      {
        v67 = nplog_obj(v64, v65, v66);
        v68 = objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
        {
          v69 = *v3;
          v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "agentUUID"));
          *(_DWORD *)location = 138412546;
          *(_QWORD *)&location[4] = v1;
          v124 = 2112;
          v125 = v70;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "%@ updating registered DNS network agent [%@]", location, 0x16u);

        }
        v71 = *(id *)(v1 + 40);
        v72 = *(id *)(v1 + 32);
        v73 = objc_msgSend(v71, "updateNetworkAgent:", v72);

        if ((v73 & 1) == 0)
        {
          v77 = nplog_obj(v74, v75, v76);
          v78 = objc_claimAutoreleasedReturnValue(v77);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            v119 = *v3;
            v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v119, "agentUUID"));
            *(_DWORD *)location = 138412546;
            *(_QWORD *)&location[4] = v1;
            v124 = 2112;
            v125 = v120;
            _os_log_error_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "%@: failed to update the registered DNS network agent [%@]", location, 0x16u);

          }
LABEL_47:

LABEL_48:
          v1 = 0;
          goto LABEL_49;
        }
      }
    }
    else
    {
      v81 = nplog_obj(0, v45, v46);
      v82 = objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
      {
        v83 = *v3;
        v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "agentUUID"));
        *(_DWORD *)location = 138412546;
        *(_QWORD *)&location[4] = v1;
        v124 = 2112;
        v125 = v84;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "%@ registering DNS network agent [%@]", location, 0x16u);

      }
      v85 = *(id *)(v1 + 40);
      v86 = *(id *)(v1 + 32);
      v87 = objc_msgSend(v85, "registerNetworkAgent:", v86);

      if ((v87 & 1) == 0)
      {
        v108 = nplog_obj(v88, v89, v90);
        v78 = objc_claimAutoreleasedReturnValue(v108);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        {
          v117 = *v3;
          v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v117, "agentUUID"));
          *(_DWORD *)location = 138412546;
          *(_QWORD *)&location[4] = v1;
          v124 = 2112;
          v125 = v118;
          _os_log_error_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "%@: failed to register DNS network agent [%@]", location, 0x16u);

        }
        goto LABEL_47;
      }
      v91 = *(id *)(v1 + 40);
      v92 = objc_msgSend(v91, "isRegistered");

      if (v92)
      {
        v93 = objc_alloc((Class)NENetworkAgentRegistrationFileHandle);
        v94 = *(id *)(v1 + 40);
        v95 = *(id *)(v1 + 32);
        v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v95, "agentUUID"));
        v97 = *v3;
        v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v97, "agentUUID"));
        v99 = objc_msgSend(v93, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:", v94, &off_1000FF2A8, v96, v98);
        v100 = *(void **)(*(_QWORD *)&buf[8] + 40);
        *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v99;

        v101 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        v102 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
        v121[0] = _NSConcreteStackBlock;
        v121[1] = 3221225472;
        v121[2] = sub_10004D550;
        v121[3] = &unk_1000F5370;
        v121[4] = v1;
        objc_msgSend(v101, "setFileHandle:matchingPredicate:", v102, v121);

        v103 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
        objc_msgSend(v103, "commit");

      }
    }
    v1 = 1;
LABEL_49:
    _Block_object_dispose(buf, 8);

    return v1;
  }
  v31 = nplog_obj(v28, v29, v30);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
  {
    v33 = *(id *)(v1 + 32);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "agentUUID"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%@ updating DNS network agent with UUID %@", buf, 0x16u);

  }
  v35 = *(_QWORD *)(v1 + 32);
  v36 = *(id *)(v1 + 40);
  LOBYTE(v35) = objc_msgSend(v36, "updateNetworkAgent:", v35);

  if ((v35 & 1) != 0)
    return 1;
  v79 = nplog_obj(v37, v38, v39);
  v80 = objc_claimAutoreleasedReturnValue(v79);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
  {
    v110 = *(id *)(v1 + 32);
    v111 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "agentUUID"));
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v111;
    _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "%@: failed to update the registered DNS network agent [%@]", buf, 0x16u);

  }
  return 0;
}

void sub_10004D3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D450(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
    goto LABEL_8;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
  v6 = objc_msgSend(v5, "isEqual:", &off_1000FF2A8);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
    v8 = *(_QWORD *)(a1 + 32);
    if (v8)
      v9 = *(void **)(v8 + 32);
    else
      v9 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "agentUUID"));
    v11 = objc_msgSend(v7, "isEqual:", v10);

    if (v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v13 = v3;
      v5 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v13;
      goto LABEL_7;
    }
LABEL_8:
    v14 = 1;
    goto LABEL_9;
  }
LABEL_7:
  v14 = v6 ^ 1;

LABEL_9:
  return v14;
}

id sub_10004D550(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF2A8))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        v8 = *(void **)(v7 + 32);
      else
        v8 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "agentUUID"));
      v10 = objc_msgSend(v6, "isEqual:", v9);

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_10004D62C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF2A8))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        v8 = *(void **)(v7 + 32);
      else
        v8 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "agentUUID"));
      v10 = objc_msgSend(v6, "isEqual:", v9);

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_10004D708(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v3 = a2;
  v4 = objc_opt_class(NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sessionType"));
    if (objc_msgSend(v5, "isEqual:", &off_1000FF2A8))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "agentUUID"));
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        v8 = *(void **)(v7 + 48);
      else
        v8 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "agentUUID"));
      v10 = objc_msgSend(v6, "isEqual:", v9);

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10004D7E4(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint8_t v26[16];

  v4 = a2;
  if (a1)
  {
    v5 = *(id *)(a1 + 64);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interface"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "interfaceName"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interface"));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "interfaceName"));
    v10 = objc_msgSend(v7, "isEqualToString:", v9);

    if ((v10 & 1) == 0)
    {
      v11 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v12 = *(void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v11;

    }
    if (objc_msgSend(v4, "status") == (id)2)
    {
      v13 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v14 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v13;

    }
    objc_storeStrong((id *)(a1 + 64), a2);
    v15 = +[NPUtilities copyCurrentNetworkCharacteristicsForPath:](NPUtilities, "copyCurrentNetworkCharacteristicsForPath:", *(_QWORD *)(a1 + 64));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("Signature")));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "objectForKeyedSubscript:", CFSTR("Signature")));
    v18 = v16;
    v19 = v17;
    v20 = (void *)v19;
    if (!(v18 | v19) || v18 && v19 && objc_msgSend((id)v18, "isEqual:", v19))
    {

    }
    else
    {

      v24 = nplog_obj(v21, v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "proxy agent: network signature changed", v26, 2u);
      }

      *(_QWORD *)(a1 + 104) = 0;
      objc_storeStrong((id *)(a1 + 88), v15);
      objc_msgSend(*(id *)(a1 + 40), "resetError");
      objc_msgSend(*(id *)(a1 + 56), "resetError");
    }

  }
}

id *sub_10004D9F4(id *result, uint64_t a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  NSObject *v5;
  __int16 v6[8];

  if (result)
  {
    v3 = result;
    v4 = nplog_obj(result, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Resetting error due to configuration change", (uint8_t *)v6, 2u);
    }

    objc_msgSend(v3[5], "resetError");
    return (id *)objc_msgSend(v3[7], "resetError");
  }
  return result;
}

id *sub_10004DA70(id *result)
{
  id *v1;

  if (result)
  {
    v1 = result;
    objc_msgSend(result[5], "resetError");
    return (id *)objc_msgSend(v1[7], "resetError");
  }
  return result;
}

void sub_10004DAA0(id *a1, void *a2)
{
  id v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint8_t buf[16];

  v4 = a2;
  v5 = v4;
  if (a1)
  {
    v17 = v4;
    v6 = objc_msgSend(v4, "isEqualToString:", a1[2]);
    v5 = v17;
    if ((v6 & 1) == 0)
    {
      objc_storeStrong(a1 + 2, a2);
      v7 = v17;
      objc_opt_self(NSPServerODoH);
      CFPreferencesSetAppValue(CFSTR("NSPPreferredResolver"), v7, kCFPreferencesCurrentApplication);

      v8 = CFPreferencesAppSynchronize(kCFPreferencesCurrentApplication);
      if (!(_DWORD)v8)
      {
        v11 = nplog_obj(v8, v9, v10);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to write preferred resolver to preference file", buf, 2u);
        }

      }
      if (objc_msgSend(a1[5], "isRegistered"))
      {
        v15 = sub_10004B4A8((uint64_t)a1);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        objc_msgSend(a1[4], "setResolver:", v16);

        sub_10004C93C((uint64_t)a1);
      }
      sub_10004D9F4(a1, v13, v14);
      v5 = v17;
    }
  }

}

void sub_10004DBD8(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  NSPOutageReasonStats *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  void *v13;
  id v14;
  char *v15;
  uint64_t v16;
  char *i;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  NSPOutageReasonStats *v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  id WeakRetained;
  _QWORD v49[5];
  id v50;
  id location[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 buf;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t);
  id v59;

  v7 = a2;
  if (!*(_QWORD *)(a1 + 16))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolver"));
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)location = 0u;
    v52 = 0u;
    v14 = *(id *)(a1 + 120);
    v15 = (char *)objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", location, &buf, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v52;
      while (2)
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v52 != v16)
            objc_enumerationMutation(v14);
          v18 = (void *)*((_QWORD *)location[1] + (_QWORD)i);
          if (v18 != v13 && objc_msgSend(v18, "weight"))
          {

            if (v13)
              objc_msgSend(*(id *)(a1 + 120), "removeObject:", v13);
            if (objc_msgSend(*(id *)(a1 + 40), "isRegistered"))
            {
              v19 = sub_10004B4A8(a1);
              v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              objc_msgSend(*(id *)(a1 + 32), "setResolver:", v20);

              sub_10004C93C(a1);
            }

            v24 = nplog_obj(v21, v22, v23);
            v25 = objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              LOWORD(buf) = 0;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Switching resolvers", (uint8_t *)&buf, 2u);
            }

            v26 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
            v27 = *(void **)(a1 + 136);
            *(_QWORD *)(a1 + 136) = v26;

            v31 = nplog_obj(v28, v29, v30);
            v32 = objc_claimAutoreleasedReturnValue(v31);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf) = 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Updating odoh userevent agent data", (uint8_t *)&buf, 2u);
            }

            v33 = objc_alloc_init((Class)NSMutableDictionary);
            objc_msgSend(v33, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 136), CFSTR("NSPServerODoHAuxilaryDataResolverSwitchedDateKey"));
            location[0] = 0;
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v33, 1, location));
            v35 = location[0];
            v38 = v35;
            if (!v34 || v35)
            {
              v41 = nplog_obj(v35, v36, v37);
              v40 = objc_claimAutoreleasedReturnValue(v41);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                LODWORD(buf) = 138412290;
                *(_QWORD *)((char *)&buf + 4) = v38;
                _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "archivedDataWithRootObject failed with error: %@", (uint8_t *)&buf, 0xCu);
              }
            }
            else
            {
              v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
              objc_msgSend(v39, "setAuxiliaryData:forKey:", v34, CFSTR("NSPServerODoHAuxilaryData"));

              v40 = objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
              -[NSObject commit](v40, "commit");
            }

            goto LABEL_36;
          }
        }
        v15 = (char *)objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", location, &buf, 16);
        if (v15)
          continue;
        break;
      }
    }

  }
  if (!*(_BYTE *)(a1 + 8))
  {
    v8 = objc_alloc_init(NSPOutageReasonStats);
    -[NSPOutageReasonStats setTierType:](v8, "setTierType:", CFSTR("SUBSCRIBER"));
    v9 = -[NSPOutageReasonStats setOutageReasonType:](v8, "setOutageReasonType:", CFSTR("DNS"));
    if (a3 == 80)
    {
      v12 = CFSTR("ODoHAuthFailure");
    }
    else
    {
      if (a3 != 94)
      {
        v45 = nplog_obj(v9, v10, v11);
        v46 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = a3;
          _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "unexpected error code %d", (uint8_t *)&buf, 8u);
        }

        v44 = 0;
        goto LABEL_35;
      }
      v12 = CFSTR("ODoHBadMessage");
    }
    -[NSPOutageReasonStats setOutageReasonSubType:](v8, "setOutageReasonSubType:", v12);
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolver"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "dohURL"));
    -[NSPOutageReasonStats setOdohProxy:](v8, "setOdohProxy:", v43);

    v44 = v8;
LABEL_35:

    v47 = *(void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v44;

    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v56 = 0x3032000000;
    v57 = sub_10000311C;
    v58 = sub_10004C758;
    v59 = (id)os_transaction_create("com.apple.networkserviceproxy.dnsConnectivityCheck");
    objc_initWeak(location, (id)a1);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_10004E118;
    v49[3] = &unk_1000F5B68;
    objc_copyWeak(&v50, location);
    v49[4] = &buf;
    objc_msgSend(WeakRetained, "checkPrivacyProxyConnectivityOnInterface:proxyConnectivityCheckType:completionHandler:", v7, a4, v49);

    *(_BYTE *)(a1 + 8) = 1;
    objc_destroyWeak(&v50);
    objc_destroyWeak(location);
    _Block_object_dispose(&buf, 8);

  }
LABEL_36:

}

void sub_10004E0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_10004E118(uint64_t a1)
{
  _BYTE *WeakRetained;
  uint64_t v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
    WeakRetained[8] = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;
  v5 = WeakRetained;

}

id *sub_10004E168(id *a1)
{
  if (a1)
    a1 = (id *)a1[18];
  return a1;
}

void sub_10004E48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004E4B8(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  id *WeakRetained;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  id v21;
  id v22;
  void *v23;
  _QWORD *v24;
  double v25;
  id v26;
  _QWORD *v27;
  double v28;
  void *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _QWORD *v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  id v48;
  _QWORD *v49;
  void *v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint8_t buf[4];
  id v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  void *v63;
  __int16 v64;
  void *v65;
  __int16 v66;
  void *v67;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v6 = (uint64_t)WeakRetained;
  if (!WeakRetained)
    goto LABEL_39;
  v7 = WeakRetained[17];
  if (v7)
  {
    v8 = v7;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    objc_msgSend(v9, "timeIntervalSinceDate:", *(_QWORD *)(v6 + 136));
    v11 = v10;

    if (v11 <= 30.0)
    {
      v18 = nplog_obj(v12, v13, v14);
      v17 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(void **)(v6 + 136);
        *(_DWORD *)buf = 138412290;
        v59 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Ignoring DNS error, last resolver switched date %@", buf, 0xCu);
      }
      goto LABEL_38;
    }
  }
  v15 = *(_DWORD *)(a1 + 56);
  if (v15 == 94)
  {
    v20 = *(_QWORD *)(v6 + 104) + 1;
    *(_QWORD *)(v6 + 104) = v20;
    if (v20 < 3)
    {
LABEL_37:
      v17 = *(id *)(v6 + 152);
      -[NSObject setOdohBadMessageCount:](v17, "setOdohBadMessageCount:", (char *)-[NSObject odohBadMessageCount](v17, "odohBadMessageCount") + 1);
LABEL_38:

      goto LABEL_39;
    }
    v21 = *(id *)(v6 + 64);
    if (objc_msgSend(v21, "status") == (id)1)
    {
      v22 = *(id *)(v6 + 72);
      if (!v22)
        goto LABEL_18;
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      v24 = *(_QWORD **)(a1 + 40);
      if (v24)
        v24 = (_QWORD *)v24[9];
      v1 = v24;
      objc_msgSend(v23, "timeIntervalSinceDate:", v1);
      if (v25 > 30.0)
      {
        v57 = v23;
LABEL_18:
        v26 = *(id *)(v6 + 80);
        if (v26)
        {
          v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
          v27 = *(_QWORD **)(a1 + 40);
          if (v27)
            v27 = (_QWORD *)v27[10];
          v3 = v27;
          objc_msgSend(v2, "timeIntervalSinceDate:", v3);
          if (v28 <= 30.0)
          {
            v30 = 0;
            goto LABEL_46;
          }
          v29 = *(void **)(a1 + 32);
          if (!v29)
          {
            v30 = 1;
            goto LABEL_46;
          }
        }
        else
        {
          v29 = *(void **)(a1 + 32);
          if (!v29)
          {
            if (v22)
            {

            }
            goto LABEL_54;
          }
        }
        v51 = objc_msgSend(v29, "interfaceIndex");
        v52 = *(_QWORD *)(a1 + 40);
        if (v52)
          v53 = *(void **)(v52 + 64);
        else
          v53 = 0;
        v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "interface"));
        v30 = v51 == objc_msgSend(v54, "interfaceIndex");

        if (!v26)
        {
LABEL_47:
          if (v22)
          {

          }
          if (v30)
          {
LABEL_54:
            sub_10004DBD8(v6, *(void **)(a1 + 32), 94, 5);
            *(_QWORD *)(v6 + 104) = 0;
            goto LABEL_37;
          }
LABEL_26:
          v34 = nplog_obj(v31, v32, v33);
          v35 = objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            v36 = *(_QWORD **)(a1 + 40);
            if (v36)
              v36 = (_QWORD *)v36[8];
            v37 = v36;
            v38 = objc_msgSend(v37, "status");
            v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "interfaceName"));
            v40 = *(_QWORD **)(a1 + 40);
            v56 = (void *)v39;
            if (v40)
              v40 = (_QWORD *)v40[8];
            v41 = v40;
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "interface"));
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "interfaceName"));
            v44 = *(_QWORD **)(a1 + 40);
            v55 = v41;
            if (v44)
              v44 = (_QWORD *)v44[9];
            v45 = v44;
            v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v45, 1, 2));
            v47 = *(_QWORD **)(a1 + 40);
            v48 = v38;
            if (v47)
              v47 = (_QWORD *)v47[10];
            v49 = v47;
            v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v49, 1, 2));
            *(_DWORD *)buf = 134219010;
            v59 = v48;
            v60 = 2112;
            v61 = v56;
            v62 = 2112;
            v63 = v43;
            v64 = 2112;
            v65 = v46;
            v66 = 2112;
            v67 = v50;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "ignoring DNS bad message error, path status %ld reporting interface %@ primary interface %@ last path unsatisfied date %@, last interface change date %@", buf, 0x34u);

          }
          goto LABEL_37;
        }
LABEL_46:

        goto LABEL_47;
      }

    }
    goto LABEL_26;
  }
  if (v15 == 80)
  {
    v16 = *(_QWORD *)(v6 + 96) + 1;
    *(_QWORD *)(v6 + 96) = v16;
    if (v16 >= 3)
    {
      sub_10004DBD8(v6, *(void **)(a1 + 32), 80, 4);
      *(_QWORD *)(v6 + 96) = 0;
    }
    v17 = *(id *)(v6 + 152);
    -[NSObject setOdohAuthFailureCount:](v17, "setOdohAuthFailureCount:", (char *)-[NSObject odohAuthFailureCount](v17, "odohAuthFailureCount") + 1);
    goto LABEL_38;
  }
LABEL_39:

}

void sub_10004E974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  v1 = objc_opt_self(a1);
  v4 = nplog_obj(v1, v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "remove userevent agent data", v8, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v6, "setAuxiliaryData:forKey:", CFSTR("NIL"), CFSTR("NSPServerODoHAuxilaryData"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v7, "commit");

}

void sub_10004F10C(uint64_t a1, void *a2)
{
  NSPEventsNormalizer *v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = -[NSPEventsNormalizer initWithMLModel:]([NSPEventsNormalizer alloc], "initWithMLModel:", v4);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

id sub_10004F558(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "analyticsDict");
}

id sub_1000549E8()
{
  objc_opt_self();
  if (qword_100112E70 != -1)
    dispatch_once(&qword_100112E70, &stru_1000F5F50);
  return (id)qword_100112E68;
}

void sub_100054A2C(id a1)
{
  NSPServer *v1;
  void *v2;

  v1 = objc_alloc_init(NSPServer);
  v2 = (void *)qword_100112E68;
  qword_100112E68 = (uint64_t)v1;

  if (qword_100112E68)
    *(_DWORD *)(qword_100112E68 + 32) = -1;
}

id sub_100054A70(void *a1)
{
  uint64_t v1;

  if (a1)
  {
    v1 = NPGetInternalQueue(a1);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }
  return a1;
}

void sub_100054A8C(uint64_t a1)
{

}

void sub_100054A94(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];

  if (a1)
  {
    v3 = a2;
    v6 = nplog_obj(v3, v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v8 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Handling fetch configuration", v8, 2u);
    }

    sub_10006B6C0(v3, "NSPServerConfiguration", *(void **)(a1 + 40));
  }
}

void sub_100054B2C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSSet *v5;
  void *v6;
  uint64_t nsdata_from_xpc_object;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v18;
  uint8_t buf[16];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSPConfiguration), 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerConfiguration");
      v8 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      if (v8)
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v6, v8, 0));
      else
        v9 = 0;

      v13 = nplog_obj(v10, v11, v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Handling set configuration", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 56), "updateConfiguration:", v9);
      v15 = v4;
      reply = xpc_dictionary_create_reply(v15);
      remote_connection = xpc_dictionary_get_remote_connection(v15);
      v18 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v18)
        xpc_connection_send_message(v18, reply);

    }
    else
    {
      sub_10006B750(v4, "NSPServerErrorString", CFSTR("Permission denied"));
    }
  }

}

void sub_100054CB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *string;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint8_t buf[4];
  char *v21;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    string = xpc_dictionary_get_string(v3, "NSPServerEdgeSetIdentifier");
    v8 = (char *)string;
    if (string)
    {
      string = (const char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      v8 = (char *)string;
    }
    v9 = nplog_obj(string, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Handling fetch edge set for %@", buf, 0xCu);
    }

    v11 = *(void **)(a1 + 40);
    if (v8)
    {
      v12 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "edgeSets"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v8));

      if (!v14)
      {
        v18 = 0;
        goto LABEL_13;
      }
      v19 = v14;
      v15 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1));
    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "edgeSets"));
      v17 = objc_msgSend(v16, "count");

      if (!v17)
      {
        v18 = 0;
        goto LABEL_14;
      }
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "edgeSets"));
      v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "allValues"));
    }
    v18 = (void *)v15;
LABEL_13:

LABEL_14:
    sub_10006B6C0(v4, "NSPServerWaldoInfos", v18);

  }
}

void sub_100054E64(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char *string;
  NSSet *v6;
  void *v7;
  uint64_t nsdata_from_xpc_object;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  char *v19;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      string = (char *)xpc_dictionary_get_string(v4, "NSPServerEdgeSetIdentifier");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NPWaldo), 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerWaldoInfo");
      v9 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      if (v9)
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v7, v9, 0));
      else
        v10 = 0;

      v14 = nplog_obj(v11, v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v19 = string;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Handling set edge set for %@", buf, 0xCu);
      }

      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10006B80C;
      v16[3] = &unk_1000F61C0;
      v17 = v4;
      sub_10006B820(a1, v10, string, v16);

    }
    else
    {
      sub_10006B750(v4, "NSPServerErrorString", CFSTR("Permission denied"));
    }
  }

}

void sub_100055058(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *string;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  char *v27;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    string = xpc_dictionary_get_string(v3, "NSPServerAppLabel");
    v8 = (char *)string;
    if (string)
    {
      string = (const char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      v8 = (char *)string;
    }
    v20 = v4;
    v9 = nplog_obj(string, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Handling fetch app rule for label %@", buf, 0xCu);
    }

    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appRules"));
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v12)
    {
      v13 = v12;
      v14 = 0;
      v15 = *(_QWORD *)v22;
LABEL_8:
      v16 = 0;
      while (1)
      {
        if (*(_QWORD *)v22 != v15)
          objc_enumerationMutation(v11);
        v17 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v16);
        if (!v8
          || (v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v16), "label")),
              v19 = objc_msgSend(v18, "isEqualToString:", v8),
              v18,
              v19))
        {
          if (!v14)
            v14 = objc_alloc_init((Class)NSMutableArray);
          objc_msgSend(v14, "addObject:", v17);
          if (v8)
            break;
        }
        if (v13 == (id)++v16)
        {
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
          if (v13)
            goto LABEL_8;
          break;
        }
      }
    }
    else
    {
      v14 = 0;
    }

    v4 = v20;
    sub_10006B6C0(v20, "NSPServerAppRules", v14);

  }
}

void sub_100055264(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char *string;
  NSSet *v6;
  void *v7;
  uint64_t nsdata_from_xpc_object;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  void *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  void *i;
  void *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  void *v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  unsigned __int8 v75;
  void *v76;
  id v77;
  uint64_t v78;
  NSObject *v79;
  id v80;
  uint64_t v81;
  NSObject *v82;
  void *v83;
  void *v84;
  id v85;
  char *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  _QWORD v91[4];
  id v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint8_t buf[4];
  char *v98;
  __int16 v99;
  char *v100;
  _BYTE v101[128];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      string = (char *)xpc_dictionary_get_string(v4, "NSPServerAppLabel");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(NSPAppRule), 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerAppRule");
      v9 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      if (v9)
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v7, v9, 0));
      else
        v10 = 0;

      v14 = nplog_obj(v11, v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        v98 = string;
        _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Handling set app rule for %@", buf, 0xCu);
      }

      if (!string)
      {
        sub_10006B750(v4, "NSPServerErrorString", CFSTR("App Rule label is nil"));
LABEL_41:

        goto LABEL_42;
      }
      v90 = v10;
      v16 = v10;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appRules"));
      v18 = objc_msgSend(v17, "count");

      if (!v18)
        goto LABEL_19;
      v22 = 0;
      while (1)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appRules"));
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectAtIndexedSubscript:", v22));

        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "label"));
        v26 = objc_msgSend(v25, "isEqualToString:", string);

        if ((v26 & 1) != 0)
          break;
        ++v22;
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appRules"));
        v28 = objc_msgSend(v27, "count");

        if (v22 >= (unint64_t)v28)
          goto LABEL_19;
      }
      if (v22 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v54 = *(id *)(a1 + 40);
        v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "appRules"));
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectAtIndexedSubscript:", v22));

        if (v16)
        {
          v59 = nplog_obj(v56, v57, v58);
          v60 = objc_claimAutoreleasedReturnValue(v59);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v98 = string;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Merging new settings into existing %@ app rule", buf, 0xCu);
          }

          objc_msgSend(v31, "merge:", v16);
        }
        else
        {
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "edgeSetIdentifier"));

          if (!v61)
          {
            v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "matchSigningIdentifier"));
            v91[0] = _NSConcreteStackBlock;
            v91[1] = 3221225472;
            v91[2] = sub_10006BE70;
            v91[3] = &unk_1000F61C0;
            v92 = v31;
            sub_10006B820(a1, 0, v62, v91);

          }
          v89 = v31;
          objc_msgSend(v31, "teardownNetworkAgent");
          v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appRules"));
          v64 = objc_msgSend(v63, "mutableCopy");

          v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSPConfiguration defaultConfiguration](NSPConfiguration, "defaultConfiguration"));
          v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "appRules"));
          v67 = objc_msgSend(v66, "count");

          if (!v67)
            goto LABEL_55;
          v71 = 0;
          while (1)
          {
            v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "appRules"));
            v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v72, "objectAtIndexedSubscript:", v71));

            v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "label"));
            v75 = objc_msgSend(v74, "isEqualToString:", string);

            if ((v75 & 1) != 0)
              break;
            ++v71;
            v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "appRules"));
            v77 = objc_msgSend(v76, "count");

            if (v71 >= (unint64_t)v77)
              goto LABEL_55;
          }
          if (v71 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v81 = nplog_obj(v68, v69, v70);
            v82 = objc_claimAutoreleasedReturnValue(v81);
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              v98 = string;
              v99 = 2112;
              v100 = string;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Replacing %@ app rule with the default %@ app rule", buf, 0x16u);
            }

            v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "appRules"));
            v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "objectAtIndexedSubscript:", v71));
            v85 = objc_msgSend(v84, "copy");

            objc_msgSend(v64, "replaceObjectAtIndex:withObject:", v22, v85);
          }
          else
          {
LABEL_55:
            v78 = nplog_obj(v68, v69, v70);
            v79 = objc_claimAutoreleasedReturnValue(v78);
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v98 = string;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Removing %@ app rule", buf, 0xCu);
            }

            objc_msgSend(v64, "removeObjectAtIndex:", v22);
          }
          v80 = objc_msgSend(objc_alloc((Class)NSArray), "initWithArray:", v64);
          objc_msgSend(*(id *)(a1 + 40), "setAppRules:", v80);

          v16 = 0;
          v31 = v89;
        }
      }
      else
      {
LABEL_19:
        if (!v16)
          goto LABEL_37;
        v29 = nplog_obj(v19, v20, v21);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v98 = string;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Adding new %@ app rule", buf, 0xCu);
        }

        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSPConfiguration defaultConfiguration](NSPConfiguration, "defaultConfiguration"));
        v93 = 0u;
        v94 = 0u;
        v95 = 0u;
        v96 = 0u;
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "appRules"));
        v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v93, v101, 16);
        if (v33)
        {
          v34 = v33;
          v87 = v4;
          v88 = v31;
          v86 = string;
          v35 = *(_QWORD *)v94;
          while (2)
          {
            for (i = 0; i != v34; i = (char *)i + 1)
            {
              if (*(_QWORD *)v94 != v35)
                objc_enumerationMutation(v32);
              v37 = *(void **)(*((_QWORD *)&v93 + 1) + 8 * (_QWORD)i);
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "label"));
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "label"));
              v40 = objc_msgSend(v38, "isEqualToString:", v39);

              if (v40)
              {
                v44 = nplog_obj(v41, v42, v43);
                v45 = objc_claimAutoreleasedReturnValue(v44);
                string = v86;
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v98 = v86;
                  _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Merging new settings into default %@ app rule", buf, 0xCu);
                }

                v46 = objc_msgSend(v37, "copy");
                objc_msgSend(v46, "merge:", v16);

                v16 = v46;
                v4 = v87;
                goto LABEL_34;
              }
            }
            v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v93, v101, 16);
            if (v34)
              continue;
            break;
          }
          string = v86;
          v4 = v87;
LABEL_34:
          v31 = v88;
        }

        v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appRules"));
        v48 = objc_msgSend(v47, "mutableCopy");

        objc_msgSend(v48, "addObject:", v16);
        v49 = objc_msgSend(objc_alloc((Class)NSArray), "initWithArray:", v48);
        objc_msgSend(*(id *)(a1 + 40), "setAppRules:", v49);

      }
LABEL_37:
      objc_msgSend(*(id *)(a1 + 40), "evaluateEnableRatios");
      objc_msgSend(*(id *)(a1 + 40), "saveToKeychain");
      sub_100062748(a1);
      objc_msgSend(*(id *)(a1 + 40), "setup");
      sub_10006363C(a1);
      v50 = v4;
      reply = xpc_dictionary_create_reply(v50);
      remote_connection = xpc_dictionary_get_remote_connection(v50);
      v53 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v53)
        xpc_connection_send_message(v53, reply);

      v10 = v90;
      goto LABEL_41;
    }
    sub_10006B750(v4, "NSPServerErrorString", CFSTR("Permission denied"));
  }
LABEL_42:

}

void sub_100055A94(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *string;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  char *v17;
  uint8_t buf[4];
  char *v19;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    string = xpc_dictionary_get_string(v3, "NSPServerEdgeSetIdentifier");
    v8 = (char *)string;
    if (string)
    {
      string = (const char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      v8 = (char *)string;
    }
    v9 = nplog_obj(string, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Handling establish trust for %@", buf, 0xCu);
    }

    if (v8)
    {
      v11 = *(id *)(a1 + 40);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "edgeSets"));
      v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v8));

      if (v13)
      {
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_10006BF4C;
        v15[3] = &unk_1000F6210;
        v16 = v4;
        v17 = v8;
        objc_msgSend(v13, "establishTrustWithCompletionHandler:", v15);

        v14 = v16;
      }
      else
      {
        v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Edge set \"%@\" does not exist"), v8);
        sub_10006B750(v4, "NSPServerErrorString", v14);
      }

    }
    else
    {
      v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Edge set identifier (%p) is nil"), 0);
      sub_10006B750(v4, "NSPServerErrorString", v13);
    }

  }
}

void sub_100055C88(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  uint8_t v13[16];

  v3 = a2;
  v6 = v3;
  if (a1)
  {
    v7 = nplog_obj(v3, v4, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Cannot refresh Waldo", v13, 2u);
    }

    v9 = v6;
    reply = xpc_dictionary_create_reply(v9);
    remote_connection = xpc_dictionary_get_remote_connection(v9);
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

    if (reply && v12)
    {
      xpc_dictionary_set_BOOL(reply, "NSPServerCommandResult", 0);
      xpc_connection_send_message(v12, reply);
    }

  }
}

void sub_100055D60(uint64_t a1, uint64_t a2)
{
  uint64_t nsdata_from_xpc_object;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  uint8_t buf[4];
  void *v22;

  if (a1)
  {
    nsdata_from_xpc_object = get_nsdata_from_xpc_object(a2, "NSPServerUsageData");
    v3 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
    v6 = nplog_obj(v3, v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Handling a usage report", buf, 2u);
    }

    if (v3)
    {
      v20 = 0;
      v11 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(NPUsageReport), v3, &v20);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13 = v20;
      v16 = v13;
      if (!v12)
      {
        v17 = nplog_obj(v13, v14, v15);
        v18 = objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v22 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to decode the usage report: %@", buf, 0xCu);
        }

      }
    }
    else
    {
      v19 = nplog_obj(v8, v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "reportUsage message does not contain a usage report", buf, 2u);
      }
    }

  }
}

void sub_100055F0C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  const char *string;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  char *v21;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = xpc_dictionary_get_double(v3, "NSPServerLatitude");
    v6 = xpc_dictionary_get_double(v4, "NSPServerLongtitude");
    if (xpc_dictionary_get_double(v4, "NSPServerTimestamp") <= 0.0)
      v7 = 0;
    else
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:"));
    string = xpc_dictionary_get_string(v4, "NSPServerSigningIdentifier");
    v11 = (char *)string;
    if (string)
    {
      string = (const char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      v11 = (char *)string;
    }
    v12 = nplog_obj(string, v9, v10);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v14 = 134218754;
      v15 = v5;
      v16 = 2048;
      v17 = v6;
      v18 = 2112;
      v19 = v7;
      v20 = 2112;
      v21 = v11;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Handling set latitude and longitude <%f, %f> at %@ for %@", (uint8_t *)&v14, 0x2Au);
    }

  }
}

void sub_100056084(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char *string;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  int v20;
  char *v21;
  __int16 v22;
  char *v23;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    string = (char *)xpc_dictionary_get_string(v3, "NSPServerSigningIdentifier");
    if (string)
      string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
    v6 = xpc_dictionary_get_string(v4, "NSPServerEndpoint");
    v9 = (char *)v6;
    if (v6)
    {
      v6 = (const char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v6);
      v9 = (char *)v6;
    }
    v10 = nplog_obj(v6, v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v20 = 138412546;
      v21 = string;
      v22 = 2112;
      v23 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Handling request for current state for %@ %@", (uint8_t *)&v20, 0x16u);
    }

    reply = xpc_dictionary_create_reply(v4);
    remote_connection = xpc_dictionary_get_remote_connection(v4);
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "telemetryService"));
      if (v15)
      {
        v16 = reply;
        xpc_dictionary_set_string(v16, "NSPServerTelemetryService", (const char *)objc_msgSend(v15, "UTF8String"));

      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "telemetryURL"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "absoluteString"));
      if (v18)
      {
        v19 = reply;
        xpc_dictionary_set_string(v19, "NSPServerTelemetryURL", (const char *)objc_msgSend(v18, "UTF8String"));

      }
      xpc_connection_send_message(v14, reply);
    }

  }
}

void sub_100056284(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t nsdictionary_from_xpc_object;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  uint8_t buf[4];
  void *v15;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    nsdictionary_from_xpc_object = get_nsdictionary_from_xpc_object(v3, "NSPServerTestLatencyMap");
    v6 = (void *)objc_claimAutoreleasedReturnValue(nsdictionary_from_xpc_object);
    v9 = nplog_obj(v6, v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v15 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Handling set test latency map %@", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPManager sharedManager](NSPManager, "sharedManager"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10006BFFC;
    v12[3] = &unk_1000F5720;
    v13 = v4;
    objc_msgSend(v11, "ingestTestLatencyMap:local:completionHandler:", v6, 1, v12);

  }
}

void sub_1000563C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t nsdata_from_xpc_object;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  double v18;
  id v19;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v22;
  xpc_connection_t v23;
  _xpc_connection_s *v24;
  _xpc_connection_s *v25;
  pid_t pid;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  __int128 v34;
  _OWORD v35[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerConfiguration");
      v6 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      v7 = objc_msgSend(objc_alloc((Class)NSPPrivacyProxyConfiguration), "initWithData:", v6);
      if (v7)
      {
        v8 = nplog_large_obj();
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v34) = 138412290;
          *(_QWORD *)((char *)&v34 + 4) = v7;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set privacy proxy configuration %@", (uint8_t *)&v34, 0xCu);
        }

        v10 = objc_alloc_init((Class)NSPConfiguration);
        v11 = v10;
        if (v10)
        {
          objc_msgSend(v10, "merge:", *(_QWORD *)(a1 + 40));
          objc_msgSend(v11, "setProxyConfiguration:", v7);
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
          objc_msgSend(v11, "setConfigurationFetchDate:", v12);

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "proxyConfiguration"));
          v14 = objc_msgSend(v13, "disableUntil");

          if (v14)
          {
            v15 = objc_alloc((Class)NSDate);
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "proxyConfiguration"));
            v17 = objc_msgSend(v15, "initWithTimeIntervalSince1970:", (double)(unint64_t)objc_msgSend(v16, "disableUntil"));

            objc_msgSend(v17, "timeIntervalSinceNow");
            if (v18 > 0.0)
              objc_msgSend(v11, "setResurrectionDate:", v17);

          }
          objc_msgSend(*(id *)(a1 + 56), "updateConfiguration:", v11);
          v19 = v4;
          reply = xpc_dictionary_create_reply(v19);
          remote_connection = xpc_dictionary_get_remote_connection(v19);
          v22 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

          if (reply && v22)
            xpc_connection_send_message(v22, reply);

        }
        else
        {
          sub_10006B750(v4, "NSPServerErrorString", CFSTR("Failed to parse privacyProxyConfiguration to NSPConfiguration"));
        }

      }
      else
      {
        sub_10006B750(v4, "NSPServerErrorString", CFSTR("Failed to parse configuration data to privacyProxyConfiguration"));
      }

    }
    else
    {
      v23 = xpc_dictionary_get_remote_connection(v4);
      v24 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v23);
      v25 = v24;
      if (v24
        && (pid = xpc_connection_get_pid(v24),
            v34 = 0u,
            memset(v35, 0, sizeof(v35)),
            proc_pidinfo(pid, 13, 1uLL, &v34, 64) == 64))
      {
        v27 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v27, (const char *)v35, 0x10uLL);
      }
      else
      {
        v27 = 0;
      }

      v31 = nplog_obj(v28, v29, v30);
      v32 = objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = "";
        if (v27)
          v33 = v27;
        LODWORD(v34) = 136315138;
        *(_QWORD *)((char *)&v34 + 4) = v33;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "set current privacy proxy configuration failed due to missing entitlement for %s", (uint8_t *)&v34, 0xCu);
      }

      if (v27)
        free(v27);
      sub_10006B750(v4, "NSPServerErrorString", CFSTR("Permission denied"));
    }
  }

}

void sub_10005672C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t nsdata_from_xpc_object;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  char v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint8_t buf[16];

  v3 = a2;
  v6 = v3;
  if (a1)
  {
    v7 = nplog_obj(v3, v4, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "processing privacy proxy configuration convert request", buf, 2u);
    }

    nsdata_from_xpc_object = get_nsdata_from_xpc_object(v6, "NSPServerConfiguration");
    v10 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
    if (v10)
    {
      v11 = objc_msgSend(objc_alloc((Class)NSPPrivacyProxySignedConfiguration), "initWithData:", v10);
      if (v11)
      {
        v12 = objc_alloc_init((Class)NSPConfigurationSignatureInfo);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "certificates"));
        objc_msgSend(v12, "setCertificates:", v13);

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "signature"));
        objc_msgSend(v12, "setSignature:", v14);

        objc_msgSend(v12, "setSignatureAlgorithm:", (int)objc_msgSend(v11, "algorithm"));
        v15 = objc_alloc_init((Class)NSData);
        v25 = v15;
        v16 = NSPPrivacyProxyConfigurationRawConfig(v10, &v25);
        v17 = v25;

        if ((v16 & 1) != 0)
        {
          v18 = *(id *)(a1 + 40);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "configServerHost"));
          v20 = *(id *)(a1 + 40);
          v21 = objc_msgSend(v20, "ignoreInvalidCerts") ^ 1;
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_10006C154;
          v22[3] = &unk_1000F6238;
          v23 = v17;
          v24 = v6;
          +[NSPConfiguration verifyConfigurationSignature:configuration:host:validateCert:completionHandler:](NSPConfiguration, "verifyConfigurationSignature:configuration:host:validateCert:completionHandler:", v12, v23, v19, v21, v22);

        }
        else
        {
          sub_10006C088(v6, 1005, CFSTR("could not extract raw configuration data"));
        }

      }
      else
      {
        sub_10006C088(v6, 1005, CFSTR("invalid configuration data"));
      }

    }
    else
    {
      sub_10006C088(v6, 1004, CFSTR("invalid parameter"));
    }

  }
}

void sub_1000569A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  xpc_connection_t v14;
  _xpc_connection_s *v15;
  _xpc_connection_s *v16;
  pid_t pid;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v25) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set privacy proxy status", (uint8_t *)&v25, 2u);
      }

      objc_msgSend(*(id *)(a1 + 56), "configurationEnabled:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyEnabled"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

    }
    else
    {
      v14 = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v15
        && (pid = xpc_connection_get_pid(v15),
            v25 = 0u,
            memset(v26, 0, sizeof(v26)),
            proc_pidinfo(pid, 13, 1uLL, &v25, 64) == 64))
      {
        v18 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v18, (const char *)v26, 0x10uLL);
      }
      else
      {
        v18 = 0;
      }

      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = "";
        if (v18)
          v24 = v18;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "setting privacy proxy status failed due to missing entitlement for %s", (uint8_t *)&v25, 0xCu);
      }

      if (v18)
        free(v18);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100056BC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v15;
  xpc_connection_t v16;
  _xpc_connection_s *v17;
  _xpc_connection_s *v18;
  pid_t pid;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  __int128 v27;
  _OWORD v28[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v27) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling get privacy proxy status", (uint8_t *)&v27, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "enabled"));
      v11 = objc_msgSend(v10, "BOOLValue");
      v12 = v4;
      reply = xpc_dictionary_create_reply(v12);
      remote_connection = xpc_dictionary_get_remote_connection(v12);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v15)
      {
        xpc_dictionary_set_BOOL(reply, "NSPServerPrivacyProxyEnabled", v11);
        xpc_connection_send_message(v15, reply);
      }

    }
    else
    {
      v16 = xpc_dictionary_get_remote_connection(v4);
      v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v16);
      v18 = v17;
      if (v17
        && (pid = xpc_connection_get_pid(v17),
            v27 = 0u,
            memset(v28, 0, sizeof(v28)),
            proc_pidinfo(pid, 13, 1uLL, &v27, 64) == 64))
      {
        v20 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v20, (const char *)v28, 0x10uLL);
      }
      else
      {
        v20 = 0;
      }

      v24 = nplog_obj(v21, v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = "";
        if (v20)
          v26 = v20;
        LODWORD(v27) = 136315138;
        *(_QWORD *)((char *)&v27 + 4) = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "getting privacy proxy status failed due to missing entitlement for %s", (uint8_t *)&v27, 0xCu);
      }

      if (v20)
        free(v20);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100056DF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int64_t int64;
  xpc_connection_t v11;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  pid_t pid;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *reply;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v36;
  const char *v37;
  __int128 v38;
  _OWORD v39[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v38) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "process proxy report service status", (uint8_t *)&v38, 2u);
      }

      int64 = xpc_dictionary_get_int64(v4, "NSPServerPrivacyProxyServiceStatus");
      switch(int64)
      {
        case 0:
          objc_msgSend(*(id *)(a1 + 72), "reportServiceDisabledShouldReport:", 0);
          goto LABEL_26;
        case 1:
          objc_msgSend(*(id *)(a1 + 72), "reportServiceActiveShouldReport:", 0);
          goto LABEL_26;
        case 2:
          v26 = *(void **)(a1 + 72);
          v27 = 0;
          goto LABEL_25;
        case 3:
          objc_msgSend(*(id *)(a1 + 72), "reportFraudAlert");
          goto LABEL_26;
        case 4:
          v28 = *(void **)(a1 + 72);
          v29 = *(id *)(a1 + 40);
          v30 = v28;
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "proxyConfiguration"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "regionId"));
          objc_msgSend(v30, "reportUnsupportedRegion:", v32);
          goto LABEL_23;
        case 5:
          objc_msgSend(*(id *)(a1 + 72), "reportSystemIncompatibility");
          goto LABEL_26;
        case 6:
          v33 = *(void **)(a1 + 72);
          v29 = *(id *)(a1 + 40);
          v30 = v33;
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "proxyConfiguration"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "regionId"));
          objc_msgSend(v30, "reportSubscriberUnsupportedRegion:", v32);
LABEL_23:

          goto LABEL_26;
        case 7:
          v26 = *(void **)(a1 + 72);
          v27 = 2;
LABEL_25:
          objc_msgSend(v26, "reportServiceOutageWithType:outageReasonStats:", v27, 0);
LABEL_26:
          v34 = v4;
          reply = xpc_dictionary_create_reply(v34);
          remote_connection = xpc_dictionary_get_remote_connection(v34);
          v36 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

          if (reply && v36)
            xpc_connection_send_message(v36, reply);

          break;
        default:
          sub_10006C088(v4, 1004, CFSTR("Invalid status"));
          v24 = nplog_obj(v21, v22, v23);
          reply = objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(reply, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v38) = 134217984;
            *(_QWORD *)((char *)&v38 + 4) = int64;
            _os_log_error_impl((void *)&_mh_execute_header, reply, OS_LOG_TYPE_ERROR, "report service status for privacy proxy failed due to bad value: %lld", (uint8_t *)&v38, 0xCu);
          }
          break;
      }

    }
    else
    {
      v11 = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v11);
      v13 = v12;
      if (v12
        && (pid = xpc_connection_get_pid(v12),
            v38 = 0u,
            memset(v39, 0, sizeof(v39)),
            proc_pidinfo(pid, 13, 1uLL, &v38, 64) == 64))
      {
        v15 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v15, (const char *)v39, 0x10uLL);
      }
      else
      {
        v15 = 0;
      }

      v19 = nplog_obj(v16, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v37 = "";
        if (v15)
          v37 = v15;
        LODWORD(v38) = 136315138;
        *(_QWORD *)((char *)&v38 + 4) = v37;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "reporting service status for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v38, 0xCu);
      }

      if (v15)
        free(v15);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100057184(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t nsdata_from_xpc_object;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  xpc_connection_t v20;
  _xpc_connection_s *v21;
  _xpc_connection_s *v22;
  pid_t pid;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *reply;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  id v50;
  void *v51;
  id v52;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  __int128 v60;
  _OWORD v61[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v60) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "process proxy report network status", (uint8_t *)&v60, 2u);
      }

      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerPrivacyProxyNetworkStatus");
      v11 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      v12 = objc_msgSend(objc_alloc((Class)PrivacyProxyNetworkStatus), "initWithData:", v11);
      v13 = v12;
      if (!v12)
      {
        sub_10006C088(v4, 1004, CFSTR("Invalid status"));
        v33 = nplog_obj(v30, v31, v32);
        reply = objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(reply, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v60) = 0;
          v35 = "report service status for privacy proxy failed due to missing value";
          v36 = reply;
          v37 = 2;
LABEL_48:
          _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v35, (uint8_t *)&v60, v37);
          goto LABEL_44;
        }
        goto LABEL_44;
      }
      if (objc_msgSend(v12, "networkType") == 1)
      {
        v14 = objc_msgSend(v13, "networkStatus");
        if (v14 == (id)2)
        {
          v43 = *(id *)(a1 + 72);
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "networkName"));
          objc_msgSend(v43, "reportBlockedOnWiFiName:", v44);
        }
        else
        {
          if (v14 != (id)1)
          {
            if (!v14)
            {
              v15 = *(id *)(a1 + 72);
              v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "networkName"));
              objc_msgSend(v15, "reportDisabledOnWiFiName:", v16);

              v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
              v18 = v17;
              v19 = 1;
LABEL_29:
              objc_msgSend(v17, "wifiDisabled:", v19);
LABEL_39:

LABEL_40:
              v52 = v4;
              reply = xpc_dictionary_create_reply(v52);
              remote_connection = xpc_dictionary_get_remote_connection(v52);
              v54 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

              if (reply && v54)
                xpc_connection_send_message(v54, reply);

              goto LABEL_44;
            }
            sub_10006C088(v4, 1004, CFSTR("Invalid status"));
            v48 = nplog_obj(v45, v46, v47);
            reply = objc_claimAutoreleasedReturnValue(v48);
            if (os_log_type_enabled(reply, OS_LOG_TYPE_ERROR))
              goto LABEL_47;
            goto LABEL_44;
          }
          v43 = *(id *)(a1 + 72);
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "networkName"));
          objc_msgSend(v43, "reportActiveOnWiFiName:", v44);
        }

        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
        v18 = v17;
        v19 = 0;
        goto LABEL_29;
      }
      if (objc_msgSend(v13, "networkType") != 2)
        goto LABEL_40;
      v38 = objc_msgSend(v13, "networkStatus");
      if (v38 == (id)2)
      {
        v50 = *(id *)(a1 + 72);
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "networkName"));
        objc_msgSend(v50, "reportBlockedOnCellularName:", v51);
      }
      else
      {
        if (v38 != (id)1)
        {
          if (v38)
          {
            sub_10006C088(v4, 1004, CFSTR("Invalid status"));
            v58 = nplog_obj(v55, v56, v57);
            reply = objc_claimAutoreleasedReturnValue(v58);
            if (os_log_type_enabled(reply, OS_LOG_TYPE_ERROR))
            {
LABEL_47:
              v59 = objc_msgSend(v13, "networkStatus");
              LODWORD(v60) = 134217984;
              *(_QWORD *)((char *)&v60 + 4) = v59;
              v35 = "report service status for privacy proxy failed due to bad value: %lld";
              v36 = reply;
              v37 = 12;
              goto LABEL_48;
            }
LABEL_44:

            goto LABEL_45;
          }
          v39 = *(id *)(a1 + 72);
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "networkName"));
          objc_msgSend(v39, "reportDisabledOnCellularName:", v40);

          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
          v18 = v41;
          v42 = 1;
LABEL_38:
          objc_msgSend(v41, "cellularDisabled:", v42);
          goto LABEL_39;
        }
        v50 = *(id *)(a1 + 72);
        v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "networkName"));
        objc_msgSend(v50, "reportActiveOnCellularName:", v51);
      }

      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
      v18 = v41;
      v42 = 0;
      goto LABEL_38;
    }
    v20 = xpc_dictionary_get_remote_connection(v4);
    v21 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v20);
    v22 = v21;
    if (v21
      && (pid = xpc_connection_get_pid(v21),
          v60 = 0u,
          memset(v61, 0, sizeof(v61)),
          proc_pidinfo(pid, 13, 1uLL, &v60, 64) == 64))
    {
      v24 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
      strncpy(v24, (const char *)v61, 0x10uLL);
    }
    else
    {
      v24 = 0;
    }

    v28 = nplog_obj(v25, v26, v27);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v49 = "";
      if (v24)
        v49 = v24;
      LODWORD(v60) = 136315138;
      *(_QWORD *)((char *)&v60 + 4) = v49;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "reporting network status for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v60, 0xCu);
    }

    if (v24)
      free(v24);
    sub_10006C088(v4, 1001, CFSTR("Permission denied"));
  }
LABEL_45:

}

void sub_1000576C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  xpc_object_t reply;
  xpc_connection_t v12;
  _xpc_connection_s *v13;
  _xpc_connection_s *v14;
  pid_t pid;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "process proxy service status timeline request", (uint8_t *)&v26, 2u);
      }

      v10 = *(void **)(a1 + 72);
      if (v10)
      {
        reply = (xpc_object_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "serviceStatusTimeline"));
        sub_10006B6C0(v4, "NSPServerPrivacyProxyServiceStatusTimeline", reply);
      }
      else
      {
        v22 = v4;
        reply = xpc_dictionary_create_reply(v22);
        remote_connection = xpc_dictionary_get_remote_connection(v22);
        v24 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

        if (reply && v24)
          xpc_connection_send_message(v24, reply);

      }
    }
    else
    {
      v12 = xpc_dictionary_get_remote_connection(v4);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v12);
      v14 = v13;
      if (v13
        && (pid = xpc_connection_get_pid(v13),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v16 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v16, (const char *)v27, 0x10uLL);
      }
      else
      {
        v16 = 0;
      }

      v20 = nplog_obj(v17, v18, v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v16)
          v25 = v16;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "getting service status timelinefor privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v16)
        free(v16);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_1000578F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "process get app statuses request", (uint8_t *)&v26, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "anyAppEnabledDate"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "appStatuses"));
      reply = xpc_dictionary_create_reply(v4);
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      if (v14)
      {
        sub_10006C950(reply, "NSPServerPrivacyProxyAnyAppEnabledDate", (uint64_t)v10);
        sub_10006C950(reply, "NSPServerPrivacyProxyAppStatuses", (uint64_t)v11);
        xpc_connection_send_message(v14, reply);
      }

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "getting service status for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100057B40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSSet *v5;
  void *v6;
  uint64_t nsdata_from_xpc_object;
  void *v8;
  void *v9;
  xpc_connection_t v10;
  _xpc_connection_s *v11;
  _xpc_connection_s *v12;
  pid_t pid;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  unsigned int v31;
  void *v32;
  void *v33;
  void *v34;
  __CFString *v35;
  id v36;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v39;
  const char *v40;
  __int128 buffer;
  _OWORD v42[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(PrivacyProxyAppStatus), 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerPrivacyProxyAppStatus");
      v8 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      if (v8)
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v6, v8, 0));
      else
        v9 = 0;

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buffer) = 138412290;
        *(_QWORD *)((char *)&buffer + 4) = v9;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "process set app status request: %@", (uint8_t *)&buffer, 0xCu);
      }

      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleIdentifier"));
      if (v25)
      {

      }
      else
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "path"));

        if (!v26)
        {
          v35 = CFSTR("Invalid app info");
          goto LABEL_27;
        }
      }
      v27 = objc_msgSend(v9, "appStatus");
      if (v27 == (id)2 || objc_msgSend(v9, "appStatus") == (id)1)
      {
        v28 = *(id *)(a1 + 72);
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleIdentifier"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "path"));
        v31 = objc_msgSend(v28, "changePausedState:forApp:path:", v27 == (id)2, v29, v30);

        if (v31)
        {
          if ((sub_10006C224(a1) & 1) == 0)
          {
            if (v27 == (id)2)
            {
              v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
              v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
              v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "nextDateAfterDate:matchingUnit:value:options:", v33, 32, 0, 1024));

              objc_msgSend(*(id *)(a1 + 56), "setResetDate:", v34);
            }
            else
            {
              objc_msgSend(*(id *)(a1 + 56), "clearResetDate");
            }
          }
          sub_10006C838(a1);
        }
        v36 = v4;
        reply = xpc_dictionary_create_reply(v36);
        remote_connection = xpc_dictionary_get_remote_connection(v36);
        v39 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

        if (reply && v39)
          xpc_connection_send_message(v39, reply);

        goto LABEL_34;
      }
      v35 = CFSTR("Invalid app status");
LABEL_27:
      sub_10006C088(v4, 1004, v35);
LABEL_34:

      goto LABEL_35;
    }
    v10 = xpc_dictionary_get_remote_connection(v4);
    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v10);
    v12 = v11;
    if (v11
      && (pid = xpc_connection_get_pid(v11),
          buffer = 0u,
          memset(v42, 0, sizeof(v42)),
          proc_pidinfo(pid, 13, 1uLL, &buffer, 64) == 64))
    {
      v14 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
      strncpy(v14, (const char *)v42, 0x10uLL);
    }
    else
    {
      v14 = 0;
    }

    v18 = nplog_obj(v15, v16, v17);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v40 = "";
      if (v14)
        v40 = v14;
      LODWORD(buffer) = 136315138;
      *(_QWORD *)((char *)&buffer + 4) = v40;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "getting service status for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&buffer, 0xCu);
    }

    if (v14)
      free(v14);
    sub_10006C088(v4, 1001, CFSTR("Permission denied"));
  }
LABEL_35:

}

void sub_100057F34(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char *string;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  xpc_connection_t v10;
  _xpc_connection_s *v11;
  _xpc_connection_s *v12;
  pid_t pid;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t uint64;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v49;
  uint64_t v50;
  NSObject *v51;
  const char *v52;
  __int128 v53;
  _OWORD v54[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      string = (char *)xpc_dictionary_get_string(v4, "NSPServerSigningIdentifier");
      v8 = string;
      v9 = 1;
      if (string)
      {
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
        v8 = string;
        if (string)
        {
          string = (char *)objc_msgSend(string, "isEqualToString:", CFSTR("com.apple.Preferences"));
          if ((string & 1) != 0
            || (string = (char *)objc_msgSend(v8, "hasPrefix:", CFSTR("com.apple.systempreferences")), (_DWORD)string))
          {
            v9 = 0;
          }
        }
      }
      *(_BYTE *)(a1 + 24) = v9;
      v15 = nplog_obj(string, v6, v7);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v53) = 138412290;
        *(_QWORD *)((char *)&v53 + 4) = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Handling set privacy proxy user tier from %@", (uint8_t *)&v53, 0xCu);
      }

      uint64 = xpc_dictionary_get_uint64(v4, "NSPServerPrivacyProxyUserTier");
      v20 = uint64;
      if (uint64 - 3 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v29 = xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxySetUntilTomorrow");
        if (v20 == 1 || !v29)
        {
          if (v29)
          {
            v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
            v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
            v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "nextDateAfterDate:matchingUnit:value:options:", v35, 32, 0, 1024));

          }
          else
          {
            v36 = 0;
          }
          v37 = *(void **)(a1 + 56);
          v38 = *(id *)(a1 + 72);
          v39 = v37;
          v40 = objc_msgSend(v38, "hasPausedApps") ^ 1;
          if (*(_BYTE *)(a1 + 24))
            v41 = 3;
          else
            v41 = 1;
          v42 = objc_msgSend(v39, "setUserTier:resetDate:clearResetDate:changeSource:", v20, v36, v40, v41);

          if ((v42 & 1) != 0)
          {
            v46 = v4;
            reply = xpc_dictionary_create_reply(v46);
            remote_connection = xpc_dictionary_get_remote_connection(v46);
            v49 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

            if (reply && v49)
              xpc_connection_send_message(v49, reply);

          }
          else
          {
            v50 = nplog_obj(v43, v44, v45);
            v51 = objc_claimAutoreleasedReturnValue(v50);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v53) = 134217984;
              *(_QWORD *)((char *)&v53 + 4) = v20;
              _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "failed to set user tier %lld", (uint8_t *)&v53, 0xCu);
            }

            sub_10006C088(v4, 1003, CFSTR("failed to set user tier"));
          }

          goto LABEL_44;
        }
        v32 = nplog_obj(v29, v30, v31);
        v33 = objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v53) = 134217984;
          *(_QWORD *)((char *)&v53 + 4) = 2;
          _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "user tier %lld cannot be set temporarily", (uint8_t *)&v53, 0xCu);
        }

        v23 = CFSTR("user tier cannot be set temporarily");
      }
      else
      {
        v21 = nplog_obj(uint64, v18, v19);
        v22 = objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v53) = 134217984;
          *(_QWORD *)((char *)&v53 + 4) = v20;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "invalid user tier type %lld", (uint8_t *)&v53, 0xCu);
        }

        v23 = CFSTR("invalid user tier");
      }
      sub_10006C088(v4, 1003, v23);
LABEL_44:

      goto LABEL_45;
    }
    v10 = xpc_dictionary_get_remote_connection(v4);
    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v10);
    v12 = v11;
    if (v11
      && (pid = xpc_connection_get_pid(v11),
          v53 = 0u,
          memset(v54, 0, sizeof(v54)),
          proc_pidinfo(pid, 13, 1uLL, &v53, 64) == 64))
    {
      v14 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
      strncpy(v14, (const char *)v54, 0x10uLL);
    }
    else
    {
      v14 = 0;
    }

    v27 = nplog_obj(v24, v25, v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v52 = "";
      if (v14)
        v52 = v14;
      LODWORD(v53) = 136315138;
      *(_QWORD *)((char *)&v53 + 4) = v52;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "setting user tier for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v53, 0xCu);
    }

    if (v14)
      free(v14);
    sub_10006C088(v4, 1001, CFSTR("Permission denied"));
  }
LABEL_45:

}

void sub_1000583EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t uint64;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set privacy proxy traffic state", (uint8_t *)&v26, 2u);
      }

      uint64 = xpc_dictionary_get_uint64(v4, "NSPServerPrivacyProxyTrafficMask");
      objc_msgSend(*(id *)(a1 + 56), "setProxyTrafficState:proxyTraffic:", uint64, xpc_dictionary_get_uint64(v4, "NSPServerPrivacyProxyTraffic"));
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
        xpc_connection_send_message(v14, reply);

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "setting privacy proxy traffic state failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100058620(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  _xpc_connection_s *v14;
  pid_t pid;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  __int128 v23;
  _OWORD v24[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v23) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing privacy proxy policy get request", (uint8_t *)&v23, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "currentPolicy"));
      if (v11)
        sub_1000029A8(v4, "NSPServerPrivacyProxyPolicy", v11);
      else
        sub_10006C088(v4, 1005, CFSTR("nil privacy proxy policy"));

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v14 = v13;
      if (v13
        && (pid = xpc_connection_get_pid(v13),
            v23 = 0u,
            memset(v24, 0, sizeof(v24)),
            proc_pidinfo(pid, 13, 1uLL, &v23, 64) == 64))
      {
        v16 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v16, (const char *)v24, 0x10uLL);
      }
      else
      {
        v16 = 0;
      }

      v20 = nplog_obj(v17, v18, v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = "";
        if (v16)
          v22 = v16;
        LODWORD(v23) = 136315138;
        *(_QWORD *)((char *)&v23 + 4) = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "getting privacy proxy policy failed due to missing entitlement for %s", (uint8_t *)&v23, 0xCu);
      }

      if (v16)
        free(v16);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100058838(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t nsdata_from_xpc_object;
  void *v11;
  void *v12;
  id v13;
  unsigned __int8 v14;
  id v15;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v18;
  xpc_connection_t v19;
  _xpc_connection_s *v20;
  _xpc_connection_s *v21;
  pid_t pid;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  __int128 buffer;
  _OWORD v31[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buffer) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing privacy proxy policy set request", (uint8_t *)&buffer, 2u);
      }

      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerPrivacyProxyPolicy");
      v11 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
      v13 = objc_msgSend(objc_alloc((Class)NSPPrivacyProxyPolicy), "initWithData:", v11);
      v14 = objc_msgSend(v12, "set:flowDivertHandle:inProcessFlowDivert:ingressProxyURL:ingressFallbackProxyURL:exceptionBundleIDs:exceptionProcessPaths:", v13, 0, 0, 0, 0, 0, 0);
      v15 = v4;
      reply = xpc_dictionary_create_reply(v15);
      remote_connection = xpc_dictionary_get_remote_connection(v15);
      v18 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v18)
      {
        xpc_dictionary_set_BOOL(reply, "NSPServerCommandResult", v14);
        xpc_connection_send_message(v18, reply);
      }

    }
    else
    {
      v19 = xpc_dictionary_get_remote_connection(v4);
      v20 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v19);
      v21 = v20;
      if (v20
        && (pid = xpc_connection_get_pid(v20),
            buffer = 0u,
            memset(v31, 0, sizeof(v31)),
            proc_pidinfo(pid, 13, 1uLL, &buffer, 64) == 64))
      {
        v23 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v23, (const char *)v31, 0x10uLL);
      }
      else
      {
        v23 = 0;
      }

      v27 = nplog_obj(v24, v25, v26);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v29 = "";
        if (v23)
          v29 = v23;
        LODWORD(buffer) = 136315138;
        *(_QWORD *)((char *)&buffer + 4) = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "setting privacy proxy policy failed due to missing entitlement for %s", (uint8_t *)&buffer, 0xCu);
      }

      if (v23)
        free(v23);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100058AD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing privacy proxy policy removal request", (uint8_t *)&v26, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
      objc_msgSend(v10, "remove:", 0);

      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
      {
        xpc_dictionary_set_BOOL(reply, "NSPServerCommandResult", 1);
        xpc_connection_send_message(v14, reply);
      }

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "removing privacy proxy policy failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100058D08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  _xpc_connection_s *v15;
  pid_t pid;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  __int128 v24;
  _OWORD v25[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v24) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing privacy proxy policy merge request", (uint8_t *)&v24, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mergeProxyTrafficStateWithCurrentPolicy"));
      v11 = v10;
      if (v10)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dictionaryRepresentation"));
        sub_1000029A8(v4, "NSPServerPrivacyProxyPolicy", v12);

      }
      else
      {
        sub_10006C088(v4, 1005, CFSTR("failed to merge policy with traffic state"));
      }

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v15 = v14;
      if (v14
        && (pid = xpc_connection_get_pid(v14),
            v24 = 0u,
            memset(v25, 0, sizeof(v25)),
            proc_pidinfo(pid, 13, 1uLL, &v24, 64) == 64))
      {
        v17 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v17, (const char *)v25, 0x10uLL);
      }
      else
      {
        v17 = 0;
      }

      v21 = nplog_obj(v18, v19, v20);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = "";
        if (v17)
          v23 = v17;
        LODWORD(v24) = 136315138;
        *(_QWORD *)((char *)&v24 + 4) = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "getting privacy proxy policy failed due to missing entitlement for %s", (uint8_t *)&v24, 0xCu);
      }

      if (v17)
        free(v17);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100058F20(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  uint8_t v15[16];

  v3 = a2;
  v6 = v3;
  if (a1)
  {
    v7 = nplog_obj(v3, v4, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v15 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "processing location authorization request", v15, 2u);
    }

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyLocationMonitor sharedMonitor](NSPPrivacyProxyLocationMonitor, "sharedMonitor"));
    v10 = objc_msgSend(v9, "isAuthorized");

    v11 = v6;
    reply = xpc_dictionary_create_reply(v11);
    remote_connection = xpc_dictionary_get_remote_connection(v11);
    v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

    if (reply && v14)
    {
      xpc_dictionary_set_BOOL(reply, "NSPServerCommandResult", v10);
      xpc_connection_send_message(v14, reply);
    }

  }
}

void sub_100059020(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  void *v8;
  uint8_t v9[16];

  if (a1)
  {
    v2 = a2;
    v5 = nplog_obj(v2, v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v9 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "processing request to set location monitor interval", v9, 2u);
    }

    v7 = xpc_dictionary_get_double(v2, "NSPServerLocationMonitorInterval");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyLocationMonitor sharedMonitor](NSPPrivacyProxyLocationMonitor, "sharedMonitor"));
    objc_msgSend(v8, "setMonitorTimeInterval:", v7 * 60.0);

  }
}

void sub_1000590DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint8_t v6[16];

  if (a1)
  {
    v3 = nplog_obj(a1, a2, a3);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v6 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "processing request to start location monitor", v6, 2u);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyLocationMonitor sharedMonitor](NSPPrivacyProxyLocationMonitor, "sharedMonitor"));
    objc_msgSend(v5, "start");

  }
}

void sub_100059164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint8_t v6[16];

  if (a1)
  {
    v3 = nplog_obj(a1, a2, a3);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v6 = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "processing request to stop location monitor", v6, 2u);
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyLocationMonitor sharedMonitor](NSPPrivacyProxyLocationMonitor, "sharedMonitor"));
    objc_msgSend(v5, "stop");

  }
}

void sub_1000591EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v17;
  _xpc_connection_s *v18;
  pid_t pid;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  __int128 v27;
  _OWORD v28[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v27) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "process proxy info request", (uint8_t *)&v27, 2u);
      }

      v10 = objc_alloc_init((Class)PrivacyProxyInfo);
      v11 = *(void **)(a1 + 56);
      if (v11)
        objc_msgSend(v11, "copyProxyInfo:", v10);
      v12 = *(void **)(a1 + 64);
      if (v12)
        objc_msgSend(v12, "copyProxyInfo:", v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyTokenManager sharedTokenManager](NSPPrivacyTokenManager, "sharedTokenManager"));

      if (v13)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyTokenManager sharedTokenManager](NSPPrivacyTokenManager, "sharedTokenManager"));
        objc_msgSend(v14, "copyTokenInfo:", v10);

      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "serialize"));
      sub_1000029A8(v4, "NSPServerPrivacyProxyInfo", v15);

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v18 = v17;
      if (v17
        && (pid = xpc_connection_get_pid(v17),
            v27 = 0u,
            memset(v28, 0, sizeof(v28)),
            proc_pidinfo(pid, 13, 1uLL, &v27, 64) == 64))
      {
        v20 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v20, (const char *)v28, 0x10uLL);
      }
      else
      {
        v20 = 0;
      }

      v24 = nplog_obj(v21, v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = "";
        if (v20)
          v26 = v20;
        LODWORD(v27) = 136315138;
        *(_QWORD *)((char *)&v27 + 4) = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "getting info for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v27, 0xCu);
      }

      if (v20)
        free(v20);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100059440(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *string;
  char *v11;
  uint64_t nsdata_from_xpc_object;
  void *v13;
  id v14;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v17;
  xpc_connection_t v18;
  _xpc_connection_s *v19;
  _xpc_connection_s *v20;
  pid_t pid;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  __int128 v29;
  _OWORD v30[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v29) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to override the ingress proxy", (uint8_t *)&v29, 2u);
      }

      string = (char *)xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyURL");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      if (!objc_msgSend(string, "length"))
      {

        string = 0;
      }
      v11 = (char *)xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyFallbackURL");
      if (v11)
        v11 = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v11);
      if (!objc_msgSend(v11, "length"))
      {

        v11 = 0;
      }
      nsdata_from_xpc_object = get_nsdata_from_xpc_object(v4, "NSPServerPrivacyProxyKey");
      v13 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
      if (!objc_msgSend(v13, "length"))
      {

        v13 = 0;
      }
      objc_msgSend(*(id *)(a1 + 64), "overrideIngressProxy:fallbackProxy:key:", string, v11, v13);
      v14 = v4;
      reply = xpc_dictionary_create_reply(v14);
      remote_connection = xpc_dictionary_get_remote_connection(v14);
      v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v17)
        xpc_connection_send_message(v17, reply);

    }
    else
    {
      v18 = xpc_dictionary_get_remote_connection(v4);
      v19 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v18);
      v20 = v19;
      if (v19
        && (pid = xpc_connection_get_pid(v19),
            v29 = 0u,
            memset(v30, 0, sizeof(v30)),
            proc_pidinfo(pid, 13, 1uLL, &v29, 64) == 64))
      {
        v22 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v22, (const char *)v30, 0x10uLL);
      }
      else
      {
        v22 = 0;
      }

      v26 = nplog_obj(v23, v24, v25);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = "";
        if (v22)
          v28 = v22;
        LODWORD(v29) = 136315138;
        *(_QWORD *)((char *)&v29 + 4) = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "overriding preferred proxy failed due to missing entitlement for %s", (uint8_t *)&v29, 0xCu);
      }

      if (v22)
        free(v22);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005971C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  xpc_connection_t v22;
  _xpc_connection_s *v23;
  _xpc_connection_s *v24;
  pid_t pid;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  __int128 v33;
  _OWORD v34[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v33) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to get the overridden ingress proxy", (uint8_t *)&v33, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "overrideIngressProxy"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "overrideFallbackIngressProxy"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "overrideIngressProxyKey"));
      reply = xpc_dictionary_create_reply(v4);
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      if (v15)
      {
        v16 = v10;
        if (v16)
        {
          v17 = reply;
          xpc_dictionary_set_string(v17, "NSPServerPrivacyProxyURL", (const char *)objc_msgSend(v16, "UTF8String"));

        }
        v18 = v11;
        if (v18)
        {
          v19 = reply;
          xpc_dictionary_set_string(v19, "NSPServerPrivacyProxyFallbackURL", (const char *)objc_msgSend(v18, "UTF8String"));

        }
        if (v12)
        {
          v20 = reply;
          v21 = (void *)_CFXPCCreateXPCObjectFromCFObject(v12);
          xpc_dictionary_set_value(v20, "NSPServerPrivacyProxyKey", v21);

        }
        xpc_connection_send_message(v15, reply);
      }

    }
    else
    {
      v22 = xpc_dictionary_get_remote_connection(v4);
      v23 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v22);
      v24 = v23;
      if (v23
        && (pid = xpc_connection_get_pid(v23),
            v33 = 0u,
            memset(v34, 0, sizeof(v34)),
            proc_pidinfo(pid, 13, 1uLL, &v33, 64) == 64))
      {
        v26 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v26, (const char *)v34, 0x10uLL);
      }
      else
      {
        v26 = 0;
      }

      v30 = nplog_obj(v27, v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = "";
        if (v26)
          v32 = v26;
        LODWORD(v33) = 136315138;
        *(_QWORD *)((char *)&v33 + 4) = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "get preferred proxy failed due to missing entitlement for %s", (uint8_t *)&v33, 0xCu);
      }

      if (v26)
        free(v26);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100059A00(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *string;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to override the preferred proxy", (uint8_t *)&v26, 2u);
      }

      string = (char *)xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyURL");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      if (!objc_msgSend(string, "length"))
      {

        string = 0;
      }
      objc_msgSend(*(id *)(a1 + 64), "overridePreferredProxy:", string);
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
        xpc_connection_send_message(v14, reply);

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "overriding preferred proxy failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100059C5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  pid_t pid;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  __int128 v22;
  _OWORD v23[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to get the preferred proxy", (uint8_t *)&v22, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "overridePreferredProxy"));
      sub_10006B750(v4, "NSPServerPrivacyProxyURL", v10);

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v13 = v12;
      if (v12
        && (pid = xpc_connection_get_pid(v12),
            v22 = 0u,
            memset(v23, 0, sizeof(v23)),
            proc_pidinfo(pid, 13, 1uLL, &v22, 64) == 64))
      {
        v15 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v15, (const char *)v23, 0x10uLL);
      }
      else
      {
        v15 = 0;
      }

      v19 = nplog_obj(v16, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = "";
        if (v15)
          v21 = v15;
        LODWORD(v22) = 136315138;
        *(_QWORD *)((char *)&v22 + 4) = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "get preferred proxy failed due to missing entitlement for %s", (uint8_t *)&v22, 0xCu);
      }

      if (v15)
        free(v15);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_100059E44(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *string;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to override the preferred resolver", (uint8_t *)&v26, 2u);
      }

      string = (char *)xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyURL");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      if (!objc_msgSend(string, "length"))
      {

        string = 0;
      }
      sub_10004DAA0(*(id **)(a1 + 200), string);
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
        xpc_connection_send_message(v14, reply);

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "overriding preferred resolver failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005A0A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  _xpc_connection_s *v14;
  pid_t pid;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  __int128 v23;
  _OWORD v24[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v23) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to get the preferred resolver", (uint8_t *)&v23, 2u);
      }

      v10 = *(_QWORD **)(a1 + 200);
      if (v10)
        v10 = (_QWORD *)v10[2];
      v11 = v10;
      sub_10006B750(v4, "NSPServerPrivacyProxyURL", v11);

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v14 = v13;
      if (v13
        && (pid = xpc_connection_get_pid(v13),
            v23 = 0u,
            memset(v24, 0, sizeof(v24)),
            proc_pidinfo(pid, 13, 1uLL, &v23, 64) == 64))
      {
        v16 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v16, (const char *)v24, 0x10uLL);
      }
      else
      {
        v16 = 0;
      }

      v20 = nplog_obj(v17, v18, v19);
      v21 = objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = "";
        if (v16)
          v22 = v16;
        LODWORD(v23) = 136315138;
        *(_QWORD *)((char *)&v23 + 4) = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "get preferred resolver failed due to missing entitlement for %s", (uint8_t *)&v23, 0xCu);
      }

      if (v16)
        free(v16);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005A28C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  xpc_connection_t v14;
  _xpc_connection_s *v15;
  _xpc_connection_s *v16;
  pid_t pid;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v25) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set Geohash sharing preference", (uint8_t *)&v25, 2u);
      }

      objc_msgSend(*(id *)(a1 + 56), "setGeohashSharingPreference:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyGeohashSharingEnabled"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

    }
    else
    {
      v14 = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v15
        && (pid = xpc_connection_get_pid(v15),
            v25 = 0u,
            memset(v26, 0, sizeof(v26)),
            proc_pidinfo(pid, 13, 1uLL, &v25, 64) == 64))
      {
        v18 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v18, (const char *)v26, 0x10uLL);
      }
      else
      {
        v18 = 0;
      }

      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = "";
        if (v18)
          v24 = v18;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "reporting service status for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v25, 0xCu);
      }

      if (v18)
        free(v18);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005A4A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unsigned __int8 v10;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling get Geohash sharing preference", (uint8_t *)&v26, 2u);
      }

      v10 = objc_msgSend(*(id *)(a1 + 56), "getGeohashSharingPreference");
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
      {
        xpc_dictionary_set_BOOL(reply, "NSPServerPrivacyProxyGeohashSharingEnabled", v10);
        xpc_connection_send_message(v14, reply);
      }

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "getting service status for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005A6D0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *string;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  xpc_connection_t v9;
  _xpc_connection_s *v10;
  _xpc_connection_s *v11;
  pid_t pid;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      string = xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyGeohash");
      if (string)
      {
        string = (const char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", string));
        v8 = (char *)string;
      }
      else
      {
        v8 = 0;
      }
      v19 = nplog_obj(string, v6, v7);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v26) = 138412290;
        *(_QWORD *)((char *)&v26 + 4) = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Handling set Geohash override: %@", (uint8_t *)&v26, 0xCu);
      }

      objc_msgSend(*(id *)(a1 + 56), "setGeohashOverride:", v8);
      v21 = v4;
      reply = xpc_dictionary_create_reply(v21);
      remote_connection = xpc_dictionary_get_remote_connection(v21);
      v24 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v24)
        xpc_connection_send_message(v24, reply);

    }
    else
    {
      v9 = xpc_dictionary_get_remote_connection(v4);
      v10 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v9);
      v11 = v10;
      if (v10
        && (pid = xpc_connection_get_pid(v10),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v13 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v13, (const char *)v27, 0x10uLL);
      }
      else
      {
        v13 = 0;
      }

      v17 = nplog_obj(v14, v15, v16);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v13)
          v25 = v13;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "overriding geohash failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v13)
        free(v13);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005A928(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  pid_t pid;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  __int128 v22;
  _OWORD v23[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling get privacy proxy effective user tier", (uint8_t *)&v22, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 56), "effectiveUserTier")));
      sub_100002440(v4, "NSPServerPrivacyProxyEffectiveUserTier", v10);

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v13 = v12;
      if (v12
        && (pid = xpc_connection_get_pid(v12),
            v22 = 0u,
            memset(v23, 0, sizeof(v23)),
            proc_pidinfo(pid, 13, 1uLL, &v22, 64) == 64))
      {
        v15 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v15, (const char *)v23, 0x10uLL);
      }
      else
      {
        v15 = 0;
      }

      v19 = nplog_obj(v16, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = "";
        if (v15)
          v21 = v15;
        LODWORD(v22) = 136315138;
        *(_QWORD *)((char *)&v22 + 4) = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "getting effective user tier for privacy proxy failed due to missing entitlement for %s", (uint8_t *)&v22, 0xCu);
      }

      if (v15)
        free(v15);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005AB24(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int64_t int64;
  int64_t v11;
  char *string;
  NSPOutageReasonStats *v13;
  NSPOutageReasonStats *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v31;
  const char *v32;
  __int128 buffer;
  _OWORD v34[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buffer) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to send RTC report", (uint8_t *)&buffer, 2u);
      }

      int64 = xpc_dictionary_get_int64(v4, "NSPServerPrivacyProxyRTCReportType");
      v11 = xpc_dictionary_get_int64(v4, "NSPServerPrivacyProxyRTCReportErrorCode");
      string = (char *)xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyRTCReportURL");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      if (int64 == 1005)
      {
        v13 = objc_alloc_init(NSPOutageReasonStats);
        v14 = v13;
        switch(v11)
        {
          case 4001:
            -[NSPOutageReasonStats setOutageReasonType:](v13, "setOutageReasonType:", CFSTR("Token"));
            -[NSPOutageReasonStats setOutageReasonSubType:](v14, "setOutageReasonSubType:", CFSTR("TokenFetchFailure"));
            -[NSPOutageReasonStats setTokenProxy:](v14, "setTokenProxy:", CFSTR("https://dummy-api.foobar.com/v1/fetchAuthTokens"));
            break;
          case 4002:
            -[NSPOutageReasonStats setOutageReasonType:](v13, "setOutageReasonType:", CFSTR("Captive"));
            -[NSPOutageReasonStats setOutageReasonSubType:](v14, "setOutageReasonSubType:", CFSTR("CaptiveProbeRedirected"));
            break;
          case 4003:
            -[NSPOutageReasonStats setOutageReasonType:](v13, "setOutageReasonType:", CFSTR("Proxy"));
            -[NSPOutageReasonStats setOutageReasonSubType:](v14, "setOutageReasonSubType:", CFSTR("ProxyConnectionTimeout"));
            -[NSPOutageReasonStats setPrimaryIngressProxy:](v14, "setPrimaryIngressProxy:", CFSTR("https://dummy-canary.foobar.com:443"));
            -[NSPOutageReasonStats setPrimaryEgressProxy:](v14, "setPrimaryEgressProxy:", CFSTR("https://dummy.exp.vendorA-masque.net:2495"));
            -[NSPOutageReasonStats setFallbackIngressProxy:](v14, "setFallbackIngressProxy:", CFSTR("https://dummy-h2.foobar.com:443"));
            -[NSPOutageReasonStats setFallbackEgressProxy:](v14, "setFallbackEgressProxy:", CFSTR("https://dummy.vendorB.com:443"));
            break;
          case 4004:
            -[NSPOutageReasonStats setOutageReasonType:](v13, "setOutageReasonType:", CFSTR("DNS"));
            -[NSPOutageReasonStats setOutageReasonSubType:](v14, "setOutageReasonSubType:", CFSTR("ODoHAuthFailure"));
            -[NSPOutageReasonStats setOdohProxy:](v14, "setOdohProxy:", CFSTR("https://odoh.vendorA-dns.com/dns-query"));
            break;
          default:
            break;
        }
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userTier"));
        v26 = objc_msgSend(v25, "intValue");
        if (v26 >= 3)
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v26));
        else
          v27 = *(&off_1000F65C0 + (int)v26);
        -[NSPOutageReasonStats setTierType:](v14, "setTierType:", v27);

        objc_msgSend(*(id *)(a1 + 64), "sendRTCReportForServiceOutage:", v14);
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 64), "sendRTCReportWithFailureType:errorCode:url:ingressProxy:egressProxy:", int64, v11, string, 0, 0);
      }
      v28 = v4;
      reply = xpc_dictionary_create_reply(v28);
      remote_connection = xpc_dictionary_get_remote_connection(v28);
      v31 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v31)
        xpc_connection_send_message(v31, reply);

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            buffer = 0u,
            memset(v34, 0, sizeof(v34)),
            proc_pidinfo(pid, 13, 1uLL, &buffer, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v34, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v32 = "";
        if (v19)
          v32 = v19;
        LODWORD(buffer) = 136315138;
        *(_QWORD *)((char *)&buffer + 4) = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to send RTC report due to missing entitlement for %s", (uint8_t *)&buffer, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005AF44(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  xpc_connection_t v14;
  _xpc_connection_s *v15;
  _xpc_connection_s *v16;
  pid_t pid;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v25) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to force fallback", (uint8_t *)&v25, 2u);
      }

      objc_msgSend(*(id *)(a1 + 64), "forceFallback:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyForceFallback"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

    }
    else
    {
      v14 = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v15
        && (pid = xpc_connection_get_pid(v15),
            v25 = 0u,
            memset(v26, 0, sizeof(v26)),
            proc_pidinfo(pid, 13, 1uLL, &v25, 64) == 64))
      {
        v18 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v18, (const char *)v26, 0x10uLL);
      }
      else
      {
        v18 = 0;
      }

      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = "";
        if (v18)
          v24 = v18;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "failed to force fallback due to missing entitlement for %s", (uint8_t *)&v25, 0xCu);
      }

      if (v18)
        free(v18);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005B160(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unsigned __int8 v10;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to get force fallback", (uint8_t *)&v26, 2u);
      }

      v10 = objc_msgSend(*(id *)(a1 + 64), "forceFallback");
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
      {
        xpc_dictionary_set_BOOL(reply, "NSPServerPrivacyProxyForceFallback", v10);
        xpc_connection_send_message(v14, reply);
      }

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to get force fallback due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005B388(id *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t nsdata_from_xpc_object;
  uint64_t v6;
  const char *string;
  unint64_t v8;
  const char *v9;
  void *v10;
  xpc_connection_t v11;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v26;
  _xpc_connection_s *v27;
  pid_t pid;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  _BOOL4 v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  xpc_object_t value;
  void *v43;
  size_t type;
  uint64_t v45;
  uint64_t v46;
  int v47;
  id *v48;
  xpc_connection_t v49;
  _xpc_connection_s *v50;
  _xpc_connection_s *v51;
  pid_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  const char *v64;
  id v65;
  void *v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  id v72;
  uint64_t nsdictionary_from_xpc_object;
  void *v74;
  uint64_t v75;
  NSObject *v76;
  _BOOL4 v77;
  id v78;
  id v79;
  uint64_t v80;
  NSObject *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  char v86;
  id v87;
  int v88;
  void *v89;
  _QWORD v90[4];
  id v91;
  id v92;
  id v93;
  id v94;
  id *v95;
  id v96;
  id v97;
  id *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t *v102;
  id *v103;
  uint64_t *v104;
  char v105;
  char v106;
  char v107;
  _OWORD buf[2];
  _QWORD v109[9];
  _QWORD applier[12];
  _QWORD v111[5];
  id v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t);
  void (*v117)(uint64_t);
  id v118;
  _QWORD v119[5];
  id v120;
  uint64_t v121;
  id *v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t);
  void (*v125)(uint64_t);
  id v126;
  id v127;
  id *v128;
  uint64_t v129;
  uint64_t (*v130)(uint64_t, uint64_t);
  void (*v131)(uint64_t);
  id v132;
  id v133[5];
  id v134;
  _QWORD buffer[6];
  __int128 v136;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    nsdata_from_xpc_object = get_nsdata_from_xpc_object(v3, "NSPServerEffectiveAuditToken");
    v6 = objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
    string = xpc_dictionary_get_string(v4, "NSPServerSigningIdentifier");
    if (string)
      v8 = (unint64_t)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
    else
      v8 = 0;
    v89 = (void *)v8;
    if (v6 | v8 && (sub_10000301C(v4, CFSTR("com.apple.private.network.socket-delegate")) & 1) == 0)
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v26 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v27 = v26;
      if (v26
        && (pid = xpc_connection_get_pid(v26),
            v136 = 0u,
            memset(buffer, 0, sizeof(buffer)),
            proc_pidinfo(pid, 13, 1uLL, buffer, 64) == 64))
      {
        v29 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v29, (const char *)&buffer[2], 0x10uLL);
      }
      else
      {
        v29 = 0;
      }

      v57 = nplog_obj(v54, v55, v56);
      v58 = objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        v85 = "";
        if (v29)
          v85 = v29;
        LODWORD(buffer[0]) = 136315138;
        *(_QWORD *)((char *)buffer + 4) = v85;
        _os_log_error_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "failed to fetch private access token due to missing delegation entitlement for %s", (uint8_t *)buffer, 0xCu);
      }

      if (v29)
        free(v29);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
      goto LABEL_83;
    }
    if (xpc_dictionary_get_BOOL(v4, "NSPServerTokenSystemClient"))
      v86 = sub_10000301C(v4, CFSTR("com.apple.private.network.system-token-fetch"));
    else
      v86 = 0;
    v9 = xpc_dictionary_get_string(v4, "NSPServerPrivateAccessTokenOriginName");
    if (v9)
      v87 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v9);
    else
      v87 = 0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "privateAccessTokensAllowTools"));
    if (objc_msgSend(v10, "BOOLValue"))
      v88 = os_variant_allows_internal_security_policies("com.apple.networkserviceproxy");
    else
      v88 = 0;

    v11 = xpc_dictionary_get_remote_connection(v4);
    v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v11);
    v13 = v12;
    if (v12)
      v14 = xpc_connection_get_pid(v12);
    else
      v14 = 0;

    v15 = (id)v8;
    v18 = (unint64_t)v15;
    LOBYTE(v121) = 0;
    LOBYTE(v119[0]) = 0;
    LOBYTE(v113) = 0;
    if (v15)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessPredicate predicateMatchingBundleIdentifier:](RBSProcessPredicate, "predicateMatchingBundleIdentifier:", v15));
      v133[0] = 0;
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessHandle handleForPredicate:error:](RBSProcessHandle, "handleForPredicate:error:", v19, v133));
      v21 = v133[0];

      sub_10006CA94(v20, &v121, v119, &v113);
      if ((_DWORD)v14)
      {
LABEL_21:
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", v14));
        if (v22)
        {
          v127 = 0;
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[RBSProcessHandle handleForIdentifier:error:](RBSProcessHandle, "handleForIdentifier:error:", v22, &v127));
          v24 = v127;

          sub_10006CA94(v23, &v121, v119, &v113);
          v21 = v24;
        }
        else
        {
          v23 = v20;
        }

LABEL_30:
        v30 = nplog_obj(v15, v16, v17);
        v31 = objc_claimAutoreleasedReturnValue(v30);
        v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG);
        v33 = v121;
        v34 = LOBYTE(v119[0]);
        if (v32)
        {
          v82 = "";
          LODWORD(buffer[0]) = 138413314;
          if ((_BYTE)v121)
            v83 = "";
          else
            v83 = "not ";
          *(_QWORD *)((char *)buffer + 4) = v18;
          WORD2(buffer[1]) = 1024;
          if (LOBYTE(v119[0]))
            v84 = "";
          else
            v84 = "not ";
          *(_DWORD *)((char *)&buffer[1] + 6) = v14;
          if (!(_BYTE)v113)
            v82 = "not ";
          WORD1(buffer[2]) = 2080;
          *(_QWORD *)((char *)&buffer[2] + 4) = v83;
          WORD2(buffer[3]) = 2080;
          *(_QWORD *)((char *)&buffer[3] + 6) = v84;
          HIWORD(buffer[4]) = 2080;
          buffer[5] = v82;
          _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "%@ (%u) is %sapplication, is %srunning, is %sforeground", (uint8_t *)buffer, 0x30u);
        }

        v35 = 0;
        if (v33 && v34)
          v35 = (_BYTE)v113 != 0;
        LOBYTE(buffer[0]) = v35;

        v36 = LOBYTE(buffer[0]);
        if (((v36 | v88) & 1) == 0)
        {
          v37 = objc_msgSend((id)v18, "isEqualToString:", CFSTR("com.apple.DPSubmissionService"));
          if ((v37 & 1) == 0 && (v86 & 1) == 0)
          {
            v49 = xpc_dictionary_get_remote_connection(v4);
            v50 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v49);
            v51 = v50;
            if (v50
              && (v52 = xpc_connection_get_pid(v50),
                  v136 = 0u,
                  memset(buffer, 0, sizeof(buffer)),
                  proc_pidinfo(v52, 13, 1uLL, buffer, 64) == 64))
            {
              v53 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
              strncpy(v53, (const char *)&buffer[2], 0x10uLL);
            }
            else
            {
              v53 = 0;
            }

            v62 = nplog_obj(v59, v60, v61);
            v63 = objc_claimAutoreleasedReturnValue(v62);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
            {
              v64 = "";
              if (v53)
                v64 = v53;
              LODWORD(buffer[0]) = 136315138;
              *(_QWORD *)((char *)buffer + 4) = v64;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "Cannot fetch private access token, %s is not a foreground app", (uint8_t *)buffer, 0xCu);
            }

            if (v53)
              free(v53);
            sub_10006C088(v4, 1001, CFSTR("Permission denied, not foreground app"));
            goto LABEL_82;
          }
        }
        v40 = nplog_obj(v37, v38, v39);
        v41 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buffer[0]) = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "processing request to fetch a private access token", (uint8_t *)buffer, 2u);
        }

        buffer[0] = 0;
        buffer[1] = buffer;
        buffer[2] = 0x3032000000;
        buffer[3] = sub_10000312C;
        buffer[4] = sub_100054A8C;
        buffer[5] = 0;
        v133[0] = 0;
        v133[1] = v133;
        v133[2] = (id)0x3032000000;
        v133[3] = sub_10000312C;
        v133[4] = sub_100054A8C;
        v134 = 0;
        v127 = 0;
        v128 = &v127;
        v129 = 0x3032000000;
        v130 = sub_10000312C;
        v131 = sub_100054A8C;
        v132 = 0;
        v121 = 0;
        v122 = (id *)&v121;
        v123 = 0x3032000000;
        v124 = sub_10000312C;
        v125 = sub_100054A8C;
        v126 = 0;
        v119[0] = 0;
        v119[1] = v119;
        v119[2] = 0x3032000000;
        v119[3] = sub_10000312C;
        v119[4] = sub_100054A8C;
        v120 = 0;
        v113 = 0;
        v114 = &v113;
        v115 = 0x3032000000;
        v116 = sub_10000312C;
        v117 = sub_100054A8C;
        v118 = 0;
        v111[0] = 0;
        v111[1] = v111;
        v111[2] = 0x3032000000;
        v111[3] = sub_10000312C;
        v111[4] = sub_100054A8C;
        v112 = 0;
        value = xpc_dictionary_get_value(v4, "NSPServerPrivateAccessTokenChallenges");
        v43 = (void *)objc_claimAutoreleasedReturnValue(value);
        type = xpc_dictionary_get_BOOL(v4, "NSPServerHasPairedTokenChallenges");
        v47 = type;
        if (v43)
        {
          type = (size_t)xpc_get_type(v43);
          if ((_UNKNOWN *)type == &_xpc_type_array)
          {
            if (!v47)
            {
              v109[0] = _NSConcreteStackBlock;
              v109[1] = 3221225472;
              v109[2] = sub_10006D5C4;
              v109[3] = &unk_1000F6288;
              v109[4] = a1;
              v109[5] = buffer;
              v109[6] = &v127;
              v109[7] = v119;
              v109[8] = v111;
              type = xpc_array_apply(v43, v109);
              v48 = v128;
              goto LABEL_64;
            }
            type = xpc_array_get_count(v43);
            if (type == 2)
            {
              applier[0] = _NSConcreteStackBlock;
              applier[1] = 3221225472;
              applier[2] = sub_10006D358;
              applier[3] = &unk_1000F6260;
              applier[4] = a1;
              applier[5] = &v127;
              applier[6] = buffer;
              applier[7] = v119;
              applier[8] = v111;
              applier[9] = &v121;
              applier[10] = v133;
              applier[11] = &v113;
              type = xpc_array_apply(v43, applier);
            }
          }
        }
        if (!v128[5])
          goto LABEL_72;
        if (!v47)
          goto LABEL_65;
        v48 = v122;
LABEL_64:
        if (v48[5])
        {
LABEL_65:
          if (!(v6 | v18))
          {
            memset(buf, 0, sizeof(buf));
            xpc_dictionary_get_audit_token(v4, buf);
            v6 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 32));
          }
          if ((v86 & 1) == 0)
          {
            v65 = a1[5];
            v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v65, "privateAccessTokensEnabledStatus"));
            v67 = objc_msgSend(v66, "BOOLValue");

            if ((v67 & 1) == 0)
            {
              v80 = nplog_obj(v68, v69, v70);
              v81 = objc_claimAutoreleasedReturnValue(v80);
              if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
              {
                LOWORD(buf[0]) = 0;
                _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Cannot fetch private access token, feature disabled", (uint8_t *)buf, 2u);
              }

              sub_10006C088(v4, 1008, CFSTR("Feature disabled"));
              goto LABEL_81;
            }
          }
          v71 = xpc_dictionary_get_string(v4, "NSPServerPrivateAccessTokenCustomAttester");
          if (v71)
          {
            v72 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", v71);
            if (v72)
            {
              nsdictionary_from_xpc_object = get_nsdictionary_from_xpc_object(v4, "NSPServerPrivateAccessTokenCustomAttesterHeaders");
              v74 = (void *)objc_claimAutoreleasedReturnValue(nsdictionary_from_xpc_object);
LABEL_77:
              v77 = v114[5] != 0;
              v90[0] = _NSConcreteStackBlock;
              v90[1] = 3221225472;
              v90[2] = sub_10006D780;
              v90[3] = &unk_1000F6300;
              v105 = v47;
              v98 = &v127;
              v99 = buffer;
              v100 = v119;
              v101 = v111;
              v91 = v87;
              v102 = &v121;
              v103 = v133;
              v104 = &v113;
              v6 = (uint64_t)(id)v6;
              v92 = (id)v6;
              v93 = (id)v18;
              v106 = v88;
              v107 = v86;
              v94 = v4;
              v95 = a1;
              v78 = v72;
              v96 = v78;
              v79 = v74;
              v97 = v79;
              sub_10006DC64(a1, 1, v77, v90);

LABEL_81:
              _Block_object_dispose(v111, 8);

              _Block_object_dispose(&v113, 8);
              _Block_object_dispose(v119, 8);

              _Block_object_dispose(&v121, 8);
              _Block_object_dispose(&v127, 8);

              _Block_object_dispose(v133, 8);
              _Block_object_dispose(buffer, 8);

LABEL_82:
LABEL_83:

              goto LABEL_84;
            }
          }
          else
          {
            v72 = 0;
          }
          v74 = 0;
          goto LABEL_77;
        }
LABEL_72:
        v75 = nplog_obj(type, v45, v46);
        v76 = objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "Failed to find a supported challenge", (uint8_t *)buf, 2u);
        }

        sub_10006C088(v4, 1004, CFSTR("Invalid challenge"));
        goto LABEL_81;
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
      if ((_DWORD)v14)
        goto LABEL_21;
    }
    v23 = v20;
    goto LABEL_30;
  }
LABEL_84:

}

void sub_10005BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a71;
  uint64_t v71;

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose((const void *)(v71 - 224), 8);
  _Block_object_dispose((const void *)(v71 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10005BF34(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *string;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  BOOL v19;
  id v20;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    string = xpc_dictionary_get_string(v3, "NSPServerPrivateAccessTokenOriginName");
    if (string && (v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string)) != 0)
    {
      v7 = v6;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lowercaseString"));

      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "proxyConfiguration", 0));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "authInfo"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "accessTokenKnownOrigins"));

      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v25;
        while (2)
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(_QWORD *)v25 != v14)
              objc_enumerationMutation(v11);
            v16 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
            if ((objc_msgSend(v8, "isEqualToString:", v16) & 1) == 0)
            {
              v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("."), "stringByAppendingString:", v16));
              v18 = objc_msgSend(v8, "hasSuffix:", v17);

              if ((v18 & 1) == 0)
                continue;
            }
            v19 = 1;
            goto LABEL_17;
          }
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
          v19 = 0;
          if (v13)
            continue;
          break;
        }
      }
      else
      {
        v19 = 0;
      }
LABEL_17:

    }
    else
    {
      v19 = 0;
    }
    v20 = v4;
    reply = xpc_dictionary_create_reply(v20);
    remote_connection = xpc_dictionary_get_remote_connection(v20);
    v23 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

    if (reply && v23)
    {
      xpc_dictionary_set_BOOL(reply, "NSPServerPrivateAccessTokenOriginAllowed", v19);
      xpc_connection_send_message(v23, reply);
    }

  }
}

void sub_10005C160(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  void *v6;
  int64_t v7;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v9;
  _xpc_connection_s *v10;
  pid_t pid;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  SEL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  SEL v29;
  _QWORD *Property;
  void *v31;
  id v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  NSObject *v42;
  SEL v43;
  id v44;
  _QWORD v45[2];
  void (*v46)(uint64_t, char);
  void *v47;
  id v48;
  __int128 buffer;
  _OWORD v50[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) == 0)
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v10 = v9;
      if (v9
        && (pid = xpc_connection_get_pid(v9),
            buffer = 0u,
            memset(v50, 0, sizeof(v50)),
            proc_pidinfo(pid, 13, 1uLL, &buffer, 64) == 64))
      {
        v12 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v12, (const char *)v50, 0x10uLL);
      }
      else
      {
        v12 = 0;
      }

      v16 = nplog_obj(v13, v14, v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v40 = "";
        if (v12)
          v40 = v12;
        LODWORD(buffer) = 136315138;
        *(_QWORD *)((char *)&buffer + 4) = v40;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to start proxying to MPTCP converter proxy due to missing entitlement for %s", (uint8_t *)&buffer, 0xCu);
      }

      if (v12)
        free(v12);
      v5 = CFSTR("Permission denied");
      goto LABEL_13;
    }
    if (*(_BYTE *)(a1 + 23))
    {
      v5 = CFSTR("proxying to MPTCP converter proxy is already started");
      v6 = v4;
      v7 = 1004;
LABEL_14:
      sub_10006C088(v6, v7, v5);
      goto LABEL_15;
    }
    v18 = objc_msgSend(*(id *)(a1 + 56), "effectiveUserTier");
    v21 = nplog_obj(v18, v19, v20);
    v22 = objc_claimAutoreleasedReturnValue(v21);
    v23 = v22;
    if (v18 == (id)2)
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buffer) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "unable to start proxying to MPTCP converter proxy because Private Relay is enabled", (uint8_t *)&buffer, 2u);
      }

      v5 = CFSTR("Private Relay is enabled");
LABEL_13:
      v6 = v4;
      v7 = 1001;
      goto LABEL_14;
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buffer) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "processing request to start proxying to MPTCP converter proxy", (uint8_t *)&buffer, 2u);
    }

    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v46 = sub_10006DD70;
    v47 = &unk_1000F5720;
    v48 = v4;
    v24 = v45;
    if (objc_getProperty((id)a1, v25, 272, 1))
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
      Property = objc_getProperty((id)a1, v29, 272, 1);
      if (Property)
        v31 = (void *)Property[2];
      else
        v31 = 0;
      v32 = v31;
      v33 = objc_msgSend(v28, "addPoliciesForMPTCPConverterProxy:", v32);

      if ((v33 & 1) != 0)
      {
        v37 = 1;
        *(_BYTE *)(a1 + 23) = 1;
        sub_1000639C4(a1);
LABEL_37:
        v46((uint64_t)v24, v37);

        goto LABEL_15;
      }
      v41 = nplog_obj(v34, v35, v36);
      v42 = objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buffer) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "failed to add policies for MPTCP converter proxy", (uint8_t *)&buffer, 2u);
      }

      v44 = objc_getProperty((id)a1, v43, 272, 1);
      sub_10009BD94((uint64_t)v44, 0);
    }
    else
    {
      v38 = nplog_obj(0, v26, v27);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buffer) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "flow divert provider is unavailable", (uint8_t *)&buffer, 2u);
      }

    }
    v37 = 0;
    goto LABEL_37;
  }
LABEL_15:

}

void sub_10005C52C(_BYTE *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  id v13;
  xpc_object_t reply;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v18;
  _xpc_connection_s *v19;
  pid_t pid;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  __CFString *v27;
  void *v28;
  int64_t v29;
  const char *v30;
  __int128 v31;
  _OWORD v32[3];

  v3 = a2;
  v4 = v3;
  if (!a1)
    goto LABEL_22;
  v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
  if ((v5 & 1) == 0)
  {
    remote_connection = xpc_dictionary_get_remote_connection(v4);
    v18 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    v19 = v18;
    if (v18
      && (pid = xpc_connection_get_pid(v18),
          v31 = 0u,
          memset(v32, 0, sizeof(v32)),
          proc_pidinfo(pid, 13, 1uLL, &v31, 64) == 64))
    {
      v21 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
      strncpy(v21, (const char *)v32, 0x10uLL);
    }
    else
    {
      v21 = 0;
    }

    v25 = nplog_obj(v22, v23, v24);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v30 = "";
      if (v21)
        v30 = v21;
      LODWORD(v31) = 136315138;
      *(_QWORD *)((char *)&v31 + 4) = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "failed to stop proxying to MPTCP converter proxy due to missing entitlement for %s", (uint8_t *)&v31, 0xCu);
    }

    if (v21)
      free(v21);
    v27 = CFSTR("Permission denied");
    v28 = v4;
    v29 = 1001;
    goto LABEL_21;
  }
  v8 = a1[23];
  v9 = nplog_obj(v5, v6, v7);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (!v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v31) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "proxying to MPTCP converter proxy is not started", (uint8_t *)&v31, 2u);
    }

    v27 = CFSTR("proxying to MPTCP converter proxy is not started");
    v28 = v4;
    v29 = 1004;
LABEL_21:
    sub_10006C088(v28, v29, v27);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v31) = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "processing request to stop proxying to MPTCP converter proxy", (uint8_t *)&v31, 2u);
  }

  sub_1000661BC(a1, v12);
  v13 = v4;
  reply = xpc_dictionary_create_reply(v13);
  v15 = xpc_dictionary_get_remote_connection(v13);
  v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);

  if (reply && v16)
    xpc_connection_send_message(v16, reply);

LABEL_22:
}

void sub_10005C78C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  xpc_connection_t v14;
  _xpc_connection_s *v15;
  _xpc_connection_s *v16;
  pid_t pid;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v25) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set Private Access Tokens enabled", (uint8_t *)&v25, 2u);
      }

      objc_msgSend(*(id *)(a1 + 56), "setPrivateAccessTokensEnabled:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyPrivateAccessTokensEnabled"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

    }
    else
    {
      v14 = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v15
        && (pid = xpc_connection_get_pid(v15),
            v25 = 0u,
            memset(v26, 0, sizeof(v26)),
            proc_pidinfo(pid, 13, 1uLL, &v25, 64) == 64))
      {
        v18 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v18, (const char *)v26, 0x10uLL);
      }
      else
      {
        v18 = 0;
      }

      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = "";
        if (v18)
          v24 = v18;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "setting private access token enablement failed due to missing entitlement for %s", (uint8_t *)&v25, 0xCu);
      }

      if (v18)
        free(v18);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005C9A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unsigned __int8 v10;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling get Private Access Tokens enabled", (uint8_t *)&v26, 2u);
      }

      v10 = objc_msgSend(*(id *)(a1 + 56), "getPrivateAccessTokensEnabled");
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
      {
        xpc_dictionary_set_BOOL(reply, "NSPServerPrivacyProxyPrivateAccessTokensEnabled", v10);
        xpc_connection_send_message(v14, reply);
      }

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "getting private access token enablement failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005CBD0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  xpc_connection_t v14;
  _xpc_connection_s *v15;
  _xpc_connection_s *v16;
  pid_t pid;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v25) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set Private Access Tokens allow tools", (uint8_t *)&v25, 2u);
      }

      objc_msgSend(*(id *)(a1 + 56), "setPrivateAccessTokensAllowTools:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyPrivateAccessTokensEnabled"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

    }
    else
    {
      v14 = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v15
        && (pid = xpc_connection_get_pid(v15),
            v25 = 0u,
            memset(v26, 0, sizeof(v26)),
            proc_pidinfo(pid, 13, 1uLL, &v25, 64) == 64))
      {
        v18 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v18, (const char *)v26, 0x10uLL);
      }
      else
      {
        v18 = 0;
      }

      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = "";
        if (v18)
          v24 = v18;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "setting private access token enablement failed due to missing entitlement for %s", (uint8_t *)&v25, 0xCu);
      }

      if (v18)
        free(v18);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005CDEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  xpc_connection_t v14;
  _xpc_connection_s *v15;
  _xpc_connection_s *v16;
  pid_t pid;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v25) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set Preferred Path Routing enablement", (uint8_t *)&v25, 2u);
      }

      objc_msgSend(*(id *)(a1 + 56), "setPreferredPathRoutingEnabled:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyEnabled"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

    }
    else
    {
      v14 = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v15
        && (pid = xpc_connection_get_pid(v15),
            v25 = 0u,
            memset(v26, 0, sizeof(v26)),
            proc_pidinfo(pid, 13, 1uLL, &v25, 64) == 64))
      {
        v18 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v18, (const char *)v26, 0x10uLL);
      }
      else
      {
        v18 = 0;
      }

      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = "";
        if (v18)
          v24 = v18;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "setting preferred path routing enablement failed due to missing entitlement for %s", (uint8_t *)&v25, 0xCu);
      }

      if (v18)
        free(v18);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005D008(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  pid_t pid;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  __int128 v22;
  _OWORD v23[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Getting domain filters", (uint8_t *)&v22, 2u);
      }

      v10 = objc_msgSend(*(id *)(a1 + 64), "copyDomainFiltersDictionary");
      sub_1000029A8(v4, "NSPServerPrivacyProxyDomainFilters", v10);

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v13 = v12;
      if (v12
        && (pid = xpc_connection_get_pid(v12),
            v22 = 0u,
            memset(v23, 0, sizeof(v23)),
            proc_pidinfo(pid, 13, 1uLL, &v22, 64) == 64))
      {
        v15 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v15, (const char *)v23, 0x10uLL);
      }
      else
      {
        v15 = 0;
      }

      v19 = nplog_obj(v16, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = "";
        if (v15)
          v21 = v15;
        LODWORD(v22) = 136315138;
        *(_QWORD *)((char *)&v22 + 4) = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "getting domain filters failed due to missing entitlement for %s", (uint8_t *)&v22, 0xCu);
      }

      if (v15)
        free(v15);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005D1EC(id *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  void *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set in-process flow divert", (uint8_t *)&v26, 2u);
      }

      objc_msgSend(a1[7], "setInProcessFlowDivert:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyInProcessFlowDivertEnabled"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[7], "mergeProxyTrafficStateWithCurrentPolicy"));
      objc_msgSend(a1, "policiesUpdated:policy:resolverInfoChanged:", a1[7], v14, 1);

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "setting in-process flow divert failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005D438(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *string;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to override proxied content map enabled", (uint8_t *)&v26, 2u);
      }

      string = (char *)xpc_dictionary_get_string(v4, "NSPServerProxiedContentMapIdentifier");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      objc_msgSend(*(id *)(a1 + 64), "overrideProxiedContentMap:enabled:", string, xpc_dictionary_get_BOOL(v4, "NSPServerProxiedContentMapEnabled"));
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
        xpc_connection_send_message(v14, reply);

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "overriding proxied content map enabled failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005D694(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *string;
  unsigned __int8 v11;
  id v12;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v15;
  xpc_connection_t v16;
  _xpc_connection_s *v17;
  _xpc_connection_s *v18;
  pid_t pid;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  __int128 v27;
  _OWORD v28[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v27) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to get the override proxied content map enabled state", (uint8_t *)&v27, 2u);
      }

      string = (char *)xpc_dictionary_get_string(v4, "NSPServerProxiedContentMapIdentifier");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      v11 = objc_msgSend(*(id *)(a1 + 64), "proxiedContentMapIsOverrideEnabled:", string);
      v12 = v4;
      reply = xpc_dictionary_create_reply(v12);
      remote_connection = xpc_dictionary_get_remote_connection(v12);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v15)
      {
        xpc_dictionary_set_BOOL(reply, "NSPServerProxiedContentMapEnabled", v11);
        xpc_connection_send_message(v15, reply);
      }

    }
    else
    {
      v16 = xpc_dictionary_get_remote_connection(v4);
      v17 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v16);
      v18 = v17;
      if (v17
        && (pid = xpc_connection_get_pid(v17),
            v27 = 0u,
            memset(v28, 0, sizeof(v28)),
            proc_pidinfo(pid, 13, 1uLL, &v27, 64) == 64))
      {
        v20 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v20, (const char *)v28, 0x10uLL);
      }
      else
      {
        v20 = 0;
      }

      v24 = nplog_obj(v21, v22, v23);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = "";
        if (v20)
          v26 = v20;
        LODWORD(v27) = 136315138;
        *(_QWORD *)((char *)&v27 + 4) = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "get proxied content map enabled failed due to missing entitlement for %s", (uint8_t *)&v27, 0xCu);
      }

      if (v20)
        free(v20);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005D8F4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v13;
  xpc_connection_t v14;
  _xpc_connection_s *v15;
  _xpc_connection_s *v16;
  pid_t pid;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  __int128 v25;
  _OWORD v26[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v25) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Handling set DoH bootstrap enablement", (uint8_t *)&v25, 2u);
      }

      objc_msgSend(*(id *)(a1 + 64), "setProxiedContentMapDoHBootstrapEnabled:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyEnabled"));
      v10 = v4;
      reply = xpc_dictionary_create_reply(v10);
      remote_connection = xpc_dictionary_get_remote_connection(v10);
      v13 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v13)
        xpc_connection_send_message(v13, reply);

    }
    else
    {
      v14 = xpc_dictionary_get_remote_connection(v4);
      v15 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v14);
      v16 = v15;
      if (v15
        && (pid = xpc_connection_get_pid(v15),
            v25 = 0u,
            memset(v26, 0, sizeof(v26)),
            proc_pidinfo(pid, 13, 1uLL, &v25, 64) == 64))
      {
        v18 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v18, (const char *)v26, 0x10uLL);
      }
      else
      {
        v18 = 0;
      }

      v22 = nplog_obj(v19, v20, v21);
      v23 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v24 = "";
        if (v18)
          v24 = v18;
        LODWORD(v25) = 136315138;
        *(_QWORD *)((char *)&v25 + 4) = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "setting doh bootstrap enablement failed due to missing entitlement for %s", (uint8_t *)&v25, 0xCu);
      }

      if (v18)
        free(v18);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005DB10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *string;
  id v6;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  _xpc_connection_s *v9;
  pid_t pid;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL8 v17;
  uint64_t uint64;
  _BOOL8 v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  double v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  void *i;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  id v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  double v84;
  double v85;
  id v86;
  const char *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  NSObject *v97;
  id v98;
  void *v99;
  void *v100;
  id v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  id v106;
  id obj;
  id obja;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _OWORD buffer[8];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      string = xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyTokenEventsVendor");
      if (string)
        v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      else
        v6 = 0;
      v17 = xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyTokenEventsMostRecent");
      uint64 = xpc_dictionary_get_uint64(v4, "NSPServerPrivacyProxyTokenEventsLimit");
      v19 = xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyTokenEventsStats");
      v20 = v19;
      v23 = nplog_obj(v19, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
      if (v20)
      {
        if (v25)
        {
          LODWORD(buffer[0]) = 138412290;
          *(_QWORD *)((char *)buffer + 4) = v6;
          _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Getting Privacy Proxy Token Events Stats vendor: %@", (uint8_t *)buffer, 0xCu);
        }

        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSPCoreData getMinMaxDate](NSPCoreData, "getMinMaxDate"));
        v27 = v26;
        if (v26)
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKey:", CFSTR("minDate")));
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "objectForKey:", CFSTR("maxDate")));
          v32 = v29;
          if (v28)
          {
            if (v29)
            {
              v33 = (double)uint64;
              if (v17)
              {
                v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "dateByAddingTimeInterval:", v33 * -86400.0));
                v35 = v28;
                v28 = (void *)v34;
              }
              else
              {
                v57 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "dateByAddingTimeInterval:", v33 * 86400.0));
                v35 = v32;
                v32 = (id)v57;
              }
              obja = v27;
              v58 = v32;

              v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 30));
              v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSPCoreData getTokenCountStatsForMultipleWindows:minDate:maxDate:windowDuration:](NSPCoreData, "getTokenCountStatsForMultipleWindows:minDate:maxDate:windowDuration:", v6, v28, v58, v59));

              v61 = v60;
              v32 = v28;
              v62 = v58;
              v63 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
              v66 = (void *)v63;
              if (v63)
              {
                v100 = (void *)v63;
                v104 = v4;
                v67 = objc_alloc_init((Class)NSMutableString);
                if (v67)
                {
                  v70 = v67;
                  v102 = v6;
                  v97 = v62;
                  v98 = v32;
                  -[NSObject appendFormat:](v67, "appendFormat:", CFSTR("Stats from %@ to %@\n"), v32, v62);
                  -[NSObject appendString:](v70, "appendString:", CFSTR("Time(HH:MM-HH:MM)   Mean    Standard Deviation\n"));
                  v111 = 0u;
                  v112 = 0u;
                  v109 = 0u;
                  v110 = 0u;
                  v96 = v61;
                  v106 = v61;
                  v71 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v109, buffer, 16);
                  if (v71)
                  {
                    v72 = v71;
                    v73 = 0;
                    v74 = 0;
                    v75 = *(_QWORD *)v110;
                    do
                    {
                      v76 = 0;
                      v77 = v73;
                      v78 = v74;
                      do
                      {
                        if (*(_QWORD *)v110 != v75)
                          objc_enumerationMutation(v106);
                        v79 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)v76);
                        if (v78 <= 0x1D)
                          v73 = v77;
                        else
                          v73 = (v77 + 1);
                        if (v78 <= 0x1D)
                          v74 = (v78 + 30);
                        else
                          v74 = 0;
                        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)v76), "valueForKey:", CFSTR("mean")));
                        objc_msgSend(v80, "doubleValue");
                        v82 = v81;

                        v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "valueForKey:", CFSTR("stdDev")));
                        objc_msgSend(v83, "doubleValue");
                        v85 = v84;

                        if (v85 >= 0.0)
                          -[NSObject appendFormat:](v70, "appendFormat:", CFSTR("%02d:%02d-%02d:%02d         %05.2f   %05.2f\n"), v77, v78, v73, v74, v82, *(_QWORD *)&v85);
                        else
                          -[NSObject appendFormat:](v70, "appendFormat:", CFSTR("%02d:%02d-%02d:%02d         -----   -----\n"), v77, v78, v73, v74, v94, v95);
                        v76 = (char *)v76 + 1;
                        v77 = v73;
                        v78 = v74;
                      }
                      while (v72 != v76);
                      v72 = objc_msgSend(v106, "countByEnumeratingWithState:objects:count:", &v109, buffer, 16);
                    }
                    while (v72);
                  }

                  v66 = v100;
                  objc_msgSend(v100, "addObject:", v70);
                  v86 = v100;
                  v6 = v102;
                  v4 = v104;
                  v62 = v97;
                  v32 = v98;
                  v61 = v96;
                }
                else
                {
                  v92 = nplog_obj(0, v68, v69);
                  v93 = objc_claimAutoreleasedReturnValue(v92);
                  if (os_log_type_enabled(v93, OS_LOG_TYPE_FAULT))
                  {
                    LODWORD(buffer[0]) = 136315138;
                    *(_QWORD *)((char *)buffer + 4) = "-[NSPServer formatTokenEventsStatsForDisplay:minDate:maxDate:]";
                    _os_log_fault_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_FAULT, "%s called with null statsStr", (uint8_t *)buffer, 0xCu);
                  }

                  v70 = 0;
                  v86 = 0;
                  v66 = v100;
                }
              }
              else
              {
                v91 = nplog_obj(0, v64, v65);
                v70 = objc_claimAutoreleasedReturnValue(v91);
                if (os_log_type_enabled(v70, OS_LOG_TYPE_FAULT))
                {
                  LODWORD(buffer[0]) = 136315138;
                  *(_QWORD *)((char *)buffer + 4) = "-[NSPServer formatTokenEventsStatsForDisplay:minDate:maxDate:]";
                  _os_log_fault_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, "%s called with null result", (uint8_t *)buffer, 0xCu);
                }
                v86 = 0;
              }

              sub_10006C9E4(v4, v86);
              v27 = obja;
            }
            else
            {
              v90 = nplog_obj(0, v30, v31);
              v62 = objc_claimAutoreleasedReturnValue(v90);
              if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
              {
                LODWORD(buffer[0]) = 136315138;
                *(_QWORD *)((char *)buffer + 4) = "-[NSPServer dumpPrivacyProxyTokenEvents:]";
                _os_log_fault_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_FAULT, "%s called with null maxDate", (uint8_t *)buffer, 0xCu);
              }
              v32 = v28;
            }
          }
          else
          {
            v89 = nplog_obj(v29, v30, v31);
            v62 = objc_claimAutoreleasedReturnValue(v89);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
            {
              LODWORD(buffer[0]) = 136315138;
              *(_QWORD *)((char *)buffer + 4) = "-[NSPServer dumpPrivacyProxyTokenEvents:]";
              _os_log_fault_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_FAULT, "%s called with null minDate", (uint8_t *)buffer, 0xCu);
            }
          }

        }
        else
        {
          sub_10006C088(v4, 1007, CFSTR("Failed to retrieve data"));
        }
      }
      else
      {
        v103 = v4;
        if (v25)
        {
          v88 = "No";
          LODWORD(buffer[0]) = 138412802;
          *(_QWORD *)((char *)buffer + 4) = v6;
          if (v17)
            v88 = "Yes";
          WORD6(buffer[0]) = 2080;
          *(_QWORD *)((char *)buffer + 14) = v88;
          WORD3(buffer[1]) = 2048;
          *((_QWORD *)&buffer[1] + 1) = uint64;
          _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Getting Privacy Proxy Token Events vendor: %@, most_recent: %s, limist:%llu", (uint8_t *)buffer, 0x20u);
        }

        v101 = v6;
        v36 = (id)objc_claimAutoreleasedReturnValue(+[NSPCoreData fetchEvents:mostRecent:limit:](NSPCoreData, "fetchEvents:mostRecent:limit:", v6, v17, uint64));
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Date"), "stringByPaddingToLength:withString:startingAtIndex:", 27, CFSTR(" "), 0));
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Vendor"), "stringByPaddingToLength:withString:startingAtIndex:", 22, CFSTR(" "), 0));
        v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Event"), "stringByPaddingToLength:withString:startingAtIndex:", 22, CFSTR(" "), 0));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("Token count"), "stringByPaddingToLength:withString:startingAtIndex:", 22, CFSTR(" "), 0));
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@%@%@"), v38, v39, v40, v41));

        objc_msgSend(v37, "addObject:", v42);
        v105 = v42;
        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&stru_1000FC990, "stringByPaddingToLength:withString:startingAtIndex:", objc_msgSend(v42, "length"), CFSTR("-"), 0));
        v44 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v43));

        v45 = v37;
        v99 = (void *)v44;
        objc_msgSend(v37, "addObject:", v44);
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        obj = v36;
        v46 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, buffer, 16);
        if (v46)
        {
          v47 = v46;
          v48 = *(_QWORD *)v110;
          do
          {
            for (i = 0; i != v47; i = (char *)i + 1)
            {
              if (*(_QWORD *)v110 != v48)
                objc_enumerationMutation(obj);
              v50 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * (_QWORD)i);
              v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "vendor"));
              v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "stringByPaddingToLength:withString:startingAtIndex:", 20, CFSTR(" "), 0));

              v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSPCoreData tokenTypeEnumToString:](NSPCoreData, "tokenTypeEnumToString:", objc_msgSend(v50, "eventType")));
              v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "stringByPaddingToLength:withString:startingAtIndex:", 20, CFSTR(" "), 0));

              v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "date"));
              v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@  %@  %@  %d"), v55, v52, v54, objc_msgSend(v50, "tokenCount")));

              objc_msgSend(v45, "addObject:", v56);
            }
            v47 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, buffer, 16);
          }
          while (v47);
        }
        v27 = obj;

        v4 = v103;
        sub_10006C9E4(v103, v45);

        v6 = v101;
      }

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v9 = v8;
      if (v8
        && (pid = xpc_connection_get_pid(v8), memset(buffer, 0, 64), proc_pidinfo(pid, 13, 1uLL, buffer, 64) == 64))
      {
        v11 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v11, (const char *)&buffer[1], 0x10uLL);
      }
      else
      {
        v11 = 0;
      }

      v15 = nplog_obj(v12, v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v87 = "";
        if (v11)
          v87 = v11;
        LODWORD(buffer[0]) = 136315138;
        *(_QWORD *)((char *)buffer + 4) = v87;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "dumping privacy proxy token events failed due to missing entitlement for %s", (uint8_t *)buffer, 0xCu);
      }

      if (v11)
        free(v11);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005E574(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  xpc_object_t value;
  void *v7;
  NSNumber *v8;
  void *v9;
  xpc_connection_t v10;
  _xpc_connection_s *v11;
  _xpc_connection_s *v12;
  pid_t pid;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  xpc_object_t v20;
  void *v21;
  NSNumber *v22;
  void *v23;
  xpc_object_t v24;
  void *v25;
  NSNumber *v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  NSNumber *v30;
  uint64_t v31;
  xpc_object_t v32;
  void *v33;
  NSNumber *v34;
  void *v35;
  xpc_object_t v36;
  void *v37;
  NSNumber *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v46;
  const char *v47;
  void *v48;
  void *v49;
  __int128 buffer;
  _OWORD v51[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if ((sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy")) & 1) != 0)
    {
      v5 = objc_alloc_init((Class)NSMutableDictionary);
      if (v5)
      {
        value = xpc_dictionary_get_value(v4, "NSPServerPrivacyProxyTokenEventsEnableProactiveTokenFetch");
        v7 = (void *)objc_claimAutoreleasedReturnValue(value);

        if (v7)
        {
          v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", xpc_dictionary_get_BOOL(v4, "NSPServerPrivacyProxyTokenEventsEnableProactiveTokenFetch"));
          v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
          objc_msgSend(v5, "setObject:forKey:", v9, CFSTR("NSPEventsKeyProactiveTokenFetchEnabled"));
        }
        else
        {
          v9 = 0;
        }
        v20 = xpc_dictionary_get_value(v4, "NSPServerPrivacyProxyTokenEventsSetStatsDuration");
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

        if (v21)
        {
          v22 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", xpc_dictionary_get_uint64(v4, "NSPServerPrivacyProxyTokenEventsSetStatsDuration"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          objc_msgSend(v5, "setObject:forKey:", v23, CFSTR("NSPEventsKeyStatsDuration"));
        }
        else
        {
          v23 = 0;
        }
        v24 = xpc_dictionary_get_value(v4, "NSPServerPrivacyProxyTokenEventsSetLowerTokenCountThreshold");
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

        if (v25)
        {
          v26 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", xpc_dictionary_get_uint64(v4, "NSPServerPrivacyProxyTokenEventsSetLowerTokenCountThreshold"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
          objc_msgSend(v5, "setObject:forKey:", v27, CFSTR("NSPEventsKeyLowerTokenCountThreshold"));
        }
        else
        {
          v27 = 0;
        }
        v28 = xpc_dictionary_get_value(v4, "NSPServerPrivacyProxyTokenEventsSetLowerTokenCountProbability");
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

        if (v29)
        {
          v30 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", xpc_dictionary_get_double(v4, "NSPServerPrivacyProxyTokenEventsSetLowerTokenCountProbability"));
          v31 = objc_claimAutoreleasedReturnValue(v30);
          objc_msgSend(v5, "setObject:forKey:", v31, CFSTR("NSPEventsKeyLowerTokenCountProbability"));
        }
        else
        {
          v31 = 0;
        }
        v32 = xpc_dictionary_get_value(v4, "NSPServerPrivacyProxyTokenEventsSetUpperLWMCountThreshold");
        v33 = (void *)objc_claimAutoreleasedReturnValue(v32);

        if (v33)
        {
          v34 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", xpc_dictionary_get_uint64(v4, "NSPServerPrivacyProxyTokenEventsSetUpperLWMCountThreshold"));
          v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
          objc_msgSend(v5, "setObject:forKey:", v35, CFSTR("NSPEventsKeyUpperLWMCountThreshold"));
        }
        else
        {
          v35 = 0;
        }
        v36 = xpc_dictionary_get_value(v4, "NSPServerPrivacyProxyTokenEventsSetUpperLWMCountProbabilityOffset");
        v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

        if (v37)
        {
          v38 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", xpc_dictionary_get_double(v4, "NSPServerPrivacyProxyTokenEventsSetUpperLWMCountProbabilityOffset"));
          v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          objc_msgSend(v5, "setObject:forKey:", v39, CFSTR("NSPEventsKeyUpperLWMCountProbabilityOffset"));
        }
        else
        {
          v39 = 0;
        }
        v40 = (void *)v31;
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSPCoreData updateProactiveTokenFetchConfiguration:statsDuration:lowerTokenCountThreshold:lowerTokenCountProbability:upperLWMCountThreshold:upperLWMCountProbabilityOffset:](NSPCoreData, "updateProactiveTokenFetchConfiguration:statsDuration:lowerTokenCountThreshold:lowerTokenCountProbability:upperLWMCountThreshold:upperLWMCountProbabilityOffset:", v9, v23, v27, v31, v35, v39));
        if (v41)
        {
          v48 = v23;
          v49 = v27;
          v42 = v9;
          v43 = v4;
          reply = xpc_dictionary_create_reply(v43);
          remote_connection = xpc_dictionary_get_remote_connection(v43);
          v46 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

          if (reply && v46)
            xpc_connection_send_message(v46, reply);

          v9 = v42;
          v23 = v48;
          v27 = v49;
        }
        else
        {
          sub_10006C088(v4, 1007, CFSTR("updateProactiveTokenFetchConfiguration Failed"));
        }

      }
      else
      {
        sub_10006C088(v4, 1007, CFSTR("Failed allocate dictionary"));
      }

    }
    else
    {
      v10 = xpc_dictionary_get_remote_connection(v4);
      v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v10);
      v12 = v11;
      if (v11
        && (pid = xpc_connection_get_pid(v11),
            buffer = 0u,
            memset(v51, 0, sizeof(v51)),
            proc_pidinfo(pid, 13, 1uLL, &buffer, 64) == 64))
      {
        v14 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v14, (const char *)v51, 0x10uLL);
      }
      else
      {
        v14 = 0;
      }

      v18 = nplog_obj(v15, v16, v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v47 = "";
        if (v14)
          v47 = v14;
        LODWORD(buffer) = 136315138;
        *(_QWORD *)((char *)&buffer + 4) = v47;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Setting Proactive Token Fetch Params failed due to missing entitlement for %s", (uint8_t *)&buffer, 0xCu);
      }

      if (v14)
        free(v14);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005EA40(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *string;
  id v11;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v14;
  xpc_connection_t v15;
  _xpc_connection_s *v16;
  _xpc_connection_s *v17;
  pid_t pid;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  __int128 v26;
  _OWORD v27[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v26) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to override the preferred oblivious proxy", (uint8_t *)&v26, 2u);
      }

      string = (char *)xpc_dictionary_get_string(v4, "NSPServerPrivacyProxyURL");
      if (string)
        string = (char *)objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", string);
      if (!objc_msgSend(string, "length"))
      {

        string = 0;
      }
      objc_msgSend(*(id *)(a1 + 64), "overridePreferredObliviousProxy:", string);
      v11 = v4;
      reply = xpc_dictionary_create_reply(v11);
      remote_connection = xpc_dictionary_get_remote_connection(v11);
      v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

      if (reply && v14)
        xpc_connection_send_message(v14, reply);

    }
    else
    {
      v15 = xpc_dictionary_get_remote_connection(v4);
      v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v15);
      v17 = v16;
      if (v16
        && (pid = xpc_connection_get_pid(v16),
            v26 = 0u,
            memset(v27, 0, sizeof(v27)),
            proc_pidinfo(pid, 13, 1uLL, &v26, 64) == 64))
      {
        v19 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v19, (const char *)v27, 0x10uLL);
      }
      else
      {
        v19 = 0;
      }

      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        v25 = "";
        if (v19)
          v25 = v19;
        LODWORD(v26) = 136315138;
        *(_QWORD *)((char *)&v26 + 4) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "overriding preferred oblivious proxy failed due to missing entitlement for %s", (uint8_t *)&v26, 0xCu);
      }

      if (v19)
        free(v19);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005EC9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  _xpc_connection_s *v13;
  pid_t pid;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  __int128 v22;
  _OWORD v23[3];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_10000301C(v3, CFSTR("com.apple.private.networkserviceproxy"));
    if ((v5 & 1) != 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v22) = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "processing request to get the preferred oblivious proxy", (uint8_t *)&v22, 2u);
      }

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "overridePreferredObliviousProxy"));
      sub_10006B750(v4, "NSPServerPrivacyProxyURL", v10);

    }
    else
    {
      remote_connection = xpc_dictionary_get_remote_connection(v4);
      v12 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      v13 = v12;
      if (v12
        && (pid = xpc_connection_get_pid(v12),
            v22 = 0u,
            memset(v23, 0, sizeof(v23)),
            proc_pidinfo(pid, 13, 1uLL, &v22, 64) == 64))
      {
        v15 = (char *)malloc_type_malloc(0x10uLL, 0xB84001C7uLL);
        strncpy(v15, (const char *)v23, 0x10uLL);
      }
      else
      {
        v15 = 0;
      }

      v19 = nplog_obj(v16, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = "";
        if (v15)
          v21 = v15;
        LODWORD(v22) = 136315138;
        *(_QWORD *)((char *)&v22 + 4) = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "get preferred oblivious proxy failed due to missing entitlement for %s", (uint8_t *)&v22, 0xCu);
      }

      if (v15)
        free(v15);
      sub_10006C088(v4, 1001, CFSTR("Permission denied"));
    }
  }

}

void sub_10005EE84(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = nplog_obj(a1, v1, v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting clean exit after client request", v5, 2u);
  }

  xpc_transaction_exit_clean();
}

void sub_10005EEEC(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  int64_t int64;
  xpc_object_t object;

  object = a2;
  if (object && xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64 = xpc_dictionary_get_int64(object, "NSPServerCommandType");
    if (int64 == 60)
    {
      sub_10005BF34(*(_QWORD *)(a1 + 32), object);
      goto LABEL_4;
    }
    if (int64 == 51)
    {
      sub_10005B388(*(id **)(a1 + 32), object);
      goto LABEL_4;
    }
    xpc_connection_cancel(*(xpc_connection_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

LABEL_4:
}

void sub_10005EFA0(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = nplog_obj(a1, v1, v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting clean exit after client token request", v5, 2u);
  }

  xpc_transaction_exit_clean();
}

void sub_10005F568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005F584(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v4;
  NSObject *Property;
  const char *v6;
  uint64_t v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 11))
    {
      objc_msgSend(*(id *)(v2 + 104), "removeObserver:forKeyPath:context:", v2, CFSTR("path"), v2);
      v4 = *(void **)(v2 + 104);
      *(_QWORD *)(v2 + 104) = 0;

    }
    Property = objc_getProperty((id)v2, a2, 248, 1);
    dispatch_source_cancel(Property);
    v7 = *(_QWORD *)(a1 + 32);
    if (v7 && *(_BYTE *)(v7 + 9))
    {
      *(_BYTE *)(v7 + 10) = 1;
      v8 = *(id *)(a1 + 32);
      if (v8)
        v8 = objc_getProperty(v8, v6, 272, 1);
      sub_10009BD94((uint64_t)v8, 0);
    }
  }
  exit(0);
}

void sub_10005F618(uint64_t a1, void *a2)
{
  xpc_type_t type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  _xpc_connection_s *v14;
  dispatch_time_t v15;
  xpc_object_t object;
  _QWORD handler[6];
  __int128 buf;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  object = a2;
  if (object)
  {
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_connection)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = object;
      v10 = v9;
      if (v8)
      {
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v19 = 0x3032000000;
        v20 = sub_10000312C;
        v21 = sub_100054A8C;
        v11 = v9;
        v22 = v11;
        v12 = NPGetInternalQueue(v11);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        xpc_connection_set_target_queue((xpc_connection_t)v11, v13);

        v14 = *(_xpc_connection_s **)(*((_QWORD *)&buf + 1) + 40);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10005EEEC;
        handler[3] = &unk_1000F5F78;
        handler[4] = v8;
        handler[5] = &buf;
        xpc_connection_set_event_handler(v14, handler);
        xpc_connection_resume(*(xpc_connection_t *)(*((_QWORD *)&buf + 1) + 40));
        if (deviceClassIsHomepod())
        {
          v15 = dispatch_time(0, 30000000000);
          dispatch_after(v15, (dispatch_queue_t)&_dispatch_main_q, &stru_1000F5FB8);
        }
        _Block_object_dispose(&buf, 8);

      }
    }
    else
    {
      type = xpc_get_type(object);
      if (type == (xpc_type_t)&_xpc_type_error)
      {
        v6 = nplog_obj(type, v4, v5);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = xpc_dictionary_get_string(object, _xpc_error_key_description);
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Exiting, got invalid token fetch XPC connection: %s", (uint8_t *)&buf, 0xCu);
        }

        exit(1);
      }
    }
  }

}

void sub_10005F81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

void sub_10005F83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id *WeakRetained;
  id *v8;
  __int16 v9[8];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Toggle stats timer fired", (uint8_t *)v9, 2u);
  }

  v6 = (void *)os_transaction_create("com.apple.networkserviceproxy.toggleStatsTimerFired");
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[42], "resetStats");

}

void sub_10005F8D4(id *a1, void *a2)
{
  _xpc_activity_s *v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  id v12;
  _QWORD v13[4];
  _xpc_activity_s *v14;
  uint8_t *v15;
  id v16;
  uint8_t buf[8];
  uint8_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  id location;
  _QWORD v24[4];
  _xpc_activity_s *v25;

  v3 = a2;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "enabled"));
    v5 = objc_msgSend(v4, "BOOLValue");

    v9 = nplog_obj(v6, v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if ((v5 & 1) != 0)
    {
      if (v11)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Refreshing metadata in response to XPC activity notification", buf, 2u);
      }

      xpc_activity_set_state(v3, 4);
      objc_initWeak(&location, a1);
      *(_QWORD *)buf = 0;
      v18 = buf;
      v19 = 0x3032000000;
      v20 = sub_10000312C;
      v21 = sub_100054A8C;
      v22 = (id)os_transaction_create("com.apple.networkserviceproxy.configRefresh");
      v12 = a1[7];
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10005FC00;
      v13[3] = &unk_1000F6028;
      objc_copyWeak(&v16, &location);
      v14 = v3;
      v15 = buf;
      objc_msgSend(v12, "refreshConfigurationWithReason:completionHandler:", 1, v13);

      objc_destroyWeak(&v16);
      _Block_object_dispose(buf, 8);

      objc_destroyWeak(&location);
    }
    else
    {
      if (v11)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Metadata refresh XPC activity is finished because NSP is disabled", buf, 2u);
      }

      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10005FB04;
      v24[3] = &unk_1000F5450;
      v25 = v3;
      sub_10005FB10(a1, v24);

    }
  }

}

void sub_10005FAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  objc_destroyWeak((id *)(v18 - 80));
  _Unwind_Resume(a1);
}

BOOL sub_10005FB04(uint64_t a1)
{
  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
}

void sub_10005FB10(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD handler[4];
  id v6;
  id v7;
  id location;

  v3 = a2;
  xpc_activity_unregister("com.apple.networkserviceproxy.metadata-refresh-22h");
  objc_initWeak(&location, a1);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100060064;
  handler[3] = &unk_1000F6070;
  objc_copyWeak(&v7, &location);
  v4 = v3;
  v6 = v4;
  xpc_activity_register("com.apple.networkserviceproxy.metadata-refresh-22h", XPC_ACTIVITY_CHECK_IN, handler);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);

}

void sub_10005FBE4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10005FC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  id *WeakRetained;
  id *v9;
  uint32_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  dispatch_time_t v24;
  _QWORD v25[4];
  id v26;
  uint8_t buf[4];
  void *v28;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("failure");
    if (v3)
      v7 = CFSTR("success");
    *(_DWORD *)buf = 138412290;
    v28 = (void *)v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Configuration refresh activity finished with result %@", buf, 0xCu);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained[8], "removeExpiredTokens");
    sub_10005FE50((uint64_t)v9);
    v10 = arc4random_uniform(0x64u);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9[5], "proxyConfiguration"));
    v12 = objc_msgSend(v11, "hasPreferredPathEnabledPercentage");

    v16 = 80;
    if (v12)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9[5], "proxyConfiguration"));
      v18 = objc_msgSend(v17, "preferredPathEnabledPercentage");

      if (v18 >= 0x50)
        v16 = 80;
      else
        v16 = v18;
    }
    v19 = nplog_obj(v13, v14, v15);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = "Disabling";
      if (v10 < v16)
        v21 = "Enabling";
      *(_DWORD *)buf = 136446210;
      v28 = (void *)v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%{public}s preferred path routing based on random value", buf, 0xCu);
    }

    objc_msgSend(v9[7], "setPreferredPathRoutingEnabled:", v10 < v16);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10005FF88;
    v25[3] = &unk_1000F5450;
    v26 = *(id *)(a1 + 32);
    sub_10005FB10(v9, v25);

  }
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v23 = *(void **)(v22 + 40);
  *(_QWORD *)(v22 + 40) = 0;

  if (deviceClassIsHomepod())
  {
    v24 = dispatch_time(0, 30000000000);
    dispatch_after(v24, (dispatch_queue_t)&_dispatch_main_q, &stru_1000F6000);
  }

}

void sub_10005FE50(uint64_t a1)
{
  void *v2;
  void *v3;
  SEL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  NSObject *v10;
  _DWORD v11[2];

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](AKAccountManager, "sharedInstance"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "primaryAuthKitAccount"));
    v4 = NSSelectorFromString(CFSTR("privateAttestationEnabledForAccount:"));
    v5 = objc_opt_respondsToSelector(v2, v4);
    if ((v5 & 1) != 0)
    {
      v5 = (uint64_t)objc_msgSend(v2, "performSelector:withObject:", v4, v3);
      v8 = v5 != 0;
    }
    else
    {
      v8 = 1;
    }
    v9 = nplog_obj(v5, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11[0] = 67109120;
      v11[1] = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Private access tokens enabled on account: %u", (uint8_t *)v11, 8u);
    }

    if (v8 != objc_msgSend(*(id *)(a1 + 56), "getPrivateAccessTokensEnabled"))
      objc_msgSend(*(id *)(a1 + 56), "setPrivateAccessTokensEnabled:", v8);

  }
}

BOOL sub_10005FF88(uint64_t a1)
{
  return xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5);
}

void sub_10005FF94(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = nplog_obj(a1, v1, v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting clean exit after refresh activity", v5, 2u);
  }

  xpc_transaction_exit_clean();
}

void sub_10005FFFC(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = nplog_obj(a1, v1, v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting clean exit after publish stats activity", v5, 2u);
  }

  xpc_transaction_exit_clean();
}

void sub_100060064(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  id WeakRetained;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  _xpc_activity_s *v20;
  uint8_t buf[4];
  xpc_activity_state_t v22;

  v3 = a2;
  state = xpc_activity_get_state(v3);
  v7 = nplog_obj(state, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v22 = state;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Metadata refresh XPC activity 22 hour state %ld", buf, 0xCu);
  }

  if (state == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (!WeakRetained)
    {
      xpc_activity_set_state(v3, 5);
      goto LABEL_11;
    }
    v14 = WeakRetained;
    v15 = NPGetInternalQueue(WeakRetained);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000602A8;
    v18[3] = &unk_1000F5A80;
    v19 = v14;
    v20 = v3;
    v12 = v14;
    dispatch_async(v16, v18);

  }
  else
  {
    if (state)
      goto LABEL_9;
    objc_opt_self(NSPServer);
    v12 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(v12, XPC_ACTIVITY_DELAY, 79200);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_SHOULD_WAKE_DEVICE, 1);
    xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_int64(v12, XPC_ACTIVITY_GRACE_PERIOD, 3600);
    xpc_activity_set_criteria(v3, v12);
  }

LABEL_9:
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 16))(v17, v9, v10, v11);
LABEL_11:

}

uint64_t sub_1000602A8(uint64_t a1)
{
  return sub_10005F8D4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1000602B4(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  _xpc_activity_s *v15;
  uint8_t buf[4];
  xpc_activity_state_t v17;

  v3 = a2;
  state = xpc_activity_get_state(v3);
  v7 = nplog_obj(state, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v17 = state;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Metadata refresh XPC activity 12 hour state %ld", buf, 0xCu);
  }

  if (state == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = WeakRetained;
    if (WeakRetained)
    {
      v11 = NPGetInternalQueue(WeakRetained);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100060408;
      v13[3] = &unk_1000F5A80;
      v14 = v10;
      v15 = v3;
      dispatch_async(v12, v13);

    }
    else
    {
      xpc_activity_set_state(v3, 5);
    }

  }
}

void sub_100060408(uint64_t a1)
{
  sub_10005F8D4(*(id **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100060414(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  _xpc_activity_s *v15;
  uint8_t buf[4];
  xpc_activity_state_t v17;

  v3 = a2;
  state = xpc_activity_get_state(v3);
  v7 = nplog_obj(state, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v17 = state;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Metadata refresh XPC activity 22 hour state %ld", buf, 0xCu);
  }

  if (state == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = WeakRetained;
    if (WeakRetained)
    {
      v11 = NPGetInternalQueue(WeakRetained);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100060568;
      v13[3] = &unk_1000F5A80;
      v14 = v10;
      v15 = v3;
      dispatch_async(v12, v13);

    }
    else
    {
      xpc_activity_set_state(v3, 5);
    }

  }
}

void sub_100060568(uint64_t a1)
{
  sub_10005F8D4(*(id **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100060574(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  dispatch_time_t v10;
  id WeakRetained;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD v15[4];
  id v16;
  _xpc_activity_s *v17;
  uint8_t buf[4];
  xpc_activity_state_t v19;

  v3 = a2;
  state = xpc_activity_get_state(v3);
  v7 = nplog_obj(state, v5, v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v19 = state;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Publish daily stats XPC activity state %ld", buf, 0xCu);
  }

  if (deviceClassIsHomepod(v9))
  {
    v10 = dispatch_time(0, 10000000000);
    dispatch_after(v10, (dispatch_queue_t)&_dispatch_main_q, &stru_1000F60B8);
    xpc_activity_set_state(v3, 5);
  }
  else if (state == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v12 = WeakRetained;
    if (WeakRetained)
    {
      v13 = NPGetInternalQueue(WeakRetained);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100060770;
      v15[3] = &unk_1000F5A80;
      v16 = v12;
      v17 = v3;
      dispatch_async(v14, v15);

    }
    else
    {
      xpc_activity_set_state(v3, 5);
    }

  }
}

void sub_100060708(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = nplog_obj(a1, v1, v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Requesting clean exit after daily stats event", v5, 2u);
  }

  xpc_transaction_exit_clean();
}

void sub_100060770(uint64_t a1)
{
  id *v2;
  _xpc_activity_s *v3;
  uint64_t v4;
  uint64_t v5;
  _xpc_activity_s *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  NSPIPAddressLocationPreferenceStats *v13;
  NSPIPAddressLocationPreferenceStats *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  _BOOL8 v19;
  dispatch_time_t v20;
  uint8_t buf[16];

  +[NSPCoreData trainModel](NSPCoreData, "trainModel");
  v2 = *(id **)(a1 + 32);
  v3 = (_xpc_activity_s *)*(id *)(a1 + 40);
  v6 = v3;
  if (v2)
  {
    v7 = nplog_obj(v3, v4, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Publish daily stats", buf, 2u);
    }

    objc_msgSend(v2[7], "publishDailyConfigurationStats");
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[5], "enabled"));
    v10 = objc_msgSend(v9, "BOOLValue");

    if (v10)
    {
      objc_msgSend(v2[9], "publishDailyServiceStatus");
      objc_msgSend(v2[9], "publishDailyNetworkStatus");
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[5], "geohashSharingEnabledStatus"));
      v12 = objc_msgSend(v11, "BOOLValue");

      v13 = objc_alloc_init(NSPIPAddressLocationPreferenceStats);
      v14 = v13;
      if (v12)
        v15 = 1;
      else
        v15 = 2;
      -[NSPIPAddressLocationPreferenceStats setLocationPreference:](v13, "setLocationPreference:", v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[5], "userTier"));
      v17 = objc_msgSend(v16, "intValue");
      if (v17 >= 3)
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v17));
      else
        v18 = *(&off_1000F65C0 + (int)v17);
      -[NSPIPAddressLocationPreferenceStats setTierType:](v14, "setTierType:", v18);

      -[NSPProxyAnalytics sendAnalytics](v14, "sendAnalytics");
    }
    v19 = xpc_activity_set_state(v6, 5);
    if (deviceClassIsHomepod(v19))
    {
      v20 = dispatch_time(0, 30000000000);
      dispatch_after(v20, (dispatch_queue_t)&_dispatch_main_q, &stru_1000F6048);
    }
  }

}

void sub_100060920(uint64_t a1)
{
  _QWORD block[5];

  if (a1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100060990;
    block[3] = &unk_1000F5450;
    block[4] = a1;
    if (qword_100112E58 != -1)
      dispatch_once(&qword_100112E58, block);
  }
}

void sub_100060990(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  id Property;
  void *v6;
  const char *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    if (objc_getProperty(v3, a2, 256, 1))
    {
      Property = *(id *)(a1 + 32);
      if (Property)
        Property = objc_getProperty(Property, v4, 256, 1);
      xpc_connection_resume((xpc_connection_t)Property);
      +[NPUtilities postNotification:value:](NPUtilities, "postNotification:value:", CFSTR("com.apple.networkserviceproxy.privacy-proxy-xpc-listen-ready"), random());
    }
    v6 = *(void **)(a1 + 32);
    if (v6 && objc_getProperty(v6, v4, 264, 1))
    {
      v8 = *(id *)(a1 + 32);
      if (v8)
        v8 = objc_getProperty(v8, v7, 264, 1);
      xpc_connection_resume((xpc_connection_t)v8);
    }
  }
}

void sub_100060A34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD block[5];

  if (a1)
  {
    v2 = NPGetInternalQueue(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100060AA4;
    block[3] = &unk_1000F5450;
    block[4] = a1;
    dispatch_async(v3, block);

  }
}

void sub_100060AA4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100060B14;
  block[3] = &unk_1000F5450;
  block[4] = *(_QWORD *)(a1 + 32);
  if (qword_100112E60 != -1)
    dispatch_once(&qword_100112E60, block);
}

void sub_100060B14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id inited;
  uint64_t v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17[8];
  _QWORD handler[4];
  id v19;
  id location;
  int out_token;

  v2 = MKBDeviceUnlockedSinceBoot();
  if ((_DWORD)v2)
  {
    CFPreferencesFlushCaches(v2);
    sub_100060C8C(*(_QWORD **)(a1 + 32), v3, v4);
  }
  else
  {
    out_token = -1;
    inited = objc_initWeak(&location, *(id *)(a1 + 32));
    v6 = NPGetInternalQueue(inited);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100060F7C;
    handler[3] = &unk_1000F60E0;
    objc_copyWeak(&v19, &location);
    v8 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, v7, handler);

    if (v8)
    {
      v12 = nplog_obj(v9, v10, v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v17 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to register for first unlock notification.", v17, 2u);
      }

    }
    else if (MKBDeviceUnlockedSinceBoot())
    {
      v14 = notify_cancel(out_token);
      CFPreferencesFlushCaches(v14);
      sub_100060C8C(*(_QWORD **)(a1 + 32), v15, v16);
    }
    objc_destroyWeak(&v19);
    objc_destroyWeak(&location);
  }
}

void sub_100060C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100060C8C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  void *v17;
  int v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  _QWORD v25[4];
  NSObject *v26;
  id v27;
  id v28;
  char v29;
  uint8_t buf[4];
  const char *v31;

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Creating configuration from settings on disk", buf, 2u);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPConfiguration defaultConfiguration](NSPConfiguration, "defaultConfiguration"));
    v9 = v6;
    if (v6)
    {
      v10 = objc_msgSend(v6, "copy");
      v11 = (void *)a1[5];
      a1[5] = v10;

      if (a1[5])
      {
        v15 = objc_msgSend(objc_alloc((Class)NSPConfiguration), "initFromPreferences");
        v16 = objc_msgSend(objc_alloc((Class)NSPConfigurationSignatureInfo), "initFromPreferences");
        v17 = v16;
        if (v15 && v16)
        {
          objc_initWeak((id *)buf, a1);
          v18 = os_variant_allows_internal_security_policies("com.apple.networkserviceproxy");
          if (v18)
            v19 = -[NSObject ignoreInvalidCerts](v15, "ignoreInvalidCerts") ^ 1;
          else
            v19 = 1;
          v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject proxyConfigurationData](v15, "proxyConfigurationData"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject configServerHost](v15, "configServerHost"));
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          v25[2] = sub_100061004;
          v25[3] = &unk_1000F6108;
          objc_copyWeak(&v28, (id *)buf);
          v26 = v15;
          v27 = v9;
          v29 = v18 ^ 1;
          +[NSPConfiguration verifyConfigurationSignature:configuration:host:validateCert:completionHandler:](NSPConfiguration, "verifyConfigurationSignature:configuration:host:validateCert:completionHandler:", v17, v20, v21, v19, v25);

          objc_destroyWeak(&v28);
          objc_destroyWeak((id *)buf);
        }
        else
        {
          sub_10006130C((uint64_t)a1);
        }

        goto LABEL_14;
      }
      v24 = nplog_obj(v12, v13, v14);
      v15 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v31 = "-[NSPServer configurationSetup]";
        v23 = "%s called with null self.configuration";
        goto LABEL_20;
      }
    }
    else
    {
      v22 = nplog_obj(0, v7, v8);
      v15 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v31 = "-[NSPServer configurationSetup]";
        v23 = "%s called with null defaultConfiguration";
LABEL_20:
        _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, v23, buf, 0xCu);
      }
    }
LABEL_14:

  }
}

void sub_100060F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100060F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD *WeakRetained;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received first unlock notification.", v9, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    CFPreferencesFlushCaches();
    sub_100060C8C(WeakRetained, v7, v8);
  }

}

void sub_100061004(uint64_t a1, int a2)
{
  id *WeakRetained;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  id v29;
  void *v30;
  int v31;
  void *v32;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v5 = objc_alloc((Class)NSPPrivacyProxyConfiguration);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "proxyConfigurationData"));
    v7 = objc_msgSend(v5, "initWithData:", v6);
    objc_msgSend(*(id *)(a1 + 32), "setProxyConfiguration:", v7);

    objc_msgSend(WeakRetained[5], "merge:", *(_QWORD *)(a1 + 32));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configServerPath"));
    v9 = WeakRetained[5];
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "configServerPath"));
    if (objc_msgSend(v8, "isEqualToString:", v10))
    {
      if (*(_BYTE *)(a1 + 56))
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configServerHost"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[5], "configServerHost"));
        v13 = objc_msgSend(v11, "isEqualToString:", v12);

      }
      else
      {
        v13 = 1;
      }
    }
    else
    {
      v13 = 0;
    }

    if (a2)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "proxyConfiguration"));
      if (v17)
        v18 = v13;
      else
        v18 = 0;

      if (v18 == 1)
      {
        v22 = nplog_obj(v19, v20, v21);
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v31) = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Starting with configuration settings from disk", (uint8_t *)&v31, 2u);
        }
LABEL_20:

        sub_10006130C((uint64_t)WeakRetained);
        goto LABEL_21;
      }
    }
    else
    {
      v24 = nplog_obj(v14, v15, v16);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v29 = WeakRetained[5];
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "etag"));
        v31 = 138412290;
        v32 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Unable to verify configuration signature on disk (etag was %@)", (uint8_t *)&v31, 0xCu);

      }
    }
    v26 = nplog_obj(v19, v20, v21);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v31) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Starting and not using configuration settings on disk", (uint8_t *)&v31, 2u);
    }

    objc_msgSend(WeakRetained[5], "setEtag:", 0);
    objc_msgSend(WeakRetained[5], "setEpoch:", 0);
    objc_msgSend(WeakRetained[5], "setProxyConfiguration:", 0);
    objc_msgSend(WeakRetained[5], "setConfigurationFetchDate:", 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configServerPath"));
    objc_msgSend(WeakRetained[5], "setConfigServerPath:", v28);

    v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configServerHost"));
    objc_msgSend(WeakRetained[5], "setConfigServerHost:", v23);
    goto LABEL_20;
  }
LABEL_21:

}

void sub_10006130C(uint64_t a1)
{
  NSPConfigurationManager *v2;
  id v3;
  NSPConfigurationManager *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  pid_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[5];
  uint8_t buf[4];
  const char *v22;

  kdebug_trace(732954628, 0, 0, 0, 0);
  v2 = [NSPConfigurationManager alloc];
  v3 = *(id *)(a1 + 40);
  v4 = -[NSPConfigurationManager initWithDelegate:configuration:](v2, "initWithDelegate:configuration:", a1, v3);
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;

  if (*(_QWORD *)(a1 + 56))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100061540;
    v20[3] = &unk_1000F5450;
    v20[4] = a1;
    objc_msgSend(v9, "startOwnerModeWithEventName:handlesReceivedCallback:", CFSTR("com.apple.networkserviceproxy.file-descriptor-maintainer"), v20);

    v11 = NPGetInternalQueue(v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    xpc_set_event_stream_handler("com.apple.networkserviceproxy", v12, &stru_1000F6148);

    v14 = NPGetInternalQueue(v13);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100062828;
    v19[3] = &unk_1000F5FE0;
    v19[4] = a1;
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v15, v19);

    v16 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v16, "Ready", 1);
    v17 = getpid();
    xpc_dictionary_set_int64(v16, "PID", v17);
    xpc_set_event("com.apple.networkserviceproxy", "MessageResponse", v16);
  }
  else
  {
    v18 = nplog_obj(v6, v7, v8);
    v16 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v22 = "-[NSPServer start]";
      _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "%s called with null self.configurationManager", buf, 0xCu);
    }
  }

}

void sub_100061540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  NSObject *v8;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = kdebug_trace(732954640, 0, 0, 0, 0);
  v5 = nplog_obj(v2, v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Handling received file handles and auxiliary data", buf, 2u);
  }

  v7 = sub_100054A70(*(void **)(a1 + 32));
  v8 = objc_claimAutoreleasedReturnValue(v7);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100061614;
  block[3] = &unk_1000F5450;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(v8, block);

}

void sub_100061614(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSSet *v53;
  void *v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  char isKindOfClass;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  char v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  char v73;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  char v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  char v83;
  void *v84;
  double v85;
  void *v86;
  void *v87;
  uint64_t v88;
  char v89;
  void *v90;
  double v91;
  void *v92;
  void *v93;
  uint64_t v94;
  char v95;
  void *v96;
  double v97;
  void *v98;
  void *v99;
  uint64_t v100;
  char v101;
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  char v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  char v111;
  void *v112;
  void *v113;
  void *v114;
  uint64_t v115;
  char v116;
  void *v117;
  void *v118;
  void *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  void *v129;
  void *v130;
  void *v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  NSObject *v135;
  SCDynamicStoreRef v136;
  uint64_t v137;
  uint64_t v138;
  const __SCDynamicStore *v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  CFStringRef NetworkServiceEntity;
  void *v146;
  CFStringRef NetworkInterfaceEntity;
  void *v148;
  const __SCDynamicStore *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  CFErrorRef v162;
  CFErrorRef v163;
  CFErrorRef Error;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id location;
  __int128 buf;
  void (*v172)(uint64_t, void *);
  void *v173;
  id v174[2];
  _BYTE v175[12];

  v165 = objc_alloc_init((Class)NWParameters);
  objc_msgSend(v165, "avoidNetworkAgentWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("VPN"));
  objc_msgSend(v165, "avoidNetworkAgentWithDomain:type:", CFSTR("NetworkExtension"), CFSTR("AppVPN"));
  v2 = objc_msgSend(objc_alloc((Class)NWPathEvaluator), "initWithEndpoint:parameters:", 0, v165);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    objc_storeStrong((id *)(v3 + 104), v2);

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(void **)(v4 + 104);
  else
    v5 = 0;
  objc_msgSend(v5, "addObserver:forKeyPath:options:context:", v4, CFSTR("path"), 5, *(_QWORD *)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 && (*(_BYTE *)(v6 + 11) = 1, (v7 = *(id **)(a1 + 32)) != 0))
  {
    v8 = objc_alloc_init((Class)CWFInterface);
    v9 = v7[15];
    v7[15] = v8;

    objc_msgSend(v7[15], "activate");
    objc_initWeak(&location, v7);
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v172 = sub_1000704D0;
    v173 = &unk_1000F6488;
    objc_copyWeak(v174, &location);
    v10 = v7[15];
    objc_msgSend(v10, "setEventHandler:", &buf);

    v11 = v7[15];
    v169 = 0;
    objc_msgSend(v11, "startMonitoringEventType:error:", 2, &v169);
    v12 = v169;

    if (v12)
    {
      v16 = nplog_obj(v13, v14, v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v175 = 138412290;
        *(_QWORD *)&v175[4] = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to register for SSID changes: %@", v175, 0xCu);
      }

    }
    v18 = v7[15];
    v168 = 0;
    objc_msgSend(v18, "startMonitoringEventType:error:", 19, &v168);
    v19 = v168;

    if (v19)
    {
      v23 = nplog_obj(v20, v21, v22);
      v24 = objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v175 = 138412290;
        *(_QWORD *)&v175[4] = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to register for IPv4 changes: %@", v175, 0xCu);
      }

    }
    v25 = v7[15];
    v167 = 0;
    objc_msgSend(v25, "startMonitoringEventType:error:", 20, &v167);
    v26 = v167;

    if (v26)
    {
      v30 = nplog_obj(v27, v28, v29);
      v31 = objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v175 = 138412290;
        *(_QWORD *)&v175[4] = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to register for IPv6 changes: %@", v175, 0xCu);
      }

    }
    v32 = v7[15];
    v166 = 0;
    objc_msgSend(v32, "startMonitoringEventType:error:", 30, &v166);
    v33 = v166;

    if (v33)
    {
      v37 = nplog_obj(v34, v35, v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v175 = 138412290;
        *(_QWORD *)&v175[4] = v33;
        _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Failed to register for known network profile changes: %@", v175, 0xCu);
      }

    }
    sub_100066270((uint64_t)v7);

    objc_destroyWeak(v174);
    objc_destroyWeak(&location);
    v39 = *(_QWORD **)(a1 + 32);
  }
  else
  {
    v39 = 0;
  }
  sub_100062538(v39);
  v40 = *(_QWORD *)(a1 + 32);
  if (!v40)
    goto LABEL_104;
  if (*(_QWORD *)(v40 + 136))
    goto LABEL_26;
  v136 = SCDynamicStoreCreate(kCFAllocatorDefault, CFSTR("networkserviceproxy event agent"), (SCDynamicStoreCallBack)sub_1000713E8, 0);
  *(_QWORD *)(v40 + 136) = v136;
  if (v136)
  {
    v139 = v136;
    v140 = NPGetInternalQueue(v136);
    v141 = objc_claimAutoreleasedReturnValue(v140);
    LODWORD(v139) = SCDynamicStoreSetDispatchQueue(v139, v141);

    if ((_DWORD)v139)
    {
      NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetPvD);
      v146 = (void *)objc_claimAutoreleasedReturnValue(NetworkServiceEntity);
      NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(kCFAllocatorDefault, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, 0);
      v148 = (void *)objc_claimAutoreleasedReturnValue(NetworkInterfaceEntity);
      v149 = *(const __SCDynamicStore **)(v40 + 136);
      *(_QWORD *)&buf = v148;
      *((_QWORD *)&buf + 1) = v146;
      v150 = SCDynamicStoreSetNotificationKeys(v149, 0, (CFArrayRef)+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &buf, 2));
      if (!(_DWORD)v150)
      {
        v153 = nplog_obj(v150, v151, v152);
        v154 = objc_claimAutoreleasedReturnValue(v153);
        if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
        {
          Error = SCCopyLastError();
          *(_DWORD *)v175 = 138412290;
          *(_QWORD *)&v175[4] = Error;
          _os_log_error_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_ERROR, "Failed to update the dynamic store notification keys: %@", v175, 0xCu);

        }
      }

LABEL_26:
      sub_1000663C0(v40);
      goto LABEL_27;
    }
    v161 = nplog_obj(v142, v143, v144);
    v160 = objc_claimAutoreleasedReturnValue(v161);
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      v163 = SCCopyLastError();
      *(_DWORD *)v175 = 138412290;
      *(_QWORD *)&v175[4] = v163;
      _os_log_error_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_ERROR, "Failed to set dynamic store dispatch queue: %@", v175, 0xCu);

    }
  }
  else
  {
    v159 = nplog_obj(0, v137, v138);
    v160 = objc_claimAutoreleasedReturnValue(v159);
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      v162 = SCCopyLastError();
      *(_DWORD *)v175 = 138412290;
      *(_QWORD *)&v175[4] = v162;
      _os_log_error_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_ERROR, "Failed to create dynamic store: %@", v175, 0xCu);

    }
  }

LABEL_27:
  v44 = *(_QWORD *)(a1 + 32);
  if (v44)
  {
    v45 = nplog_obj(v41, v42, v43);
    v46 = objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Restoring server state", (uint8_t *)&buf, 2u);
    }

    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
    v48 = objc_msgSend(v47, "copyAuxiliaryDataForKey:", CFSTR("NSPServerAuxilaryData"));

    v49 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v48, v49) & 1) != 0)
      goto LABEL_92;
    v50 = objc_opt_class(NSMutableDictionary);
    v51 = objc_opt_class(NSString);
    v52 = objc_opt_class(NSDate);
    v53 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v50, v51, v52, objc_opt_class(NSNumber), 0);
    v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
    *(_QWORD *)v175 = 0;
    v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", v54, v48, v175));
    v56 = *(id *)v175;

    if (!v55 || v56)
    {
      v155 = nplog_obj(v57, v58, v59);
      v135 = objc_claimAutoreleasedReturnValue(v155);
      if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v56;
        _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_INFO, "unarchive failed with error %@", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerConfigOutage")));
      if (v60)
      {
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerConfigOutage")));
        v62 = objc_opt_class(NSNumber);
        isKindOfClass = objc_opt_isKindOfClass(v61, v62);

        if ((isKindOfClass & 1) != 0)
        {
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerConfigOutage")));
          *(_BYTE *)(v44 + 13) = objc_msgSend(v64, "BOOLValue");

        }
      }
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerTokenOutage")));
      if (v65)
      {
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerTokenOutage")));
        v67 = objc_opt_class(NSNumber);
        v68 = objc_opt_isKindOfClass(v66, v67);

        if ((v68 & 1) != 0)
        {
          v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerTokenOutage")));
          *(_BYTE *)(v44 + 14) = objc_msgSend(v69, "BOOLValue");

        }
      }
      v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyOutage")));
      if (v70)
      {
        v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyOutage")));
        v72 = objc_opt_class(NSNumber);
        v73 = objc_opt_isKindOfClass(v71, v72);

        if ((v73 & 1) != 0)
        {
          v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyOutage")));
          *(_BYTE *)(v44 + 15) = objc_msgSend(v74, "BOOLValue");

        }
      }
      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyNetworkOutage")));
      if (v75)
      {
        v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyNetworkOutage")));
        v77 = objc_opt_class(NSNumber);
        v78 = objc_opt_isKindOfClass(v76, v77);

        if ((v78 & 1) != 0)
        {
          v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyNetworkOutage")));
          *(_BYTE *)(v44 + 16) = objc_msgSend(v79, "BOOLValue");

        }
      }
      v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyOutageRestoreDate")));
      if (v80)
      {
        v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyOutageRestoreDate")));
        v82 = objc_opt_class(NSDate);
        v83 = objc_opt_isKindOfClass(v81, v82);

        if ((v83 & 1) != 0)
        {
          v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerProxyOutageRestoreDate")));
          objc_msgSend(v84, "timeIntervalSinceNow");
          if (v85 > 10.0)
            objc_storeStrong((id *)(v44 + 208), v84);

        }
      }
      v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerODoHOutageRestoreDate")));
      if (v86)
      {
        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerODoHOutageRestoreDate")));
        v88 = objc_opt_class(NSDate);
        v89 = objc_opt_isKindOfClass(v87, v88);

        if ((v89 & 1) != 0)
        {
          v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerODoHOutageRestoreDate")));
          objc_msgSend(v90, "timeIntervalSinceNow");
          if (v91 > 10.0)
            objc_storeStrong((id *)(v44 + 216), v90);

        }
      }
      v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerODoHAuthOutageRestoreDate")));
      if (v92)
      {
        v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerODoHAuthOutageRestoreDate")));
        v94 = objc_opt_class(NSDate);
        v95 = objc_opt_isKindOfClass(v93, v94);

        if ((v95 & 1) != 0)
        {
          v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerODoHAuthOutageRestoreDate")));
          objc_msgSend(v96, "timeIntervalSinceNow");
          if (v97 > 10.0)
            objc_storeStrong((id *)(v44 + 240), v96);

        }
      }
      v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerCaptiveOutage")));
      if (v98)
      {
        v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerCaptiveOutage")));
        v100 = objc_opt_class(NSNumber);
        v101 = objc_opt_isKindOfClass(v99, v100);

        if ((v101 & 1) != 0)
        {
          v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerCaptiveOutage")));
          *(_BYTE *)(v44 + 19) = objc_msgSend(v102, "BOOLValue");

        }
      }
      v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerCaptiveOutageWaitingForUserActivity")));
      if (v103)
      {
        v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerCaptiveOutageWaitingForUserActivity")));
        v105 = objc_opt_class(NSNumber);
        v106 = objc_opt_isKindOfClass(v104, v105);

        if ((v106 & 1) != 0)
        {
          v107 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerCaptiveOutageWaitingForUserActivity")));
          *(_BYTE *)(v44 + 20) = objc_msgSend(v107, "BOOLValue");

        }
      }
      v108 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("MPTCPProxyStatus")));
      if (v108)
      {
        v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("MPTCPProxyStatus")));
        v110 = objc_opt_class(NSNumber);
        v111 = objc_opt_isKindOfClass(v109, v110);

        if ((v111 & 1) != 0)
        {
          v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("MPTCPProxyStatus")));
          *(_BYTE *)(v44 + 23) = objc_msgSend(v112, "BOOLValue");

        }
      }
      v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerFraudAlert")));
      if (v113)
      {
        v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerFraudAlert")));
        v115 = objc_opt_class(NSNumber);
        v116 = objc_opt_isKindOfClass(v114, v115);

        if ((v116 & 1) != 0)
        {
          v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerFraudAlert")));
          *(_BYTE *)(v44 + 22) = objc_msgSend(v117, "BOOLValue");

        }
      }
      v118 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerLastGeohash")));
      if (v118)
      {
        v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerLastGeohash")));
        v120 = objc_opt_class(NSString);
        v121 = objc_opt_isKindOfClass(v119, v120);

        if ((v121 & 1) != 0)
        {
          v122 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerLastGeohash")));
          v123 = *(void **)(v44 + 352);
          *(_QWORD *)(v44 + 352) = v122;

        }
      }
      v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerLastCountryPlusTimezone")));
      if (v124)
      {
        v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerLastCountryPlusTimezone")));
        v126 = objc_opt_class(NSString);
        v127 = objc_opt_isKindOfClass(v125, v126);

        if ((v127 & 1) != 0)
        {
          v128 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerLastCountryPlusTimezone")));
          v129 = *(void **)(v44 + 360);
          *(_QWORD *)(v44 + 360) = v128;

        }
      }
      v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerPrivateCloudComputeEnvironment")));
      if (!v130)
        goto LABEL_91;
      v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerPrivateCloudComputeEnvironment")));
      v132 = objc_opt_class(NSString);
      v133 = objc_opt_isKindOfClass(v131, v132);

      if ((v133 & 1) == 0)
        goto LABEL_91;
      v134 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "objectForKeyedSubscript:", CFSTR("NSPServerPrivateCloudComputeEnvironment")));
      v135 = *(NSObject **)(v44 + 368);
      *(_QWORD *)(v44 + 368) = v134;
    }

LABEL_91:
LABEL_92:

    v156 = *(_QWORD *)(a1 + 32);
    goto LABEL_93;
  }
LABEL_104:
  v156 = 0;
LABEL_93:
  sub_1000625E4(v156);
  sub_100062748(*(_QWORD *)(a1 + 32));
  v157 = *(_QWORD *)(a1 + 32);
  if (v157)
    v158 = *(void **)(v157 + 56);
  else
    v158 = 0;
  objc_msgSend(v158, "setup");
  sub_100060920(*(_QWORD *)(a1 + 32));

}

void sub_100062500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_QWORD *sub_100062538(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v8[5];

  if (result)
  {
    v1 = result;
    v2 = (void *)result[16];
    if (!v2)
    {
      v3 = objc_alloc((Class)CoreTelephonyClient);
      v4 = NPGetInternalQueue(v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v6 = objc_msgSend(v3, "initWithQueue:", v5);
      v7 = (void *)v1[16];
      v1[16] = v6;

      v2 = (void *)v1[16];
    }
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100070AE0;
    v8[3] = &unk_1000F64D8;
    v8[4] = v1;
    return objc_msgSend(v2, "getCurrentDataSubscriptionContext:", v8);
  }
  return result;
}

void sub_1000625E4(uint64_t a1)
{
  id v2;
  void *v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  uint8_t v13[16];
  uint8_t buf[16];

  if (a1)
  {
    v2 = *(id *)(a1 + 104);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "path"));
    if ((objc_msgSend(v3, "hasKernelExtensionFilter") & 1) != 0)
    {
      v4 = 1;
    }
    else
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 104), "path"));
      v4 = objc_msgSend(v5, "hasCustomPFRules");

    }
    if (v4 != (*(_BYTE *)(a1 + 12) != 0))
    {
      *(_BYTE *)(a1 + 12) = v4;
      if (*(_BYTE *)(a1 + 9))
      {
        v9 = nplog_obj(v6, v7, v8);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        if ((v4 & 1) != 0)
        {
          if (v11)
          {
            *(_WORD *)v13 = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "system is incompatible", v13, 2u);
          }

          objc_msgSend(*(id *)(a1 + 72), "reportSystemIncompatibility");
          objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), 0, 0);
        }
        else
        {
          if (v11)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "system is compatible", buf, 2u);
          }

          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mergeProxyTrafficStateWithCurrentPolicy"));
          objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), v12, 1);

        }
      }
    }
  }
}

void sub_100062748(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000312C;
    v5[4] = sub_100054A8C;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.resetUEADates");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100063408;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_10006280C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100062828(uint64_t a1, void *a2)
{
  id v3;
  const char *string;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  const char *v17;

  v3 = a2;
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
  v5 = strcmp(string, "com.apple.networkextension.app-paths-changed");
  if ((_DWORD)v5)
  {
    v8 = strcmp(string, "com.apple.networkserviceproxy.reset");
    if (!(_DWORD)v8)
    {
      v11 = nplog_obj(v8, v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 136315138;
        v17 = "com.apple.networkserviceproxy.reset";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received a %s notification, resetting", (uint8_t *)&v16, 0xCu);
      }

      sub_10006298C(*(_QWORD *)(a1 + 32));
      exit(0);
    }
  }
  else
  {
    v13 = nplog_obj(v5, v6, v7);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "UUID cache changed", (uint8_t *)&v16, 2u);
    }

    v15 = *(_QWORD *)(a1 + 32);
    if (v15 && *(_BYTE *)(v15 + 9))
    {
      objc_msgSend(*(id *)(v15 + 40), "setup");
      sub_10006363C(v15);
    }
  }

}

void sub_10006298C(uint64_t a1)
{
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 56), "resetConfigurationManager");
    objc_msgSend(*(id *)(a1 + 40), "setup");
    sub_10006363C(a1);
  }
}

void sub_100062A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = 138412290;
    v7 = a1;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%@ forcePathChange called", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100062C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100062C6C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  unsigned __int8 v33;
  uint64_t v34;
  id Property;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  int v56;
  void *v57;
  __int16 v58;
  void *v59;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 104);
  else
    v3 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));
  if (objc_msgSend(v4, "status") == (id)1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interface"));
    v8 = v5;
    if (v5)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interfaceName"));
      v9 = v5;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_QWORD *)(a1 + 32);
    if (!v10)
    {
      v16 = 0;
      goto LABEL_15;
    }
    if (*(_BYTE *)(v10 + 8))
    {
      v11 = nplog_obj(v5, v6, v7);
      v12 = objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v56) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Retry subscription check", (uint8_t *)&v56, 2u);
      }

      sub_1000657BC(v10, v13, v14);
      v15 = (void *)os_transaction_create("com.apple.networkserviceproxy.subscriptionCheckOnPathChange");
      sub_100064D28((id *)v10);

    }
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v16 = *(_QWORD **)(a1 + 32);
  if (v16)
    v16 = (_QWORD *)v16[11];
LABEL_15:
  v17 = v16;
  v20 = v17;
  if (!v8 || v17)
  {
    v29 = *(_QWORD *)(a1 + 32);
    if (!v29 || (v30 = *(void **)(v29 + 88)) == 0 || !v9)
    {

      goto LABEL_30;
    }
    v31 = v30;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "interfaceName"));
    v33 = objc_msgSend(v32, "isEqualToString:", v9);

    if ((v33 & 1) != 0)
      goto LABEL_30;
  }
  v21 = nplog_obj(v17, v18, v19);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    v23 = *(_QWORD **)(a1 + 32);
    if (v23)
      v23 = (_QWORD *)v23[11];
    v24 = v23;
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "interfaceName"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "interfaceName"));
    v56 = 138412546;
    v57 = v25;
    v58 = 2112;
    v59 = v26;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Primary interface changed from %@ to %@", (uint8_t *)&v56, 0x16u);

  }
  v27 = *(_QWORD *)(a1 + 32);
  if (!v27 || (objc_storeStrong((id *)(v27 + 88), v8), (v28 = *(_QWORD *)(a1 + 32)) == 0))
  {
    v34 = 0;
    goto LABEL_44;
  }
  *(_DWORD *)(v28 + 36) = 0;
LABEL_30:
  v34 = *(_QWORD *)(a1 + 32);
  if (v34)
  {
    if (!*(_QWORD *)(v34 + 88))
      goto LABEL_62;
    Property = objc_getProperty((id)v34, v18, 272, 1);
    v36 = *(_QWORD *)(a1 + 32);
    if (v36)
      v37 = *(void **)(v36 + 88);
    else
      v37 = 0;
    v38 = Property;
    v39 = objc_msgSend(v37, "interfaceIndex");
    if (v38)
    {
      v40 = v39;
      v41 = v38[3];
      if (v41)
        NEFlowDirectorSetDelegateInterface(v41, v40);
    }

    v34 = *(_QWORD *)(a1 + 32);
    if (v34)
    {
LABEL_62:
      if (!*(_QWORD *)(v34 + 56)
        || (objc_msgSend(*(id *)(v34 + 56), "handlePathChange:", v4), (v34 = *(_QWORD *)(a1 + 32)) != 0))
      {
        if (!*(_QWORD *)(v34 + 64)
          || (objc_msgSend(*(id *)(v34 + 64), "handlePathChange:", v4), (v34 = *(_QWORD *)(a1 + 32)) != 0))
        {
          if (*(_QWORD *)(v34 + 200))
          {
            sub_10004D7E4(*(_QWORD *)(v34 + 200), v4);
            v34 = *(_QWORD *)(a1 + 32);
          }
        }
      }
    }
  }
LABEL_44:
  v42 = sub_1000630B8(v34);
  if ((_DWORD)v42)
  {
    v45 = *(_QWORD *)(a1 + 32);
    if (v45)
    {
      if (*(_BYTE *)(v45 + 19))
      {
        v46 = nplog_obj(v42, v43, v44);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          v48 = *(void **)(a1 + 32);
          v56 = 138412290;
          v57 = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "%@ Primary interface changed to non Wi-Fi, reporting service active ...", (uint8_t *)&v56, 0xCu);
        }

        sub_10006315C(*(_QWORD *)(a1 + 32), 0, v49);
      }
      else if (*(_BYTE *)(v45 + 20))
      {
        v50 = nplog_obj(v42, v43, v44);
        v51 = objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          v52 = *(void **)(a1 + 32);
          v56 = 138412290;
          v57 = v52;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "%@ Primary interface changed to non Wi-Fi, removing pending outage notification", (uint8_t *)&v56, 0xCu);
        }

        v53 = *(_QWORD *)(a1 + 32);
        if (v53)
        {
          *(_BYTE *)(v53 + 20) = 0;
          sub_1000639C4(v53);
          sub_10006F374(v53);
        }
      }
    }
  }
  sub_1000625E4(*(_QWORD *)(a1 + 32));
  sub_100063234(*(_QWORD *)(a1 + 32));
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v55 = *(void **)(v54 + 40);
  *(_QWORD *)(v54 + 40) = 0;

}

uint64_t sub_1000630B8(uint64_t result)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (result)
  {
    v1 = result;
    v2 = *(id *)(result + 104);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "path"));
    if (objc_msgSend(v3, "status") == (id)1)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 104), "path"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interface"));
      v6 = objc_msgSend(v5, "type");

      if (v6 != (id)1)
        return 1;
    }
    else
    {

    }
    return 0;
  }
  return result;
}

void sub_10006315C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint8_t v7[16];

  if (a1)
  {
    if ((_DWORD)a2)
    {
      *(_BYTE *)(a1 + 19) = 1;
      v4 = nplog_obj(a1, a2, a3);
      v5 = objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "reporting captive network outage", v7, 2u);
      }

      objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), 0, 0);
      sub_1000639C4(a1);
      *(_BYTE *)(a1 + 20) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 19) = 0;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mergeProxyTrafficStateWithCurrentPolicy"));
      objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), v6, 0);
      sub_1000639C4(a1);

    }
    sub_10006F374(a1);
  }
}

void sub_100063234(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  int *v13;
  char *v14;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  void *v18;
  char __str[16];
  __int128 v20;

  if (a1)
  {
    v2 = *(id *)(a1 + 88);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "interfaceName"));

    if (*(int *)(a1 + 32) >= 1 && v3 != 0)
    {
      *(_OWORD *)__str = 0u;
      v20 = 0u;
      snprintf(__str, 0x10uLL, "%s", (const char *)objc_msgSend(v3, "UTF8String"));
      LODWORD(v20) = -1;
      v5 = ioctl(*(_DWORD *)(a1 + 32), 0xC020698AuLL, __str);
      if ((v5 & 0x80000000) != 0)
      {
        v11 = nplog_obj(v5, v6, v7);
        v12 = objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = __error();
          v14 = strerror(*v13);
          *(_DWORD *)buf = 136315138;
          v16 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to get link quality metrics %s", buf, 0xCu);
        }

      }
      else if ((_DWORD)v20 != *(_DWORD *)(a1 + 36))
      {
        v8 = nplog_obj(v5, v6, v7);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NPUtilities stringFromLinkQualityValue:](NPUtilities, "stringFromLinkQualityValue:", v20));
          *(_DWORD *)buf = 138412546;
          v16 = (char *)v3;
          v17 = 2112;
          v18 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Interface %@, link quality changed to %@", buf, 0x16u);

        }
        *(_DWORD *)(a1 + 36) = v20;
        objc_msgSend(*(id *)(a1 + 64), "handleLinkQualityChange:");
      }
    }

  }
}

void sub_100063408(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  double v8;
  int64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  double v16;
  int64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  void *v25;
  double v26;
  int64_t v27;
  uint64_t v28;
  void *v29;
  double v30;
  int64_t v31;
  uint64_t v32;
  void *v33;
  double v34;
  int64_t v35;
  uint64_t v36;
  void *v37;
  xpc_object_t xdict;

  xdict = xpc_dictionary_create(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    v3 = *(void **)(v2 + 40);
  else
    v3 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resurrectionDate"));

  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      v6 = *(void **)(v5 + 40);
    else
      v6 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "resurrectionDate"));
    objc_msgSend(v7, "timeIntervalSinceReferenceDate");
    v9 = (uint64_t)v8;

    xpc_dictionary_set_int64(xdict, "ResurrectionDate", v9);
  }
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    v11 = *(void **)(v10 + 64);
  else
    v11 = 0;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "tokenIssuanceRestrictedUntilDate"));

  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
      v14 = *(void **)(v13 + 64);
    else
      v14 = 0;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "tokenIssuanceRestrictedUntilDate"));
    objc_msgSend(v15, "timeIntervalSinceReferenceDate");
    v17 = (uint64_t)v16;

  }
  else
  {
    v17 = -1;
  }
  xpc_dictionary_set_int64(xdict, "TokenIssuanceRestrictedUntilDate", v17);
  v18 = *(_QWORD *)(a1 + 32);
  if (v18 && (v19 = *(void **)(v18 + 168)) != 0)
  {
    objc_msgSend(v19, "timeIntervalSinceReferenceDate");
    v21 = (uint64_t)v20;
  }
  else
  {
    v21 = -1;
  }
  xpc_dictionary_set_int64(xdict, "SubscriptionCheckDate", v21);
  v22 = *(_QWORD *)(a1 + 32);
  if (v22 && *(_BYTE *)(v22 + 8))
    v23 = 1;
  else
    v23 = -1;
  xpc_dictionary_set_int64(xdict, "SubscriptionCheckOnNetworkChange", v23);
  v24 = *(_QWORD *)(a1 + 32);
  if (v24 && (v25 = *(void **)(v24 + 208)) != 0)
  {
    objc_msgSend(v25, "timeIntervalSinceReferenceDate");
    v27 = (uint64_t)v26;
  }
  else
  {
    v27 = -1;
  }
  xpc_dictionary_set_int64(xdict, "ProxyRestoreDate", v27);
  v28 = *(_QWORD *)(a1 + 32);
  if (v28 && (v29 = *(void **)(v28 + 216)) != 0)
  {
    objc_msgSend(v29, "timeIntervalSinceReferenceDate");
    v31 = (uint64_t)v30;
  }
  else
  {
    v31 = -1;
  }
  xpc_dictionary_set_int64(xdict, "ODoHRestoreDate", v31);
  v32 = *(_QWORD *)(a1 + 32);
  if (v32 && (v33 = *(void **)(v32 + 240)) != 0)
  {
    objc_msgSend(v33, "timeIntervalSinceReferenceDate");
    v35 = (uint64_t)v34;
  }
  else
  {
    v35 = -1;
  }
  xpc_dictionary_set_int64(xdict, "odohAuthRestoreDate", v35);
  xpc_set_event("com.apple.networkserviceproxy", "MessageResponse", xdict);
  v36 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v37 = *(void **)(v36 + 40);
  *(_QWORD *)(v36 + 40) = 0;

}

void sub_10006363C(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  SEL v9;
  id Property;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  SEL v20;
  id v21;
  uint8_t v22[16];
  uint8_t buf[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "enabled"));
  if (objc_msgSend(v2, "BOOLValue"))
  {
    v3 = *(unsigned __int8 *)(a1 + 9);

    if (!v3)
    {
      v7 = nplog_obj(v4, v5, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Starting the provider", buf, 2u);
      }

      *(_BYTE *)(a1 + 9) = 1;
      Property = objc_getProperty((id)a1, v9, 272, 1);
      sub_10009BE28((uint64_t)Property, v11, v12);
      return;
    }
  }
  else
  {

  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "enabled"));
  if ((objc_msgSend(v13, "BOOLValue") & 1) != 0)
  {

LABEL_14:
    sub_100060920(a1);
    return;
  }
  v14 = *(unsigned __int8 *)(a1 + 9);

  if (!v14)
    goto LABEL_14;
  v18 = nplog_obj(v15, v16, v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Stopping the provider", v22, 2u);
  }

  *(_BYTE *)(a1 + 9) = 0;
  v21 = objc_getProperty((id)a1, v20, 272, 1);
  sub_10009BD94((uint64_t)v21, 1);
  sub_100060920(a1);
}

void sub_1000637A0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000312C;
    v5[4] = sub_100054A8C;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.applyConfiguration");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10006387C;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_100063864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006387C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 40), "setup");
    sub_10006363C(v2);
  }
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

uint64_t sub_1000638C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned int v6;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "conditionsCount"))
    {
      v5 = 0;
      while (1)
      {
        v6 = objc_msgSend(v4, "conditionsAtIndex:", v5) - 2;
        if (v6 < 0x14 && ((0xC0041u >> v6) & 1) != 0)
          break;
        if (++v5 >= (unint64_t)objc_msgSend(v4, "conditionsCount"))
          goto LABEL_7;
      }
      a1 = 1;
    }
    else
    {
LABEL_7:
      a1 = 0;
    }
  }

  return a1;
}

void sub_1000639C4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  id v31;
  uint8_t buf[4];
  id v33;

  if (a1)
  {
    v2 = objc_alloc_init((Class)NSMutableDictionary);
    v5 = nplog_obj(v2, v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Saving server state", buf, 2u);
    }

    v7 = *(_BYTE *)(a1 + 13) == 0;
    if (*(_BYTE *)(a1 + 13))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("NSPServerConfigOutage"));

    }
    if (*(_BYTE *)(a1 + 14))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("NSPServerTokenOutage"));

      v7 = 0;
    }
    if (*(_BYTE *)(a1 + 15))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, CFSTR("NSPServerProxyOutage"));

      v7 = 0;
    }
    if (*(_BYTE *)(a1 + 16))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("NSPServerProxyNetworkOutage"));

      v7 = 0;
    }
    v12 = *(_QWORD *)(a1 + 208);
    if (v12)
    {
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("NSPServerProxyOutageRestoreDate"));
      v7 = 0;
    }
    if (*(_BYTE *)(a1 + 17))
    {
      v13 = *(_QWORD *)(a1 + 216);
      if (v13)
      {
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, CFSTR("NSPServerODoHOutageRestoreDate"));
        v7 = 0;
      }
    }
    if (*(_BYTE *)(a1 + 18))
    {
      v14 = *(_QWORD *)(a1 + 240);
      if (v14)
      {
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("NSPServerODoHAuthOutageRestoreDate"));
        v7 = 0;
      }
    }
    if (*(_BYTE *)(a1 + 19))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("NSPServerCaptiveOutage"));

      v7 = 0;
    }
    if (*(_BYTE *)(a1 + 20))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("NSPServerCaptiveOutageWaitingForUserActivity"));

      v7 = 0;
    }
    if (*(_BYTE *)(a1 + 23))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v17, CFSTR("MPTCPProxyStatus"));

      v7 = 0;
    }
    if (*(_BYTE *)(a1 + 22))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, CFSTR("NSPServerFraudAlert"));

      v7 = 0;
    }
    v19 = *(_QWORD *)(a1 + 352);
    if (v19)
    {
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v19, CFSTR("NSPServerLastGeohash"));
      v7 = 0;
    }
    v20 = *(_QWORD *)(a1 + 360);
    if (v20)
    {
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v20, CFSTR("NSPServerLastCountryPlusTimezone"));
      v21 = *(_QWORD *)(a1 + 368);
      if (!v21)
        goto LABEL_35;
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 368);
      if (!v21)
      {
        if (v7)
        {
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
          objc_msgSend(v30, "setAuxiliaryData:forKey:", CFSTR("NIL"), CFSTR("NSPServerAuxilaryData"));

          v23 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
          objc_msgSend(v23, "commit");
LABEL_43:

          return;
        }
LABEL_35:
        v31 = 0;
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, &v31));
        v23 = v31;
        v26 = nplog_obj(v23, v24, v25);
        v27 = objc_claimAutoreleasedReturnValue(v26);
        v28 = v27;
        if (!v22 || v23)
        {
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v33 = v23;
            _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "archivedDataWithRootObject for server data failed with error: %@", buf, 0xCu);
          }
        }
        else
        {
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Saving server data in UEA", buf, 2u);
          }

          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
          objc_msgSend(v29, "setAuxiliaryData:forKey:", v22, CFSTR("NSPServerAuxilaryData"));

          v28 = objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
          -[NSObject commit](v28, "commit");
        }

        goto LABEL_43;
      }
    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v21, CFSTR("NSPServerPrivateCloudComputeEnvironment"));
    goto LABEL_35;
  }
}

void sub_100064C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100064D18(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 200), a2);
}

void sub_100064D28(id *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned int v6;
  _QWORD v7[4];
  id v8;
  id location;

  if (a1)
  {
    v2 = a1[5];
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cloudSubscriptionCheckEnabled"));
    if (v3)
    {
      v4 = (void *)v3;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "cloudSubscriptionCheckEnabled"));
      v6 = objc_msgSend(v5, "BOOLValue");

      if (!v6)
        return;
    }
    else
    {

    }
    objc_initWeak(&location, a1);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10006E28C;
    v7[3] = &unk_1000F6378;
    objc_copyWeak(&v8, &location);
    +[CSFFeatureManager requestFeatureWithId:completion:](CSFFeatureManager, "requestFeatureWithId:completion:", CFSTR("networking.privacy.subscriber"), v7);
    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }
}

void sub_100064E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100064E40(uint64_t *val)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD v10[4];
  id v11;
  id location;
  uint8_t buf[4];
  const char *v14;

  if (val && !val[18])
  {
    objc_initWeak(&location, val);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10006E898;
    v10[3] = &unk_1000F57C0;
    objc_copyWeak(&v11, &location);
    v2 = objc_claimAutoreleasedReturnValue(+[CSFFeatureManager registerForFeatureChangeNotificationsUsingBlock:](CSFFeatureManager, "registerForFeatureChangeNotificationsUsingBlock:", v10));
    v4 = (void *)val[18];
    v3 = val + 18;
    *v3 = v2;

    if (!*v3)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v14 = "-[NSPServer registerForPrivacyProxySubscriptionChanges]";
        _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "%s called with null self.featureChangeToken", buf, 0xCu);
      }

    }
    objc_destroyWeak(&v11);
    objc_destroyWeak(&location);
  }
}

void sub_100064F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100064FB4(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  int v23;
  const char *v24;

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "checking trial config version", (uint8_t *)&v23, 2u);
    }

    v6 = a1[28];
    if (v6
      || (v7 = objc_claimAutoreleasedReturnValue(+[TRIClient clientWithIdentifier:](TRIClient, "clientWithIdentifier:", 265)),
          v8 = a1[28],
          a1[28] = (id)v7,
          v8,
          (v6 = a1[28]) != 0))
    {
      objc_msgSend(v6, "refresh");
      v11 = a1[28];
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "levelForFactor:withNamespaceName:", CFSTR("configVersionPull"), CFSTR("NETWORK_SERVICE_PROXY_CONFIG_UPDATE")));

      v16 = nplog_obj(v13, v14, v15);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v23 = 138412290;
        v24 = (const char *)v12;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Trilevel for config pull version %@", (uint8_t *)&v23, 0xCu);
      }

      if (v12 && -[NSObject longValue](v12, "longValue"))
      {
        v18 = -[NSObject longValue](v12, "longValue");
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "trialConfigVersion"));
        v20 = objc_msgSend(v19, "longValue");

        if (v18 != v20)
        {
          v21 = a1[7];
          objc_msgSend(v21, "setConfigurationTrialVersion:", -[NSObject longValue](v12, "longValue"));

        }
      }
    }
    else
    {
      v22 = nplog_obj(0, v9, v10);
      v12 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        v23 = 136315138;
        v24 = "-[NSPServer checkTrialConfigVersion]";
        _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "%s called with null self.trialClient", (uint8_t *)&v23, 0xCu);
      }
    }

  }
}

void sub_1000651CC(id *a1)
{
  void *v2;
  double v3;
  int64_t v4;
  xpc_object_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  void *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD handler[4];
  id v27;
  id location[2];

  if (a1)
  {
    if (sub_10006C224((uint64_t)a1))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "resetTomorrowDate"));
      objc_msgSend(v2, "timeIntervalSinceNow");
      v4 = (uint64_t)v3;

      v5 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REPEATING, 0);
      xpc_dictionary_set_int64(v5, XPC_ACTIVITY_DELAY, v4);
      xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
      xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
      xpc_dictionary_set_int64(v5, XPC_ACTIVITY_GRACE_PERIOD, 10800);
      xpc_dictionary_set_string(v5, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      objc_initWeak(location, a1);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10006C504;
      handler[3] = &unk_1000F6098;
      objc_copyWeak(&v27, location);
      xpc_activity_register("com.apple.networkserviceproxy.reset-tomorrow", v5, handler);
      objc_destroyWeak(&v27);
      objc_destroyWeak(location);

      return;
    }
    xpc_activity_unregister("com.apple.networkserviceproxy.reset-tomorrow");
    if (sub_10006C374((uint64_t)a1))
    {
      v6 = objc_msgSend(a1[9], "hasPausedApps");
      v9 = (int)v6;
      if ((_DWORD)v6)
      {
        v10 = nplog_obj(v6, v7, v8);
        v11 = objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(location[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Resetting all paused apps, date is no longer tomorrow", (uint8_t *)location, 2u);
        }

        objc_msgSend(a1[9], "clearAllPausedApps");
      }
      v12 = a1[5];
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "userTier"));
      if (objc_msgSend(v13, "unsignedIntegerValue") == (id)1)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "willResetSubscriberTierTomorrow"));
        v15 = objc_msgSend(v14, "BOOLValue");

        if (v15)
        {
          v19 = nplog_obj(v16, v17, v18);
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(location[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Resetting user tier to subscriber, date is no longer tomorrow", (uint8_t *)location, 2u);
          }

          v21 = objc_msgSend(a1[7], "setUserTier:resetDate:clearResetDate:changeSource:", 2, 0, 1, 2);
          if ((v21 & 1) == 0)
          {
            v24 = nplog_obj(v21, v22, v23);
            v25 = objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              LOWORD(location[0]) = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to set user tier to subscriber", (uint8_t *)location, 2u);
            }

          }
          goto LABEL_19;
        }
      }
      else
      {

      }
      objc_msgSend(a1[7], "clearResetDate");
LABEL_19:
      if (v9)
        sub_10006C838((uint64_t)a1);
    }
  }
}

void sub_1000654D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100065744(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  if (a1)
  {
    *(_BYTE *)(a1 + 17) = 0;
    v2 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = 0;

    v3 = *(NSObject **)(a1 + 184);
    if (v3)
    {
      dispatch_source_cancel(v3);
      v4 = *(void **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = 0;

    }
    *(_BYTE *)(a1 + 18) = 0;
    v5 = *(void **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = 0;

    v6 = *(NSObject **)(a1 + 192);
    if (v6)
    {
      dispatch_source_cancel(v6);
      v7 = *(void **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = 0;

    }
  }
}

void sub_1000657BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint8_t v9[16];

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "reset subscription check timer", v9, 2u);
    }

    v6 = *(NSObject **)(a1 + 152);
    if (v6)
    {
      dispatch_source_cancel(v6);
      v7 = *(void **)(a1 + 152);
      *(_QWORD *)(a1 + 152) = 0;

    }
    v8 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_BYTE *)(a1 + 8) = 0;

    sub_100062748(a1);
  }
}

void sub_100065858(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 144))
    {
      +[CSFFeatureManager unregisterForFeatureChangeNotificationsUsingObserver:](CSFFeatureManager, "unregisterForFeatureChangeNotificationsUsingObserver:");
      v2 = *(void **)(a1 + 144);
      *(_QWORD *)(a1 + 144) = 0;

    }
  }
}

void sub_1000658A0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;

  if (a1)
  {
    v2 = NPGetInternalQueue(a1);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    xpc_set_event_stream_handler("com.apple.distnoted.matching", v3, &stru_1000F63E8);

    v7 = nplog_obj(v4, v5, v6);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = 138412290;
      v10 = a1;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%@ un-registered for apps installation/uninstallation event", (uint8_t *)&v9, 0xCu);
    }

  }
}

void sub_100065970(uint64_t a1)
{
  NSObject *v2;
  void *v3;

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 320);
    if (v2)
    {
      dispatch_source_cancel(v2);
      v3 = *(void **)(a1 + 320);
      *(_QWORD *)(a1 + 320) = 0;

    }
    *(_DWORD *)(a1 + 36) = 0;
  }
}

void sub_1000659AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint8_t v8[16];

  v1 = objc_opt_self(a1);
  v4 = nplog_obj(v1, v2, v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "remove server userevent agent data", v8, 2u);
  }

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v6, "setAuxiliaryData:forKey:", CFSTR("NIL"), CFSTR("NSPServerAuxilaryData"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  objc_msgSend(v7, "commit");

}

void sub_100065A58(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 232);
    if (v2)
    {
      v3 = *(id *)(a1 + 224);
      objc_msgSend(v3, "removeUpdateHandlerForToken:", v2);

      v4 = *(void **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = 0;

    }
    v5 = *(void **)(a1 + 224);
    *(_QWORD *)(a1 + 224) = 0;

  }
}

void sub_1000661BC(_BYTE *a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];

  if (objc_getProperty(a1, a2, 272, 1))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
    objc_msgSend(v5, "removePoliciesForMPTCPConverterProxy:", 1);

    a1[23] = 0;
    sub_1000639C4((uint64_t)a1);
  }
  else
  {
    v6 = nplog_obj(0, v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "flow divert provider is unavailable", v8, 2u);
    }

  }
}

void sub_100066270(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint8_t v16[16];

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "currentKnownNetworkProfile"));
    v5 = v2;
    if (v2)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "networkName"));
      if (!v6)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "currentScanResult"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "networkName"));

      }
      v8 = objc_msgSend(v5, "isPrivacyProxyEnabled");
      v9 = *(void **)(a1 + 72);
      if ((v8 & 1) != 0)
      {
        objc_msgSend(v9, "reportActiveOnWiFiName:", v6);
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
        v11 = v10;
        v12 = 0;
      }
      else
      {
        objc_msgSend(v9, "reportDisabledOnWiFiName:", v6);
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
        v11 = v10;
        v12 = 1;
      }
      objc_msgSend(v10, "wifiDisabled:", v12);

    }
    else
    {
      v13 = nplog_obj(0, v3, v4);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "No current Wi-Fi network, clearing state", v16, 2u);
      }

      objc_msgSend(*(id *)(a1 + 72), "clearNetworkStatusForType:", 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
      objc_msgSend(v15, "wifiDisabled:", 0);

    }
  }
}

void sub_1000663C0(uint64_t a1)
{
  const __SCPreferences *v2;
  uint64_t v3;
  uint64_t v4;
  const __SCPreferences *v5;
  const __SCNetworkSet *v6;
  uint64_t v7;
  uint64_t v8;
  const __SCNetworkSet *v9;
  CFArrayRef v10;
  uint64_t v11;
  uint64_t v12;
  const __CFArray *v13;
  id v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  const __SCNetworkService *ValueAtIndex;
  SCNetworkInterfaceRef Interface;
  const __SCNetworkInterface *v20;
  CFStringRef BSDName;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  __CFError *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  CFErrorRef v41;
  CFErrorRef v42;
  CFErrorRef Error;
  id v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  uint8_t buf[4];
  CFErrorRef v51;

  if (!a1)
    return;
  v2 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, CFSTR("networkserviceproxy"), 0, kSCPreferencesUseEntitlementAuthorization);
  if (v2)
  {
    v5 = v2;
    v6 = SCNetworkSetCopyCurrent(v2);
    if (v6)
    {
      v9 = v6;
      v10 = SCNetworkSetCopyServices(v6);
      if (v10)
      {
        v13 = v10;
        v14 = objc_alloc_init((Class)NSMutableArray);
        Count = CFArrayGetCount(v13);
        if (Count >= 1)
        {
          v16 = Count;
          for (i = 0; i != v16; ++i)
          {
            ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v13, i);
            if (SCNetworkServiceGetEnabled(ValueAtIndex))
            {
              Interface = SCNetworkServiceGetInterface(ValueAtIndex);
              if (Interface)
              {
                v20 = Interface;
                if (SCNetworkInterfaceGetDisablePrivateRelay())
                {
                  BSDName = SCNetworkInterfaceGetBSDName(v20);
                  v22 = (void *)objc_claimAutoreleasedReturnValue(BSDName);
                  if (v22)
                    objc_msgSend(v14, "addObject:", v22);

                }
              }
            }
          }
        }
        CFRelease(v9);
        CFRelease(v13);
        CFRelease(v5);
        goto LABEL_26;
      }
      v27 = nplog_obj(0, v11, v12);
      v28 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        Error = SCCopyLastError();
        *(_DWORD *)buf = 138412290;
        v51 = Error;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to copy services: %@", buf, 0xCu);

      }
      CFRelease(v9);
    }
    else
    {
      v25 = nplog_obj(0, v7, v8);
      v26 = objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v42 = SCCopyLastError();
        *(_DWORD *)buf = 138412290;
        v51 = v42;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to get current set: %@", buf, 0xCu);

      }
    }
    CFRelease(v5);
  }
  else
  {
    v23 = nplog_obj(0, v3, v4);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v41 = SCCopyLastError();
      *(_DWORD *)buf = 138412290;
      v51 = v41;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to create SCPreferences: %@", buf, 0xCu);

    }
  }
  v14 = 0;
LABEL_26:
  if (objc_msgSend(v14, "count"))
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = v14;
    v29 = v14;
    v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
    if (v30)
    {
      v33 = v30;
      v34 = *(_QWORD *)v46;
      do
      {
        v35 = 0;
        do
        {
          if (*(_QWORD *)v46 != v34)
            objc_enumerationMutation(v29);
          v36 = *(__CFError **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)v35);
          v37 = nplog_obj(v30, v31, v32);
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v51 = v36;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Interface disabled: %{public}@", buf, 0xCu);
          }

          v39 = (void *)sub_100071378(v36);
          objc_msgSend(*(id *)(a1 + 72), "reportDisabledOnInterfaceName:displayName:type:", v36, v39, 3);

          v35 = (char *)v35 + 1;
        }
        while (v33 != v35);
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v45, v49, 16);
        v33 = v30;
      }
      while (v30);
    }

    v14 = v44;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 72), "clearNetworkStatusForType:", 3);
  }
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
  objc_msgSend(v40, "replaceDisabledInterfaces:", v14);

}

void sub_100066AEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  unsigned __int8 v49;
  void *v50;
  _QWORD v51[5];
  id v52;
  id location;
  _BYTE buf[24];
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;

  if (!a1 || objc_msgSend(*(id *)(a1 + 56), "effectiveUserTier") == (id)1)
    return;
  v4 = *(void **)(a1 + 120);
  if (!v4)
  {
    v18 = nplog_obj(0, v2, v3);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      goto LABEL_28;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v20 = "%@ no Wi-Fi interface";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, v20, buf, 0xCu);
    goto LABEL_28;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentKnownNetworkProfile"));

  if (!v5)
  {
    v21 = nplog_obj(v6, v7, v8);
    v19 = objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      goto LABEL_28;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v20 = "%@ there is no current Wi-Fi network profile";
    goto LABEL_27;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "currentKnownNetworkProfile"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "networkName"));

  if (!v10)
  {
    v22 = nplog_obj(v11, v12, v13);
    v19 = objc_claimAutoreleasedReturnValue(v22);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      goto LABEL_28;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    v20 = "%@ no network name in the current Wi-Fi network profile";
    goto LABEL_27;
  }
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "interfaceName"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "globalIPv4InterfaceName"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "globalIPv4InterfaceName"));
  v17 = v14
     && ((objc_msgSend(v14, "isEqual:", v15) & 1) != 0
      || (objc_msgSend(v14, "isEqual:", v16) & 1) != 0);

  v26 = nplog_obj(v23, v24, v25);
  v19 = objc_claimAutoreleasedReturnValue(v26);
  v27 = os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
  if (!v17)
  {
    if (v27)
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      v20 = "%@ Wi-Fi interface is not primary";
      goto LABEL_27;
    }
LABEL_28:

    sub_10006FD9C(a1);
    return;
  }
  if (v27)
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%@ Wi-Fi interface is primary", buf, 0xCu);
  }

  v28 = sub_10006FDDC(a1);
  if ((_DWORD)v28)
  {
    v31 = nplog_obj(v28, v29, v30);
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
    {
      v33 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%@ Wi-Fi network [%@] is already evaluated", buf, 0x16u);
    }

  }
  else
  {
    sub_10006FCE0(a1);
    v34 = *(id *)(a1 + 120);
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "currentKnownNetworkProfile"));
    v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "networkName"));
    v37 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v36;

    v41 = nplog_obj(v38, v39, v40);
    v42 = objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = *(id *)(a1 + 120);
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "currentKnownNetworkProfile"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "networkName"));
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%@ performing captive evaluation of Wi-Fi network [%@]", buf, 0x16u);

    }
    *(_BYTE *)(a1 + 20) = 0;
    sub_1000639C4(a1);
    sub_10006F374(a1);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v55 = sub_10000312C;
    v56 = sub_100054A8C;
    v57 = (id)os_transaction_create("com.apple.networkserviceproxy.captive-evaluation");
    objc_initWeak(&location, (id)a1);
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSPCaptiveWiFiHandler sharedHandler](NSPCaptiveWiFiHandler, "sharedHandler"));
    v47 = *(id *)(a1 + 120);
    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "interfaceName"));
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472;
    v51[2] = sub_10006FE80;
    v51[3] = &unk_1000F6410;
    objc_copyWeak(&v52, &location);
    v51[4] = buf;
    v49 = objc_msgSend(v46, "evaluate:completionHandler:", v48, v51);

    if ((v49 & 1) == 0)
    {
      v50 = *(void **)(*(_QWORD *)&buf[8] + 40);
      *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = 0;

    }
    objc_destroyWeak(&v52);

    objc_destroyWeak(&location);
    _Block_object_dispose(buf, 8);

  }
}

void sub_100066FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100068430(_BOOL8 a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  unsigned int v6;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "conditionsCount"))
    {
      v5 = 0;
      do
      {
        v6 = objc_msgSend(v4, "conditionsAtIndex:", v5);
        a1 = v6 == 18;
        if (v6 == 18)
          break;
        ++v5;
      }
      while (v5 < (unint64_t)objc_msgSend(v4, "conditionsCount"));
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

void sub_100068BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100068BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  int v10;
  const __CFString *v11;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("failure");
    if (v3)
      v7 = CFSTR("success");
    v10 = 138412290;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Configuration refresh activity finished with result %@", (uint8_t *)&v10, 0xCu);
  }

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;

}

void sub_100069868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100069898(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const __CFString *v10;
  id *WeakRetained;
  id *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSPPrivateRelayIncompatibleNetworkStats *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  const __CFString *v42;
  uint8_t buf[4];
  const __CFString *v44;

  v5 = a3;
  v8 = nplog_obj(v5, v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = CFSTR("failure");
    if ((_DWORD)a2)
      v10 = CFSTR("success");
    *(_DWORD *)buf = 138412290;
    v44 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Configuration refresh activity finished with result %@", buf, 0xCu);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 88));
  v12 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v13 = objc_msgSend(WeakRetained[10], "containsObject:");
      if (!(_DWORD)v13)
      {
        if ((_DWORD)a2)
        {
          v28 = nplog_obj(v13, v14, v15);
          v22 = (NSPPrivateRelayIncompatibleNetworkStats *)objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(&v22->super.super, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            v29 = "Success reported while checking configuration, ignore reporting any errors";
LABEL_26:
            _os_log_impl((void *)&_mh_execute_header, &v22->super.super, OS_LOG_TYPE_INFO, v29, buf, 2u);
          }
LABEL_27:

          goto LABEL_34;
        }
LABEL_19:
        if (v5)
        {
          v22 = (NSPPrivateRelayIncompatibleNetworkStats *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain"));
          if ((-[NSPPrivateRelayIncompatibleNetworkStats isEqualToString:](v22, "isEqualToString:", NSURLErrorDomain) & 1) != 0)
          {
            if (objc_msgSend(v5, "code") == (id)-1009)
              goto LABEL_27;
            v30 = objc_msgSend(v5, "code");

            if (v30 == (id)-1005)
              goto LABEL_34;
          }
          else
          {

          }
        }
        v32 = *(_QWORD *)(a1 + 48);
        if (v32 && (*(_BYTE *)(v32 + 13) = 1, (v33 = *(_QWORD *)(a1 + 48)) != 0))
        {
          objc_storeStrong((id *)(v33 + 304), *(id *)(a1 + 64));
          v34 = *(_QWORD **)(a1 + 48);
          if (v34)
          {
            v35 = v34[7];
LABEL_33:
            objc_msgSend(v34, "policiesUpdated:policy:resolverInfoChanged:", v35, 0, 0);
            sub_1000639C4(*(_QWORD *)(a1 + 48));
            goto LABEL_34;
          }
        }
        else
        {
          v34 = 0;
        }
        v35 = 0;
        goto LABEL_33;
      }
      objc_msgSend(v12[10], "removeObject:", *(_QWORD *)(a1 + 32));
    }
    if ((a2 & 1) != 0)
    {
      v16 = v12[5];
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "etag"));
      v18 = objc_msgSend(v17, "isEqualToString:", *(_QWORD *)(a1 + 40));

      if (v18)
      {
        switch(*(_QWORD *)(a1 + 96))
        {
          case 1:
            v22 = objc_alloc_init(NSPPrivateRelayIncompatibleNetworkStats);
            v23 = *(_QWORD *)(a1 + 48);
            if (v23)
              v24 = *(void **)(v23 + 40);
            else
              v24 = 0;
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "userTier"));
            v26 = objc_msgSend(v25, "intValue");
            if (v26 >= 3)
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v26));
            else
              v27 = *(&off_1000F65C0 + (int)v26);
            -[NSPPrivateRelayIncompatibleNetworkStats setTierType:](v22, "setTierType:", v27);

            if (objc_msgSend(*(id *)(a1 + 56), "type") == (id)1)
            {
              v39 = v12[9];
              v40 = sub_100069C9C((uint64_t)v12);
              v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
              objc_msgSend(v39, "reportBlockedOnWiFiName:", v41);

              v42 = CFSTR("WiFi");
            }
            else if (objc_msgSend(*(id *)(a1 + 56), "type") == (id)2)
            {
              sub_100069D08((uint64_t)v12);
              v42 = CFSTR("Cell");
            }
            else
            {
              sub_100069DB0((uint64_t)v12, *(void **)(a1 + 56));
              v42 = CFSTR("Wired");
            }
            -[NSPPrivateRelayIncompatibleNetworkStats setInterfaceType:](v22, "setInterfaceType:", v42);
            -[NSPProxyAnalytics sendAnalytics](v22, "sendAnalytics");
            goto LABEL_27;
          case 2:
            objc_msgSend(v12, "proxyConnectivityOutage");
            break;
          case 4:
            sub_100069E28((uint64_t)v12, 0, v21);
            break;
          case 5:
            sub_10006A074((uint64_t)v12, 0, v21);
            break;
          default:
            goto LABEL_34;
        }
        goto LABEL_34;
      }
      v31 = nplog_obj(v19, v20, v21);
      v22 = (NSPPrivateRelayIncompatibleNetworkStats *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(&v22->super.super, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v29 = "Proxy configuration changed, ignore reporting any errors";
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    goto LABEL_19;
  }
LABEL_34:
  v36 = *(_QWORD *)(a1 + 72);
  if (v36)
    (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v36, a2);
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v38 = *(void **)(v37 + 40);
  *(_QWORD *)(v37 + 40) = 0;

}

id sub_100069C9C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "currentKnownNetworkProfile"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "networkName"));

  if (!v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "currentScanResult"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "networkName"));

  }
  return v3;
}

id sub_100069D08(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD v9[5];

  v2 = *(void **)(a1 + 128);
  if (!v2)
  {
    v3 = objc_alloc((Class)CoreTelephonyClient);
    v4 = NPGetInternalQueue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = objc_msgSend(v3, "initWithQueue:", v5);
    v7 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v6;

    v2 = *(void **)(a1 + 128);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100070E08;
  v9[3] = &unk_1000F64D8;
  v9[4] = a1;
  return objc_msgSend(v2, "getCurrentDataSubscriptionContext:", v9);
}

void sub_100069DB0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "type") == (id)3)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "interfaceName"));
    v4 = (void *)sub_100071378(v3);
    objc_msgSend(*(id *)(a1 + 72), "reportBlockedOnInterfaceName:displayName:type:", v3, v4, 3);

  }
}

void sub_100069E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  dispatch_source_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  dispatch_time_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id location;

  if (*(_BYTE *)(a1 + 18))
    v3 = (_DWORD)a2 == 0;
  else
    v3 = 0;
  if (!v3)
  {
    v5 = nplog_obj(a1, a2, a3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v26[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "report odoh auth outage", (uint8_t *)v26, 2u);
    }

    v9 = *(id *)(a1 + 240);
    if (v9)
    {
      v9 = objc_msgSend(v9, "timeIntervalSinceNow");
      v11 = (unint64_t)v10;
    }
    else if (*(_QWORD *)(a1 + 312))
    {
      v11 = *(_QWORD *)(a1 + 312);
    }
    else
    {
      v11 = 1800;
    }
    if (!*(_QWORD *)(a1 + 192))
    {
      v12 = nplog_obj(v9, v7, v8);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v26[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting odoh auth outage restore timer", (uint8_t *)v26, 2u);
      }

      v15 = NPGetInternalQueue(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v16);
      v18 = *(void **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = v17;

      v19 = *(void **)(a1 + 192);
      if (v19)
      {
        v20 = v19;
        v21 = dispatch_time(0x8000000000000000, 1000000000 * v11);
        dispatch_source_set_timer(v20, v21, 0xFFFFFFFFFFFFFFFFLL, 0);

        objc_initWeak(&location, (id)a1);
        v22 = *(void **)(a1 + 192);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10006AFAC;
        v26[3] = &unk_1000F57C0;
        v23 = v22;
        objc_copyWeak(&v27, &location);
        dispatch_source_set_event_handler(v23, v26);

        dispatch_resume(*(dispatch_object_t *)(a1 + 192));
        v24 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)v11));
        v25 = *(void **)(a1 + 240);
        *(_QWORD *)(a1 + 240) = v24;

        sub_100062748(a1);
        objc_destroyWeak(&v27);
        objc_destroyWeak(&location);
      }
    }
    *(_BYTE *)(a1 + 18) = 1;
    objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), 0, 0);
    sub_1000639C4(a1);
  }
}

void sub_10006A058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  dispatch_source_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  dispatch_time_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  id location;

  if (*(_BYTE *)(a1 + 17))
    v3 = (_DWORD)a2 == 0;
  else
    v3 = 0;
  if (!v3)
  {
    v5 = nplog_obj(a1, a2, a3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v26[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "report odoh outage", (uint8_t *)v26, 2u);
    }

    v9 = *(id *)(a1 + 216);
    if (v9)
    {
      v9 = objc_msgSend(v9, "timeIntervalSinceNow");
      v11 = (unint64_t)v10;
    }
    else if (*(_QWORD *)(a1 + 312))
    {
      v11 = *(_QWORD *)(a1 + 312);
    }
    else
    {
      v11 = 1800;
    }
    if (!*(_QWORD *)(a1 + 184))
    {
      v12 = nplog_obj(v9, v7, v8);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v26[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting odoh outage restore timer", (uint8_t *)v26, 2u);
      }

      v15 = NPGetInternalQueue(v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v16);
      v18 = *(void **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v17;

      v19 = *(void **)(a1 + 184);
      if (v19)
      {
        v20 = v19;
        v21 = dispatch_time(0x8000000000000000, 1000000000 * v11);
        dispatch_source_set_timer(v20, v21, 0xFFFFFFFFFFFFFFFFLL, 0);

        objc_initWeak(&location, (id)a1);
        v22 = *(void **)(a1 + 184);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10006AE6C;
        v26[3] = &unk_1000F57C0;
        v23 = v22;
        objc_copyWeak(&v27, &location);
        dispatch_source_set_event_handler(v23, v26);

        dispatch_resume(*(dispatch_object_t *)(a1 + 184));
        v24 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)v11));
        v25 = *(void **)(a1 + 216);
        *(_QWORD *)(a1 + 216) = v24;

        sub_100062748(a1);
        objc_destroyWeak(&v27);
        objc_destroyWeak(&location);
      }
    }
    *(_BYTE *)(a1 + 17) = 1;
    objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), 0, 0);
    sub_1000639C4(a1);
  }
}

void sub_10006A2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  dispatch_source_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  dispatch_time_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  _QWORD handler[4];
  id v22;
  id buf[2];

  v4 = *(id *)(a1 + 208);
  if (v4)
  {
    v4 = objc_msgSend(v4, "timeIntervalSinceNow");
    v6 = (unint64_t)v5;
  }
  else if (*(_QWORD *)(a1 + 312))
  {
    v6 = *(_QWORD *)(a1 + 312);
  }
  else
  {
    v6 = 3600;
  }
  if (!*(_QWORD *)(a1 + 176))
  {
    v7 = nplog_obj(v4, a2, a3);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting proxy outage restore timer", (uint8_t *)buf, 2u);
    }

    v10 = NPGetInternalQueue(v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v11);
    v13 = *(void **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v12;

    v14 = *(void **)(a1 + 176);
    if (v14)
    {
      v15 = v14;
      v16 = dispatch_time(0x8000000000000000, 1000000000 * v6);
      dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0);

      objc_initWeak(buf, (id)a1);
      v17 = *(void **)(a1 + 176);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_10006AB6C;
      handler[3] = &unk_1000F57C0;
      v18 = v17;
      objc_copyWeak(&v22, buf);
      dispatch_source_set_event_handler(v18, handler);

      dispatch_resume(*(dispatch_object_t *)(a1 + 176));
      v19 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)v6));
      v20 = *(void **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = v19;

      sub_100062748(a1);
      objc_destroyWeak(&v22);
      objc_destroyWeak(buf);
    }
  }
}

void sub_10006AB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006AB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id WeakRetained;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint8_t v11[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Proxy outage restore timer fired", v11, 2u);
  }

  v6 = (void *)os_transaction_create("com.apple.networkserviceproxy.proxyRestoreTimerFired");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(*((dispatch_source_t *)WeakRetained + 22));
    v9 = (void *)v8[22];
    v8[22] = 0;

    v10 = (void *)v8[26];
    v8[26] = 0;

    objc_msgSend(v8, "proxyConnectivityActive");
  }

}

void sub_10006AC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[16];

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 15) || (_DWORD)a2 != 0)
    {
      v5 = nplog_obj(a1, a2, a3);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "report proxy outage", v9, 2u);
      }

      sub_10006A998(a1, v7, v8);
      *(_BYTE *)(a1 + 15) = 1;
      objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), 0, 0);
      sub_1000639C4(a1);
    }
  }
}

void sub_10006ACDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[16];

  if (a1)
  {
    if (!*(_BYTE *)(a1 + 16) || (_DWORD)a2 != 0)
    {
      v5 = nplog_obj(a1, a2, a3);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "report proxy network outage", v9, 2u);
      }

      sub_10006A998(a1, v7, v8);
      *(_BYTE *)(a1 + 16) = 1;
      objc_msgSend((id)a1, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(a1 + 56), 0, 0);
      sub_1000639C4(a1);
    }
  }
}

void sub_10006AE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  dispatch_source_t *WeakRetained;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Proxy outage restore timer fired", v17, 2u);
  }

  v6 = (void *)os_transaction_create("com.apple.networkserviceproxy.odohRestoreTimerFired");
  WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(WeakRetained[23]);
    v9 = *(void **)(v8 + 184);
    *(_QWORD *)(v8 + 184) = 0;

    v10 = *(void **)(v8 + 216);
    *(_QWORD *)(v8 + 216) = 0;

    if (*(_BYTE *)(v8 + 17))
    {
      v14 = nplog_obj(v11, v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "restore odoh connectivity", buf, 2u);
      }

      *(_BYTE *)(v8 + 17) = 0;
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 56), "mergeProxyTrafficStateWithCurrentPolicy"));
      objc_msgSend((id)v8, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(v8 + 56), v16, 1);
      sub_10004DA70(*(id **)(v8 + 200));
      sub_1000639C4(v8);

    }
  }

}

void sub_10006AFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  dispatch_source_t *WeakRetained;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  uint8_t v17[16];
  uint8_t buf[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "odoh auth outage restore timer fired", v17, 2u);
  }

  v6 = (void *)os_transaction_create("com.apple.networkserviceproxy.odohAuthOutageRestoreTimerFired");
  WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(WeakRetained[24]);
    v9 = *(void **)(v8 + 192);
    *(_QWORD *)(v8 + 192) = 0;

    v10 = *(void **)(v8 + 240);
    *(_QWORD *)(v8 + 240) = 0;

    if (*(_BYTE *)(v8 + 18))
    {
      v14 = nplog_obj(v11, v12, v13);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "restore odoh auth connectivity", buf, 2u);
      }

      *(_BYTE *)(v8 + 18) = 0;
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 56), "mergeProxyTrafficStateWithCurrentPolicy"));
      objc_msgSend((id)v8, "policiesUpdated:policy:resolverInfoChanged:", *(_QWORD *)(v8 + 56), v16, 1);
      sub_10004DA70(*(id **)(v8 + 200));
      sub_1000639C4(v8);

    }
  }

}

void sub_10006B6C0(void *a1, const char *a2, void *a3)
{
  id v5;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  id v9;

  v9 = a3;
  v5 = a1;
  reply = xpc_dictionary_create_reply(v5);
  remote_connection = xpc_dictionary_get_remote_connection(v5);
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

  if (reply && v8)
  {
    if (v9)
      sub_10006C950(reply, a2, (uint64_t)v9);
    xpc_connection_send_message(v8, reply);
  }

}

void sub_10006B750(void *a1, const char *a2, void *a3)
{
  id v5;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  id v9;
  id v10;
  id v11;

  v11 = a3;
  v5 = a1;
  reply = xpc_dictionary_create_reply(v5);
  remote_connection = xpc_dictionary_get_remote_connection(v5);
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

  if (reply && v8)
  {
    if (v11)
    {
      v9 = reply;
      v10 = v11;
      xpc_dictionary_set_string(v9, a2, (const char *)objc_msgSend(v10, "UTF8String"));

    }
    xpc_connection_send_message(v8, reply);
  }

}

void sub_10006B80C(uint64_t a1, void *a2)
{
  sub_10006B750(*(void **)(a1 + 32), "NSPServerErrorString", a2);
}

void sub_10006B820(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v8)
  {
    if (v7)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10006BDA8;
      v11[3] = &unk_1000F61E8;
      v12 = v8;
      v13 = a1;
      v14 = v7;
      v15 = v10;
      objc_msgSend(v14, "resolveWithCompletionHandler:", v11);

    }
    else
    {
      sub_10006B918(a1, 0, v8);
    }
  }
  else
  {
    (*((void (**)(id, const __CFString *))v9 + 2))(v9, CFSTR("Edge set identifier is nil"));
  }

}

void sub_10006B918(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t SigningIdentifier;
  void *v41;
  void *v42;
  int v43;
  id v44;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = *(id *)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "edgeSets"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v6));

    if (v9)
    {
      v13 = nplog_obj(v10, v11, v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        if (v15)
        {
          v43 = 138412290;
          v44 = v6;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Merging new edge with current edge set for %@", (uint8_t *)&v43, 0xCu);
        }

        objc_msgSend(v9, "merge:missingSettingsOnly:", v5, 0);
        objc_msgSend(v9, "link");
        objc_msgSend(v9, "saveToKeychain");
      }
      else
      {
        if (v15)
        {
          v43 = 138412290;
          v44 = v6;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Merging default with current edge set for %@", (uint8_t *)&v43, 0xCu);
        }

        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSPConfiguration defaultConfiguration](NSPConfiguration, "defaultConfiguration"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "edgeSets"));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", v6));

        if (v30)
        {
          objc_msgSend(v9, "merge:missingSettingsOnly:", v30, 0);
          objc_msgSend(v9, "link");
          objc_msgSend(v9, "saveToKeychain");
        }
        else
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "edgeSets"));
          v32 = objc_msgSend(v31, "mutableCopy");

          objc_msgSend(v32, "removeObjectForKey:", v6);
          v33 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v32);
          objc_msgSend(*(id *)(a1 + 40), "setEdgeSets:", v33);

          objc_msgSend(v9, "removeFromKeychain");
        }
        objc_msgSend(v9, "removeDayPassesFromKernel");
        objc_msgSend(v9, "teardownNetworkAgent");

      }
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "edgesGeneration"));

      if (!v34)
      {
        objc_msgSend(v9, "setEdgesGeneration:", &off_1000FF500);
        objc_msgSend(v9, "setUsedEdgesGeneration:", &off_1000FF500);
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "edgesGeneration"));
      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v35, "unsignedIntValue") + 1));
      objc_msgSend(v9, "setEdgesGeneration:", v36);

      sub_100062A40(a1, v37, v38);
      objc_msgSend(v9, "cancelProbes");
      v39 = objc_alloc((Class)NPUsageReport);
      SigningIdentifier = getSigningIdentifier();
      v41 = (void *)objc_claimAutoreleasedReturnValue(SigningIdentifier);
      v19 = objc_msgSend(v39, "initWithSigningIdentifier:fallbackReason:", v41, 0);

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "keybag"));
      objc_msgSend(v19, "setKeybagGeneration:", objc_msgSend(v42, "generation"));

      objc_msgSend(v9, "handleUsageReport:", v19);
    }
    else
    {
      if (!v5)
      {
LABEL_21:

        goto LABEL_22;
      }
      v16 = nplog_obj(v10, v11, v12);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v43 = 138412290;
        v44 = v6;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Adding new edge set %@", (uint8_t *)&v43, 0xCu);
      }

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "edgeSets"));
      v19 = objc_msgSend(v18, "mutableCopy");

      objc_msgSend(v19, "setObject:forKeyedSubscript:", v5, v6);
      v20 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithDictionary:", v19);
      objc_msgSend(*(id *)(a1 + 40), "setEdgeSets:", v20);

      objc_msgSend(v5, "link");
      sub_100062A40(a1, v21, v22);
      v23 = objc_alloc((Class)NPUsageReport);
      v24 = getSigningIdentifier();
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v26 = objc_msgSend(v23, "initWithSigningIdentifier:fallbackReason:", v25, 0);

      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "keybag"));
      objc_msgSend(v26, "setKeybagGeneration:", objc_msgSend(v27, "generation"));

      objc_msgSend(v5, "handleUsageReport:", v26);
      objc_msgSend(v5, "setEdgesGeneration:", &off_1000FF500);
      objc_msgSend(v5, "setUsedEdgesGeneration:", &off_1000FF518);
      objc_msgSend(v5, "setShouldSave:", 1);
      objc_msgSend(*(id *)(a1 + 40), "saveToKeychain");

    }
    goto LABEL_21;
  }
LABEL_22:

}

uint64_t sub_10006BDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if ((a2 & 1) == 0)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138412290;
      v9 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%@: failed to resolve new edge set", (uint8_t *)&v8, 0xCu);
    }

  }
  sub_10006B918(*(_QWORD *)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 32));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_10006BE70(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;

  v3 = a2;
  v6 = v3;
  if (v3)
  {
    v7 = nplog_obj(v3, v4, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "matchSigningIdentifier"));
      v10 = 138412546;
      v11 = v9;
      v12 = 2112;
      v13 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to remove edge set %@: %@", (uint8_t *)&v10, 0x16u);

    }
  }

}

void sub_10006BF4C(uint64_t a1, char a2)
{
  void *v2;
  id v3;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v5;
  BOOL v6;
  id message;

  v2 = *(void **)(a1 + 32);
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    message = xpc_dictionary_create_reply(v3);
    remote_connection = xpc_dictionary_get_remote_connection(v3);
    v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

    if (message)
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
      xpc_connection_send_message(v5, message);

  }
  else
  {
    message = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Failed to establish trust with edge set %@"), *(_QWORD *)(a1 + 40));
    sub_10006B750(v2, "NSPServerErrorString", message);
  }

}

void sub_10006BFFC(uint64_t a1, BOOL a2)
{
  id v3;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v5;
  BOOL v6;
  xpc_object_t xdict;

  v3 = *(id *)(a1 + 32);
  xdict = xpc_dictionary_create_reply(v3);
  remote_connection = xpc_dictionary_get_remote_connection(v3);
  v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

  if (xdict)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    xpc_dictionary_set_BOOL(xdict, "NSPServerCommandResult", a2);
    xpc_connection_send_message(v5, xdict);
  }

}

void sub_10006C088(void *a1, int64_t a2, void *a3)
{
  id v5;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  id v9;
  id v10;
  id v11;

  v11 = a3;
  v5 = a1;
  reply = xpc_dictionary_create_reply(v5);
  remote_connection = xpc_dictionary_get_remote_connection(v5);
  v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

  if (reply && v8)
  {
    xpc_dictionary_set_int64(reply, "NSPServerErrorCode", a2);
    if (v11)
    {
      v9 = reply;
      v10 = v11;
      xpc_dictionary_set_string(v9, "NSPServerErrorString", (const char *)objc_msgSend(v10, "UTF8String"));

    }
    xpc_connection_send_message(v8, reply);
  }

}

void sub_10006C154(uint64_t a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (!a2)
  {
    sub_10006C088(*(void **)(a1 + 40), 1006, CFSTR("invalid configuration data signature"));
    return;
  }
  v3 = objc_msgSend(objc_alloc((Class)NSPPrivacyProxyConfiguration), "initWithData:", *(_QWORD *)(a1 + 32));
  v8 = v3;
  if (!v3)
  {
    v7 = *(void **)(a1 + 40);
LABEL_8:
    sub_10006C088(v7, 1005, CFSTR("invalid configuration data"));
    goto LABEL_9;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dictionaryRepresentation"));

  v5 = *(void **)(a1 + 40);
  if (!v4)
  {
    v7 = v5;
    goto LABEL_8;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dictionaryRepresentation"));
  sub_1000029A8(v5, "NSPServerPrivacyProxyConfigDictionary", v6);

LABEL_9:
}

id sub_10006C224(uint64_t a1)
{
  id v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  int v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v14;
  void *v15;

  v3 = *(id *)(a1 + 40);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userTier"));
  v5 = objc_msgSend(v4, "unsignedIntegerValue");
  if (v5 == (id)1
    && (v6 = *(id *)(a1 + 40),
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "willResetSubscriberTierTomorrow")),
        v15 = v6,
        (objc_msgSend(v14, "BOOLValue") & 1) != 0))
  {
    v7 = 0;
  }
  else
  {
    v1 = *(id *)(a1 + 72);
    if (!objc_msgSend(v1, "hasPausedApps"))
    {

      v12 = 0;
      goto LABEL_12;
    }
    v7 = 1;
  }
  v8 = *(id *)(a1 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "resetTomorrowDate"));
  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "resetTomorrowDate"));
    v12 = objc_msgSend(v10, "isDateInTomorrow:", v11);

  }
  else
  {
    v12 = 0;
  }

  if (v7)
LABEL_12:
  if (v5 == (id)1)
  {

  }
  return v12;
}

uint64_t sub_10006C374(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  int v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v21;
  unsigned int v22;

  v3 = a1;
  if (a1)
  {
    v4 = *(id *)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "userTier"));
    v6 = objc_msgSend(v5, "unsignedIntegerValue");
    if (v6 == (id)1
      && (v1 = *(id *)(v3 + 40),
          v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "willResetSubscriberTierTomorrow")),
          (objc_msgSend(v2, "BOOLValue") & 1) != 0))
    {
      v7 = 0;
    }
    else
    {
      v8 = *(id *)(v3 + 72);
      if (!objc_msgSend(v8, "hasPausedApps"))
      {

        v3 = 0;
        if (v6 != (id)1)
          goto LABEL_16;
        goto LABEL_15;
      }
      v21 = v8;
      v7 = 1;
    }
    v9 = *(id *)(v3 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "resetTomorrowDate"));
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 + 40), "resetTomorrowDate"));
      v13 = v7;
      v14 = v6;
      v15 = v5;
      v16 = v4;
      v17 = v2;
      v18 = v1;
      v19 = (void *)v12;
      v22 = objc_msgSend(v11, "isDateInTomorrow:", v12) ^ 1;

      v1 = v18;
      v2 = v17;
      v4 = v16;
      v5 = v15;
      v6 = v14;
      v7 = v13;

    }
    else
    {
      v22 = 0;
    }

    if (v7)
    v3 = v22;
    if (v6 != (id)1)
      goto LABEL_16;
LABEL_15:

LABEL_16:
  }
  return v3;
}

void sub_10006C504(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  id WeakRetained;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD block[4];
  id v13;
  uint8_t buf[4];
  xpc_activity_state_t v15;

  state = xpc_activity_get_state(activity);
  v6 = nplog_obj(state, v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v15 = state;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Tomorrow timer activity state %ld", buf, 0xCu);
  }

  if (state == 2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v9 = WeakRetained;
    if (WeakRetained)
    {
      v10 = NPGetInternalQueue(WeakRetained);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10006C630;
      block[3] = &unk_1000F5450;
      v13 = v9;
      dispatch_async(v11, block);

    }
  }
}

void sub_10006C630(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint8_t v33[16];
  uint8_t v34[16];
  uint8_t buf[16];

  if (sub_10006C374(*(_QWORD *)(a1 + 32)))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
      v3 = *(void **)(v2 + 72);
    else
      v3 = 0;
    v4 = objc_msgSend(v3, "hasPausedApps");
    v7 = (int)v4;
    if ((_DWORD)v4)
    {
      v8 = nplog_obj(v4, v5, v6);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Resetting all paused apps after activity timer", buf, 2u);
      }

      v10 = *(_QWORD *)(a1 + 32);
      if (v10)
        v11 = *(void **)(v10 + 72);
      else
        v11 = 0;
      objc_msgSend(v11, "clearAllPausedApps");
    }
    v12 = *(_QWORD **)(a1 + 32);
    if (v12)
      v12 = (_QWORD *)v12[5];
    v13 = v12;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "userTier"));
    if (objc_msgSend(v14, "unsignedIntegerValue") == (id)1)
    {
      v15 = *(_QWORD *)(a1 + 32);
      if (v15)
        v16 = *(void **)(v15 + 40);
      else
        v16 = 0;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "willResetSubscriberTierTomorrow"));
      v18 = objc_msgSend(v17, "BOOLValue");

      if (v18)
      {
        v22 = nplog_obj(v19, v20, v21);
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Resetting user tier to subscriber after activity timer", v34, 2u);
        }

        v24 = *(_QWORD *)(a1 + 32);
        if (v24)
          v25 = *(void **)(v24 + 56);
        else
          v25 = 0;
        v26 = objc_msgSend(v25, "setUserTier:resetDate:clearResetDate:changeSource:", 2, 0, 1, 2);
        if ((v26 & 1) == 0)
        {
          v29 = nplog_obj(v26, v27, v28);
          v30 = objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v33 = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to set user tier to subscriber", v33, 2u);
          }

        }
        goto LABEL_28;
      }
    }
    else
    {

    }
    v31 = *(_QWORD *)(a1 + 32);
    if (v31)
      v32 = *(void **)(v31 + 56);
    else
      v32 = 0;
    objc_msgSend(v32, "clearResetDate");
LABEL_28:
    if (v7)
      sub_10006C838(*(_QWORD *)(a1 + 32));
  }
}

void sub_10006C838(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD block[5];
  id v9;
  _QWORD *v10;
  _QWORD v11[5];
  id v12;

  if (a1)
  {
    v11[0] = 0;
    v11[1] = v11;
    v11[2] = 0x3032000000;
    v11[3] = sub_10000312C;
    v11[4] = sub_100054A8C;
    v12 = (id)os_transaction_create("com.apple.networkserviceproxy.policiesUpdated");
    v2 = *(id *)(a1 + 56);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "mergeProxyTrafficStateWithCurrentPolicy"));

    v5 = NPGetInternalQueue(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006FEDC;
    block[3] = &unk_1000F5320;
    block[4] = a1;
    v9 = v3;
    v10 = v11;
    v7 = v3;
    dispatch_async(v6, block);

    _Block_object_dispose(v11, 8);
  }
}

void sub_10006C938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006C950(void *a1, const char *a2, uint64_t a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;

  v8 = a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", a3, 1, 0));
  if (v5)
  {
    v6 = v8;
    v7 = (void *)_CFXPCCreateXPCObjectFromCFObject(v5);
    xpc_dictionary_set_value(v6, a2, v7);

  }
}

void sub_10006C9E4(void *a1, void *a2)
{
  id v3;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v6;
  id v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = a1;
  reply = xpc_dictionary_create_reply(v3);
  remote_connection = xpc_dictionary_get_remote_connection(v3);
  v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

  if (reply && v6)
  {
    if (v9)
    {
      v7 = reply;
      v8 = (void *)_CFXPCCreateXPCObjectFromCFObject(v9);
      xpc_dictionary_set_value(v7, "NSPServerPrivacyProxyTokenEvents", v8);

    }
    xpc_connection_send_message(v6, reply);
  }

}

void sub_10006CA94(void *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];

  v7 = a1;
  v8 = v7;
  if (v7)
  {
    if (objc_msgSend(v7, "isApplication"))
      *a2 = 1;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentState"));
    v10 = objc_msgSend(v9, "isRunning");

    if (v10)
      *a3 = 1;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentState"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "endowmentNamespaces"));
    v13 = objc_msgSend(v12, "containsObject:", CFSTR("com.apple.frontboard.visibility"));

    if (v13)
    {
      *a4 = 1;
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "currentState", 0));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "assertions"));

      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v23;
        while (2)
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v23 != v18)
              objc_enumerationMutation(v15);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i), "domain"));
            v21 = objc_msgSend(v20, "containsString:", CFSTR("com.apple.webkit:Foreground"));

            if (v21)
            {
              *a4 = 1;
              goto LABEL_18;
            }
          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
          if (v17)
            continue;
          break;
        }
      }
LABEL_18:

    }
  }

}

id sub_10006CC70(id *a1, void *a2, _QWORD *a3)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  __int128 v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  void *i;
  void *v37;
  id v38;
  void *v39;
  double v40;
  double v41;
  BOOL v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  void *v65;
  id v66;
  __int128 v68;
  id *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  id v77;
  uint64_t v78;
  id obj;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[128];
  uint8_t v94[128];
  uint8_t buf[4];
  void *v96;
  uint8_t v97[4];
  void *v98;
  __int16 v99;
  void *v100;

  v74 = a2;
  if (!a1)
  {
    v66 = 0;
    v11 = v74;
    goto LABEL_70;
  }
  v69 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "proxyConfiguration"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "authInfo"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "nonDefaultAttesters"));

  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v7 = v6;
  v71 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v85, v94, 16);
  if (!v71)
  {
    v9 = 0;
    v59 = v7;
    goto LABEL_67;
  }
  v78 = 0;
  v9 = 0;
  v10 = *(_QWORD *)v86;
  *(_QWORD *)&v8 = 138412290;
  v68 = v8;
  v11 = v74;
  v73 = v7;
  v70 = *(_QWORD *)v86;
  do
  {
    v12 = 0;
    do
    {
      if (*(_QWORD *)v86 != v10)
        objc_enumerationMutation(v7);
      v72 = v12;
      v13 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * v12);
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v75 = v13;
      obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "associatedIssuers", v68));
      v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v93, 16);
      if (!v14)
        goto LABEL_59;
      v15 = v14;
      v16 = *(_QWORD *)v82;
      while (2)
      {
        v17 = 0;
        v76 = v15;
        do
        {
          if (*(_QWORD *)v82 != v16)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * (_QWORD)v17);
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "issuerName"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "issuerName"));
          v21 = objc_msgSend(v19, "isEqualToString:", v20);

          if (os_variant_allows_internal_security_policies("com.apple.networkserviceproxy")
            && (v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "issuerName")),
                v23 = objc_msgSend(v22, "containsString:", CFSTR(";")),
                v22,
                v23))
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "issuerName"));
            v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "componentsSeparatedByString:", CFSTR(";")));
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v25, "firstObject"));

            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "issuerName"));
            LOBYTE(v25) = objc_msgSend(v27, "isEqualToString:", v26);

            if ((v25 & 1) == 0)
              goto LABEL_57;
          }
          else if (!v21)
          {
            goto LABEL_57;
          }
          if (!a3)
            goto LABEL_65;
          v28 = v18;
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "tokenKeys"));
          v30 = objc_msgSend(v29, "count");

          if (v30)
          {
            v77 = v9;
            v91 = 0u;
            v92 = 0u;
            v89 = 0u;
            v90 = 0u;
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "tokenKeys"));
            v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v89, v97, 16);
            if (v32)
            {
              v33 = v32;
              v34 = 0;
              v35 = *(_QWORD *)v90;
              while (2)
              {
                for (i = 0; i != v33; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v90 != v35)
                    objc_enumerationMutation(v31);
                  v37 = *(void **)(*((_QWORD *)&v89 + 1) + 8 * (_QWORD)i);
                  if ((objc_msgSend(v37, "hasExpiration") & 1) == 0
                    && !objc_msgSend(v37, "hasRotation"))
                  {
LABEL_45:
                    v52 = v37;

                    v51 = 3;
                    v49 = v34;
                    v34 = v52;
                    v11 = v74;
                    v9 = v77;
                    goto LABEL_51;
                  }
                  if (objc_msgSend(v37, "hasRotation"))
                    v38 = objc_msgSend(v37, "rotation");
                  else
                    v38 = objc_msgSend(v37, "expiration");
                  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)v38));
                  objc_msgSend(v39, "timeIntervalSinceNow");
                  v41 = v40;

                  v43 = v41 < 30.0 && v34 != 0;
                  if (v41 >= 0.0 && !v43)
                  {
                    if (v41 >= 30.0)
                      goto LABEL_45;
                    v44 = v37;

                    v34 = v44;
                  }
                }
                v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v89, v97, 16);
                if (v33)
                  continue;
                break;
              }

              v11 = v74;
              if (v34)
              {
                v48 = nplog_obj(v45, v46, v47);
                v49 = objc_claimAutoreleasedReturnValue(v48);
                v9 = v77;
                if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
                {
                  v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "issuerName"));
                  *(_DWORD *)buf = v68;
                  v96 = v50;
                  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Returning a key for %@ that is about to expire", buf, 0xCu);

                }
                v51 = 2;
LABEL_51:

                goto LABEL_52;
              }
            }
            else
            {

            }
            v53 = nplog_obj(v45, v46, v47);
            v54 = objc_claimAutoreleasedReturnValue(v53);
            v9 = v77;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "issuerName"));
              *(_DWORD *)buf = v68;
              v96 = v56;
              _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Failed to find a non-expired key for %@, choosing the last available key", buf, 0xCu);

            }
            v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "tokenKeys"));
            v34 = objc_claimAutoreleasedReturnValue(-[NSObject lastObject](v49, "lastObject"));
            v51 = 1;
            goto LABEL_51;
          }
          v51 = 0;
          v34 = 0;
LABEL_52:

          *a3 = v34;
          if (v51 == 3)
          {
LABEL_65:
            v66 = v75;

            v7 = v73;
            goto LABEL_69;
          }
          if (!v9 || v51 > v78)
          {
            v55 = v75;

            v78 = v51;
            v9 = v55;
          }
          v15 = v76;
LABEL_57:
          v17 = (char *)v17 + 1;
        }
        while (v17 != v15);
        v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v93, 16);
        if (v15)
          continue;
        break;
      }
LABEL_59:

      v12 = v72 + 1;
      v7 = v73;
      v10 = v70;
    }
    while ((id)(v72 + 1) != v71);
    v71 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v85, v94, 16);
  }
  while (v71);

  if (v78 == 1)
  {
    v57 = v69[5];
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "configurationFetchDate"));
    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v58, 1, 2));

    v63 = nplog_obj(v60, v61, v62);
    v64 = objc_claimAutoreleasedReturnValue(v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "issuerName"));
      *(_DWORD *)v97 = 138412546;
      v98 = v59;
      v99 = 2112;
      v100 = v65;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Configuration with fetch date %@ has no non-expired keys for issuer %@", v97, 0x16u);

    }
    objc_msgSend(v69, "refreshProxyInfo:", 6);
    v7 = v73;
LABEL_67:

    v11 = v74;
  }
  v9 = v9;
  v66 = v9;
LABEL_69:

LABEL_70:
  return v66;
}

uint64_t sub_10006D358(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t nsdata_from_xpc_object;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSPPrivateAccessTokenChallenge *v11;
  id *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSPPrivateAccessTokenChallenge *v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v26;
  id v27;

  v4 = a3;
  v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    nsdata_from_xpc_object = get_nsdata_from_xpc_object(v5, "NSPServerPrivateAccessTokenChallenge");
    v7 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
    v8 = get_nsdata_from_xpc_object(v5, "NSPServerPrivateAccessPairedTokenChallenge");
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)v9;
    if (v7 && !*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      v18 = get_nsdata_from_xpc_object(v5, "NSPServerPrivateAccessTokenKey");
      v11 = (NSPPrivateAccessTokenChallenge *)objc_claimAutoreleasedReturnValue(v18);
      if (v11)
      {
        v15 = objc_alloc_init((Class)NSPPrivacyProxyTokenKey);
        objc_msgSend(v15, "setKey:", v11);
      }
      else
      {
        v15 = 0;
      }
      v19 = get_nsdata_from_xpc_object(v5, "NSPServerPrivateAccessTokenOriginNameKey");
      v14 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v17 = -[NSPPrivateAccessTokenChallenge initWithData:]([NSPPrivateAccessTokenChallenge alloc], "initWithData:", v7);
      if (v17)
      {
        v20 = (id *)a1[4];
        v27 = 0;
        v21 = sub_10006CC70(v20, v17, &v27);
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        v23 = v27;
        v24 = v23;
        if (v15 || (v15 = v23) != 0)
        {
          objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v22);
          objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), v17);
          objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v15);
          objc_storeStrong((id *)(*(_QWORD *)(a1[8] + 8) + 40), v14);
        }

      }
    }
    else
    {
      if (!v9 || *(_QWORD *)(*(_QWORD *)(a1[9] + 8) + 40))
        goto LABEL_21;
      v11 = -[NSPPrivateAccessTokenChallenge initWithData:]([NSPPrivateAccessTokenChallenge alloc], "initWithData:", v9);
      if (!v11)
      {
LABEL_20:

LABEL_21:
        goto LABEL_22;
      }
      v12 = (id *)a1[4];
      v26 = 0;
      v13 = sub_10006CC70(v12, v11, &v26);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = v26;
      if (!v15)
      {
LABEL_19:

        goto LABEL_20;
      }
      objc_storeStrong((id *)(*(_QWORD *)(a1[10] + 8) + 40), v14);
      objc_storeStrong((id *)(*(_QWORD *)(a1[9] + 8) + 40), v11);
      v16 = *(_QWORD *)(a1[11] + 8);
      v15 = v15;
      v17 = *(NSPPrivateAccessTokenChallenge **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;
    }

    goto LABEL_19;
  }
LABEL_22:

  return 1;
}

uint64_t sub_10006D5C4(_QWORD *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t nsdata_from_xpc_object;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  NSPPrivateAccessTokenChallenge *v13;
  NSPPrivateAccessTokenChallenge *v14;
  id *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v22;

  v4 = a3;
  v5 = v4;
  if (!v4 || xpc_get_type(v4) != (xpc_type_t)&_xpc_type_dictionary)
    goto LABEL_13;
  nsdata_from_xpc_object = get_nsdata_from_xpc_object(v5, "NSPServerPrivateAccessTokenChallenge");
  v7 = (void *)objc_claimAutoreleasedReturnValue(nsdata_from_xpc_object);
  v8 = get_nsdata_from_xpc_object(v5, "NSPServerPrivateAccessTokenKey");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v9)
  {
    v10 = objc_alloc_init((Class)NSPPrivacyProxyTokenKey);
    objc_msgSend(v10, "setKey:", v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = get_nsdata_from_xpc_object(v5, "NSPServerPrivateAccessTokenOriginNameKey");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (!v7
    || (v13 = -[NSPPrivateAccessTokenChallenge initWithData:]([NSPPrivateAccessTokenChallenge alloc], "initWithData:", v7)) == 0)
  {

LABEL_13:
    v20 = 1;
    goto LABEL_14;
  }
  v14 = v13;
  v15 = (id *)a1[4];
  v22 = 0;
  v16 = sub_10006CC70(v15, v14, &v22);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v18 = v22;
  v19 = v18;
  if (v10 || (v10 = v18) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), v17);
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v14);
    objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), v10);
    objc_storeStrong((id *)(*(_QWORD *)(a1[8] + 8) + 40), v12);
  }

  v20 = 0;
LABEL_14:

  return v20;
}

void sub_10006D780(uint64_t a1, uint64_t a2, void *a3)
{
  int v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  id *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[4];
  id v34;
  _QWORD v35[4];
  _QWORD v36[3];

  v4 = *(unsigned __int8 *)(a1 + 144);
  v5 = a3;
  v6 = objc_claimAutoreleasedReturnValue(+[NSPPrivacyTokenManager sharedTokenManager](NSPPrivacyTokenManager, "sharedTokenManager"));
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
  v32 = (void *)v6;
  if (v4)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40);
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40);
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 40);
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8) + 40);
    v10 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v11 = *(_WORD *)(a1 + 145);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10006D964;
    v35[3] = &unk_1000F62B0;
    v12 = (id *)v36;
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(id *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v36[0] = v14;
    v36[1] = v15;
    LOWORD(v25) = v11;
    v24 = v13;
    v16 = v32;
    objc_msgSend(v32, "fetchPairedPrivateAccessTokensForChallenge:overrideAttester:tokenKey:originNameKey:selectedOrigin:pairedChallenge:overridePairedAttester:pairedTokenKey:auditToken:bundleID:allowTools:systemTokenClient:accessToken:completionHandler:", v30, v31, v28, v27, v10, v26, v7, v8, v9, v24, v25, v5, v35);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 72);
    v18 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40);
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40);
    v29 = *(_OWORD *)(a1 + 32);
    v21 = *(_WORD *)(a1 + 145);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10006DB90;
    v33[3] = &unk_1000F62D8;
    v12 = &v34;
    v22 = *(_QWORD *)(a1 + 48);
    v34 = *(id *)(a1 + 56);
    LOWORD(v23) = v21;
    v16 = v32;
    objc_msgSend(v32, "fetchPrivateAccessTokenForChallenge:overrideAttester:customAttester:customAttesterHeaders:tokenKey:originNameKey:selectedOrigin:auditToken:bundleID:allowTools:systemTokenClient:accessToken:completionHandler:", v30, v31, v17, v18, v19, v20, v29, v22, v23, v5, v33);
  }

}

void sub_10006D964(uint64_t a1, void *a2, void *a3, void *a4, int64_t a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  __CFString *reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v16;
  __CFString *v17;
  void *v18;
  __CFString *v19;
  void *v20;
  __CFString *v21;
  void *v22;
  int64_t v23;
  id v24;

  v24 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a6;
  if (v24 && v11)
  {
    reply = (__CFString *)xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
    remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v16)
    {
      v17 = reply;
      v18 = (void *)_CFXPCCreateXPCObjectFromCFObject(v24);
      xpc_dictionary_set_value(v17, "NSPServerPrivateAccessTokenPairLongLived", v18);

      v19 = v17;
      v20 = (void *)_CFXPCCreateXPCObjectFromCFObject(v11);
      xpc_dictionary_set_value(v19, "NSPServerPrivateAccessTokenPairOneTime", v20);

      if (v12)
      {
        v21 = v19;
        v22 = (void *)_CFXPCCreateXPCObjectFromCFObject(v12);
        xpc_dictionary_set_value(v21, "NSPServerPrivateAccessTokenPairOneTimeSalt", v22);

      }
      xpc_connection_send_message(v16, v19);
    }

  }
  else
  {
    reply = CFSTR("Eligible account not found");
    switch(a5)
    {
      case 1003:
        break;
      case 1004:
      case 1005:
      case 1011:
        objc_msgSend(*(id *)(a1 + 40), "refreshProxyInfo:", 6);
        v23 = a5 - 1005;
        if ((unint64_t)(a5 - 1005) >= 7)
          goto LABEL_11;
        a5 = qword_1000C0328[v23];
        reply = *(&off_1000F65D8 + v23);
        break;
      case 1007:
        reply = CFSTR("Paired token issuance server error");
        break;
      case 1008:
        reply = CFSTR("Unsupported token type");
        break;
      case 1009:
        reply = CFSTR("Rate limited");
        break;
      case 1010:
        reply = CFSTR("Device authentication invalid");
        break;
      case 1012:
        reply = CFSTR("Network connectivity error");
        break;
      default:
LABEL_11:
        reply = CFSTR("Invalid parameter");
        a5 = 1004;
        break;
    }
    if (v13)
      reply = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingFormat:](reply, "stringByAppendingFormat:", CFSTR(": %@"), v13));
    sub_10006C088(*(void **)(a1 + 32), a5, reply);
  }

}

void sub_10006DB90(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  int64_t v10;
  __CFString *v11;
  id v12;

  v12 = a2;
  v7 = a4;
  v8 = v7;
  if (!v12)
  {
    v9 = a3 - 1003;
    if ((unint64_t)(a3 - 1003) > 9)
    {
      v11 = CFSTR("Invalid parameter");
      v10 = 1004;
      if (!v7)
      {
LABEL_8:
        sub_10006C088(*(void **)(a1 + 32), v10, v11);

        goto LABEL_9;
      }
    }
    else
    {
      v10 = qword_1000C0360[v9];
      v11 = *(&off_1000F6610 + v9);
      if (!v7)
        goto LABEL_8;
    }
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingFormat:](v11, "stringByAppendingFormat:", CFSTR(": %@"), v7));
    goto LABEL_8;
  }
  sub_1000029A8(*(void **)(a1 + 32), "NSPServerPrivateAccessToken", v12);
LABEL_9:

}

void sub_10006DC64(void *a1, int a2, int a3, void *a4)
{
  id v7;
  const __CFString *v8;
  const __CFString *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id location;

  v7 = a4;
  if (a1)
  {
    objc_initWeak(&location, a1);
    v8 = CFSTR("networking.privacy.subscriber");
    if (a2)
      v8 = CFSTR("networking.privacy.attestation");
    if (a3)
      v9 = CFSTR("cloud.llm");
    else
      v9 = v8;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10006EAEC;
    v10[3] = &unk_1000F63C8;
    objc_copyWeak(&v12, &location);
    v11 = v7;
    +[CSFFeatureManager requestFeatureWithId:completion:](CSFFeatureManager, "requestFeatureWithId:completion:", v9, v10);

    objc_destroyWeak(&v12);
    objc_destroyWeak(&location);
  }

}

void sub_10006DD54(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006DD70(uint64_t a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  char v8;

  v4 = NPGetInternalQueue(a1);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006DE00;
  v6[3] = &unk_1000F6328;
  v8 = a2;
  v7 = *(id *)(a1 + 32);
  dispatch_async(v5, v6);

}

void sub_10006DE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  xpc_object_t reply;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = v6;
  if (v4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "proxy setup for MPTCP converter proxy is successful", v12, 2u);
    }

    v8 = *(id *)(a1 + 32);
    reply = xpc_dictionary_create_reply(v8);
    remote_connection = xpc_dictionary_get_remote_connection(v8);
    v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);

    if (reply)
    {
      if (v11)
        xpc_connection_send_message(v11, reply);
    }

  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to setup proxying to MPTCP converter proxy", buf, 2u);
    }

    sub_10006C088(*(void **)(a1 + 32), 1004, CFSTR("Setup Failure"));
  }
}

void sub_10006DFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006DFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  int v10;
  const __CFString *v11;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = CFSTR("failure");
    if (v3)
      v7 = CFSTR("success");
    v10 = 138412290;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Configuration refresh activity finished with result %@", (uint8_t *)&v10, 0xCu);
  }

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;

}

void sub_10006E28C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  _QWORD *v14;
  id v15;
  _QWORD v16[5];
  id v17;

  v5 = a2;
  v6 = a3;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3032000000;
  v16[3] = sub_10000312C;
  v16[4] = sub_100054A8C;
  v17 = (id)os_transaction_create("com.apple.networkserviceproxy.subscriptionStatus");
  v7 = NPGetInternalQueue(v17);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006E3CC;
  v11[3] = &unk_1000F6350;
  objc_copyWeak(&v15, (id *)(a1 + 32));
  v12 = v6;
  v13 = v5;
  v14 = v16;
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, v11);

  objc_destroyWeak(&v15);
  _Block_object_dispose(v16, 8);

}

void sub_10006E3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006E3CC(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  void *v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  id inited;
  uint64_t v46;
  NSObject *v47;
  dispatch_source_t v48;
  void *v49;
  NSObject *v50;
  dispatch_time_t v51;
  void *v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id location;
  __int128 buf;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  void *v62;
  id v63;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v6 = nplog_obj(WeakRetained, v3, v4);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v58 = *(_QWORD *)(a1 + 32);
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v58;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Received error %@ while looking up feature status", (uint8_t *)&buf, 0xCu);
      }

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "domain"));
      if (objc_msgSend(v8, "isEqualToString:", CFSTR("CloudFeaturesLocalErrorDomain")))
      {
        v9 = objc_msgSend(*(id *)(a1 + 32), "code") == (id)3;

        if (v9)
        {
          objc_msgSend(*(id *)(v5 + 56), "setProxyAccountType:unlimited:", 1, 0);
          sub_1000657BC(v5, v10, v11);
          goto LABEL_35;
        }
      }
      else
      {

      }
      if ((deviceClassIsHomepod() & 1) == 0)
      {
        v27 = *(NSObject **)(v5 + 152);
        if (v27)
        {
          dispatch_source_cancel(v27);
          v28 = *(void **)(v5 + 152);
          *(_QWORD *)(v5 + 152) = 0;

        }
        v29 = *(_QWORD *)(v5 + 160);
        if (v29 < 8)
        {
          v32 = dword_1000C02EC[v29];
        }
        else
        {
          v30 = nplog_obj(v27, v25, v26);
          v31 = objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_QWORD *)&buf = 0x804000100;
            _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed subscription check after %u attempts", (uint8_t *)&buf, 8u);
          }

          v32 = 10800;
        }
        v38 = arc4random_uniform(6u);
        v39 = v38;
        ++*(_QWORD *)(v5 + 160);
        v42 = nplog_obj(v38, v40, v41);
        v43 = objc_claimAutoreleasedReturnValue(v42);
        v44 = (v39 + v32);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Retry: checking subscription after %lu seconds", (uint8_t *)&buf, 0xCu);
        }

        inited = objc_initWeak(&location, (id)v5);
        v46 = NPGetInternalQueue(inited);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        v48 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v47);
        v49 = *(void **)(v5 + 152);
        *(_QWORD *)(v5 + 152) = v48;

        if (*(_QWORD *)(v5 + 152))
        {
          v50 = *(id *)(v5 + 152);
          v51 = dispatch_time(0x8000000000000000, 1000000000 * v44);
          dispatch_source_set_timer(v50, v51, 0xFFFFFFFFFFFFFFFFLL, 0);

          v52 = *(void **)(v5 + 152);
          *(_QWORD *)&buf = _NSConcreteStackBlock;
          *((_QWORD *)&buf + 1) = 3221225472;
          v61 = sub_10006EA30;
          v62 = &unk_1000F57C0;
          v53 = v52;
          objc_copyWeak(&v63, &location);
          dispatch_source_set_event_handler(v53, &buf);

          dispatch_resume(*(dispatch_object_t *)(v5 + 152));
          objc_destroyWeak(&v63);
        }
        v54 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)v44));
        v55 = *(void **)(v5 + 168);
        *(_QWORD *)(v5 + 168) = v54;

        sub_100062748(v5);
        objc_destroyWeak(&location);
      }
    }
    else
    {
      v12 = *(void **)(a1 + 40);
      if (v12)
      {
        v13 = objc_msgSend(v12, "canUse");
        if ((_DWORD)v13)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "limit"));

          v20 = nplog_obj(v17, v18, v19);
          v21 = objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v22 = "";
            if (!v16)
              v22 = " (unlimited)";
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "privacy proxy feature available%{public}s", (uint8_t *)&buf, 0xCu);
          }

          objc_msgSend(*(id *)(v5 + 56), "setProxyAccountType:unlimited:", 2, v16 == 0);
        }
        else
        {
          v33 = nplog_obj(v13, v14, v15);
          v34 = objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "privacy proxy feature unavailable", (uint8_t *)&buf, 2u);
          }

          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 56), "currentConfiguration"));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "proxyAccountType"));
          v37 = objc_msgSend(v36, "unsignedIntegerValue") == (id)2;

          if (v37)
            objc_msgSend(*(id *)(v5 + 72), "reportServiceDisabledShouldReport:", 1);
          objc_msgSend(*(id *)(v5 + 56), "setProxyAccountType:unlimited:", 1, 0);
        }
        sub_1000657BC(v5, v23, v24);
      }
    }
  }
LABEL_35:
  v56 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v57 = *(void **)(v56 + 40);
  *(_QWORD *)(v56 + 40) = 0;

}

void sub_10006E87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006E898(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  id v5;
  _QWORD v6[5];
  id v7;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3032000000;
  v6[3] = sub_10000312C;
  v6[4] = sub_100054A8C;
  v7 = (id)os_transaction_create("com.apple.networkserviceproxy.subscriptionCheckNotification");
  v2 = NPGetInternalQueue(v7);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006E990;
  v4[3] = &unk_1000F5B20;
  objc_copyWeak(&v5, (id *)(a1 + 32));
  v4[4] = v6;
  dispatch_async(v3, v4);

  objc_destroyWeak(&v5);
  _Block_object_dispose(v6, 8);

}

void sub_10006E978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006E990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id *WeakRetained;
  id *v7;
  uint64_t v8;
  void *v9;
  uint8_t v10[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "feature change notification received", v10, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    sub_100064D28(WeakRetained);
    sub_10005FE50((uint64_t)v7);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;

}

void sub_10006EA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint8_t v10[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Subscription check retry timer fired", v10, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(*((dispatch_source_t *)WeakRetained + 19));
    v8 = (void *)v7[19];
    v7[19] = 0;

    v9 = (void *)os_transaction_create("com.apple.networkserviceproxy.subscriptionCheck");
    sub_100064D28(v7);

  }
}

void sub_10006EAEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  v7 = NPGetInternalQueue(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006EBD8;
  v11[3] = &unk_1000F63A0;
  objc_copyWeak(&v15, (id *)(a1 + 40));
  v12 = v6;
  v13 = v5;
  v14 = *(id *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  dispatch_async(v8, v11);

  objc_destroyWeak(&v15);
}

void sub_10006EBD8(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessToken"));

    if (!v8)
    {
      if (!*(_QWORD *)(a1 + 32))
      {
        v14 = nplog_obj(WeakRetained, v3, v4);
        v7 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v15 = objc_msgSend(*(id *)(a1 + 40), "canUse");
          v18 = 67109120;
          LODWORD(v19) = v15;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "No access token received, status %u", (uint8_t *)&v18, 8u);
        }
        goto LABEL_5;
      }
LABEL_3:
      v6 = nplog_obj(WeakRetained, v3, v4);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v16 = *(_QWORD *)(a1 + 32);
        v17 = objc_msgSend(*(id *)(a1 + 40), "canUse");
        v18 = 138412546;
        v19 = v16;
        v20 = 1024;
        v21 = v17;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Received error %@ while looking up access token, can use %u", (uint8_t *)&v18, 0x12u);
      }
LABEL_5:

      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      goto LABEL_10;
    }
    v9 = nplog_obj(WeakRetained, v3, v4);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = objc_msgSend(*(id *)(a1 + 40), "canUse");
      v18 = 67109120;
      LODWORD(v19) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Received access token, can use %u", (uint8_t *)&v18, 8u);
    }

    v12 = *(_QWORD *)(a1 + 48);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accessToken"));
    (*(void (**)(uint64_t, uint64_t, void *))(v12 + 16))(v12, 1, v13);

  }
LABEL_10:

}

void sub_10006EDD4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
  objc_msgSend(v2, "handleAppInstallation:", *(_QWORD *)(a1 + 32));

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_10006EE20(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
  objc_msgSend(v2, "handleAppUninstallation:", *(_QWORD *)(a1 + 32));

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_10006EE6C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  const char *string;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t value;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  uint64_t v31;
  char isKindOfClass;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  id v41;
  void *v42;
  dispatch_time_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  void *v50;
  id v51;
  _BYTE *v52;
  _BYTE buf[24];
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 && v3 && *(_BYTE *)(v5 + 9) && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = xpc_dictionary_get_string(v4, _xpc_event_key_name);
    v7 = strcmp(string, "ApplicationInstalled");
    if (!(_DWORD)v7)
    {
      v10 = nplog_obj(v7, v8, v9);
      v11 = objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%@ received app installation event", buf, 0xCu);
      }

    }
    v13 = strcmp(string, "ApplicationUninstalled");
    v16 = v13;
    if (!(_DWORD)v13)
    {
      v17 = nplog_obj(v13, v14, v15);
      v18 = objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        v19 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@ received app uninstallation event", buf, 0xCu);
      }

    }
    v20 = *(_QWORD *)(a1 + 32);
    if (v20)
    {
      value = xpc_dictionary_get_value(v4, "UserInfo");
      v22 = (void *)objc_claimAutoreleasedReturnValue(value);
      v23 = v22;
      if (v22 && xpc_get_type(v22) == (xpc_type_t)&_xpc_type_dictionary)
      {
        v25 = (void *)_CFXPCCreateCFObjectFromXPCObject(v23);
        v28 = nplog_obj(v25, v26, v27);
        v29 = objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v20;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%@ apps installation/uninstallation event was received with user info: %@", buf, 0x16u);
        }

        v30 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("bundleIDs")));
        v31 = objc_opt_class(NSArray);
        if (v30 && (isKindOfClass = objc_opt_isKindOfClass(v30, v31), v30, (isKindOfClass & 1) != 0))
        {
          v24 = objc_alloc_init((Class)NSMutableArray);
          if (objc_msgSend(v30, "containsObject:", CFSTR("com.apple.SafariTechnologyPreview")))
            objc_msgSend(v24, "addObject:", CFSTR("com.apple.SafariTechnologyPreview"));
          if (objc_msgSend(v30, "containsObject:", CFSTR("com.apple.mobilesafari")))
            objc_msgSend(v24, "addObject:", CFSTR("com.apple.mobilesafari"));
          if (objc_msgSend(v30, "containsObject:", CFSTR("com.apple.mobilemail")))
            objc_msgSend(v24, "addObject:", CFSTR("com.apple.mobilemail"));
        }
        else
        {
          v24 = 0;
        }

      }
      else
      {
        v24 = 0;
      }

    }
    else
    {
      v24 = 0;
    }
    v33 = objc_msgSend(v24, "count");
    if (v33)
    {
      v36 = nplog_obj(v33, v34, v35);
      v37 = objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v38 = *(_QWORD *)(a1 + 32);
        v39 = "installed";
        *(_DWORD *)buf = 138412802;
        if (!v16)
          v39 = "uninstalled";
        *(_QWORD *)&buf[4] = v38;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2080;
        v54 = (uint64_t (*)(uint64_t, uint64_t))v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%@ %@ apps were %s", buf, 0x20u);
      }

      v40 = *(_QWORD *)(a1 + 32);
      v41 = v24;
      if (v40)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v54 = sub_10000312C;
        v55 = sub_100054A8C;
        v42 = (void *)os_transaction_create("com.apple.networkserviceproxy.appsInstallOrUninstall");
        v56 = v42;
        if (v16)
        {
          v43 = dispatch_time(0, 2000000000);
          v44 = NPGetInternalQueue(v43);
          v45 = objc_claimAutoreleasedReturnValue(v44);
          v47 = _NSConcreteStackBlock;
          v48 = 3221225472;
          v49 = sub_10006EDD4;
          v50 = &unk_1000F5428;
          v51 = v41;
          v52 = buf;
          dispatch_after(v43, v45, &v47);
        }
        else
        {
          v46 = NPGetInternalQueue(v42);
          v45 = objc_claimAutoreleasedReturnValue(v46);
          v47 = _NSConcreteStackBlock;
          v48 = 3221225472;
          v49 = sub_10006EE20;
          v50 = &unk_1000F5428;
          v51 = v41;
          v52 = buf;
          dispatch_async(v45, &v47);
        }

        _Block_object_dispose(buf, 8);
      }

    }
  }

}

void sub_10006F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006F374(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3032000000;
  v5[3] = sub_10000312C;
  v5[4] = sub_100054A8C;
  v6 = (id)os_transaction_create("com.apple.networkserviceproxy.setUserEventAgentCaptiveOutage");
  v2 = NPGetInternalQueue(v6);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006F44C;
  v4[3] = &unk_1000F5428;
  v4[4] = a1;
  v4[5] = v5;
  dispatch_async(v3, v4);

  _Block_object_dispose(v5, 8);
}

void sub_10006F434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006F44C(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  void *v7;
  xpc_object_t xdict;

  xdict = xpc_dictionary_create(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = -1;
  if (v2 && *(_BYTE *)(v2 + 19))
    v3 = 1;
  xpc_dictionary_set_int64(xdict, "CaptiveOutage", v3);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = -1;
  if (v4 && *(_BYTE *)(v4 + 20))
    v5 = 1;
  xpc_dictionary_set_int64(xdict, "CaptiveOutageWaitingForUserActivity", v5);
  xpc_set_event("com.apple.networkserviceproxy", "MessageResponse", xdict);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

}

void sub_10006F504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
    sub_10006F560(WeakRetained, a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_10006F560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  os_unfair_lock_s *v27;
  int v28;
  NSPOutageReasonStats *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  _BYTE buf[12];
  __int16 v42;
  const __CFString *v43;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (v3 > 4)
      v7 = CFSTR("unknown");
    else
      v7 = *(&off_1000F6660 + (int)v3);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a1;
    v42 = 2112;
    v43 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ received captive probe result [%@]", buf, 0x16u);
  }

  if (v3 != 2)
  {
    if (v3 != 1)
    {
      if (!v3)
      {
        sub_10006FCE0(a1);
        if (*(_BYTE *)(a1 + 19))
        {
          v14 = nplog_obj(v11, v12, v13);
          v15 = objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = a1;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@ captive probe was successful, reporting service active ...", buf, 0xCu);
          }

          sub_10006315C(a1, 0, v16);
        }
      }
      return;
    }
    v25 = nplog_obj(v8, v9, v10);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%@ captive probe received HTTP redirect", buf, 0xCu);
    }

    v27 = (os_unfair_lock_s *)(a1 + 28);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28));
    v28 = *(unsigned __int8 *)(a1 + 21);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28));
    if (!v28)
    {
      v29 = objc_alloc_init(NSPOutageReasonStats);
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tierToString"));
      -[NSPOutageReasonStats setTierType:](v29, "setTierType:", v30);

      -[NSPOutageReasonStats setOutageReasonType:](v29, "setOutageReasonType:", CFSTR("Captive"));
      -[NSPOutageReasonStats setOutageReasonSubType:](v29, "setOutageReasonSubType:", CFSTR("CaptiveProbeRedirected"));
      objc_storeStrong((id *)(a1 + 296), v29);
      v40 = 0;
      *(_QWORD *)buf = 0;
      v31 = IOPMGetUserActivityLevel(buf, &v40);
      if ((_DWORD)v31 || (buf[0] & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 19))
        {
          v37 = nplog_obj(v31, v32, v33);
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "(inactive user) captive network outage cannot be reported now", buf, 2u);
          }

          *(_WORD *)(a1 + 19) = 256;
          sub_1000639C4(a1);
          sub_10006F374(a1);
        }
      }
      else
      {
        v34 = nplog_obj(v31, v32, v33);
        v35 = objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "(active user) captive network outage can be reported", buf, 2u);
        }

        sub_10006315C(a1, 1, v36);
      }

    }
LABEL_34:
    os_unfair_lock_lock(v27);
    v39 = *(unsigned __int8 *)(a1 + 21);
    os_unfair_lock_unlock(v27);
    sub_10006FAF8(a1, v39 == 0);
    return;
  }
  v17 = nplog_obj(v8, v9, v10);
  v18 = objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%@ captive probe timed out", buf, 0xCu);
  }

  if (*(_BYTE *)(a1 + 19)
    || (os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28)),
        v19 = *(_QWORD *)(a1 + 288),
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 28)),
        v19 < 3))
  {
    v27 = (os_unfair_lock_s *)(a1 + 28);
    goto LABEL_34;
  }
  v23 = nplog_obj(v20, v21, v22);
  v24 = objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@ timeout evaluation reached max retry count", buf, 0xCu);
  }

  sub_10006FCE0(a1);
}

void sub_10006F95C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3;
  id v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  id location;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 28));
    v2 = *(unsigned __int8 *)(v1 + 21);
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 28));
    if (v2)
    {
      v11 = 0;
      v12 = &v11;
      v13 = 0x3032000000;
      v14 = sub_10000312C;
      v15 = sub_100054A8C;
      v16 = (id)os_transaction_create("com.apple.networkserviceproxy.captive-evaluation");
      v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPCaptiveWiFiHandler sharedHandler](NSPCaptiveWiFiHandler, "sharedHandler"));
      objc_initWeak(&location, (id)v1);
      v4 = *(id *)(v1 + 120);
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "interfaceName"));
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10006F504;
      v8[3] = &unk_1000F6410;
      objc_copyWeak(&v9, &location);
      v8[4] = &v11;
      v6 = objc_msgSend(v3, "evaluate:completionHandler:", v5, v8);

      if ((v6 & 1) == 0)
      {
        v7 = (void *)v12[5];
        v12[5] = 0;

      }
      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);

      _Block_object_dispose(&v11, 8);
    }
  }
}

void sub_10006FAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_10006FAF8(uint64_t a1, char a2)
{
  os_unfair_lock_s *v4;
  unint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  dispatch_source_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  dispatch_time_t v22;
  NSObject *v23;
  __int128 v24;
  void (*v25)(uint64_t);
  void *v26;
  uint64_t v27;

  v4 = (os_unfair_lock_s *)(a1 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28));
  if ((a2 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 288) + 1;
    if (v5 > 6)
      goto LABEL_5;
  }
  *(_QWORD *)(a1 + 288) = v5;
LABEL_5:
  v6 = *(NSObject **)(a1 + 280);
  if (v6)
  {
    dispatch_source_cancel(v6);
    v7 = *(void **)(a1 + 280);
    *(_QWORD *)(a1 + 280) = 0;

  }
  v8 = arc4random_uniform(6u);
  LODWORD(v9) = dword_1000C030C[*(_QWORD *)(a1 + 288) - 1];
  v10 = (double)v8 + (double)v9;
  v13 = nplog_obj(v8, v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    LODWORD(v24) = 134217984;
    *(double *)((char *)&v24 + 4) = v10;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "wait time for the next captive evaluation is [%f] seconds", (uint8_t *)&v24, 0xCu);
  }

  v16 = NPGetInternalQueue(v15);
  v17 = objc_claimAutoreleasedReturnValue(v16);
  v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v17);
  v19 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v18;

  v20 = *(void **)(a1 + 280);
  if (v20)
  {
    v21 = v20;
    v22 = dispatch_time(0, (uint64_t)(v10 * 1000000000.0));
    dispatch_source_set_timer(v21, v22, 0xFFFFFFFFFFFFFFFFLL, 0);

    v23 = *(NSObject **)(a1 + 280);
    *(_QWORD *)&v24 = _NSConcreteStackBlock;
    *((_QWORD *)&v24 + 1) = 3221225472;
    v25 = sub_10006F95C;
    v26 = &unk_1000F5450;
    v27 = a1;
    dispatch_source_set_event_handler(v23, &v24);
    dispatch_resume(*(dispatch_object_t *)(a1 + 280));
    *(_BYTE *)(a1 + 21) = 1;
  }
  os_unfair_lock_unlock(v4);
}

void sub_10006FCE0(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t v11[16];

  v2 = (os_unfair_lock_s *)(a1 + 28);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 28));
  v3 = *(unsigned __int8 *)(a1 + 21);
  os_unfair_lock_unlock(v2);
  if (v3)
  {
    os_unfair_lock_lock(v2);
    v4 = *(NSObject **)(a1 + 280);
    if (v4)
    {
      dispatch_source_cancel(v4);
      v5 = *(void **)(a1 + 280);
      *(_QWORD *)(a1 + 280) = 0;

    }
    *(_QWORD *)(a1 + 288) = 0;
    *(_BYTE *)(a1 + 21) = 0;
    os_unfair_lock_unlock(v2);
    v9 = nplog_obj(v6, v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "stopped captive evaluation retry", v11, 2u);
    }

  }
}

void sub_10006FD9C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPCaptiveWiFiHandler sharedHandler](NSPCaptiveWiFiHandler, "sharedHandler"));
  objc_msgSend(v2, "abort");

  v3 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;

}

uint64_t sub_10006FDDC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;

  v2 = *(id *)(a1 + 96);
  if (v2)
  {
    v3 = v2;
    v4 = *(id *)(a1 + 120);
    if (v4)
    {
      v5 = v4;
      v6 = *(id *)(a1 + 120);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "currentKnownNetworkProfile"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "networkName"));
      v9 = objc_msgSend(v8, "isEqualToString:", *(_QWORD *)(a1 + 96));

      if ((v9 & 1) != 0)
        return 1;
    }
    else
    {

    }
  }
  return 0;
}

void sub_10006FE80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
    sub_10006F560((uint64_t)WeakRetained, a2, v4);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10006FEDC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)a1[4];
  if (v2)
    v3 = v2[7];
  else
    v3 = 0;
  objc_msgSend(v2, "policiesUpdated:policy:resolverInfoChanged:", v3, a1[5], 0);
  v4 = *(_QWORD *)(a1[6] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_10006FF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  id Property;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  void *v27;

  if ((_DWORD)a2 == 1)
  {
    v5 = nplog_obj(a1, a2, a3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v24 = 138412290;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@ CNPluginMonitor received kCNPluginMonitorEventTypePluginListChanged event", (uint8_t *)&v24, 0xCu);
    }

    v8 = (void *)CNPluginMonitorEventCopyDisplayIDs(a3);
    v11 = nplog_obj(v8, v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v24 = 138412546;
      v25 = v13;
      v26 = 2112;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@ CNPluginMonitor received plugins %@", (uint8_t *)&v24, 0x16u);
    }

    Property = *(id *)(a1 + 32);
    if (v8)
    {
      if (Property)
        Property = objc_getProperty(Property, v14, 48, 1);
      v16 = objc_msgSend(Property, "isEqualToArray:", v8);
      if ((v16 & 1) != 0)
        goto LABEL_18;
    }
    else if (!Property || (v16 = objc_getProperty(Property, v14, 48, 1)) == 0)
    {
LABEL_18:

      return;
    }
    v19 = nplog_obj(v16, v17, v18);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = *(_QWORD *)(a1 + 32);
      v24 = 138412546;
      v25 = v21;
      v26 = 2112;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%@ CNPluginMonitor received new captive plugins %@", (uint8_t *)&v24, 0x16u);
    }

    v23 = *(void **)(a1 + 32);
    if (v23)
    {
      objc_setProperty_atomic(v23, v22, v8, 48);
      v23 = *(void **)(a1 + 32);
    }
    sub_10006C838((uint64_t)v23);
    goto LABEL_18;
  }
}

void sub_100070300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100070324(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
    {
      nw_resolver_cancel();
      v2 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = 0;

    }
  }
}

void sub_100070364(uint64_t a1, int a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  uint64_t count;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (a2 == 2)
  {
    count = nw_array_get_count(v5);
    v10 = nplog_obj(count, v8, v9);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = v11;
    if (count)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v17 = 138412290;
        v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "DNS probe passed on %@", (uint8_t *)&v17, 0xCu);
      }

      if (WeakRetained)
        v14 = (void *)WeakRetained[8];
      else
        v14 = 0;
      v15 = 0;
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 32);
        v17 = 138412290;
        v18 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "DNS probe blocked on %@", (uint8_t *)&v17, 0xCu);
      }

      if (WeakRetained)
        v14 = (void *)WeakRetained[8];
      else
        v14 = 0;
      v15 = 1;
    }
    objc_msgSend(v14, "updateDNSFilteringHint:", v15);
    sub_100070324((uint64_t)WeakRetained);
  }

}

void sub_1000704D0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = NPGetInternalQueue(WeakRetained);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100070584;
    v8[3] = &unk_1000F5A80;
    v9 = v3;
    v10 = v5;
    dispatch_async(v7, v8);

  }
}

void sub_100070584(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  id v38;
  uint8_t buf[4];
  void *v40;

  v2 = (char *)objc_msgSend(*(id *)(a1 + 32), "type");
  if ((unint64_t)(v2 - 19) < 2)
  {
    v18 = nplog_obj(v2, v3, v4);
    v19 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = *(_QWORD **)(a1 + 40);
      if (v20)
        v20 = (_QWORD *)v20[15];
      v21 = v20;
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "networkName"));
      *(_DWORD *)buf = 138412290;
      v40 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "IPv4/IPv6 changed for SSID [%@]", buf, 0xCu);

    }
    v23 = *(_QWORD *)(a1 + 40);
    if (v23)
    {
      v24 = *(void **)(v23 + 120);
      if (v24
        && (v25 = v24,
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "currentKnownNetworkProfile")),
            v26,
            v25,
            !v26))
      {
        v35 = nplog_obj(v27, v28, v29);
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Wi-Fi disassociated", buf, 2u);
        }

        sub_10006FD9C(v23);
        sub_10006FCE0(v23);
      }
      else
      {
        sub_100066AEC(v23);
      }
    }
  }
  else if (v2 == (char *)2)
  {
    v30 = nplog_obj(2, v3, v4);
    v31 = objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      v32 = *(_QWORD **)(a1 + 40);
      if (v32)
        v32 = (_QWORD *)v32[15];
      v33 = v32;
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "networkName"));
      *(_DWORD *)buf = 138412290;
      v40 = v34;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Wi-Fi SSID changed to [%@]", buf, 0xCu);

    }
    sub_100066270(*(_QWORD *)(a1 + 40));
  }
  else if (v2 == (char *)30)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5 + 120), "currentKnownNetworkProfile"));
      v38 = v6;
      if (!v6)
        goto LABEL_32;
      if (!objc_msgSend(v6, "isCaptiveStateDetermined"))
        goto LABEL_32;
      v7 = objc_msgSend(v38, "isCaptive");
      v8 = v38;
      if ((v7 & 1) == 0)
      {
        v9 = objc_msgSend(v38, "wasCaptive");
        v8 = v38;
        if (!v9)
          goto LABEL_32;
      }
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "captiveProfile"));
      v11 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("user-portal-url")));
        v13 = objc_opt_class(NSString);
        if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v12));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "scheme"));
          v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("https"));

          if (v16)
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "host"));
          else
            v17 = 0;

          if (v17)
          {
            v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
            objc_msgSend(v37, "setCaptivePortalExceptionHostname:", v17);

            goto LABEL_33;
          }
LABEL_32:
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
          objc_msgSend(v17, "setCaptivePortalExceptionHostname:", 0);
LABEL_33:

          return;
        }

      }
      goto LABEL_32;
    }
  }
}

void sub_100070AE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned __int16 v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  unsigned __int16 v24;
  id v25;
  uint8_t buf[4];
  id v27;

  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (!v5 || v6)
  {
    v20 = nplog_obj(v6, v7, v8);
    v10 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to get current cellular context: %@", buf, 0xCu);
    }
  }
  else
  {
    v10 = objc_claimAutoreleasedReturnValue(+[CTServiceDescriptor descriptorWithSubscriptionContext:](CTServiceDescriptor, "descriptorWithSubscriptionContext:", v5));
    v11 = *(_QWORD **)(a1 + 32);
    if (v11)
      v11 = (_QWORD *)v11[16];
    v25 = 0;
    v12 = v11;
    v13 = (unsigned __int16)objc_msgSend(v12, "getPrivacyProxyState:error:", v10, &v25);
    v14 = v25;

    if (v14)
    {
      v18 = nplog_obj(v15, v16, v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v27 = v14;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to get cellular proxy state: %@", buf, 0xCu);
      }

    }
    else
    {
      v21 = *(_QWORD *)(a1 + 32);
      if (v21)
        v22 = *(void **)(v21 + 128);
      else
        v22 = 0;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100070CC4;
      v23[3] = &unk_1000F64B0;
      v24 = v13;
      v23[4] = v21;
      objc_msgSend(v22, "getSubscriptionUserFacingName:completion:", v5, v23);
    }

  }
}

void sub_100070CC4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;

  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (v6)
  {
    v10 = nplog_obj(v6, v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v18 = 138412290;
      v19 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to get cellular operator name: %@", (uint8_t *)&v18, 0xCu);
    }

  }
  v12 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 41))
  {
    if (v12)
      v13 = *(void **)(v12 + 72);
    else
      v13 = 0;
    objc_msgSend(v13, "reportActiveOnCellularName:", v5);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
    v15 = v14;
    v16 = 0;
  }
  else
  {
    if (v12)
      v17 = *(void **)(v12 + 72);
    else
      v17 = 0;
    objc_msgSend(v17, "reportDisabledOnCellularName:", v5);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
    v15 = v14;
    v16 = 1;
  }
  objc_msgSend(v14, "cellularDisabled:", v16);

}

void sub_100070E08(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[5];
  uint8_t buf[4];
  void *v17;

  v5 = a3;
  v8 = v5;
  if (!a2 || v5)
  {
    v11 = nplog_obj(v5, v6, v7);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to get current cellular context: %@", buf, 0xCu);
    }

    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
      v14 = *(void **)(v13 + 72);
    else
      v14 = 0;
    objc_msgSend(v14, "reportBlockedOnCellularName:", 0);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      v10 = *(void **)(v9 + 128);
    else
      v10 = 0;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100070F3C;
    v15[3] = &unk_1000F6500;
    v15[4] = v9;
    objc_msgSend(v10, "getSubscriptionUserFacingName:completion:", a2, v15);
  }

}

void sub_100070F3C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;

  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (v6)
  {
    v10 = nplog_obj(v6, v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = 138412290;
      v15 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to get cellular operator name: %@", (uint8_t *)&v14, 0xCu);
    }

  }
  v12 = *(_QWORD *)(a1 + 32);
  if (v12)
    v13 = *(void **)(v12 + 72);
  else
    v13 = 0;
  objc_msgSend(v13, "reportBlockedOnCellularName:", v5);

}

void sub_10007118C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  int v23;
  void *v24;

  v5 = a3;
  v8 = v5;
  if (!a2 || v5)
  {
    v19 = nplog_obj(v5, v6, v7);
    v9 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v23 = 138412290;
      v24 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to get current cellular context: %@", (uint8_t *)&v23, 0xCu);
    }
  }
  else
  {
    v9 = objc_claimAutoreleasedReturnValue(+[CTServiceDescriptor descriptorWithSubscriptionContext:](CTServiceDescriptor, "descriptorWithSubscriptionContext:", a2));
    v10 = *(_QWORD **)(a1 + 32);
    if (v10)
      v10 = (_QWORD *)v10[16];
    v11 = v10;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "setPrivacyProxyState:enabled:", v9, 0));

    v16 = nplog_obj(v13, v14, v15);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    v18 = v17;
    if (v12)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v23 = 138412290;
        v24 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to set cellular proxy state: %@", (uint8_t *)&v23, 0xCu);
      }
    }
    else
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v20 = *(void **)(a1 + 40);
        v23 = 138412290;
        v24 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Saved preference to disable on cellular network: %@", (uint8_t *)&v23, 0xCu);
      }

      v21 = *(_QWORD *)(a1 + 32);
      if (v21)
        v22 = *(void **)(v21 + 72);
      else
        v22 = 0;
      objc_msgSend(v22, "reportDisabledOnCellularName:", *(_QWORD *)(a1 + 40));
      v18 = objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyPolicyHandler sharedHandler](NSPPrivacyProxyPolicyHandler, "sharedHandler"));
      -[NSObject cellularDisabled:](v18, "cellularDisabled:", 1);
    }

  }
}

uint64_t sub_100071378(void *a1)
{
  id v1;
  const __SCNetworkInterface *v2;
  uint64_t v3;
  const __SCNetworkInterface *v4;
  CFStringRef LocalizedDisplayName;

  v1 = a1;
  v2 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName(kCFAllocatorDefault, v1, 0xFFFFFFFFLL);
  v3 = (uint64_t)v1;
  if (v2)
  {
    v4 = v2;
    LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(v2);
    v3 = objc_claimAutoreleasedReturnValue(LocalizedDisplayName);

    CFRelease(v4);
  }

  return v3;
}

void sub_1000713E8(const __SCDynamicStore *a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  __int128 v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  id v20;
  id *v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  _BYTE v40[128];

  v4 = sub_1000549E8();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000663C0((uint64_t)v5);

  v6 = a2;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
  if (v7)
  {
    v9 = v7;
    v10 = *(_QWORD *)v35;
    v11 = kSCEntNetPvD;
    *(_QWORD *)&v8 = 138412290;
    v33 = v8;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v35 != v10)
          objc_enumerationMutation(v6);
        v13 = *(__CFString **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v12);
        if (-[__CFString containsString:](v13, "containsString:", v11, v33))
        {
          v14 = (id)SCDynamicStoreCopyValue(a1, v13);
          v17 = nplog_obj(v14, v15, v16);
          v18 = objc_claimAutoreleasedReturnValue(v17);
          v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
          if (v14)
          {
            if (v19)
            {
              *(_DWORD *)buf = v33;
              v39 = v14;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Discovered PvD dictionary: %@", buf, 0xCu);
            }

            v20 = sub_1000549E8();
            v21 = (id *)objc_claimAutoreleasedReturnValue(v20);
            v22 = v14;
            if (v21)
            {
              v23 = v21[8];
              if (v23)
                objc_msgSend(v23, "didReceiveUpdatedPvDOptions:", v22);
            }

          }
          else
          {
            if (v19)
            {
              *(_DWORD *)buf = v33;
              v39 = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "PvD key is not longer present: %@", buf, 0xCu);
            }

            v24 = sub_1000549E8();
            v25 = objc_claimAutoreleasedReturnValue(v24);
            v21 = (id *)v25;
            if (v25)
            {
              v26 = *(void **)(v25 + 64);
              if (v26)
              {
                v27 = objc_msgSend(v26, "networkDiscoveredProxyPresentInAgentManager");
                if ((_DWORD)v27)
                {
                  v30 = nplog_obj(v27, v28, v29);
                  v31 = objc_claimAutoreleasedReturnValue(v30);
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Clean up network discovered proxy", buf, 2u);
                  }

                  objc_msgSend(v21[8], "tearDownNetworkDiscoveredProxy");
                }
              }
            }
          }

        }
        v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      v32 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
      v9 = v32;
    }
    while (v32);
  }

}

_DWORD *sub_100071B80(uint64_t a1, uint64_t a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  _DWORD *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  void *v14;
  void *v15;
  objc_class *v16;
  NSString *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  objc_class *v25;
  NSString *v26;
  void *v27;
  void *v28;
  void *v29;
  objc_class *v30;
  NSString *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  uint32_t v42;
  unsigned int v43;
  uint64_t v44;
  id v46;
  uint8_t buf[4];
  id v48;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (*(_DWORD *)(a2 + 16) == 3 && WeakRetained != 0)
  {
    v7 = objc_alloc_init((Class)NSMutableDictionary);
    v8 = v7;
    v9 = (void *)v4[5];
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "diagnostics"));
      v11 = (objc_class *)objc_opt_class(NSPConfiguration);
      v12 = NSStringFromClass(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, v13);

    }
    v14 = (void *)v4[7];
    if (v14)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "diagnostics"));
      v16 = (objc_class *)objc_opt_class(NSPConfigurationManager);
      v17 = NSStringFromClass(v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v15, v18);

    }
    v19 = objc_alloc_init((Class)PrivacyProxyInfo);
    v20 = (void *)v4[7];
    if (v20)
      objc_msgSend(v20, "copyProxyInfo:", v19);
    v21 = (void *)v4[8];
    if (v21)
      objc_msgSend(v21, "copyProxyInfo:", v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyTokenManager sharedTokenManager](NSPPrivacyTokenManager, "sharedTokenManager"));

    if (v22)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyTokenManager sharedTokenManager](NSPPrivacyTokenManager, "sharedTokenManager"));
      objc_msgSend(v23, "copyTokenInfo:", v19);

    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "diagnostics"));
    v25 = (objc_class *)objc_opt_class(PrivacyProxyInfo);
    v26 = NSStringFromClass(v25);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v24, v27);

    v28 = (void *)v4[9];
    if (v28)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "diagnostics"));
      if (v29)
      {
        v30 = (objc_class *)objc_opt_class(NSPServiceStatusManager);
        v31 = NSStringFromClass(v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        objc_msgSend(v8, "setObject:forKeyedSubscript:", v29, v32);

      }
    }
    v46 = 0;
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v8, 200, 0, &v46));
    v34 = v46;
    v35 = objc_msgSend(v33, "length");
    if (v34)
    {
      v38 = nplog_obj(v35, v36, v37);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v48 = v34;
        v40 = "serializing state data failed with error: %@";
        v41 = v39;
        v42 = 12;
LABEL_28:
        _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, v40, buf, v42);
      }
    }
    else
    {
      v43 = v35;
      if (v35 <= 0x8000)
      {
        v6 = malloc_type_calloc(1uLL, v35 + 200, 0xC7EB2718uLL);
        *v6 = 1;
        v6[1] = v43;
        __strlcpy_chk(v6 + 34, "Privacy Proxy Summary", 64, 64);
        memcpy(v6 + 50, objc_msgSend(v33, "bytes"), v43);
LABEL_30:

        goto LABEL_31;
      }
      v44 = nplog_obj(v35, v36, v37);
      v39 = objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v48) = v43;
        v40 = "serialized data length %u exceed max state dump size";
        v41 = v39;
        v42 = 8;
        goto LABEL_28;
      }
    }

    v6 = 0;
    goto LABEL_30;
  }
  v6 = 0;
LABEL_31:

  return v6;
}

void sub_100071EF4(uint64_t a1)
{
  int *WeakRetained;
  int *v2;

  WeakRetained = (int *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v2 = WeakRetained;
    close(WeakRetained[8]);
    WeakRetained = v2;
    v2[8] = -1;
  }

}

void sub_100071F30(uint64_t a1)
{
  ssize_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint32_t v11;
  NSObject *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  int *v19;
  char *v20;
  id WeakRetained;
  char __str[4];
  _BYTE v23[10];
  __int16 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[14];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    memset(v28, 0, sizeof(v28));
    v26 = 0u;
    v27 = 0u;
    v1 = recv(*((_DWORD *)WeakRetained + 8), &v26, 0x100uLL, 0);
    if (v1 >= 1)
    {
      do
      {
        if ((unint64_t)v1 < 0x18)
          goto LABEL_19;
        v4 = DWORD1(v26) == 1 && DWORD2(v26) == 1;
        if (!v4 || HIDWORD(v26) != 2)
          goto LABEL_19;
        if (v1 >= (unint64_t)v26)
        {
          if (DWORD1(v27) != 20)
            goto LABEL_19;
          if (v26 > 0x33)
          {
            HIBYTE(v28[0]) = 0;
            snprintf(__str, 0x11uLL, "%s%d", (const char *)v28, HIDWORD(v27));
            v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)WeakRetained + 11), "interfaceName"));
            v7 = v12;
            if (v12 && !strncmp((const char *)-[NSObject UTF8String](v12, "UTF8String"), __str, 0x10uLL))
              sub_100063234((uint64_t)WeakRetained);
            goto LABEL_14;
          }
          v8 = nplog_obj(v1, v2, v3);
          v7 = objc_claimAutoreleasedReturnValue(v8);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__str = 0;
            v9 = v7;
            v10 = "Received undersize KEV_DL_LINK_QUALITY_METRIC_CHANGED from kernel";
            v11 = 2;
LABEL_25:
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)__str, v11);
          }
        }
        else
        {
          v6 = nplog_obj(v1, v2, v3);
          v7 = objc_claimAutoreleasedReturnValue(v6);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__str = 67109632;
            *(_DWORD *)v23 = 256;
            *(_WORD *)&v23[4] = 1024;
            *(_DWORD *)&v23[6] = v26;
            v24 = 1024;
            v25 = DWORD1(v27);
            v9 = v7;
            v10 = "buffer too small (%u vs %u) for event code %u";
            v11 = 20;
            goto LABEL_25;
          }
        }
LABEL_14:

LABEL_19:
        v1 = recv(*((_DWORD *)WeakRetained + 8), &v26, 0x100uLL, 0);
      }
      while (v1 > 0);
    }
    if (v1 < 0)
    {
      v13 = __error();
      if (*v13 != 35)
      {
        v16 = nplog_obj(v13, v14, v15);
        v17 = objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          v19 = __error();
          v20 = strerror(*v19);
          *(_DWORD *)__str = 136315138;
          *(_QWORD *)v23 = v20;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "recv %s from kernel event socket failed", (uint8_t *)__str, 0xCu);
        }

        dispatch_source_cancel(*((dispatch_source_t *)WeakRetained + 40));
        v18 = (void *)*((_QWORD *)WeakRetained + 40);
        *((_QWORD *)WeakRetained + 40) = 0;

      }
    }
  }

}

void sub_1000722E8(uint64_t a1)
{
  sub_100066AEC(*(_QWORD *)(a1 + 32));
}

void sub_1000722F0(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v2;
  uint64_t v3;
  id *v4;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    sub_100064FB4(WeakRetained, v2, v3);
    WeakRetained = v4;
  }

}

void sub_100072320(uint64_t a1, char a2)
{
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  uint8_t buf[4];
  const char *v12;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v10 = WeakRetained;
    v6 = nplog_obj(WeakRetained, v4, v5);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = "active";
      if ((a2 & 1) == 0)
        v8 = "not active";
      *(_DWORD *)buf = 136315138;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "received user activity notification, user is %s", buf, 0xCu);
    }

    WeakRetained = v10;
    if ((a2 & 1) != 0 && *((_BYTE *)v10 + 20))
    {
      sub_10006315C((uint64_t)v10, 1, v9);
      WeakRetained = v10;
    }
  }

}

void sub_1000726EC(id a1)
{
  NSPCoreData *v1;
  void *v2;

  v1 = objc_alloc_init(NSPCoreData);
  v2 = (void *)qword_100112EB8;
  qword_100112EB8 = (uint64_t)v1;

}

void sub_100072C00(id a1, NSPersistentStoreDescription *a2, NSError *a3)
{
  NSPersistentStoreDescription *v4;
  NSError *v5;
  uint64_t v6;
  uint64_t v7;
  NSError *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  NSPersistentStoreDescription *v12;
  __int16 v13;
  NSError *v14;

  v4 = a2;
  v5 = a3;
  v8 = v5;
  if (v5)
  {
    v9 = nplog_obj(v5, v6, v7);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = 138412546;
      v12 = v4;
      v13 = 2112;
      v14 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to load CoreData persistent store %@ with error %@", (uint8_t *)&v11, 0x16u);
    }

  }
}

void sub_10007450C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100074524(uint64_t a1)
{

}

void sub_10007452C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  id v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  _QWORD v50[2];
  void *v51;
  void *v52;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPTokenEvent fetchRequest](NSPTokenEvent, "fetchRequest"));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSExpression expressionForKeyPath:](NSExpression, "expressionForKeyPath:", CFSTR("date")));
    v52 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v52, 1));
    v7 = objc_claimAutoreleasedReturnValue(+[NSExpression expressionForFunction:arguments:](NSExpression, "expressionForFunction:arguments:", CFSTR("min:"), v6));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSExpression expressionForKeyPath:](NSExpression, "expressionForKeyPath:", CFSTR("date")));
    v51 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v51, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSExpression expressionForFunction:arguments:](NSExpression, "expressionForFunction:arguments:", CFSTR("max:"), v9));

    v11 = objc_alloc_init((Class)NSExpressionDescription);
    v14 = v11;
    if (v11)
    {
      objc_msgSend(v11, "setName:", CFSTR("minDate"));
      objc_msgSend(v14, "setExpression:", v7);
      objc_msgSend(v14, "setExpressionResultType:", 900);
      v15 = objc_alloc_init((Class)NSExpressionDescription);
      v18 = v15;
      if (v15)
      {
        -[NSObject setName:](v15, "setName:", CFSTR("maxDate"));
        -[NSObject setExpression:](v18, "setExpression:", v10);
        -[NSObject setExpressionResultType:](v18, "setExpressionResultType:", 900);
        v50[0] = v14;
        v50[1] = v18;
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v50, 2));
        objc_msgSend(v4, "setPropertiesToFetch:", v19);

        objc_msgSend(v4, "setResultType:", 2);
        v20 = *(void **)(a1 + 32);
        v45 = 0;
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "executeFetchRequest:error:", v4, &v45));
        v22 = v45;
        v25 = v22;
        if (v21 && (v22 = objc_msgSend(v21, "count")) != 0)
        {
          v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "firstObject"));
          v28 = *(_QWORD *)(a1 + 40);
          v27 = a1 + 40;
          v29 = *(_QWORD *)(v28 + 8);
          v30 = *(void **)(v29 + 40);
          *(_QWORD *)(v29 + 40) = v26;

          v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v27 + 8) + 40), "objectForKey:", CFSTR("minDate")));
          v32 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v27 + 8) + 40), "objectForKey:", CFSTR("maxDate")));
          v35 = (void *)v32;
          if (v31 && v32)
          {
            v36 = nplog_obj(v32, v33, v34);
            v37 = objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            {
              v44 = (char *)objc_claimAutoreleasedReturnValue(-[NSObject description](v31, "description"));
              v38 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "description"));
              *(_DWORD *)buf = 138412546;
              v47 = v44;
              v48 = 2112;
              v49 = v38;
              v43 = (void *)v38;
              _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Min date: %@, Max date: %@", buf, 0x16u);

            }
          }

        }
        else
        {
          v42 = nplog_obj(v22, v23, v24);
          v31 = objc_claimAutoreleasedReturnValue(v42);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v47 = (const char *)v25;
            _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Error fetching min and max dates: %@", buf, 0xCu);
          }
        }

      }
      else
      {
        v41 = nplog_obj(0, v16, v17);
        v25 = objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          v47 = "+[NSPCoreData getMinMaxDate]_block_invoke";
          _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "%s called with null maxDateExpressionDescription", buf, 0xCu);
        }
      }

    }
    else
    {
      v40 = nplog_obj(0, v12, v13);
      v18 = objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v47 = "+[NSPCoreData getMinMaxDate]_block_invoke";
        _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "%s called with null minDateExpressionDescription", buf, 0xCu);
      }
    }

  }
  else
  {
    v39 = nplog_obj(0, v2, v3);
    v7 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v47 = "+[NSPCoreData getMinMaxDate]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%s called with null fetchRequest", buf, 0xCu);
    }
  }

}

void sub_100074A6C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000752FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_10007533C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  __int128 v6;
  NSObject *v7;
  void *v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  const char *v29;
  void *v30;
  id v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  id v39;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPTokenEvent fetchRequest](NSPTokenEvent, "fetchRequest"));
  if (v4)
  {
    v5 = *(id *)(a1 + 32);
    v7 = v5;
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) & 0x8000000000000000) != 0)
    {
      v25 = v5;
    }
    else
    {
      *(_QWORD *)&v6 = 138412290;
      v28 = v6;
      do
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "components:fromDate:", 28, v7));
        objc_msgSend(v8, "setHour:", objc_msgSend(*(id *)(a1 + 56), "hour"));
        objc_msgSend(v8, "setMinute:", objc_msgSend(*(id *)(a1 + 56), "minute"));
        objc_msgSend(v8, "setSecond:", objc_msgSend(*(id *)(a1 + 56), "second"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dateFromComponents:", v8));
        objc_msgSend(*(id *)(a1 + 64), "doubleValue");
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dateByAddingTimeInterval:", v10 * 60.0));
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("(date >= %@) AND (date < %@) AND (vendor == %@) AND (eventType == %ld)"), v9, v11, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 104), v28));
        objc_msgSend(v4, "setPredicate:", v12);
        v13 = *(void **)(a1 + 80);
        v31 = 0;
        v14 = objc_msgSend(v13, "countForFetchRequest:error:", v4, &v31);
        v15 = v31;
        if (v15)
        {
          v18 = v15;
          v19 = nplog_obj(v15, v16, v17);
          v20 = objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedDescription"));
            *(_DWORD *)buf = 138412546;
            v33 = (const char *)v7;
            v34 = 2112;
            v35 = v21;
            _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Error fetching objects for date %@: %@", buf, 0x16u);

          }
        }
        else
        {
          v22 = nplog_obj(0, v16, v17);
          v23 = objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          {
            v29 = *(const char **)(a1 + 72);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "description"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "description"));
            *(_DWORD *)buf = 138413058;
            v33 = v29;
            v34 = 2112;
            v35 = v30;
            v36 = 2112;
            v37 = v26;
            v38 = 2048;
            v39 = v14;
            _os_log_debug_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "vendor:%@ Objects with date attribute between %@ and %@: %lu", buf, 0x2Au);

          }
          v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v14));
          objc_msgSend(v24, "addObject:", v18);
        }

        v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dateByAddingComponents:toDate:options:", *(_QWORD *)(a1 + 48), v7, 0));
        --*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
        v7 = v25;
      }
      while ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) & 0x8000000000000000) == 0);
    }
  }
  else
  {
    v27 = nplog_obj(0, v2, v3);
    v25 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v33 = "+[NSPCoreData getNSPEventStatsForSingleWindow:eventType:startDate:endDate:windowStartTime:windowDuration:]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "%s called with null fetchRequest", buf, 0xCu);
    }
  }

}

void sub_100075798(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_100075EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Block_object_dispose((const void *)(v39 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_100075F78(uint64_t a1)
{
  char *v2;
  __int128 v3;
  void *v4;
  void *v5;
  double v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  char *v27;
  void *v28;
  __int128 v29;
  id v30;
  const char *v31;
  void *v32;
  void *v33;
  id v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  void *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;

  v2 = (char *)*(id *)(a1 + 32);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) & 0x8000000000000000) == 0)
  {
    *(_QWORD *)&v3 = 138412290;
    v29 = v3;
    while (1)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "components:fromDate:", 540, v2));
      objc_msgSend(v4, "setHour:", objc_msgSend(*(id *)(a1 + 56), "hour"));
      objc_msgSend(v4, "setMinute:", objc_msgSend(*(id *)(a1 + 56), "minute"));
      objc_msgSend(v4, "setSecond:", objc_msgSend(*(id *)(a1 + 56), "second"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dateFromComponents:", v4));
      objc_msgSend(*(id *)(a1 + 64), "doubleValue");
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dateByAddingTimeInterval:", v6 * 60.0));
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("(date >= %@) AND (date < %@) AND (vendor == %@) AND (eventType != %ld)"), v5, v7, *(_QWORD *)(a1 + 72), 4, v29));
      objc_msgSend(*(id *)(a1 + 80), "setPredicate:", v8);
      v9 = *(void **)(a1 + 88);
      v10 = *(_QWORD *)(a1 + 80);
      v34 = 0;
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "executeFetchRequest:error:", v10, &v34));
      v12 = v34;
      v33 = v12;
      if (v11)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject valueForKey:](v11, "valueForKey:", CFSTR("tokenCount")));
        v18 = nplog_obj(v15, v16, v17);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        v20 = v19;
        if (!v15)
        {
          if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315138;
            v36 = "+[NSPCoreData getNSPTokenStatsForSingleWindow:startDate:endDate:windowStartTime:windowDuration:statsCa"
                  "tegory:]_block_invoke";
            _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "%s called with null tokenCount", buf, 0xCu);
          }

          break;
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          v31 = *(const char **)(a1 + 72);
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "description"));
          v30 = -[NSObject count](v11, "count");
          v25 = objc_msgSend(v15, "count");
          *(_DWORD *)buf = 138413314;
          v36 = v31;
          v37 = 2112;
          v38 = v32;
          v39 = 2112;
          v40 = v24;
          v41 = 2048;
          v42 = v30;
          v43 = 2048;
          v44 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "vendor:%@ Objects with date attribute between %@ and %@: %lu %lu", buf, 0x34u);

        }
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
        v22 = objc_msgSend(v21, "isDateInWeekend:", v5);

        if (v22)
          v23 = *(_QWORD *)(a1 + 104);
        else
          v23 = *(_QWORD *)(a1 + 112);
        objc_msgSend(*(id *)(*(_QWORD *)(v23 + 8) + 40), "addObjectsFromArray:", v15);
        if (objc_msgSend(v4, "weekday") == *(id *)(a1 + 128))
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), "addObjectsFromArray:", v15);

      }
      else
      {
        v26 = nplog_obj(v12, v13, v14);
        v11 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "localizedDescription"));
          *(_DWORD *)buf = 138412546;
          v36 = v2;
          v37 = 2112;
          v38 = v28;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Error fetching objects for date %@: %@", buf, 0x16u);

        }
      }

      v27 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dateByAddingComponents:toDate:options:", *(_QWORD *)(a1 + 48), v2, 0));
      --*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24);
      v2 = v27;
      if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) & 0x8000000000000000) != 0)
        goto LABEL_21;
    }
  }
  v27 = v2;
LABEL_21:

}

void sub_100076458(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1000769F8(uint64_t a1)
{
  NSPTokenEvent *v2;
  uint64_t v3;
  uint64_t v4;
  NSPTokenEvent *v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  NSObject *v20;

  v2 = -[NSPTokenEvent initWithContext:]([NSPTokenEvent alloc], "initWithContext:", *(_QWORD *)(a1 + 32));
  v5 = v2;
  if (v2)
  {
    -[NSPTokenEvent setDate:](v2, "setDate:", *(_QWORD *)(a1 + 40));
    -[NSPTokenEvent setEventType:](v5, "setEventType:", *(unsigned int *)(a1 + 64));
    -[NSPTokenEvent setVendor:](v5, "setVendor:", *(_QWORD *)(a1 + 48));
    -[NSPTokenEvent setTokenCount:](v5, "setTokenCount:", *(unsigned int *)(a1 + 56));
    v6 = *(void **)(a1 + 32);
    v16 = 0;
    v7 = objc_msgSend(v6, "save:", &v16);
    v8 = v16;
    v11 = v8;
    if (v7)
    {
      v12 = nplog_obj(v8, v9, v10);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v18 = (const char *)v5;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Successfully saved NSP Event %@ ", buf, 0xCu);
      }
    }
    else
    {
      v15 = nplog_obj(v8, v9, v10);
      v13 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v18 = (const char *)v5;
        v19 = 2112;
        v20 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to save NSP Event %@ error %@", buf, 0x16u);
      }
    }

  }
  else
  {
    v14 = nplog_obj(0, v3, v4);
    v11 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v18 = "+[NSPCoreData saveTokenEvent:eventType:vendor:tokenCount:]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%s called with null event", buf, 0xCu);
    }
  }

}

void sub_100076C64(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_100076D70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *i;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  uint8_t v27[128];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  uint64_t v31;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPTokenEvent fetchRequest](NSPTokenEvent, "fetchRequest"));
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("date <= %@"), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v4, "setPredicate:", v5);

    v6 = *(void **)(a1 + 40);
    v26 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeFetchRequest:error:", v4, &v26));
    v8 = v26;
    v11 = v8;
    if (v7)
    {
      v12 = nplog_obj(v8, v9, v10);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = (const char *)objc_msgSend(v7, "count");
        v15 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 134218242;
        v29 = v14;
        v30 = 2112;
        v31 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Found %lu events older than %@", buf, 0x16u);
      }

      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v16 = v7;
      v17 = -[NSObject countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      if (v17)
      {
        v18 = *(_QWORD *)v23;
        do
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(_QWORD *)v23 != v18)
              objc_enumerationMutation(v16);
            objc_msgSend(*(id *)(a1 + 40), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i));
          }
          v17 = -[NSObject countByEnumeratingWithState:objects:count:](v16, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
        }
        while (v17);
      }

    }
    else
    {
      v21 = nplog_obj(v8, v9, v10);
      v16 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v29 = (const char *)v11;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "executeFetchRequest failed %@", buf, 0xCu);
      }
    }

  }
  else
  {
    v20 = nplog_obj(0, v2, v3);
    v11 = objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v29 = "+[NSPCoreData purgeEventsOlderThanDate:]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%s called with null fetchRequest", buf, 0xCu);
    }
  }

}

void sub_100077094(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_10007726C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100077284(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  id v20;
  uint8_t buf[4];
  const char *v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPTokenEvent fetchRequest](NSPTokenEvent, "fetchRequest"));
  v5 = v2;
  if (v2)
  {
    objc_msgSend(v2, "setFetchBatchSize:", 6);
    objc_msgSend(v5, "setFetchLimit:", 50);
    v6 = *(void **)(a1 + 32);
    v20 = 0;
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeFetchRequest:error:", v5, &v20));
    v8 = v20;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v7;

    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) == 0;
    v15 = nplog_obj(v12, v13, v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = v16;
    if (v11)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v22 = (const char *)v8;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to fetch events %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v18 = (const char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "count");
      *(_DWORD *)buf = 134217984;
      v22 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Found %lu events ", buf, 0xCu);
    }

  }
  else
  {
    v19 = nplog_obj(0, v3, v4);
    v8 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v22 = "+[NSPCoreData fetchEvents]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "%s called with null fetchRequest", buf, 0xCu);
    }
  }

}

void sub_100077878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100077890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  char *v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *oslog;
  uint64_t v53;
  void *v54;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  unsigned int v68;
  __int16 v69;
  void *v70;
  _BYTE v71[128];
  _BYTE v72[128];

  v3 = nplog_obj(a1, a2, a3);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v46 = *(const char **)(a1 + 56);
    *(_DWORD *)buf = 134217984;
    v66 = v46;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fetching %lu events", buf, 0xCu);
  }

  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSPTokenEvent fetchRequest](NSPTokenEvent, "fetchRequest"));
  if (!v54)
  {
    v48 = nplog_obj(0, v5, v6);
    v45 = objc_claimAutoreleasedReturnValue(v48);
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
      goto LABEL_32;
    *(_DWORD *)buf = 136315138;
    v66 = "+[NSPCoreData fetchLatestEvents:vendors:]_block_invoke";
    v49 = "%s called with null fetchRequest";
    goto LABEL_39;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v9 = objc_alloc_init((Class)NSMutableArray);
    if (v9)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v10 = *(id *)(a1 + 32);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v61, v72, 16);
      if (v11)
      {
        v12 = *(_QWORD *)v62;
        do
        {
          for (i = 0; i != v11; i = (char *)i + 1)
          {
            if (*(_QWORD *)v62 != v12)
              objc_enumerationMutation(v10);
            v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("vendor == %@"), *(_QWORD *)(*((_QWORD *)&v61 + 1) + 8 * (_QWORD)i)));
            objc_msgSend(v9, "addObject:", v14);

          }
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v61, v72, 16);
        }
        while (v11);
      }

      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v9));
      objc_msgSend(v54, "setPredicate:", v15);

      goto LABEL_14;
    }
    v51 = nplog_obj(0, v7, v8);
    v45 = objc_claimAutoreleasedReturnValue(v51);
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
      goto LABEL_32;
    *(_DWORD *)buf = 136315138;
    v66 = "+[NSPCoreData fetchLatestEvents:vendors:]_block_invoke";
    v49 = "%s called with null predicates";
LABEL_39:
    _os_log_fault_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, v49, buf, 0xCu);
    goto LABEL_32;
  }
LABEL_14:
  v53 = objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("date"), 0));
  if (v53)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:"));
    objc_msgSend(v54, "setSortDescriptors:", v17);

    objc_msgSend(v54, "setFetchLimit:", *(_QWORD *)(a1 + 56));
    v18 = *(void **)(a1 + 40);
    v60 = 0;
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "executeFetchRequest:error:", v54, &v60));
    oslog = v60;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v21 = *(void **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = v19;

    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) == 0;
    v26 = nplog_obj(v23, v24, v25);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    v28 = v27;
    if (v22)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v66 = (const char *)oslog;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to fetch events %@", buf, 0xCu);
      }
    }
    else
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v47 = (const char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count");
        *(_DWORD *)buf = 134217984;
        v66 = v47;
        _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Found %lu events", buf, 0xCu);
      }

      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "reverseObjectEnumerator"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "allObjects"));

      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v31 = v30;
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v56, v71, 16);
      v35 = v32;
      if (v32)
      {
        v36 = *(_QWORD *)v57;
        do
        {
          v37 = 0;
          do
          {
            if (*(_QWORD *)v57 != v36)
              objc_enumerationMutation(v31);
            v38 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)v37);
            v39 = nplog_obj(v32, v33, v34);
            v40 = objc_claimAutoreleasedReturnValue(v39);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
            {
              v41 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "date"));
              v42 = objc_msgSend(v38, "eventType");
              v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "vendor"));
              *(_DWORD *)buf = 138412802;
              v66 = v41;
              v67 = 1024;
              v68 = v42;
              v69 = 2112;
              v70 = v43;
              _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Event Date:%@ type:%u vendor:%@", buf, 0x1Cu);

            }
            v37 = (char *)v37 + 1;
          }
          while (v35 != v37);
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v56, v71, 16);
          v35 = v32;
        }
        while (v32);
      }

      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v28 = *(NSObject **)(v44 + 40);
      *(_QWORD *)(v44 + 40) = v31;
    }

  }
  else
  {
    v50 = nplog_obj(0, v16, 0);
    oslog = objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v66 = "+[NSPCoreData fetchLatestEvents:vendors:]_block_invoke";
      _os_log_fault_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_FAULT, "%s called with null sortDescriptor", buf, 0xCu);
    }
  }

  v45 = v53;
LABEL_32:

}

void sub_100078090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000780A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  id v29;
  uint8_t buf[4];
  const char *v31;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPTokenEvent fetchRequest](NSPTokenEvent, "fetchRequest"));
  if (!v4)
  {
    v26 = nplog_obj(0, v2, v3);
    v12 = objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 136315138;
    v31 = "+[NSPCoreData fetchEvents:mostRecent:limit:]_block_invoke";
    v27 = "%s called with null fetchRequest";
    goto LABEL_20;
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("vendor == %@"), *(_QWORD *)(a1 + 32)));
    objc_msgSend(v4, "setPredicate:", v5);

  }
  if (*(_BYTE *)(a1 + 64))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("date"), 0));
    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v8));
      objc_msgSend(v4, "setSortDescriptors:", v9);

      goto LABEL_7;
    }
    v28 = nplog_obj(0, v6, v7);
    v12 = objc_claimAutoreleasedReturnValue(v28);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 136315138;
    v31 = "+[NSPCoreData fetchEvents:mostRecent:limit:]_block_invoke";
    v27 = "%s called with null sortDescriptor";
LABEL_20:
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, v27, buf, 0xCu);
    goto LABEL_15;
  }
LABEL_7:
  objc_msgSend(v4, "setFetchLimit:", *(unsigned int *)(a1 + 56));
  v10 = *(void **)(a1 + 40);
  v29 = 0;
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "executeFetchRequest:error:", v4, &v29));
  v12 = v29;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v11;

  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) == 0;
  v19 = nplog_obj(v16, v17, v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  v21 = v20;
  if (v15)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v31 = (const char *)v12;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to fetch events %@", buf, 0xCu);
    }
    goto LABEL_14;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    v25 = (const char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count");
    *(_DWORD *)buf = 134217984;
    v31 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Fetched %lu events", buf, 0xCu);
  }

  if (*(_BYTE *)(a1 + 64))
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "reverseObjectEnumerator"));
    v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "allObjects"));

    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v21 = *(NSObject **)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v23;
LABEL_14:

  }
LABEL_15:

}

id sub_10007C9A0(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = +[NSPAppRule copyUUIDsForSigningIdentifier:executablePath:](NSPAppRule, "copyUUIDsForSigningIdentifier:executablePath:", v3, 0);

  return v4;
}

id sub_10007C9EC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, int a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;

  v15 = a4;
  v16 = a7;
  v17 = a3;
  objc_opt_self(a1);
  v18 = objc_alloc_init((Class)NSMutableArray);
  if (v15)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v15));
    objc_msgSend(v18, "addObject:", v19);

  }
  if ((_DWORD)a5)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition schemeUsingPort:](NEPolicyCondition, "schemeUsingPort:", a5));
    objc_msgSend(v18, "addObject:", v20);

  }
  if ((_DWORD)a6 == 17 || (_DWORD)a6 == 6)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", a6));
    objc_msgSend(v18, "addObject:", v21);

  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  objc_msgSend(v18, "addObject:", v22);

  if (a8)
  {
    v23 = +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", getuid());
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    objc_msgSend(v18, "addObject:", v24);

  }
  if (v16)
    objc_msgSend(v18, "addObjectsFromArray:", v16);
  v25 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", a2, v17, v18);

  return v25;
}

id sub_10007CB8C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v36;
  id v37;
  id v38;
  id obj;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];

  v11 = a2;
  v12 = a3;
  v13 = a4;
  objc_opt_self(a1);
  v14 = objc_alloc_init((Class)NSMutableArray);
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 500));
  v15 = objc_alloc_init((Class)NSMutableArray);
  if ((_DWORD)a6)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", a6));
    objc_msgSend(v15, "addObject:", v16);

  }
  if (v11)
  {
    v17 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v11);
    v18 = (id)objc_claimAutoreleasedReturnValue(v17);
  }
  else
  {
    if (!objc_msgSend(v12, "count"))
    {
      v33 = objc_msgSend(v15, "copy");
      v34 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v42, 0, 0, a5, v33, 1);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v34);

      objc_msgSend(v14, "addObject:", v19);
      goto LABEL_20;
    }
    v18 = v12;
  }
  v19 = v18;
  if (objc_msgSend(v18, "count"))
  {
    v37 = v12;
    v38 = v11;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v36 = v19;
    obj = v19;
    v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
    if (v43)
    {
      v41 = *(_QWORD *)v45;
      v40 = a5;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v45 != v41)
            objc_enumerationMutation(obj);
          v21 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v20);
          v22 = objc_msgSend(v15, "copy", v36, v37, v38);
          v23 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v42, v21, 0, a5, v22, 1);
          v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

          objc_msgSend(v14, "addObject:", v24);
          if (v13)
          {
            v25 = objc_msgSend(v15, "mutableCopy");
            v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", v13));
            objc_msgSend(v25, "addObject:", v26);

            v27 = v15;
            v28 = v13;
            v29 = v14;
            v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
            a5 = v40;
            v31 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 400, v30, v21, 0, v40, v25, 1);
            v32 = (void *)objc_claimAutoreleasedReturnValue(v31);

            v14 = v29;
            v13 = v28;
            v15 = v27;
            objc_msgSend(v14, "addObject:", v32);

          }
          v20 = (char *)v20 + 1;
        }
        while (v43 != v20);
        v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v48, 16);
      }
      while (v43);
    }

    v12 = v37;
    v11 = v38;
    v19 = v36;
  }
  else
  {

    v14 = 0;
  }
LABEL_20:

  return v14;
}

id sub_10007CEF4(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v7 = a2;
  v8 = a4;
  objc_opt_self(a1);
  v9 = objc_alloc_init((Class)NSMutableArray);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 500));
  if (v7)
  {
    v11 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v7);
    v12 = (id)objc_claimAutoreleasedReturnValue(v11);
  }
  else
  {
    if (!objc_msgSend(v8, "count"))
    {
      v25 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v10, 0, 80, 6, 0, 1);
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      objc_msgSend(v9, "addObject:", v26);
      v27 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v10, 0, 443, 0, 0, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

      objc_msgSend(v9, "addObject:", v28);
      goto LABEL_18;
    }
    v12 = v8;
  }
  v13 = v12;
  if (objc_msgSend(v12, "count"))
  {
    v29 = v8;
    v30 = v7;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v14 = v13;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          if ((a3 & 1) == 0)
          {
            v20 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v10, *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i), 80, 6, 0, 1);
            v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
            objc_msgSend(v9, "addObject:", v21);

          }
          v22 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v10, v19, 443, 0, 0, 1);
          v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          objc_msgSend(v9, "addObject:", v23);

        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      }
      while (v16);
    }

    v8 = v29;
    v7 = v30;
  }
  else
  {

    v9 = 0;
  }

LABEL_18:
  return v9;
}

id sub_10007D198(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  id v21;
  void *v22;
  id v23;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];

  v7 = a2;
  v8 = a3;
  objc_opt_self(a1);
  v9 = objc_alloc_init((Class)NSMutableArray);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 500));
  v11 = objc_alloc_init((Class)NSMutableArray);
  if (a4)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 0x1000000));
    objc_msgSend(v11, "addObject:", v12);

  }
  if (v7)
  {
    v13 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v7);
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
  }
  else
  {
    if (!objc_msgSend(v8, "count"))
    {
      v23 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v10, 0, 80, 6, v11, 1);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v23);
      objc_msgSend(v9, "addObject:", v15);
      goto LABEL_18;
    }
    v14 = v8;
  }
  v15 = v14;
  if (objc_msgSend(v14, "count"))
  {
    v25 = v7;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v16 = v15;
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v18; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v19)
            objc_enumerationMutation(v16);
          v21 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v10, *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i), 80, 6, v11, 1);
          v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          objc_msgSend(v9, "addObject:", v22);

        }
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
      }
      while (v18);
    }

    v7 = v25;
  }
  else
  {

    v9 = 0;
  }
LABEL_18:

  return v9;
}

void sub_10007D3EC(uint64_t a1, void *a2, void *a3, int a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[3];

  v6 = a3;
  v7 = a2;
  objc_opt_self(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyDNSAgent dnsAgentUUID](NSPPrivacyProxyDNSAgent, "dnsAgentUUID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 5, 3));
  objc_msgSend(v9, "setNetworkAgentUUID:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 5, 2));
  objc_msgSend(v10, "setNetworkAgentUUID:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 5, 4));
  objc_msgSend(v11, "setNetworkAgentUUID:", v8);
  v34 = v9;
  v36[0] = v9;
  v36[1] = v10;
  v36[2] = v11;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v36, 3));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:"));
  v13 = objc_alloc_init((Class)NSMutableArray);
  v14 = +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", getuid());
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  objc_msgSend(v13, "addObject:", v15);

  v16 = v6;
  v17 = objc_alloc_init((Class)NSMutableArray);
  v18 = +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", getuid());
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  objc_msgSend(v17, "addObject:", v19);

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  objc_msgSend(v17, "addObject:", v20);

  if (v16)
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v16));
    objc_msgSend(v13, "addObject:", v21);

    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v16));
    objc_msgSend(v17, "addObject:", v22);

  }
  v35 = v16;
  if (a4)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 0x1000000));
    objc_msgSend(v13, "addObject:", v23);

    v24 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 16785408));
  }
  else
  {
    v24 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](NEPolicyCondition, "fallbackTraffic"));
  }
  v25 = (void *)v24;
  objc_msgSend(v17, "addObject:", v24);

  v26 = objc_alloc((Class)NEPolicy);
  v27 = objc_msgSend(v13, "copy");
  v28 = objc_msgSend(v26, "initWithOrder:result:conditions:", 450, v12, v27);

  objc_msgSend(v7, "addObject:", v28);
  v29 = objc_alloc((Class)NEPolicy);
  v30 = objc_msgSend(v17, "copy");
  v31 = objc_msgSend(v29, "initWithOrder:result:conditions:", 450, v12, v30);

  objc_msgSend(v7, "addObject:", v31);
}

id sub_10007D740(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  id v17;
  id v18;
  uint64_t v19;
  void *j;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  void *v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[2];
  _BYTE v40[128];
  _BYTE v41[128];

  v7 = a2;
  v8 = a3;
  objc_opt_self(a1);
  v9 = objc_alloc_init((Class)NSMutableArray);
  v29 = v7;
  if (v7)
  {
    v10 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (objc_msgSend(v11, "count", v7))
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v12 = v11;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v36;
        do
        {
          for (i = 0; i != v14; i = (char *)i + 1)
          {
            if (*(_QWORD *)v36 != v15)
              objc_enumerationMutation(v12);
            sub_10007D3EC((uint64_t)NSPPrivacyProxyPolicySerialization, v9, *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i), a4);
          }
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
        }
        while (v14);
      }

    }
    else
    {

      v9 = 0;
    }

  }
  else
  {
    sub_10007D3EC((uint64_t)NSPPrivacyProxyPolicySerialization, v9, 0, a4);
  }
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = v8;
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(_QWORD *)v32 != v19)
          objc_enumerationMutation(obj);
        v21 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j);
        if (objc_msgSend(v9, "count", v29))
        {
          v22 = objc_alloc((Class)NEPolicy);
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v21));
          v39[0] = v24;
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
          v39[1] = v25;
          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v39, 2));
          v27 = objc_msgSend(v22, "initWithOrder:result:conditions:", 421, v23, v26);

          objc_msgSend(v9, "addObject:", v27);
        }
      }
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
    }
    while (v18);
  }

  return v9;
}

id sub_10007DA10(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  void *j;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD v60[2];
  _QWORD v61[2];
  void *v62;
  void *v63;
  uint8_t v64[128];
  uint8_t buf[4];
  void *v66;
  __int16 v67;
  uint64_t v68;
  _BYTE v69[128];

  v7 = a2;
  v8 = a4;
  objc_opt_self(a1);
  v51 = objc_alloc_init((Class)NSMutableArray);
  v49 = v7;
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 500));
  v47 = v8;
  if (v7 || objc_msgSend(v8, "count"))
  {
    if (a3)
      v9 = 589824;
    else
      v9 = 0x10000;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", v9));
    if (v7)
    {
      v11 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v7);
      v12 = (id)objc_claimAutoreleasedReturnValue(v11);
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v13 = v8;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v56, v69, 16);
      if (v14)
      {
        v15 = v14;
        v16 = 0;
        v17 = *(_QWORD *)v57;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v57 != v17)
              objc_enumerationMutation(v13);
            v19 = *(_QWORD *)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
            v20 = objc_msgSend(v12, "containsObject:", v19);
            if ((v20 & 1) == 0)
            {
              v23 = nplog_obj(v20, v21, v22);
              v24 = objc_claimAutoreleasedReturnValue(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412546;
                v66 = v49;
                v67 = 2112;
                v68 = v19;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Adding %@ UUID missing from cache %@", buf, 0x16u);
              }

              if (!v16)
                v16 = objc_alloc_init((Class)NSMutableArray);
              objc_msgSend(v16, "addObject:", v19);
            }
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v56, v69, 16);
        }
        while (v15);
      }
      else
      {
        v16 = 0;
      }

      if (objc_msgSend(v16, "count"))
      {
        v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "arrayByAddingObjectsFromArray:", v16));

        v12 = (id)v25;
      }

    }
    else
    {
      v12 = v8;
    }
    if (objc_msgSend(v12, "count"))
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v26 = v12;
      v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v53;
        do
        {
          for (j = 0; j != v28; j = (char *)j + 1)
          {
            if (*(_QWORD *)v53 != v29)
              objc_enumerationMutation(v26);
            v31 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)j);
            v63 = v10;
            v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v63, 1));
            v33 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 470, v50, v31, 0, 0, v32, 1);
            v34 = (void *)objc_claimAutoreleasedReturnValue(v33);

            objc_msgSend(v51, "addObject:", v34);
          }
          v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v52, v64, 16);
        }
        while (v28);
      }
      v12 = v26;
    }
    else
    {
      v26 = v51;
      v51 = 0;
    }
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 0x200000));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 480));
    v62 = v10;
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v62, 1));
    v36 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 460, v12, 0, 0, 0, v35, 1);
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

    objc_msgSend(v51, "addObject:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.WebKit.InAppBrowser")));
    objc_msgSend(v38, "setNegative:", 1);
    v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 0x10000));
    v61[0] = v38;
    v61[1] = v48;
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v61, 2));
    v40 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 470, v50, 0, 0, 0, v39, 1);
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);

    objc_msgSend(v51, "addObject:", v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.WebKit.InAppBrowser")));
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 589824));
    v60[0] = v42;
    v60[1] = v43;
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v60, 2));
    v45 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 470, v50, 0, 0, 0, v44, 1);
    v26 = (id)objc_claimAutoreleasedReturnValue(v45);

    objc_msgSend(v51, "addObject:", v26);
  }

  return v51;
}

id sub_10007DF90(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v28;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];

  v9 = a2;
  v10 = a3;
  objc_opt_self(a1);
  v11 = objc_alloc_init((Class)NSMutableArray);
  v12 = objc_alloc_init((Class)NSMutableArray);
  if (v10)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", v10));
    objc_msgSend(v12, "addObject:", v13);

  }
  if (a4)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
    objc_msgSend(v12, "addObject:", v14);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 500));
  if (v9)
  {
    v16 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v9);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if (objc_msgSend(v17, "count"))
    {
      v29 = v10;
      v30 = v9;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v28 = v17;
      v18 = v17;
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(_QWORD *)v32 != v21)
              objc_enumerationMutation(v18);
            v23 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v15, *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i), 0, 0, v12, a5);
            v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
            objc_msgSend(v11, "addObject:", v24);

          }
          v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
        }
        while (v20);
      }

      v10 = v29;
      v9 = v30;
      v17 = v28;
    }
    else
    {

      v11 = 0;
    }

  }
  else
  {
    v25 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v15, 0, 0, 0, v12, a5);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    objc_msgSend(v11, "addObject:", v26);

  }
  return v11;
}

void sub_10007E1F8(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void **p_cache;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _UNKNOWN **v25;
  void *i;
  void *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  id v31;
  void *v32;
  _UNKNOWN **v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  char v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  uint8_t v48[128];
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  id v52;

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = objc_opt_self(a1);
  p_cache = NSPPrivacyProxyMultiHopFallbackNetworkRegistration.cache;
  if (v9)
  {
    v14 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v9);
    v15 = (id)objc_claimAutoreleasedReturnValue(v14);
    if (!v15)
    {
      v18 = nplog_obj(0, v16, v17);
      v19 = objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v50 = v12;
        v51 = 2112;
        v52 = v9;
LABEL_23:
        v23 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%@ failed to get UUIDs for %@", buf, 0x16u);
        goto LABEL_21;
      }
LABEL_8:
      v23 = v19;
      goto LABEL_21;
    }
  }
  else if (v10)
  {
    v15 = +[NEProcessInfo copyUUIDsForExecutable:](NEProcessInfo, "copyUUIDsForExecutable:", v10);
    if (!v15)
    {
      v22 = nplog_obj(0, v20, v21);
      v19 = objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v50 = v12;
        v51 = 2112;
        v52 = v10;
        goto LABEL_23;
      }
      goto LABEL_8;
    }
  }
  else
  {
    v15 = 0;
  }
  v39 = v10;
  v40 = v9;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v23 = v15;
  v42 = -[NSObject countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
  if (v42)
  {
    v24 = *(_QWORD *)v44;
    v25 = &AnalyticsSendEventLazy_ptr;
    v41 = a4;
    do
    {
      for (i = 0; i != v42; i = (char *)i + 1)
      {
        if (*(_QWORD *)v44 != v24)
          objc_enumerationMutation(v23);
        v27 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
        v28 = (uint64_t)(p_cache + 363);
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25[84], "skipWithOrder:", 600, v39, v40));
        if ((a4 & 1) != 0)
        {
          v30 = v23;
          v31 = v11;
          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
          v47 = v32;
          v33 = v25;
          v34 = v24;
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v47, 1));
          v36 = sub_10007C9EC(v28, 400, v29, v27, 0, 0, v35, 0);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

          v24 = v34;
          v25 = v33;

          v11 = v31;
          v23 = v30;
          a4 = v41;
          p_cache = (void **)(NSPPrivacyProxyMultiHopFallbackNetworkRegistration + 16);
        }
        else
        {
          v38 = sub_10007C9EC((uint64_t)(p_cache + 363), 400, v29, v27, 0, 0, 0, 0);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v38);
        }

        objc_msgSend(v11, "addObject:", v37);
      }
      v42 = -[NSObject countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v43, v48, 16);
    }
    while (v42);
  }

  v10 = v39;
  v9 = v40;
LABEL_21:

}

id sub_10007E51C(uint64_t a1, unsigned int a2, void *a3, int a4, void *a5, void *a6, void *a7, void *a8)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  unsigned int v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  id v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  void *v113;
  id v114;
  void *v115;
  id v116;
  void *v117;
  id v118;
  void *v119;
  id v120;
  void *v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  void *i;
  uint64_t v127;
  id v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  id v139;
  uint64_t v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  id v146;
  uint64_t v147;
  id v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  id v153;
  id v154;
  void *v155;
  void *v156;
  void *v157;
  id v158;
  uint64_t v159;
  id v160;
  void *v161;
  void *v162;
  void *v163;
  id v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  uint64_t v170;
  id v171;
  void *v172;
  void *v173;
  void *v174;
  id v175;
  char v176;
  void *v177;
  id v178;
  void *v179;
  void *v180;
  id v181;
  id v182;
  void *v183;
  void *v184;
  id v185;
  void *v186;
  void *v187;
  id v188;
  id v189;
  void *v190;
  id v191;
  id v192;
  void *v193;
  void *v194;
  id v195;
  void *v196;
  id v197;
  void *v198;
  void *v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  void *v205;
  void *v206;
  id v207;
  void *v208;
  void *v209;
  id v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  id v215;
  id v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  id v221;
  id v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  NSObject *v229;
  id v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *v235;
  id v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  id v240;
  id v241;
  uint64_t v242;
  NSObject *v243;
  id v244;
  id v245;
  id v246;
  uint64_t v247;
  void *j;
  id v249;
  id v250;
  id v251;
  uint64_t v252;
  void *k;
  uint64_t v254;
  id v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  id v262;
  void *v263;
  void *v264;
  void *v265;
  id v266;
  void *v267;
  int v268;
  void *v269;
  void *v270;
  void *v271;
  uint64_t v272;
  id v273;
  uint64_t v274;
  NSObject *v275;
  uint64_t v276;
  void *v278;
  void *v279;
  void *v280;
  id v281;
  void *v282;
  void *v283;
  id v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  id v291;
  id v292;
  void *v293;
  id v294;
  id v295;
  id v296;
  void *v297;
  int v298;
  void *v299;
  void *v300;
  void *v301;
  void *v303;
  void *v304;
  uint64_t v305;
  id v307;
  id obj;
  id obja;
  id v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  _QWORD v315[3];
  _QWORD v316[2];
  _QWORD v317[3];
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  _QWORD v325[5];
  void *v326;
  void *v327;
  _QWORD v328[2];
  _QWORD v329[3];
  _QWORD v330[2];
  void *v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  _BYTE buf[120];
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;

  v13 = a3;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v305 = objc_opt_self(a1);
  v18 = objc_alloc_init((Class)NSMutableArray);
  v19 = objc_alloc_init((Class)NSMutableArray);
  if (v14)
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v14));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "host"));
    if (v21)
      objc_msgSend(v19, "addObject:", v21);

  }
  if (v15)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v15));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "host"));
    if (v23)
      objc_msgSend(v19, "addObject:", v23);

  }
  v24 = a2;
  if ((a2 & 0x80) != 0)
  {
    v32 = sub_10007D740((uint64_t)NSPPrivacyProxyPolicySerialization, 0, v19, 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v32);
    if (!v28)
    {
      v35 = nplog_obj(0, v33, v34);
      v30 = objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"ANY DNS\" policies";
        goto LABEL_171;
      }
LABEL_172:

      goto LABEL_173;
    }
  }
  else if ((a2 & 2) != 0)
  {
    v36 = sub_10007D740((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), v19, 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v36);
    if (!v28)
    {
      v62 = nplog_obj(0, v37, v38);
      v30 = objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari DNS\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
  }
  else
  {
    if ((a2 & 0x80000) == 0)
      goto LABEL_20;
    v25 = sub_10007D740((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), v19, 1);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if (!v28)
    {
      v29 = nplog_obj(0, v26, v27);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari Private DNS\" policies";
LABEL_171:
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, v31, buf, 0xCu);
        goto LABEL_172;
      }
      goto LABEL_172;
    }
  }
  objc_msgSend(v18, "addObjectsFromArray:", v28);

LABEL_20:
  if ((a2 & 0x100) != 0)
  {
    v39 = sub_10007DA10((uint64_t)NSPPrivacyProxyPolicySerialization, 0, 0, 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v39);
    if (!v42)
    {
      v43 = nplog_obj(0, v40, v41);
      v30 = objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"ANY KNOWN TRACKER\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
  }
  else
  {
    if ((a2 & 4) == 0)
      goto LABEL_27;
    v44 = sub_10007DA10((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), 1, 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue(v44);
    if (!v42)
    {
      v64 = nplog_obj(0, v45, v46);
      v30 = objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari KNOWN TRACKER\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
  }
  objc_msgSend(v18, "addObjectsFromArray:", v42);

LABEL_27:
  if ((a2 & 0x40) != 0)
  {
    v53 = sub_10007D198((uint64_t)NSPPrivacyProxyPolicySerialization, 0, 0, 0);
    v54 = objc_claimAutoreleasedReturnValue(v53);
    if (!v54)
    {
      v63 = nplog_obj(0, v55, v56);
      v30 = objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"ANY UNENCRYPTED\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
    v57 = (void *)v54;
    v47 = 1;
    LOBYTE(v298) = 1;
  }
  else if ((a2 & 1) != 0)
  {
    v58 = sub_10007D198((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), 0, 0);
    v59 = objc_claimAutoreleasedReturnValue(v58);
    if (!v59)
    {
      v78 = nplog_obj(0, v60, v61);
      v30 = objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari UNENCRYPTED\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
    v57 = (void *)v59;
    v298 = (a2 >> 8) & 1;
    v47 = 1;
  }
  else
  {
    if ((a2 & 0x40000) == 0)
    {
      v298 = (a2 >> 8) & 1;
      v47 = 0;
      if ((a2 & 0x10) != 0)
        goto LABEL_31;
      goto LABEL_48;
    }
    v66 = sub_10007D198((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), 0, 1);
    v67 = objc_claimAutoreleasedReturnValue(v66);
    if (!v67)
    {
      v203 = nplog_obj(0, v68, v69);
      v30 = objc_claimAutoreleasedReturnValue(v203);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari PRIVATE UNENCRYPTED\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
    v57 = (void *)v67;
    v298 = (a2 >> 8) & 1;
    v47 = 0;
  }
  objc_msgSend(v18, "addObjectsFromArray:", v57);

  if ((a2 & 0x10) != 0)
  {
LABEL_31:
    v48 = sub_10007CB8C((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), 0, CFSTR("com.apple.safari.peertopeer"), 0, 0);
    v49 = objc_claimAutoreleasedReturnValue(v48);
    if (!v49)
    {
      v65 = nplog_obj(0, v50, v51);
      v30 = objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari All\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
    goto LABEL_32;
  }
LABEL_48:
  if ((a2 & 0x20) != 0)
  {
    v74 = sub_10007CEF4((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), v47, 0);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v74);
    if (!v52)
    {
      v77 = nplog_obj(0, v75, v76);
      v30 = objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari HTTP\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
    goto LABEL_60;
  }
  if ((a2 & 0x100000) != 0)
  {
    v79 = sub_10007CB8C((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), 0, CFSTR("com.apple.safari.peertopeer"), 0, 0x1000000);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v79);
    if (!v52)
    {
      v276 = nplog_obj(0, v80, v81);
      v30 = objc_claimAutoreleasedReturnValue(v276);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v305;
        v31 = "%@ failed to create \"Safari Private All\" policies";
        goto LABEL_171;
      }
      goto LABEL_172;
    }
    goto LABEL_60;
  }
  if ((a2 & 0x200000) == 0)
    goto LABEL_61;
  v70 = sub_10007CB8C((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilesafari"), 0, CFSTR("com.apple.safari.peertopeer"), 0, 50331648);
  v49 = objc_claimAutoreleasedReturnValue(v70);
  if (!v49)
  {
    v73 = nplog_obj(0, v71, v72);
    v30 = objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v305;
      v31 = "%@ failed to create \"Safari\" policies";
      goto LABEL_171;
    }
    goto LABEL_172;
  }
LABEL_32:
  v52 = (void *)v49;
  LOBYTE(v298) = 1;
LABEL_60:
  objc_msgSend(v18, "addObjectsFromArray:", v52);

LABEL_61:
  v301 = v18;
  if ((a2 & 0x20000) == 0)
  {
    if ((a2 & 0x400) == 0)
      goto LABEL_63;
    goto LABEL_77;
  }
  v82 = sub_10007CB8C((uint64_t)NSPPrivacyProxyPolicySerialization, 0, 0, 0, 6, 0);
  v83 = objc_claimAutoreleasedReturnValue(v82);
  if (!v83)
  {
    v201 = nplog_obj(0, v84, v85);
    v30 = objc_claimAutoreleasedReturnValue(v201);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v305;
      v31 = "%@ failed to create \"App\" TCP policies";
      goto LABEL_171;
    }
    goto LABEL_172;
  }
  v86 = (void *)v83;
  objc_msgSend(v18, "addObjectsFromArray:", v83);
  v87 = sub_10007CB8C((uint64_t)NSPPrivacyProxyPolicySerialization, 0, 0, 0, 17, 0);
  v88 = (void *)objc_claimAutoreleasedReturnValue(v87);

  if (!v88)
  {
    v202 = nplog_obj(v89, v90, v91);
    v30 = objc_claimAutoreleasedReturnValue(v202);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v305;
      v31 = "%@ failed to create \"App\" UDP policies";
      goto LABEL_171;
    }
    goto LABEL_172;
  }
  v294 = v19;
  v296 = v17;
  v92 = v16;
  objc_msgSend(v18, "addObjectsFromArray:", v88);
  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](NEPolicyResult, "drop"));
  v94 = v18;
  v95 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", CFSTR("use-application-dns.net")));
  v331 = v95;
  v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v331, 1));
  v97 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 410, v93, 0, 0, 0, v96, 0);
  v98 = (void *)objc_claimAutoreleasedReturnValue(v97);

  if (v98)
  {
    objc_msgSend(v94, "addObject:", v98);

    LOBYTE(v298) = 1;
    v16 = v92;
    v19 = v294;
    v17 = v296;
    v18 = v94;
    v24 = a2;
    if ((a2 & 0x400) == 0)
    {
LABEL_63:
      if ((v24 & 0x10000) == 0)
        goto LABEL_64;
      goto LABEL_80;
    }
LABEL_77:
    v102 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.news"), CFSTR("com.apple.news.urlresolution"), 0, 1);
    v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
    if (v103)
      objc_msgSend(v18, "addObjectsFromArray:", v103);

    if ((v24 & 0x10000) == 0)
    {
LABEL_64:
      if ((v24 & 0x800) == 0)
        goto LABEL_65;
      goto LABEL_83;
    }
LABEL_80:
    v104 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.news.embedded-content"), 0, 0);
    v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
    if (v105)
      objc_msgSend(v18, "addObjectsFromArray:", v105);

    if ((v24 & 0x800) == 0)
    {
LABEL_65:
      if ((v24 & 0x1000) == 0)
        goto LABEL_66;
      goto LABEL_86;
    }
LABEL_83:
    v106 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.exposurenotification.sensitive"), 1, 1);
    v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
    if (v107)
      objc_msgSend(v18, "addObjectsFromArray:", v107);

    if ((v24 & 0x1000) == 0)
    {
LABEL_66:
      if ((v24 & 0x4000) == 0)
        goto LABEL_67;
      goto LABEL_89;
    }
LABEL_86:
    v108 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.trustd.TrustURLSession"), 1, 0);
    v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
    if (v109)
      objc_msgSend(v18, "addObjectsFromArray:", v109);

    if ((v24 & 0x4000) == 0)
    {
LABEL_67:
      if ((v24 & 0x8000) == 0)
        goto LABEL_68;
      goto LABEL_92;
    }
LABEL_89:
    v110 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.dprivacyd.upload"), 1, 0);
    v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
    if (v111)
      objc_msgSend(v18, "addObjectsFromArray:", v111);

    if ((v24 & 0x8000) == 0)
    {
LABEL_68:
      if ((v24 & 0x400000) == 0)
        goto LABEL_69;
      goto LABEL_95;
    }
LABEL_92:
    v112 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.CommCenter.BrandedCalling"), 1, 0);
    v113 = (void *)objc_claimAutoreleasedReturnValue(v112);
    if (v113)
      objc_msgSend(v18, "addObjectsFromArray:", v113);

    if ((v24 & 0x400000) == 0)
    {
LABEL_69:
      if ((v24 & 0x800000) == 0)
        goto LABEL_70;
      goto LABEL_98;
    }
LABEL_95:
    v114 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.ap.promotedcontentd.proxied-requests"), 1, 0);
    v115 = (void *)objc_claimAutoreleasedReturnValue(v114);
    if (v115)
      objc_msgSend(v18, "addObjectsFromArray:", v115);

    if ((v24 & 0x800000) == 0)
    {
LABEL_70:
      if ((v24 & 0x1000000) == 0)
        goto LABEL_71;
      goto LABEL_101;
    }
LABEL_98:
    v116 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.appstored.skadnetwork.crowdanonymity"), 1, 0);
    v117 = (void *)objc_claimAutoreleasedReturnValue(v116);
    if (v117)
      objc_msgSend(v18, "addObjectsFromArray:", v117);

    if ((v24 & 0x1000000) == 0)
    {
LABEL_71:
      if ((v24 & 0x2000000) == 0)
        goto LABEL_107;
      goto LABEL_104;
    }
LABEL_101:
    v118 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.Passwords.PRIconFetching"), 1, 0);
    v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
    if (v119)
      objc_msgSend(v18, "addObjectsFromArray:", v119);

    if ((v24 & 0x2000000) == 0)
    {
LABEL_107:
      if (!objc_msgSend(v18, "count"))
      {
LABEL_165:
        v273 = v18;
        goto LABEL_174;
      }
      v295 = v19;
      v297 = v17;
      v292 = v14;
      v291 = v15;
      v293 = v13;
      v122 = v19;
      objc_opt_self(NSPPrivacyProxyPolicySerialization);
      v310 = objc_alloc_init((Class)NSMutableArray);
      v332 = 0u;
      v333 = 0u;
      v334 = 0u;
      v335 = 0u;
      obj = v122;
      v123 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v332, buf, 16);
      if (v123)
      {
        v124 = v123;
        v125 = *(_QWORD *)v333;
        do
        {
          for (i = 0; i != v124; i = (char *)i + 1)
          {
            if (*(_QWORD *)v333 != v125)
              objc_enumerationMutation(obj);
            v127 = *(_QWORD *)(*((_QWORD *)&v332 + 1) + 8 * (_QWORD)i);
            v128 = objc_alloc((Class)NEPolicy);
            v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyBootstrapDNSAgent dnsAgentUUID](NSPPrivacyProxyBootstrapDNSAgent, "dnsAgentUUID"));
            v130 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v129));
            v131 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v127));
            *(_QWORD *)&v337 = v131;
            v132 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
            *((_QWORD *)&v337 + 1) = v132;
            v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v337, 2));
            v134 = objc_msgSend(v128, "initWithOrder:result:conditions:", 420, v130, v133);

            objc_msgSend(v310, "addObject:", v134);
          }
          v124 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v332, buf, 16);
        }
        while (v124);
      }

      objc_msgSend(v301, "addObjectsFromArray:", v310);
      v135 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
      v136 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localNetworks](NEPolicyCondition, "localNetworks"));
      v330[0] = v136;
      v137 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v330[1] = v137;
      v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v330, 2));
      v139 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 410, v135, 0, 0, 0, v138, 1);
      v140 = objc_claimAutoreleasedReturnValue(v139);

      v285 = (void *)v140;
      objc_msgSend(v301, "addObject:", v140);
      v141 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
      v142 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", CFSTR("local")));
      v329[0] = v142;
      v143 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](NEPolicyCondition, "flowRemoteAddressEmpty"));
      v329[1] = v143;
      v144 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v329[2] = v144;
      v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v329, 3));
      v146 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 410, v141, 0, 0, 0, v145, 1);
      v147 = objc_claimAutoreleasedReturnValue(v146);

      v290 = (void *)v147;
      objc_msgSend(v301, "addObject:", v147);
      v148 = objc_alloc((Class)NEPolicy);
      v149 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
      v150 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v328[0] = v150;
      v151 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition requiredAgentDomain:agentType:](NEPolicyCondition, "requiredAgentDomain:agentType:", CFSTR("Cellular"), &stru_1000FC990));
      v328[1] = v151;
      v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v328, 2));
      v153 = objc_msgSend(v148, "initWithOrder:result:conditions:", 411, v149, v152);

      v18 = v301;
      v289 = v153;
      objc_msgSend(v301, "addObject:", v153);
      v154 = objc_alloc((Class)NEPolicy);
      v155 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
      v156 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v327 = v156;
      v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v327, 1));
      v158 = objc_msgSend(v154, "initWithOrder:result:conditions:", 490, v155, v157);

      v284 = v158;
      objc_msgSend(v301, "addObject:", v158);
      v159 = objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager multiHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "multiHopProxyAgentUUID"));
      v160 = objc_alloc((Class)NEPolicy);
      v161 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v159));
      v162 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v326 = v162;
      v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v326, 1));
      v164 = objc_msgSend(v160, "initWithOrder:result:conditions:", 550, v161, v163);

      v283 = v164;
      objc_msgSend(v301, "addObject:", v164);
      v165 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 6, 0));
      obja = (id)v159;
      objc_msgSend(v165, "setNetworkAgentUUID:", v159);
      v288 = v165;
      v325[0] = v165;
      v166 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 1, 2));
      v325[1] = v166;
      v167 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 1, 3));
      v325[2] = v167;
      v168 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 1, 6));
      v325[3] = v168;
      v169 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 1, 4));
      v325[4] = v169;
      v170 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v325, 5));

      v171 = objc_alloc((Class)NEPolicy);
      v287 = (void *)v170;
      v172 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v170));
      v173 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v324 = v173;
      v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v324, 1));
      v175 = objc_msgSend(v171, "initWithOrder:result:conditions:", 551, v172, v174);

      v286 = v175;
      objc_msgSend(v301, "addObject:", v175);
      v13 = v293;
      v176 = v298 ^ 1;
      if (!v293)
        v176 = 1;
      if ((v176 & 1) == 0)
      {
        v177 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v323 = v177;
        v299 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v323, 1));

        v178 = obja;
        v179 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:", 7, obja));
        v180 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v293, "controlUnit"));
        v181 = objc_msgSend(v180, "unsignedIntValue");
        if (a4)
        {

          objc_msgSend(v179, "setControlUnit:", (1 << ((_BYTE)v181 - 1)) | 0x80000000);
          if ((a2 & 0x20000) != 0)
          {
            v182 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithArray:", v299);
            v183 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 17));
            objc_msgSend(v182, "addObject:", v183);

            v184 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition schemeUsingPort:](NEPolicyCondition, "schemeUsingPort:", 53));
            objc_msgSend(v182, "addObject:", v184);

            v185 = objc_alloc((Class)NEPolicy);
            v322 = v179;
            v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v322, 1));
            v187 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v186));
            v188 = objc_msgSend(v185, "initWithOrder:result:conditions:", 530, v187, v182);

            objc_msgSend(v301, "addObject:", v188);
            v189 = objc_alloc((Class)NEPolicy);
            v190 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 535));
            v191 = objc_msgSend(v189, "initWithOrder:result:conditions:", 531, v190, v182);

            v178 = obja;
            objc_msgSend(v301, "addObject:", v191);

          }
          v192 = objc_alloc((Class)NEPolicy);
          v321 = v179;
          v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v321, 1));
          v194 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v193));
          v195 = objc_msgSend(v192, "initWithOrder:result:conditions:", 532, v194, v299);

          objc_msgSend(v301, "addObject:", v195);
          v196 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:", 7, v178));
          objc_msgSend(v196, "setControlUnit:", 0xFFFFFFFLL);
          v197 = objc_alloc((Class)NEPolicy);
          v320 = v196;
          v198 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v320, 1));
          v199 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v198));
          v200 = objc_msgSend(v197, "initWithOrder:result:conditions:", 533, v199, v299);

          v18 = v301;
          objc_msgSend(v301, "addObject:", v200);

          v178 = obja;
        }
        else
        {
          objc_msgSend(v179, "setControlUnit:", v181);

          v204 = objc_alloc((Class)NEPolicy);
          v319 = v179;
          v205 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v319, 1));
          v206 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v205));
          v195 = objc_msgSend(v204, "initWithOrder:result:conditions:", 530, v206, v299);

          objc_msgSend(v301, "addObject:", v195);
        }

        v303 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:", 6, v178));
        objc_msgSend(v303, "setNetworkAgentUUID:", v178);
        v207 = objc_alloc((Class)NEPolicy);
        v318 = v303;
        v208 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v318, 1));
        v209 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v208));
        v281 = objc_msgSend(v207, "initWithOrder:result:conditions:", 534, v209, v299);

        objc_msgSend(v18, "addObject:", v281);
        v279 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allowsUnsafeSocketAccess](NEPolicyCondition, "allowsUnsafeSocketAccess"));
        objc_msgSend(v279, "setNegative:", 1);
        v210 = objc_alloc((Class)NEPolicy);
        v211 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 540));
        v212 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v317[0] = v212;
        v213 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition usesModernNetworkAPI](NEPolicyCondition, "usesModernNetworkAPI"));
        v317[1] = v213;
        v317[2] = v279;
        v214 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v317, 3));
        v215 = objc_msgSend(v210, "initWithOrder:result:conditions:", 520, v211, v214);

        objc_msgSend(v301, "addObject:", v215);
        v216 = objc_alloc((Class)NEPolicy);
        v217 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 540));
        v218 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v316[0] = v218;
        v219 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.networkserviceproxy.flowdivert")));
        v316[1] = v219;
        v220 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v316, 2));
        v221 = objc_msgSend(v216, "initWithOrder:result:conditions:", 520, v217, v220);

        objc_msgSend(v301, "addObject:", v221);
        v18 = v301;

      }
      v222 = +[NPUtilities machoUUIDFromPID:](NPUtilities, "machoUUIDFromPID:", getpid());
      v223 = objc_claimAutoreleasedReturnValue(v222);
      v226 = a2;
      v304 = (void *)v223;
      if (v223)
      {
        v227 = v223;
        v228 = nplog_obj(v223, v224, v225);
        v229 = objc_claimAutoreleasedReturnValue(v228);
        if (os_log_type_enabled(v229, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v305;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v227;
          _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_INFO, "%@ adding self removal policy using uuid: %@", buf, 0x16u);
        }

        v230 = objc_alloc((Class)NEPolicy);
        v231 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
        v232 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v315[0] = v232;
        v233 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v227));
        v315[1] = v233;
        v234 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
        v315[2] = v234;
        v235 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v315, 3));
        v236 = objc_msgSend(v230, "initWithOrder:result:conditions:", 400, v231, v235);

        if (!v236)
        {
          v272 = nplog_obj(v237, v238, v239);
          v243 = objc_claimAutoreleasedReturnValue(v272);
          v18 = v301;
          v271 = obja;
          if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v305;
            _os_log_error_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_ERROR, "%@ failed to create self removal policy", buf, 0xCu);
          }
          v268 = 0;
          v17 = v297;
          v270 = v284;
          v269 = v285;
LABEL_164:

          v15 = v291;
          v14 = v292;
          v19 = v295;
          if (!v268)
          {
LABEL_173:
            v273 = 0;
            goto LABEL_174;
          }
          goto LABEL_165;
        }
        v18 = v301;
        objc_msgSend(v301, "addObject:", v236);

        v226 = a2;
      }
      v240 = v16;
      v241 = v297;
      v242 = objc_opt_self(NSPPrivacyProxyPolicySerialization);
      if (objc_msgSend(v240, "count") || objc_msgSend(v241, "count"))
      {
        v243 = objc_alloc_init((Class)NSMutableArray);
        v337 = 0u;
        v338 = 0u;
        v339 = 0u;
        v340 = 0u;
        v244 = v240;
        v245 = objc_msgSend(v244, "countByEnumeratingWithState:objects:count:", &v337, buf, 16);
        if (v245)
        {
          v246 = v245;
          v247 = *(_QWORD *)v338;
          do
          {
            for (j = 0; j != v246; j = (char *)j + 1)
            {
              if (*(_QWORD *)v338 != v247)
                objc_enumerationMutation(v244);
              sub_10007E1F8(v242, *(void **)(*((_QWORD *)&v337 + 1) + 8 * (_QWORD)j), 0, 0, v243);
            }
            v246 = objc_msgSend(v244, "countByEnumeratingWithState:objects:count:", &v337, buf, 16);
          }
          while (v246);
        }

        v313 = 0u;
        v314 = 0u;
        v311 = 0u;
        v312 = 0u;
        v249 = v241;
        v250 = objc_msgSend(v249, "countByEnumeratingWithState:objects:count:", &v311, &v332, 16);
        if (v250)
        {
          v251 = v250;
          v252 = *(_QWORD *)v312;
          do
          {
            for (k = 0; k != v251; k = (char *)k + 1)
            {
              if (*(_QWORD *)v312 != v252)
                objc_enumerationMutation(v249);
              sub_10007E1F8(v242, 0, *(void **)(*((_QWORD *)&v311 + 1) + 8 * (_QWORD)k), 0, v243);
            }
            v251 = objc_msgSend(v249, "countByEnumeratingWithState:objects:count:", &v311, &v332, 16);
          }
          while (v251);
        }

        v18 = v301;
        v226 = a2;
      }
      else
      {
        v243 = 0;
      }

      if (v243)
        objc_msgSend(v18, "addObjectsFromArray:", v243);
      v254 = objc_opt_self(NSPPrivacyProxyPolicySerialization);
      v255 = objc_alloc_init((Class)NSMutableArray);
      sub_10007E1F8(v254, CFSTR("com.apple.WebSheet"), 0, 1, v255);
      sub_10007E1F8(v254, 0, CFSTR("/usr/libexec/captiveagent"), 1, v255);
      sub_10007E1F8(v254, 0, CFSTR("/usr/libexec/configd"), 1, v255);
      if (v255)
        objc_msgSend(v18, "addObjectsFromArray:", v255);
      if ((v226 & 0x20000) != 0)
      {
        objc_opt_self(NSPPrivacyProxyPolicySerialization);
        v307 = objc_alloc_init((Class)NSMutableArray);
        v282 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowLocalAddressEmpty](NEPolicyCondition, "flowLocalAddressEmpty"));
        objc_msgSend(v282, "setNegative:", 1);
        v280 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](NEPolicyCondition, "clientFlags:", 0x800000));
        v256 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("0.0.0.0"), CFSTR("1024")));
        v257 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("255.255.255.255"), CFSTR("65535")));
        v300 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddressStart:end:](NEPolicyCondition, "remoteAddressStart:end:", v256, v257));

        v258 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("::"), CFSTR("1024")));
        v259 = (void *)objc_claimAutoreleasedReturnValue(+[NWAddressEndpoint endpointWithHostname:port:](NWAddressEndpoint, "endpointWithHostname:port:", CFSTR("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"), CFSTR("65535")));
        v278 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition remoteAddressStart:end:](NEPolicyCondition, "remoteAddressStart:end:", v258, v259));

        v260 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
        *(_QWORD *)buf = v282;
        *(_QWORD *)&buf[8] = v300;
        *(_QWORD *)&buf[16] = v280;
        v261 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 3));
        v262 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 410, v260, 0, 0, 17, v261, 0);
        v263 = (void *)objc_claimAutoreleasedReturnValue(v262);
        objc_msgSend(v307, "addObject:", v263);

        v264 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 600));
        *(_QWORD *)&v332 = v282;
        *((_QWORD *)&v332 + 1) = v278;
        *(_QWORD *)&v333 = v280;
        v265 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v332, 3));
        v266 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 410, v264, 0, 0, 17, v265, 0);
        v267 = (void *)objc_claimAutoreleasedReturnValue(v266);
        objc_msgSend(v307, "addObject:", v267);

        v18 = v301;
        if (v307)
          objc_msgSend(v301, "addObjectsFromArray:", v307);
        sub_10007E1F8(v305, CFSTR("com.apple.softwareupdated"), 0, 1, v301);
        sub_10007E1F8(v305, CFSTR("com.apple.mobileassetd"), 0, 1, v301);
        sub_10007E1F8(v305, CFSTR("com.apple.apsd"), 0, 1, v301);

        v13 = v293;
      }

      v268 = 1;
      v17 = v297;
      v270 = v284;
      v269 = v285;
      v271 = obja;
      goto LABEL_164;
    }
LABEL_104:
    v120 = sub_10007DF90((uint64_t)NSPPrivacyProxyPolicySerialization, 0, CFSTR("com.apple.mis.LaunchWarningDetails"), 1, 0);
    v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
    if (v121)
      objc_msgSend(v18, "addObjectsFromArray:", v121);

    goto LABEL_107;
  }
  v274 = nplog_obj(v99, v100, v101);
  v275 = objc_claimAutoreleasedReturnValue(v274);
  v16 = v92;
  v17 = v296;
  if (os_log_type_enabled(v275, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v305;
    _os_log_error_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_ERROR, "%@ failed to create \"App\" policy", buf, 0xCu);
  }

  v273 = 0;
  v18 = v301;
  v19 = v294;
LABEL_174:

  return v273;
}

uint64_t sub_10008049C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a2;
  objc_opt_self(a1);
  v4 = 0;
  if (objc_msgSend(v3, "conditionsCount"))
  {
    v5 = 0;
    do
    {
      switch(objc_msgSend(v3, "conditionsAtIndex:", v5))
      {
        case 1u:
          v4 = v4 | 1;
          break;
        case 2u:
          v4 = v4 | 2;
          break;
        case 3u:
          v4 = v4 | 4;
          break;
        case 4u:
          v4 = v4 | 8;
          break;
        case 5u:
          v4 = v4 | 0x10;
          break;
        case 6u:
          v4 = v4 | 0x20;
          break;
        case 7u:
          v4 = v4 | 0x40;
          break;
        case 8u:
          v4 = v4 | 0x80;
          break;
        case 9u:
          v4 = v4 | 0x100;
          break;
        case 0xAu:
          v4 = v4 | 0x200;
          break;
        case 0xBu:
          v4 = v4 | 0x400;
          break;
        case 0xCu:
          v4 = v4 | 0x800;
          break;
        case 0xDu:
          v4 = v4 | 0x1000;
          break;
        case 0xEu:
          v4 = v4 | 0x2000;
          break;
        case 0xFu:
          v4 = v4 | 0x4000;
          break;
        case 0x10u:
          v4 = v4 | 0x8000;
          break;
        case 0x11u:
          v4 = v4 | 0x10000;
          break;
        case 0x12u:
          v4 = v4 | 0x20000;
          break;
        case 0x13u:
          v4 = v4 | 0x40000;
          break;
        case 0x14u:
          v4 = v4 | 0x80000;
          break;
        case 0x15u:
          v4 = v4 | 0x100000;
          break;
        case 0x16u:
          v4 = v4 | 0x200000;
          break;
        case 0x17u:
          v4 = v4 | 0x400000;
          break;
        case 0x18u:
          v4 = v4 | 0x800000;
          break;
        case 0x19u:
          v4 = v4 | 0x1000000;
          break;
        case 0x1Au:
          v4 = v4 | 0x2000000;
          break;
        default:
          break;
      }
      ++v5;
    }
    while (v5 < (unint64_t)objc_msgSend(v3, "conditionsCount"));
  }

  return v4;
}

id sub_1000805FC(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  unsigned int v21;
  id v22;
  void *v23;

  v15 = a2;
  v16 = a3;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  objc_opt_self(a1);
  if (v15 && objc_msgSend(v15, "conditionsCount"))
  {
    v21 = sub_10008049C((uint64_t)NSPPrivacyProxyPolicySerialization, v15);
    v22 = sub_10007E51C((uint64_t)NSPPrivacyProxyPolicySerialization, v21, v16, a4, v17, v18, v19, v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  }
  else
  {
    v23 = 0;
  }

  return v23;
}

id sub_1000806F0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v22;
  void *v23;
  _QWORD v24[2];

  v5 = a2;
  objc_opt_self(a1);
  v6 = objc_alloc_init((Class)NSMutableArray);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager multiHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "multiHopProxyAgentUUID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:", 5, v7));
  objc_msgSend(v8, "setNetworkAgentUUID:", v5);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domainFilter:](NEPolicyCondition, "domainFilter:", a3));
  v24[0] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v24[1] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v24, 2));

  v12 = objc_alloc((Class)NEPolicy);
  v23 = v8;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v13));
  v15 = objc_msgSend(v12, "initWithOrder:result:conditions:", 560, v14, v11);

  objc_msgSend(v6, "addObject:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:", 6, v7));
  objc_msgSend(v16, "setNetworkAgentUUID:", v7);
  v17 = objc_alloc((Class)NEPolicy);
  v22 = v16;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v22, 1));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v18));
  v20 = objc_msgSend(v17, "initWithOrder:result:conditions:", 561, v19, v11);

  objc_msgSend(v6, "addObject:", v20);
  return v6;
}

id sub_100080934(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v7 = 0;
  if (v5 && v6)
  {
    v8 = objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager multiHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "multiHopProxyAgentUUID"));
    v7 = objc_alloc_init((Class)NSMutableArray);
    v23 = objc_alloc_init((Class)NSMutableArray);
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:forInterfaceName:", 5, v8, v6));
    objc_msgSend(v24, "setNetworkAgentUUID:", v5);
    objc_msgSend(v23, "addObject:", v24);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v23));
    v9 = objc_alloc((Class)NEPolicy);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v26 = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v26, 1));
    v12 = objc_msgSend(v9, "initWithOrder:result:conditions:", 630, v22, v11);

    objc_msgSend(v7, "addObject:", v12);
    v13 = objc_alloc_init((Class)NSMutableArray);
    v21 = (void *)v8;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:forInterfaceName:", 6, v8, v6));
    objc_msgSend(v14, "setNetworkAgentUUID:", v8);
    objc_msgSend(v13, "addObject:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v13));
    v16 = objc_alloc((Class)NEPolicy);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v25 = v17;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
    v19 = objc_msgSend(v16, "initWithOrder:result:conditions:", 631, v15, v18);

    objc_msgSend(v7, "addObject:", v19);
  }

  return v7;
}

id sub_100080BCC(uint64_t a1, int a2, int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *j;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v64;
  id v65;
  int v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[3];
  _QWORD v84[3];
  _QWORD v85[2];
  _BYTE v86[128];
  _QWORD v87[2];
  _BYTE v88[128];

  v9 = a4;
  v10 = a5;
  objc_opt_self(a1);
  if ((a2 & 1) != 0 || (a3 & 1) != 0 || objc_msgSend(v9, "count") || objc_msgSend(v10, "length"))
  {
    v74 = objc_alloc_init((Class)NSMutableArray);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager multiHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "multiHopProxyAgentUUID"));
    v12 = objc_alloc_init((Class)NSMutableArray);
    if (a2)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 6, 3));
      objc_msgSend(v13, "setNetworkAgentUUID:", v11);
      objc_msgSend(v12, "addObject:", v13);

    }
    v73 = v10;
    v66 = a3;
    if (a3)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 6, 2));
      objc_msgSend(v14, "setNetworkAgentUUID:", v11);
      objc_msgSend(v12, "addObject:", v14);

    }
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v72 = v9;
    v15 = v9;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v79, v88, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v80;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(_QWORD *)v80 != v18)
            objc_enumerationMutation(v15);
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 6, *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)i)));
          objc_msgSend(v20, "setNetworkAgentUUID:", v11);
          objc_msgSend(v12, "addObject:", v20);

        }
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v79, v88, 16);
      }
      while (v17);
    }

    v21 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v12));
    v22 = objc_alloc((Class)NEPolicy);
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v87[0] = v23;
    v24 = +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", getuid());
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v87[1] = v25;
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v87, 2));
    v70 = (void *)v21;
    v27 = objc_msgSend(v22, "initWithOrder:result:conditions:", 610, v21, v26);

    objc_msgSend(v74, "addObject:", v27);
    v28 = objc_alloc_init((Class)NSMutableArray);

    if (a2)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 6, 3));
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyDNSAgent dnsAgentUUID](NSPPrivacyProxyDNSAgent, "dnsAgentUUID"));
      objc_msgSend(v29, "setNetworkAgentUUID:", v30);

      objc_msgSend(v28, "addObject:", v29);
    }
    if (v66)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 6, 2));
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyDNSAgent dnsAgentUUID](NSPPrivacyProxyDNSAgent, "dnsAgentUUID"));
      objc_msgSend(v31, "setNetworkAgentUUID:", v32);

      objc_msgSend(v28, "addObject:", v31);
    }
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v33 = v15;
    v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v75, v86, 16);
    if (v34)
    {
      v35 = v34;
      v36 = *(_QWORD *)v76;
      do
      {
        for (j = 0; j != v35; j = (char *)j + 1)
        {
          if (*(_QWORD *)v76 != v36)
            objc_enumerationMutation(v33);
          v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 6, *(_QWORD *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)j)));
          v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyDNSAgent dnsAgentUUID](NSPPrivacyProxyDNSAgent, "dnsAgentUUID"));
          objc_msgSend(v38, "setNetworkAgentUUID:", v39);

          objc_msgSend(v28, "addObject:", v38);
        }
        v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v75, v86, 16);
      }
      while (v35);
    }

    v40 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v28));
    v41 = objc_alloc((Class)NEPolicy);
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    v85[0] = v42;
    v43 = +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", getuid());
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    v85[1] = v44;
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v85, 2));
    v71 = (void *)v40;
    v46 = objc_msgSend(v41, "initWithOrder:result:conditions:", 610, v40, v45);

    v47 = v74;
    objc_msgSend(v74, "addObject:", v46);
    v10 = v73;
    if (objc_msgSend(v73, "length"))
    {
      v65 = objc_alloc_init((Class)NSMutableArray);
      v67 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 6, 3));
      objc_msgSend(v67, "setNetworkAgentUUID:", v11);
      objc_msgSend(v65, "addObject:", v67);
      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v65));
      v68 = objc_alloc((Class)NEPolicy);
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v84[0] = v64;
      v49 = +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", getuid());
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      v84[1] = v50;
      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v73));
      v84[2] = v51;
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v84, 3));
      v69 = objc_msgSend(v68, "initWithOrder:result:conditions:", 610, v48, v52);

      objc_msgSend(v74, "addObject:", v69);
      v53 = objc_alloc_init((Class)NSMutableArray);
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 6, 3));
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyDNSAgent dnsAgentUUID](NSPPrivacyProxyDNSAgent, "dnsAgentUUID"));
      objc_msgSend(v54, "setNetworkAgentUUID:", v55);

      objc_msgSend(v53, "addObject:", v54);
      v56 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](NEPolicyResult, "routeRules:", v53));
      v57 = objc_alloc((Class)NEPolicy);
      v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
      v83[0] = v58;
      v59 = +[NEPolicyCondition uid:](NEPolicyCondition, "uid:", getuid());
      v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
      v83[1] = v60;
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v73));
      v83[2] = v61;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v83, 3));
      v46 = objc_msgSend(v57, "initWithOrder:result:conditions:", 610, v56, v62);

      v47 = v74;
      objc_msgSend(v74, "addObject:", v46);

      v10 = v73;
    }
    v9 = v72;

  }
  else
  {
    v47 = 0;
  }

  return v47;
}

void sub_10008136C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  uint8_t buf[4];
  const char *v29;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = objc_opt_self(a1);
  if (v12)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v11));
    v27 = v9;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v9));
    objc_msgSend(v17, "setExactMatch:", 1);
    v18 = objc_alloc_init((Class)NSMutableArray);
    objc_msgSend(v18, "addObject:", v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
    objc_msgSend(v18, "addObject:", v19);

    if (v10)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v10));
      objc_msgSend(v18, "addObject:", v20);

    }
    v21 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 620, v16, v18);
    objc_msgSend(v12, "addObject:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager multiHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "multiHopProxyAgentUUID"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](NEPolicyResult, "removeNetworkAgentUUID:", v22));
    v24 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", 621, v23, v18);
    objc_msgSend(v12, "addObject:", v24);

    v9 = v27;
  }
  else
  {
    v25 = nplog_obj(v13, v14, v15);
    v26 = objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v29 = "+[NSPPrivacyProxyPolicySerialization obliviousProxyPoliciesForHostname:processUUID:agentUUID:policyArray:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%s called with null policies", buf, 0xCu);
    }

  }
}

id sub_1000815BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v22;
  id obj;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = objc_alloc_init((Class)NSMutableArray);
  if (objc_msgSend(v8, "count"))
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v22 = v8;
    obj = v8;
    v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    if (v12)
    {
      v13 = v12;
      v24 = *(_QWORD *)v30;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v30 != v24)
            objc_enumerationMutation(obj);
          v15 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v14));
          v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v28 = 0u;
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v26;
            do
            {
              v20 = 0;
              do
              {
                if (*(_QWORD *)v26 != v19)
                  objc_enumerationMutation(v16);
                sub_10008136C(v10, v7, *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v20), v9, v11);
                v20 = (char *)v20 + 1;
              }
              while (v18 != v20);
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
            }
            while (v18);
          }

          v14 = (char *)v14 + 1;
        }
        while (v14 != v13);
        v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      }
      while (v13);
    }

    v8 = v22;
  }
  else
  {
    sub_10008136C(v10, v7, 0, v9, v11);
  }

  return v11;
}

uint64_t sub_1000817DC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  void *v51;
  void *v52;
  int v53;
  char *v54;
  int v55;
  int v56;
  uint64_t v57;
  void *v58;
  id v59;
  int v60;
  NSObject *v61;
  NSObject *v62;
  id v63;
  uint8_t buf[4];
  NSObject *v65;
  __int16 v66;
  NSObject *v67;
  __int16 v68;
  NSObject *v69;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = objc_opt_self(a1);
  if (v12)
  {
    v16 = (uint64_t)-[NSObject hasPrefix:](v12, "hasPrefix:", CFSTR("com.apple."));
    if ((v16 & 1) == 0)
    {
      v32 = nplog_obj(v16, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v32);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      v21 = objc_claimAutoreleasedReturnValue(-[NSObject identifier](v15, "identifier"));
      *(_DWORD *)buf = 138412546;
      v65 = v12;
      v66 = 2112;
      v67 = v21;
      v22 = "Skipping unsupported process %@ for contentMap %@";
      goto LABEL_14;
    }
  }
  if (!v13 || !v14)
  {
    if (v13)
    {
      v25 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", v13);
      v20 = v25;
      if (!v25
        || (v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject host](v25, "host")),
            v29 = sub_100081CC8(v28),
            v28,
            (v29 & 1) == 0))
      {
        v30 = nplog_obj(v25, v26, v27);
        v21 = objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v31 = objc_claimAutoreleasedReturnValue(-[NSObject identifier](v15, "identifier"));
          *(_DWORD *)buf = 138412546;
          v65 = v13;
          v66 = 2112;
          v67 = v31;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Skipping unsupported URL %@ for map %@", buf, 0x16u);

        }
        goto LABEL_16;
      }
LABEL_22:
      v38 = objc_alloc((Class)NSString);
      v39 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject lowercaseString](v12, "lowercaseString"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject lowercaseString](v13, "lowercaseString"));
      v41 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject lowercaseString](v14, "lowercaseString"));
      v42 = objc_msgSend(v38, "initWithFormat:", CFSTR("%@^%@^%@"), v39, v40, v41);

      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v42));
      if (v43)
      {
        v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v42));

        if (v44 != v15)
        {
          v48 = nplog_obj(v45, v46, v47);
          v49 = objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            v61 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v42));
            v62 = objc_claimAutoreleasedReturnValue(-[NSObject identifier](v15, "identifier"));
            *(_DWORD *)buf = 138412802;
            v65 = v61;
            v66 = 2112;
            v67 = v15;
            v68 = 2112;
            v69 = v62;
            _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Content map %@ and %@ have conflicts, skipping %@", buf, 0x20u);

          }
          v33 = 0;
LABEL_42:

          goto LABEL_18;
        }
      }
      else
      {
        objc_msgSend(v11, "setObject:forKeyedSubscript:", v15, v42);
      }
      if (v12)
        v50 = 630;
      else
        v50 = 660;
      if (v20)
      {
        v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject path](v20, "path"));
        v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "componentsSeparatedByString:", CFSTR("/")));
        v63 = v42;
        v53 = v50;
        v54 = (char *)objc_msgSend(v52, "count") - 1;

        v55 = 5;
        if ((unint64_t)v54 < 5)
          v55 = (int)v54;
        v56 = v53 - 2 * v55;
        v42 = v63;
        v33 = (v56 + 10);
      }
      else if (v14)
      {
        v58 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject componentsSeparatedByString:](v14, "componentsSeparatedByString:", CFSTR(".")));
        v59 = objc_msgSend(v58, "count");

        v60 = 5;
        if ((unint64_t)v59 < 5)
          v60 = (int)v59;
        v33 = (v50 - 2 * v60 + 20);
      }
      else
      {
        v33 = (v50 + 20);
      }
      goto LABEL_42;
    }
    if (!v14 || (v35 = sub_100081CC8(v14), (v35 & 1) != 0))
    {
      v20 = 0;
      goto LABEL_22;
    }
    v57 = nplog_obj(v35, v36, v37);
    v20 = objc_claimAutoreleasedReturnValue(v57);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    v21 = objc_claimAutoreleasedReturnValue(-[NSObject identifier](v15, "identifier"));
    *(_DWORD *)buf = 138412546;
    v65 = v14;
    v66 = 2112;
    v67 = v21;
    v22 = "Skipping unsupported hostname %@ for map %@";
LABEL_14:
    v23 = v20;
    v24 = 22;
    goto LABEL_15;
  }
  v19 = nplog_obj(v16, v17, v18);
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v21 = objc_claimAutoreleasedReturnValue(-[NSObject identifier](v15, "identifier"));
    *(_DWORD *)buf = 138412802;
    v65 = v13;
    v66 = 2112;
    v67 = v14;
    v68 = 2112;
    v69 = v21;
    v22 = "Unspported content map with URL %@ and hostname %@ for map %@";
    v23 = v20;
    v24 = 32;
LABEL_15:
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
LABEL_16:

  }
LABEL_17:
  v33 = 0;
LABEL_18:

  return v33;
}

uint64_t sub_100081CC8(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  unsigned __int8 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v1 = a1;
  if (qword_100112ED8 != -1)
    dispatch_once(&qword_100112ED8, &stru_1000F6808);
  if (byte_100112EC8)
  {
    v2 = 1;
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v3 = (id)qword_100112ED0;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          if ((objc_msgSend(v1, "isEqualToString:", v8) & 1) == 0)
          {
            v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".%@"), v8));
            v10 = objc_msgSend(v1, "hasSuffix:", v9);

            if ((v10 & 1) == 0)
              continue;
          }
          v2 = 1;
          goto LABEL_17;
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        v2 = 0;
        if (v5)
          continue;
        break;
      }
    }
    else
    {
      v2 = 0;
    }
LABEL_17:

  }
  return v2;
}

id sub_100081E6C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *k;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *m;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *i;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  uint64_t v59;
  void *j;
  uint64_t v61;
  id v62;
  void *v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  void *n;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  void *ii;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  void *v107;
  void *v108;
  id v109;
  id v110;
  id v111;
  void *v113;
  id obj;
  uint64_t v115;
  id v116;
  id v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  id v122;
  id v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  id v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _BYTE v178[128];
  _BYTE v179[128];
  _BYTE v180[128];
  _BYTE v181[128];
  _BYTE v182[128];
  _BYTE v183[128];
  _BYTE v184[128];
  _BYTE v185[128];
  _BYTE v186[128];

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  v113 = v5;
  if (!v5)
  {
    v137 = 0;
    v7 = v6;
    goto LABEL_128;
  }
  v7 = v6;
  if (!objc_msgSend(v6, "count"))
  {
    v137 = 0;
    goto LABEL_128;
  }
  v137 = objc_alloc_init((Class)NSMutableArray);
  v141 = objc_alloc_init((Class)NSMutableDictionary);
  v136 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v5));
  v135 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 680));
  v174 = 0u;
  v175 = 0u;
  v176 = 0u;
  v177 = 0u;
  obj = v6;
  v117 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v174, v186, 16);
  if (!v117)
    goto LABEL_125;
  v115 = *(_QWORD *)v175;
  v116 = v6;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v175 != v115)
      {
        v9 = v8;
        objc_enumerationMutation(obj);
        v8 = v9;
      }
      v119 = v8;
      v10 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * v8);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "hostnames"));
      v120 = v5;
      if (objc_msgSend(v11, "count"))
        goto LABEL_11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "urls"));
      if (objc_msgSend(v12, "count"))
      {

LABEL_11:
        goto LABEL_12;
      }
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "processes"));
      v50 = objc_msgSend(v49, "count");

      if (v50)
      {
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v123 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "processes"));
        v130 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v170, v185, 16);
        if (v130)
        {
          v128 = *(_QWORD *)v171;
          do
          {
            for (i = 0; i != v130; i = (char *)i + 1)
            {
              if (*(_QWORD *)v171 != v128)
                objc_enumerationMutation(v123);
              v52 = *(void **)(*((_QWORD *)&v170 + 1) + 8 * (_QWORD)i);
              v53 = sub_1000817DC((uint64_t)NSPPrivacyProxyPolicySerialization, v141, v52, 0, 0, v10);
              if ((_DWORD)v53)
              {
                v54 = v53;
                v134 = i;
                v55 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v52);
                v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
                v166 = 0u;
                v167 = 0u;
                v168 = 0u;
                v169 = 0u;
                v139 = v56;
                v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v166, v184, 16);
                if (v57)
                {
                  v58 = v57;
                  v59 = *(_QWORD *)v167;
                  do
                  {
                    for (j = 0; j != v58; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v167 != v59)
                        objc_enumerationMutation(v139);
                      v61 = *(_QWORD *)(*((_QWORD *)&v166 + 1) + 8 * (_QWORD)j);
                      v62 = objc_alloc_init((Class)NSMutableArray);
                      v63 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                      objc_msgSend(v62, "addObject:", v63);

                      v64 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v61));
                      objc_msgSend(v62, "addObject:", v64);

                      if ((objc_msgSend(v10, "isPrivacyProxy") & 1) == 0)
                      {
                        v65 = +[NEPolicyCondition realUID:](NEPolicyCondition, "realUID:", getuid());
                        v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
                        objc_msgSend(v62, "addObject:", v66);

                      }
                      if (objc_msgSend(v10, "systemProcessOnly"))
                      {
                        v67 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
                        objc_msgSend(v62, "addObject:", v67);

                      }
                      v68 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v54, v136, v62);
                      objc_msgSend(v137, "addObject:", v68);

                      v69 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v54 + 1), v135, v62);
                      objc_msgSend(v137, "addObject:", v69);

                    }
                    v58 = objc_msgSend(v139, "countByEnumeratingWithState:objects:count:", &v166, v184, 16);
                  }
                  while (v58);
                }

                v5 = v120;
                i = v134;
              }
            }
            v130 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v170, v185, 16);
          }
          while (v130);
        }
        goto LABEL_120;
      }
LABEL_12:
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "hostnames"));
      v14 = objc_msgSend(v13, "count");
      v15 = v10;
      v16 = v118;
      v133 = v15;
      if (!v14)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "urls"));
        if (!objc_msgSend(v16, "count"))
        {

          goto LABEL_70;
        }
        v15 = v133;
      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "processes"));
      v18 = objc_msgSend(v17, "count");

      if (!v14)
      if (!v18)
      {
        v118 = v16;
        v164 = 0u;
        v165 = 0u;
        v162 = 0u;
        v163 = 0u;
        v138 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "hostnames"));
        v19 = objc_msgSend(v138, "countByEnumeratingWithState:objects:count:", &v162, v183, 16);
        if (v19)
        {
          v20 = v19;
          v21 = *(_QWORD *)v163;
          do
          {
            for (k = 0; k != v20; k = (char *)k + 1)
            {
              if (*(_QWORD *)v163 != v21)
                objc_enumerationMutation(v138);
              v23 = *(void **)(*((_QWORD *)&v162 + 1) + 8 * (_QWORD)k);
              v24 = objc_alloc_init((Class)NSMutableArray);
              v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
              objc_msgSend(v24, "addObject:", v25);

              v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v23));
              if (objc_msgSend(v133, "matchExactHostnames"))
                objc_msgSend(v26, "setExactMatch:", 1);
              objc_msgSend(v24, "addObject:", v26);
              if ((objc_msgSend(v133, "isPrivacyProxy") & 1) == 0)
              {
                v27 = +[NEPolicyCondition realUID:](NEPolicyCondition, "realUID:", getuid());
                v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
                objc_msgSend(v24, "addObject:", v28);

              }
              if (objc_msgSend(v133, "systemProcessOnly"))
              {
                v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
                objc_msgSend(v24, "addObject:", v29);

              }
              v30 = sub_1000817DC((uint64_t)NSPPrivacyProxyPolicySerialization, v141, 0, 0, v23, v133);
              if ((_DWORD)v30)
              {
                v31 = v30;
                v32 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v30, v136, v24);
                objc_msgSend(v137, "addObject:", v32);

                v33 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v31 + 1), v135, v24);
                objc_msgSend(v137, "addObject:", v33);

              }
            }
            v20 = objc_msgSend(v138, "countByEnumeratingWithState:objects:count:", &v162, v183, 16);
          }
          while (v20);
        }

        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v123 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "urls"));
        v34 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v158, v182, 16);
        if (v34)
        {
          v35 = v34;
          v36 = *(_QWORD *)v159;
          do
          {
            for (m = 0; m != v35; m = (char *)m + 1)
            {
              if (*(_QWORD *)v159 != v36)
                objc_enumerationMutation(v123);
              v38 = *(void **)(*((_QWORD *)&v158 + 1) + 8 * (_QWORD)m);
              v39 = sub_1000817DC((uint64_t)NSPPrivacyProxyPolicySerialization, v141, 0, v38, 0, v133);
              if ((_DWORD)v39)
              {
                v40 = v39;
                v41 = objc_alloc_init((Class)NSMutableArray);
                v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                objc_msgSend(v41, "addObject:", v42);

                v43 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition url:](NEPolicyCondition, "url:", v38));
                objc_msgSend(v41, "addObject:", v43);

                if ((objc_msgSend(v133, "isPrivacyProxy") & 1) == 0)
                {
                  v44 = +[NEPolicyCondition realUID:](NEPolicyCondition, "realUID:", getuid());
                  v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
                  objc_msgSend(v41, "addObject:", v45);

                }
                if (objc_msgSend(v133, "systemProcessOnly"))
                {
                  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
                  objc_msgSend(v41, "addObject:", v46);

                }
                v47 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v40, v136, v41);
                objc_msgSend(v137, "addObject:", v47);

                v48 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v40 + 1), v135, v41);
                objc_msgSend(v137, "addObject:", v48);

              }
            }
            v35 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v158, v182, 16);
          }
          while (v35);
        }
        goto LABEL_119;
      }
LABEL_70:
      v123 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "hostnames"));
      v70 = objc_msgSend(v123, "count");
      v118 = v16;
      if (!v70)
      {
        v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "urls"));
        if (!objc_msgSend(v5, "count"))
        {

          goto LABEL_120;
        }
        v120 = v5;
      }
      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "processes"));
      v72 = objc_msgSend(v71, "count");

      v73 = v133;
      if (!v70)
      {
        v5 = v120;

        if (!v72)
          goto LABEL_121;
LABEL_77:
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v123 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v133, "processes"));
        v122 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v154, v181, 16);
        if (v122)
        {
          v121 = *(_QWORD *)v155;
          do
          {
            v74 = 0;
            do
            {
              if (*(_QWORD *)v155 != v121)
                objc_enumerationMutation(v123);
              v124 = v74;
              v75 = *(void **)(*((_QWORD *)&v154 + 1) + 8 * v74);
              v76 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, v75);
              v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
              v150 = 0u;
              v151 = 0u;
              v152 = 0u;
              v153 = 0u;
              v125 = v77;
              v127 = objc_msgSend(v77, "countByEnumeratingWithState:objects:count:", &v150, v180, 16);
              if (v127)
              {
                v126 = *(_QWORD *)v151;
                do
                {
                  v78 = 0;
                  do
                  {
                    if (*(_QWORD *)v151 != v126)
                      objc_enumerationMutation(v125);
                    v129 = v78;
                    v140 = *(id *)(*((_QWORD *)&v150 + 1) + 8 * v78);
                    v146 = 0u;
                    v147 = 0u;
                    v148 = 0u;
                    v149 = 0u;
                    v131 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "hostnames"));
                    v79 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v146, v179, 16);
                    if (v79)
                    {
                      v80 = v79;
                      v81 = *(_QWORD *)v147;
                      do
                      {
                        for (n = 0; n != v80; n = (char *)n + 1)
                        {
                          if (*(_QWORD *)v147 != v81)
                            objc_enumerationMutation(v131);
                          v83 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * (_QWORD)n);
                          v84 = sub_1000817DC((uint64_t)NSPPrivacyProxyPolicySerialization, v141, v75, 0, v83, v73);
                          if ((_DWORD)v84)
                          {
                            v85 = v84;
                            v86 = objc_alloc_init((Class)NSMutableArray);
                            v87 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                            objc_msgSend(v86, "addObject:", v87);

                            v88 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v140));
                            objc_msgSend(v86, "addObject:", v88);

                            v89 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v83));
                            if (objc_msgSend(v73, "matchExactHostnames"))
                              objc_msgSend(v89, "setExactMatch:", 1);
                            objc_msgSend(v86, "addObject:", v89);
                            if ((objc_msgSend(v73, "isPrivacyProxy") & 1) == 0)
                            {
                              v90 = +[NEPolicyCondition realUID:](NEPolicyCondition, "realUID:", getuid());
                              v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
                              objc_msgSend(v86, "addObject:", v91);

                            }
                            if (objc_msgSend(v73, "systemProcessOnly"))
                            {
                              v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
                              objc_msgSend(v86, "addObject:", v92);

                            }
                            v93 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v85, v136, v86);
                            objc_msgSend(v137, "addObject:", v93);

                            v94 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v85 + 1), v135, v86);
                            objc_msgSend(v137, "addObject:", v94);

                            v73 = v133;
                          }
                        }
                        v80 = objc_msgSend(v131, "countByEnumeratingWithState:objects:count:", &v146, v179, 16);
                      }
                      while (v80);
                    }

                    v144 = 0u;
                    v145 = 0u;
                    v142 = 0u;
                    v143 = 0u;
                    v132 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "urls"));
                    v95 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v142, v178, 16);
                    if (v95)
                    {
                      v96 = v95;
                      v97 = *(_QWORD *)v143;
                      do
                      {
                        for (ii = 0; ii != v96; ii = (char *)ii + 1)
                        {
                          if (*(_QWORD *)v143 != v97)
                            objc_enumerationMutation(v132);
                          v99 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * (_QWORD)ii);
                          v100 = sub_1000817DC((uint64_t)NSPPrivacyProxyPolicySerialization, v141, v75, v99, 0, v73);
                          if ((_DWORD)v100)
                          {
                            v101 = v100;
                            v102 = objc_alloc_init((Class)NSMutableArray);
                            v103 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
                            objc_msgSend(v102, "addObject:", v103);

                            v104 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", v140));
                            objc_msgSend(v102, "addObject:", v104);

                            v105 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition url:](NEPolicyCondition, "url:", v99));
                            objc_msgSend(v102, "addObject:", v105);

                            if ((objc_msgSend(v73, "isPrivacyProxy") & 1) == 0)
                            {
                              v106 = +[NEPolicyCondition realUID:](NEPolicyCondition, "realUID:", getuid());
                              v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
                              objc_msgSend(v102, "addObject:", v107);

                            }
                            if (objc_msgSend(v73, "systemProcessOnly"))
                            {
                              v108 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
                              objc_msgSend(v102, "addObject:", v108);

                            }
                            v109 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", v101, v136, v102);
                            objc_msgSend(v137, "addObject:", v109);

                            v110 = objc_msgSend(objc_alloc((Class)NEPolicy), "initWithOrder:result:conditions:", (v101 + 1), v135, v102);
                            objc_msgSend(v137, "addObject:", v110);

                            v73 = v133;
                          }
                        }
                        v96 = objc_msgSend(v132, "countByEnumeratingWithState:objects:count:", &v142, v178, 16);
                      }
                      while (v96);
                    }

                    ++v78;
                  }
                  while ((id)(v129 + 1) != v127);
                  v127 = objc_msgSend(v125, "countByEnumeratingWithState:objects:count:", &v150, v180, 16);
                }
                while (v127);
              }

              v74 = v124 + 1;
            }
            while ((id)(v124 + 1) != v122);
            v122 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v154, v181, 16);
          }
          while (v122);
LABEL_119:
          v5 = v120;
        }
LABEL_120:

        goto LABEL_121;
      }

      v5 = v120;
      if (v72)
        goto LABEL_77;
LABEL_121:
      v7 = v116;
      v8 = v119 + 1;
    }
    while ((id)(v119 + 1) != v117);
    v111 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v174, v186, 16);
    v117 = v111;
  }
  while (v111);
LABEL_125:

LABEL_128:
  return v137;
}

NSObject *sub_100082D94(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  NSObject *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t v52[128];
  uint8_t buf[4];
  uint64_t v54;
  __int16 v55;
  const __CFString *v56;

  v3 = a2;
  v4 = objc_opt_self(a1);
  if (v3)
  {
    v5 = v4;
    if (objc_msgSend(v3, "conditionsCount"))
    {
      v6 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.SafariTechnologyPreview"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

      if (!v7)
      {
        v40 = nplog_obj(v8, v9, v10);
        v12 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v54 = v5;
          v55 = 2112;
          v56 = CFSTR("com.apple.SafariTechnologyPreview");
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@ unable to install policies for '%@' as it is not installed", buf, 0x16u);
        }
        goto LABEL_39;
      }
      v11 = sub_10008049C((uint64_t)NSPPrivacyProxyPolicySerialization, v3);
      v12 = objc_alloc_init((Class)NSMutableArray);
      if ((v11 & 2) != 0)
      {
        v13 = sub_10007C9A0((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.SafariTechnologyPreview"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v49;
          do
          {
            for (i = 0; i != v16; i = (char *)i + 1)
            {
              if (*(_QWORD *)v49 != v17)
                objc_enumerationMutation(v14);
              sub_10007D3EC((uint64_t)NSPPrivacyProxyPolicySerialization, v12, *(void **)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)i), 0);
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v48, v52, 16);
          }
          while (v16);
        }

      }
      if ((v11 & 4) != 0)
      {
        v19 = sub_10007DA10((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.SafariTechnologyPreview"), 1, 0);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (!v20)
        {
          v41 = nplog_obj(0, v21, v22);
          v42 = objc_claimAutoreleasedReturnValue(v41);
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            goto LABEL_38;
          *(_DWORD *)buf = 138412290;
          v54 = v5;
          v43 = "%@ failed to create \"SafariTechnologyPreview KNOWN TRACKER\" policies";
          goto LABEL_37;
        }
        v23 = (void *)v20;
        -[NSObject addObjectsFromArray:](v12, "addObjectsFromArray:", v20);

      }
      if ((v11 & 1) == 0)
        goto LABEL_19;
      v24 = sub_10007D198((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.SafariTechnologyPreview"), 0, 0);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (v25)
      {
        v28 = (void *)v25;
        -[NSObject addObjectsFromArray:](v12, "addObjectsFromArray:", v25);

LABEL_19:
        if ((v11 & 0x10) == 0)
        {
LABEL_22:
          if ((v11 & 0x20) == 0)
          {
LABEL_25:
            v12 = v12;
            v39 = v12;
LABEL_40:

            goto LABEL_41;
          }
          v34 = sub_10007CEF4((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.SafariTechnologyPreview"), 1, 0);
          v35 = objc_claimAutoreleasedReturnValue(v34);
          if (v35)
          {
            v38 = (void *)v35;
            -[NSObject addObjectsFromArray:](v12, "addObjectsFromArray:", v35);

            goto LABEL_25;
          }
          v46 = nplog_obj(0, v36, v37);
          v42 = objc_claimAutoreleasedReturnValue(v46);
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            goto LABEL_38;
          *(_DWORD *)buf = 138412290;
          v54 = v5;
          v43 = "%@ failed to create \"SafariTechnologyPreview HTTP\" policies";
          goto LABEL_37;
        }
        v29 = sub_10007CB8C((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.SafariTechnologyPreview"), 0, CFSTR("com.apple.safari.peertopeer"), 0, 0);
        v30 = objc_claimAutoreleasedReturnValue(v29);
        if (v30)
        {
          v33 = (void *)v30;
          -[NSObject addObjectsFromArray:](v12, "addObjectsFromArray:", v30);

          goto LABEL_22;
        }
        v45 = nplog_obj(0, v31, v32);
        v42 = objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v54 = v5;
          v43 = "%@ failed to create \"SafariTechnologyPreview All\" policies";
          goto LABEL_37;
        }
LABEL_38:

LABEL_39:
        v39 = 0;
        goto LABEL_40;
      }
      v44 = nplog_obj(0, v26, v27);
      v42 = objc_claimAutoreleasedReturnValue(v44);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        goto LABEL_38;
      *(_DWORD *)buf = 138412290;
      v54 = v5;
      v43 = "%@ failed to create \"SafariTechnologyPreview UNENCRYPTED\" policies";
LABEL_37:
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, v43, buf, 0xCu);
      goto LABEL_38;
    }
  }
  v39 = 0;
LABEL_41:

  return v39;
}

id sub_100083190(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  uint64_t v57;
  _BYTE v58[128];

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_self(a1);
  if (v5)
  {
    v8 = v7;
    if (objc_msgSend(v5, "conditionsCount"))
    {
      if (objc_msgSend(v6, "count"))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));
        v10 = sub_10008049C((uint64_t)NSPPrivacyProxyPolicySerialization, v5);
        v11 = objc_alloc_init((Class)NSMutableArray);
        if ((v10 & 2) != 0)
        {
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v51 = v9;
          v12 = v9;
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v52, v58, 16);
          if (v13)
          {
            v14 = v13;
            v15 = *(_QWORD *)v53;
            do
            {
              for (i = 0; i != v14; i = (char *)i + 1)
              {
                if (*(_QWORD *)v53 != v15)
                  objc_enumerationMutation(v12);
                sub_10007D3EC((uint64_t)NSPPrivacyProxyPolicySerialization, v11, *(void **)(*((_QWORD *)&v52 + 1) + 8 * (_QWORD)i), 0);
              }
              v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v52, v58, 16);
            }
            while (v14);
          }

          v9 = v51;
        }
        if ((v10 & 4) != 0)
        {
          v17 = sub_10007DA10((uint64_t)NSPPrivacyProxyPolicySerialization, 0, 1, v9);
          v18 = objc_claimAutoreleasedReturnValue(v17);
          if (!v18)
          {
            v43 = nplog_obj(0, v19, v20);
            v44 = objc_claimAutoreleasedReturnValue(v43);
            if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              goto LABEL_41;
            *(_DWORD *)buf = 138412290;
            v57 = v8;
            v45 = "%@ failed to create \"Safari App Bundles KNOWN TRACKER\" policies";
            goto LABEL_40;
          }
          v21 = (void *)v18;
          objc_msgSend(v11, "addObjectsFromArray:", v18);

        }
        if ((v10 & 1) != 0)
        {
          v22 = sub_10007D198((uint64_t)NSPPrivacyProxyPolicySerialization, 0, v9, 0);
          v23 = objc_claimAutoreleasedReturnValue(v22);
          if (!v23)
          {
            v46 = nplog_obj(0, v24, v25);
            v44 = objc_claimAutoreleasedReturnValue(v46);
            if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              goto LABEL_41;
            *(_DWORD *)buf = 138412290;
            v57 = v8;
            v45 = "%@ failed to create \"Safari App Bundles UNENCRYPTED\" policies";
            goto LABEL_40;
          }
          v26 = (void *)v23;
          objc_msgSend(v11, "addObjectsFromArray:", v23);

        }
        if ((v10 & 0x40000) != 0)
        {
          v27 = sub_10007D198((uint64_t)NSPPrivacyProxyPolicySerialization, 0, v9, 1);
          v28 = objc_claimAutoreleasedReturnValue(v27);
          if (!v28)
          {
            v47 = nplog_obj(0, v29, v30);
            v44 = objc_claimAutoreleasedReturnValue(v47);
            if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              goto LABEL_41;
            *(_DWORD *)buf = 138412290;
            v57 = v8;
            v45 = "%@ failed to create \"Safari App Bundles UNENCRYPTED\" policies";
            goto LABEL_40;
          }
          v31 = (void *)v28;
          objc_msgSend(v11, "addObjectsFromArray:", v28);

        }
        if ((v10 & 0x10) == 0)
          goto LABEL_25;
        v32 = sub_10007CB8C((uint64_t)NSPPrivacyProxyPolicySerialization, 0, v9, CFSTR("com.apple.safari.peertopeer"), 0, 0);
        v33 = objc_claimAutoreleasedReturnValue(v32);
        if (v33)
        {
          v36 = (void *)v33;
          objc_msgSend(v11, "addObjectsFromArray:", v33);

LABEL_25:
          if ((v10 & 0x20) == 0)
          {
LABEL_28:
            v42 = v11;
LABEL_42:

            goto LABEL_43;
          }
          v37 = sub_10007CEF4((uint64_t)NSPPrivacyProxyPolicySerialization, 0, 1, v9);
          v38 = objc_claimAutoreleasedReturnValue(v37);
          if (v38)
          {
            v41 = (void *)v38;
            objc_msgSend(v11, "addObjectsFromArray:", v38);

            goto LABEL_28;
          }
          v49 = nplog_obj(0, v39, v40);
          v44 = objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v57 = v8;
            v45 = "%@ failed to create \"Safari App Bundles HTTP\" policies";
            goto LABEL_40;
          }
LABEL_41:

          v42 = 0;
          goto LABEL_42;
        }
        v48 = nplog_obj(0, v34, v35);
        v44 = objc_claimAutoreleasedReturnValue(v48);
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          goto LABEL_41;
        *(_DWORD *)buf = 138412290;
        v57 = v8;
        v45 = "%@ failed to create \"Safari App Bundles All\" policies";
LABEL_40:
        _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, v45, buf, 0xCu);
        goto LABEL_41;
      }
    }
  }
  v42 = 0;
LABEL_43:

  return v42;
}

id sub_10008358C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;

  v5 = a2;
  v6 = a3;
  objc_opt_self(a1);
  if (v5 && objc_msgSend(v5, "conditionsCount"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));
    if ((sub_10008049C((uint64_t)NSPPrivacyProxyPolicySerialization, v5) & 0x108) == 8)
    {
      v8 = sub_10007DA10((uint64_t)NSPPrivacyProxyPolicySerialization, CFSTR("com.apple.mobilemail"), 0, v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_10008364C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  int v27;
  uint64_t v28;
  __int16 v29;
  void *v30;

  v1 = objc_opt_self(a1);
  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v4 = +[NPUtilities machoUUIDFromPID:](NPUtilities, "machoUUIDFromPID:", getpid());
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v8 = (void *)v5;
  if (!v5)
    goto LABEL_6;
  v9 = nplog_obj(v5, v6, v7);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v27 = 138412546;
    v28 = v1;
    v29 = 2112;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@ adding probe policy using uuid: %@", (uint8_t *)&v27, 0x16u);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("http://netcts.cdn-apple.com")));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "host"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](NEPolicyCondition, "domain:", v12));
  objc_msgSend(v3, "addObject:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.nsp.proxyAgentProbe")));
  objc_msgSend(v3, "addObject:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](NEPolicyCondition, "platformBinary"));
  objc_msgSend(v3, "addObject:", v15);

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyAgentManager multiHopProxyAgentUUID](NSPPrivacyProxyAgentManager, "multiHopProxyAgentUUID"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](NEPolicyResult, "netAgentUUID:", v16));
  v18 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 350, v17, v8, 80, 6, v3, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

  if (v19)
  {
    objc_msgSend(v2, "addObject:", v19);

LABEL_6:
    v23 = v2;
    goto LABEL_10;
  }
  v24 = nplog_obj(v20, v21, v22);
  v25 = objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    v27 = 138412290;
    v28 = v1;
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%@ failed to create probe policy", (uint8_t *)&v27, 0xCu);
  }

  v23 = 0;
LABEL_10:

  return v23;
}

id sub_1000838F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD v20[3];

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_alloc_init((Class)NSMutableArray);
  v5 = objc_alloc_init((Class)NSMutableArray);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  objc_msgSend(v5, "addObject:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](NEPolicyCondition, "ipProtocol:", 6));
  objc_msgSend(v5, "addObject:", v7);

  v8 = objc_alloc((Class)NEPolicy);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "controlUnit"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult divertSocketToControlUnit:](NEPolicyResult, "divertSocketToControlUnit:", objc_msgSend(v9, "unsignedIntValue")));
  v11 = objc_msgSend(v8, "initWithOrder:result:conditions:", 720, v10, v5);

  objc_msgSend(v4, "addObject:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allowsUnsafeSocketAccess](NEPolicyCondition, "allowsUnsafeSocketAccess"));
  objc_msgSend(v12, "setNegative:", 1);
  v13 = objc_alloc((Class)NEPolicy);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 730));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition usesModernNetworkAPI](NEPolicyCondition, "usesModernNetworkAPI", v15));
  v20[1] = v16;
  v20[2] = v12;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 3));
  v18 = objc_msgSend(v13, "initWithOrder:result:conditions:", 710, v14, v17);

  objc_msgSend(v4, "addObject:", v18);
  return v4;
}

id sub_100083B0C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id obj;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  _BYTE v23[128];

  v3 = a2;
  objc_opt_self(a1);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](NEPolicyResult, "skipWithOrder:", 500));
  if (objc_msgSend(v3, "count"))
    v4 = objc_alloc_init((Class)NSMutableArray);
  else
    v4 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = v3;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v19;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](NEPolicyCondition, "allInterfaces"));
        v22[0] = v10;
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](NEPolicyCondition, "accountIdentifier:", CFSTR("com.apple.networkQuality.private-relay")));
        v22[1] = v11;
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v22, 2));
        v13 = sub_10007C9EC((uint64_t)NSPPrivacyProxyPolicySerialization, 450, v17, v9, 0, 0, v12, 1);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

        objc_msgSend(v4, "addObject:", v14);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    }
    while (v6);
  }

  return v4;
}

uint64_t sub_100083D00(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_opt_self(a1);
  LODWORD(a1) = sub_10008049C((uint64_t)NSPPrivacyProxyPolicySerialization, v3);

  return (a1 >> 13) & 1;
}

void sub_100083D48(id a1)
{
  uint64_t v1;
  void *v2;
  CFPropertyListRef v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t buf[4];
  int v12;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("apple.com"), CFSTR("apple.news"), CFSTR("cdn-apple.com"), CFSTR("icloud.com"), CFSTR("mzstatic.com"), CFSTR(".apple"), CFSTR("icloud.com.cn"), 0));
  v2 = (void *)qword_100112ED0;
  qword_100112ED0 = v1;

  if (os_variant_allows_internal_security_policies("com.apple.networkserviceproxy"))
  {
    v3 = CFPreferencesCopyAppValue(CFSTR("NSPAllowAllDomains"), kCFPreferencesCurrentApplication);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (v4)
    {
      v5 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
      {
        v6 = objc_msgSend(v4, "BOOLValue");
        byte_100112EC8 = (char)v6;
        v9 = nplog_obj(v6, v7, v8);
        v10 = objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          v12 = byte_100112EC8;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Detected allow all domains in preferences file: %{public}d", buf, 8u);
        }

      }
    }

  }
}

void sub_100083EBC(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  _QWORD v27[5];
  _QWORD v28[5];
  uint8_t buf[8];
  uint8_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;

  if (!a1)
    return;
  v26 = *(id *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "enabled"));
  if ((objc_msgSend(v2, "BOOLValue") & 1) == 0)
  {
LABEL_8:

    return;
  }
  v3 = *(id *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "configServerEnabled"));
  if (!objc_msgSend(v4, "BOOLValue"))
  {

    goto LABEL_8;
  }
  v5 = *(id *)(a1 + 32);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resurrectionDate"));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resurrectionDate"));
    objc_msgSend(v8, "timeIntervalSinceNow");
    v10 = v9;

    if (v10 >= 0.0)
      return;
  }
  else
  {

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "etag"));

  if (v11)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationFetchDate"));
    objc_msgSend(v15, "timeIntervalSinceDate:", v16);
    v18 = v17;

    if (v18 < 86400.0)
      return;
    v22 = nplog_obj(v19, v20, v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Refreshing stale configuration", buf, 2u);
    }

    *(_QWORD *)buf = 0;
    v30 = buf;
    v31 = 0x3032000000;
    v32 = sub_10000314C;
    v33 = sub_1000841FC;
    v34 = (id)os_transaction_create("com.apple.networkserviceproxy.configManagerRefreshStaleConfiguration");
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1000845D4;
    v27[3] = &unk_1000F6170;
    v27[4] = buf;
    sub_100084218(a1, (void *)1, v27);
  }
  else
  {
    v24 = nplog_obj(v12, v13, v14);
    v25 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Fetching new configuration", buf, 2u);
    }

    *(_QWORD *)buf = 0;
    v30 = buf;
    v31 = 0x3032000000;
    v32 = sub_10000314C;
    v33 = sub_1000841FC;
    v34 = (id)os_transaction_create("com.apple.networkserviceproxy.configManagerFirstFetch");
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100084204;
    v28[3] = &unk_1000F6170;
    v28[4] = buf;
    sub_100084218(a1, (void *)1, v28);
  }
  _Block_object_dispose(buf, 8);

}

void sub_1000841E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000841FC(uint64_t a1)
{

}

void sub_100084204(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100084218(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  _QWORD v36[5];
  id v37;
  void (**v38)(_QWORD, _QWORD, _QWORD);
  id v39[2];
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  uint64_t v43;

  v5 = a3;
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))v5;
  if (a1)
  {
    v9 = *(void **)(a1 + 32);
    if (v9)
    {
      v10 = v9;
      v13 = v10;
      if (*(_BYTE *)(a1 + 8))
      {
        v14 = nplog_obj(v10, v11, v12);
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "privacy proxy configuration refresh is already pending", buf, 2u);
        }

        if (!v8)
          goto LABEL_21;
      }
      else
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "configServerEnabled"));
        v17 = objc_msgSend(v16, "BOOLValue");

        if ((v17 & 1) != 0)
        {
          v21 = objc_msgSend(*(id *)(a1 + 64), "status");
          if (v21 == (id)1)
          {
            *(_BYTE *)(a1 + 8) = 1;
            v24 = nplog_obj(1, v22, v23);
            v25 = objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              v26 = sub_10008D8F0(a1);
              v27 = (char *)objc_claimAutoreleasedReturnValue(v26);
              v28 = *(_QWORD *)(a1 + 80) + 1;
              *(_DWORD *)buf = 138412546;
              v41 = v27;
              v42 = 2048;
              v43 = v28;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Fetching privacy proxy configuration on %@ (Attempt: %lu)", buf, 0x16u);

            }
            objc_initWeak((id *)buf, (id)a1);
            v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyLocationMonitor sharedMonitor](NSPPrivacyProxyLocationMonitor, "sharedMonitor"));
            v36[0] = _NSConcreteStackBlock;
            v36[1] = 3221225472;
            v36[2] = sub_10008E3EC;
            v36[3] = &unk_1000F69C0;
            objc_copyWeak(v39, (id *)buf);
            v36[4] = a1;
            v37 = v13;
            v39[1] = a2;
            v38 = v8;
            objc_msgSend(v29, "refreshCountryPlusTimezone:", v36);

            objc_destroyWeak(v39);
            objc_destroyWeak((id *)buf);
            goto LABEL_21;
          }
          v32 = nplog_obj(v21, v22, v23);
          v33 = objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "deferring configuration fetch, path is not satisfied", buf, 2u);
          }

          *(_BYTE *)(a1 + 9) = 1;
          sub_1000853C8(a1);
          if (!v8)
            goto LABEL_21;
        }
        else
        {
          v30 = nplog_obj(v18, v19, v20);
          v31 = objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "privacy proxy config fetch is disabled", buf, 2u);
          }

          if (!v8)
            goto LABEL_21;
        }
      }
      v8[2](v8, 0, 0);
LABEL_21:

      goto LABEL_22;
    }
    v34 = nplog_obj(v5, v6, v7);
    v35 = objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v41 = "-[NSPConfigurationManager refreshConfigurationFetchWithReason:completionHandler:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "%s called with null self.configuration", buf, 0xCu);
    }

    v8[2](v8, 0, 0);
  }
LABEL_22:

}

void sub_1000845A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000845D4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_1000845E8(id *a1)
{
  void *v2;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD v28[6];
  _QWORD v29[5];
  id v30;
  __int128 buf;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "resurrectionDate"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "resurrectionDate"));
    objc_msgSend(v3, "timeIntervalSinceNow");
    v5 = v4;

    if (v5 <= 0.0)
    {
      v24 = nplog_obj(v6, v7, v8);
      v25 = objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "resurrection timer value in past", (uint8_t *)&buf, 2u);
      }

      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v32 = 0x3032000000;
      v33 = sub_10000314C;
      v34 = sub_1000841FC;
      v35 = (id)os_transaction_create("com.apple.networkserviceproxy.configManagerResurrectionTimer");
      v26 = NPGetInternalQueue(v35);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100084C20;
      v28[3] = &unk_1000F5428;
      v28[4] = a1;
      v28[5] = &buf;
      dispatch_async(v27, v28);

      _Block_object_dispose(&buf, 8);
    }
    else
    {
      v9 = a1[4];
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "resurrectionDate"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v10, 1, 2));

      v15 = nplog_obj(v12, v13, v14);
      v16 = objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v11;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Resurrection date is %@, starting timer", (uint8_t *)&buf, 0xCu);
      }

      objc_initWeak((id *)&buf, a1);
      v17 = objc_alloc((Class)NSTimer);
      v18 = a1[4];
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "resurrectionDate"));
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10008494C;
      v29[3] = &unk_1000F6858;
      objc_copyWeak(&v30, (id *)&buf);
      v29[4] = a1;
      v20 = objc_msgSend(v17, "initWithFireDate:interval:repeats:block:", v19, 0, v29, 0.0);
      v21 = a1[5];
      a1[5] = v20;

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
      v23 = a1[5];
      objc_msgSend(v22, "addTimer:forMode:", v23, NSDefaultRunLoopMode);

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)&buf);

    }
  }
}

void sub_1000848FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  _Block_object_dispose(&location, 8);
  _Unwind_Resume(a1);
}

void sub_10008494C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  _QWORD v12[5];
  id v13;

  v3 = a2;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x3032000000;
  v12[3] = sub_10000314C;
  v12[4] = sub_1000841FC;
  v13 = (id)os_transaction_create("com.apple.networkserviceproxy.configManagerResurrectionTimer");
  v4 = NPGetInternalQueue(v13);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100084A74;
  v7[3] = &unk_1000F6830;
  v8 = v3;
  v6 = v3;
  objc_copyWeak(&v11, (id *)(a1 + 40));
  v9 = *(_QWORD *)(a1 + 32);
  v10 = v12;
  dispatch_async(v5, v7);

  objc_destroyWeak(&v11);
  _Block_object_dispose(v12, 8);

}

void sub_100084A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100084A74(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id *WeakRetained;
  id *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[5];
  uint8_t buf[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v5 = nplog_obj(v2, v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resurrection timer fired", buf, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained[5];
    WeakRetained[5] = 0;

    objc_msgSend(v8[4], "setResurrectionDate:", 0);
    sub_100084B74(*(_QWORD *)(a1 + 40), v10, v11);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100084C0C;
    v14[3] = &unk_1000F6170;
    v14[4] = *(_QWORD *)(a1 + 48);
    sub_100084218((uint64_t)v8, (void *)1, v14);
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;

  }
}

void sub_100084B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint8_t v8[16];

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "reset config fetch timer", v8, 2u);
    }

    sub_100084EA4(a1, 0x15180uLL, v6);
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 8) = 0;
    v7 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;

    sub_1000853C8(a1);
  }
}

void sub_100084C0C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100084C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v5[5];

  sub_100084B74(*(_QWORD *)(a1 + 32), a2, a3);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100084C8C;
  v5[3] = &unk_1000F6170;
  v4 = *(_QWORD *)(a1 + 32);
  v5[4] = *(_QWORD *)(a1 + 40);
  sub_100084218(v4, (void *)1, v5);
}

void sub_100084C8C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100084CA0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = NPGetInternalQueue(v3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100084D54;
  v7[3] = &unk_1000F5478;
  v8 = v3;
  v6 = v3;
  objc_copyWeak(&v9, (id *)(a1 + 32));
  dispatch_async(v5, v7);

  objc_destroyWeak(&v9);
}

void sub_100084D54(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id *WeakRetained;
  id *v8;
  id v9;
  id v10;
  __int16 v11[8];

  v2 = objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v5 = nplog_obj(v2, v3, v4);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Enable check timer fired", (uint8_t *)v11, 2u);
  }

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = WeakRetained[6];
    WeakRetained[6] = 0;

    v10 = objc_loadWeakRetained(v8 + 3);
    objc_msgSend(v10, "enableCheckTimeout:", v8);

  }
}

void sub_100084DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint8_t v11[16];

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "resetting configuration timers", v11, 2u);
  }

  v7 = *(void **)(a1 + 40);
  if (v7)
  {
    objc_msgSend(v7, "invalidate");
    v8 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;

  }
  sub_100084EA4(a1, 0x15180uLL, v6);
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    objc_msgSend(v9, "invalidate");
    v10 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;

  }
}

void sub_100084EA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  NSObject *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  id inited;
  uint64_t v14;
  NSObject *v15;
  dispatch_source_t v16;
  void *v17;
  NSObject *v18;
  dispatch_time_t v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  _QWORD handler[4];
  id v25;
  uint8_t buf[4];
  unint64_t v27;

  if (a1)
  {
    v3 = a2;
    v5 = *(NSObject **)(a1 + 72);
    if (v5)
    {
      dispatch_source_cancel(v5);
      v6 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;

    }
    if (!v3)
    {
      v7 = *(_QWORD *)(a1 + 80);
      if (v7 < 8)
      {
        v10 = dword_1000C0428[v7];
        v5 = arc4random_uniform(6u);
        v3 = ((_DWORD)v5 + v10);
      }
      else
      {
        v8 = nplog_obj(v5, a2, a3);
        v9 = objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v27) = 8;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to fetch configuration after %u attempts", buf, 8u);
        }

        v5 = arc4random_uniform(6u);
        v3 = ((_DWORD)v5 + 10800);
      }
    }
    ++*(_QWORD *)(a1 + 80);
    v11 = nplog_obj(v5, a2, a3);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v27 = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Retry: fetching configuration after %lu seconds", buf, 0xCu);
    }

    inited = objc_initWeak((id *)buf, (id)a1);
    v14 = NPGetInternalQueue(inited);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v15);
    v17 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v16;

    if (*(_QWORD *)(a1 + 72))
    {
      v18 = *(id *)(a1 + 72);
      v19 = dispatch_time(0x8000000000000000, 1000000000 * v3);
      dispatch_source_set_timer(v18, v19, 0xFFFFFFFFFFFFFFFFLL, 0);

      v20 = *(void **)(a1 + 72);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1000901DC;
      handler[3] = &unk_1000F57C0;
      v21 = v20;
      objc_copyWeak(&v25, (id *)buf);
      dispatch_source_set_event_handler(v21, handler);

      dispatch_resume(*(dispatch_object_t *)(a1 + 72));
      objc_destroyWeak(&v25);
    }
    v22 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", (double)v3));
    v23 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v22;

    sub_1000853C8(a1);
    objc_destroyWeak((id *)buf);
  }
}

void sub_100085138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100085154(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id location;
  __int128 buf;
  void (*v28)(uint64_t, void *);
  void *v29;
  id v30;

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "setting up configuration timers", (uint8_t *)&buf, 2u);
    }

    sub_100084DFC((uint64_t)a1, v6, v7);
    sub_1000845E8(a1);
    v8 = a1[4];
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "earliestEnableCheckDate"));

    if (v9)
    {
      v13 = nplog_obj(v10, v11, v12);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);

      if (v15)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", v9, 1, 2));
        v19 = nplog_obj(v16, v17, v18);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v16;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Scheduling enable check date timer to fire on %@", (uint8_t *)&buf, 0xCu);
        }

      }
      objc_initWeak(&location, a1);
      v21 = objc_alloc((Class)NSTimer);
      *(_QWORD *)&buf = _NSConcreteStackBlock;
      *((_QWORD *)&buf + 1) = 3221225472;
      v28 = sub_100084CA0;
      v29 = &unk_1000F54A0;
      objc_copyWeak(&v30, &location);
      v22 = objc_msgSend(v21, "initWithFireDate:interval:repeats:block:", v9, 0, &buf, 0.0);
      v23 = a1[6];
      a1[6] = v22;

      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
      v25 = a1[6];
      objc_msgSend(v24, "addTimer:forMode:", v25, NSDefaultRunLoopMode);

      objc_destroyWeak(&v30);
      objc_destroyWeak(&location);
    }

  }
}

void sub_10008538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  id *v10;

  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000853C8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x3032000000;
  v5[3] = sub_10000314C;
  v5[4] = sub_1000841FC;
  v6 = (id)os_transaction_create("com.apple.networkserviceproxy.setUserEventAgentConfigurationParameters");
  v2 = NPGetInternalQueue(v6);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100090324;
  v4[3] = &unk_1000F5428;
  v4[4] = a1;
  v4[5] = v5;
  dispatch_async(v3, v4);

  _Block_object_dispose(v5, 8);
}

void sub_100085488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000854A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id v7;
  void *v8;
  uint8_t v9[16];

  if (a1)
  {
    v4 = nplog_obj(a1, a2, a3);
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "resetting configuration", v9, 2u);
    }

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPConfiguration defaultConfiguration](NSPConfiguration, "defaultConfiguration"));
    v7 = objc_msgSend(v6, "copy");
    v8 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v7;

  }
}

void sub_10008586C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD block[6];
  _QWORD v47[5];
  id v48;

  if (a1)
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configServerHost"));
    v2 = objc_msgSend(*(id *)(a1 + 32), "ignoreInvalidCerts");
    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "geohashSharingEnabledStatus"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "geohashOverride"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "preferredPathRoutingEnabledStatus"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateAccessTokensEnabledStatus"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateAccessTokensAllowTools"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "inProcessFlowDivert"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "proxyTrafficState"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userTier"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "proxyAccountType"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "proxyAccountUnlimited"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userPreferredTier"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriberEnabledFromNonSettingsApp"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastPrivateCloudComputeEnvironment"));
    v47[0] = 0;
    v47[1] = v47;
    v47[2] = 0x3032000000;
    v47[3] = sub_10000314C;
    v47[4] = sub_1000841FC;
    v48 = (id)os_transaction_create("com.apple.networkserviceproxy.configRestart");
    sub_100084DFC(a1, v10, v11);
    sub_100084B74(a1, v12, v13);
    sub_1000854A0(a1, v14, v15);
    sub_100085EDC(a1);
    +[NSPConfigurationSignatureInfo removeFromPreferences](NSPConfigurationSignatureInfo, "removeFromPreferences");
    v16 = *(id *)(a1 + 32);
    objc_msgSend(v16, "setConfigServerEnabled:", &__kCFBooleanTrue);

    v17 = *(id *)(a1 + 32);
    objc_msgSend(v17, "setConfigServerHost:", v45);

    v18 = *(id *)(a1 + 32);
    objc_msgSend(v18, "setIgnoreInvalidCerts:", v2);

    v19 = *(id *)(a1 + 32);
    objc_msgSend(v19, "setGeohashSharingEnabledStatus:", v44);

    v20 = *(id *)(a1 + 32);
    objc_msgSend(v20, "setGeohashOverride:", v43);

    v21 = *(id *)(a1 + 32);
    objc_msgSend(v21, "setPreferredPathRoutingEnabledStatus:", v42);

    v22 = *(id *)(a1 + 32);
    objc_msgSend(v22, "setPrivateAccessTokensEnabledStatus:", v41);

    v23 = *(id *)(a1 + 32);
    objc_msgSend(v23, "setPrivateAccessTokensAllowTools:", v40);

    v24 = *(id *)(a1 + 32);
    objc_msgSend(v24, "setInProcessFlowDivert:", v39);

    v25 = *(id *)(a1 + 32);
    objc_msgSend(v25, "setProxyTrafficState:", v3);

    v26 = *(id *)(a1 + 32);
    objc_msgSend(v26, "setUserTier:", v4);

    v27 = *(id *)(a1 + 32);
    objc_msgSend(v27, "setProxyAccountType:", v5);

    v28 = *(id *)(a1 + 32);
    objc_msgSend(v28, "setProxyAccountUnlimited:", v6);

    v29 = *(id *)(a1 + 32);
    objc_msgSend(v29, "setUserPreferredTier:", v7);

    v30 = *(id *)(a1 + 32);
    objc_msgSend(v30, "setSubscriberEnabledFromNonSettingsApp:", v8);

    v31 = *(id *)(a1 + 32);
    objc_msgSend(v31, "setLastPrivateCloudComputeEnvironment:", v9);

    v32 = *(id *)(a1 + 32);
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "configServerHost"));
    *(_BYTE *)(a1 + 10) = objc_msgSend(v33, "isEqualToString:", CFSTR("mask-api.icloud.com")) ^ 1;

    sub_100085CA0(a1);
    sub_100083EBC(a1);
    sub_100085154((id *)a1, v34, v35);
    v37 = NPGetInternalQueue(v36);
    v38 = objc_claimAutoreleasedReturnValue(v37);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100085F74;
    block[3] = &unk_1000F5428;
    block[4] = a1;
    block[5] = v47;
    dispatch_async(v38, block);

    _Block_object_dispose(v47, 8);
  }
}

void sub_100085C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100085CA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v15 = objc_alloc_init((Class)NSURLSessionDelegate);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLSessionConfiguration ephemeralSessionConfiguration](NSURLSessionConfiguration, "ephemeralSessionConfiguration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_socketStreamProperties"));
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_socketStreamProperties"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v4));

  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  }

  objc_msgSend(v5, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, _kCFStreamPropertyPrefersNoProxy);
  objc_msgSend(v2, "set_socketStreamProperties:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlRequestTimeout"));
  objc_msgSend(v6, "doubleValue");
  v8 = v7;

  if (v8 <= 0.0)
  {
    objc_msgSend(v2, "setTimeoutIntervalForResource:", 30.0);
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlRequestTimeout"));
    objc_msgSend(v9, "doubleValue");
    objc_msgSend(v2, "setTimeoutIntervalForResource:");

  }
  objc_msgSend(v2, "set_loggingPrivacyLevel:", 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configServerHost"));
  objc_msgSend(v15, "setValidationHostname:", v10);

  objc_msgSend(v15, "setIgnoreInvalidCerts:", objc_msgSend(*(id *)(a1 + 32), "ignoreInvalidCerts"));
  v11 = *(void **)(a1 + 88);
  if (v11)
    objc_msgSend(v11, "invalidateAndCancel");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue mainQueue](NSOperationQueue, "mainQueue"));
  v13 = objc_claimAutoreleasedReturnValue(+[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v2, v15, v12));
  v14 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;

  objc_msgSend(*(id *)(a1 + 88), "setSessionDescription:", CFSTR("PrivacyProxyConfigurationFetch"));
}

void sub_100085E80(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "configEnabled:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100085EDC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    objc_msgSend(v2, "invalidateAndCancel");
    v3 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;

  }
}

void sub_100085F18(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "configDisabled:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100085F74(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "configurationRestart:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100085FD0(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "cloudSubscriptionChanged:configManager:", *(unsigned __int8 *)(a1 + 48), v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100086030(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "suspendPrivacyProxyTemporarily:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10008608C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "resumePrivacyProxy:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_1000860E8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "configUpdated:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100086144(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000314C;
    v5[4] = sub_1000841FC;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.configurationFetched");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100086220;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_100086208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086220(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "configFetched:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10008627C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "proxyTokenFetchEnabled:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_1000862D8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "proxyTokenFetchDisabled:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100086334(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000314C;
    v5[4] = sub_1000841FC;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.authenticationInfoUpdated");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100086410;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_1000863F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086410(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "authInfoChanged:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10008646C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "userTierChanged:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

id sub_1000864C8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  void *v5;
  _QWORD v7[5];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "userPreferredTierChanged:", v4);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10008655C;
  v7[3] = &unk_1000F6170;
  v5 = *(void **)(a1 + 32);
  v7[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v5, "refreshConfigurationWithReason:completionHandler:", 8, v7);
}

void sub_10008655C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100086570(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "effectiveUserTierChanged:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_1000865CC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000314C;
    v5[4] = sub_1000841FC;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.proxiesInfoUpdated");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000866A8;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_100086690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000866A8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "proxyInfoChanged:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100086704(void *a1, char a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  _QWORD v8[5];
  id v9;
  _QWORD *v10;
  char v11;
  _QWORD v12[5];
  id v13;

  if (a1)
  {
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x3032000000;
    v12[3] = sub_10000314C;
    v12[4] = sub_1000841FC;
    v13 = (id)os_transaction_create("com.apple.networkserviceproxy.policiesUpdated");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "mergeProxyTrafficStateWithCurrentPolicy"));
    v5 = NPGetInternalQueue(v4);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100086818;
    v8[3] = &unk_1000F6880;
    v8[4] = a1;
    v9 = v4;
    v11 = a2;
    v10 = v12;
    v7 = v4;
    dispatch_async(v6, v8);

    _Block_object_dispose(v12, 8);
  }
}

void sub_100086800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086818(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "policiesUpdated:policy:resolverInfoChanged:", v4, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10008687C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000314C;
    v5[4] = sub_1000841FC;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.geohashSettingsChanged");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100086958;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_100086940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086958(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "geohashSettingsChanged:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_1000869B4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000314C;
    v5[4] = sub_1000841FC;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.configEpochChanged");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100086A90;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_100086A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086A90(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "configEpochChanged:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100086AEC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  id v6;

  if (a1)
  {
    v5[0] = 0;
    v5[1] = v5;
    v5[2] = 0x3032000000;
    v5[3] = sub_10000314C;
    v5[4] = sub_1000841FC;
    v6 = (id)os_transaction_create("com.apple.networkserviceproxy.privateAccessTokensChanged");
    v2 = NPGetInternalQueue(v6);
    v3 = objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100086BC8;
    v4[3] = &unk_1000F5428;
    v4[4] = a1;
    v4[5] = v5;
    dispatch_async(v3, v4);

    _Block_object_dispose(v5, 8);
  }
}

void sub_100086BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086BC8(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  objc_msgSend(WeakRetained, "privateAccessTokensEnabledChanged:", v4);

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_100086C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  int v10;
  const char *v11;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "failed";
    if (v3)
      v7 = "successfully";
    v10 = 136315138;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Trial configuration refresh completed %s", (uint8_t *)&v10, 0xCu);
  }

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;

}

id sub_100086CFC(id a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  void *v6;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (objc_msgSend(v3, "conditionsCount"))
      a1 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 0);
    else
      a1 = 0;
    if (objc_msgSend(v4, "conditionsCount"))
    {
      v5 = 0;
      do
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v4, "conditionsAtIndex:", v5)));
        objc_msgSend(a1, "addObject:", v6);

        ++v5;
      }
      while (v5 < (unint64_t)objc_msgSend(v4, "conditionsCount"));
    }
  }

  return a1;
}

id *sub_100086F0C(id *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  unsigned int v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t v18[128];
  uint8_t buf[4];
  const char *v20;

  v1 = a1;
  if (a1)
  {
    if (objc_msgSend(a1, "effectiveUserTier"))
    {
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1[4], "proxyConfiguration", 0));
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "policyTierMaps"));

      v6 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v15;
        while (2)
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(_QWORD *)v15 != v8)
              objc_enumerationMutation(v5);
            v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
            v11 = objc_msgSend(v10, "tier");
            if (v11 == objc_msgSend(v1, "effectiveUserTier"))
            {
              v1 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "policy"));
              goto LABEL_13;
            }
          }
          v7 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v7)
            continue;
          break;
        }
      }
    }
    else
    {
      v13 = nplog_obj(0, v2, v3);
      v5 = objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v20 = "-[NSPConfigurationManager configuredPrivacyProxyPolicy]";
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "%s called with null self.effectiveUserTier", buf, 0xCu);
      }
    }
    v1 = 0;
LABEL_13:

  }
  return v1;
}

uint64_t sub_100087A28(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = objc_msgSend(v5, "accessTokenTypesCount");
    if (v7 == objc_msgSend(v6, "accessTokenTypesCount"))
    {
      if (objc_msgSend(v5, "accessTokenTypesCount") && objc_msgSend(v5, "accessTokenTypesCount"))
      {
        v8 = 0;
        do
        {
          v9 = objc_msgSend(v5, "accessTokenTypesAtIndex:", v8);
          v10 = v9 == objc_msgSend(v6, "accessTokenTypesAtIndex:", v8);
          a1 = v10;
          if (!v10)
            break;
          ++v8;
        }
        while (v8 < (unint64_t)objc_msgSend(v5, "accessTokenTypesCount"));
      }
      else
      {
        a1 = 1;
      }
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

void sub_10008C208(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008C254(uint64_t result)
{
  id *v1;
  void *v2;
  id WeakRetained;
  id v4;

  if (result)
  {
    v1 = (id *)result;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(result + 32), "userTier"));
    if (objc_msgSend(v2, "unsignedIntegerValue") != (id)2)
    {
LABEL_5:

      return 1;
    }
    WeakRetained = objc_loadWeakRetained(v1 + 3);
    if (objc_msgSend(WeakRetained, "subscriberTierIsProhibited:", v1))
    {

      goto LABEL_5;
    }
    v4 = objc_msgSend(v1, "configurationSubscriberPoliciesCount");

    if (v4)
      return 2;
    else
      return 1;
  }
  return result;
}

uint64_t sub_10008C2E0(void *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = (void *)v4;
  if (!(v3 | v4) || (v6 = 1, v3) && v4 && objc_msgSend((id)v3, "isEqual:", v4))
    v6 = 0;

  return v6;
}

void sub_10008D34C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

uint64_t sub_10008D540(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10008D8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10008D8F0(uint64_t a1)
{
  void *v1;
  void *v2;

  if (a1 && !*(_BYTE *)(a1 + 10))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "interface"));
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "interfaceName"));

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void sub_10008D940(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD v19[5];
  id v20;
  id v21;
  _QWORD block[4];
  id v23;
  uint8_t buf[4];
  id v25;

  v5 = a2;
  v6 = a3;
  v9 = nplog_obj(v6, v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v11)
    {
      *(_DWORD *)buf = 138412290;
      v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to receive private cloud compute environment, error %@", buf, 0xCu);
    }

    v13 = NPGetInternalQueue(v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008DB14;
    block[3] = &unk_1000F68D0;
    v23 = *(id *)(a1 + 40);
    dispatch_async(v14, block);

    v15 = v23;
  }
  else
  {
    if (v11)
    {
      *(_DWORD *)buf = 138412290;
      v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received private cloud compute environment \"%@\"", buf, 0xCu);
    }

    v17 = NPGetInternalQueue(v16);
    v18 = objc_claimAutoreleasedReturnValue(v17);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10008DB24;
    v19[3] = &unk_1000F68F8;
    v19[4] = *(_QWORD *)(a1 + 32);
    v20 = v5;
    v21 = *(id *)(a1 + 40);
    dispatch_async(v18, v19);

    v15 = v20;
  }

}

uint64_t sub_10008DB14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_10008DB24(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    WeakRetained = objc_loadWeakRetained((id *)(v2 + 24));
  else
    WeakRetained = 0;
  objc_msgSend(WeakRetained, "updateSavedPrivateCloudComputeEnvironment:", *(_QWORD *)(a1 + 40));

  v4 = *(id **)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  if (v4)
  {
    v6 = (unint64_t)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4[4], "lastPrivateCloudComputeEnvironment"));
    v7 = (unint64_t)v5;
    v8 = (void *)v7;
    if (!(v7 | v6) || v7 && v6 && objc_msgSend((id)v6, "isEqual:", v7))
    {

    }
    else
    {

      v6 = (unint64_t)objc_msgSend(v4[4], "copy");
      objc_msgSend((id)v6, "setLastPrivateCloudComputeEnvironment:", v8);
      objc_msgSend(v4, "updateConfiguration:", v6);
    }

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10008DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008DE8C(uint64_t a1, int a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t v29[16];
  _QWORD block[5];
  _QWORD v31[5];

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    v5 = *(void **)(v4 + 32);
  else
    v5 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "enabled"));
  v7 = objc_msgSend(v6, "BOOLValue");

  if (v7)
  {
    v9 = *(_QWORD **)(a1 + 32);
    if (v9)
      v9 = (_QWORD *)v9[4];
    v10 = v9;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "configServerHost"));
    v12 = objc_msgSend(v11, "isEqualToString:", CFSTR("mask-api.icloud.com"));
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
      *(_BYTE *)(v13 + 10) = v12 ^ 1;

    v15 = NPGetInternalQueue(v14);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = v16;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10008E038;
    v31[3] = &unk_1000F5450;
    v31[4] = *(_QWORD *)(a1 + 32);
    v18 = v31;
  }
  else
  {
    v19 = NPGetInternalQueue(v8);
    v16 = objc_claimAutoreleasedReturnValue(v19);
    v17 = v16;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008E088;
    block[3] = &unk_1000F5450;
    block[4] = *(_QWORD *)(a1 + 32);
    v18 = block;
  }
  dispatch_async(v16, v18);

  if (a2)
  {
    v23 = nplog_obj(v20, v21, v22);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Private cloud compute environment changed, forcing a configuration fetch", v29, 2u);
    }

    v25 = *(_QWORD *)(a1 + 32);
    if (v25)
      v26 = *(void **)(v25 + 32);
    else
      v26 = 0;
    objc_msgSend(v26, "setEtag:", 0);
  }
  sub_100083EBC(*(_QWORD *)(a1 + 32));
  sub_100085154(*(id **)(a1 + 32), v27, v28);
}

void sub_10008E038(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  v5 = WeakRetained;
  objc_msgSend(WeakRetained, "configEnabled:", v4);

}

void sub_10008E088(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
    v4 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v4 = 0;
    WeakRetained = 0;
  }
  v5 = WeakRetained;
  objc_msgSend(WeakRetained, "configDisabled:", v4);

}

const __CFString *sub_10008E3A8(uint64_t a1, uint64_t a2)
{
  objc_opt_self();
  if ((unint64_t)(a2 - 1) > 0xB)
    return CFSTR("Unknown");
  else
    return *(&off_1000F6A90 + a2 - 1);
}

void sub_10008E3EC(uint64_t a1)
{
  id *WeakRetained;
  id v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10[2];
  id location;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_initWeak(&location, WeakRetained);
    v3 = objc_loadWeakRetained(WeakRetained + 3);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10008E4F4;
    v7[3] = &unk_1000F6998;
    objc_copyWeak(v10, &location);
    v4 = *(void **)(a1 + 40);
    v7[4] = *(_QWORD *)(a1 + 32);
    v5 = v4;
    v6 = *(void **)(a1 + 64);
    v8 = v5;
    v10[1] = v6;
    v9 = *(id *)(a1 + 48);
    objc_msgSend(v3, "requestAccessTokenWithCompletionHandler:", v7);

    objc_destroyWeak(v10);
    objc_destroyWeak(&location);
  }

}

void sub_10008E4D8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10008E4F4(uint64_t a1, uint64_t a2, void *a3)
{
  id *WeakRetained;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const __CFString *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  const __CFString *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  __CFString *v62;
  id v63;
  void *v64;
  unsigned int v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  NSObject *v88;
  void *v89;
  __int128 *v90;
  id v91;
  _QWORD *v92;
  id v93;
  id v94;
  id v95;
  void *v96;
  id v97;
  id v98;
  id v99;
  _QWORD v100[2];
  void (*v101)(uint64_t, int, void *, void *, void *, void *);
  void *v102;
  id v103;
  id v104;
  id location;
  __int128 v106;
  void (*v107)(uint64_t, void *, void *, void *);
  void *v108;
  id *v109;
  id v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  void (*v115)(uint64_t, void *, void *, void *);
  void *v116;
  __int128 *v117;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  void (*v122)(uint64_t);
  id v123;

  v99 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    objc_initWeak(&location, WeakRetained);
    v5 = sub_10008D8F0(*(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "etag"));
    v8 = *(_QWORD *)(a1 + 64);
    v100[0] = _NSConcreteStackBlock;
    v100[1] = 3221225472;
    v101 = sub_10008EFDC;
    v102 = &unk_1000F6970;
    objc_copyWeak(&v104, &location);
    v103 = *(id *)(a1 + 48);
    v97 = v6;
    v98 = v7;
    v91 = v99;
    v92 = v100;
    v9 = WeakRetained[4];
    v89 = v9;
    if (v9)
    {
      v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "createConfigFetchURLWithPath:timestamp:", 0, 0));
      if (v96)
      {
        if (qword_100112EE0 != -1)
          dispatch_once(&qword_100112EE0, &stru_1000F69E0);
        v14 = mach_absolute_time();
        v15 = WeakRetained[11];
        *(_QWORD *)&v106 = _NSConcreteStackBlock;
        *((_QWORD *)&v106 + 1) = 3221225472;
        v107 = sub_10008F844;
        v108 = &unk_1000F6A08;
        v109 = WeakRetained;
        v16 = v96;
        v110 = v16;
        v111 = v92;
        v112 = v8;
        v113 = v14;
        v17 = v16;
        v95 = v97;
        v94 = v98;
        v18 = v15;
        v93 = v91;
        v90 = &v106;
        v19 = NPGetInternalQueue(v90);
        v20 = objc_claimAutoreleasedReturnValue(v19);
        dispatch_assert_queue_V2(v20);

        if (v18)
        {
          if (os_variant_has_internal_diagnostics("com.apple.networkserviceproxy"))
          {
            v24 = sub_10008FE9C((uint64_t)WeakRetained);
            v25 = copyProductTypeString();
            v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
            v27 = copyOSNameString();
            v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
            v29 = copyOSVersionString();
            v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
            v31 = copyOSBuildString();
            v32 = objc_claimAutoreleasedReturnValue(v31);
            v33 = (void *)v32;
            if ((v24 & 5) == 1)
              v34 = CFSTR("<%@> <%@;%@;%@>");
            else
              v34 = CFSTR("<%@> <%@;%@;%@;internal>");
            v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v34, v26, v28, v30, v32));

            if ((v24 - 3) <= 3u)
            {
              v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "host"));
              v37 = objc_msgSend(v36, "isEqualToString:", CFSTR("mask-api.icloud.com"));

              if (v37)
              {
                v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "absoluteString"));
                v39 = objc_msgSend(v38, "mutableCopy");

                objc_msgSend(v39, "replaceOccurrencesOfString:withString:options:range:", CFSTR("mask-api.icloud.com"), CFSTR("api-mask.us-west-1a.app.apple.com"), 0, 0, objc_msgSend(v39, "length"));
                v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[11], "delegate"));
                objc_msgSend(v40, "setValidationHostname:", CFSTR("api-mask.us-west-1a.app.apple.com"));

                v41 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v39));
                v95 = 0;
                v17 = (id)v41;
              }
            }
            v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[4], "configServerHost"));
            *((_BYTE *)WeakRetained + 10) = objc_msgSend(v42, "isEqualToString:", CFSTR("mask-api.icloud.com")) ^ 1;
          }
          else
          {
            v43 = copyProductTypeString();
            v42 = (void *)objc_claimAutoreleasedReturnValue(v43);
            v44 = copyOSNameString();
            v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
            v46 = copyOSVersionString();
            v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
            v48 = copyOSBuildString();
            v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
            v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<%@> <%@;%@;%@>"),
                              v42,
                              v45,
                              v47,
                              v49));

          }
          if (!sub_10008FE9C((uint64_t)WeakRetained) && (v8 == 10 || v8 == 5))
          {
            v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "host"));
            v65 = objc_msgSend(v64, "isEqualToString:", CFSTR("mask-api.icloud.com"));

            if (v65)
            {
              v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "absoluteString"));
              v67 = objc_msgSend(v66, "mutableCopy");

              objc_msgSend(v67, "replaceOccurrencesOfString:withString:options:range:", CFSTR("mask-api.icloud.com/"), CFSTR("gateway.icloud.com/mask-api/"), 0, 0, objc_msgSend(v67, "length"));
              v68 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v67));

              v72 = nplog_obj(v69, v70, v71);
              v73 = objc_claimAutoreleasedReturnValue(v72);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "Fetching configuration from backup location", (uint8_t *)&buf, 2u);
              }

              v17 = (id)v68;
            }
          }
          v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v17));
          v51 = v50;
          if (v94)
            objc_msgSend(v50, "setValue:forHTTPHeaderField:", v94, CFSTR("If-None-Match"));
          if (v95)
            objc_msgSend(v51, "setBoundInterfaceIdentifier:", v95);
          if (v35)
            objc_msgSend(v51, "setValue:forHTTPHeaderField:", v35, CFSTR("X-Mask-Client-Info"));
          if (v93)
            objc_msgSend(v51, "setValue:forHTTPHeaderField:", v93, CFSTR("X-Mask-Subscription-Token"));
          v52 = WeakRetained[15];
          if (v52)
            objc_msgSend(v51, "setValue:forHTTPHeaderField:", v52, CFSTR("True-Client-Ip"));
          v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyLocationMonitor sharedMonitor](NSPPrivacyProxyLocationMonitor, "sharedMonitor"));
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "currentCountryPlusTimezone"));

          if (v54)
            objc_msgSend(v51, "setValue:forHTTPHeaderField:", v54, CFSTR("Client-Region"));
          if (v8)
          {
            v55 = sub_10008E3A8((uint64_t)NSPConfigurationManager, v8);
            v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            objc_msgSend(v51, "setValue:forHTTPHeaderField:", v56, CFSTR("X-Mask-Fetch-Reason"));

          }
          if (objc_msgSend(WeakRetained, "effectiveUserTier") == (id)2
            && (v57 = objc_msgSend(WeakRetained, "policyIncludesUnlimited"), (_DWORD)v57))
          {
            v60 = nplog_obj(v57, v58, v59);
            v61 = objc_claimAutoreleasedReturnValue(v60);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
            {
              LOWORD(buf) = 0;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "Setting user tier in configuration request to SUBSCRIBER_UNLIMITED", (uint8_t *)&buf, 2u);
            }

            v62 = CFSTR("SUBSCRIBER_UNLIMITED");
          }
          else
          {
            v63 = objc_msgSend(WeakRetained, "effectiveUserTier");
            if (v63 >= 3)
              v62 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), v63));
            else
              v62 = *(&off_1000F6AF0 + (int)v63);
          }
          v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[4], "subscriberEnabledFromNonSettingsApp"));

          if (v74)
          {
            v75 = objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingString:](v62, "stringByAppendingString:", CFSTR("; non-settings")));

            v62 = (__CFString *)v75;
          }
          objc_msgSend(v51, "setValue:forHTTPHeaderField:", v62, CFSTR("X-Mask-User-Tier"));
          v76 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%lu"), WeakRetained[10]));
          v79 = v76;
          if (v76)
            v76 = objc_msgSend(v51, "setValue:forHTTPHeaderField:", v76, CFSTR("Retry-Attempt"));
          *(_QWORD *)&buf = 0;
          *((_QWORD *)&buf + 1) = &buf;
          v120 = 0x3032000000;
          v121 = sub_10000314C;
          v122 = sub_1000841FC;
          v123 = 0;
          v80 = nplog_obj(v76, v77, v78);
          v81 = objc_claimAutoreleasedReturnValue(v80);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v114) = 138412290;
            *(_QWORD *)((char *)&v114 + 4) = v17;
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "Sending request for %@", (uint8_t *)&v114, 0xCu);
          }

          *(_QWORD *)&v114 = _NSConcreteStackBlock;
          *((_QWORD *)&v114 + 1) = 3221225472;
          v115 = sub_1000900A0;
          v116 = &unk_1000F6A58;
          p_buf = &buf;
          v117 = v90;
          v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "dataTaskWithRequest:completionHandler:", v51, &v114));
          objc_storeStrong((id *)(*((_QWORD *)&buf + 1) + 40), v82);
          objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "resume");

          _Block_object_dispose(&buf, 8);
        }
        else
        {
          v87 = nplog_obj(v21, v22, v23);
          v88 = objc_claimAutoreleasedReturnValue(v87);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
          {
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = "-[NSPConfigurationManager fetchURL:interface:eTag:requestType:session:access"
                                            "Token:reason:completionHandler:]";
            _os_log_fault_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
          }

          v107((uint64_t)v90, 0, 0, 0);
        }

      }
      else
      {
        v85 = nplog_obj(0, v12, v13);
        v86 = objc_claimAutoreleasedReturnValue(v85);
        if (os_log_type_enabled(v86, OS_LOG_TYPE_FAULT))
        {
          LODWORD(v106) = 136315138;
          *(_QWORD *)((char *)&v106 + 4) = "-[NSPConfigurationManager fetchPrivacyProxyConfigurationFile:interface:eTag:a"
                                           "ccessToken:reason:completionHandler:]";
          _os_log_fault_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_FAULT, "%s called with null configFetchURL", (uint8_t *)&v106, 0xCu);
        }

        v101((uint64_t)v92, 0, 0, 0, 0, 0);
      }

    }
    else
    {
      v83 = nplog_obj(0, v10, v11);
      v84 = objc_claimAutoreleasedReturnValue(v83);
      if (os_log_type_enabled(v84, OS_LOG_TYPE_FAULT))
      {
        LODWORD(v106) = 136315138;
        *(_QWORD *)((char *)&v106 + 4) = "-[NSPConfigurationManager fetchPrivacyProxyConfigurationFile:interface:eTag:acc"
                                         "essToken:reason:completionHandler:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_FAULT, "%s called with null currentConfiguration", (uint8_t *)&v106, 0xCu);
      }

      v101((uint64_t)v92, 0, 0, 0, 0, 0);
    }

    objc_destroyWeak(&v104);
    objc_destroyWeak(&location);
  }

}

void sub_10008EF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  uint64_t v32;

  _Block_object_dispose((const void *)(v32 - 176), 8);
  objc_destroyWeak(location);
  objc_destroyWeak(&a32);
  _Unwind_Resume(a1);
}

void sub_10008EFDC(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  _BYTE *WeakRetained;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  void (*v37)(void);
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  _BOOL4 v44;
  const char *v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  unsigned int v55;
  void *v56;
  void *v57;
  _QWORD v58[4];
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  uint8_t buf[4];
  id v69;
  __int16 v70;
  id v71;

  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v16 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    WeakRetained[8] = 0;
    if (a2)
    {
      if (v11)
      {
        v17 = objc_alloc_init((Class)NSData);
        v67 = v17;
        NSPPrivacyProxyConfigurationRawConfig(v11, &v67);
        v18 = v67;

        v19 = objc_alloc((Class)NSPPrivacyProxySignedConfiguration);
        v20 = objc_msgSend(v11, "copy");
        v21 = objc_msgSend(v19, "initWithData:", v20);

        v57 = v21;
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "configuration"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "data"));
        v24 = objc_msgSend(v23, "length");
        v56 = v18;
        v25 = objc_msgSend(v18, "length");

        if (v24 != v25)
        {
          v29 = nplog_obj(v26, v27, v28);
          v30 = objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "configuration"));
            v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "data"));
            v53 = objc_msgSend(v52, "length");
            v54 = objc_msgSend(v56, "length");
            *(_DWORD *)buf = 134218240;
            v69 = v53;
            v70 = 2048;
            v71 = v54;
            _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Unmarshalled configuration length is different from received length (%lu != %lu)", buf, 0x16u);

          }
        }
        v31 = v56;
        if (v57 && v56)
        {
          v32 = objc_alloc_init((Class)NSPConfigurationSignatureInfo);
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "certificates"));
          objc_msgSend(v32, "setCertificates:", v33);

          v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "signature"));
          objc_msgSend(v32, "setSignature:", v34);

          objc_msgSend(v32, "setSignatureAlgorithm:", (int)objc_msgSend(v57, "algorithm"));
          if (os_variant_allows_internal_security_policies("com.apple.networkserviceproxy"))
            v35 = objc_msgSend(*(id *)(v16 + 32), "ignoreInvalidCerts") ^ 1;
          else
            v35 = 1;
          v55 = v35;
          v46 = *(id *)(v16 + 32);
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "configServerHost"));
          v58[0] = _NSConcreteStackBlock;
          v58[1] = 3221225472;
          v58[2] = sub_10008F4C8;
          v58[3] = &unk_1000F6948;
          v59 = v57;
          v60 = v56;
          v61 = v12;
          v62 = v13;
          v63 = (id)v16;
          v64 = v32;
          v66 = *(id *)(a1 + 32);
          v65 = v14;
          v48 = v32;
          v31 = v56;
          +[NSPConfiguration verifyConfigurationSignature:configuration:host:validateCert:completionHandler:](NSPConfiguration, "verifyConfigurationSignature:configuration:host:validateCert:completionHandler:", v48, v60, v47, v55, v58);

LABEL_25:
          goto LABEL_26;
        }
        v42 = nplog_obj(v26, v27, v28);
        v43 = objc_claimAutoreleasedReturnValue(v42);
        v44 = os_log_type_enabled(v43, OS_LOG_TYPE_ERROR);
        if (v56)
        {
          if (!v44)
            goto LABEL_23;
          *(_DWORD *)buf = 138412290;
          v69 = v12;
          v45 = "failed to allocate signed configuration object from configuration data (new etag %@)";
        }
        else
        {
          if (!v44)
            goto LABEL_23;
          *(_DWORD *)buf = 138412290;
          v69 = v12;
          v45 = "unable to extract wire format of configuration from signed configuration message (new etag %@)";
        }
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, v45, buf, 0xCu);
LABEL_23:

        ++*(_QWORD *)(v16 + 112);
        sub_100084EA4(v16, 0, v49);
        v50 = *(_QWORD *)(a1 + 32);
        if (v50)
          (*(void (**)(uint64_t, _QWORD, id))(v50 + 16))(v50, 0, v14);
        goto LABEL_25;
      }
      ++*((_QWORD *)WeakRetained + 13);
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      objc_msgSend(*(id *)(v16 + 32), "setConfigurationFetchDate:", v38);

      sub_100084B74(v16, v39, v40);
      sub_100086144(v16);
      v41 = *(_QWORD *)(a1 + 32);
      if (v41)
      {
        v37 = *(void (**)(void))(v41 + 16);
        goto LABEL_16;
      }
    }
    else
    {
      ++*((_QWORD *)WeakRetained + 14);
      v36 = *(_QWORD *)(a1 + 32);
      if (v36)
      {
        v37 = *(void (**)(void))(v36 + 16);
LABEL_16:
        v37();
      }
    }
  }
LABEL_26:

}

void sub_10008F4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint8_t buf[4];
  uint64_t v38;

  if (!(_DWORD)a2)
  {
    v26 = nplog_obj(a1, a2, a3);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_21;
    v28 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    v38 = v28;
    v29 = "Failed to validate configuration signature (new etag %@)";
    goto LABEL_27;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v5 = +[NSPConfiguration validatePrivacyProxyConfiguration:](NSPConfiguration, "validatePrivacyProxyConfiguration:", v4);

  if (v5)
  {
    v36 = objc_alloc_init((Class)NSPConfiguration);
    if (v36)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
      objc_msgSend(v36, "setProxyConfiguration:", v9);

      objc_msgSend(v36, "setProxyConfigurationData:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v36, "setEtag:", *(_QWORD *)(a1 + 48));
      objc_msgSend(v36, "setEpoch:", *(_QWORD *)(a1 + 56));
      v10 = *(_QWORD *)(a1 + 64);
      if (v10)
        v11 = *(void **)(v10 + 32);
      else
        v11 = 0;
      objc_msgSend(v36, "setIgnoreInvalidCerts:", objc_msgSend(v11, "ignoreInvalidCerts"));
      v12 = *(_QWORD *)(a1 + 64);
      if (v12)
        v13 = *(void **)(v12 + 32);
      else
        v13 = 0;
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "geohashOverride"));
      objc_msgSend(v36, "setGeohashOverride:", v14);

      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
      objc_msgSend(v36, "setConfigurationFetchDate:", v15);

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "proxyConfiguration"));
      v17 = objc_msgSend(v16, "disableUntil");

      if (v17)
      {
        v18 = objc_alloc((Class)NSDate);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "proxyConfiguration"));
        v20 = objc_msgSend(v18, "initWithTimeIntervalSince1970:", (double)(unint64_t)objc_msgSend(v19, "disableUntil"));

        objc_msgSend(v20, "timeIntervalSinceNow");
        if (v21 > 0.0)
          objc_msgSend(v36, "setResurrectionDate:", v20);

      }
      objc_msgSend(*(id *)(a1 + 64), "updateConfiguration:", v36);
      objc_msgSend(*(id *)(a1 + 72), "saveToPreferences");
      sub_100084B74(*(_QWORD *)(a1 + 64), v22, v23);
    }
    sub_100086144(*(_QWORD *)(a1 + 64));
    v24 = *(_QWORD *)(a1 + 64);
    if (v24)
      ++*(_QWORD *)(v24 + 104);
    v25 = *(_QWORD *)(a1 + 88);
    if (v25)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v25 + 16))(v25, 1, 0);

    return;
  }
  v30 = nplog_obj(v6, v7, v8);
  v27 = objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    v35 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    v38 = v35;
    v29 = "Failed to validate configuration (new etag %@)";
LABEL_27:
    _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, v29, buf, 0xCu);
  }
LABEL_21:

  v32 = *(_QWORD *)(a1 + 64);
  if (v32)
  {
    ++*(_QWORD *)(v32 + 112);
    v33 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v33 = 0;
  }
  sub_100084EA4(v33, 0, v31);
  v34 = *(_QWORD *)(a1 + 88);
  if (v34)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v34 + 16))(v34, 0, *(_QWORD *)(a1 + 80));
}

void sub_10008F7EC(id a1)
{
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info info;

  info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_100112EE8 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }
}

void sub_10008F844(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char *v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  id v33;
  void (*v34)(void);
  uint64_t v35;
  NSPConfigurationFetchAnalytics *v36;
  uint64_t has_internal_diagnostics;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  const __CFString *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  _UNKNOWN **v54;
  id v55;
  uint64_t v56;
  NSPConfigurationFetchAnalytics *v57;
  void *v58;
  void *v59;
  void *v60;
  unsigned int v61;
  const __CFString *v62;
  void *v63;
  int v64;
  id v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  void *v69;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = v8;
  v12 = v7;
  v13 = &AnalyticsSendEventLazy_ptr;
  if (v10)
  {
    v14 = objc_opt_class(NSHTTPURLResponse);
    if ((objc_opt_isKindOfClass(v11, v14) & 1) != 0)
    {
      v16 = v11;
      v17 = (char *)objc_msgSend(v16, "statusCode");
      if ((unint64_t)(v17 - 503) < 2)
      {
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "allHeaderFields"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("Retry-After")));

        if (v25)
        {
          v26 = objc_alloc_init((Class)NSNumberFormatter);
          v27 = v9;
          v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "numberFromString:", v25));
          v23 = objc_msgSend(v28, "unsignedIntegerValue");

          v9 = v27;
          v13 = &AnalyticsSendEventLazy_ptr;

        }
        else
        {
          v23 = 0;
        }

      }
      else
      {
        if (v17 == (char *)200 || v17 == (char *)304)
        {

          goto LABEL_19;
        }
        v23 = 0;
      }

    }
    else
    {
      if (v12)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "domain"));
        v19 = objc_msgSend(v18, "isEqualToString:", NSURLErrorDomain);

        if (v19)
        {
          if (objc_msgSend(v12, "code") == (id)-999)
          {

            goto LABEL_20;
          }
        }
      }
      v23 = 0;
    }
    *(_BYTE *)(v10 + 9) = v23 == 0;
    sub_100084EA4(v10, (unint64_t)v23, v15);
  }
LABEL_19:

  if (v12)
  {
LABEL_20:
    v29 = nplog_obj(v20, v21, v22);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 40);
      v64 = 138412546;
      v65 = v12;
      v66 = 2112;
      v67 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Received error %@ for %@", (uint8_t *)&v64, 0x16u);
    }

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "domain"));
    if (objc_msgSend(v32, "isEqualToString:", NSURLErrorDomain))
    {
      v33 = objc_msgSend(v12, "code");

      if (v33 == (id)-999)
      {
        v34 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
LABEL_30:
        v34();
        v36 = objc_alloc_init(NSPConfigurationFetchAnalytics);
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
        -[NSPConfigurationFetchAnalytics setConfigFetchURL:](v36, "setConfigFetchURL:", v41);

        -[NSPConfigurationFetchAnalytics setRequestedServerUUID:](v36, "setRequestedServerUUID:", 0);
        -[NSPConfigurationFetchAnalytics setHttpCode:](v36, "setHttpCode:", 0);
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "domain"));
        v43 = objc_msgSend(v42, "isEqualToString:", NSURLErrorDomain);

        if (v43)
          -[NSPConfigurationFetchAnalytics setNsurlErrorCode:](v36, "setNsurlErrorCode:", objc_msgSend(v12, "code"));
        v44 = sub_10008E3A8((uint64_t)NSPConfigurationManager, *(_QWORD *)(a1 + 56));
        v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
        -[NSPConfigurationFetchAnalytics setReason:](v36, "setReason:", v45);

        -[NSPProxyAnalytics sendAnalytics](v36, "sendAnalytics");
LABEL_46:

        goto LABEL_47;
      }
    }
    else
    {

    }
    v34 = *(void (**)(void))(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_30;
  }
  v35 = objc_opt_class(v13[107]);
  if ((objc_opt_isKindOfClass(v11, v35) & 1) != 0)
  {
    v36 = (NSPConfigurationFetchAnalytics *)v11;
    has_internal_diagnostics = os_variant_has_internal_diagnostics("com.apple.networkserviceproxy");
    if ((_DWORD)has_internal_diagnostics)
    {
      has_internal_diagnostics = objc_claimAutoreleasedReturnValue(-[NSPConfigurationFetchAnalytics valueForHTTPHeaderField:](v36, "valueForHTTPHeaderField:", CFSTR("x-apple-request-uuid")));
      v40 = (void *)has_internal_diagnostics;
    }
    else
    {
      v40 = 0;
    }
    v46 = nplog_obj(has_internal_diagnostics, v38, v39);
    v47 = objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      v48 = -[NSPConfigurationFetchAnalytics statusCode](v36, "statusCode");
      v49 = *(_QWORD *)(a1 + 40);
      v64 = 134218498;
      v65 = v48;
      v66 = 2112;
      v67 = v49;
      v68 = 2112;
      v69 = v40;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Received HTTP response code %ld for %@ with request UUID %@", (uint8_t *)&v64, 0x20u);
    }

    if (-[NSPConfigurationFetchAnalytics statusCode](v36, "statusCode") == (id)200)
    {
      v50 = (void *)objc_claimAutoreleasedReturnValue(-[NSPConfigurationFetchAnalytics valueForHTTPHeaderField:](v36, "valueForHTTPHeaderField:", CFSTR("Etag")));
      v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSPConfigurationFetchAnalytics valueForHTTPHeaderField:](v36, "valueForHTTPHeaderField:", CFSTR("proxy-config-epoch")));
      v52 = v51;
      if (v51 && (v53 = objc_msgSend(v51, "intValue"), ((_DWORD)v53 - 1) <= 0xFFFE))
        v54 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v53));
      else
        v54 = &off_1000FF7A0;
      v55 = v9;
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

    }
    else
    {
      v55 = v9;
      (*(void (**)(_QWORD, BOOL, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), -[NSPConfigurationFetchAnalytics statusCode](v36, "statusCode") == (id)304, 0, 0, 0, 0);
    }
    v56 = mach_absolute_time();
    v57 = objc_alloc_init(NSPConfigurationFetchAnalytics);
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "absoluteString"));
    -[NSPConfigurationFetchAnalytics setConfigFetchURL:](v57, "setConfigFetchURL:", v58);

    v59 = (void *)objc_claimAutoreleasedReturnValue(-[NSPConfigurationFetchAnalytics valueForHTTPHeaderField:](v36, "valueForHTTPHeaderField:", CFSTR("x-apple-request-uuid")));
    -[NSPConfigurationFetchAnalytics setRequestedServerUUID:](v57, "setRequestedServerUUID:", v59);

    -[NSPConfigurationFetchAnalytics setHttpCode:](v57, "setHttpCode:", -[NSPConfigurationFetchAnalytics statusCode](v36, "statusCode"));
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "domain"));
    v61 = objc_msgSend(v60, "isEqualToString:", NSURLErrorDomain);

    if (v61)
      -[NSPConfigurationFetchAnalytics setNsurlErrorCode:](v57, "setNsurlErrorCode:", objc_msgSend(0, "code"));
    -[NSPConfigurationFetchAnalytics setLatency:](v57, "setLatency:", *(double *)&qword_100112EE8 * (double)(v56 - *(_QWORD *)(a1 + 64)));
    v62 = sub_10008E3A8((uint64_t)NSPConfigurationManager, *(_QWORD *)(a1 + 56));
    v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
    -[NSPConfigurationFetchAnalytics setReason:](v57, "setReason:", v63);

    -[NSPProxyAnalytics sendAnalytics](v57, "sendAnalytics");
    v9 = v55;
    goto LABEL_46;
  }
LABEL_47:

}

uint64_t sub_10008FE9C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  uint64_t v4;
  char isKindOfClass;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v13;
  id v14;

  if (!a1)
    return 0;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "getSavedPrivateCloudComputeEnvironment"));

  v3 = v2;
  v4 = objc_opt_class(NSString);
  if (!v3)
    goto LABEL_19;
  isKindOfClass = objc_opt_isKindOfClass(v3, v4);

  if ((isKindOfClass & 1) == 0)
    goto LABEL_19;
  v9 = nplog_obj(v6, v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 138412290;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Read com.apple.privateCloudCompute environment: \"%@\"", (uint8_t *)&v13, 0xCu);
  }

  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("dev")) & 1) == 0)
  {
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("qa")) & 1) != 0)
      goto LABEL_9;
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("perf")) & 1) != 0)
    {
      v11 = 4;
      goto LABEL_20;
    }
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("staging")) & 1) != 0)
    {
      v11 = 3;
      goto LABEL_20;
    }
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("carry")) & 1) != 0)
    {
      v11 = 2;
      goto LABEL_20;
    }
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("production")) & 1) != 0)
    {
      v11 = 1;
      goto LABEL_20;
    }
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("ephemeral")) & 1) != 0)
    {
LABEL_9:
      v11 = 6;
      goto LABEL_20;
    }
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  v11 = 5;
LABEL_20:

  return v11;
}

void sub_1000900A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  __int128 v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = NPGetInternalQueue(v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000901A0;
  block[3] = &unk_1000F6A30;
  v16 = *(_OWORD *)(a1 + 32);
  v12 = (id)v16;
  v21 = v16;
  v18 = v9;
  v19 = v8;
  v20 = v7;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  dispatch_async(v11, block);

}

uint64_t sub_1000901A0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1000901DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  id WeakRetained;
  _QWORD *v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[8];
  uint8_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v4 = nplog_obj(a1, a2, a3);
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Config Fetch retry timer fired", buf, 2u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_source_cancel(*((dispatch_source_t *)WeakRetained + 9));
    v8 = (void *)v7[9];
    v7[9] = 0;

    *(_QWORD *)buf = 0;
    v11 = buf;
    v12 = 0x3032000000;
    v13 = sub_10000314C;
    v14 = sub_1000841FC;
    v15 = (id)os_transaction_create("com.apple.networkserviceproxy.configManagerConfigFetchRetry");
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100090310;
    v9[3] = &unk_1000F6170;
    v9[4] = buf;
    sub_100084218(v7, 10, v9);
    _Block_object_dispose(buf, 8);

  }
}

void sub_1000902F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100090310(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

void sub_100090324(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  void *v10;
  xpc_object_t xdict;

  xdict = xpc_dictionary_create(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (v3 = *(void **)(v2 + 96)) != 0)
  {
    objc_msgSend(v3, "timeIntervalSinceReferenceDate");
    v5 = (uint64_t)v4;
  }
  else
  {
    v5 = -1;
  }
  xpc_dictionary_set_int64(xdict, "ConfigFetchDate", v5);
  if ((deviceClassIsHomepod(v6) & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7 && *(_BYTE *)(v7 + 9))
      v8 = 1;
    else
      v8 = -1;
    xpc_dictionary_set_int64(xdict, "ConfigFetchOnNetworkChange", v8);
  }
  xpc_set_event("com.apple.networkserviceproxy", "MessageResponse", xdict);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = 0;

}

Class sub_1000909DC(uint64_t a1)
{
  const char *p_info;
  char *v3;
  Class result;
  char *v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  p_info = (const char *)&OBJC_METACLASS___NSPPrivateAccessTokenChallenge.info;
  if (!qword_100112EF8)
  {
    v6 = off_1000F6A78;
    v7 = 0;
    qword_100112EF8 = _sl_dlopen(&v6, &v5);
    v3 = v5;
    if (!qword_100112EF8)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }
    if (v5)
      goto LABEL_8;
  }
  while (1)
  {
    p_info = "PCCServerEnvironment";
    result = objc_getClass("PCCServerEnvironment");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v3 = (char *)abort_report_np("Unable to find class %s", p_info);
LABEL_8:
    free(v3);
  }
  qword_100112EF0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_100090D34(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  _QWORD v24[4];
  NSObject *v25;
  _QWORD v26[4];
  id v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  id v34;
  uint8_t buf[4];
  uint64_t v36;

  v5 = a2;
  v29 = 0;
  v30 = &v29;
  v31 = 0x3032000000;
  v32 = sub_10000315C;
  v33 = sub_10009106C;
  v34 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100091074;
  v26[3] = &unk_1000F52F8;
  v7 = v5;
  v27 = v7;
  v28 = &v29;
  objc_msgSend(v6, "iterateFileHandlesWithBlock:", v26);

  if (v30[5])
  {
    v11 = nplog_obj(v8, v9, v10);
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v36 = a1;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%@ Re-using existing policy session", buf, 0xCu);
    }
LABEL_10:

    v15 = (void *)v30[5];
    goto LABEL_11;
  }
  v13 = objc_alloc_init((Class)NEPolicySession);
  v14 = (void *)v30[5];
  v30[5] = (uint64_t)v13;

  objc_msgSend((id)v30[5], "setPriority:", a3);
  v15 = (void *)v30[5];
  if (v15)
  {
    v16 = objc_alloc((Class)NEPolicySessionFileHandle);
    v12 = objc_msgSend(v16, "initWithPolicySession:name:", v30[5], v7);
    if (v12)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100091160;
      v24[3] = &unk_1000F5370;
      v25 = v7;
      objc_msgSend(v19, "setFileHandle:matchingPredicate:", v12, v24);

      v20 = v25;
    }
    else
    {
      v21 = nplog_obj(0, v17, v18);
      v20 = objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v36 = a1;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%@ failed to create a policy session", buf, 0xCu);
      }
    }

    goto LABEL_10;
  }
LABEL_11:
  v22 = v15;

  _Block_object_dispose(&v29, 8);
  return v22;
}

void sub_100090FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100091044(id a1)
{
  NSPPrivacyProxyPolicyHandler *v1;
  void *v2;

  v1 = objc_alloc_init(NSPPrivacyProxyPolicyHandler);
  v2 = (void *)qword_100112F00;
  qword_100112F00 = (uint64_t)v1;

}

void sub_10009106C(uint64_t a1)
{

}

uint64_t sub_100091074(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v3 = a2;
  v4 = objc_opt_class(NEPolicySessionFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0
    && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name")),
        v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)),
        v5,
        v6))
  {
    v7 = objc_alloc((Class)NEPolicySession);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "handle"));
    v9 = objc_msgSend(v7, "initWithSocket:", dup((int)objc_msgSend(v8, "fileDescriptor")));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "removeAllPolicies");
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "removeAllDomainFilters");
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }

  return v12;
}

BOOL sub_100091160(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;
  _BOOL8 v7;

  v3 = a2;
  v4 = objc_opt_class(NEPolicySessionFileHandle);
  v7 = 0;
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
    v6 = objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32));

    if ((v6 & 1) != 0)
      v7 = 1;
  }

  return v7;
}

id *sub_1000911E0(id *result)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (result)
  {
    v1 = result;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = result[10];
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v10;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
          v8 = v1[3];
          objc_msgSend(v8, "removePolicyWithID:", objc_msgSend(v7, "unsignedIntegerValue", (_QWORD)v9));

          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v4);
    }

    return (id *)objc_msgSend(v1[10], "removeAllObjects");
  }
  return result;
}

void sub_100091868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_100091890(id *result)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (result)
  {
    v1 = result;
    result = (id *)objc_msgSend(result[14], "count");
    if (result)
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v2 = v1[14];
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v10;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v10 != v5)
              objc_enumerationMutation(v2);
            v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
            v8 = v1[3];
            objc_msgSend(v8, "removePolicyWithID:", objc_msgSend(v7, "unsignedIntegerValue", (_QWORD)v9));

            v6 = (char *)v6 + 1;
          }
          while (v4 != v6);
          v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        }
        while (v4);
      }

      return (id *)objc_msgSend(v1[14], "removeAllObjects");
    }
  }
  return result;
}

id *sub_1000919BC(id *result)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (result)
  {
    v1 = result;
    result = (id *)objc_msgSend(result[15], "count");
    if (result)
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v2 = v1[15];
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v10;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v10 != v5)
              objc_enumerationMutation(v2);
            v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
            v8 = v1[3];
            objc_msgSend(v8, "removePolicyWithID:", objc_msgSend(v7, "unsignedIntegerValue", (_QWORD)v9));

            v6 = (char *)v6 + 1;
          }
          while (v4 != v6);
          v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        }
        while (v4);
      }

      return (id *)objc_msgSend(v1[15], "removeAllObjects");
    }
  }
  return result;
}

uint64_t sub_100091AE8(uint64_t result)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (result)
  {
    v1 = result;
    result = (uint64_t)objc_msgSend(*(id *)(result + 128), "count");
    if (result)
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v2 = *(id *)(v1 + 128);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v10;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v10 != v5)
              objc_enumerationMutation(v2);
            v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
            v8 = *(id *)(v1 + 24);
            objc_msgSend(v8, "removePolicyWithID:", objc_msgSend(v7, "unsignedIntegerValue", (_QWORD)v9));

            v6 = (char *)v6 + 1;
          }
          while (v4 != v6);
          v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        }
        while (v4);
      }

      objc_msgSend(*(id *)(v1 + 128), "removeAllObjects");
      return 1;
    }
  }
  return result;
}

id *sub_100091C18(id *result)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  if (result)
  {
    v1 = result;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v2 = result[25];
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v10;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v10 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6);
          v8 = v1[3];
          objc_msgSend(v8, "removePolicyWithID:", objc_msgSend(v7, "unsignedIntegerValue", (_QWORD)v9));

          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v4);
    }

    return (id *)objc_msgSend(v1[25], "removeAllObjects");
  }
  return result;
}

void sub_1000923E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_100092444(void **a1)
{
  uint64_t v1;
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  void *v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  id v29;
  _BYTE v30[128];

  v1 = (uint64_t)a1;
  if (a1)
  {
    if (sub_100095870(CFSTR("com.apple.SafariTechnologyPreview")))
    {
      v2 = sub_100082D94((uint64_t)NSPPrivacyProxyPolicySerialization, *(void **)(v1 + 16));
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v3 = (id)objc_claimAutoreleasedReturnValue(v2);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
      if (v4)
      {
        v7 = v4;
        v8 = *(_QWORD *)v23;
        while (2)
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v23 != v8)
              objc_enumerationMutation(v3);
            v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v9);
            v11 = nplog_obj(v4, v5, v6);
            v12 = objc_claimAutoreleasedReturnValue(v11);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v27 = (void **)v1;
              v28 = 2112;
              v29 = v10;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@ adding SafariTechnologyPreview policy %@", buf, 0x16u);
            }

            v13 = objc_msgSend(*(id *)(v1 + 24), "addPolicy:", v10);
            v16 = nplog_obj(v13, v14, v15);
            v17 = objc_claimAutoreleasedReturnValue(v16);
            v18 = v17;
            if (!v13)
            {
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v27 = (void **)v1;
                _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@ failed to add SafariTechnologyPreview policy", buf, 0xCu);
              }

              v1 = 0;
              goto LABEL_20;
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v27 = (void **)v1;
              v28 = 2048;
              v29 = v13;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@ added SafariTechnologyPreview policy %lu", buf, 0x16u);
            }

            v19 = *(id *)(v1 + 112);
            v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v13));
            objc_msgSend(v19, "addObject:", v20);

            v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          v7 = v4;
          if (v4)
            continue;
          break;
        }
      }
      v1 = 1;
LABEL_20:

    }
    else
    {
      return 1;
    }
  }
  return v1;
}

uint64_t sub_1000926D0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  id v21;
  void *v22;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  id v32;
  _BYTE v33[128];

  v1 = a1;
  if (a1)
  {
    v2 = sub_1000958C8(a1, CFSTR("com.apple.mobilesafari"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = sub_100083190((uint64_t)NSPPrivacyProxyPolicySerialization, *(void **)(v1 + 16), v3);
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    if (v6)
    {
      v9 = v6;
      v24 = v3;
      v10 = *(_QWORD *)v26;
      while (2)
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v26 != v10)
            objc_enumerationMutation(v5);
          v12 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v11);
          v13 = nplog_obj(v6, v7, v8);
          v14 = objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v30 = v1;
            v31 = 2112;
            v32 = v12;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ adding Safari Bundle policy %@", buf, 0x16u);
          }

          v15 = objc_msgSend(*(id *)(v1 + 24), "addPolicy:", v12);
          v18 = nplog_obj(v15, v16, v17);
          v19 = objc_claimAutoreleasedReturnValue(v18);
          v20 = v19;
          if (!v15)
          {
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v30 = v1;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%@ failed to add Safari Bundle policy", buf, 0xCu);
            }

            v1 = 0;
            goto LABEL_18;
          }
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v30 = v1;
            v31 = 2048;
            v32 = v15;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%@ added Safari Bundle policy %lu", buf, 0x16u);
          }

          v21 = *(id *)(v1 + 120);
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v15));
          objc_msgSend(v21, "addObject:", v22);

          v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
        v9 = v6;
        if (v6)
          continue;
        break;
      }
      v1 = 1;
LABEL_18:
      v3 = v24;
    }
    else
    {
      v1 = 1;
    }

  }
  return v1;
}

uint64_t sub_100092974(void **a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  uint64_t v15;
  NSObject *v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id obj;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  void **v35;
  __int16 v36;
  const __CFString *v37;

  if (!a1)
    return 0;
  v2 = sub_100095870(CFSTR("com.apple.mobilemail"));
  if ((v2 & 1) != 0)
  {
    v5 = sub_1000958C8((uint64_t)a1, CFSTR("com.apple.mobilemail"));
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = sub_10008358C((uint64_t)NSPPrivacyProxyPolicySerialization, a1[2], v6);
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(v7);
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v8)
    {
      v11 = v8;
      v12 = *(_QWORD *)v30;
      while (2)
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v30 != v12)
            objc_enumerationMutation(obj);
          v14 = *(const __CFString **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v13);
          v15 = nplog_obj(v8, v9, v10);
          v16 = objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v35 = a1;
            v36 = 2112;
            v37 = v14;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%@ adding Mail App policy %@", buf, 0x16u);
          }

          v17 = (const __CFString *)objc_msgSend(a1[3], "addPolicy:", v14);
          v20 = nplog_obj(v17, v18, v19);
          v21 = objc_claimAutoreleasedReturnValue(v20);
          v22 = v21;
          if (!v17)
          {
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v35 = a1;
              _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%@ failed to add Mail App policy", buf, 0xCu);
            }

            v25 = 0;
            goto LABEL_22;
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v35 = a1;
            v36 = 2048;
            v37 = v17;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%@ added Mail App policy %lu", buf, 0x16u);
          }

          v23 = a1[16];
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v17));
          objc_msgSend(v23, "addObject:", v24);

          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        v11 = v8;
        if (v8)
          continue;
        break;
      }
      v25 = 1;
    }
    else
    {
      v25 = 1;
    }
LABEL_22:

  }
  else
  {
    v26 = nplog_obj(v2, v3, v4);
    v6 = objc_claimAutoreleasedReturnValue(v26);
    v25 = 1;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v35 = a1;
      v36 = 2112;
      v37 = CFSTR("com.apple.mobilemail");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@ %@ app is not installed", buf, 0x16u);
    }
  }

  return v25;
}

uint64_t sub_100092C9C(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint8_t buf[4];
  void **v33;
  __int16 v34;
  id v35;
  _BYTE v36[128];

  v2 = sub_100083D00((uint64_t)NSPPrivacyProxyPolicySerialization, a1[2]);
  if ((v2 & 1) != 0)
  {
    v5 = +[NSPAppRule copyUUIDsForSigningIdentifier:executablePath:](NSPAppRule, "copyUUIDsForSigningIdentifier:executablePath:", CFSTR("com.apple.networkQuality"), 0);
    v6 = sub_100083B0C((uint64_t)NSPPrivacyProxyPolicySerialization, v5);
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
    if (v8)
    {
      v11 = v8;
      v12 = *(_QWORD *)v29;
      while (2)
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v29 != v12)
            objc_enumerationMutation(v7);
          v14 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v13);
          v15 = nplog_obj(v8, v9, v10);
          v16 = objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v33 = a1;
            v34 = 2112;
            v35 = v14;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%@ adding networkQuality policy %@", buf, 0x16u);
          }

          v17 = objc_msgSend(a1[3], "addPolicy:", v14);
          v20 = nplog_obj(v17, v18, v19);
          v21 = objc_claimAutoreleasedReturnValue(v20);
          v22 = v21;
          if (!v17)
          {
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v33 = a1;
              _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%@ failed to add networkQuality policy", buf, 0xCu);
            }

            v25 = 0;
            goto LABEL_21;
          }
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v33 = a1;
            v34 = 2048;
            v35 = v17;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%@ added networkQuality policy %lu", buf, 0x16u);
          }

          v23 = a1[25];
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v17));
          objc_msgSend(v23, "addObject:", v24);

          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
        v11 = v8;
        if (v8)
          continue;
        break;
      }
      v25 = 1;
    }
    else
    {
      v25 = 1;
    }
LABEL_21:

  }
  else
  {
    v26 = nplog_obj(v2, v3, v4);
    v5 = objc_claimAutoreleasedReturnValue(v26);
    v25 = 1;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v33 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@ network tools policy condition is not set", buf, 0xCu);
    }
  }

  return v25;
}

void sub_100093008(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100093544(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100093868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100093894(void *a1)
{
  id *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _BOOL4 v11;
  int v12;
  int v13;
  id v14;
  void *v15;
  _BOOL4 v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  id *v50;
  __int16 v51;
  id v52;
  _BYTE v53[128];
  _BYTE v54[128];

  if (a1)
  {
    v1 = a1;
    objc_sync_enter(v1);
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v2 = v1[13];
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v46 != v4)
            objc_enumerationMutation(v2);
          v6 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i);
          v7 = v1[3];
          objc_msgSend(v7, "removePolicyWithID:", objc_msgSend(v6, "unsignedIntegerValue"));

        }
        v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
      }
      while (v3);
    }

    v8 = v1[13];
    objc_msgSend(v8, "removeAllObjects");

    if (!*((_BYTE *)v1 + 9) && !*((_BYTE *)v1 + 10))
    {
      v9 = v1[11];
      if (objc_msgSend(v9, "count"))
      {

      }
      else
      {
        v10 = v1[12];
        v11 = objc_msgSend(v10, "length") == 0;

        if (v11)
        {
          v20 = v1[3];
          objc_msgSend(v20, "apply");
LABEL_30:

          objc_sync_exit(v1);
          return;
        }
      }
    }
    v12 = *((unsigned __int8 *)v1 + 9);
    v13 = *((unsigned __int8 *)v1 + 10);
    v14 = v1[11];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "allObjects"));
    v16 = v12 != 0;
    v17 = v1[12];
    v18 = sub_100080BCC((uint64_t)NSPPrivacyProxyPolicySerialization, v16, v13 != 0, v15, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v20 = v19;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
    v24 = v21;
    if (v21)
    {
      v25 = *(_QWORD *)v42;
      do
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v42 != v25)
            objc_enumerationMutation(v20);
          v27 = *(void **)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v26);
          v28 = nplog_obj(v21, v22, v23);
          v29 = objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v50 = v1;
            v51 = 2112;
            v52 = v27;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%@ adding interface exception policy %@", buf, 0x16u);
          }

          v30 = v1[3];
          v31 = objc_msgSend(v30, "addPolicy:", v27);

          if (v31)
          {
            v35 = nplog_obj(v32, v33, v34);
            v36 = objc_claimAutoreleasedReturnValue(v35);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v50 = v1;
              v51 = 2048;
              v52 = v31;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "%@ added interface exception policy %lu", buf, 0x16u);
            }

            v37 = v1[13];
            v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v31));
            -[NSObject addObject:](v37, "addObject:", v38);

          }
          else
          {
            v39 = nplog_obj(v32, v33, v34);
            v37 = objc_claimAutoreleasedReturnValue(v39);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v50 = v1;
              _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "%@ failed to add interface exception policy", buf, 0xCu);
            }
          }

          v26 = (char *)v26 + 1;
        }
        while (v24 != v26);
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v41, v53, 16);
        v24 = v21;
      }
      while (v21);
    }

    v40 = v1[3];
    objc_msgSend(v40, "apply");

    goto LABEL_30;
  }
}

void sub_100093CC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100093D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100093DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_100093F38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000940DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000941D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009460C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10009492C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10009495C(id *result)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  if (result)
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(result[23], "allValues", 0));
    v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v2)
    {
      v3 = v2;
      v4 = 0;
      v5 = *(_QWORD *)v8;
      do
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(_QWORD *)v8 != v5)
            objc_enumerationMutation(v1);
          v4 |= (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)i), "unsignedLongLongValue");
        }
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      }
      while (v3);
    }
    else
    {
      v4 = 0;
    }

    return (id *)+[NPUtilities postNotification:value:](NPUtilities, "postNotification:value:", CFSTR("networkserviceproxy-reverse-proxy"), v4);
  }
  return result;
}

void sub_100094F6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100095554(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100095844(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100095870(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v3 = objc_msgSend(v2, "applicationIsInstalled:", v1);

  return v3;
}

id sub_1000958C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  id v19;
  __int16 v20;
  void *v21;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v3));
  v15 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "machOUUIDsForBundleIdentifiers:error:", v5, &v15));
  v7 = v15;

  v8 = 0;
  if (objc_msgSend(v6, "count"))
    v9 = v7 == 0;
  else
    v9 = 0;
  if (v9)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v3));
    v12 = nplog_obj(v8, v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      v17 = a1;
      v18 = 2112;
      v19 = v3;
      v20 = 2112;
      v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@ machOUUIDs For BundleIdentifier %@: %@", buf, 0x20u);
    }

  }
  return v8;
}

void sub_100096190(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000964B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100097828(void *a1, id a2)
{
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  char *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;

  if (a1)
  {
    v25 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastObject"));

    if (objc_msgSend(v5, "serviceStatus") != a2)
    {
      if (v5)
        objc_msgSend(v5, "setServiceStatusEndTime:", v25);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
      v7 = (char *)objc_msgSend(v6, "count");

      for (; v7; --v7)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstObject"));

        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "serviceStatusEndTime"));
        if (v10)
        {
          v11 = (void *)v10;
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "serviceStatusEndTime"));
          objc_msgSend(v25, "timeIntervalSinceDate:", v12);
          v14 = v13;

          if (v14 >= 604800.0)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
            objc_msgSend(v15, "removeObject:", v9);

          }
        }

      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
      v17 = objc_msgSend(v16, "count");

      if ((unint64_t)v17 > 0xA)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
        v19 = (char *)objc_msgSend(v18, "count") - 10;

        for (; v19; --v19)
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "firstObject"));

          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
          objc_msgSend(v22, "removeObject:", v21);

        }
      }
      v23 = objc_alloc_init((Class)PrivacyProxyServiceStatusTime);
      objc_msgSend(v23, "setServiceStatus:", a2);
      objc_msgSend(v23, "setServiceStatusStartTime:", v25);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatusTimeline"));
      objc_msgSend(v24, "addObject:", v23);

      sub_100097D10(a1);
    }

  }
}

void sub_100097D10(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  uint8_t v15[16];
  uint8_t buf[2];
  __int16 v17;

  v4 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  if (!v4)
  {
    v12 = nplog_obj(0, v2, v3);
    v11 = objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    v17 = 0;
    v13 = "NSKeyedArchiver initialize failed";
    v14 = (uint8_t *)&v17;
LABEL_10:
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v13, v14, 2u);
    goto LABEL_8;
  }
  objc_msgSend(a1, "encodeWithCoder:", v4);
  _CFPreferencesSetFileProtectionClass(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost, 0, 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "encodedData"));
  CFPreferencesSetAppValue(CFSTR("NSPServiceStatusManagerInfo"), v5, kCFPreferencesCurrentApplication);

  v6 = CFPreferencesAppSynchronize(kCFPreferencesCurrentApplication);
  LODWORD(v5) = v6;
  v9 = nplog_obj(v6, v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (!(_DWORD)v5)
  {
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_WORD *)buf = 0;
    v13 = "Failed to write nsp service status manager info to preference file";
    v14 = buf;
    goto LABEL_10;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Saved status manager info to preference file", v15, 2u);
  }
LABEL_8:

}

void sub_100098654(_QWORD *a1, id a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[4];
  id v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v14 = v11;
  if (a1)
  {
    v15 = nplog_obj(v11, v12, v13);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[PrivacyProxyServiceStatus serviceStatusString:](PrivacyProxyServiceStatus, "serviceStatusString:", a2));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatus"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[PrivacyProxyServiceStatus serviceStatusString:](PrivacyProxyServiceStatus, "serviceStatusString:", objc_msgSend(v18, "serviceStatus")));
      *(_DWORD *)buf = 138412546;
      v32 = v17;
      v33 = 2112;
      v34 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Setting service status %@, previous service status %@", buf, 0x16u);

    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatus"));
    if (objc_msgSend(v20, "serviceStatus") == a2)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatus"));
      v22 = (unint64_t)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "details"));
      v23 = v14;
      v24 = (void *)v23;
      if (!(v23 | v22) || v23 && v22 && objc_msgSend((id)v22, "isEqual:", v23))
      {

LABEL_12:
        goto LABEL_13;
      }

    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatus"));
    objc_msgSend(v25, "setServiceStatus:", a2);

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatus"));
    objc_msgSend(v26, "setDetails:", v14);

    sub_100097828(a1, a2);
    ++a1[6];
    +[NPUtilities postNotification:value:](NPUtilities, "postNotification:value:", CFSTR("com.apple.networkserviceproxy.privacy-proxy-service-status-changed"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=APPLE_ACCOUNT&path=ICLOUD_SERVICE/INTERNET_PRIVACY")));
    v27 = NPGetInternalQueue(v20);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100098920;
    v29[3] = &unk_1000F6B50;
    v30 = v9;
    sub_1000A51D0((uint64_t)NSPUserNotification, v30, v10, v20, (uint64_t)v28, v29);

    v21 = v30;
    goto LABEL_12;
  }
LABEL_13:

}

void sub_100098920(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  id v14;

  v3 = a2;
  v6 = nplog_obj(v3, v4, v5);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (v3)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v11 = 138412546;
      v12 = v9;
      v13 = 2112;
      v14 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to post notification \"%@\": %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 138412290;
    v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Posted notification \"%@\"", (uint8_t *)&v11, 0xCu);
  }

}

uint64_t sub_100099544(_QWORD *a1, id a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  char v12;
  void *v13;
  uint64_t v14;
  void *i;
  id v16;
  id v17;
  BOOL v19;
  void *v20;
  unsigned __int8 v21;
  _QWORD *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  id v29;
  SEL v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  uint64_t v40;
  id v41;
  void *v42;
  double v43;
  double v44;
  id v45;
  SEL v46;
  SEL v47;
  const char *v48;
  char *v49;
  SEL v50;
  id v51;
  id v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  unsigned int v60;
  uint64_t v61;
  id v62;
  PrivacyProxyNetworkStatusTime *v63;
  SEL v64;
  uint64_t v65;
  uint64_t v67;
  void *v68;
  char v69;
  _QWORD *self;
  char v71;
  id v72;
  id v73;
  id v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned __int8 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[128];
  uint8_t v89[128];
  uint8_t buf[4];
  const char *v91;

  v74 = a4;
  if (!a1)
  {
    v65 = 0;
    goto LABEL_75;
  }
  v7 = objc_alloc_init((Class)NSMutableArray);
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  self = a1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serviceStatus"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "networkStatuses"));

  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
  v73 = v7;
  if (!v10)
  {
    v12 = 0;
    v13 = 0;
    v71 = 1;
    goto LABEL_26;
  }
  v11 = v10;
  v12 = 0;
  v13 = 0;
  v14 = *(_QWORD *)v76;
  v71 = 1;
  do
  {
    for (i = 0; i != v11; i = (char *)i + 1)
    {
      if (*(_QWORD *)v76 != v14)
        objc_enumerationMutation(v9);
      v16 = *(id *)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(v16, "networkType") == (_DWORD)a3)
      {
        if ((v12 & 1) != 0)
        {
          v12 = 1;
          continue;
        }
        v17 = objc_msgSend(v16, "networkStatus");
        v19 = a2 != (id)2 || v17 != 0;
        if ((v17 == a2 || !v19)
          && (v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "networkName")),
              v21 = objc_msgSend(v20, "isEqualToString:", v74),
              v20,
              v7 = v73,
              (v21 & 1) != 0))
        {
          v12 = 0;
          v71 = 0;
        }
        else
        {
          v16 = objc_alloc_init((Class)PrivacyProxyNetworkStatus);

          objc_msgSend(v16, "setNetworkStatus:", a2);
          objc_msgSend(v16, "setNetworkType:", a3);
          objc_msgSend(v16, "setNetworkName:", v74);
          v12 = 1;
          v13 = v16;
        }
      }
      objc_msgSend(v7, "addObject:", v16);
    }
    v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v75, v88, 16);
  }
  while (v11);
LABEL_26:

  if ((v12 & 1) != 0)
  {
    v22 = self;
  }
  else
  {
    v22 = self;
    if ((v71 & 1) != 0)
    {
      v23 = objc_alloc_init((Class)PrivacyProxyNetworkStatus);

      objc_msgSend(v23, "setNetworkStatus:", a2);
      objc_msgSend(v23, "setNetworkType:", a3);
      objc_msgSend(v23, "setNetworkName:", v74);
      objc_msgSend(v7, "addObject:", v23);
      v12 = 1;
      v13 = v23;
    }
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "serviceStatus"));
  objc_msgSend(v24, "setNetworkStatuses:", v7);

  if ((v12 & 1) == 0)
    goto LABEL_74;
  v27 = v13;
  if (!v27)
  {
    v67 = nplog_obj(0, v25, v26);
    v28 = objc_claimAutoreleasedReturnValue(v67);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v91 = "-[NSPServiceStatusManager setNetworkStatusOnTimeline:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "%s called with null networkStatus", buf, 0xCu);
    }
    goto LABEL_73;
  }
  v69 = v12;
  v68 = v13;
  v28 = objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  v29 = objc_alloc_init((Class)NSMutableArray);
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v31 = objc_getProperty(v22, v30, 64, 1);
  v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v84, buf, 16);
  if (!v32)
    goto LABEL_53;
  v33 = v32;
  v34 = *(_QWORD *)v85;
  while (2)
  {
    v35 = 0;
    while (2)
    {
      if (*(_QWORD *)v85 != v34)
        objc_enumerationMutation(v31);
      v36 = *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * v35);
      if (v36)
        v37 = *(void **)(v36 + 8);
      else
        v37 = 0;
      v38 = v37;
      v39 = objc_msgSend(v38, "networkType");
      if (v39 != objc_msgSend(v27, "networkType"))
      {

        goto LABEL_44;
      }
      if (!v36)
      {

LABEL_42:
        sub_10000D344(v36, v28);
LABEL_44:
        if (v36)
          goto LABEL_45;
        goto LABEL_48;
      }
      v40 = *(_QWORD *)(v36 + 24);

      if (!v40)
        goto LABEL_42;
LABEL_45:
      v41 = *(id *)(v36 + 24);
      if (v41)
      {
        v42 = v41;
        -[NSObject timeIntervalSinceDate:](v28, "timeIntervalSinceDate:", *(_QWORD *)(v36 + 24));
        v44 = v43;

        if (v44 >= 172800.0)
          objc_msgSend(v29, "addObject:", v36);
      }
LABEL_48:
      if (v33 != (id)++v35)
        continue;
      break;
    }
    v45 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v84, buf, 16);
    v33 = v45;
    if (v45)
      continue;
    break;
  }
LABEL_53:

  v22 = self;
  objc_msgSend(objc_getProperty(self, v46, 64, 1), "removeObjectsInArray:", v29);
  v72 = objc_alloc_init((Class)NSMutableArray);

  if ((unint64_t)objc_msgSend(objc_getProperty(self, v47, 64, 1), "count") >= 0xB)
  {
    v49 = (char *)objc_msgSend(objc_getProperty(self, v48, 64, 1), "count");
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v51 = objc_getProperty(self, v50, 64, 1);
    v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
    if (v52)
    {
      v53 = v52;
      v54 = v49 - 10;
      v55 = *(_QWORD *)v81;
LABEL_56:
      v56 = 0;
      while (1)
      {
        if (*(_QWORD *)v81 != v55)
          objc_enumerationMutation(v51);
        if (!v54)
          break;
        v57 = *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * v56);
        if (v57)
          v58 = *(void **)(v57 + 8);
        else
          v58 = 0;
        v59 = v58;
        v60 = objc_msgSend(v59, "networkType");
        if (v60 == objc_msgSend(v27, "networkType") && v57)
        {
          v61 = *(_QWORD *)(v57 + 24);

          if (v61)
          {
            objc_msgSend(v72, "addObject:", v57);
            --v54;
          }
        }
        else
        {

        }
        if (v53 == (id)++v56)
        {
          v62 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v80, v89, 16);
          v53 = v62;
          if (v62)
            goto LABEL_56;
          break;
        }
      }
    }

    v22 = self;
  }
  objc_msgSend(objc_getProperty(v22, v48, 64, 1), "removeObjectsInArray:", v72);
  v63 = objc_alloc_init(PrivacyProxyNetworkStatusTime);
  sub_100010990((uint64_t)v63, v27);
  sub_10003E048((uint64_t)v63, v28);
  objc_msgSend(objc_getProperty(v22, v64, 64, 1), "addObject:", v63);
  sub_100097D10(v22);

  v7 = v73;
  v13 = v68;
  v12 = v69;
LABEL_73:

  ++v22[6];
  +[NPUtilities postNotification:value:](NPUtilities, "postNotification:value:", CFSTR("com.apple.networkserviceproxy.privacy-proxy-service-status-changed"));
LABEL_74:
  v79 = (v22[10] == 2) & v12;

  v65 = v79;
LABEL_75:

  return v65;
}

void sub_10009A174(uint64_t a1, int a2)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11;
  id WeakRetained;
  id v13;
  uint8_t buf[4];
  void *v15;

  if (a2)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=WIFI")));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
    v4 = objc_msgSend(v3, "openSensitiveURL:withOptions:", v2, 0);

    if ((v4 & 1) == 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to open %@", buf, 0xCu);
      }

    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
      WeakRetained = objc_loadWeakRetained((id *)(v11 + 32));
    else
      WeakRetained = 0;
    v13 = WeakRetained;
    objc_msgSend(WeakRetained, "disableWiFiNetwork:", *(_QWORD *)(a1 + 40));

  }
}

void sub_10009A65C(uint64_t a1, int a2)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11;
  id WeakRetained;
  id v13;
  uint8_t buf[4];
  void *v15;

  if (a2)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=MOBILE_DATA_SETTINGS_ID&path=CELLULAR_DATA_OPTIONS")));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
    v4 = objc_msgSend(v3, "openSensitiveURL:withOptions:", v2, 0);

    if ((v4 & 1) == 0)
    {
      v8 = nplog_obj(v5, v6, v7);
      v9 = objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v15 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to open %@", buf, 0xCu);
      }

    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
      WeakRetained = objc_loadWeakRetained((id *)(v11 + 32));
    else
      WeakRetained = 0;
    v13 = WeakRetained;
    objc_msgSend(WeakRetained, "disableCellularNetwork:", *(_QWORD *)(a1 + 40));

  }
}

void sub_10009AC00(uint64_t a1, char a2)
{
  uint64_t v3;
  id WeakRetained;
  id v5;

  if ((a2 & 1) == 0)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      WeakRetained = objc_loadWeakRetained((id *)(v3 + 32));
    else
      WeakRetained = 0;
    v5 = WeakRetained;
    objc_msgSend(WeakRetained, "disableInterface:displayName:type:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56));

  }
}

void sub_10009AC58(void *a1, void *a2, void *a3)
{
  const char *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  void *i;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v6 = a3;
  if (a1)
  {
    objc_setProperty_atomic(a1, v5, a2, 24);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "appStatuses"));
    objc_msgSend(v7, "sortUsingComparator:", &stru_1000F6BB8);

    v8 = objc_alloc_init((Class)NSMutableArray);
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v22 = a1;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "appStatuses"));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v10)
    {
      v11 = v10;
      v12 = 0;
      v13 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v13)
            objc_enumerationMutation(v9);
          v15 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v15, "appStatus") == (id)1)
          {
            if (v12 <= 0x14
              && (v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "activeDate"))) != 0
              && (v17 = (void *)v16,
                  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "activeDate")),
                  objc_msgSend(v6, "timeIntervalSinceDate:", v18),
                  v20 = v19,
                  v18,
                  v17,
                  v20 < 86400.0))
            {
              ++v12;
            }
            else
            {
              objc_msgSend(v8, "addObject:", v15);
            }
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v11);
    }

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "appStatuses"));
    objc_msgSend(v21, "removeObjectsInArray:", v8);

    sub_100097D10(v22);
  }

}

int64_t sub_10009AE5C(id a1, id a2, id a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  int64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v4 = a2;
  v5 = a3;
  v6 = v4;
  v7 = v5;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "activeDate"));
  if (v8)
  {

  }
  else
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activeDate"));

    if (!v9)
      goto LABEL_9;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "activeDate"));

  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activeDate"));

    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "activeDate"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "activeDate"));
      v9 = (int64_t)objc_msgSend(v12, "compare:", v13);

    }
    else
    {
      v9 = -1;
    }
  }
  else
  {
    v9 = 1;
  }
LABEL_9:

  return v9;
}

void sub_10009BBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;

  v3 = a2;
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = "active";
    if (v3)
      v7 = "idle";
    v23 = 136315138;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "network context is %s", (uint8_t *)&v23, 0xCu);
  }

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = v3;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(void **)(v8 + 40);
  if ((v3 & 1) != 0)
  {
    if (!v9)
      return;
    *(_QWORD *)(v8 + 40) = 0;

    v13 = nplog_obj(v10, v11, v12);
    v14 = objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      goto LABEL_13;
    LOWORD(v23) = 0;
    v15 = "shared network transaction released";
    goto LABEL_12;
  }
  if (v9)
    return;
  v16 = os_transaction_create("com.apple.networkserviceproxy.shared-network-transaction");
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

  v22 = nplog_obj(v19, v20, v21);
  v14 = objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    LOWORD(v23) = 0;
    v15 = "shared network transaction acquired";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v23, 2u);
  }
LABEL_13:

}

void sub_10009BD94(uint64_t a1, int a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    *(_BYTE *)(a1 + 8) = 0;
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      NEFlowDirectorDestroy(v4, &stru_1000F6BF0);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (a2)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v5, "removeFileHandleMatchingPredicate:", &stru_1000F6C10);

      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      objc_msgSend(v6, "commit");

    }
    v7 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
}

void sub_10009BE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  SEL v37;
  id Property;
  void *v39;
  unsigned int v40;
  void *v41;
  unsigned int v42;
  _QWORD v43[5];
  uint8_t v44[4];
  uint64_t v45;
  __int128 buf;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  id v50;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    {
      v16 = nplog_obj(a1, a2, a3);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = a1;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%@ Bridged flow divert is already started, ignoring start request", (uint8_t *)&buf, 0xCu);
      }

    }
    else
    {
      sub_10009BD94(a1, 0);
      v7 = nplog_obj(v4, v5, v6);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@: Bridged flow divert starting", (uint8_t *)&buf, 0xCu);
      }

      *(_BYTE *)(a1 + 8) = 1;
      v9 = *(void **)(a1 + 16);
      if (v9)
        goto LABEL_19;
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v47 = 0x3032000000;
      v48 = sub_10000316C;
      v49 = sub_10009C388;
      v50 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_10009C390;
      v43[3] = &unk_1000F6C38;
      v43[4] = &buf;
      objc_msgSend(v10, "iterateFileHandlesWithBlock:", v43);

      if (*(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
      {
        v14 = nplog_obj(v11, v12, v13);
        v15 = objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Re-using existing flow divert control socket", v44, 2u);
        }
      }
      else
      {
        v18 = nplog_obj(v11, v12, v13);
        v19 = objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v44 = 138412290;
          v45 = a1;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@ Creating a new flow divert control socket", v44, 0xCu);
        }

        v20 = objc_msgSend(objc_alloc((Class)NEFlowDivertFileHandle), "initFlowDivertControlSocketDisableAppMap:", 1);
        v21 = *(void **)(*((_QWORD *)&buf + 1) + 40);
        *(_QWORD *)(*((_QWORD *)&buf + 1) + 40) = v20;

        if (*(_QWORD *)(*((_QWORD *)&buf + 1) + 40))
        {
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
          objc_msgSend(v25, "setFileHandle:matchingPredicate:", *(_QWORD *)(*((_QWORD *)&buf + 1) + 40), &stru_1000F6C58);

          v15 = objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](NEFileHandleMaintainer, "sharedMaintainer"));
          -[NSObject commit](v15, "commit");
        }
        else
        {
          v26 = nplog_obj(v22, v23, v24);
          v15 = objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v44 = 138412290;
            v45 = a1;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@: Failed to create a flow divert control socket", v44, 0xCu);
          }
        }
      }

      v27 = *(id *)(*((_QWORD *)&buf + 1) + 40);
      _Block_object_dispose(&buf, 8);

      v28 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v27;

      v9 = *(void **)(a1 + 16);
      if (v9)
      {
LABEL_19:
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "handle"));
        v30 = dup((int)objc_msgSend(v29, "fileDescriptor"));

        v34 = nplog_obj(v31, v32, v33);
        v35 = objc_claimAutoreleasedReturnValue(v34);
        v36 = v35;
        if ((int)v30 < 1)
        {
          if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
          {
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "handle"));
            v42 = objc_msgSend(v41, "fileDescriptor");
            LODWORD(buf) = 67109376;
            DWORD1(buf) = v42;
            WORD4(buf) = 1024;
            *(_DWORD *)((char *)&buf + 10) = v30;
            _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Unable to dup flow divert handle %d (%d)", (uint8_t *)&buf, 0xEu);

          }
        }
        else
        {
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "handle"));
            v40 = objc_msgSend(v39, "fileDescriptor");
            LODWORD(buf) = 67109376;
            DWORD1(buf) = v30;
            WORD4(buf) = 1024;
            *(_DWORD *)((char *)&buf + 10) = v40;
            _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Created fd %d from %d for flow divert", (uint8_t *)&buf, 0xEu);

          }
          Property = objc_getProperty((id)a1, v37, 32, 1);
          *(_QWORD *)(a1 + 24) = NEFlowDirectorCreateBridge(v30, Property);
          NEFlowDirectorAllowProcessDelegation();
          NEFlowDirectorStart(*(_QWORD *)(a1 + 24));
        }
      }
    }
  }
}

void sub_10009C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009C2DC(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  v3 = nplog_obj(a1, v1, v2);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Bridged flow director destroyed", v5, 2u);
  }

}

BOOL sub_10009C340(id a1, NEFileHandle *a2)
{
  NEFileHandle *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  v3 = objc_opt_class(NEFlowDivertFileHandle);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

void sub_10009C388(uint64_t a1)
{

}

BOOL sub_10009C390(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  char isKindOfClass;

  v4 = a2;
  v5 = objc_opt_class(NEFlowDivertFileHandle);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);
  if ((isKindOfClass & 1) != 0)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

  return (isKindOfClass & 1) == 0;
}

BOOL sub_10009C400(id a1, NEFileHandle *a2)
{
  NEFileHandle *v2;
  uint64_t v3;
  char isKindOfClass;

  v2 = a2;
  v3 = objc_opt_class(NEFlowDivertFileHandle);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

uint64_t start()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  char *errorbuf;
  uint8_t buf[4];
  char *v16;

  errorbuf = 0;
  v0 = sandbox_init("com.apple.networkserviceproxy", 2uLL, &errorbuf);
  if ((v0 & 0x80000000) != 0)
  {
    v3 = nplog_obj(v0, v1, v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v16 = errorbuf;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "sandbox_init failed: %s", buf, 0xCu);
    }

    sandbox_free_error(errorbuf);
  }
  v5 = objc_autoreleasePoolPush();
  v8 = nplog_obj(v5, v6, v7);
  v9 = objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Starting NSPServer", buf, 2u);
  }

  v10 = sub_1000549E8();
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  sub_100060A34((uint64_t)v11);

  objc_autoreleasePoolPop(v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  objc_msgSend(v12, "run");

  return 0;
}

void sub_10009C818(id a1)
{
  NSPPrivacyTokenManager *v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_alloc_init(NSPPrivacyTokenManager);
  v2 = (void *)qword_100112F10;
  qword_100112F10 = (uint64_t)v1;

  v3 = +[NPUtilities copyTrueClientIPAddressFromPreferences](NPUtilities, "copyTrueClientIPAddressFromPreferences");
  if (qword_100112F10)
  {
    v4 = v3;
    objc_storeStrong((id *)(qword_100112F10 + 88), v3);
    v3 = v4;
  }

}

NSObject *sub_10009CBB8(uint64_t a1, void *a2, void *a3, id a4)
{
  void *v4;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint8_t buf[4];
  const char *v30;

  v8 = a2;
  v9 = a3;
  v10 = v9;
  if (!a1)
  {
    v22 = 0;
    goto LABEL_21;
  }
  if (v9)
  {
    v11 = objc_msgSend(v9, "count");
    if (v11 != a4)
    {
      v27 = nplog_obj(v11, v12, v13);
      v14 = objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v30 = "-[NSPPrivacyTokenManager generateTokensUsingTokenBlinder:contentArray:tokenCount:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%s called with null (contentArray.count == tokenCount)", buf, 0xCu);
      }
LABEL_19:
      v22 = 0;
      goto LABEL_20;
    }
  }
  v14 = objc_alloc_init((Class)NSMutableArray);
  if (a4)
  {
    v15 = 0;
    while (1)
    {
      if (v10)
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v15));
        v16 = v4;
      }
      else
      {
        v16 = 0;
      }
      v28 = 0;
      v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tokenWaitingActivationWithContent:error:", v16, &v28));
      v18 = (char *)v28;
      v21 = v18;
      if (v10)

      if (v21)
        break;
      if (!v17)
      {
        v26 = nplog_obj(v18, v19, v20);
        v17 = objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136315138;
          v30 = "-[NSPPrivacyTokenManager generateTokensUsingTokenBlinder:contentArray:tokenCount:]";
          _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "%s called with null waitingActivation", buf, 0xCu);
        }
        goto LABEL_18;
      }
      -[NSObject addObject:](v14, "addObject:", v17);

      if (a4 == (id)++v15)
        goto LABEL_14;
    }
    v23 = nplog_obj(v18, v19, v20);
    v24 = objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v30 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "tokenWaitingActivationWithContent failed with error %@", buf, 0xCu);
    }

LABEL_18:
    goto LABEL_19;
  }
LABEL_14:
  v14 = v14;
  v22 = v14;
LABEL_20:

LABEL_21:
  return v22;
}

id sub_10009CE14(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSPPrivateAccessTokenResponse *v36;
  void *v37;
  void *v38;
  const char *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  const char *v46;
  id v47;
  id v48;
  uint64_t v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  __int128 v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  char v60;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  id v64;

  v9 = a1;
  v10 = a2;
  v57 = a3;
  v11 = a4;
  v12 = a5;
  v13 = objc_alloc_init((Class)NSMutableArray);
  v60 = 1;
  if (!v10)
    goto LABEL_4;
  v14 = objc_msgSend(v11, "count");
  v15 = objc_msgSend(v9, "count");
  if (v14 != v15)
  {
    v50 = nplog_obj(v15, v16, v17);
    v51 = objc_claimAutoreleasedReturnValue(v50);
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
    {
LABEL_29:

      v48 = 0;
      goto LABEL_25;
    }
    *(_DWORD *)buf = 136315138;
    v62 = "-[NSPPrivacyTokenManager activateTokens:challenge:tokenIssuancePublicKey:clientNonceArray:unactivatedListFromServer:]";
    v52 = "%s called with null (clientNonceArray.count == tokenWaitingActivationList.count)";
LABEL_31:
    _os_log_fault_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, v52, buf, 0xCu);
    goto LABEL_29;
  }
  v18 = objc_msgSend(v11, "count");
  v19 = objc_msgSend(v12, "count");
  if (v18 < v19)
  {
    v53 = nplog_obj(v19, v20, v21);
    v51 = objc_claimAutoreleasedReturnValue(v53);
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_FAULT))
      goto LABEL_29;
    *(_DWORD *)buf = 136315138;
    v62 = "-[NSPPrivacyTokenManager activateTokens:challenge:tokenIssuancePublicKey:clientNonceArray:unactivatedListFromServer:]";
    v52 = "%s called with null (clientNonceArray.count >= unactivatedListFromServer.count)";
    goto LABEL_31;
  }
LABEL_4:
  v58 = v13;
  if (!objc_msgSend(v12, "count"))
    goto LABEL_24;
  v23 = 0;
  *(_QWORD *)&v22 = 138412290;
  v54 = v22;
  v55 = v10;
  v56 = v11;
  while (1)
  {
    v24 = objc_msgSend(v9, "count", v54);
    if (v23 >= (unint64_t)v24)
      break;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndex:", v23));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", v23));
    v59 = 0;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "activateTokenWithServerResponse:error:", v28, &v59));
    v30 = (char *)v59;

    if (v30)
    {
      v34 = nplog_obj(v31, v32, v33);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v54;
        v62 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "activateTokenWithServerResponse failed with error %@", buf, 0xCu);
      }
    }
    else
    {
      if (!v29)
        goto LABEL_11;
      if (v10)
      {
        v36 = [NSPPrivateAccessTokenResponse alloc];
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", v23));
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "signature"));
        v35 = sub_1000A9D0C(&v36->super, v10, v37, v57, v38);

        if (v35)
        {
          v40 = objc_getProperty(v35, v39, 8, 1);
          if (v40)
            objc_msgSend(v58, "addObject:", v40);
        }
        else
        {
          v40 = 0;
        }
        v11 = v56;

        v10 = v55;
      }
      else
      {
        v35 = objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
        -[NSObject appendBytes:length:](v35, "appendBytes:length:", &v60, 1);
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "keyId"));
        -[NSObject appendData:](v35, "appendData:", v41);

        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "tokenContent"));
        -[NSObject appendData:](v35, "appendData:", v42);

        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "signature"));
        -[NSObject appendData:](v35, "appendData:", v43);

        objc_msgSend(v58, "addObject:", v35);
      }
    }

LABEL_11:
    if (++v23 >= (unint64_t)objc_msgSend(v12, "count"))
      goto LABEL_24;
  }
  v44 = nplog_obj(v24, v25, v26);
  v45 = objc_claimAutoreleasedReturnValue(v44);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
  {
    v46 = (const char *)objc_msgSend(v12, "count");
    v47 = objc_msgSend(v9, "count");
    *(_DWORD *)buf = 134218240;
    v62 = v46;
    v63 = 2048;
    v64 = v47;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "More unactivated tokens than waiting tokens (%lu != %lu)", buf, 0x16u);
  }

LABEL_24:
  v13 = v58;
  v48 = v58;
LABEL_25:

  return v48;
}

id sub_10009D288(uint64_t a1, void *a2, void *a3, char a4, char a5, int a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  char v26;
  int has_internal_diagnostics;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const __CFString *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v43;
  uint8_t buf[16];

  v11 = a2;
  if (a1)
  {
    v12 = a3;
    v13 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", v11);
    v14 = v13;
    if (a6)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "host"));
      v16 = objc_msgSend(v15, "isEqualToString:", CFSTR("mask-api.icloud.com"));

      if (v16)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "absoluteString"));
        v18 = objc_msgSend(v17, "mutableCopy");

        objc_msgSend(v18, "replaceOccurrencesOfString:withString:options:range:", CFSTR("mask-api.icloud.com/"), CFSTR("gateway.icloud.com/mask-api/"), 0, 0, objc_msgSend(v11, "length"));
        v19 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v18));

        v23 = nplog_obj(v20, v21, v22);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Fetching tokens from backup location", buf, 2u);
        }

        v14 = (void *)v19;
      }
    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v14));
    objc_msgSend(v25, "setHTTPMethod:", CFSTR("POST"));
    objc_msgSend(v25, "setBoundInterfaceIdentifier:", v12);

    if ((a5 & 1) == 0)
    {
      v43 = a1;
      v26 = a4;
      has_internal_diagnostics = os_variant_has_internal_diagnostics("com.apple.networkserviceproxy");
      v28 = copyProductTypeString();
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      v30 = copyOSNameString();
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      v32 = copyOSVersionString();
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      v34 = copyOSBuildString();
      v35 = objc_claimAutoreleasedReturnValue(v34);
      v36 = (void *)v35;
      if (has_internal_diagnostics)
        v37 = CFSTR("<%@> <%@;%@;%@;internal>");
      else
        v37 = CFSTR("<%@> <%@;%@;%@>");
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v37, v29, v31, v33, v35));

      if (v38)
        objc_msgSend(v25, "setValue:forHTTPHeaderField:", v38, CFSTR("X-Mask-Client-Info"));
      if ((v26 & 1) == 0)
      {
        v39 = *(_QWORD *)(v43 + 88);
        if (v39)
          objc_msgSend(v25, "setValue:forHTTPHeaderField:", v39, CFSTR("True-Client-Ip"));
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSPPrivacyProxyLocationMonitor sharedMonitor](NSPPrivacyProxyLocationMonitor, "sharedMonitor"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "currentCountryPlusTimezone"));

        if (v41)
          objc_msgSend(v25, "setValue:forHTTPHeaderField:", v41, CFSTR("Client-Region"));

      }
    }

  }
  else
  {
    v25 = 0;
  }

  return v25;
}

void sub_10009E3B8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_10009E3DC(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  __int128 v32;
  int v33;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = NPGetInternalQueue(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009E5B8;
  block[3] = &unk_1000F6CA0;
  objc_copyWeak(&v31, (id *)(a1 + 112));
  v18 = *(id *)(a1 + 32);
  v19 = v11;
  v20 = v9;
  v21 = *(id *)(a1 + 40);
  v30 = *(id *)(a1 + 104);
  v22 = v10;
  v23 = *(id *)(a1 + 48);
  v24 = *(id *)(a1 + 56);
  v25 = *(id *)(a1 + 64);
  v26 = *(id *)(a1 + 72);
  v27 = *(id *)(a1 + 80);
  v28 = *(id *)(a1 + 88);
  v29 = *(id *)(a1 + 96);
  v33 = a2;
  v32 = *(_OWORD *)(a1 + 120);
  v14 = v10;
  v15 = v9;
  v16 = v11;
  dispatch_async(v13, block);

  objc_destroyWeak(&v31);
}

void sub_10009E5B8(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void (*v12)(void);
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSPTokenFetchAnalytics *v17;
  uint64_t v18;
  __CFString *v19;
  void *v20;
  unsigned int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t has_internal_diagnostics;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  void *v47;
  uint8_t buf[4];
  id v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 136));
  v5 = WeakRetained;
  if (!WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "invalidateAndCancel");
    goto LABEL_22;
  }
  if (*(_QWORD *)(a1 + 40) || !*(_QWORD *)(a1 + 48))
  {
    v6 = nplog_obj(WeakRetained, v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(void **)(a1 + 40);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "URL"));
      *(_DWORD *)buf = 138412546;
      v49 = v8;
      v50 = 2112;
      v51 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received token fetch error %@ for %@", buf, 0x16u);

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
    if (objc_msgSend(v10, "isEqualToString:", NSURLErrorDomain))
    {
      v11 = objc_msgSend(*(id *)(a1 + 40), "code");

      if (v11 == (id)-999)
      {
        v12 = *(void (**)(void))(*(_QWORD *)(a1 + 128) + 16);
LABEL_11:
        v12();
LABEL_12:
        v13 = 0;
        v14 = 0;
        goto LABEL_13;
      }
    }
    else
    {

    }
    v12 = *(void (**)(void))(*(_QWORD *)(a1 + 128) + 16);
    goto LABEL_11;
  }
  v23 = *(_QWORD *)(a1 + 64);
  v24 = objc_opt_class(NSHTTPURLResponse);
  if ((objc_opt_isKindOfClass(v23, v24) & 1) == 0)
    goto LABEL_12;
  v13 = *(id *)(a1 + 64);
  has_internal_diagnostics = os_variant_has_internal_diagnostics("com.apple.networkserviceproxy");
  if ((_DWORD)has_internal_diagnostics)
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("x-apple-request-uuid")));

  }
  else
  {
    v14 = 0;
  }
  v29 = nplog_obj(has_internal_diagnostics, v26, v27);
  v30 = objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v31 = objc_msgSend(v13, "statusCode");
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "URL"));
    *(_DWORD *)buf = 134218498;
    v49 = v31;
    v50 = 2112;
    v51 = v32;
    v52 = 2112;
    v53 = v14;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Received HTTP response code %ld for %@ with request UUID %@", buf, 0x20u);

  }
  if (objc_msgSend(v13, "statusCode") == (id)200)
  {
    v33 = objc_msgSend(objc_alloc((Class)NSPPrivacyProxyTokenActivationResponse), "initWithData:", *(_QWORD *)(a1 + 48));
    v34 = *(void **)(a1 + 72);
    v35 = *(void **)(a1 + 80);
    v36 = *(void **)(a1 + 88);
    v37 = *(void **)(a1 + 96);
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "activatedTokenLists"));
    v39 = sub_10009CE14(v34, v35, v36, v37, v38);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v39);

    v40 = objc_msgSend(v33, "tokenExpiryTimestamp");
    if (v40)
    {
      v40 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)((unint64_t)objc_msgSend(v33, "tokenExpiryTimestamp") / 0x3E8)));
      v43 = v40;
    }
    else
    {
      v43 = 0;
    }
    v44 = nplog_obj(v40, v41, v42);
    v45 = objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      v46 = objc_msgSend(v15, "count");
      v47 = *(void **)(a1 + 104);
      *(_DWORD *)buf = 134218242;
      v49 = v46;
      v50 = 2112;
      v51 = v47;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "activated %lu tokens for %@", buf, 0x16u);
    }

    *((_QWORD *)v5 + 10) += objc_msgSend(v15, "count");
    (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();

    goto LABEL_14;
  }
  if (objc_msgSend(v13, "statusCode") == (id)401)
    objc_msgSend(*((id *)v5 + 2), "authenticationFailure");
  (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
LABEL_13:
  v15 = 0;
LABEL_14:
  objc_msgSend(*(id *)(a1 + 32), "invalidateAndCancel");
  v16 = mach_absolute_time();
  v17 = objc_alloc_init(NSPTokenFetchAnalytics);
  -[NSPTokenFetchAnalytics setProxyURL:](v17, "setProxyURL:", *(_QWORD *)(a1 + 112));
  -[NSPTokenFetchAnalytics setProxyVendor:](v17, "setProxyVendor:", *(_QWORD *)(a1 + 104));
  -[NSPTokenFetchAnalytics setTierType:](v17, "setTierType:", *(_QWORD *)(a1 + 120));
  v18 = *(int *)(a1 + 160);
  if (v18 >= 5)
    v19 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(int *)(a1 + 160)));
  else
    v19 = off_1000F6F80[v18];
  -[NSPTokenFetchAnalytics setAuthenticationType:](v17, "setAuthenticationType:", v19);

  -[NSPTokenFetchAnalytics setRequestedServerUUID:](v17, "setRequestedServerUUID:", v14);
  -[NSPTokenFetchAnalytics setRequestedTokenCount:](v17, "setRequestedTokenCount:", *(_QWORD *)(a1 + 144));
  -[NSPTokenFetchAnalytics setActivatedCount:](v17, "setActivatedCount:", objc_msgSend(v15, "count"));
  -[NSPTokenFetchAnalytics setHttpCode:](v17, "setHttpCode:", objc_msgSend(v13, "statusCode"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "domain"));
  v21 = objc_msgSend(v20, "isEqualToString:", NSURLErrorDomain);

  if (v21)
    -[NSPTokenFetchAnalytics setNsurlErrorCode:](v17, "setNsurlErrorCode:", objc_msgSend(*(id *)(a1 + 40), "code"));
  v22 = (double)(v16 - *(_QWORD *)(a1 + 152));
  if (qword_100112F20 != -1)
    dispatch_once(&qword_100112F20, &stru_1000F6F40);
  -[NSPTokenFetchAnalytics setLatency:](v17, "setLatency:", *(double *)&qword_100112F28 * v22);
  -[NSPProxyAnalytics sendAnalytics](v17, "sendAnalytics");

LABEL_22:
}

void sub_10009EB54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  unsigned __int8 v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  _QWORD v66[4];
  id v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  void *v75;
  __int16 v76;
  void *v77;
  __int16 v78;
  uint64_t v79;
  _BYTE v80[128];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
    goto LABEL_38;
  if (!v8)
    goto LABEL_28;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "associatedIssuers"));
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v68, v80, 16);
  if (!v11)
    goto LABEL_14;
  v12 = v11;
  v13 = *(_QWORD *)v69;
  while (2)
  {
    for (i = 0; i != v12; i = (char *)i + 1)
    {
      if (*(_QWORD *)v69 != v13)
        objc_enumerationMutation(v10);
      v15 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * (_QWORD)i);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "tokenKeys"));
      if (objc_msgSend(v16, "containsObject:", v7))
      {
        v17 = objc_msgSend(v15, "hasTransparencyKeyBundle");

        if ((v17 & 1) != 0)
        {
          v18 = v15;

          if (!v18)
            goto LABEL_24;
          v19 = objc_alloc((Class)NSPPrivacyProxyTransparencyTokenEntry);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "transparencyKeyBundle"));
          v21 = objc_msgSend(v19, "initWithData:", v20);

          if (v21)
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "issuerName"));
            v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "issuerName"));
            v27 = objc_msgSend(v25, "isEqualToString:", v26);

            if ((v27 & 1) != 0)
            {
              v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "tokenKeys"));
              v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "tokenKeys"));
              v33 = objc_msgSend(v31, "isEqualToArray:", v32);

              if ((v33 & 1) != 0)
              {
                v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)objc_msgSend(v21, "configurationDeliveryStart")));
                v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)objc_msgSend(v21, "configurationDeliveryEnd")));
                v39 = sub_1000549E8();
                v40 = objc_claimAutoreleasedReturnValue(v39);
                v41 = (void *)v40;
                if (v40)
                  v42 = *(void **)(v40 + 40);
                else
                  v42 = 0;
                v43 = v42;

                v44 = objc_msgSend(v43, "fetchDateIsWithinStart:end:", v37, v38);
                if ((v44 & 1) != 0)
                {
                  v47 = objc_msgSend(objc_alloc((Class)SoftwareTransparency), "initWithApplication:", 0);
                  if (v47)
                  {
                    v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "transparencyProof"));
                    v64 = v37;
                    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "transparencyKeyBundle"));
                    v66[0] = _NSConcreteStackBlock;
                    v66[1] = 3221225472;
                    v66[2] = sub_10009F0C0;
                    v66[3] = &unk_1000F5888;
                    v67 = v9;
                    objc_msgSend(v47, "verifyExpiringProofs:for:completion:", v48, v49, v66);

                    v37 = v64;
                  }
                  else
                  {
                    (*((void (**)(id, _QWORD))v9 + 2))(v9, 0);
                  }

                }
                else
                {
                  v60 = nplog_obj(v44, v45, v46);
                  v61 = objc_claimAutoreleasedReturnValue(v60);
                  if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                  {
                    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "configurationFetchDate"));
                    v62 = objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "etag"));
                    *(_DWORD *)buf = 138413058;
                    v73 = v37;
                    v74 = 2112;
                    v75 = v38;
                    v76 = 2112;
                    v77 = v65;
                    v78 = 2112;
                    v79 = v62;
                    v63 = (void *)v62;
                    _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "Configuration start time (%@) and end time (%@) are not valid for configuration fetched at %@ (etag %@), blocking fetching token keys", buf, 0x2Au);

                  }
                  (*((void (**)(id, _QWORD))v9 + 2))(v9, 0);
                }

                goto LABEL_37;
              }
              v59 = nplog_obj(v34, v35, v36);
              v56 = objc_claimAutoreleasedReturnValue(v59);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                v57 = "Failed to match token keys in transparency blob for token keys, blocking";
                goto LABEL_35;
              }
LABEL_36:

              (*((void (**)(id, _QWORD))v9 + 2))(v9, 0);
LABEL_37:

              goto LABEL_38;
            }
            v58 = nplog_obj(v28, v29, v30);
            v56 = objc_claimAutoreleasedReturnValue(v58);
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              goto LABEL_36;
            *(_WORD *)buf = 0;
            v57 = "Failed to match issuer name in transparency blob for token keys, blocking";
          }
          else
          {
            v55 = nplog_obj(v22, v23, v24);
            v56 = objc_claimAutoreleasedReturnValue(v55);
            if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              goto LABEL_36;
            *(_WORD *)buf = 0;
            v57 = "Failed to parse transparency blob for token keys, blocking";
          }
LABEL_35:
          _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, v57, buf, 2u);
          goto LABEL_36;
        }
      }
      else
      {

      }
    }
    v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v68, v80, 16);
    if (v12)
      continue;
    break;
  }
LABEL_14:

LABEL_24:
  v50 = _os_feature_enabled_impl("NetworkServiceProxy", "TransparencyValidation");
  if (!(_DWORD)v50)
  {
LABEL_28:
    (*((void (**)(id, uint64_t))v9 + 2))(v9, 1);
    goto LABEL_38;
  }
  v53 = nplog_obj(v50, v51, v52);
  v54 = objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Keys do not have transparency proof, blocking", buf, 2u);
  }

  (*((void (**)(id, _QWORD))v9 + 2))(v9, 0);
LABEL_38:

}

void sub_10009F0C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  _QWORD v20[4];
  id v21;
  char v22;
  uint8_t buf[4];
  id v24;

  v5 = a3;
  if (objc_msgSend(a2, "result"))
  {
    v8 = _os_feature_enabled_impl("NetworkServiceProxy", "TransparencyValidation");
    v9 = v8;
    v12 = nplog_obj(v8, v10, v11);
    v13 = objc_claimAutoreleasedReturnValue(v12);
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if ((v9 & 1) != 0)
    {
      if (v14)
      {
        *(_DWORD *)buf = 138412290;
        v24 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Keys not validated by transparency (error %@), blocking", buf, 0xCu);
      }
      v15 = 0;
    }
    else
    {
      if (v14)
      {
        *(_DWORD *)buf = 138412290;
        v24 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Keys not validated by transparency (error %@), allowing since feature flag is not enabled", buf, 0xCu);
      }
      v15 = 1;
    }
  }
  else
  {
    v16 = nplog_obj(0, v6, v7);
    v13 = objc_claimAutoreleasedReturnValue(v16);
    v15 = 1;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Keys validated by transparency, allowing", buf, 2u);
    }
  }

  v18 = NPGetInternalQueue(v17);
  v19 = objc_claimAutoreleasedReturnValue(v18);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10009F294;
  v20[3] = &unk_1000F5860;
  v21 = *(id *)(a1 + 32);
  v22 = v15;
  dispatch_async(v19, v20);

}

uint64_t sub_10009F294(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10009F2A8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  int v24;
  const char *v25;

  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (!a1)
    goto LABEL_10;
  if (!v5)
  {
    v20 = nplog_obj(v6, v7, v8);
    v21 = objc_claimAutoreleasedReturnValue(v20);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
LABEL_14:

      goto LABEL_10;
    }
    v24 = 136315138;
    v25 = "-[NSPPrivacyTokenManager saveRetryIntervalFromHTTPResponse:issuerName:]";
    v22 = "%s called with null httpResponse";
LABEL_16:
    _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, v22, (uint8_t *)&v24, 0xCu);
    goto LABEL_14;
  }
  if (!v6)
  {
    v23 = nplog_obj(0, v7, v8);
    v21 = objc_claimAutoreleasedReturnValue(v23);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      goto LABEL_14;
    v24 = 136315138;
    v25 = "-[NSPPrivacyTokenManager saveRetryIntervalFromHTTPResponse:issuerName:]";
    v22 = "%s called with null issuerName";
    goto LABEL_16;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allHeaderFields"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("Retry-After")));

  if (v11)
  {
    v12 = objc_alloc_init((Class)NSNumberFormatter);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "numberFromString:", v11));
    objc_msgSend(v13, "doubleValue");
    v15 = v14;

    if (v15 != 0.0)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", v15));
      v17 = *(void **)(a1 + 56);
      if (!v17)
      {
        v18 = objc_alloc_init((Class)NSMutableDictionary);
        v19 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v18;

        v17 = *(void **)(a1 + 56);
      }
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, v9);

    }
  }

LABEL_10:
}

void sub_10009F490(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v43;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  _QWORD v52[4];
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  int v68;
  uint8_t buf[4];
  void *v70;

  v50 = a3;
  v20 = a4;
  v49 = a5;
  v48 = a6;
  v21 = a7;
  v22 = a9;
  v23 = a10;
  v24 = a11;
  v25 = a12;
  v51 = a13;
  v26 = a14;
  v27 = a15;
  v45 = a1;
  if (a1)
  {
    v41 = v23;
    v47 = v21;
    v28 = a2;
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("tdm-fsr-tid")));
    v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("tdm-fsr-data")));
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("tdm-fsr-namespace")));

    v35 = nplog_obj(v32, v33, v34);
    v36 = objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v70 = v31;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Requesting TDM for namespace %@", buf, 0xCu);
    }

    v43 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](AKAccountManager, "sharedInstance"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "primaryAuthKitAccount"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[AMSFraudReportTask performFraudReportRefreshWithAccount:transactionID:nameSpace:fsrData:keyID:](AMSFraudReportTask, "performFraudReportRefreshWithAccount:transactionID:nameSpace:fsrData:keyID:", v40, v29, v31, v30, 0));
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_10009F85C;
    v52[3] = &unk_1000F6D18;
    v53 = v31;
    v54 = v29;
    v67 = v27;
    v55 = v45;
    v56 = v50;
    v57 = v20;
    v58 = v49;
    v59 = v48;
    v60 = v47;
    v68 = a8;
    v61 = v22;
    v23 = v41;
    v62 = v41;
    v63 = v24;
    v64 = v25;
    v65 = v51;
    v66 = v26;
    v46 = (void *)v30;
    v37 = v29;
    v38 = v31;
    objc_msgSend(v39, "resultWithCompletion:", v52);

    v21 = v47;
  }

}

void sub_10009F85C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  int v32;

  v5 = a2;
  v6 = a3;
  v7 = NPGetInternalQueue(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10009FA30;
  v14[3] = &unk_1000F6CF0;
  v15 = v5;
  v16 = v6;
  v31 = *(id *)(a1 + 144);
  v17 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(void **)(a1 + 56);
  v18 = v9;
  v19 = v10;
  v20 = v11;
  v21 = *(id *)(a1 + 64);
  v22 = *(id *)(a1 + 72);
  v23 = *(id *)(a1 + 80);
  v24 = *(id *)(a1 + 88);
  v32 = *(_DWORD *)(a1 + 152);
  v25 = *(id *)(a1 + 96);
  v26 = *(id *)(a1 + 104);
  v27 = *(id *)(a1 + 112);
  v28 = *(id *)(a1 + 120);
  v29 = *(id *)(a1 + 128);
  v30 = *(id *)(a1 + 136);
  v12 = v6;
  v13 = v5;
  dispatch_async(v8, v14);

}

void sub_10009FA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[4];
  uint8_t buf[4];
  uint64_t v19;

  v4 = *(void **)(a1 + 32);
  if (v4
    && !*(_QWORD *)(a1 + 40)
    && (v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "finalizedElement")), v7, v7))
  {
    v8 = nplog_obj(v4, a2, a3);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "TDM succeeded for namespace %@", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("rs=%d;ns=%d"),
                      objc_msgSend(*(id *)(a1 + 32), "reportedScore"),
                      objc_msgSend(*(id *)(a1 + 32), "newScore")));
    v16[0] = CFSTR("tdm-fsr-namespace");
    v16[1] = CFSTR("tdm-fsr-tid");
    v12 = *(_QWORD *)(a1 + 56);
    v17[0] = *(_QWORD *)(a1 + 48);
    v17[1] = v12;
    v17[2] = v11;
    v16[2] = CFSTR("tdm-fsr-data");
    v16[3] = CFSTR("tdm-fsr-token");
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "finalizedElement"));
    v17[3] = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v17, v16, 4));

    sub_10009FC5C(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 168), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), v14, *(_QWORD *)(a1 + 160));
  }
  else
  {
    v5 = nplog_obj(v4, a2, a3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v19 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "TDM failed, error %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(_QWORD *)(a1 + 160) + 16))();
  }
}

void sub_10009FC5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  id v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  BOOL v33;
  id v34;
  void *v35;
  void *v36;
  double v37;
  double v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  int v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void *i;
  void *v82;
  NSPPrivateAccessTokenRequest *v83;
  void *v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  BOOL v91;
  id v92;
  id v93;
  uint64_t v94;
  void *j;
  void *v96;
  void *v97;
  id v98;
  uint64_t v99;
  char isKindOfClass;
  id v101;
  uint64_t v102;
  char v103;
  id v104;
  id v105;
  uint64_t v106;
  void *k;
  uint64_t v108;
  void *v109;
  BOOL v110;
  id v111;
  id v112;
  const char *v113;
  id v114;
  uint64_t v115;
  void *m;
  id Property;
  id v118;
  void *v119;
  void *v120;
  void *v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  id v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  uint64_t v135;
  NSObject *v136;
  void *v137;
  uint64_t v138;
  NSObject *v139;
  void *v140;
  id v141;
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  NSObject *v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  uint64_t v151;
  NSObject *v152;
  uint64_t v153;
  NSObject *v154;
  uint64_t v155;
  void *v156;
  unsigned int v157;
  void *v158;
  id v159;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  void (**v168)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v169;
  unint64_t v170;
  id v171;
  id v172;
  id v173;
  id v174;
  id v175;
  void *v176;
  id obj;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  _QWORD v183[4];
  id v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  uint64_t v200;
  id v201;
  void (**v202)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  id v203[3];
  int v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  _QWORD v209[4];
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  uint64_t v217;
  id v218;
  void (**v219)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  id v220[2];
  int v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  id v234;
  id v235;
  _BYTE v236[128];
  _BYTE v237[128];
  _BYTE v238[128];
  _BYTE v239[128];
  id v240;
  uint8_t buf[4];
  _BYTE v242[18];

  v182 = a2;
  v170 = a3;
  v169 = a4;
  v166 = a5;
  v181 = a6;
  v180 = a8;
  v179 = a9;
  v162 = a10;
  v165 = a11;
  v175 = a12;
  v163 = a13;
  v164 = a14;
  v21 = a15;
  v168 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v21;
  if (a1)
  {
    v22 = NPGetInternalQueue(v21);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    dispatch_assert_queue_V2(v23);

    v27 = nplog_obj(v24, v25, v26);
    v28 = objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v242 = a7;
      *(_WORD *)&v242[4] = 2112;
      *(_QWORD *)&v242[6] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Requesting %u tokens from %@", buf, 0x12u);

    }
    v30 = *(id *)(a1 + 56);
    if (v30)
    {
      v31 = v30;
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
      v33 = v32 == 0;

      if (!v33)
      {
        v34 = *(id *)(a1 + 56);
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
        v171 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "objectForKeyedSubscript:", v35));

        if (v171)
        {
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
          objc_msgSend(v36, "timeIntervalSinceDate:", v171);
          v38 = v37;

          if (v38 < 0.0)
          {
            ((void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, const __CFString *))v168)[2](v168, 0, 0, 0, 0, 1009, CFSTR("Rate-limited for token issuer based on retry-after header"));
LABEL_113:

            goto LABEL_114;
          }
          v39 = *(id *)(a1 + 56);
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
          objc_msgSend(v39, "setObject:forKeyedSubscript:", 0, v40);

        }
      }
    }
    v41 = objc_alloc((Class)RSABSSATokenBlinder);
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v181, "key"));
    v235 = 0;
    v167 = objc_msgSend(v41, "initWithPublicKey:error:", v42, &v235);
    v171 = v235;

    if (v171)
    {
      v46 = nplog_obj(v43, v44, v45);
      v47 = objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v242 = v171;
        *(_WORD *)&v242[8] = 2112;
        *(_QWORD *)&v242[10] = v137;
        _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "RSABSSATokenBlinder initWithPublicKey failed with error %@ for %@", buf, 0x16u);

      }
    }
    else
    {
      if (v167)
      {
        v174 = objc_alloc_init((Class)NSMutableArray);
        v173 = objc_alloc_init((Class)NSMutableArray);
        v48 = v175;
        if (v175)
        {
          v172 = objc_alloc_init((Class)NSMutableArray);
          v48 = v175;
        }
        else
        {
          v172 = 0;
        }
        if (v170)
          v49 = a7;
        else
          v49 = 1;
        v158 = (void *)v49;
        if ((_DWORD)v49)
        {
          v50 = v49;
          while (1)
          {
            if (v48)
            {
              v234 = 0;
              v51 = sub_1000AB2B8((uint64_t)NSPPrivateAccessTokenRequest, v48, &v234);
              v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
              v53 = v234;
              v176 = v53;
              if (!v52)
                goto LABEL_115;
            }
            else
            {
              v56 = sub_1000AB1DC((uint64_t)NSPPrivateAccessTokenRequest);
              v53 = (id)objc_claimAutoreleasedReturnValue(v56);
              v52 = v53;
              v176 = 0;
              if (!v53)
              {
LABEL_115:
                v142 = nplog_obj(v53, v54, v55);
                v143 = objc_claimAutoreleasedReturnValue(v142);
                if (os_log_type_enabled(v143, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAttester:c"
                                    "ustomAttester:customAttesterHeaders:tokenKey:tokenCount:originNameKey:selectedOrigin"
                                    ":bundleID:accessToken:longLivedToken:urlSession:extraRequestHeaders:completionHandler:]";
                  _os_log_fault_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_FAULT, "%s called with null clientNonce", buf, 0xCu);
                }
                goto LABEL_117;
              }
            }
            v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v181, "key"));
            v58 = sub_1000AB420((uint64_t)NSPPrivateAccessTokenRequest, v182, v52, v57);
            v59 = (void *)objc_claimAutoreleasedReturnValue(v58);

            if (!v59)
              break;
            objc_msgSend(v174, "addObject:", v59);
            objc_msgSend(v173, "addObject:", v52);
            if (v176)
              objc_msgSend(v172, "addObject:", v176);

            --v50;
            v48 = v175;
            if (!v50)
              goto LABEL_32;
          }
          v144 = nplog_obj(v60, v61, v62);
          v145 = objc_claimAutoreleasedReturnValue(v144);
          if (os_log_type_enabled(v145, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAttester:customA"
                              "ttester:customAttesterHeaders:tokenKey:tokenCount:originNameKey:selectedOrigin:bundleID:ac"
                              "cessToken:longLivedToken:urlSession:extraRequestHeaders:completionHandler:]";
            _os_log_fault_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_FAULT, "%s called with null messageToBlind", buf, 0xCu);
          }

          v168[2](v168, 0, 0, 0, 0, 1004, 0);
        }
        else
        {
LABEL_32:
          v63 = sub_10009CBB8(a1, v167, v174, v158);
          v176 = (void *)objc_claimAutoreleasedReturnValue(v63);
          if (objc_msgSend(v176, "count"))
          {
            v155 = mach_absolute_time();
            if (v170)
            {
              v159 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v170, "attesterURL"));
            }
            else
            {
              v66 = (void *)v169;
              if (!v169)
                v66 = *(void **)(a1 + 32);
              v159 = v66;
            }
            v161 = objc_msgSend(objc_alloc((Class)NSURLComponents), "initWithString:", v159);
            if (v161)
            {
              if (!(v170 | v169))
              {
                v69 = objc_alloc((Class)NSURLQueryItem);
                v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
                v71 = objc_msgSend(v69, "initWithName:value:", CFSTR("issuer"), v70);

                v240 = v71;
                v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v240, 1));
                objc_msgSend(v161, "setQueryItems:", v72);

              }
              v157 = objc_msgSend((id)v170, "authType", v155);
              v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "string"));
              v74 = sub_10009D288(a1, v73, 0, v157 == 4, v169 != 0, 0);
              v75 = (void *)objc_claimAutoreleasedReturnValue(v74);

              if (v75)
              {
                v178 = objc_alloc_init((Class)NSMutableArray);
                v232 = 0u;
                v233 = 0u;
                v230 = 0u;
                v231 = 0u;
                obj = v176;
                v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v230, v239, 16);
                if (v79)
                {
                  v80 = *(_QWORD *)v231;
                  while (2)
                  {
                    for (i = 0; i != v79; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v231 != v80)
                        objc_enumerationMutation(obj);
                      v82 = *(void **)(*((_QWORD *)&v230 + 1) + 8 * (_QWORD)i);
                      v83 = [NSPPrivateAccessTokenRequest alloc];
                      v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v181, "key"));
                      v85 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "blindedMessage"));
                      v86 = sub_1000AB6C4((uint64_t)v83, v182, v84, v180, v179, v85);

                      if (!v86)
                      {
                        v135 = nplog_obj(v87, v88, v89);
                        v136 = objc_claimAutoreleasedReturnValue(v135);
                        if (os_log_type_enabled(v136, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 136315138;
                          *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAt"
                                            "tester:customAttester:customAttesterHeaders:tokenKey:tokenCount:originNameKe"
                                            "y:selectedOrigin:bundleID:accessToken:longLivedToken:urlSession:extraRequest"
                                            "Headers:completionHandler:]";
                          _os_log_fault_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_FAULT, "%s called with null tokenRequest", buf, 0xCu);
                        }

                        v168[2](v168, 0, 0, 0, 0, 1004, 0);
                        v111 = obj;
                        goto LABEL_107;
                      }
                      objc_msgSend(v178, "addObject:", v86);

                    }
                    v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v230, v239, 16);
                    if (v79)
                      continue;
                    break;
                  }
                }

                v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v178, "firstObject"));
                sub_1000ACBE4((uint64_t)v90, v75);

                v91 = v169 == 0;
                if (!v166)
                  v91 = 1;
                if (!v91)
                {
                  v228 = 0u;
                  v229 = 0u;
                  v226 = 0u;
                  v227 = 0u;
                  v92 = v166;
                  v93 = objc_msgSend(v92, "countByEnumeratingWithState:objects:count:", &v226, v238, 16);
                  if (v93)
                  {
                    v94 = *(_QWORD *)v227;
                    do
                    {
                      for (j = 0; j != v93; j = (char *)j + 1)
                      {
                        if (*(_QWORD *)v227 != v94)
                          objc_enumerationMutation(v92);
                        v96 = *(void **)(*((_QWORD *)&v226 + 1) + 8 * (_QWORD)j);
                        v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "objectForKeyedSubscript:", v96));
                        v98 = v96;
                        v99 = objc_opt_class(NSString);
                        if (v98)
                        {
                          isKindOfClass = objc_opt_isKindOfClass(v98, v99);

                          if ((isKindOfClass & 1) != 0)
                          {
                            v101 = v97;
                            v102 = objc_opt_class(NSString);
                            if (v101)
                            {
                              v103 = objc_opt_isKindOfClass(v101, v102);

                              if ((v103 & 1) != 0)
                                objc_msgSend(v75, "addValue:forHTTPHeaderField:", v101, v98);
                            }
                          }
                        }

                      }
                      v93 = objc_msgSend(v92, "countByEnumeratingWithState:objects:count:", &v226, v238, 16);
                    }
                    while (v93);
                  }

                }
                v224 = 0u;
                v225 = 0u;
                v222 = 0u;
                v223 = 0u;
                v104 = v164;
                v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v222, v237, 16);
                if (v105)
                {
                  v106 = *(_QWORD *)v223;
                  do
                  {
                    for (k = 0; k != v105; k = (char *)k + 1)
                    {
                      if (*(_QWORD *)v223 != v106)
                        objc_enumerationMutation(v104);
                      v108 = *(_QWORD *)(*((_QWORD *)&v222 + 1) + 8 * (_QWORD)k);
                      v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "objectForKeyedSubscript:", v108));
                      objc_msgSend(v75, "addValue:forHTTPHeaderField:", v109, v108);

                    }
                    v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v222, v237, 16);
                  }
                  while (v105);
                }

                if (v165)
                  v110 = v157 == 4;
                else
                  v110 = 1;
                if (!v110)
                  objc_msgSend(v75, "setValue:forHTTPHeaderField:", v165, CFSTR("X-Mask-Subscription-Token"));
                if (v170)
                {
                  v111 = objc_alloc_init((Class)NSPPrivacyProxyTokenInfo);
                  v207 = 0u;
                  v208 = 0u;
                  v205 = 0u;
                  v206 = 0u;
                  v112 = v178;
                  v114 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v205, v236, 16);
                  if (v114)
                  {
                    v115 = *(_QWORD *)v206;
                    do
                    {
                      for (m = 0; m != v114; m = (char *)m + 1)
                      {
                        if (*(_QWORD *)v206 != v115)
                          objc_enumerationMutation(v112);
                        Property = *(id *)(*((_QWORD *)&v205 + 1) + 8 * (_QWORD)m);
                        if (Property)
                          Property = objc_getProperty(Property, v113, 24, 1);
                        v118 = Property;
                        objc_msgSend(v111, "addTokenRequestList:", v118);

                      }
                      v114 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v205, v236, 16);
                    }
                    while (v114);
                  }

                  v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v167, "keyId"));
                  objc_msgSend(v111, "setTokenKeyID:", v119);

                  v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
                  objc_msgSend(v111, "setProxyURL:", v120);

                  v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "issuerName"));
                  objc_msgSend(v111, "setVendor:", v121);

                  v122 = objc_alloc_init((Class)NSPPrivacyProxyTokenActivationQuery);
                  objc_msgSend(v122, "setTokenInfo:", v111);
                  v123 = objc_msgSend((id)v170, "authType");
                  switch((int)v123)
                  {
                    case 1:
                      goto LABEL_89;
                    case 2:
                      v126 = objc_opt_class(NSPAnisette);
                      goto LABEL_105;
                    case 3:
                      if (sub_100049ED4())
LABEL_89:
                        v126 = objc_opt_class(NSPBAA);
                      else
                        v126 = objc_opt_class(NSPBAA_Anisette);
LABEL_105:
                      v140 = (void *)v126;
                      goto LABEL_106;
                    case 4:
                      v140 = (void *)objc_opt_class(NSPAnonymousToken);
                      objc_msgSend(v122, "setAuthInfo:", v175);
LABEL_106:
                      objc_initWeak((id *)buf, (id)a1);
                      v183[0] = _NSConcreteStackBlock;
                      v183[1] = 3221225472;
                      v183[2] = sub_1000A1AFC;
                      v183[3] = &unk_1000F6DB8;
                      objc_copyWeak(v203, (id *)buf);
                      v184 = v75;
                      v202 = v168;
                      v185 = obj;
                      v186 = v182;
                      v187 = v181;
                      v188 = v173;
                      v204 = (int)v158;
                      v189 = v104;
                      v190 = v172;
                      v191 = (id)v170;
                      v192 = (id)v169;
                      v193 = v166;
                      v194 = v180;
                      v195 = v179;
                      v196 = v162;
                      v197 = v165;
                      v198 = v175;
                      v141 = v163;
                      v203[1] = v140;
                      v199 = v141;
                      v200 = a1;
                      v201 = v159;
                      v203[2] = v156;
                      objc_msgSend(v140, "sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandler:", v184, v141, v122, v183);

                      objc_destroyWeak(v203);
                      objc_destroyWeak((id *)buf);

                      break;
                    default:
                      v138 = nplog_obj(v123, v124, v125);
                      v139 = objc_claimAutoreleasedReturnValue(v138);
                      if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
                      {
                        v146 = objc_msgSend((id)v170, "authType");
                        *(_DWORD *)buf = 67109120;
                        *(_DWORD *)v242 = v146;
                        _os_log_error_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_ERROR, "invalid override attester authentication type %d", buf, 8u);
                      }

                      v168[2](v168, 0, 0, 0, 0, 1005, 0);
                      break;
                  }
                }
                else
                {
                  v111 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v178, "firstObject"));
                  v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "firstObject"));
                  v128 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "firstObject"));
                  v131 = v128;
                  if (v111 && (v128 = objc_getProperty(v111, v129, 24, 1)) != 0)
                  {
                    v132 = v128;
                    objc_initWeak((id *)buf, (id)a1);
                    v133 = *(void **)(a1 + 16);
                    v209[0] = _NSConcreteStackBlock;
                    v209[1] = 3221225472;
                    v209[2] = sub_1000A1130;
                    v209[3] = &unk_1000F6D68;
                    objc_copyWeak(v220, (id *)buf);
                    v210 = v75;
                    v219 = v168;
                    v211 = v111;
                    v212 = v131;
                    v213 = v182;
                    v214 = v127;
                    v215 = v181;
                    v216 = v172;
                    v217 = a1;
                    v134 = v159;
                    v221 = 1;
                    v218 = v134;
                    v220[1] = v156;
                    objc_msgSend(v133, "sendRequestForTokens:tokenFetchURLSession:messageBody:completionHandler:", v210, v163, v132, v209);

                    objc_destroyWeak(v220);
                    objc_destroyWeak((id *)buf);
                  }
                  else
                  {
                    v153 = nplog_obj(v128, v129, v130);
                    v154 = objc_claimAutoreleasedReturnValue(v153);
                    if (os_log_type_enabled(v154, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)buf = 136315138;
                      *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAttest"
                                        "er:customAttester:customAttesterHeaders:tokenKey:tokenCount:originNameKey:select"
                                        "edOrigin:bundleID:accessToken:longLivedToken:urlSession:extraRequestHeaders:completionHandler:]";
                      _os_log_fault_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_FAULT, "%s called with null messageBody", buf, 0xCu);
                    }

                    v168[2](v168, 0, 0, 0, 0, 1004, 0);
                    v132 = 0;
                  }

                }
LABEL_107:

              }
              else
              {
                v151 = nplog_obj(v76, v77, v78);
                v152 = objc_claimAutoreleasedReturnValue(v151);
                if (os_log_type_enabled(v152, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAttester:c"
                                    "ustomAttester:customAttesterHeaders:tokenKey:tokenCount:originNameKey:selectedOrigin"
                                    ":bundleID:accessToken:longLivedToken:urlSession:extraRequestHeaders:completionHandler:]";
                  _os_log_fault_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_FAULT, "%s called with null urlRequest", buf, 0xCu);
                }

                v168[2](v168, 0, 0, 0, 0, 1004, 0);
              }

            }
            else
            {
              v149 = nplog_obj(0, v67, v68);
              v150 = objc_claimAutoreleasedReturnValue(v149);
              if (os_log_type_enabled(v150, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAttester:cus"
                                  "tomAttester:customAttesterHeaders:tokenKey:tokenCount:originNameKey:selectedOrigin:bun"
                                  "dleID:accessToken:longLivedToken:urlSession:extraRequestHeaders:completionHandler:]";
                _os_log_fault_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_FAULT, "%s called with null attesterURLComponents", buf, 0xCu);
              }

              v168[2](v168, 0, 0, 0, 0, 1004, 0);
            }

          }
          else
          {
            v148 = nplog_obj(0, v64, v65);
            v143 = objc_claimAutoreleasedReturnValue(v148);
            if (os_log_type_enabled(v143, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAttester:custo"
                                "mAttester:customAttesterHeaders:tokenKey:tokenCount:originNameKey:selectedOrigin:bundleI"
                                "D:accessToken:longLivedToken:urlSession:extraRequestHeaders:completionHandler:]";
              _os_log_fault_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_FAULT, "%s called with null (waitingTokens.count > 0)", buf, 0xCu);
            }
LABEL_117:

            v168[2](v168, 0, 0, 0, 0, 1004, 0);
          }

        }
        goto LABEL_112;
      }
      v147 = nplog_obj(v43, v44, v45);
      v47 = objc_claimAutoreleasedReturnValue(v147);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v242 = "-[NSPPrivacyTokenManager innerFetchPrivateAccessTokenForChallenge:overrideAttester:customAttes"
                          "ter:customAttesterHeaders:tokenKey:tokenCount:originNameKey:selectedOrigin:bundleID:accessToke"
                          "n:longLivedToken:urlSession:extraRequestHeaders:completionHandler:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "%s called with null tokenBlinder", buf, 0xCu);
      }
    }

    v168[2](v168, 0, 0, 0, 0, 1004, 0);
LABEL_112:

    goto LABEL_113;
  }
LABEL_114:

}

void sub_1000A10E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_1000A1130(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  int v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37[2];
  int v38;
  int v39;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = NPGetInternalQueue(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1000A12F8;
  v23[3] = &unk_1000F6D40;
  objc_copyWeak(v37, (id *)(a1 + 112));
  v24 = v11;
  v25 = v9;
  v26 = *(id *)(a1 + 32);
  v27 = v10;
  v36 = *(id *)(a1 + 104);
  v28 = *(id *)(a1 + 40);
  v29 = *(id *)(a1 + 48);
  v30 = *(id *)(a1 + 56);
  v31 = *(id *)(a1 + 64);
  v32 = *(id *)(a1 + 72);
  v14 = *(id *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(void **)(a1 + 96);
  v33 = v14;
  v34 = v15;
  v17 = v16;
  v18 = *(_DWORD *)(a1 + 128);
  v38 = a2;
  v39 = v18;
  v19 = *(void **)(a1 + 120);
  v35 = v17;
  v37[1] = v19;
  v20 = v10;
  v21 = v9;
  v22 = v11;
  dispatch_async(v13, v23);

  objc_destroyWeak(v37);
}

void sub_1000A12F8(uint64_t a1)
{
  id *WeakRetained;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t has_internal_diagnostics;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  NSErrorDomain v19;
  NSErrorDomain v20;
  id v21;
  void (*v22)(void);
  id v23;
  uint64_t v24;
  NSPTokenFetchAnalytics *v25;
  void *v26;
  uint64_t v27;
  __CFString *v28;
  void *v29;
  unsigned int v30;
  double v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  NSPPrivateAccessTokenResponse *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  id v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  void *v68;
  id v69;
  id v70;
  uint8_t buf[4];
  id v72;
  __int16 v73;
  void *v74;
  __int16 v75;
  void *v76;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 136));
  v5 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_29;
  if (*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40))
  {
    v6 = nplog_obj(WeakRetained, v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(void **)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "URL"));
      *(_DWORD *)buf = 138412546;
      v72 = v8;
      v73 = 2112;
      v74 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received token fetch error %@ for %@", buf, 0x16u);

    }
    v10 = *(void **)(a1 + 32);
    if (*(_QWORD *)(a1 + 56))
    {
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
      v22 = *(void (**)(void))(*(_QWORD *)(a1 + 128) + 16);
      goto LABEL_18;
    }
    v19 = (NSErrorDomain)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "domain"));
    v20 = v19;
    if (v19 == NSPOSIXErrorDomain)
    {
      v21 = objc_msgSend(*(id *)(a1 + 32), "code");

      if (v21 == (id)50)
      {
        v22 = *(void (**)(void))(*(_QWORD *)(a1 + 128) + 16);
LABEL_18:
        v22();
        goto LABEL_19;
      }
    }
    else
    {

    }
LABEL_17:
    v22 = *(void (**)(void))(*(_QWORD *)(a1 + 128) + 16);
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(a1 + 56);
  v12 = objc_opt_class(NSHTTPURLResponse);
  if ((objc_opt_isKindOfClass(v11, v12) & 1) == 0)
  {
LABEL_19:
    v13 = 0;
    v18 = 0;
    goto LABEL_20;
  }
  v13 = *(id *)(a1 + 56);
  has_internal_diagnostics = os_variant_has_internal_diagnostics("com.apple.networkserviceproxy");
  if ((_DWORD)has_internal_diagnostics)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("x-apple-request-uuid")));

  }
  else
  {
    v18 = 0;
  }
  v32 = nplog_obj(has_internal_diagnostics, v15, v16);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    v34 = objc_msgSend(v13, "statusCode");
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "URL"));
    *(_DWORD *)buf = 134218498;
    v72 = v34;
    v73 = 2112;
    v74 = v35;
    v75 = 2112;
    v76 = v18;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Received HTTP response code %ld for %@ with request UUID %@", buf, 0x20u);

  }
  if (objc_msgSend(v13, "statusCode") == (id)200)
  {
    v36 = sub_1000AAAC8(*(_QWORD *)(a1 + 64), *(void **)(a1 + 40));
    v39 = (void *)objc_claimAutoreleasedReturnValue(v36);
    if (v39)
    {
      v40 = *(void **)(a1 + 72);
      v69 = 0;
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "activateTokenWithServerResponse:error:", v39, &v69));
      v42 = v69;
      v45 = v42;
      if (v42 || !v41)
      {
        v60 = nplog_obj(v42, v43, v44);
        v61 = objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v72 = v45;
          _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "activateTokenWithServerResponse failed with error %@", buf, 0xCu);
        }

        (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
        v23 = 0;
      }
      else
      {
        v46 = [NSPPrivateAccessTokenResponse alloc];
        v47 = *(void **)(a1 + 80);
        v48 = *(void **)(a1 + 88);
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "key"));
        v68 = v41;
        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "signature"));
        v51 = sub_1000A9D0C(&v46->super, v47, v48, v49, v50);

        if (v51 && (v52 = objc_getProperty(v51, v53, 8, 1)) != 0)
        {
          v23 = v52;
          if (objc_msgSend(*(id *)(a1 + 96), "expiration"))
            v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)objc_msgSend(*(id *)(a1 + 96), "expiration")));
          else
            v55 = 0;
          v64 = *(_QWORD *)(a1 + 128);
          v70 = v23;
          v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v70, 1));
          (*(void (**)(uint64_t, void *, _QWORD, void *, _QWORD, _QWORD, _QWORD))(v64 + 16))(v64, v65, *(_QWORD *)(a1 + 104), v55, 0, 0, 0);

          v45 = 0;
          v41 = v68;
        }
        else
        {
          v66 = nplog_obj(v52, v53, v54);
          v67 = objc_claimAutoreleasedReturnValue(v66);
          v45 = 0;
          v41 = v68;
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Challenge response creation failed", buf, 2u);
          }

          (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
          v23 = 0;
        }

      }
    }
    else
    {
      v58 = nplog_obj(0, v37, v38);
      v59 = objc_claimAutoreleasedReturnValue(v58);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Failed to decrypt token response", buf, 2u);
      }

      (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
      v23 = 0;
    }

    goto LABEL_21;
  }
  if (objc_msgSend(v13, "statusCode") == (id)401)
  {
    objc_msgSend(v5[2], "authenticationFailure");
  }
  else if (objc_msgSend(v13, "statusCode") == (id)429)
  {
    v56 = *(_QWORD *)(a1 + 112);
    v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "issuerName"));
    sub_10009F2A8(v56, v13, v57);

  }
  else if ((uint64_t)objc_msgSend(v13, "statusCode") >= 400)
  {
    objc_msgSend(v13, "statusCode");
  }
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
  v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKeyedSubscript:", CFSTR("Error-Reason")));

  (*(void (**)(void))(*(_QWORD *)(a1 + 128) + 16))();
LABEL_20:
  v23 = 0;
LABEL_21:
  v24 = mach_absolute_time();
  v25 = objc_alloc_init(NSPTokenFetchAnalytics);
  -[NSPTokenFetchAnalytics setProxyURL:](v25, "setProxyURL:", *(_QWORD *)(a1 + 120));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "issuerName"));
  -[NSPTokenFetchAnalytics setProxyVendor:](v25, "setProxyVendor:", v26);

  v27 = *(int *)(a1 + 152);
  if (v27 >= 5)
    v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(int *)(a1 + 152)));
  else
    v28 = off_1000F6F80[v27];
  -[NSPTokenFetchAnalytics setAuthenticationType:](v25, "setAuthenticationType:", v28);

  -[NSPTokenFetchAnalytics setRequestedServerUUID:](v25, "setRequestedServerUUID:", v18);
  -[NSPTokenFetchAnalytics setRequestedTokenCount:](v25, "setRequestedTokenCount:", *(unsigned int *)(a1 + 156));
  -[NSPTokenFetchAnalytics setActivatedCount:](v25, "setActivatedCount:", v23 != 0);
  -[NSPTokenFetchAnalytics setHttpCode:](v25, "setHttpCode:", objc_msgSend(v13, "statusCode"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "domain"));
  v30 = objc_msgSend(v29, "isEqualToString:", NSURLErrorDomain);

  if (v30)
    -[NSPTokenFetchAnalytics setNsurlErrorCode:](v25, "setNsurlErrorCode:", objc_msgSend(*(id *)(a1 + 32), "code"));
  v31 = (double)(v24 - *(_QWORD *)(a1 + 144));
  if (qword_100112F20 != -1)
    dispatch_once(&qword_100112F20, &stru_1000F6F40);
  -[NSPTokenFetchAnalytics setLatency:](v25, "setLatency:", *(double *)&qword_100112F28 * v31);
  -[NSPProxyAnalytics sendAnalytics](v25, "sendAnalytics");

LABEL_29:
}

void sub_1000A1AFC(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45[3];
  int v46;
  int v47;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = NPGetInternalQueue(v11);
  v13 = objc_claimAutoreleasedReturnValue(v12);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000A1D84;
  v22[3] = &unk_1000F6D90;
  objc_copyWeak(v45, (id *)(a1 + 184));
  v23 = v11;
  v24 = v9;
  v25 = *(id *)(a1 + 32);
  v26 = v10;
  v44 = *(id *)(a1 + 176);
  v27 = *(id *)(a1 + 40);
  v28 = *(id *)(a1 + 48);
  v29 = *(id *)(a1 + 56);
  v30 = *(id *)(a1 + 64);
  v46 = *(_DWORD *)(a1 + 208);
  v31 = *(id *)(a1 + 72);
  v32 = *(id *)(a1 + 80);
  v33 = *(id *)(a1 + 88);
  v34 = *(id *)(a1 + 96);
  v35 = *(id *)(a1 + 104);
  v36 = *(id *)(a1 + 112);
  v37 = *(id *)(a1 + 120);
  v38 = *(id *)(a1 + 128);
  v39 = *(id *)(a1 + 136);
  v40 = *(id *)(a1 + 144);
  v14 = *(id *)(a1 + 152);
  v45[1] = *(id *)(a1 + 192);
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(void **)(a1 + 168);
  v41 = v14;
  v42 = v15;
  v17 = v16;
  v47 = a2;
  v18 = *(void **)(a1 + 200);
  v43 = v17;
  v45[2] = v18;
  v19 = v10;
  v20 = v9;
  v21 = v11;
  dispatch_async(v13, v22);

  objc_destroyWeak(v45);
}

void sub_1000A1D84(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t has_internal_diagnostics;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  NSErrorDomain v19;
  NSErrorDomain v20;
  id v21;
  void (*v22)(void);
  id v23;
  uint64_t v24;
  NSPTokenFetchAnalytics *v25;
  void *v26;
  uint64_t v27;
  __CFString *v28;
  void *v29;
  unsigned int v30;
  double v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  unsigned int v58;
  int v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint8_t buf[4];
  _BYTE v72[10];
  void *v73;
  _BYTE v74[10];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 208));
  v5 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_28;
  if (*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40))
  {
    v6 = nplog_obj(WeakRetained, v3, v4);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "URL"));
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v72 = v8;
      *(_WORD *)&v72[8] = 2112;
      v73 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received token fetch error %@ for %@", buf, 0x16u);

    }
    v10 = *(void **)(a1 + 32);
    if (*(_QWORD *)(a1 + 56))
    {
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
      v22 = *(void (**)(void))(*(_QWORD *)(a1 + 200) + 16);
      goto LABEL_18;
    }
    v19 = (NSErrorDomain)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "domain"));
    v20 = v19;
    if (v19 == NSPOSIXErrorDomain)
    {
      v21 = objc_msgSend(*(id *)(a1 + 32), "code");

      if (v21 == (id)50)
      {
        v22 = *(void (**)(void))(*(_QWORD *)(a1 + 200) + 16);
LABEL_18:
        v22();
        goto LABEL_19;
      }
    }
    else
    {

    }
LABEL_17:
    v22 = *(void (**)(void))(*(_QWORD *)(a1 + 200) + 16);
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(a1 + 56);
  v12 = objc_opt_class(NSHTTPURLResponse);
  if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
  {
    v13 = *(id *)(a1 + 56);
    has_internal_diagnostics = os_variant_has_internal_diagnostics("com.apple.networkserviceproxy");
    if ((_DWORD)has_internal_diagnostics)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("x-apple-request-uuid")));

    }
    else
    {
      v18 = 0;
    }
    v32 = nplog_obj(has_internal_diagnostics, v15, v16);
    v33 = objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = objc_msgSend(v13, "statusCode");
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "URL"));
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)v72 = v34;
      *(_WORD *)&v72[8] = 2112;
      v73 = v35;
      *(_WORD *)v74 = 2112;
      *(_QWORD *)&v74[2] = v18;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Received HTTP response code %ld for %@ with request UUID %@", buf, 0x20u);

    }
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("tdm-fsr-tid")));

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("tdm-fsr-data")));

    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("tdm-fsr-namespace")));

    v70 = v41;
    if (objc_msgSend(v13, "statusCode") != (id)200)
    {
      if (objc_msgSend(v13, "statusCode") == (id)401 && v37 && v39 && v41 && !*(_QWORD *)(a1 + 96))
      {
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
        sub_10009F490((uint64_t)v5, v63, *(void **)(a1 + 72), *(void **)(a1 + 112), *(void **)(a1 + 120), *(void **)(a1 + 128), *(void **)(a1 + 80), *(_DWORD *)(a1 + 232), *(void **)(a1 + 136), *(void **)(a1 + 144), *(void **)(a1 + 152), *(void **)(a1 + 160), *(void **)(a1 + 168), *(void **)(a1 + 176), *(void **)(a1 + 200));
        v23 = 0;
      }
      else
      {
        if (objc_msgSend(v13, "statusCode") == (id)401)
        {
          v51 = v39;
          objc_msgSend(*(id *)(a1 + 216), "authenticationFailure");
        }
        else
        {
          v51 = v39;
          if (objc_msgSend(v13, "statusCode") == (id)429)
          {
            v52 = *(_QWORD *)(a1 + 184);
            v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "issuerName"));
            sub_10009F2A8(v52, v13, v53);

          }
          else if ((uint64_t)objc_msgSend(v13, "statusCode") >= 400)
          {
            objc_msgSend(v13, "statusCode");
          }
        }
        v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
        v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v64, "objectForKeyedSubscript:", CFSTR("Error-Reason")));

        (*(void (**)(void))(*(_QWORD *)(a1 + 200) + 16))();
        v23 = 0;
        v39 = v51;
        v41 = v70;
      }
      goto LABEL_64;
    }
    v68 = v39;
    v69 = v37;
    v42 = objc_msgSend(objc_alloc((Class)NSPPrivacyProxyTokenActivationResponse), "initWithData:", *(_QWORD *)(a1 + 40));
    v43 = *(void **)(a1 + 64);
    v44 = *(void **)(a1 + 72);
    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "key"));
    v46 = *(void **)(a1 + 88);
    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "activatedTokenLists"));
    v48 = sub_10009CE14(v43, v44, v45, v46, v47);
    v49 = (void *)objc_claimAutoreleasedReturnValue(v48);

    if (objc_msgSend(*(id *)(a1 + 80), "expiration"))
    {
      v50 = (unint64_t)objc_msgSend(*(id *)(a1 + 80), "expiration");
    }
    else
    {
      if (!objc_msgSend(v42, "tokenExpiryTimestamp"))
      {
        v66 = 0;
        goto LABEL_48;
      }
      v50 = (unint64_t)objc_msgSend(v42, "tokenExpiryTimestamp") / 0x3E8;
    }
    v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)v50));
LABEL_48:
    v67 = v49;
    v23 = objc_msgSend(v49, "count");
    v56 = nplog_obj(v23, v54, v55);
    v57 = objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
    {
      v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "activatedTokenLists"));
      v58 = objc_msgSend(v65, "count");
      v59 = *(_DWORD *)(a1 + 232);
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "issuerName"));
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v72 = (_DWORD)v23;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = v58;
      LOWORD(v73) = 1024;
      *(_DWORD *)((char *)&v73 + 2) = v59;
      HIWORD(v73) = 2112;
      *(_QWORD *)v74 = v60;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "Received %u/%u/%u tokens from %@", buf, 0x1Eu);

    }
    v39 = v68;

    v61 = 0;
    if (*(_DWORD *)(a1 + 232) > v23 && v69 && v68)
    {
      v62 = v42;
      if (v70)
      {
        if (*(_QWORD *)(a1 + 96))
          v61 = 0;
        else
          v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allHeaderFields"));
      }
    }
    else
    {
      v62 = v42;
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 200) + 16))();

    v63 = v62;
    v37 = v69;
    v41 = v70;
LABEL_64:

    goto LABEL_20;
  }
LABEL_19:
  v23 = 0;
  v13 = 0;
  v18 = 0;
LABEL_20:
  v24 = mach_absolute_time();
  v25 = objc_alloc_init(NSPTokenFetchAnalytics);
  -[NSPTokenFetchAnalytics setProxyURL:](v25, "setProxyURL:", *(_QWORD *)(a1 + 192));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "issuerName"));
  -[NSPTokenFetchAnalytics setProxyVendor:](v25, "setProxyVendor:", v26);

  v27 = *(int *)(a1 + 236);
  if (v27 >= 5)
    v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(int *)(a1 + 236)));
  else
    v28 = off_1000F6F80[v27];
  -[NSPTokenFetchAnalytics setAuthenticationType:](v25, "setAuthenticationType:", v28);

  -[NSPTokenFetchAnalytics setRequestedServerUUID:](v25, "setRequestedServerUUID:", v18);
  -[NSPTokenFetchAnalytics setRequestedTokenCount:](v25, "setRequestedTokenCount:", *(unsigned int *)(a1 + 232));
  -[NSPTokenFetchAnalytics setActivatedCount:](v25, "setActivatedCount:", v23);
  -[NSPTokenFetchAnalytics setHttpCode:](v25, "setHttpCode:", objc_msgSend(v13, "statusCode"));
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "domain"));
  v30 = objc_msgSend(v29, "isEqualToString:", NSURLErrorDomain);

  if (v30)
    -[NSPTokenFetchAnalytics setNsurlErrorCode:](v25, "setNsurlErrorCode:", objc_msgSend(*(id *)(a1 + 32), "code"));
  v31 = (double)(v24 - *(_QWORD *)(a1 + 224));
  if (qword_100112F20 != -1)
    dispatch_once(&qword_100112F20, &stru_1000F6F40);
  -[NSPTokenFetchAnalytics setLatency:](v25, "setLatency:", *(double *)&qword_100112F28 * v31);
  -[NSPProxyAnalytics sendAnalytics](v25, "sendAnalytics");

LABEL_28:
}

uint64_t sub_1000A25D8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t isKindOfClass;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint64_t v38;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  _BYTE buf[32];

  v9 = a2;
  v10 = a3;
  v11 = a4;
  if (!a1)
  {
LABEL_14:
    a5 = 0;
    goto LABEL_28;
  }
  if (v10 && objc_msgSend(v10, "tokenType") == 3)
  {
    if (v9)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "originNames"));
      v13 = objc_msgSend(v12, "count");

      if (v11 && (unint64_t)v13 >= 2)
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "originNames"));
        v15 = objc_msgSend(v14, "containsObject:", v11);

        if ((v15 & 1) == 0)
        {
          v24 = nplog_obj(v16, v17, v18);
          v19 = objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "originNames"));
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v11;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v43;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to find origin name %@ in %@", buf, 0x16u);

          }
          a5 = 0;
          goto LABEL_27;
        }
        v19 = v11;
LABEL_11:
        v20 = objc_msgSend(v9, "bytes");
        v45 = 0;
        v21 = v20[1];
        *(_OWORD *)buf = *v20;
        *(_OWORD *)&buf[16] = v21;
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[LSBundleRecord bundleRecordForAuditToken:error:](LSBundleRecord, "bundleRecordForAuditToken:error:", buf, &v45));
        v23 = v45;
        if (!v22)
        {
LABEL_26:

LABEL_27:
          goto LABEL_28;
        }
        if (objc_msgSend(v22, "developerType") == 1)
        {
          a5 = 1;
          goto LABEL_26;
        }
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "infoDictionary"));
        v26 = objc_msgSend(v25, "objectForKey:ofClass:", CFSTR("NSPrivateAccessTokenOrigins"), objc_opt_class(NSArray));
        isKindOfClass = objc_claimAutoreleasedReturnValue(v26);
        v30 = (void *)isKindOfClass;
        if (isKindOfClass
          && (v31 = objc_opt_class(NSArray),
              isKindOfClass = objc_opt_isKindOfClass(v30, v31),
              (isKindOfClass & 1) != 0))
        {
          v32 = objc_msgSend(v30, "count");
          if ((unint64_t)v32 < 6)
          {
            v40 = objc_msgSend(v30, "containsObject:", v19);
            if ((v40 & 1) != 0)
            {
              a5 = 1;
              goto LABEL_25;
            }
            v44 = nplog_obj(v40, v41, v42);
            v36 = objc_claimAutoreleasedReturnValue(v44);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v37 = "Not allowed to request token, not in list";
              goto LABEL_34;
            }
          }
          else
          {
            v35 = nplog_obj(v32, v33, v34);
            v36 = objc_claimAutoreleasedReturnValue(v35);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              v37 = "Not allowed to request token, too many origins in list";
LABEL_34:
              _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v37, buf, 2u);
            }
          }
        }
        else
        {
          v38 = nplog_obj(isKindOfClass, v28, v29);
          v36 = objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            v37 = "Not allowed to request token, no listed origins under NSPrivateAccessTokenOrigins";
            goto LABEL_34;
          }
        }

        a5 = 0;
LABEL_25:

        goto LABEL_26;
      }
      v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "originName"));
      if (v19)
        goto LABEL_11;
    }
    goto LABEL_14;
  }
  a5 = 1;
LABEL_28:

  return a5;
}

void sub_1000A3494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_1000A34C8(uint64_t a1)
{

}

void sub_1000A34D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v10 = a2;
  v11 = a7;
  v12 = *(_QWORD *)(a1 + 48);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstObject"));
  (*(void (**)(uint64_t, void *, uint64_t, id))(v12 + 16))(v12, v13, a6, v11);

  if ((unint64_t)objc_msgSend(v10, "count") >= 2)
  {
    v14 = objc_msgSend(v10, "mutableCopy");
    objc_msgSend(v14, "removeObjectAtIndex:", 0);
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v15 = v14;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v21;
      do
      {
        v19 = 0;
        do
        {
          if (*(_QWORD *)v21 != v18)
            objc_enumerationMutation(v15);
          sub_10003EDAC((uint64_t)NSPPrivateAccessTokenCache, *(void **)(a1 + 32), *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19));
          v19 = (char *)v19 + 1;
        }
        while (v17 != v19);
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v17);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1000A3654(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v3 = a2;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v3);
        sub_10003EDAC((uint64_t)NSPPrivateAccessTokenCache, *(void **)(a1 + 32), *(void **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v7));
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1000A3758(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "invalidateAndCancel");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_1000A4178(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1000A41BC(uint64_t a1, char a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 48);
    v5 = *(void **)(a1 + 56);
    v6 = *(void **)(a1 + 64);
    v7 = *(void **)(a1 + 72);
    v12 = *(_OWORD *)(a1 + 80);
    v8 = *(void **)(a1 + 96);
    v9 = *(void **)(a1 + 104);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000A42FC;
    v13[3] = &unk_1000F6E30;
    v10 = *(id *)(a1 + 112);
    v11 = *(_QWORD *)(a1 + 120);
    v16 = v10;
    v17 = v11;
    v14 = *(id *)(a1 + 48);
    v15 = *(id *)(a1 + 32);
    sub_10009FC5C(v3, v4, v5, 0, 0, v6, 1u, v7, (void *)v12, *((void **)&v12 + 1), v8, 0, v9, 0, v13);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 112) + 16))();
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_1000A42FC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;

  v18 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a7;
  if (a6 || !objc_msgSend(v18, "count"))
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
  if (v17)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v17);
    sub_10003F2E4((uint64_t)NSPPrivateAccessTokenCache, *(void **)(a1 + 32), v17);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1000A43F8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  _QWORD block[4];
  id v18;
  uint64_t v19;
  _QWORD v20[4];
  NSObject *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;

  v2 = dispatch_group_create();
  v3 = v2;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40) && (*(_BYTE *)(a1 + 124) || *(_DWORD *)(a1 + 120)))
  {
    dispatch_group_enter(v2);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 40);
    v6 = *(void **)(a1 + 48);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000A45DC;
    v20[3] = &unk_1000F6ED0;
    v30 = *(id *)(a1 + 96);
    v7 = v3;
    v34 = *(_BYTE *)(a1 + 124);
    v33 = *(_DWORD *)(a1 + 120);
    v8 = *(_QWORD *)(a1 + 32);
    v21 = v7;
    v22 = v8;
    v23 = *(id *)(a1 + 56);
    v24 = *(id *)(a1 + 48);
    v25 = *(id *)(a1 + 40);
    v26 = *(id *)(a1 + 64);
    v9 = *(id *)(a1 + 72);
    v10 = *(_QWORD *)(a1 + 104);
    v27 = v9;
    v31 = v10;
    v28 = *(id *)(a1 + 80);
    v11 = *(id *)(a1 + 88);
    v12 = *(_QWORD *)(a1 + 112);
    v29 = v11;
    v32 = v12;
    sub_10009EB54(v4, v5, v6, v20);

  }
  v13 = NPGetInternalQueue(v2);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A4BEC;
  block[3] = &unk_1000F5428;
  v15 = *(id *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 112);
  v18 = v15;
  v19 = v16;
  dispatch_group_notify(v3, v14, block);

}

void sub_1000A45DC(uint64_t a1, char a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char v34;

  if ((a2 & 1) != 0)
  {
    v3 = *(unsigned __int8 *)(a1 + 132);
    v4 = *(_DWORD *)(a1 + 128) + v3;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(void **)(a1 + 48);
    v8 = *(void **)(a1 + 56);
    v7 = *(void **)(a1 + 64);
    v9 = *(void **)(a1 + 72);
    v10 = *(void **)(a1 + 80);
    v11 = *(void **)(a1 + 104);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
    v21[0] = _NSConcreteStackBlock;
    v13 = *(void **)(v12 + 40);
    v21[2] = sub_1000A47A8;
    v21[3] = &unk_1000F6EA8;
    v14 = *(void **)(a1 + 88);
    v21[1] = 3221225472;
    v34 = v3;
    v15 = v11;
    v16 = *(_QWORD *)(a1 + 112);
    v30 = v15;
    v31 = v16;
    v22 = *(id *)(a1 + 48);
    v23 = *(id *)(a1 + 64);
    v17 = *(id *)(a1 + 96);
    v33 = v4;
    v18 = *(_QWORD *)(a1 + 40);
    v24 = v17;
    v25 = v18;
    v26 = *(id *)(a1 + 56);
    v27 = *(id *)(a1 + 72);
    v28 = *(id *)(a1 + 80);
    v19 = *(id *)(a1 + 88);
    v20 = *(_QWORD *)(a1 + 120);
    v29 = v19;
    v32 = v20;
    sub_10009FC5C(v5, v6, v8, 0, 0, v7, v4, 0, 0, v9, v10, v13, v14, 0, v21);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 104) + 16))();
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_1000A47A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  int v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD v47[4];
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a7;
  if (*(_BYTE *)(a1 + 124))
  {
    if (a6 || !objc_msgSend(v13, "count"))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 96);
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40);
      v22 = v15;
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "firstObject"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
      (*(void (**)(uint64_t, uint64_t, void *, void *, _QWORD, _QWORD))(v20 + 16))(v20, v21, v23, v24, 0, 0);

      v15 = v22;
    }
    if ((unint64_t)objc_msgSend(v13, "count") >= 2)
    {
      v19 = objc_msgSend(v13, "mutableCopy");
      objc_msgSend(v19, "removeObjectAtIndex:", 0);
      v25 = 0;
      if ((unint64_t)objc_msgSend(v14, "count") >= 2)
      {
        v25 = objc_msgSend(v14, "mutableCopy");
        objc_msgSend(v25, "removeObjectAtIndex:", 0);
      }
      v26 = *(void **)(a1 + 32);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "key"));
      sub_10003FCD4((uint64_t)NSPPrivateAccessTokenCache, v26, v19, v25, v15, v27, *(void **)(a1 + 48), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40));

      goto LABEL_12;
    }
  }
  else if (objc_msgSend(v13, "count"))
  {
    v18 = *(void **)(a1 + 32);
    v19 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "key"));
    sub_10003FCD4((uint64_t)NSPPrivateAccessTokenCache, v18, v13, v14, v15, v19, *(void **)(a1 + 48), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40));
LABEL_12:

  }
  if (v16 && (v28 = objc_msgSend(v13, "count"), v29 = *(_DWORD *)(a1 + 120), v29 > v28))
  {
    v44 = *(_QWORD *)(a1 + 56);
    v45 = *(void **)(a1 + 64);
    v43 = *(void **)(a1 + 32);
    v46 = *(void **)(a1 + 40);
    v42 = v29 - objc_msgSend(v13, "count");
    v30 = *(void **)(a1 + 72);
    v31 = *(void **)(a1 + 80);
    v32 = v15;
    v33 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40);
    v34 = *(void **)(a1 + 88);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_1000A4B1C;
    v47[3] = &unk_1000F6E80;
    v48 = v13;
    v49 = *(id *)(a1 + 32);
    v50 = *(id *)(a1 + 40);
    v35 = *(id *)(a1 + 48);
    v36 = *(_QWORD *)(a1 + 104);
    v51 = v35;
    v53 = v36;
    v37 = *(id *)(a1 + 88);
    v38 = *(_QWORD *)(a1 + 112);
    v52 = v37;
    v54 = v38;
    v41 = v33;
    v15 = v32;
    sub_10009F490(v44, v16, v43, v45, 0, 0, v46, v42, 0, 0, v30, v31, v41, v34, v47);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 88), "invalidateAndCancel");
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8);
    v40 = *(void **)(v39 + 40);
    *(_QWORD *)(v39 + 40) = 0;

  }
}

void sub_1000A4B1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v13 = a2;
  v7 = a3;
  v8 = a4;
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v9 = *(void **)(a1 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "key"));
    sub_10003FCD4((uint64_t)NSPPrivateAccessTokenCache, v9, v13, v7, v8, v10, *(void **)(a1 + 56), *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));

  }
  objc_msgSend(*(id *)(a1 + 64), "invalidateAndCancel");
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1000A4BEC(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "invalidateAndCancel");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_1000A5044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A5070(uint64_t a1, int a2, void *a3)
{
  _QWORD *WeakRetained;
  _QWORD *v6;
  void (*v7)(void);
  void *v8;
  id v9;

  v9 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = WeakRetained;
  if (a2 == 2 && WeakRetained)
  {
    if (v9 && nw_array_get_count())
      v7 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    else
      v7 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
    v7();
    nw_resolver_cancel(v6[12]);
    v8 = (void *)v6[12];
    v6[12] = 0;

  }
}

void sub_1000A5178(id a1)
{
  unint64_t v1;
  unint64_t v2;
  mach_timebase_info info;

  info = 0;
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_100112F28 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }
}

void sub_1000A51D0(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v10 = a6;
  v11 = a4;
  v12 = a3;
  v13 = a2;
  objc_opt_self(a1);
  v18 = objc_msgSend(objc_alloc((Class)UNUserNotificationCenter), "initWithBundleIdentifier:", CFSTR("com.apple.iCloud.FollowUp"));
  objc_msgSend(v18, "removeAllDeliveredNotifications");
  v14 = objc_alloc_init((Class)UNMutableNotificationContent);
  objc_msgSend(v14, "setTitle:", v13);

  objc_msgSend(v14, "setBody:", v12);
  objc_msgSend(v14, "setShouldIgnoreDoNotDisturb:", 1);
  objc_msgSend(v14, "setShouldIgnoreDowntime:", 1);
  objc_msgSend(v14, "setShouldSuppressScreenLightUp:", 1);
  objc_msgSend(v14, "setDefaultActionURL:", v11);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationRequest requestWithIdentifier:content:trigger:destinations:](UNNotificationRequest, "requestWithIdentifier:content:trigger:destinations:", v16, v14, 0, 3));

  objc_msgSend(v18, "addNotificationRequest:withCompletionHandler:", v17, v10);
}

id sub_1000A5328(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, int a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  SEL v29;
  __CFDictionary *Mutable;
  const char *v31;
  __CFDictionary *v32;
  void *v33;
  const void **v34;
  CFOptionFlags v35;
  CFUserNotificationRef v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v49;
  NSObject *v50;
  BOOL v51;
  id v52;
  id value;
  id v54;
  SInt32 error;
  objc_super v56;
  uint8_t buf[16];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  void (*v63)(uint64_t);
  void *v64;
  id v65;
  id v66;
  id v67;
  uint64_t *v68;

  value = a2;
  v54 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a8;
  v20 = a9;
  if (!a1)
    goto LABEL_33;
  v56.receiver = a1;
  v56.super_class = (Class)NSPUserNotification;
  v21 = objc_msgSendSuper2(&v56, "init");
  if (v21)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_100112F30);
    v22 = qword_100112F38 == 0;
    v26 = nplog_obj(v23, v24, v25);
    v27 = objc_claimAutoreleasedReturnValue(v26);
    v28 = v27;
    if (!v22)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v62) = 138412290;
        *(_QWORD *)((char *)&v62 + 4) = qword_100112F38;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Already have outstanding notification %@, cannot show an additional one", (uint8_t *)&v62, 0xCu);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
      goto LABEL_33;
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v62) = 138412290;
      *(_QWORD *)((char *)&v62 + 4) = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "No outstanding notification, we are now the current notification %@", (uint8_t *)&v62, 0xCu);
    }

    objc_storeStrong((id *)&qword_100112F38, v21);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
    error = 0;
    objc_setProperty_atomic(v21, v29, 0, 8);
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v32 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, value);
      CFDictionarySetValue(v32, kCFUserNotificationAlertMessageKey, v54);
      if (v18)
      {
        v33 = (void *)sub_10003D038(v18);
        if (v33)
          CFDictionarySetValue(v32, kCFUserNotificationIconURLKey, v33);

      }
      if (v16)
        CFDictionarySetValue(v32, kCFUserNotificationAlternateButtonTitleKey, v16);
      if (v17)
      {
        v34 = (const void **)&kCFUserNotificationOtherButtonTitleKey;
        if (!a7)
          v34 = (const void **)&kCFUserNotificationDefaultButtonTitleKey;
        CFDictionarySetValue(v32, *v34, v17);
      }
      if (a7)
        v35 = 35;
      else
        v35 = 1;
      v36 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, v35, &error, v32);
      CFRelease(v32);
      if (!v36 || error)
      {
        v46 = nplog_obj(v37, v38, v39);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v62) = 67109120;
          DWORD1(v62) = error;
          _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "CFUserNotificationCreate failed with error %d, cancelling", (uint8_t *)&v62, 8u);
        }

LABEL_32:
        sub_1000A5848((uint64_t)v21);

LABEL_33:
        v21 = 0;
        goto LABEL_34;
      }
      objc_setProperty_atomic(v21, v38, v36, 8);

    }
    if (!objc_getProperty(v21, v31, 8, 1))
      goto LABEL_32;
    v40 = v19;
    v41 = v20;
    v58 = 0;
    v59 = &v58;
    v60 = 0x2020000000;
    v61 = 0;
    *(_QWORD *)&v62 = _NSConcreteStackBlock;
    *((_QWORD *)&v62 + 1) = 3221225472;
    v63 = sub_1000A5960;
    v64 = &unk_1000F6FB0;
    v65 = v21;
    v42 = v41;
    v67 = v42;
    v52 = v40;
    v66 = v52;
    v68 = &v58;
    sub_1000A58A8((uint64_t)NSPUserNotification, &v62);
    if (*((_BYTE *)v59 + 24))
    {

      _Block_object_dispose(&v58, 8);
      goto LABEL_34;
    }
    v49 = nplog_obj(v43, v44, v45);
    v50 = objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "Failed to post new user notification: current notification in progress", buf, 2u);
    }

    v51 = *((_BYTE *)v59 + 24) != 0;
    _Block_object_dispose(&v58, 8);

    if (!v51)
      goto LABEL_32;
  }
LABEL_34:

  return v21;
}

void sub_1000A5824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A5848(uint64_t a1)
{
  _QWORD v1[5];

  if (a1)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_1000A5C20;
    v1[3] = &unk_1000F5450;
    v1[4] = a1;
    sub_1000A58A8((uint64_t)NSPUserNotification, v1);
  }
}

void sub_1000A58A8(uint64_t a1, void *a2)
{
  __CFRunLoop *Current;
  void (**v4)(void);
  _QWORD block[4];
  void (**v6)(void);

  v4 = a2;
  objc_opt_self(a1);
  Current = CFRunLoopGetCurrent();
  if (Current == CFRunLoopGetMain())
  {
    v4[2]();
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A5954;
    block[3] = &unk_1000F68D0;
    v6 = v4;
    dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_1000A5954(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A5960(uint64_t a1)
{
  const char *v2;
  void *v3;
  id v4;
  const char *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  id Property;
  __CFUserNotification *v13;
  const char *v14;
  __CFRunLoopSource *RunLoopSource;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  void *v20;
  __CFRunLoop *Main;
  const char *v22;
  void *v23;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_100112F30);
  v3 = *(void **)(a1 + 32);
  if (!v3)
    goto LABEL_6;
  v4 = objc_getProperty(v3, v2, 8, 1);
  if (!v4)
    goto LABEL_6;
  v6 = v4;
  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    v8 = objc_getProperty(v7, v5, 16, 1);
    if (v8)
    {

LABEL_6:
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
      return;
    }
    v9 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v9 = 0;
  }
  v10 = qword_100112F38;

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
  if (v10 == v9)
  {
    Property = *(id *)(a1 + 32);
    if (Property)
      Property = objc_getProperty(Property, v11, 8, 1);
    v13 = (__CFUserNotification *)Property;
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v13, (CFUserNotificationCallBack)sub_1000A5AEC, 0);
    v16 = *(void **)(a1 + 32);
    if (v16)
      objc_setProperty_atomic(v16, v14, v13, 8);

    if (RunLoopSource)
    {
      v18 = *(void **)(a1 + 32);
      if (v18)
      {
        objc_setProperty_nonatomic_copy(v18, v17, *(id *)(a1 + 48), 32);
        v20 = *(void **)(a1 + 32);
        if (v20)
          objc_setProperty_atomic(v20, v19, *(id *)(a1 + 40), 24);
      }
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
      v23 = *(void **)(a1 + 32);
      if (v23)
        objc_setProperty_atomic(v23, v22, RunLoopSource, 16);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    }
  }
}

void sub_1000A5AEC(id a1, char a2)
{
  const char *v4;
  _QWORD *v5;
  const char *v6;
  NSObject *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  BOOL v12;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_100112F30);
  if (qword_100112F38 && objc_getProperty((id)qword_100112F38, v4, 8, 1) == a1)
  {
    v5 = (id)qword_100112F38;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
    if (v5)
    {
      v7 = objc_getProperty(v5, v6, 24, 1);
      v8 = (void *)v5[4];
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v9 = v8;
    sub_1000A5848((uint64_t)v5);
    if (v7)
    {
      if (v9)
      {
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_1000A5DBC;
        v10[3] = &unk_1000F5860;
        v11 = v9;
        v12 = (a2 & 1) == 0;
        dispatch_async(v7, v10);

      }
    }

  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
  }
}

void sub_1000A5C20(uint64_t a1)
{
  void *v2;
  const char *v3;
  void *v4;
  const char *v5;
  id Property;
  __CFRunLoopSource *v7;
  __CFRunLoop *Current;
  const char *v9;
  void *v10;
  void *v11;
  const char *v12;
  id v13;
  id v14;
  __CFUserNotification *v15;
  const char *v16;
  void *v17;
  const char *v18;
  void *v19;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_100112F30);
  v2 = (void *)qword_100112F38;
  if (!qword_100112F38 || qword_100112F38 != *(_QWORD *)(a1 + 32))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
    return;
  }
  qword_100112F38 = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_100112F30);
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    if (objc_getProperty(v4, v3, 16, 1))
    {
      Property = *(id *)(a1 + 32);
      if (Property)
        Property = objc_getProperty(Property, v5, 16, 1);
      v7 = (__CFRunLoopSource *)Property;
      Current = CFRunLoopGetCurrent();
      CFRunLoopRemoveSource(Current, v7, kCFRunLoopDefaultMode);
      CFRelease(v7);
      v10 = *(void **)(a1 + 32);
      if (!v10)
        return;
      objc_setProperty_atomic(v10, v9, 0, 16);
    }
    v11 = *(void **)(a1 + 32);
    if (!v11)
      return;
    v13 = objc_getProperty(v11, v5, 8, 1);
    v14 = *(id *)(a1 + 32);
    if (!v13)
      goto LABEL_16;
    if (v14)
      v14 = objc_getProperty(v14, v12, 8, 1);
    v15 = (__CFUserNotification *)v14;
    CFUserNotificationCancel(v15);
    CFRelease(v15);
    v17 = *(void **)(a1 + 32);
    if (v17)
    {
      objc_setProperty_atomic(v17, v16, 0, 8);
      v14 = *(id *)(a1 + 32);
LABEL_16:
      if (v14)
      {
        objc_setProperty_nonatomic_copy(v14, v12, 0, 32);
        v19 = *(void **)(a1 + 32);
        if (v19)
          objc_setProperty_atomic(v19, v18, 0, 24);
      }
    }
  }
}

uint64_t sub_1000A5DBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1000A605C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000A6300(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A6328(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[4];
  void (**v18)(id, _QWORD);
  uint8_t buf[4];
  const char *v20;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_self(a1);
  if (!v5)
  {
    v16 = nplog_obj(v7, v8, v9);
    v15 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v20 = "+[NSPBAA signData:completionHandler:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "%s called with null dataToSign", buf, 0xCu);
    }
    goto LABEL_6;
  }
  v10 = +[NSPDeviceIdentityCertificate deviceSupportsDeviceIdentityWithSerialNumber](NSPDeviceIdentityCertificate, "deviceSupportsDeviceIdentityWithSerialNumber");
  if (!v10)
  {
    v14 = nplog_obj(v10, v11, v12);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Device does not support BAA", buf, 2u);
    }
LABEL_6:

    v6[2](v6, 0);
    goto LABEL_7;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSPDeviceIdentityCertificate sharedDeviceIdentity](NSPDeviceIdentityCertificate, "sharedDeviceIdentity"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000A64CC;
  v17[3] = &unk_1000F7000;
  v18 = v6;
  objc_msgSend(v13, "signData:andFetchDeviceIdentityCertificate:", v5, v17);

LABEL_7:
}

void sub_1000A64CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  CFDataRef v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  CFDataRef v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  void (*v34)(void);
  void *v35;
  uint8_t v36[16];
  __int16 v37;
  uint8_t v38[2];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = NPGetInternalQueue(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  dispatch_assert_queue_V2(v8);

  if (v5)
  {
    v9 = objc_msgSend(v6, "count");
    if (v9)
    {
      v12 = nplog_obj(v9, v10, v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fetched device identity certificate successfully", buf, 2u);
      }

      v14 = objc_alloc_init((Class)NSPPrivacyProxyBAAValidation);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", 0));

      v16 = SecCertificateCopyData((SecCertificateRef)v15);
      objc_msgSend(v14, "setLeafCertificate:", v16);

      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "leafCertificate"));
      if (v17)
      {
        if ((unint64_t)objc_msgSend(v6, "count") < 2)
        {
          v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "leafCertificate"));
          objc_msgSend(v14, "setIntermediateCertificate:", v35);

        }
        else
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", 1));

          v22 = SecCertificateCopyData((SecCertificateRef)v21);
          objc_msgSend(v14, "setIntermediateCertificate:", v22);

          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "intermediateCertificate"));
          if (!v23)
          {
            v27 = nplog_obj(v24, v25, v26);
            v28 = objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              v37 = 0;
              v29 = "failed to fetch intermediate certificate data";
              v30 = (uint8_t *)&v37;
LABEL_20:
              _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, v29, v30, 2u);
              goto LABEL_14;
            }
            goto LABEL_14;
          }
        }
        objc_msgSend(v14, "setBaaSignature:", v5);
        v34 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
        goto LABEL_17;
      }
      v33 = nplog_obj(v18, v19, v20);
      v28 = objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v38 = 0;
        v29 = "failed to fetch leaf certificate data";
        v30 = v38;
        goto LABEL_20;
      }
LABEL_14:

      v34 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
LABEL_17:
      v34();

      goto LABEL_18;
    }
  }
  v31 = nplog_obj(v9, v10, v11);
  v32 = objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v36 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to fetch device identity certificate", v36, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_18:

}

void sub_1000A6798(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *, void *, void *);
  void *v22;
  id v23;
  __int128 *p_buf;
  __int128 buf;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  if (!v7)
  {
    v18 = nplog_obj(v10, v11, v12);
    v15 = objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "+[NSPBAA fetchRequest:session:completionHandler:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "%s called with null request", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_9;
  }
  v13 = nplog_obj(v10, v11, v12);
  v14 = objc_claimAutoreleasedReturnValue(v13);
  v15 = v14;
  if (!v8)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = "+[NSPBAA fetchRequest:session:completionHandler:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
LABEL_9:

    (*((void (**)(id, _QWORD, _QWORD, _QWORD))v9 + 2))(v9, 0, 0, 0);
    goto LABEL_6;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URL"));
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending request for %@", (uint8_t *)&buf, 0xCu);

  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v26 = 0x3032000000;
  v27 = sub_10000318C;
  v28 = sub_1000A6A60;
  v29 = 0;
  v19 = _NSConcreteStackBlock;
  v20 = 3221225472;
  v21 = sub_1000A6A68;
  v22 = &unk_1000F6A58;
  p_buf = &buf;
  v23 = v9;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dataTaskWithRequest:completionHandler:", v7, &v19));
  objc_storeStrong((id *)(*((_QWORD *)&buf + 1) + 40), v17);
  objc_msgSend(*(id *)(*((_QWORD *)&buf + 1) + 40), "resume", v19, v20, v21, v22);

  _Block_object_dispose(&buf, 8);
LABEL_6:

}

void sub_1000A6A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A6A60(uint64_t a1)
{

}

void sub_1000A6A68(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;
  v9 = a4;
  v10 = a3;
  v11 = a2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A6D58(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setBaaParameters:", a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "data"));
    objc_msgSend(*(id *)(a1 + 40), "setHTTPBody:", v3);

    ++dword_100112F64;
    v4 = *(void **)(a1 + 40);
    v5 = *(void **)(a1 + 48);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000A6E50;
    v6[3] = &unk_1000F6FD8;
    v7 = *(id *)(a1 + 56);
    sub_1000A6798((uint64_t)NSPBAA, v4, v5, v6);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

uint64_t sub_1000A6E50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A6E6C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setBaaParameters:", a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "data"));
    objc_msgSend(*(id *)(a1 + 40), "setHTTPBody:", v3);

    ++dword_100112F64;
    v4 = *(void **)(a1 + 40);
    v5 = *(void **)(a1 + 48);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000A6F68;
    v6[3] = &unk_1000F6FD8;
    v7 = *(id *)(a1 + 56);
    sub_1000A6798((uint64_t)NSPBAA, v4, v5, v6);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

uint64_t sub_1000A6F68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A6F88(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t v17[8];
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  v11 = +[NSPDeviceIdentityCertificate deviceSupportsDeviceIdentityWithSerialNumber](NSPDeviceIdentityCertificate, "deviceSupportsDeviceIdentityWithSerialNumber");
  if (v11)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSPDeviceIdentityCertificate sharedDeviceIdentity](NSPDeviceIdentityCertificate, "sharedDeviceIdentity"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000A70D4;
    v18[3] = &unk_1000F7050;
    v19 = v8;
    v21 = v10;
    v20 = v9;
    objc_msgSend(v14, "signData:andFetchDeviceIdentityCertificate:", v7, v18);

  }
  else
  {
    v15 = nplog_obj(v11, v12, v13);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Device does not support BAA", v17, 2u);
    }

    (*((void (**)(id, _QWORD))v9 + 2))(v9, 0);
  }

}

void sub_1000A70D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  CFDataRef v19;
  void *v20;
  id v21;
  void *v22;
  CFDataRef v23;
  uint64_t v24;
  uint64_t v25;
  CFDataRef v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void (*v31)(void);
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  uint8_t v39[16];
  uint8_t v40[2];
  __int16 v41;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = NPGetInternalQueue(v6);
  v8 = objc_claimAutoreleasedReturnValue(v7);
  dispatch_assert_queue_V2(v8);

  if (v5)
  {
    v9 = objc_msgSend(v6, "count");
    if (v9)
    {
      v12 = nplog_obj(v9, v10, v11);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Fetched device identity certificate successfully", buf, 2u);
      }

      v14 = *(void **)(a1 + 32);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "description"));
      objc_msgSend(v14, "addValue:forHTTPHeaderField:", v15, CFSTR("Client-Auth-Type"));

      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", 0));
      v19 = SecCertificateCopyData((SecCertificateRef)v16);
      if (v19)
      {
        v20 = *(void **)(a1 + 32);
        v21 = +[NPUtilities copyBase64HeaderValueFromData:](NPUtilities, "copyBase64HeaderValueFromData:", v19);
        objc_msgSend(v20, "addValue:forHTTPHeaderField:", v21, CFSTR("Client-BAA-Leaf-Cert"));

        if ((unint64_t)objc_msgSend(v6, "count") < 2)
        {
LABEL_9:
          v29 = *(void **)(a1 + 32);
          v30 = +[NPUtilities copyBase64HeaderValueFromData:](NPUtilities, "copyBase64HeaderValueFromData:", v5);
          objc_msgSend(v29, "addValue:forHTTPHeaderField:", v30, CFSTR("Client-BAA-Signature"));

          v31 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_19:
          v31();

          goto LABEL_20;
        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectAtIndexedSubscript:", 1));

        v23 = SecCertificateCopyData((SecCertificateRef)v22);
        if (v23)
        {
          v26 = v23;
          v27 = *(void **)(a1 + 32);
          v28 = +[NPUtilities copyBase64HeaderValueFromData:](NPUtilities, "copyBase64HeaderValueFromData:", v23);
          objc_msgSend(v27, "addValue:forHTTPHeaderField:", v28, CFSTR("Client-BAA-Cert"));

          goto LABEL_9;
        }
        v38 = nplog_obj(0, v24, v25);
        v35 = objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v40 = 0;
          v36 = "failed to fetch intermediate certificate data";
          v37 = v40;
          goto LABEL_17;
        }
      }
      else
      {
        v34 = nplog_obj(0, v17, v18);
        v35 = objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v41 = 0;
          v36 = "failed to fetch leaf certificate data";
          v37 = (uint8_t *)&v41;
LABEL_17:
          _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, v36, v37, 2u);
        }
      }

      v31 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
      goto LABEL_19;
    }
  }
  v32 = nplog_obj(v9, v10, v11);
  v33 = objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v39 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to fetch device identity certificate", v39, 2u);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_20:

}

void sub_1000A75E4(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setHTTPBody:", *(_QWORD *)(a1 + 40));
    ++dword_100112F64;
    v3 = *(void **)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000A76B8;
    v5[3] = &unk_1000F6FD8;
    v4 = *(void **)(a1 + 48);
    v6 = *(id *)(a1 + 56);
    sub_1000A6798((uint64_t)NSPBAA, v3, v4, v5);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

uint64_t sub_1000A76B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000A76D4(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setHTTPBody:", *(_QWORD *)(a1 + 40));
    ++dword_100112F64;
    v3 = *(void **)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000A77AC;
    v5[3] = &unk_1000F6FD8;
    v4 = *(void **)(a1 + 48);
    v6 = *(id *)(a1 + 56);
    sub_1000A6798((uint64_t)NSPBAA, v3, v4, v5);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

uint64_t sub_1000A77AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000A7B40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  if ((a3 & 1) != 0)
    return (id)(*(uint64_t (**)(void))(a1[7] + 16))();
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Authentication fallback", v7, 2u);
  }

  return +[NSPAnisette sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandler:](NSPAnisette, "sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandler:", a1[4], a1[5], a1[6], a1[7]);
}

id sub_1000A7F10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  if ((a3 & 1) != 0)
    return (id)(*(uint64_t (**)(void))(a1[7] + 16))();
  v5 = nplog_obj(a1, a2, a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Authentication fallback", v7, 2u);
  }

  return +[NSPAnisette sendRequestForTokens:tokenFetchURLSession:messageBody:completionHandler:](NSPAnisette, "sendRequestForTokens:tokenFetchURLSession:messageBody:completionHandler:", a1[4], a1[5], a1[6], a1[7]);
}

void sub_1000A835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000A837C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = 0;
  v9 = a4;
  v10 = a3;
  v11 = a2;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1000A8AF8(unsigned int a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  const char *v12;
  size_t v13;
  void *v14;
  const char *v15;
  __int16 v17;
  __int16 v18;
  char v19;
  __int16 v20;
  __int16 v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_alloc_init((Class)NSMutableData);
  v21 = __rev16(a1);
  objc_msgSend(v10, "appendBytes:length:", &v21, 2);
  v11 = (const char *)objc_msgSend(v7, "UTF8String");
  v20 = bswap32(strlen(v11)) >> 16;
  objc_msgSend(v10, "appendBytes:length:", &v20, 2);
  objc_msgSend(v10, "appendBytes:length:", v11, strlen(v11));
  v19 = 32 * (v8 != 0);
  objc_msgSend(v10, "appendBytes:length:", &v19, 1);
  if (v8)
    objc_msgSend(v10, "appendData:", v8);
  if (v9)
  {
    v12 = (const char *)objc_msgSend(v9, "UTF8String");
    v18 = bswap32(strlen(v12)) >> 16;
    objc_msgSend(v10, "appendBytes:length:", &v18, 2);
    v13 = strlen(v12);
    v14 = v10;
    v15 = v12;
  }
  else
  {
    v17 = 0;
    v15 = (const char *)&v17;
    v14 = v10;
    v13 = 2;
  }
  objc_msgSend(v14, "appendBytes:length:", v15, v13);

  return v10;
}

NSObject *sub_1000A95A0(NSObject *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  SEL v19;
  SEL v20;
  void *v21;
  void *v22;
  SEL v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  SEL v33;
  id v34;
  void *v35;
  SEL v36;
  NSObject *v37;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  id v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  objc_super v48;
  uint8_t v49[128];
  uint8_t buf[4];
  const char *v51;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  if (!a1)
  {
    v37 = 0;
    goto LABEL_19;
  }
  if (v10 && (v12 = objc_msgSend(v10, "length"), v12 != (id)32))
  {
    v40 = nplog_obj(v12, v13, v14);
    v41 = objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v51 = "-[NSPPrivateAccessTokenChallenge initWithType:issuerName:redemptionNonce:originNames:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "%s called with null (redemptionNonce.length == 32)", buf, 0xCu);
    }

  }
  else
  {
    v48.receiver = a1;
    v48.super_class = (Class)NSPPrivateAccessTokenChallenge;
    v15 = -[NSObject init](&v48, "init");
    if (v15)
    {
      v18 = v15;
      v15[4] = a2;
      objc_setProperty_atomic(v15, v16, v9, 24);
      objc_setProperty_atomic(v18, v19, v10, 32);
      objc_setProperty_atomic(v18, v20, v11, 48);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "originNames"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "firstObject"));
      objc_setProperty_atomic(v18, v23, v22, 40);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "originNames"));
      v25 = objc_msgSend(v24, "count");

      if (v25)
      {
        v42 = v11;
        v43 = v9;
        v26 = objc_alloc_init((Class)NSMutableString);
        v44 = 0u;
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "originNames"));
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
        if (v28)
        {
          v29 = v28;
          v30 = *(_QWORD *)v45;
          do
          {
            v31 = 0;
            do
            {
              if (*(_QWORD *)v45 != v30)
                objc_enumerationMutation(v27);
              v32 = *(_QWORD *)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)v31);
              if (objc_msgSend(v26, "length", v42, v43))
                objc_msgSend(v26, "appendString:", CFSTR(","));
              objc_msgSend(v26, "appendString:", v32);
              v31 = (char *)v31 + 1;
            }
            while (v29 != v31);
            v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
          }
          while (v29);
        }

        objc_setProperty_atomic(v18, v33, v26, 56);
        v11 = v42;
        v9 = v43;
      }
      else
      {
        v26 = 0;
      }
      v34 = sub_1000A8AF8(a2, v9, v10, v26);
      v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      objc_setProperty_atomic(v18, v36, v35, 16);

      a1 = v18;
      v37 = a1;
      goto LABEL_18;
    }
    v39 = nplog_obj(0, v16, v17);
    a1 = objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(a1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_FAULT, "[super init] failed", buf, 2u);
    }
  }
  v37 = 0;
LABEL_18:

LABEL_19:
  return v37;
}

BOOL sub_1000A9C04(void *a1, int a2)
{
  _BOOL8 v2;
  void *v4;

  v2 = (_BOOL8)a1;
  if (a1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "redemptionNonce"));
    v2 = (!v4 || a2) && objc_msgSend((id)v2, "tokenType") == 2;

  }
  return v2;
}

NSObject *sub_1000A9D0C(NSObject *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  SEL v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  __int16 v41;
  objc_super v42;
  unsigned __int8 v43[16];
  __int128 v44;
  unsigned __int8 md[16];
  __int128 v46;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v15 = v12;
  if (!a1)
  {
    v30 = 0;
    goto LABEL_11;
  }
  if (!v9)
  {
    v32 = nplog_obj(v12, v13, v14);
    v29 = objc_claimAutoreleasedReturnValue(v32);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenResponse initWithChallenge:clientNonce:tokenKey:blindSignature:]";
    v33 = "%s called with null challenge";
LABEL_22:
    _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, v33, md, 0xCu);
    goto LABEL_23;
  }
  if (!v10)
  {
    v34 = nplog_obj(v12, v13, v14);
    v29 = objc_claimAutoreleasedReturnValue(v34);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenResponse initWithChallenge:clientNonce:tokenKey:blindSignature:]";
    v33 = "%s called with null clientNonce";
    goto LABEL_22;
  }
  v16 = objc_msgSend(v10, "length");
  if (v16 != (id)32)
  {
    v35 = nplog_obj(v16, v17, v18);
    v29 = objc_claimAutoreleasedReturnValue(v35);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenResponse initWithChallenge:clientNonce:tokenKey:blindSignature:]";
    v33 = "%s called with null (clientNonce.length == 32)";
    goto LABEL_22;
  }
  if (!v11)
  {
    v36 = nplog_obj(32, v17, v18);
    v29 = objc_claimAutoreleasedReturnValue(v36);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenResponse initWithChallenge:clientNonce:tokenKey:blindSignature:]";
    v33 = "%s called with null tokenKey";
    goto LABEL_22;
  }
  if (v15)
  {
    v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "challengeData"));
    if (v19)
    {
      v22 = v19;
      v42.receiver = a1;
      v42.super_class = (Class)NSPPrivateAccessTokenResponse;
      v23 = -[NSObject init](&v42, "init");
      if (v23)
      {
        v26 = v23;
        v27 = objc_alloc_init((Class)NSMutableData);
        v41 = __rev16(objc_msgSend(v9, "tokenType"));
        objc_msgSend(v27, "appendBytes:length:", &v41, 2);
        objc_msgSend(v27, "appendData:", v10);
        *(_OWORD *)md = 0u;
        v46 = 0u;
        CC_SHA256(-[NSObject bytes](v22, "bytes"), (CC_LONG)-[NSObject length](v22, "length"), md);
        objc_msgSend(v27, "appendBytes:length:", md, 32);
        *(_OWORD *)v43 = 0u;
        v44 = 0u;
        CC_SHA256(objc_msgSend(v11, "bytes"), (CC_LONG)objc_msgSend(v11, "length"), v43);
        objc_msgSend(v27, "appendBytes:length:", v43, 32);
        objc_msgSend(v27, "appendData:", v15);
        objc_setProperty_atomic(v26, v28, v27, 8);
        v29 = v26;

        a1 = v22;
        v30 = v29;
      }
      else
      {
        v40 = nplog_obj(0, v24, v25);
        v29 = objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)md = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "[super init] failed", md, 2u);
        }
        v30 = 0;
        a1 = v22;
      }
    }
    else
    {
      v38 = nplog_obj(0, v20, v21);
      v39 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)md = 136315138;
        *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenResponse initWithChallenge:clientNonce:tokenKey:blindSignature:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "%s called with null challengeData", md, 0xCu);
      }

      v30 = 0;
      v29 = a1;
      a1 = 0;
    }
    goto LABEL_10;
  }
  v37 = nplog_obj(32, v17, v18);
  v29 = objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenResponse initWithChallenge:clientNonce:tokenKey:blindSignature:]";
    v33 = "%s called with null blindSignature";
    goto LABEL_22;
  }
LABEL_23:
  v30 = 0;
LABEL_10:

LABEL_11:
  return v30;
}

BOOL sub_1000AA12C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BOOL8 v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_self(a1);
  if (!v5)
  {
    v15 = nplog_obj(v7, v8, v9);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    {
LABEL_20:

LABEL_21:
      v14 = 0;
      goto LABEL_22;
    }
    LODWORD(v20) = 136315138;
    *(_QWORD *)((char *)&v20 + 4) = "+[NSPPrivateAccessTokenResponse responseData:matchesTokenKey:]";
    v17 = "%s called with null responseData";
LABEL_24:
    _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, v17, (uint8_t *)&v20, 0xCu);
    goto LABEL_20;
  }
  if (!v6)
  {
    v18 = nplog_obj(v7, v8, v9);
    v16 = objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      goto LABEL_20;
    LODWORD(v20) = 136315138;
    *(_QWORD *)((char *)&v20 + 4) = "+[NSPPrivateAccessTokenResponse responseData:matchesTokenKey:]";
    v17 = "%s called with null tokenKey";
    goto LABEL_24;
  }
  v20 = 0u;
  v21 = 0u;
  CC_SHA256(objc_msgSend(v6, "bytes"), (CC_LONG)objc_msgSend(v6, "length"), (unsigned __int8 *)&v20);
  if ((unint64_t)objc_msgSend(v5, "length") < 0x62)
    goto LABEL_21;
  v10 = (char *)objc_msgSend(v5, "bytes");
  if (!v10)
    goto LABEL_21;
  v14 = *(_QWORD *)(v10 + 66) == (_QWORD)v20
     && *(_QWORD *)(v10 + 74) == *((_QWORD *)&v20 + 1)
     && *(_QWORD *)(v10 + 82) == (_QWORD)v21
     && *(_QWORD *)(v10 + 90) == *((_QWORD *)&v21 + 1);
LABEL_22:

  return v14;
}

BOOL sub_1000AA2D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  _BOOL8 v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __int128 v25;
  __int128 v26;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_self(a1);
  if (!v5)
  {
    v19 = nplog_obj(v7, v8, v9);
    v13 = objc_claimAutoreleasedReturnValue(v19);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      goto LABEL_26;
    LODWORD(v25) = 136315138;
    *(_QWORD *)((char *)&v25 + 4) = "+[NSPPrivateAccessTokenResponse responseData:matchesChallenge:]";
    v20 = "%s called with null responseData";
LABEL_22:
    _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, v20, (uint8_t *)&v25, 0xCu);
    goto LABEL_26;
  }
  if (!v6)
  {
    v21 = nplog_obj(v7, v8, v9);
    v13 = objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      goto LABEL_26;
    LODWORD(v25) = 136315138;
    *(_QWORD *)((char *)&v25 + 4) = "+[NSPPrivateAccessTokenResponse responseData:matchesChallenge:]";
    v20 = "%s called with null challenge";
    goto LABEL_22;
  }
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "challengeData"));
  if (!v10)
  {
    v22 = nplog_obj(0, v11, v12);
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v25) = 136315138;
      *(_QWORD *)((char *)&v25 + 4) = "+[NSPPrivateAccessTokenResponse responseData:matchesChallenge:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "%s called with null challengeData", (uint8_t *)&v25, 0xCu);
    }

    v13 = 0;
    goto LABEL_26;
  }
  v13 = v10;
  v25 = 0u;
  v26 = 0u;
  CC_SHA256(-[NSObject bytes](v10, "bytes"), (CC_LONG)-[NSObject length](v10, "length"), (unsigned __int8 *)&v25);
  if ((unint64_t)objc_msgSend(v5, "length") < 0x42 || (v14 = (char *)objc_msgSend(v5, "bytes")) == 0)
  {
LABEL_26:
    v18 = 0;
    goto LABEL_27;
  }
  v18 = *(_QWORD *)(v14 + 34) == (_QWORD)v25
     && *(_QWORD *)(v14 + 42) == *((_QWORD *)&v25 + 1)
     && *(_QWORD *)(v14 + 50) == (_QWORD)v26
     && *(_QWORD *)(v14 + 58) == *((_QWORD *)&v26 + 1);
LABEL_27:

  return v18;
}

id sub_1000AA4F0()
{
  objc_opt_self();
  if (qword_100112F48 != -1)
    dispatch_once(&qword_100112F48, &stru_1000F70C0);
  return (id)qword_100112F40;
}

void sub_1000AA534(id a1)
{
  NSPPrivateAccessTokenClientState *v1;
  void *v2;

  v1 = objc_alloc_init(NSPPrivateAccessTokenClientState);
  v2 = (void *)qword_100112F40;
  qword_100112F40 = (uint64_t)v1;

}

uint64_t sub_1000AA55C(uint64_t a1)
{
  id v1;
  _QWORD *v2;
  uint64_t v3;

  objc_opt_self(a1);
  v1 = sub_1000AA4F0();
  v2 = (_QWORD *)objc_claimAutoreleasedReturnValue(v1);
  if (v2)
    v3 = v2[1];
  else
    v3 = 0;

  return v3;
}

id sub_1000AAAC8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  id v20;
  char *v21;
  id v22;
  SEL v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  void *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  void *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  void *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  size_t v74;
  size_t size;
  id v76;
  id v77;
  id v78;
  uint8_t buf[4];
  const char *v80;

  v3 = a2;
  v6 = v3;
  if (!a1)
    goto LABEL_18;
  if (!v3)
  {
    v69 = nplog_obj(0, v4, v5);
    v36 = objc_claimAutoreleasedReturnValue(v69);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 136315138;
    v80 = "-[NSPPrivateAccessTokenRequest decryptResponse:]";
    v70 = "%s called with null responseData";
    goto LABEL_45;
  }
  if (*(_WORD *)(a1 + 10) == 3)
  {
    if (*(_QWORD *)(a1 + 96))
    {
      if (objc_getProperty((id)a1, v4, 104, 1))
      {
        v9 = *(_QWORD *)(a1 + 96);
        v10 = cchpke_params_x25519_AESGCM128_HKDF_SHA256();
        v11 = cchpke_params_sizeof_aead_key();
        v12 = cchpke_params_sizeof_aead_nonce(v10);
        v13 = cchpke_params_sizeof_aead_tag(v10);
        v14 = (char *)objc_msgSend(v6, "bytes");
        v15 = (const char *)objc_msgSend(v6, "length");
        if (v11 <= v12)
          v18 = v12;
        else
          v18 = v11;
        if ((unint64_t)v15 > v18 + v13)
        {
          size = v12;
          v19 = (char *)&v15[-v18 - v13];
          v20 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v14, v18);
          v21 = &v14[v18];
          v76 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v21, v19);
          v78 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v19[(_QWORD)v21], v13);
          v22 = objc_alloc_init((Class)NSMutableData);
          objc_msgSend(v22, "appendData:", objc_getProperty((id)a1, v23, 104, 1));
          objc_msgSend(v22, "appendData:", v20);
          v24 = malloc_type_calloc(1uLL, v11, 0xEFF7EA9DuLL);
          v25 = cchpke_initiator_export(v9, 13, "TokenResponse", v11, v24);
          if ((_DWORD)v25)
          {
            v28 = v25;
            v29 = nplog_obj(v25, v26, v27);
            v30 = objc_claimAutoreleasedReturnValue(v29);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v80) = v28;
              _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Export error: %d", buf, 8u);
            }

            free(v24);
            v31 = 0;
            v32 = v76;
            v33 = v20;
            goto LABEL_36;
          }
          v74 = (size_t)v19;
          v77 = v20;
          v37 = cchpke_params_sizeof_kdf_hash(v10);
          v38 = malloc_type_calloc(1uLL, v37, 0x538DDCF3uLL);
          v39 = ccsha256_di();
          v40 = cchkdf_extract(v39, objc_msgSend(v22, "length"), objc_msgSend(v22, "bytes"), v11, v24, v38);
          free(v24);
          if (v40)
          {
            v44 = nplog_obj(v41, v42, v43);
            v45 = objc_claimAutoreleasedReturnValue(v44);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v80) = v40;
              _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Extract error: %d", buf, 8u);
            }

            free(v38);
            v31 = 0;
            v32 = v76;
            v33 = v20;
            goto LABEL_36;
          }
          v46 = malloc_type_calloc(1uLL, v11, 0xDE42FD19uLL);
          v47 = cchkdf_expand(v39, v37, v38, 3, "key", v11, v46);
          if ((_DWORD)v47)
          {
            v50 = v47;
            v51 = nplog_obj(v47, v48, v49);
            v52 = objc_claimAutoreleasedReturnValue(v51);
            v33 = v77;
            if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v80) = v50;
              _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "Key expand error: %d", buf, 8u);
            }

            free(v38);
            free(v46);
            v31 = 0;
            v32 = v76;
            goto LABEL_36;
          }
          v53 = malloc_type_calloc(1uLL, size, 0xD8E0BF9BuLL);
          v54 = cchkdf_expand(v39, v37, v38, 5, "nonce", size, v53);
          free(v38);
          v33 = v77;
          if (v54)
          {
            v58 = nplog_obj(v55, v56, v57);
            v59 = objc_claimAutoreleasedReturnValue(v58);
            v32 = v76;
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v80) = v54;
              _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Nonce expand error: %d", buf, 8u);
            }

            free(v46);
            v60 = v53;
          }
          else
          {
            v73 = malloc_type_calloc(1uLL, v74, 0x63423267uLL);
            v61 = ccaes_gcm_decrypt_mode();
            v32 = v76;
            v62 = ccgcm_one_shot(v61, v11, v46, size, v53, 0, "", v74, objc_msgSend(v76, "bytes"), v73, v13, objc_msgSend(v78, "bytes"));
            free(v46);
            free(v53);
            if (!v62)
            {
              v31 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v73, v74);
              free(v73);
              v33 = v77;
              goto LABEL_36;
            }
            v66 = nplog_obj(v63, v64, v65);
            v67 = objc_claimAutoreleasedReturnValue(v66);
            v33 = v77;
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              LODWORD(v80) = v62;
              _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Decrypt error: %d", buf, 8u);
            }

            v60 = v73;
          }
          free(v60);
          v31 = 0;
LABEL_36:

          goto LABEL_37;
        }
        v34 = v15;
        v35 = nplog_obj(v15, v16, v17);
        v36 = objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          v80 = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Invalid length %zu", buf, 0xCu);
        }
        goto LABEL_17;
      }
      v72 = nplog_obj(0, v7, v8);
      v36 = objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        v80 = "-[NSPPrivateAccessTokenRequest decryptResponse:]";
        v70 = "%s called with null self.hpkeEnc";
        goto LABEL_45;
      }
LABEL_17:

LABEL_18:
      v31 = 0;
      goto LABEL_37;
    }
    v71 = nplog_obj(v3, v4, v5);
    v36 = objc_claimAutoreleasedReturnValue(v71);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      goto LABEL_17;
    *(_DWORD *)buf = 136315138;
    v80 = "-[NSPPrivateAccessTokenRequest decryptResponse:]";
    v70 = "%s called with null self.hpkeContext";
LABEL_45:
    _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, v70, buf, 0xCu);
    goto LABEL_17;
  }
  v31 = v3;
LABEL_37:

  return v31;
}

id sub_1000AB1DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];
  _OWORD bytes[2];

  objc_opt_self(a1);
  memset(bytes, 0, sizeof(bytes));
  v1 = SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, bytes);
  if ((v1 & 0x80000000) != 0)
  {
    v5 = nplog_obj(v1, v2, v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "generate tokens: SecRandomCopyBytes failed", v8, 2u);
    }

    v4 = 0;
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes, 32));
  }
  return v4;
}

id sub_1000AB2B8(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  __int128 v13;
  _OWORD bytes[2];

  v5 = a2;
  objc_opt_self(a1);
  memset(bytes, 0, sizeof(bytes));
  v6 = SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, bytes);
  if ((v6 & 0x80000000) != 0)
  {
    v11 = nplog_obj(v6, v7, v8);
    v9 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "generate tokens: SecRandomCopyBytes failed", (uint8_t *)&v13, 2u);
    }
    v10 = 0;
  }
  else
  {
    if (a3)
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes, 32));
    v9 = objc_msgSend(v5, "mutableCopy");
    -[NSObject appendBytes:length:](v9, "appendBytes:length:", bytes, 32);
    CC_SHA256(-[NSObject bytes](v9, "bytes", 0, 0, 0, 0), (CC_LONG)-[NSObject length](v9, "length"), (unsigned __int8 *)&v13);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v13, 32));
  }

  return v10;
}

id sub_1000AB420(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unsigned __int8 v26[16];
  __int128 v27;
  unsigned __int8 md[16];
  __int128 v29;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = objc_opt_self(a1);
  if (!v7)
  {
    v19 = nplog_obj(v10, v11, v12);
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      goto LABEL_16;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "+[NSPPrivateAccessTokenRequest messageToBlindForChallenge:clientNonce:tokenKey:]";
    v21 = "%s called with null challenge";
LABEL_15:
    _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, v21, md, 0xCu);
    goto LABEL_16;
  }
  if (!v8)
  {
    v22 = nplog_obj(v10, v11, v12);
    v20 = objc_claimAutoreleasedReturnValue(v22);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      goto LABEL_16;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "+[NSPPrivateAccessTokenRequest messageToBlindForChallenge:clientNonce:tokenKey:]";
    v21 = "%s called with null clientNonce";
    goto LABEL_15;
  }
  v13 = objc_msgSend(v8, "length");
  if (v13 != (id)32)
  {
    v23 = nplog_obj(v13, v14, v15);
    v20 = objc_claimAutoreleasedReturnValue(v23);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      goto LABEL_16;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "+[NSPPrivateAccessTokenRequest messageToBlindForChallenge:clientNonce:tokenKey:]";
    v21 = "%s called with null (clientNonce.length == 32)";
    goto LABEL_15;
  }
  if (!v9)
  {
    v24 = nplog_obj(32, v14, v15);
    v20 = objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)md = 136315138;
      *(_QWORD *)&md[4] = "+[NSPPrivateAccessTokenRequest messageToBlindForChallenge:clientNonce:tokenKey:]";
      v21 = "%s called with null tokenKey";
      goto LABEL_15;
    }
LABEL_16:

    v16 = 0;
    goto LABEL_6;
  }
  v16 = objc_alloc_init((Class)NSMutableData);
  v25 = __rev16(objc_msgSend(v7, "tokenType"));
  objc_msgSend(v16, "appendBytes:length:", &v25, 2);
  objc_msgSend(v16, "appendData:", v8);
  *(_OWORD *)md = 0u;
  v29 = 0u;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "challengeData"));
  CC_SHA256(objc_msgSend(v17, "bytes"), (CC_LONG)objc_msgSend(v17, "length"), md);
  objc_msgSend(v16, "appendBytes:length:", md, 32);
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  CC_SHA256(objc_msgSend(v9, "bytes"), (CC_LONG)objc_msgSend(v9, "length"), v26);
  objc_msgSend(v16, "appendBytes:length:", v26, 32);

LABEL_6:
  return v16;
}

id sub_1000AB6C4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  unsigned __int8 v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  SEL v37;
  id v38;
  SEL v39;
  id v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  NSObject *v48;
  uint32_t v49;
  const char *v50;
  id v51;
  uint64_t v52;
  NSObject *v53;
  char *v54;
  id v55;
  SEL v56;
  SEL v57;
  const char *v58;
  id v59;
  SEL v60;
  SEL v61;
  SEL v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  int v70;
  id v71;
  SEL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  void *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  const char *v94;
  uint8_t *v95;
  void *v96;
  __SecKey *v97;
  uint64_t v98;
  uint64_t v99;
  SecKeyRef v100;
  uint64_t v101;
  uint64_t v102;
  SecKeyRef v103;
  const __CFDictionary *v104;
  SecKeyRef RandomKey;
  SecKeyRef v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  SEL v113;
  SEL v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  SEL v118;
  SEL v119;
  id v120;
  id v121;
  SEL v122;
  SEL v123;
  const char *v124;
  size_t v125;
  size_t v126;
  uint64_t v127;
  size_t v128;
  void *v129;
  size_t v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  void *v139;
  uint64_t v140;
  NSObject *v141;
  BOOL v142;
  _UNKNOWN **v143;
  uint64_t v144;
  NSObject *v145;
  const char *v146;
  id v147;
  SEL v148;
  SEL v149;
  SEL v150;
  id Property;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  SEL v156;
  SEL v157;
  const char *v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _UNKNOWN **v169;
  id v170;
  SEL v171;
  SEL v172;
  SEL v173;
  SEL v174;
  id v175;
  uint64_t v176;
  void *v177;
  id v178;
  SEL v179;
  SEL v180;
  uint64_t v181;
  uint64_t v182;
  SEL v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  NSObject *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  const __CFDictionary *v202;
  uint64_t v203;
  NSObject *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  NSObject *v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  id v222;
  uint64_t v223;
  size_t v224;
  id v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  BOOL v230;
  void *v231;
  const __CFDictionary *v232;
  void *cf;
  SecKeyRef cfa;
  id cfb;
  size_t v236;
  id v237;
  void *v238;
  id v239;
  __int16 v240;
  unsigned __int8 v241;
  objc_super v242;
  id v243;
  __int16 v244;
  char v245;
  __int16 v246;
  __int16 v247;
  char v248;
  __int16 v249;
  uint8_t buf[16];
  __int128 v251;
  unsigned __int8 md[32];
  _BYTE v253[12];
  __int128 v254;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v18 = v15;
  if (!a1)
  {
    v51 = 0;
    goto LABEL_47;
  }
  if (!v11)
  {
    v207 = nplog_obj(v15, v16, v17);
    v53 = objc_claimAutoreleasedReturnValue(v207);
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenRequest initWithChallenge:tokenKey:originNameKey:selectedOrigin:blindedMessage:]";
    v208 = "%s called with null challenge";
    goto LABEL_116;
  }
  if (!v12)
  {
    v209 = nplog_obj(v15, v16, v17);
    v53 = objc_claimAutoreleasedReturnValue(v209);
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenRequest initWithChallenge:tokenKey:originNameKey:selectedOrigin:blindedMessage:]";
    v208 = "%s called with null tokenKey";
    goto LABEL_116;
  }
  if (!v15)
  {
    v210 = nplog_obj(0, v16, v17);
    v53 = objc_claimAutoreleasedReturnValue(v210);
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenRequest initWithChallenge:tokenKey:originNameKey:selectedOrigin:blindedMessage:]";
    v208 = "%s called with null blindedMessage";
    goto LABEL_116;
  }
  v19 = objc_msgSend(v11, "isSupportedTokenType");
  if ((v19 & 1) == 0)
  {
    v211 = nplog_obj(v19, v20, v21);
    v53 = objc_claimAutoreleasedReturnValue(v211);
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
      goto LABEL_23;
    *(_DWORD *)md = 136315138;
    *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenRequest initWithChallenge:tokenKey:originNameKey:selectedOrigin:blindedMessage:]";
    v208 = "%s called with null challenge.isSupportedTokenType";
    goto LABEL_116;
  }
  if (objc_msgSend(v11, "tokenType") == 3)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "originName"));

    if (v22)
    {
      if (v13)
        goto LABEL_9;
      v214 = nplog_obj(v23, v24, v25);
      v53 = objc_claimAutoreleasedReturnValue(v214);
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
        goto LABEL_23;
      *(_DWORD *)md = 136315138;
      *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenRequest initWithChallenge:tokenKey:originNameKey:selectedOrigin:blindedMessage:]";
      v208 = "%s called with null issuerEncapKey";
    }
    else
    {
      v213 = nplog_obj(v23, v24, v25);
      v53 = objc_claimAutoreleasedReturnValue(v213);
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
        goto LABEL_23;
      *(_DWORD *)md = 136315138;
      *(_QWORD *)&md[4] = "-[NSPPrivateAccessTokenRequest initWithChallenge:tokenKey:originNameKey:selectedOrigin:blindedMessage:]";
      v208 = "%s called with null challenge.originName";
    }
LABEL_116:
    _os_log_fault_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, v208, md, 0xCu);
    goto LABEL_23;
  }
LABEL_9:
  v242.receiver = (id)a1;
  v242.super_class = (Class)NSPPrivateAccessTokenRequest;
  v26 = objc_msgSendSuper2(&v242, "init");
  if (!v26)
  {
    v212 = nplog_obj(0, v27, v28);
    a1 = objc_claimAutoreleasedReturnValue(v212);
    if (os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)md = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)a1, OS_LOG_TYPE_FAULT, "[super init] failed", md, 2u);
    }
    goto LABEL_24;
  }
  a1 = (uint64_t)v26;
  v26[5] = (unsigned __int16)objc_msgSend(v11, "tokenType");
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "originNames"));
  v30 = objc_msgSend(v29, "count");

  if (!v14 || (unint64_t)v30 < 2)
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "originName"));
    objc_setProperty_atomic((id)a1, v37, v36, 56);

LABEL_15:
    memset(md, 0, sizeof(md));
    CC_SHA256(objc_msgSend(v12, "bytes"), (CC_LONG)objc_msgSend(v12, "length"), md);
    v241 = md[31];
    *(_BYTE *)(a1 + 9) = md[31];
    v38 = objc_alloc_init((Class)NSMutableData);
    v240 = __rev16(*(unsigned __int16 *)(a1 + 10));
    objc_msgSend(v38, "appendBytes:length:", &v240, 2);
    objc_setProperty_atomic((id)a1, v39, v18, 32);
    if (*(_WORD *)(a1 + 10) != 3)
    {
      objc_msgSend(v38, "appendBytes:length:", &v241, 1);
      objc_msgSend(v38, "appendData:", v18);
LABEL_20:
      objc_setProperty_atomic((id)a1, v50, v38, 24);
      v51 = (id)a1;
LABEL_45:

      goto LABEL_46;
    }
    v239 = v13;
    v40 = v13;
    v41 = objc_msgSend(v40, "length");
    v42 = (char *)objc_msgSend(v40, "bytes");
    if ((unint64_t)v41 <= 0x26)
    {
      v45 = nplog_obj(v42, v43, v44);
      v46 = objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v41;
        v47 = "Config length is too short: %zu";
        v48 = v46;
        v49 = 12;
LABEL_42:
        _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, v47, buf, v49);
      }
LABEL_43:
      v13 = v239;

      v91 = nplog_obj(v88, v89, v90);
      v92 = objc_claimAutoreleasedReturnValue(v91);
      if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
LABEL_44:

        v51 = 0;
        goto LABEL_45;
      }
      *(_WORD *)buf = 0;
      v94 = "Failed to parse origin name key";
      goto LABEL_49;
    }
    v54 = v42;
    if (*(_WORD *)(v42 + 1) == 0x2000)
    {
      if (*(_WORD *)(v42 + 35) == 256)
      {
        if (*(_WORD *)(v42 + 37) == 256)
        {
          *(_BYTE *)(a1 + 8) = *v42;
          *(_WORD *)(a1 + 12) = *(_WORD *)(v42 + 1);
          *(_WORD *)(a1 + 14) = *(_WORD *)(v42 + 35);
          *(_WORD *)(a1 + 16) = *(_WORD *)(v42 + 37);
          v55 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v42 + 3, 32);
          objc_setProperty_atomic((id)a1, v56, v55, 40);

          if (objc_getProperty((id)a1, v57, 72, 1))
            goto LABEL_29;
          v97 = (__SecKey *)sub_1000AA55C((uint64_t)NSPPrivateAccessTokenClientState);
          if (v97)
          {
            v100 = SecKeyCopyPublicKey(v97);
            if (v100)
            {
              v103 = v100;
              *(_QWORD *)&v254 = kSecAttrKeyType;
              *((_QWORD *)&v254 + 1) = kSecAttrKeySizeInBits;
              *(_QWORD *)buf = kSecAttrKeyTypeECSECPrimeRandom;
              *(_QWORD *)&buf[8] = &off_1000FF818;
              v104 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", buf, &v254, 2));
              RandomKey = SecKeyCreateRandomKey(v104, 0);
              if (RandomKey)
              {
                v232 = v104;
                v106 = RandomKey;
                v107 = objc_alloc_init((Class)NSMutableData);
                v249 = __rev16(*(unsigned __int16 *)(a1 + 10));
                objc_msgSend(v107, "appendBytes:length:", &v249, 2);
                objc_msgSend(v107, "appendBytes:length:", "ClientBlind", 11);
                v243 = 0;
                cfa = v106;
                v108 = +[CKPATKeyBlinding blindPublicKey:withPrivateKey:context:error:](CKPATKeyBlinding, "blindPublicKey:withPrivateKey:context:error:", v103, v106, v107, &v243);
                v237 = v243;
                CFRelease(v103);
                if (v108)
                {
                  v112 = (void *)objc_claimAutoreleasedReturnValue(+[CKPATKeyBlinding compressedRepresentationFromSecKey:](CKPATKeyBlinding, "compressedRepresentationFromSecKey:", v108));
                  objc_setProperty_atomic((id)a1, v113, v112, 72);

                  CFRelease(v108);
                  if (objc_getProperty((id)a1, v114, 72, 1))
                  {
                    *(_QWORD *)(a1 + 88) = cfa;

LABEL_29:
                    objc_msgSend(v38, "appendData:", objc_getProperty((id)a1, v58, 72, 1));
                    *(_OWORD *)buf = 0u;
                    v251 = 0u;
                    CC_SHA256(objc_msgSend(v40, "bytes"), (CC_LONG)objc_msgSend(v40, "length"), buf);
                    v59 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", buf, 32);
                    objc_setProperty_atomic((id)a1, v60, v59, 48);

                    objc_msgSend(v38, "appendData:", objc_getProperty((id)a1, v61, 48, 1));
                    v63 = objc_getProperty((id)a1, v62, 40, 1);
                    if (!v63)
                    {
                      v215 = nplog_obj(0, v64, v65);
                      v216 = objc_claimAutoreleasedReturnValue(v215);
                      if (os_log_type_enabled(v216, OS_LOG_TYPE_FAULT))
                      {
                        LODWORD(v254) = 136315138;
                        *(_QWORD *)((char *)&v254 + 4) = "-[NSPPrivateAccessTokenRequest encryptTokenRequest]";
                        _os_log_fault_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_FAULT, "%s called with null issuerEncapKey", (uint8_t *)&v254, 0xCu);
                      }

                      v78 = 0;
                      v13 = v239;
                      goto LABEL_34;
                    }
                    v66 = v63;
                    v67 = cchpke_params_x25519_AESGCM128_HKDF_SHA256();
                    v236 = cchpke_params_sizeof_kem_enc();
                    cf = malloc_type_calloc(1uLL, 0x60uLL, 0x10600407D690DC1uLL);
                    v68 = malloc_type_calloc(1uLL, v236, 0x570B5142uLL);
                    *(_DWORD *)v253 = 0;
                    v69 = ccrng(v253);
                    v231 = v66;
                    v228 = (void *)v67;
                    v70 = cchpke_initiator_setup(cf, v67, v69, 32, objc_msgSend(v66, "bytes"), 12, "TokenRequest", v236, v68);
                    v71 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v68, v236);
                    objc_setProperty_atomic((id)a1, v72, v71, 104);

                    free(v68);
                    if (v70)
                    {
                      v76 = nplog_obj(v73, v74, v75);
                      v77 = objc_claimAutoreleasedReturnValue(v76);
                      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v254) = 67109120;
                        DWORD1(v254) = v70;
                        _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Setup error: %d", (uint8_t *)&v254, 8u);
                      }

                      free(cf);
                      v13 = v239;
                      v78 = v66;
LABEL_34:

LABEL_78:
                      v184 = nplog_obj(v79, v80, v81);
                      v92 = objc_claimAutoreleasedReturnValue(v184);
                      if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
                        goto LABEL_44;
                      LOWORD(v254) = 0;
                      v94 = "Failed to encrypt the token request";
                      goto LABEL_80;
                    }
                    *(_QWORD *)(a1 + 96) = cf;
                    v117 = objc_alloc_init((Class)NSMutableData);
                    v248 = *(_BYTE *)(a1 + 8);
                    objc_msgSend(v117, "appendBytes:length:", &v248, 1);
                    LOWORD(v243) = *(_WORD *)(a1 + 12);
                    objc_msgSend(v117, "appendBytes:length:", &v243, 2);
                    v249 = *(_WORD *)(a1 + 14);
                    objc_msgSend(v117, "appendBytes:length:", &v249, 2);
                    v247 = *(_WORD *)(a1 + 16);
                    objc_msgSend(v117, "appendBytes:length:", &v247, 2);
                    v246 = __rev16(*(unsigned __int16 *)(a1 + 10));
                    v238 = v117;
                    objc_msgSend(v117, "appendBytes:length:", &v246, 2);
                    objc_msgSend(v117, "appendData:", objc_getProperty((id)a1, v118, 72, 1));
                    objc_msgSend(v117, "appendData:", objc_getProperty((id)a1, v119, 48, 1));
                    v120 = objc_alloc_init((Class)NSMutableData);
                    v245 = *(_BYTE *)(a1 + 9);
                    v121 = v120;
                    cfb = v120;
                    objc_msgSend(v120, "appendBytes:length:", &v245, 1);
                    objc_msgSend(v121, "appendData:", objc_getProperty((id)a1, v122, 32, 1));
                    v225 = objc_getProperty((id)a1, v123, 56, 1);
                    v124 = (const char *)objc_msgSend(v225, "UTF8String");
                    v125 = strlen(v124);
                    v126 = v125;
                    v127 = -(int)v125 & 0x1FLL;
                    if (!v125)
                      v127 = 32;
                    v128 = v127 + v125;
                    v129 = malloc_type_calloc(1uLL, v127 + v125, 0x39D20779uLL);
                    memcpy(v129, v124, v126);
                    v244 = bswap32(v128) >> 16;
                    objc_msgSend(cfb, "appendBytes:length:", &v244, 2);
                    objc_msgSend(cfb, "appendBytes:length:", v129, v128);
                    free(v129);
                    v226 = malloc_type_calloc(1uLL, (size_t)objc_msgSend(cfb, "length"), 0x24B261BDuLL);
                    v130 = cchpke_params_sizeof_aead_tag(v228);
                    v229 = malloc_type_calloc(1uLL, v130, 0x80A4CFCDuLL);
                    v223 = *(_QWORD *)(a1 + 96);
                    v222 = objc_msgSend(v238, "length");
                    v131 = objc_msgSend(v238, "bytes");
                    v132 = objc_msgSend(cfb, "length");
                    v133 = objc_msgSend(cfb, "bytes");
                    v134 = v223;
                    v224 = v130;
                    v135 = cchpke_initiator_encrypt(v134, v222, v131, v132, v133, v226, v130, v229);
                    if ((_DWORD)v135)
                    {
                      v138 = v135;
                      v139 = cfb;
                      v140 = nplog_obj(v135, v136, v137);
                      v141 = objc_claimAutoreleasedReturnValue(v140);
                      v13 = v239;
                      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
                      {
                        LODWORD(v254) = 67109120;
                        DWORD1(v254) = v138;
                        _os_log_error_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_ERROR, "Encrypt error: %d", (uint8_t *)&v254, 8u);
                      }

                      free(v229);
                      free(v226);
                      v142 = 0;
                      v143 = &AnalyticsSendEventLazy_ptr;
                    }
                    else
                    {
                      v147 = objc_alloc_init((Class)NSMutableData);
                      objc_msgSend(v147, "appendData:", objc_getProperty((id)a1, v148, 104, 1));
                      v139 = cfb;
                      objc_msgSend(v147, "appendBytes:length:", v226, objc_msgSend(cfb, "length"));
                      objc_msgSend(v147, "appendBytes:length:", v229, v224);
                      free(v229);
                      free(v226);
                      objc_setProperty_atomic((id)a1, v149, v147, 64);
                      Property = objc_getProperty((id)a1, v150, 64, 1);
                      v230 = Property != 0;
                      v13 = v239;
                      if (!Property)
                      {
                        v227 = v147;
                        v154 = nplog_obj(0, v152, v153);
                        v155 = objc_claimAutoreleasedReturnValue(v154);
                        if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
                        {
                          LOWORD(v254) = 0;
                          _os_log_error_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_ERROR, "Error creating encrypted token request", (uint8_t *)&v254, 2u);
                        }

                        v147 = v227;
                      }

                      v143 = &AnalyticsSendEventLazy_ptr;
                      v142 = v230;
                    }

                    if (!v142)
                      goto LABEL_78;
                    v247 = bswap32(objc_msgSend(objc_getProperty((id)a1, v80, 64, 1), "length")) >> 16;
                    objc_msgSend(v38, "appendBytes:length:", &v247, 2);
                    objc_msgSend(v38, "appendData:", objc_getProperty((id)a1, v156, 64, 1));
                    if (objc_getProperty((id)a1, v157, 72, 1))
                    {
                      if (objc_getProperty((id)a1, v158, 48, 1))
                      {
                        v162 = objc_getProperty((id)a1, v160, 64, 1);
                        if (v162)
                        {
                          if (*(_QWORD *)(a1 + 88))
                          {
                            v165 = sub_1000AA55C((uint64_t)NSPPrivateAccessTokenClientState);
                            if (v165)
                            {
                              v168 = v165;
                              v169 = v143;
                              v170 = objc_alloc_init((Class)v143[115]);
                              LOWORD(v243) = __rev16(*(unsigned __int16 *)(a1 + 10));
                              objc_msgSend(v170, "appendBytes:length:", &v243, 2);
                              objc_msgSend(v170, "appendData:", objc_getProperty((id)a1, v171, 72, 1));
                              objc_msgSend(v170, "appendData:", objc_getProperty((id)a1, v172, 48, 1));
                              v249 = bswap32(objc_msgSend(objc_getProperty((id)a1, v173, 64, 1), "length")) >> 16;
                              objc_msgSend(v170, "appendBytes:length:", &v249, 2);
                              objc_msgSend(v170, "appendData:", objc_getProperty((id)a1, v174, 64, 1));
                              v175 = objc_alloc_init((Class)v169[115]);
                              objc_msgSend(v175, "appendBytes:length:", &v243, 2);
                              objc_msgSend(v175, "appendBytes:length:", "ClientBlind", 11);
                              v176 = *(_QWORD *)(a1 + 88);
                              *(_QWORD *)v253 = 0;
                              v177 = (void *)objc_claimAutoreleasedReturnValue(+[CKPATKeyBlinding blindSignMessage:blindedBy:withKey:context:error:](CKPATKeyBlinding, "blindSignMessage:blindedBy:withKey:context:error:", v170, v176, v168, v175, v253));
                              v178 = *(id *)v253;
                              objc_setProperty_atomic((id)a1, v179, v177, 80);

                              if (objc_getProperty((id)a1, v180, 80, 1))
                              {

                                objc_msgSend(v38, "appendData:", objc_getProperty((id)a1, v183, 80, 1));
                                v13 = v239;
                                goto LABEL_20;
                              }
                              v203 = nplog_obj(0, v181, v182);
                              v204 = objc_claimAutoreleasedReturnValue(v203);
                              if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
                              {
                                LODWORD(v254) = 138412290;
                                *(_QWORD *)((char *)&v254 + 4) = v178;
                                _os_log_error_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_ERROR, "generate signature: SecKeyCopyExternalRepresentation failed: %@", (uint8_t *)&v254, 0xCu);
                              }

                              v13 = v239;
LABEL_97:
                              v205 = nplog_obj(v197, v198, v199);
                              v92 = objc_claimAutoreleasedReturnValue(v205);
                              if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
                                goto LABEL_44;
                              LOWORD(v254) = 0;
                              v94 = "Failed to generate the request signature";
LABEL_80:
                              v95 = (uint8_t *)&v254;
                              goto LABEL_50;
                            }
                            v195 = nplog_obj(0, v166, v167);
                            v196 = objc_claimAutoreleasedReturnValue(v195);
                            if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
                            {
                              LOWORD(v254) = 0;
                              _os_log_error_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "generate signature: Failed to access stored client key", (uint8_t *)&v254, 2u);
                            }
LABEL_90:

                            goto LABEL_97;
                          }
                          v221 = nplog_obj(v162, v163, v164);
                          v196 = objc_claimAutoreleasedReturnValue(v221);
                          if (os_log_type_enabled(v196, OS_LOG_TYPE_FAULT))
                          {
                            LODWORD(v254) = 136315138;
                            *(_QWORD *)((char *)&v254 + 4) = "-[NSPPrivateAccessTokenRequest generateRequestSignature]";
                            v218 = "%s called with null self.ephemeralPrivateKey";
                            goto LABEL_130;
                          }
LABEL_131:
                          v13 = v239;
                          goto LABEL_90;
                        }
                        v220 = nplog_obj(0, v163, v164);
                        v196 = objc_claimAutoreleasedReturnValue(v220);
                        if (!os_log_type_enabled(v196, OS_LOG_TYPE_FAULT))
                          goto LABEL_131;
                        LODWORD(v254) = 136315138;
                        *(_QWORD *)((char *)&v254 + 4) = "-[NSPPrivateAccessTokenRequest generateRequestSignature]";
                        v218 = "%s called with null self.encryptedTokenRequest";
                      }
                      else
                      {
                        v219 = nplog_obj(0, v160, v161);
                        v196 = objc_claimAutoreleasedReturnValue(v219);
                        if (!os_log_type_enabled(v196, OS_LOG_TYPE_FAULT))
                          goto LABEL_131;
                        LODWORD(v254) = 136315138;
                        *(_QWORD *)((char *)&v254 + 4) = "-[NSPPrivateAccessTokenRequest generateRequestSignature]";
                        v218 = "%s called with null self.issuerEncapKeyID";
                      }
                    }
                    else
                    {
                      v217 = nplog_obj(0, v158, v159);
                      v196 = objc_claimAutoreleasedReturnValue(v217);
                      if (!os_log_type_enabled(v196, OS_LOG_TYPE_FAULT))
                        goto LABEL_131;
                      LODWORD(v254) = 136315138;
                      *(_QWORD *)((char *)&v254 + 4) = "-[NSPPrivateAccessTokenRequest generateRequestSignature]";
                      v218 = "%s called with null self.requestKey";
                    }
LABEL_130:
                    _os_log_fault_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_FAULT, v218, (uint8_t *)&v254, 0xCu);
                    goto LABEL_131;
                  }
                  v206 = nplog_obj(0, v115, v116);
                  v201 = objc_claimAutoreleasedReturnValue(v206);
                  v13 = v239;
                  v202 = v232;
                  if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)v253 = 0;
                    _os_log_error_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_ERROR, "generate key: compressedRepresentationFromSecKey failed", v253, 2u);
                  }
                }
                else
                {
                  v200 = nplog_obj(v109, v110, v111);
                  v201 = objc_claimAutoreleasedReturnValue(v200);
                  if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v253 = 138412290;
                    *(_QWORD *)&v253[4] = v237;
                    _os_log_error_impl((void *)&_mh_execute_header, v201, OS_LOG_TYPE_ERROR, "generate key: blindPublicKey failed: %@", v253, 0xCu);
                  }
                  v13 = v239;
                  v202 = v232;
                }

                CFRelease(cfa);
              }
              else
              {
                CFRelease(v103);
                v193 = nplog_obj(v190, v191, v192);
                v194 = objc_claimAutoreleasedReturnValue(v193);
                if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v253 = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_ERROR, "generate key: SecKeyCreateRandomKey failed", v253, 2u);
                }

                v13 = v239;
              }
LABEL_83:
              v189 = nplog_obj(v186, v187, v188);
              v92 = objc_claimAutoreleasedReturnValue(v189);
              if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
                goto LABEL_44;
              *(_WORD *)buf = 0;
              v94 = "Failed to generate the request key";
LABEL_49:
              v95 = buf;
LABEL_50:
              _os_log_error_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, v94, v95, 2u);
              goto LABEL_44;
            }
            v185 = nplog_obj(0, v101, v102);
            v145 = objc_claimAutoreleasedReturnValue(v185);
            if (!os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
            {
LABEL_82:
              v13 = v239;

              goto LABEL_83;
            }
            *(_WORD *)v253 = 0;
            v146 = "generate key: SecKeyCopyPublicKey failed";
          }
          else
          {
            v144 = nplog_obj(0, v98, v99);
            v145 = objc_claimAutoreleasedReturnValue(v144);
            if (!os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
              goto LABEL_82;
            *(_WORD *)v253 = 0;
            v146 = "generate key: Failed to access stored client key";
          }
          _os_log_error_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_ERROR, v146, v253, 2u);
          goto LABEL_82;
        }
        v86 = nplog_obj(v42, v43, v44);
        v46 = objc_claimAutoreleasedReturnValue(v86);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          goto LABEL_43;
        v87 = bswap32(*(unsigned __int16 *)(v54 + 37)) >> 16;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v87;
        v47 = "AEAD %u is not supported";
      }
      else
      {
        v84 = nplog_obj(v42, v43, v44);
        v46 = objc_claimAutoreleasedReturnValue(v84);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          goto LABEL_43;
        v85 = bswap32(*(unsigned __int16 *)(v54 + 35)) >> 16;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v85;
        v47 = "KDF %u is not supported";
      }
    }
    else
    {
      v82 = nplog_obj(v42, v43, v44);
      v46 = objc_claimAutoreleasedReturnValue(v82);
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        goto LABEL_43;
      v83 = bswap32(*(unsigned __int16 *)(v54 + 1)) >> 16;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v83;
      v47 = "KEM %u is not supported";
    }
    v48 = v46;
    v49 = 8;
    goto LABEL_42;
  }
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "originNames"));
  v32 = objc_msgSend(v31, "containsObject:", v14);

  if ((v32 & 1) != 0)
  {
    objc_setProperty_atomic((id)a1, v34, v14, 56);
    goto LABEL_15;
  }
  v52 = nplog_obj(v33, v34, v35);
  v53 = objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
  {
    v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "originNames"));
    *(_DWORD *)md = 138412546;
    *(_QWORD *)&md[4] = v14;
    *(_WORD *)&md[12] = 2112;
    *(_QWORD *)&md[14] = v96;
    _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Failed to find origin name %@ in %@", md, 0x16u);

  }
LABEL_23:

LABEL_24:
  v51 = 0;
LABEL_46:

LABEL_47:
  return v51;
}

void sub_1000ACBE4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id Property;
  const char *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  NSObject *v28;
  id v29;
  id v30;
  __SecKey *v31;
  SecKeyRef v32;
  SecKeyRef v33;
  void *v34;
  id v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint8_t buf[4];
  int v43;
  uint8_t v44[16];
  __int128 v45;

  v3 = a2;
  v6 = v3;
  if (a1)
  {
    if (!v3)
    {
      v38 = nplog_obj(0, v4, v5);
      v36 = objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v44 = 136315138;
        *(_QWORD *)&v44[4] = "-[NSPPrivateAccessTokenRequest addHeadersToRequest:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "%s called with null urlRequest", v44, 0xCu);
      }
      goto LABEL_22;
    }
    objc_msgSend(v3, "addValue:forHTTPHeaderField:", CFSTR("application/private-token-response"), CFSTR("Accept"));
    objc_msgSend(v6, "addValue:forHTTPHeaderField:", CFSTR("application/private-token-request"), CFSTR("Content-Type"));
    objc_msgSend(v6, "addValue:forHTTPHeaderField:", CFSTR("no-cache, no-store"), CFSTR("Cache-Control"));
    if (*(_WORD *)(a1 + 10) == 3)
    {
      v8 = objc_getProperty((id)a1, v7, 56, 1);
      v9 = objc_opt_self(NSPPrivateAccessTokenClientState);
      if (v8)
      {
        objc_opt_self(NSPPrivateAccessTokenClientState);
        v12 = sub_1000AA4F0();
        Property = (id)objc_claimAutoreleasedReturnValue(v12);
        v15 = Property;
        if (Property)
          Property = objc_getProperty(Property, v14, 16, 1);
        v16 = Property;

        if (v16)
        {
          *(_OWORD *)v44 = 0u;
          v45 = 0u;
          v20 = (const char *)objc_msgSend(v8, "UTF8String");
          v21 = strlen(v20);
          v22 = ccsha256_di();
          v23 = cchkdf(v22, -[NSObject length](v16, "length"), -[NSObject bytes](v16, "bytes"), 8, "", v21, v20, 32, v44);
          if (!(_DWORD)v23)
          {
            v29 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v44, 32);
            goto LABEL_14;
          }
          v26 = v23;
          v27 = nplog_obj(v23, v24, v25);
          v28 = objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v43 = v26;
            _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "HKDF error: %d", buf, 8u);
          }

        }
        else
        {
          v40 = nplog_obj(v17, v18, v19);
          v41 = objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)v44 = 136315138;
            *(_QWORD *)&v44[4] = "+[NSPPrivateAccessTokenClientState anonymousIDForOrigin:]";
            _os_log_fault_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "%s called with null clientSecret", v44, 0xCu);
          }

          v16 = 0;
        }
      }
      else
      {
        v39 = nplog_obj(v9, v10, v11);
        v16 = objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)v44 = 136315138;
          *(_QWORD *)&v44[4] = "+[NSPPrivateAccessTokenClientState anonymousIDForOrigin:]";
          _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "%s called with null origin", v44, 0xCu);
        }
      }
      v29 = 0;
LABEL_14:

      v30 = +[NPUtilities copyBase64HeaderValueFromData:](NPUtilities, "copyBase64HeaderValueFromData:", v29);
      objc_msgSend(v6, "addValue:forHTTPHeaderField:", v30, CFSTR("Sec-Token-Origin"));

      v31 = (__SecKey *)sub_1000AA55C((uint64_t)NSPPrivateAccessTokenClientState);
      if (v31)
      {
        v32 = SecKeyCopyPublicKey(v31);
        if (v32)
        {
          v33 = v32;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[CKPATKeyBlinding compressedRepresentationFromSecKey:](CKPATKeyBlinding, "compressedRepresentationFromSecKey:", v32));
          if (v34)
          {
            v35 = +[NPUtilities copyBase64HeaderValueFromData:](NPUtilities, "copyBase64HeaderValueFromData:", v34);
            objc_msgSend(v6, "addValue:forHTTPHeaderField:", v35, CFSTR("Sec-Token-Client"));

          }
          CFRelease(v33);
        }
      }
      if (*(_QWORD *)(a1 + 88))
      {
        v36 = objc_claimAutoreleasedReturnValue(+[CKPATKeyBlinding privateScalarFromSecKey:](CKPATKeyBlinding, "privateScalarFromSecKey:"));
        if (v36)
        {
          v37 = +[NPUtilities copyBase64HeaderValueFromData:](NPUtilities, "copyBase64HeaderValueFromData:", v36);
          objc_msgSend(v6, "addValue:forHTTPHeaderField:", v37, CFSTR("Sec-Token-Request-Blind"));

        }
LABEL_22:

      }
    }
  }

}

void sub_1000AD850(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;

  v5 = a2;
  v6 = a3;
  v9 = v6;
  if (v6)
  {
    v10 = nplog_obj(v6, v7, v8);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to fetch private access token: %@", buf, 0xCu);
    }

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000AD98C;
  block[3] = &unk_1000F70E8;
  v12 = *(NSObject **)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v18 = v9;
  v19 = v13;
  v17 = v5;
  v14 = v9;
  v15 = v5;
  dispatch_async(v12, block);

}

uint64_t sub_1000AD98C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000ADB24(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;
  uint8_t buf[4];
  void *v27;

  v8 = a2;
  v9 = a3;
  v10 = a5;
  v13 = v10;
  if (v10)
  {
    v14 = nplog_obj(v10, v11, v12);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to fetch private access token pair: %@", buf, 0xCu);
    }

  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1000ADC88;
  v21[3] = &unk_1000F7138;
  v16 = *(NSObject **)(a1 + 32);
  v17 = *(id *)(a1 + 40);
  v22 = v8;
  v23 = v9;
  v24 = v13;
  v25 = v17;
  v18 = v13;
  v19 = v9;
  v20 = v8;
  dispatch_async(v16, v21);

}

uint64_t sub_1000ADC88(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_1000ADE20(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  _QWORD block[4];
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint8_t buf[4];
  void *v31;

  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v15 = v12;
  if (v12)
  {
    v16 = nplog_obj(v12, v13, v14);
    v17 = objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v31 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to fetch linked private access token pair: %@", buf, 0xCu);
    }

  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000ADFA8;
  block[3] = &unk_1000F7188;
  v18 = *(NSObject **)(a1 + 32);
  v19 = *(id *)(a1 + 40);
  v28 = v15;
  v29 = v19;
  v25 = v9;
  v26 = v10;
  v27 = v11;
  v20 = v15;
  v21 = v11;
  v22 = v10;
  v23 = v9;
  dispatch_async(v18, block);

}

uint64_t sub_1000ADFA8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[6], a1[7]);
}

void sub_1000AE1F0(id a1)
{
  NSPCaptiveWiFiHandler *v1;
  void *v2;

  v1 = objc_alloc_init(NSPCaptiveWiFiHandler);
  v2 = (void *)qword_100112F50;
  qword_100112F50 = (uint64_t)v1;

}

void sub_1000AE470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_1000AE4AC(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;

  if (a1)
  {
    v1 = a1;
    v2 = objc_sync_enter(v1);
    if (*((_BYTE *)v1 + 8))
    {
      v5 = nplog_obj(v2, v3, v4);
      v6 = objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@ reporting captive probe result", (uint8_t *)&v11, 0xCu);
      }

      (*(void (**)(void))(*((_QWORD *)v1 + 6) + 16))();
    }
    v7 = (void *)*((_QWORD *)v1 + 3);
    if (v7)
    {
      objc_msgSend(v7, "invalidateAndCancel");
      v8 = (void *)*((_QWORD *)v1 + 3);
      *((_QWORD *)v1 + 3) = 0;

    }
    v9 = (void *)*((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = 0;

    v10 = (void *)*((_QWORD *)v1 + 5);
    *((_QWORD *)v1 + 5) = 0;

    *((_BYTE *)v1 + 8) = 0;
    objc_sync_exit(v1);

  }
}

void sub_1000AE5BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000AE5DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t WeakRetained;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  void *v49;
  int v50;
  void *v51;
  __int16 v52;
  id v53;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 40));
  v13 = (void *)WeakRetained;
  if (WeakRetained)
  {
    if (v9)
    {
      v14 = nplog_obj(WeakRetained, v11, v12);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v45 = *(void **)(a1 + 32);
        v50 = 138412546;
        v51 = v45;
        v52 = 2112;
        v53 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%@ failed to perform captive probe, error: %@", (uint8_t *)&v50, 0x16u);
      }

      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "domain"));
      if (-[NSObject isEqualToString:](v16, "isEqualToString:", NSURLErrorDomain))
      {
        v17 = objc_msgSend(v9, "code");

        if (v17 == (id)-1001)
        {
          v18 = v13;
LABEL_17:
          sub_1000AE4AC(v18);
          goto LABEL_18;
        }
LABEL_16:
        v18 = v13;
        goto LABEL_17;
      }
LABEL_15:

      goto LABEL_16;
    }
    if (!v7
      || (v19 = objc_opt_class(NSHTTPURLResponse),
          WeakRetained = objc_opt_isKindOfClass(v8, v19),
          (WeakRetained & 1) == 0))
    {
      v26 = nplog_obj(WeakRetained, v11, v12);
      v16 = objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v49 = *(void **)(a1 + 32);
        v50 = 138412290;
        v51 = v49;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%@ failed to receive expected response from the captive probe server", (uint8_t *)&v50, 0xCu);
      }
      goto LABEL_15;
    }
    v20 = v8;
    if ((char *)objc_msgSend(v20, "statusCode") - 200 <= (char *)0x63)
    {
      v21 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v7, 134217984);
      v22 = objc_msgSend(v21, "isEqualToString:", CFSTR("<HTML><HEAD><TITLE>Success</TITLE></HEAD><BODY>Success</BODY></HTML>"));
      if ((_DWORD)v22)
      {
        v25 = v13;
      }
      else
      {
        v46 = nplog_obj(v22, v23, v24);
        v47 = objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          v48 = *(void **)(a1 + 32);
          v50 = 138412290;
          v51 = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "%@ received HTTP redirect from the network", (uint8_t *)&v50, 0xCu);
        }

        v25 = v13;
      }
      sub_1000AE4AC(v25);
      goto LABEL_35;
    }
    v21 = v20;
    v29 = nplog_obj(v21, v27, v28);
    v30 = objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      v50 = 138412546;
      v51 = v13;
      v52 = 2048;
      v53 = objc_msgSend(v21, "statusCode");
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%@ HTTP response has status code: [%ld]", (uint8_t *)&v50, 0x16u);
    }

    v31 = (char *)objc_msgSend(v21, "statusCode");
    if ((unint64_t)(v31 - 300) >= 4 && v31 != (char *)307)
    {
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "allHeaderFields"));
      if ((char *)objc_msgSend(v21, "statusCode") - 200 > (char *)0x63
        || (v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKey:", CFSTR("Location"))),
            v33,
            !v33))
      {

LABEL_35:
LABEL_36:

        goto LABEL_18;
      }
      v37 = nplog_obj(v34, v35, v36);
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        v50 = 138412290;
        v51 = v13;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%@ HTTP response has 'Location' header", (uint8_t *)&v50, 0xCu);
      }

    }
    v42 = nplog_obj(v39, v40, v41);
    v43 = objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      v44 = *(void **)(a1 + 32);
      v50 = 138412290;
      v51 = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "%@ received HTTP redirect from the network", (uint8_t *)&v50, 0xCu);
    }

    sub_1000AE4AC(v13);
    goto LABEL_36;
  }
LABEL_18:

}

id objc_msgSend_HTTPErrorCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "HTTPErrorCode");
}

id objc_msgSend_ISOcountryCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ISOcountryCode");
}

id objc_msgSend_Identity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "Identity");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_NSPEventsCacheGet(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "NSPEventsCacheGet");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URL");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLOfModelInThisBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLOfModelInThisBundle");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__socketStreamProperties(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_socketStreamProperties");
}

id objc_msgSend_abbreviation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "abbreviation");
}

id objc_msgSend_abort(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "abort");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accessToken(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessToken");
}

id objc_msgSend_accessTokenBlockedIssuers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessTokenBlockedIssuers");
}

id objc_msgSend_accessTokenKnownOrigins(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessTokenKnownOrigins");
}

id objc_msgSend_accessTokenTypesAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessTokenTypesAtIndex:");
}

id objc_msgSend_accessTokenTypesCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessTokenTypesCount");
}

id objc_msgSend_accessTokenURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accessTokenURL");
}

id objc_msgSend_accountIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "accountIdentifier:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activate");
}

id objc_msgSend_activateTokenWithServerResponse_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activateTokenWithServerResponse:error:");
}

id objc_msgSend_activatedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activatedCount");
}

id objc_msgSend_activatedTokenLists(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activatedTokenLists");
}

id objc_msgSend_activeDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "activeDate");
}

id objc_msgSend_addConditions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addConditions:");
}

id objc_msgSend_addDomainFilterWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addDomainFilterWithData:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addMap:");
}

id objc_msgSend_addNetworkDiscoveryProxyAgent_with_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNetworkDiscoveryProxyAgent:with:");
}

id objc_msgSend_addNetworkStatsToToggleStatsDict_networkStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNetworkStatsToToggleStatsDict:networkStats:");
}

id objc_msgSend_addNotificationRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addNotificationRequest:withCompletionHandler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObliviousProxyAgent_processes_hostname_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObliviousProxyAgent:processes:hostname:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addPoliciesForMPTCPConverterProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPoliciesForMPTCPConverterProxy:");
}

id objc_msgSend_addPoliciesForProbing(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPoliciesForProbing");
}

id objc_msgSend_addPolicy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPolicy:");
}

id objc_msgSend_addPreferredProxy_agentUUID_withDomainFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addPreferredProxy:agentUUID:withDomainFilter:");
}

id objc_msgSend_addProxiedContentAgent_maps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addProxiedContentAgent:maps:");
}

id objc_msgSend_addProxyKeyInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addProxyKeyInfo:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addToken:");
}

id objc_msgSend_addTokenRequestList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addTokenRequestList:");
}

id objc_msgSend_addUnactivatedTokenList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addUnactivatedTokenList:");
}

id objc_msgSend_addUpdateHandlerForNamespaceName_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addUpdateHandlerForNamespaceName:queue:usingBlock:");
}

id objc_msgSend_addValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "addValue:forHTTPHeaderField:");
}

id objc_msgSend_agentDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentDescription");
}

id objc_msgSend_agentFlags(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentFlags");
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "agentUUID");
}

id objc_msgSend_ak_addClientInfoHeader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ak_addClientInfoHeader");
}

id objc_msgSend_ak_addDeviceUDIDHeader(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ak_addDeviceUDIDHeader");
}

id objc_msgSend_algorithm(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "algorithm");
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allHeaderFields");
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allInterfaces");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowFailOpen(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowFailOpen");
}

id objc_msgSend_allowFallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowFallback");
}

id objc_msgSend_allowedNextHops(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowedNextHops");
}

id objc_msgSend_allowsUnsafeSocketAccess(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "allowsUnsafeSocketAccess");
}

id objc_msgSend_alternatePreferredPathAgentUUIDs_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "alternatePreferredPathAgentUUIDs:");
}

id objc_msgSend_anyAppEnabledDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "anyAppEnabledDate");
}

id objc_msgSend_appMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appMetricsEnabled");
}

id objc_msgSend_appRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appRules");
}

id objc_msgSend_appStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appStatus");
}

id objc_msgSend_appStatuses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appStatuses");
}

id objc_msgSend_appTrackersEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appTrackersEnabled");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleCertificatesEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "appleCertificatesEnabled");
}

id objc_msgSend_applicationIsInstalled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "applicationIsInstalled:");
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "apply");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_assertions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assertions");
}

id objc_msgSend_associatedIssuers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associatedIssuers");
}

id objc_msgSend_associatedMaps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "associatedMaps");
}

id objc_msgSend_attesterURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "attesterURL");
}

id objc_msgSend_authInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authInfo");
}

id objc_msgSend_authInfoChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authInfoChanged:");
}

id objc_msgSend_authType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authType");
}

id objc_msgSend_authURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authURL");
}

id objc_msgSend_authenticationFailure(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationFailure");
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationMethod");
}

id objc_msgSend_authenticationType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authenticationType");
}

id objc_msgSend_authorizationStatusForBundlePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "authorizationStatusForBundlePath:");
}

id objc_msgSend_avoidNetworkAgentWithDomain_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "avoidNetworkAgentWithDomain:type:");
}

id objc_msgSend_badTokenCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "badTokenCount");
}

id objc_msgSend_badTokenInfoForProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "badTokenInfoForProxy:");
}

id objc_msgSend_beginDataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "beginDataTaskWithRequest:completionHandler:");
}

id objc_msgSend_blindPublicKey_withPrivateKey_context_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blindPublicKey:withPrivateKey:context:error:");
}

id objc_msgSend_blindSignMessage_blindedBy_withKey_context_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blindSignMessage:blindedBy:withKey:context:error:");
}

id objc_msgSend_blindedMessage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "blindedMessage");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bootstrapAddresses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bootstrapAddresses");
}

id objc_msgSend_bootstrapResolver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bootstrapResolver");
}

id objc_msgSend_brandedCallingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "brandedCallingEnabled");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleRecordForAuditToken_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleRecordForAuditToken:error:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "bytes");
}

id objc_msgSend_cInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cInterface");
}

id objc_msgSend_cachedLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cachedLocation");
}

id objc_msgSend_canIgnoreInvalidCertsOnInternalBuild(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canIgnoreInvalidCertsOnInternalBuild");
}

id objc_msgSend_canUse(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "canUse");
}

id objc_msgSend_cancelProbes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cancelProbes");
}

id objc_msgSend_captiveProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "captiveProfile");
}

id objc_msgSend_cellStatusActiveCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellStatusActiveCount");
}

id objc_msgSend_cellStatusBlockedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellStatusBlockedCount");
}

id objc_msgSend_cellStatusDisabledCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellStatusDisabledCount");
}

id objc_msgSend_cellularDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cellularDisabled:");
}

id objc_msgSend_certificates(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "certificates");
}

id objc_msgSend_challengeData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "challengeData");
}

id objc_msgSend_changePausedState_forApp_path_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "changePausedState:forApp:path:");
}

id objc_msgSend_checkOriginAllowedAsThirdParty_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkOriginAllowedAsThirdParty:");
}

id objc_msgSend_checkPrivacyProxyConnectivityOnInterface_proxyConnectivityCheckType_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkPrivacyProxyConnectivityOnInterface:proxyConnectivityCheckType:completionHandler:");
}

id objc_msgSend_checkSignificantLocationChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "checkSignificantLocationChange:");
}

id objc_msgSend_childCoreDataContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "childCoreDataContext");
}

id objc_msgSend_classNamed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "classNamed:");
}

id objc_msgSend_clearAllPausedApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearAllPausedApps");
}

id objc_msgSend_clearNetworkStatusForType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearNetworkStatusForType:");
}

id objc_msgSend_clearProxyKeyInfos(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearProxyKeyInfos");
}

id objc_msgSend_clearResetDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clearResetDate");
}

id objc_msgSend_clientFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientFlags:");
}

id objc_msgSend_clientWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "clientWithIdentifier:");
}

id objc_msgSend_cloudSubscriptionChanged_configManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudSubscriptionChanged:configManager:");
}

id objc_msgSend_cloudSubscriptionCheckEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "cloudSubscriptionCheckEnabled");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "code");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "commit");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compare:");
}

id objc_msgSend_compareDate_toDate_toUnitGranularity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareDate:toDate:toUnitGranularity:");
}

id objc_msgSend_compareModelVersion_model2_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compareModelVersion:model2:");
}

id objc_msgSend_component_fromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "component:fromDate:");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "components:fromDate:toDate:options:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_compressedRepresentationFromSecKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "compressedRepresentationFromSecKey:");
}

id objc_msgSend_computeStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "computeStats:");
}

id objc_msgSend_conditions(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conditions");
}

id objc_msgSend_conditionsAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conditionsAtIndex:");
}

id objc_msgSend_conditionsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "conditionsCount");
}

id objc_msgSend_configAgeHours(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configAgeHours");
}

id objc_msgSend_configDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configDisabled:");
}

id objc_msgSend_configEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configEnabled:");
}

id objc_msgSend_configEpoch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configEpoch");
}

id objc_msgSend_configEpochChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configEpochChanged:");
}

id objc_msgSend_configFetchURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configFetchURL");
}

id objc_msgSend_configFetchURLToIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configFetchURLToIndex");
}

id objc_msgSend_configFetched_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configFetched:");
}

id objc_msgSend_configOutageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configOutageCount");
}

id objc_msgSend_configServerEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configServerEnabled");
}

id objc_msgSend_configServerHost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configServerHost");
}

id objc_msgSend_configServerPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configServerPath");
}

id objc_msgSend_configTag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configTag");
}

id objc_msgSend_configUpdated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configUpdated:");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationDeliveryEnd(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationDeliveryEnd");
}

id objc_msgSend_configurationDeliveryStart(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationDeliveryStart");
}

id objc_msgSend_configurationEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationEnabled");
}

id objc_msgSend_configurationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationEnabled:");
}

id objc_msgSend_configurationFetchDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationFetchDate");
}

id objc_msgSend_configurationFetchDateIsWithinStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationFetchDateIsWithinStart:end:");
}

id objc_msgSend_configurationRestart_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationRestart:");
}

id objc_msgSend_configurationSubscriberPoliciesCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationSubscriberPoliciesCount");
}

id objc_msgSend_configurationValidated_withURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationValidated:withURL:");
}

id objc_msgSend_configurationVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "configurationVersion");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "containsString:");
}

id objc_msgSend_controlUnit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "controlUnit");
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "coordinate");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copy");
}

id objc_msgSend_copyAddressesFromDoHAnswer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAddressesFromDoHAnswer:");
}

id objc_msgSend_copyAuxiliaryDataForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyAuxiliaryDataForKey:");
}

id objc_msgSend_copyBase64HeaderValueFromData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyBase64HeaderValueFromData:");
}

id objc_msgSend_copyCurrentGeohash(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCurrentGeohash");
}

id objc_msgSend_copyCurrentGeohashFromServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCurrentGeohashFromServer");
}

id objc_msgSend_copyCurrentNetworkCharacteristicsForPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyCurrentNetworkCharacteristicsForPath:");
}

id objc_msgSend_copyDataFromKeychainWithIdentifier_accountName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDataFromKeychainWithIdentifier:accountName:");
}

id objc_msgSend_copyDomainFiltersDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyDomainFiltersDictionary");
}

id objc_msgSend_copyEdgeSelectionTelemetry(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyEdgeSelectionTelemetry");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyKeyFromKeychainWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyKeyFromKeychainWithIdentifier:");
}

id objc_msgSend_copyProxyInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyProxyInfo:");
}

id objc_msgSend_copyStateIncludeDistance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyStateIncludeDistance:");
}

id objc_msgSend_copyTokenInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyTokenInfo:");
}

id objc_msgSend_copyTrueClientIPAddressFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyTrueClientIPAddressFromPreferences");
}

id objc_msgSend_copyUUIDsForExecutable_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyUUIDsForExecutable:");
}

id objc_msgSend_copyUUIDsForSigningIdentifier_executablePath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "copyUUIDsForSigningIdentifier:executablePath:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "countForFetchRequest:error:");
}

id objc_msgSend_createConfigFetchURLWithPath_timestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createConfigFetchURLWithPath:timestamp:");
}

id objc_msgSend_createDoHMessageForQuery_name_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDoHMessageForQuery:name:");
}

id objc_msgSend_createDoHQueryForName_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createDoHQueryForName:type:");
}

id objc_msgSend_createMaskedIPv4Address_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMaskedIPv4Address:prefix:");
}

id objc_msgSend_createMaskedIPv6Address_prefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "createMaskedIPv6Address:prefix:");
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentConfiguration");
}

id objc_msgSend_currentCountryPlusTimezone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentCountryPlusTimezone");
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentKnownNetworkProfile");
}

id objc_msgSend_currentNetworkInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentNetworkInfo");
}

id objc_msgSend_currentNetworkLastUsed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentNetworkLastUsed");
}

id objc_msgSend_currentPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentPolicy");
}

id objc_msgSend_currentScanResult(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentScanResult");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "currentState");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "data");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataTaskWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataTaskWithURL:completionHandler:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateByAddingUnit_value_toDate_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateByAddingUnit:value:toDate:options:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "day");
}

id objc_msgSend_decodeArrayOfObjectsOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeArrayOfObjectsOfClass:forKey:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultConfiguration");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultPath");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_deferAgentCommit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deferAgentCommit");
}

id objc_msgSend_deferCommit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deferCommit");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_denormalizer_input(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "denormalizer_input");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionWithIndent_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptionWithIndent:options:");
}

id objc_msgSend_descriptorWithSubscriptionContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "descriptorWithSubscriptionContext:");
}

id objc_msgSend_details(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "details");
}

id objc_msgSend_developerType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "developerType");
}

id objc_msgSend_deviceIdentityAuthenticationFailed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceIdentityAuthenticationFailed");
}

id objc_msgSend_deviceSupportsDeviceIdentityWithSerialNumber(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "deviceSupportsDeviceIdentityWithSerialNumber");
}

id objc_msgSend_diagnostics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "diagnostics");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didReceiveProxyConfig_from_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveProxyConfig:from:");
}

id objc_msgSend_didReceiveUpdatedPvDOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didReceiveUpdatedPvDOptions:");
}

id objc_msgSend_didUpdateCountryPlusTimezone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didUpdateCountryPlusTimezone:");
}

id objc_msgSend_didUpdateGeohash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didUpdateGeohash:");
}

id objc_msgSend_didUpdateSignificantLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "didUpdateSignificantLocation");
}

id objc_msgSend_directPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directPath");
}

id objc_msgSend_directProbeCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directProbeCount");
}

id objc_msgSend_directProbeFailedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directProbeFailedCount");
}

id objc_msgSend_directProbeRedirectedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directProbeRedirectedCount");
}

id objc_msgSend_directProbeServerErrorCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directProbeServerErrorCount");
}

id objc_msgSend_directProbeSuccessCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "directProbeSuccessCount");
}

id objc_msgSend_disableCellularNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableCellularNetwork:");
}

id objc_msgSend_disableDoHBootstrapResults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableDoHBootstrapResults");
}

id objc_msgSend_disableInterface_displayName_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableInterface:displayName:type:");
}

id objc_msgSend_disableUntil(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableUntil");
}

id objc_msgSend_disableWiFiNetwork_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "disableWiFiNetwork:");
}

id objc_msgSend_dislocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dislocation");
}

id objc_msgSend_distanceFromLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "distanceFromLocation:");
}

id objc_msgSend_divertSocketToControlUnit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "divertSocketToControlUnit:");
}

id objc_msgSend_dnsAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsAgentUUID");
}

id objc_msgSend_dnsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsEnabled");
}

id objc_msgSend_dnsFilteringHintEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsFilteringHintEnabled");
}

id objc_msgSend_dnsProbe(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dnsProbe");
}

id objc_msgSend_dohURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "dohURL");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain");
}

id objc_msgSend_domain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domain:");
}

id objc_msgSend_domainFilter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainFilter");
}

id objc_msgSend_domainFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "domainFilter:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "drop");
}

id objc_msgSend_earliestEnableCheckDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "earliestEnableCheckDate");
}

id objc_msgSend_edgeContainingOnRamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "edgeContainingOnRamp:");
}

id objc_msgSend_edgeSetIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "edgeSetIdentifier");
}

id objc_msgSend_edgeSets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "edgeSets");
}

id objc_msgSend_edges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "edges");
}

id objc_msgSend_edgesGeneration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "edgesGeneration");
}

id objc_msgSend_effectiveApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveApplication:");
}

id objc_msgSend_effectiveProcessUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveProcessUUID");
}

id objc_msgSend_effectiveUserTier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveUserTier");
}

id objc_msgSend_effectiveUserTierChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "effectiveUserTierChanged:");
}

id objc_msgSend_egressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "egressProxy");
}

id objc_msgSend_egressProxyLowWaterMarkHitCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "egressProxyLowWaterMarkHitCount");
}

id objc_msgSend_egressProxyTokensAdded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "egressProxyTokensAdded");
}

id objc_msgSend_enableCheckTimeout_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableCheckTimeout:");
}

id objc_msgSend_enableFailOpen_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableFailOpen:");
}

id objc_msgSend_enableFallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enableFallback:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "enabled");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInt_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInt:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeWithCoder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodeWithCoder:");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "encodedData");
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endowmentNamespaces");
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "endpointWithHostname:port:");
}

id objc_msgSend_environmentUsesNonDefaultServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "environmentUsesNonDefaultServer");
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ephemeralSessionConfiguration");
}

id objc_msgSend_epoch(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "epoch");
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorCode");
}

id objc_msgSend_errorDomain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "errorDomain");
}

id objc_msgSend_establishTrustWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "establishTrustWithCompletionHandler:");
}

id objc_msgSend_etag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "etag");
}

id objc_msgSend_evaluate_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluate:completionHandler:");
}

id objc_msgSend_evaluateEnableRatios(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "evaluateEnableRatios");
}

id objc_msgSend_eventName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventName");
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "eventType");
}

id objc_msgSend_exceededLocationTTL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exceededLocationTTL");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_expiration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expiration");
}

id objc_msgSend_exposureNotificationsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "exposureNotificationsEnabled");
}

id objc_msgSend_expressionForFunction_arguments_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expressionForFunction:arguments:");
}

id objc_msgSend_expressionForKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "expressionForKeyPath:");
}

id objc_msgSend_fallbackAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackAgentUUID");
}

id objc_msgSend_fallbackEgressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackEgressProxy");
}

id objc_msgSend_fallbackIngressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackIngressProxy");
}

id objc_msgSend_fallbackPathStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackPathStatistics");
}

id objc_msgSend_fallbackPathWeights(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackPathWeights");
}

id objc_msgSend_fallbackProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackProxy");
}

id objc_msgSend_fallbackRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackRegistration");
}

id objc_msgSend_fallbackSupportsUDPProxying(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackSupportsUDPProxying");
}

id objc_msgSend_fallbackToQUIC(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackToQUIC");
}

id objc_msgSend_fallbackTraffic(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fallbackTraffic");
}

id objc_msgSend_featureValueForName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueForName:");
}

id objc_msgSend_featureValueWithMultiArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featureValueWithMultiArray:");
}

id objc_msgSend_featuresAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "featuresAtIndex:");
}

id objc_msgSend_fetchDateIsWithinStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchDateIsWithinStart:end:");
}

id objc_msgSend_fetchDomainFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchDomainFilter:");
}

id objc_msgSend_fetchEvents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchEvents");
}

id objc_msgSend_fetchEvents_mostRecent_limit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchEvents:mostRecent:limit:");
}

id objc_msgSend_fetchIndividualProxyConfig_completionHander_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchIndividualProxyConfig:completionHander:");
}

id objc_msgSend_fetchLatestEvents_vendors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLatestEvents:vendors:");
}

id objc_msgSend_fetchPairedPrivateAccessTokensForChallenge_overrideAttester_tokenKey_originNameKey_selectedOrigin_pairedChallenge_overridePairedAttester_pairedTokenKey_auditToken_bundleID_allowTools_systemTokenClient_accessToken_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPairedPrivateAccessTokensForChallenge:overrideAttester:tokenKey:originNameKey:selectedOrigin:pairedChallenge:overridePairedAttester:pairedTokenKey:auditToken:bundleID:allowTools:systemTokenClient:accessToken:completionHandler:");
}

id objc_msgSend_fetchPrivacyTokensOnInterface_tierType_proxyURL_tokenVendor_tokenIssuancePublicKey_tokenChallenge_tokenCount_accessToken_retryAttempt_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPrivacyTokensOnInterface:tierType:proxyURL:tokenVendor:tokenIssuancePublicKey:tokenChallenge:tokenCount:accessToken:retryAttempt:completionHandler:");
}

id objc_msgSend_fetchPrivateAccessTokenForChallenge_overrideAttester_customAttester_customAttesterHeaders_tokenKey_originNameKey_selectedOrigin_auditToken_bundleID_allowTools_systemTokenClient_accessToken_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPrivateAccessTokenForChallenge:overrideAttester:customAttester:customAttesterHeaders:tokenKey:originNameKey:selectedOrigin:auditToken:bundleID:allowTools:systemTokenClient:accessToken:completionHandler:");
}

id objc_msgSend_fetchPrivateAccessTokenPairWithFetcher_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPrivateAccessTokenPairWithFetcher:completionHandler:");
}

id objc_msgSend_fetchPrivateAccessTokenWithFetcher_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchPrivateAccessTokenWithFetcher:completionHandler:");
}

id objc_msgSend_fetchRequest(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchRequest");
}

id objc_msgSend_fetchResumableSessionTickets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchResumableSessionTickets");
}

id objc_msgSend_fetchingSessionTickets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchingSessionTickets");
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileDescriptor");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_finalizedElement(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finalizedElement");
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "finishTasksAndInvalidate");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "firstObject");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "floatValue");
}

id objc_msgSend_flowLocalAddressEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowLocalAddressEmpty");
}

id objc_msgSend_flowRemoteAddressEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flowRemoteAddressEmpty");
}

id objc_msgSend_flushTokens(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "flushTokens");
}

id objc_msgSend_forceFallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceFallback");
}

id objc_msgSend_forceFallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "forceFallback:");
}

id objc_msgSend_formatExpirationDateFrom_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "formatExpirationDateFrom:");
}

id objc_msgSend_fraudAlertCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fraudAlertCount");
}

id objc_msgSend_fromDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fromDate");
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generation");
}

id objc_msgSend_geohashFromLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "geohashFromLocation:");
}

id objc_msgSend_geohashOverride(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "geohashOverride");
}

id objc_msgSend_geohashSettingsChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "geohashSettingsChanged:");
}

id objc_msgSend_geohashSharingEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "geohashSharingEnabled");
}

id objc_msgSend_geohashSharingEnabledStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "geohashSharingEnabledStatus");
}

id objc_msgSend_getCurrentDataSubscriptionContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getCurrentDataSubscriptionContext:");
}

id objc_msgSend_getEdgeSetForAppRule_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEdgeSetForAppRule:");
}

id objc_msgSend_getEdgeSetForSigningIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getEdgeSetForSigningIdentifier:");
}

id objc_msgSend_getGeohashSharingPreference(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getGeohashSharingPreference");
}

id objc_msgSend_getInterfaceTypeString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getInterfaceTypeString:");
}

id objc_msgSend_getMinMaxDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getMinMaxDate");
}

id objc_msgSend_getModelVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getModelVersion:");
}

id objc_msgSend_getNSPEventStatsForSingleWindow_eventType_startDate_endDate_windowStartTime_windowDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNSPEventStatsForSingleWindow:eventType:startDate:endDate:windowStartTime:windowDuration:");
}

id objc_msgSend_getNSPEventsDenormalizer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNSPEventsDenormalizer");
}

id objc_msgSend_getNSPEventsNormalizer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNSPEventsNormalizer");
}

id objc_msgSend_getNSPEventsPredictor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNSPEventsPredictor");
}

id objc_msgSend_getNSPEventsProbability_count_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNSPEventsProbability:count:");
}

id objc_msgSend_getNSPTokenStatsForSingleWindow_startDate_endDate_windowStartTime_windowDuration_statsCategory_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getNSPTokenStatsForSingleWindow:startDate:endDate:windowStartTime:windowDuration:statsCategory:");
}

id objc_msgSend_getPrivacyProxyState_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPrivacyProxyState:error:");
}

id objc_msgSend_getPrivateAccessTokensEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getPrivateAccessTokensEnabled");
}

id objc_msgSend_getProactiveTokenFetchConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getProactiveTokenFetchConfiguration");
}

id objc_msgSend_getSavedPrivateCloudComputeEnvironment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSavedPrivateCloudComputeEnvironment");
}

id objc_msgSend_getSubscriptionUserFacingName_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getSubscriptionUserFacingName:completion:");
}

id objc_msgSend_getTokenCountStatsForMultipleWindows_minDate_maxDate_windowDuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTokenCountStatsForMultipleWindows:minDate:maxDate:windowDuration:");
}

id objc_msgSend_getTokenServerIPWithInterface_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getTokenServerIPWithInterface:completionHandler:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getVendorDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVendorDictionary");
}

id objc_msgSend_getVendorIdFromDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVendorIdFromDictionary:");
}

id objc_msgSend_getVendorNameById_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "getVendorNameById:");
}

id objc_msgSend_globalIPv4InterfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "globalIPv4InterfaceName");
}

id objc_msgSend_handle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handle");
}

id objc_msgSend_handleAppInstallation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAppInstallation:");
}

id objc_msgSend_handleAppUninstallation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleAppUninstallation:");
}

id objc_msgSend_handleConfigChange(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleConfigChange");
}

id objc_msgSend_handleDNSAgentErrorReport_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleDNSAgentErrorReport:error:");
}

id objc_msgSend_handleEffectiveUserTierChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleEffectiveUserTierChange:");
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForIdentifier:error:");
}

id objc_msgSend_handleForPredicate_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleForPredicate:error:");
}

id objc_msgSend_handleLinkQualityChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLinkQualityChange:");
}

id objc_msgSend_handleLocationUpdate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleLocationUpdate:");
}

id objc_msgSend_handleNSPEventsPredictions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNSPEventsPredictions:");
}

id objc_msgSend_handleNetworkCharacteristicsChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNetworkCharacteristicsChange:");
}

id objc_msgSend_handleNewLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleNewLocation:");
}

id objc_msgSend_handlePathChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handlePathChange:");
}

id objc_msgSend_handleTierChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleTierChange:");
}

id objc_msgSend_handleUnlimitedChange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUnlimitedChange:");
}

id objc_msgSend_handleUsageReport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "handleUsageReport:");
}

id objc_msgSend_hasCustomPFRules(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasCustomPFRules");
}

id objc_msgSend_hasEdges(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasEdges");
}

id objc_msgSend_hasExpiration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasExpiration");
}

id objc_msgSend_hasKernelExtensionFilter(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasKernelExtensionFilter");
}

id objc_msgSend_hasObliviousDoHConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasObliviousDoHConfig");
}

id objc_msgSend_hasPausedApps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPausedApps");
}

id objc_msgSend_hasPercentEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPercentEnabled");
}

id objc_msgSend_hasPreferredPathConfigUri(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPreferredPathConfigUri");
}

id objc_msgSend_hasPreferredPathEnabledPercentage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPreferredPathEnabledPercentage");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProxyIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasProxyIndex");
}

id objc_msgSend_hasResolver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasResolver");
}

id objc_msgSend_hasRotation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasRotation");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTransparencyKeyBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hasTransparencyKeyBundle");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "host");
}

id objc_msgSend_hostnames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hostnames");
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "hour");
}

id objc_msgSend_httpCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "httpCode");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "identifierWithPid:");
}

id objc_msgSend_ignoreInvalidCerts(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ignoreInvalidCerts");
}

id objc_msgSend_inProcessFlowDivert(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inProcessFlowDivert");
}

id objc_msgSend_infoDictionary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "infoDictionary");
}

id objc_msgSend_ingestTestLatencyMap_local_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingestTestLatencyMap:local:completionHandler:");
}

id objc_msgSend_ingressFallbackProxyURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingressFallbackProxyURL");
}

id objc_msgSend_ingressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingressProxy");
}

id objc_msgSend_ingressProxyLowWaterMarkHitCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingressProxyLowWaterMarkHitCount");
}

id objc_msgSend_ingressProxyTokensAdded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingressProxyTokensAdded");
}

id objc_msgSend_ingressProxyURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ingressProxyURL");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init");
}

id objc_msgSend_init_inputShape_targetShape_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "init:inputShape:targetShape:");
}

id objc_msgSend_initFlowDivertControlSocketDisableAppMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFlowDivertControlSocketDisableAppMap:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromPreferences");
}

id objc_msgSend_initFromPreferencesWithUserTier_effectiveUserTier_delegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initFromPreferencesWithUserTier:effectiveUserTier:delegate:");
}

id objc_msgSend_initNSPEventsModelPredictor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initNSPEventsModelPredictor");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initWithAppProxyFlow_nwContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithAppProxyFlow:nwContext:");
}

id objc_msgSend_initWithApplication_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithApplication:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChallenge_tokenKey_originNameKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithChallenge:tokenKey:originNameKey:");
}

id objc_msgSend_initWithCoder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCoder:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContentsOfURL_configuration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:configuration:error:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_configuration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:configuration:");
}

id objc_msgSend_initWithDelegate_ingressProxy_egressProxy_proxyPathWeight_allowFallback_fallbackToQUIC_forceFallback_allowFailOpen_geohashSharingEnabled_configEpoch_networkCharacteristics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:ingressProxy:egressProxy:proxyPathWeight:allowFallback:fallbackToQUIC:forceFallback:allowFailOpen:geohashSharingEnabled:configEpoch:networkCharacteristics:");
}

id objc_msgSend_initWithDelegate_initialMap_ingressProxy_egressProxy_resolver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:initialMap:ingressProxy:egressProxy:resolver:");
}

id objc_msgSend_initWithDelegate_obliviousConfig_obliviousHTTPType_transparencyKeyBundle_transparencyProof_obliviousTarget_proxyInfo_allowFailOpen_networkCharacteristics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:obliviousConfig:obliviousHTTPType:transparencyKeyBundle:transparencyProof:obliviousTarget:proxyInfo:allowFailOpen:networkCharacteristics:");
}

id objc_msgSend_initWithDelegate_toggleStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDelegate:toggleStats:");
}

id objc_msgSend_initWithDenormalizer_input_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDenormalizer_input:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithEffectiveBundlePath_delegate_onQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEffectiveBundlePath:delegate:onQueue:");
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithEntityName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithEntityName:");
}

id objc_msgSend_initWithFeatureProviderArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFeatureProviderArray:");
}

id objc_msgSend_initWithFireDate_interval_repeats_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFireDate:interval:repeats:block:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithIdentifier_timestamp_fromDictionary_source_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentifier:timestamp:fromDictionary:source:");
}

id objc_msgSend_initWithIdentity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIdentity:");
}

id objc_msgSend_initWithIngressProxy_egressProxy_proxyPathWeight_preferredPathConfigURI_preferredPathPatterns_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithIngressProxy:egressProxy:proxyPathWeight:preferredPathConfigURI:preferredPathPatterns:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithLatitude_longitude_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLatitude:longitude:");
}

id objc_msgSend_initWithLatitude_longtitude_timestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLatitude:longtitude:timestamp:");
}

id objc_msgSend_initWithLstm_input_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLstm_input:");
}

id objc_msgSend_initWithLstm_input_sequential_TimeDistributedDense_dense_BiasAdd_true_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLstm_input:sequential_TimeDistributedDense_dense_BiasAdd_true:");
}

id objc_msgSend_initWithMLModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithMLModel:");
}

id objc_msgSend_initWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:managedObjectModel:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithNetworkAgentClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentClass:");
}

id objc_msgSend_initWithNetworkAgentRegistration_sessionType_configurationIdentifier_agentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:");
}

id objc_msgSend_initWithNetworkAgentRegistration_sessionType_configurationIdentifier_agentUUID_name_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:");
}

id objc_msgSend_initWithNormalizer_input_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNormalizer_input:");
}

id objc_msgSend_initWithOrder_result_conditions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithOrder:result:conditions:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPolicySession_name_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPolicySession:name:");
}

id objc_msgSend_initWithPublicKey_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPublicKey:error:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithShape_dataType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithShape:dataType:error:");
}

id objc_msgSend_initWithSigningIdentifier_fallbackReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSigningIdentifier:fallbackReason:");
}

id objc_msgSend_initWithSocket_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithSocket:");
}

id objc_msgSend_initWithStatus_bundleID_path_activeDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithStatus:bundleID:path:activeDate:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeIntervalSince1970:");
}

id objc_msgSend_initWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimeIntervalSinceNow:");
}

id objc_msgSend_initWithTimestamp_fromDictionary_waldoSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithTimestamp:fromDictionary:waldoSource:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUserTier_effectiveUserTier_delegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUserTier:effectiveUserTier:delegate:");
}

id objc_msgSend_initWithWaldo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithWaldo:");
}

id objc_msgSend_inputDescriptionsByName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "inputDescriptionsByName");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interface");
}

id objc_msgSend_interface_disabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interface:disabled:");
}

id objc_msgSend_interfaceIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceIndex");
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceName");
}

id objc_msgSend_interfaceType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceType");
}

id objc_msgSend_interfaceTypeOfInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceTypeOfInterface:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_intermediateCertificate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "intermediateCertificate");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "invalidateAndCancel");
}

id objc_msgSend_ipProtocol_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "ipProtocol:");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isActive");
}

id objc_msgSend_isApplication(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isApplication");
}

id objc_msgSend_isAuthorized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isAuthorized");
}

id objc_msgSend_isCaptive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCaptive");
}

id objc_msgSend_isCaptiveStateDetermined(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isCaptiveStateDetermined");
}

id objc_msgSend_isDateInTomorrow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDateInTomorrow:");
}

id objc_msgSend_isDateInWeekend_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isDateInWeekend:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isIdentifier_presentIn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isIdentifier:presentIn:");
}

id objc_msgSend_isKernelActivated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isKernelActivated");
}

id objc_msgSend_isMultiHopProxyAgentRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isMultiHopProxyAgentRegistered");
}

id objc_msgSend_isNetworkOutage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isNetworkOutage");
}

id objc_msgSend_isPrivacyProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivacyProxy");
}

id objc_msgSend_isPrivacyProxyEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isPrivacyProxyEnabled");
}

id objc_msgSend_isRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRegistered");
}

id objc_msgSend_isRunning(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isRunning");
}

id objc_msgSend_isServiceOutage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isServiceOutage");
}

id objc_msgSend_isSingleHopProxyAgentRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSingleHopProxyAgentRegistered");
}

id objc_msgSend_isSubscriberUnlimited(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSubscriberUnlimited");
}

id objc_msgSend_isSupportedTokenType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isSupportedTokenType");
}

id objc_msgSend_isUserActivated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isUserActivated");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isValid");
}

id objc_msgSend_isVoluntary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "isVoluntary");
}

id objc_msgSend_issuerName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "issuerName");
}

id objc_msgSend_iterateFileHandlesWithBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "iterateFileHandlesWithBlock:");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "key");
}

id objc_msgSend_keyConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyConfiguration");
}

id objc_msgSend_keyId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keyId");
}

id objc_msgSend_keybag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "keybag");
}

id objc_msgSend_knownTrackersEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "knownTrackersEnabled");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "label");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPrivateCloudComputeEnvironment(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastPrivateCloudComputeEnvironment");
}

id objc_msgSend_lastProxyOutageReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastProxyOutageReason");
}

id objc_msgSend_lastTokenOutageReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lastTokenOutageReason");
}

id objc_msgSend_latency(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latency");
}

id objc_msgSend_latestGeohashLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latestGeohashLocation");
}

id objc_msgSend_latestLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latestLocation");
}

id objc_msgSend_latitude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "latitude");
}

id objc_msgSend_launchWarningDetailsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "launchWarningDetailsEnabled");
}

id objc_msgSend_leafCertificate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "leafCertificate");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "length");
}

id objc_msgSend_levelForFactor_withNamespaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "levelForFactor:withNamespaceName:");
}

id objc_msgSend_limit(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "limit");
}

id objc_msgSend_link(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "link");
}

id objc_msgSend_linkLatenciesAllSignatures_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "linkLatenciesAllSignatures:");
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "load");
}

id objc_msgSend_loadContentsOfURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadContentsOfURL:configuration:completionHandler:");
}

id objc_msgSend_loadPersistentStoresWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "loadPersistentStoresWithCompletionHandler:");
}

id objc_msgSend_localNetworks(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localNetworks");
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizations");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedStringFromDate_dateStyle_timeStyle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "localizedStringFromDate:dateStyle:timeStyle:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "location");
}

id objc_msgSend_locationBundlePath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationBundlePath");
}

id objc_msgSend_locationCheckInterval(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationCheckInterval");
}

id objc_msgSend_locationCheckTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationCheckTimestamp");
}

id objc_msgSend_locationExpiration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationExpiration");
}

id objc_msgSend_locationManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationManager");
}

id objc_msgSend_locationPreference(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationPreference");
}

id objc_msgSend_locationTTL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationTTL");
}

id objc_msgSend_locationToleranceDistance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "locationToleranceDistance");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longValue");
}

id objc_msgSend_longtitude(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "longtitude");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_lstm_input(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "lstm_input");
}

id objc_msgSend_machOUUIDsForBundleIdentifiers_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machOUUIDsForBundleIdentifiers:error:");
}

id objc_msgSend_machoUUIDFromPID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "machoUUIDFromPID:");
}

id objc_msgSend_mailTrackersEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mailTrackersEnabled");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_matchEgress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchEgress:");
}

id objc_msgSend_matchExactHostnames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchExactHostnames");
}

id objc_msgSend_matchIngress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchIngress:");
}

id objc_msgSend_matchSigningIdentifier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchSigningIdentifier");
}

id objc_msgSend_matchesMap_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "matchesMap:");
}

id objc_msgSend_merge_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "merge:");
}

id objc_msgSend_merge_missingSettingsOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "merge:missingSettingsOnly:");
}

id objc_msgSend_mergeProxyTrafficStateWithCurrentPolicy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeProxyTrafficStateWithCurrentPolicy");
}

id objc_msgSend_mergeTokenStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mergeTokenStats:");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metadata");
}

id objc_msgSend_metricsUploadEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "metricsUploadEnabled");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "minute");
}

id objc_msgSend_missingTokenCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "missingTokenCount");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "model");
}

id objc_msgSend_modelDescription(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelDescription");
}

id objc_msgSend_modelSpecificLocalizedStringKeyForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelSpecificLocalizedStringKeyForKey:");
}

id objc_msgSend_modelWithContentsOfURL_configuration_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelWithContentsOfURL:configuration:error:");
}

id objc_msgSend_modelWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "modelWithContentsOfURL:error:");
}

id objc_msgSend_multiArrayConstraint(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiArrayConstraint");
}

id objc_msgSend_multiArrayValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiArrayValue");
}

id objc_msgSend_multiHopAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopAgentRegistered:");
}

id objc_msgSend_multiHopAgentUnregistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopAgentUnregistered:");
}

id objc_msgSend_multiHopFallbackProxyAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopFallbackProxyAgentRegistered:");
}

id objc_msgSend_multiHopFallbackProxyAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopFallbackProxyAgentUUID");
}

id objc_msgSend_multiHopFallbackProxyConfigHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopFallbackProxyConfigHash:");
}

id objc_msgSend_multiHopProxyAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopProxyAgentRegistered:");
}

id objc_msgSend_multiHopProxyAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopProxyAgentUUID");
}

id objc_msgSend_multiHopQUICProxyConfigHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopQUICProxyConfigHash:");
}

id objc_msgSend_multiHopRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopRegistered");
}

id objc_msgSend_multiHopRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "multiHopRegistration");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "name");
}

id objc_msgSend_netAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "netAgentUUID:");
}

id objc_msgSend_networkDiscoveredProxyInTrustedProxyList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkDiscoveredProxyInTrustedProxyList:");
}

id objc_msgSend_networkDiscoveredProxyPaths_registeredForAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkDiscoveredProxyPaths:registeredForAgentUUID:");
}

id objc_msgSend_networkDiscoveredProxyPresentInAgentManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkDiscoveredProxyPresentInAgentManager");
}

id objc_msgSend_networkFallbackProxiesRotated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkFallbackProxiesRotated");
}

id objc_msgSend_networkMultiHopAgentStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkMultiHopAgentStatistics");
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkName");
}

id objc_msgSend_networkOutageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkOutageCount");
}

id objc_msgSend_networkProxiesRotated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkProxiesRotated");
}

id objc_msgSend_networkSignatureChanged(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkSignatureChanged");
}

id objc_msgSend_networkSingleHopAgentStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkSingleHopAgentStatistics");
}

id objc_msgSend_networkStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkStatus");
}

id objc_msgSend_networkStatusString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkStatusString");
}

id objc_msgSend_networkStatuses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkStatuses");
}

id objc_msgSend_networkToolsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkToolsEnabled");
}

id objc_msgSend_networkType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkType");
}

id objc_msgSend_networkTypeString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "networkTypeString");
}

id objc_msgSend_newScore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newScore");
}

id objc_msgSend_newsEmbeddedContentEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newsEmbeddedContentEnabled");
}

id objc_msgSend_newsURLResolutionEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "newsURLResolutionEnabled");
}

id objc_msgSend_nextDateAfterDate_matchingUnit_value_options_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nextDateAfterDate:matchingUnit:value:options:");
}

id objc_msgSend_nonDefaultAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonDefaultAgentUUID");
}

id objc_msgSend_nonDefaultAttesters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nonDefaultAttesters");
}

id objc_msgSend_normalizeData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "normalizeData:");
}

id objc_msgSend_normalizer_input(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "normalizer_input");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "now");
}

id objc_msgSend_nsurlErrorCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "nsurlErrorCode");
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_ofClass_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKey:ofClass:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_obliviousAgentRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousAgentRegistered");
}

id objc_msgSend_obliviousConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousConfig");
}

id objc_msgSend_obliviousConfigs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousConfigs");
}

id objc_msgSend_obliviousDoHConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousDoHConfig");
}

id objc_msgSend_obliviousHTTPConfig(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousHTTPConfig");
}

id objc_msgSend_obliviousHTTPType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousHTTPType");
}

id objc_msgSend_obliviousHopAgentRegistered_hostname_processes_agentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousHopAgentRegistered:hostname:processes:agentUUID:");
}

id objc_msgSend_obliviousHopAgentRegisteredForHostname_processes_agentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousHopAgentRegisteredForHostname:processes:agentUUID:");
}

id objc_msgSend_obliviousHopAgentUnregistered_hostname_agentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousHopAgentUnregistered:hostname:agentUUID:");
}

id objc_msgSend_obliviousHopAgentUnregisteredForHostname_agentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousHopAgentUnregisteredForHostname:agentUUID:");
}

id objc_msgSend_obliviousTarget(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousTarget");
}

id objc_msgSend_obliviousTargets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "obliviousTargets");
}

id objc_msgSend_odohAuthFailureCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "odohAuthFailureCount");
}

id objc_msgSend_odohBadMessageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "odohBadMessageCount");
}

id objc_msgSend_odohOutageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "odohOutageCount");
}

id objc_msgSend_odohProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "odohProxy");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_orPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "orPredicateWithSubpredicates:");
}

id objc_msgSend_originName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originName");
}

id objc_msgSend_originNames(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "originNames");
}

id objc_msgSend_outageDurationSec(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outageDurationSec");
}

id objc_msgSend_outageReasonSubType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outageReasonSubType");
}

id objc_msgSend_outageReasonType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outageReasonType");
}

id objc_msgSend_outageType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outageType");
}

id objc_msgSend_outageTypeToString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "outageTypeToString");
}

id objc_msgSend_overrideFallbackIngressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideFallbackIngressProxy");
}

id objc_msgSend_overrideIngressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideIngressProxy");
}

id objc_msgSend_overrideIngressProxy_fallbackProxy_key_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideIngressProxy:fallbackProxy:key:");
}

id objc_msgSend_overrideIngressProxyKey(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideIngressProxyKey");
}

id objc_msgSend_overridePreferredObliviousProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overridePreferredObliviousProxy");
}

id objc_msgSend_overridePreferredObliviousProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overridePreferredObliviousProxy:");
}

id objc_msgSend_overridePreferredProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overridePreferredProxy");
}

id objc_msgSend_overridePreferredProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overridePreferredProxy:");
}

id objc_msgSend_overrideProxiedContentMap_enabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "overrideProxiedContentMap:enabled:");
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "parameters");
}

id objc_msgSend_passwordManagerIconFetchEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "passwordManagerIconFetchEnabled");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "path");
}

id objc_msgSend_pathForClientID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForClientID:");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathReady");
}

id objc_msgSend_pathWeights(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pathWeights");
}

id objc_msgSend_pausedBundleIDs(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pausedBundleIDs");
}

id objc_msgSend_pausedProcessPaths(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pausedProcessPaths");
}

id objc_msgSend_percentEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "percentEnabled");
}

id objc_msgSend_percentEncodedHost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "percentEncodedHost");
}

id objc_msgSend_percentEncodedPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "percentEncodedPath");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performFraudReportRefreshWithAccount_transactionID_nameSpace_fsrData_keyID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performFraudReportRefreshWithAccount:transactionID:nameSpace:fsrData:keyID:");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_persistentContainer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "persistentContainer");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "pid");
}

id objc_msgSend_platformBinary(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "platformBinary");
}

id objc_msgSend_policiesUpdated_policy_resolverInfoChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policiesUpdated:policy:resolverInfoChanged:");
}

id objc_msgSend_policy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policy");
}

id objc_msgSend_policyIncludesUnlimited(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyIncludesUnlimited");
}

id objc_msgSend_policyTierMaps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "policyTierMaps");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "port");
}

id objc_msgSend_postNotification_value_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postNotification:value:");
}

id objc_msgSend_postbackFetchEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "postbackFetchEnabled");
}

id objc_msgSend_predicateMatchingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateMatchingBundleIdentifier:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_predictionFromDenormalizer_input_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromDenormalizer_input:error:");
}

id objc_msgSend_predictionFromFeatures_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:error:");
}

id objc_msgSend_predictionFromFeatures_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromFeatures:options:error:");
}

id objc_msgSend_predictionFromLstm_input_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromLstm_input:error:");
}

id objc_msgSend_predictionFromNormalizer_input_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionFromNormalizer_input:error:");
}

id objc_msgSend_predictionsFromBatch_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "predictionsFromBatch:options:error:");
}

id objc_msgSend_preferredLocalizationsFromArray_forPreferences_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredLocalizationsFromArray:forPreferences:");
}

id objc_msgSend_preferredPathConfigURI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredPathConfigURI");
}

id objc_msgSend_preferredPathConfigUri(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredPathConfigUri");
}

id objc_msgSend_preferredPathEnabledPercentage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredPathEnabledPercentage");
}

id objc_msgSend_preferredPathPatterns(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredPathPatterns");
}

id objc_msgSend_preferredPathPatternsCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredPathPatternsCount");
}

id objc_msgSend_preferredPathRoutingEnabledStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredPathRoutingEnabledStatus");
}

id objc_msgSend_preferredProxyAgentRegistered_agentUUID_domainFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredProxyAgentRegistered:agentUUID:domainFilter:");
}

id objc_msgSend_preferredProxyAgentUnregistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "preferredProxyAgentUnregistered:");
}

id objc_msgSend_prepareInputForPrediction_vendor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareInputForPrediction:vendor:");
}

id objc_msgSend_prepareMLData_startAt_dataShape_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareMLData:startAt:dataShape:");
}

id objc_msgSend_prepareModelInputWithFeatures_keyedSubscripts_features_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareModelInputWithFeatures:keyedSubscripts:features:");
}

id objc_msgSend_prepareTokenEventsFromPrediction_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "prepareTokenEventsFromPrediction:");
}

id objc_msgSend_primaryAuthKitAccount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryAuthKitAccount");
}

id objc_msgSend_primaryEgressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryEgressProxy");
}

id objc_msgSend_primaryIngressProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryIngressProxy");
}

id objc_msgSend_primaryPathStatistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryPathStatistics");
}

id objc_msgSend_primaryProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "primaryProxy");
}

id objc_msgSend_printMLMultiArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "printMLMultiArray:");
}

id objc_msgSend_privacyProxyURLSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privacyProxyURLSession");
}

id objc_msgSend_privateAccessTokensAllowTools(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateAccessTokensAllowTools");
}

id objc_msgSend_privateAccessTokensEnabledChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateAccessTokensEnabledChanged:");
}

id objc_msgSend_privateAccessTokensEnabledStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateAccessTokensEnabledStatus");
}

id objc_msgSend_privateScalarFromSecKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "privateScalarFromSecKey:");
}

id objc_msgSend_probeDurationSec(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeDurationSec");
}

id objc_msgSend_probeFailed_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeFailed:");
}

id objc_msgSend_probeInterface(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeInterface");
}

id objc_msgSend_probeReason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeReason");
}

id objc_msgSend_probeReasonToString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeReasonToString");
}

id objc_msgSend_probeRedirected_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeRedirected:");
}

id objc_msgSend_probeServerError_httpStatusCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeServerError:httpStatusCode:");
}

id objc_msgSend_probeSize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeSize");
}

id objc_msgSend_probeSuccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "probeSuccess:");
}

id objc_msgSend_processes(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processes");
}

id objc_msgSend_promotedContentEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "promotedContentEnabled");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "protectionSpace");
}

id objc_msgSend_proxiedContentAgentRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiedContentAgentRegistered");
}

id objc_msgSend_proxiedContentAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiedContentAgentRegistered:");
}

id objc_msgSend_proxiedContentAgentUnregistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiedContentAgentUnregistered:");
}

id objc_msgSend_proxiedContentMapIsOverrideEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiedContentMapIsOverrideEnabled:");
}

id objc_msgSend_proxiedContentMaps(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiedContentMaps");
}

id objc_msgSend_proxiedContentMaps_registeredForAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiedContentMaps:registeredForAgentUUID:");
}

id objc_msgSend_proxiedContentMapsUnregisteredForAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiedContentMapsUnregisteredForAgentUUID:");
}

id objc_msgSend_proxies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxies");
}

id objc_msgSend_proxiesCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiesCount");
}

id objc_msgSend_proxiesMatch_proxyPathList_ingressProxy_egressProxy_pathWeight_supportsFallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiesMatch:proxyPathList:ingressProxy:egressProxy:pathWeight:supportsFallback:");
}

id objc_msgSend_proxiesRotated(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxiesRotated");
}

id objc_msgSend_proxyAccountType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyAccountType");
}

id objc_msgSend_proxyAccountTypeToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyAccountTypeToString:");
}

id objc_msgSend_proxyAccountUnlimited(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyAccountUnlimited");
}

id objc_msgSend_proxyAgentLowWaterMarkHitCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyAgentLowWaterMarkHitCount");
}

id objc_msgSend_proxyAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyAgentUUID");
}

id objc_msgSend_proxyCacheLowWaterMarkHitCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyCacheLowWaterMarkHitCount");
}

id objc_msgSend_proxyConfiguration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyConfiguration");
}

id objc_msgSend_proxyConfigurationData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyConfigurationData");
}

id objc_msgSend_proxyConnectivityActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyConnectivityActive");
}

id objc_msgSend_proxyConnectivityNetworkOutage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyConnectivityNetworkOutage");
}

id objc_msgSend_proxyConnectivityOutage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyConnectivityOutage");
}

id objc_msgSend_proxyHop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyHop");
}

id objc_msgSend_proxyIndex(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyIndex");
}

id objc_msgSend_proxyInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyInfo");
}

id objc_msgSend_proxyInfoChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyInfoChanged:");
}

id objc_msgSend_proxyKeyInfos(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyKeyInfos");
}

id objc_msgSend_proxyOutageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyOutageCount");
}

id objc_msgSend_proxyPathIsValid_proxyPathList_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyPathIsValid:proxyPathList:");
}

id objc_msgSend_proxyPathReady(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyPathReady");
}

id objc_msgSend_proxyPathWeight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyPathWeight");
}

id objc_msgSend_proxyProbeCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyProbeCount");
}

id objc_msgSend_proxyProbeFailedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyProbeFailedCount");
}

id objc_msgSend_proxyProbeRedirectedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyProbeRedirectedCount");
}

id objc_msgSend_proxyProbeServerErrorCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyProbeServerErrorCount");
}

id objc_msgSend_proxyProbeSuccessCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyProbeSuccessCount");
}

id objc_msgSend_proxyTokenConsumedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTokenConsumedCount");
}

id objc_msgSend_proxyTokenExpiredCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTokenExpiredCount");
}

id objc_msgSend_proxyTokenFetchDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTokenFetchDisabled:");
}

id objc_msgSend_proxyTokenFetchEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTokenFetchEnabled:");
}

id objc_msgSend_proxyTokenFetchFailedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTokenFetchFailedCount");
}

id objc_msgSend_proxyTokenFetchSuccessCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTokenFetchSuccessCount");
}

id objc_msgSend_proxyTrafficState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTrafficState");
}

id objc_msgSend_proxyTrafficStateToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyTrafficStateToString:");
}

id objc_msgSend_proxyURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyURL");
}

id objc_msgSend_proxyURLPath(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyURLPath");
}

id objc_msgSend_proxyVendor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyVendor");
}

id objc_msgSend_proxyVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "proxyVersion");
}

id objc_msgSend_publishDailyConfigurationStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishDailyConfigurationStats");
}

id objc_msgSend_publishDailyNetworkStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishDailyNetworkStatus");
}

id objc_msgSend_publishDailyServiceStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "publishDailyServiceStatus");
}

id objc_msgSend_purgeEventsOlderThanDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "purgeEventsOlderThanDate:");
}

id objc_msgSend_quicAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quicAgentUUID");
}

id objc_msgSend_quicProxyPathDelegate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quicProxyPathDelegate");
}

id objc_msgSend_quicRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "quicRegistration");
}

id objc_msgSend_realUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "realUID:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reason");
}

id objc_msgSend_redemptionNonce(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "redemptionNonce");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refresh");
}

id objc_msgSend_refreshConfigurationWithReason_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshConfigurationWithReason:completionHandler:");
}

id objc_msgSend_refreshCountryPlusTimezone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshCountryPlusTimezone:");
}

id objc_msgSend_refreshProxyInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "refreshProxyInfo:");
}

id objc_msgSend_regionId(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "regionId");
}

id objc_msgSend_registerForFeatureChangeNotificationsUsingBlock_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerForFeatureChangeNotificationsUsingBlock:");
}

id objc_msgSend_registerNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "registerNetworkAgent:");
}

id objc_msgSend_remoteAddressStart_end_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remoteAddressStart:end:");
}

id objc_msgSend_remove_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "remove:");
}

id objc_msgSend_removeAllDeliveredNotifications(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllDeliveredNotifications");
}

id objc_msgSend_removeAllDomainFilters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllDomainFilters");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAllPolicies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeAllPolicies");
}

id objc_msgSend_removeDataFromKeychainWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDataFromKeychainWithIdentifier:");
}

id objc_msgSend_removeDataFromKeychainWithIdentifier_accountName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDataFromKeychainWithIdentifier:accountName:");
}

id objc_msgSend_removeDayPassesFromKernel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDayPassesFromKernel");
}

id objc_msgSend_removeDomainFilterWithID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeDomainFilterWithID:");
}

id objc_msgSend_removeExpiredTokens(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeExpiredTokens");
}

id objc_msgSend_removeFileHandleMatchingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFileHandleMatchingPredicate:");
}

id objc_msgSend_removeFromKeychain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFromKeychain");
}

id objc_msgSend_removeFromPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeFromPreferences");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeNetworkAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeNetworkAgentUUID:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObliviousProxyAgent_forHostname_apply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObliviousProxyAgent:forHostname:apply:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_removePoliciesForMPTCPConverterProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePoliciesForMPTCPConverterProxy:");
}

id objc_msgSend_removePolicyWithID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePolicyWithID:");
}

id objc_msgSend_removePreferredProxy_apply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removePreferredProxy:apply:");
}

id objc_msgSend_removeProxiedContentAgent_apply_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeProxiedContentAgent:apply:");
}

id objc_msgSend_removeProxyAgents(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeProxyAgents");
}

id objc_msgSend_removeProxyInfoFromKeychain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeProxyInfoFromKeychain");
}

id objc_msgSend_removeUpdateHandlerForToken_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeUpdateHandlerForToken:");
}

id objc_msgSend_replaceDisabledInterfaces_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceDisabledInterfaces:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_reportActiveOnCellularName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActiveOnCellularName:");
}

id objc_msgSend_reportActiveOnInterfaceName_displayName_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActiveOnInterfaceName:displayName:type:");
}

id objc_msgSend_reportActiveOnWiFiName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActiveOnWiFiName:");
}

id objc_msgSend_reportActivityForApp_path_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportActivityForApp:path:");
}

id objc_msgSend_reportBlockedOnCellularName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBlockedOnCellularName:");
}

id objc_msgSend_reportBlockedOnInterfaceName_displayName_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBlockedOnInterfaceName:displayName:type:");
}

id objc_msgSend_reportBlockedOnWiFiName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportBlockedOnWiFiName:");
}

id objc_msgSend_reportDisabledOnCellularName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportDisabledOnCellularName:");
}

id objc_msgSend_reportDisabledOnInterfaceName_displayName_type_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportDisabledOnInterfaceName:displayName:type:");
}

id objc_msgSend_reportDisabledOnWiFiName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportDisabledOnWiFiName:");
}

id objc_msgSend_reportEpoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportEpoch:");
}

id objc_msgSend_reportErrorForAgent_error_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportErrorForAgent:error:withOptions:");
}

id objc_msgSend_reportErrorForDNSAgent_error_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportErrorForDNSAgent:error:withOptions:");
}

id objc_msgSend_reportErrorForNetworkRegistration_error_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportErrorForNetworkRegistration:error:withOptions:");
}

id objc_msgSend_reportErrorForTokenRegistration_error_withOptions_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportErrorForTokenRegistration:error:withOptions:");
}

id objc_msgSend_reportFraudAlert(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportFraudAlert");
}

id objc_msgSend_reportObliviousPathError_interface_obliviousPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportObliviousPathError:interface:obliviousPath:");
}

id objc_msgSend_reportPrivacyProxySuccessOnInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportPrivacyProxySuccessOnInterface:");
}

id objc_msgSend_reportProxiedContentPathError_interface_proxiedContentPath_registration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportProxiedContentPathError:interface:proxiedContentPath:registration:");
}

id objc_msgSend_reportProxyError_interface_proxyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportProxyError:interface:proxyPath:");
}

id objc_msgSend_reportProxySuccessOnInterface_proxyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportProxySuccessOnInterface:proxyPath:");
}

id objc_msgSend_reportServiceActiveShouldReport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportServiceActiveShouldReport:");
}

id objc_msgSend_reportServiceDisabledShouldReport_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportServiceDisabledShouldReport:");
}

id objc_msgSend_reportServiceOutageWithType_outageReasonStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportServiceOutageWithType:outageReasonStats:");
}

id objc_msgSend_reportSubscriberUnsupportedRegion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportSubscriberUnsupportedRegion:");
}

id objc_msgSend_reportSystemIncompatibility(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportSystemIncompatibility");
}

id objc_msgSend_reportTokenFetchFailure_statusCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportTokenFetchFailure:statusCode:");
}

id objc_msgSend_reportUnsupportedRegion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportUnsupportedRegion:");
}

id objc_msgSend_reportedScore(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportedScore");
}

id objc_msgSend_requestAccessTokenWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestAccessTokenWithCompletionHandler:");
}

id objc_msgSend_requestFeatureWithId_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestFeatureWithId:completion:");
}

id objc_msgSend_requestLocation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestLocation");
}

id objc_msgSend_requestWithIdentifier_content_trigger_destinations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithIdentifier:content:trigger:destinations:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requestWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_requestedServerUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestedServerUUID");
}

id objc_msgSend_requestedTokenCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestedTokenCount");
}

id objc_msgSend_requireTFO(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requireTFO");
}

id objc_msgSend_requiredAgentDomain_agentType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requiredAgentDomain:agentType:");
}

id objc_msgSend_resetConfigurationManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetConfigurationManager");
}

id objc_msgSend_resetDeviceIdentityInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetDeviceIdentityInfo");
}

id objc_msgSend_resetError(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetError");
}

id objc_msgSend_resetFallbackProxyAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetFallbackProxyAgent");
}

id objc_msgSend_resetMultiHopProxyAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetMultiHopProxyAgent");
}

id objc_msgSend_resetProxyErrors(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetProxyErrors");
}

id objc_msgSend_resetQUICProxyAgentForceUpdateDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetQUICProxyAgentForceUpdateDelegate:");
}

id objc_msgSend_resetResolverAgentForceUpdateDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetResolverAgentForceUpdateDelegate:");
}

id objc_msgSend_resetResumableSessionTickets(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetResumableSessionTickets");
}

id objc_msgSend_resetSingleHopProxyAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetSingleHopProxyAgent");
}

id objc_msgSend_resetStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetStats");
}

id objc_msgSend_resetTomorrowDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resetTomorrowDate");
}

id objc_msgSend_resolveWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolveWithCompletionHandler:");
}

id objc_msgSend_resolvedAddresses(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolvedAddresses");
}

id objc_msgSend_resolver(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolver");
}

id objc_msgSend_resolverAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolverAgentUUID");
}

id objc_msgSend_resolverRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolverRegistration");
}

id objc_msgSend_resolvers(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resolvers");
}

id objc_msgSend_result(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "result");
}

id objc_msgSend_resultWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resultWithCompletion:");
}

id objc_msgSend_resumableSessionLowWaterMarkReached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumableSessionLowWaterMarkReached");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resume");
}

id objc_msgSend_resumePrivacyProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resumePrivacyProxy:");
}

id objc_msgSend_resurrectionDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resurrectionDate");
}

id objc_msgSend_reverseGeocodeLocation_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reverseGeocodeLocation:completionHandler:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_rotation(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "rotation");
}

id objc_msgSend_routeRuleWithAction_forInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forInterfaceName:");
}

id objc_msgSend_routeRuleWithAction_forNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forNetworkAgent:");
}

id objc_msgSend_routeRuleWithAction_forNetworkAgent_forInterfaceName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forNetworkAgent:forInterfaceName:");
}

id objc_msgSend_routeRuleWithAction_forType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRuleWithAction:forType:");
}

id objc_msgSend_routeRules_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "routeRules:");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "run");
}

id objc_msgSend_safariAllEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariAllEnabled");
}

id objc_msgSend_safariDNSEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariDNSEnabled");
}

id objc_msgSend_safariHTTPEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariHTTPEnabled");
}

id objc_msgSend_safariMetricsEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariMetricsEnabled");
}

id objc_msgSend_safariPrivateAllEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariPrivateAllEnabled");
}

id objc_msgSend_safariPrivateDNSEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariPrivateDNSEnabled");
}

id objc_msgSend_safariPrivateUnencryptedEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariPrivateUnencryptedEnabled");
}

id objc_msgSend_safariTrackersEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariTrackersEnabled");
}

id objc_msgSend_safariUnencryptedEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "safariUnencryptedEnabled");
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "save:");
}

id objc_msgSend_saveDataToKeychain_withIdentifier_accountName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveDataToKeychain:withIdentifier:accountName:");
}

id objc_msgSend_saveKeyToKeychain_withIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveKeyToKeychain:withIdentifier:");
}

id objc_msgSend_saveToKeychain(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveToKeychain");
}

id objc_msgSend_saveToPreferences(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveToPreferences");
}

id objc_msgSend_saveTokenEvent_eventType_vendor_tokenCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "saveTokenEvent:eventType:vendor:tokenCount:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "scheme");
}

id objc_msgSend_schemeUsingPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "schemeUsingPort:");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "second");
}

id objc_msgSend_selectedEnvironmentNameWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "selectedEnvironmentNameWithCompletionHandler:");
}

id objc_msgSend_sendAnalytics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendAnalytics");
}

id objc_msgSend_sendOneMessageWithSessionInfo_userInfo_category_type_payload_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendOneMessageWithSessionInfo:userInfo:category:type:payload:error:");
}

id objc_msgSend_sendRTCReportForPrivacyProxyToggleState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRTCReportForPrivacyProxyToggleState:");
}

id objc_msgSend_sendRTCReportForServiceOutage_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRTCReportForServiceOutage:");
}

id objc_msgSend_sendRTCReportWithFailureType_errorCode_url_ingressProxy_egressProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRTCReportWithFailureType:errorCode:url:ingressProxy:egressProxy:");
}

id objc_msgSend_sendRequestForTokens_tokenFetchURLSession_messageBody_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRequestForTokens:tokenFetchURLSession:messageBody:completionHandler:");
}

id objc_msgSend_sendRequestForTokens_tokenFetchURLSession_tokenActivationQuery_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendRequestForTokens:tokenFetchURLSession:tokenActivationQuery:completionHandler:");
}

id objc_msgSend_sendToggleOffStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendToggleOffStats");
}

id objc_msgSend_sendToggleOnStats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sendToggleOnStats");
}

id objc_msgSend_sequential_TimeDistributedDense_dense_BiasAdd_true(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sequential_TimeDistributedDense_dense_BiasAdd_true");
}

id objc_msgSend_serialize(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serialize");
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serverTrust");
}

id objc_msgSend_serviceStatus(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatus");
}

id objc_msgSend_serviceStatusActiveCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusActiveCount");
}

id objc_msgSend_serviceStatusDisabledCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusDisabledCount");
}

id objc_msgSend_serviceStatusEndTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusEndTime");
}

id objc_msgSend_serviceStatusFraudAlertCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusFraudAlertCount");
}

id objc_msgSend_serviceStatusNetworkOutageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusNetworkOutageCount");
}

id objc_msgSend_serviceStatusOutageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusOutageCount");
}

id objc_msgSend_serviceStatusStartTime(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusStartTime");
}

id objc_msgSend_serviceStatusString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusString:");
}

id objc_msgSend_serviceStatusSubscriberUnsupportedRegionCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusSubscriberUnsupportedRegionCount");
}

id objc_msgSend_serviceStatusSystemIncompatibleCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusSystemIncompatibleCount");
}

id objc_msgSend_serviceStatusTimeline(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusTimeline");
}

id objc_msgSend_serviceStatusUnsupportedRegionCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "serviceStatusUnsupportedRegionCount");
}

id objc_msgSend_sessionType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionType");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set_flowDivertHandle_inProcessFlowDivert_ingressProxyURL_ingressFallbackProxyURL_exceptionBundleIDs_exceptionProcessPaths_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set:flowDivertHandle:inProcessFlowDivert:ingressProxyURL:ingressFallbackProxyURL:exceptionBundleIDs:exceptionProcessPaths:");
}

id objc_msgSend_setActivatedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActivatedCount:");
}

id objc_msgSend_setActivatedTokenCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActivatedTokenCount:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setAgentDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentDescription:");
}

id objc_msgSend_setAgentFlags_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentFlags:");
}

id objc_msgSend_setAgentLowWaterMark_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentLowWaterMark:");
}

id objc_msgSend_setAgentTokens_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentTokens:");
}

id objc_msgSend_setAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAgentUUID:");
}

id objc_msgSend_setAllowFailOpen_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowFailOpen:");
}

id objc_msgSend_setAllowFallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAllowFallback:");
}

id objc_msgSend_setAnisetteValidationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnisetteValidationCount:");
}

id objc_msgSend_setAnyAppEnabledDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAnyAppEnabledDate:");
}

id objc_msgSend_setAppMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppMetricsEnabled:");
}

id objc_msgSend_setAppRules_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppRules:");
}

id objc_msgSend_setAppStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppStatus:");
}

id objc_msgSend_setAppTrackersEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppTrackersEnabled:");
}

id objc_msgSend_setAppleCertificatesEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAppleCertificatesEnabled:");
}

id objc_msgSend_setAssociatedMaps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAssociatedMaps:");
}

id objc_msgSend_setAuthInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthInfo:");
}

id objc_msgSend_setAuthType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthType:");
}

id objc_msgSend_setAuthenticationType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuthenticationType:");
}

id objc_msgSend_setAuxiliaryData_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setAuxiliaryData:forKey:");
}

id objc_msgSend_setBaaParameters_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBaaParameters:");
}

id objc_msgSend_setBaaSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBaaSignature:");
}

id objc_msgSend_setBadTokenCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBadTokenCount:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBoundInterfaceIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBoundInterfaceIdentifier:");
}

id objc_msgSend_setBrandedCallingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setBrandedCallingEnabled:");
}

id objc_msgSend_setCacheLowWaterMark_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCacheLowWaterMark:");
}

id objc_msgSend_setCachedLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedLocation:");
}

id objc_msgSend_setCachedTokens_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCachedTokens:");
}

id objc_msgSend_setCaptivePortalExceptionHostname_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCaptivePortalExceptionHostname:");
}

id objc_msgSend_setCellStatusActiveCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellStatusActiveCount:");
}

id objc_msgSend_setCellStatusBlockedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellStatusBlockedCount:");
}

id objc_msgSend_setCellStatusDisabledCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCellStatusDisabledCount:");
}

id objc_msgSend_setCertificates_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCertificates:");
}

id objc_msgSend_setComputeUnits_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setComputeUnits:");
}

id objc_msgSend_setConfigAgeHours_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigAgeHours:");
}

id objc_msgSend_setConfigEpoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigEpoch:");
}

id objc_msgSend_setConfigFetchURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigFetchURL:");
}

id objc_msgSend_setConfigFetchedFailedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigFetchedFailedCount:");
}

id objc_msgSend_setConfigFetchedSuccessCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigFetchedSuccessCount:");
}

id objc_msgSend_setConfigOutageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigOutageCount:");
}

id objc_msgSend_setConfigServerEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigServerEnabled:");
}

id objc_msgSend_setConfigServerHost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigServerHost:");
}

id objc_msgSend_setConfigServerPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigServerPath:");
}

id objc_msgSend_setConfigTag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigTag:");
}

id objc_msgSend_setConfigurationEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationEnabled:");
}

id objc_msgSend_setConfigurationFetchDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationFetchDate:");
}

id objc_msgSend_setConfigurationTrialVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationTrialVersion:");
}

id objc_msgSend_setConfigurationVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setConfigurationVersion:");
}

id objc_msgSend_setControlUnit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setControlUnit:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCurrentGeohash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentGeohash:");
}

id objc_msgSend_setCurrentNetworkCharacteristics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCurrentNetworkCharacteristics:");
}

id objc_msgSend_setDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDate:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDefaultActionURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDefaultActionURL:");
}

id objc_msgSend_setDeferAgentCommit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeferAgentCommit:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDesiredAccuracy:");
}

id objc_msgSend_setDetails_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDetails:");
}

id objc_msgSend_setDeviceIdentityValidationCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDeviceIdentityValidationCount:");
}

id objc_msgSend_setDirectPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDirectPath:");
}

id objc_msgSend_setDirectProbeCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDirectProbeCount:");
}

id objc_msgSend_setDirectProbeFailedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDirectProbeFailedCount:");
}

id objc_msgSend_setDirectProbeRedirectedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDirectProbeRedirectedCount:");
}

id objc_msgSend_setDirectProbeServerErrorCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDirectProbeServerErrorCount:");
}

id objc_msgSend_setDirectProbeSuccessCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDirectProbeSuccessCount:");
}

id objc_msgSend_setDistance_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDistance:");
}

id objc_msgSend_setDnsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsEnabled:");
}

id objc_msgSend_setDnsFilteringHintEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDnsFilteringHintEnabled:");
}

id objc_msgSend_setDomainFilter_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDomainFilter:");
}

id objc_msgSend_setEdgeSets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEdgeSets:");
}

id objc_msgSend_setEdges_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEdges:");
}

id objc_msgSend_setEdgesGeneration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEdgesGeneration:");
}

id objc_msgSend_setEgressFallbackProxyURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEgressFallbackProxyURL:");
}

id objc_msgSend_setEgressProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEgressProxy:");
}

id objc_msgSend_setEgressProxyLowWaterMarkHitCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEgressProxyLowWaterMarkHitCount:");
}

id objc_msgSend_setEgressProxyTokensAdded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEgressProxyTokensAdded:");
}

id objc_msgSend_setEgressProxyURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEgressProxyURL:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEnabledProxiedContentMaps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEnabledProxiedContentMaps:");
}

id objc_msgSend_setEpoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEpoch:");
}

id objc_msgSend_setErrorCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setErrorCode:");
}

id objc_msgSend_setErrorDomain_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setErrorDomain:");
}

id objc_msgSend_setEtag_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEtag:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setEventType:");
}

id objc_msgSend_setExactMatch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExactMatch:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExposureNotificationsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExposureNotificationsEnabled:");
}

id objc_msgSend_setExpression_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpression:");
}

id objc_msgSend_setExpressionResultType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setExpressionResultType:");
}

id objc_msgSend_setFallbackAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFallbackAgentUUID:");
}

id objc_msgSend_setFallbackEgressProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFallbackEgressProxy:");
}

id objc_msgSend_setFallbackIngressProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFallbackIngressProxy:");
}

id objc_msgSend_setFallbackProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFallbackProxy:");
}

id objc_msgSend_setFallbackRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFallbackRegistration:");
}

id objc_msgSend_setFallbackToQUIC_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFallbackToQUIC:");
}

id objc_msgSend_setFetchBatchSize_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFetchBatchSize:");
}

id objc_msgSend_setFetchLimit_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFetchLimit:");
}

id objc_msgSend_setFetchingSessionTickets_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFetchingSessionTickets:");
}

id objc_msgSend_setFileHandle_matchingPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFileHandle:matchingPredicate:");
}

id objc_msgSend_setForceFallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setForceFallback:");
}

id objc_msgSend_setFraudAlertCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFraudAlertCount:");
}

id objc_msgSend_setFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setFromDate:");
}

id objc_msgSend_setGeohashOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGeohashOverride:");
}

id objc_msgSend_setGeohashSharingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGeohashSharingEnabled:");
}

id objc_msgSend_setGeohashSharingEnabledStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGeohashSharingEnabledStatus:");
}

id objc_msgSend_setGeohashSharingPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setGeohashSharingPreference:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPErrorCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHTTPErrorCode:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHost_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHost:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setHttpCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setHttpCode:");
}

id objc_msgSend_setIgnoreInvalidCerts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIgnoreInvalidCerts:");
}

id objc_msgSend_setInProcessFlowDivert_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInProcessFlowDivert:");
}

id objc_msgSend_setIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIndex:");
}

id objc_msgSend_setIngressFallbackProxyURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIngressFallbackProxyURL:");
}

id objc_msgSend_setIngressProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIngressProxy:");
}

id objc_msgSend_setIngressProxyLowWaterMarkHitCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIngressProxyLowWaterMarkHitCount:");
}

id objc_msgSend_setIngressProxyTokensAdded_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIngressProxyTokensAdded:");
}

id objc_msgSend_setIngressProxyURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIngressProxyURL:");
}

id objc_msgSend_setInputShape_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInputShape:");
}

id objc_msgSend_setInterfaceType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setInterfaceType:");
}

id objc_msgSend_setIntermediateCertificate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setIntermediateCertificate:");
}

id objc_msgSend_setKernelActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKernelActivated:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKeybagGeneration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKeybagGeneration:");
}

id objc_msgSend_setKnownTrackersEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setKnownTrackersEnabled:");
}

id objc_msgSend_setLastCountryPlusTimezone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastCountryPlusTimezone:");
}

id objc_msgSend_setLastFallbackReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastFallbackReason:");
}

id objc_msgSend_setLastGeohash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastGeohash:");
}

id objc_msgSend_setLastPrivateCloudComputeEnvironment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLastPrivateCloudComputeEnvironment:");
}

id objc_msgSend_setLatency_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLatency:");
}

id objc_msgSend_setLatestGeohashLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLatestGeohashLocation:");
}

id objc_msgSend_setLatestLocation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLatestLocation:");
}

id objc_msgSend_setLaunchWarningDetailsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLaunchWarningDetailsEnabled:");
}

id objc_msgSend_setLeafCertificate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLeafCertificate:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocationCheckTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocationCheckTimestamp:");
}

id objc_msgSend_setLocationExpiration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocationExpiration:");
}

id objc_msgSend_setLocationManager_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocationManager:");
}

id objc_msgSend_setLocationPreference_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLocationPreference:");
}

id objc_msgSend_setLowWaterMark_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setLowWaterMark:");
}

id objc_msgSend_setMailTrackersEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMailTrackersEnabled:");
}

id objc_msgSend_setMetricsUploadEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMetricsUploadEnabled:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setMissingTokenCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMissingTokenCount:");
}

id objc_msgSend_setMonitorTimeInterval_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMonitorTimeInterval:");
}

id objc_msgSend_setMultiHopRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMultiHopRegistered:");
}

id objc_msgSend_setMultiHopRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setMultiHopRegistration:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNegative_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNegative:");
}

id objc_msgSend_setNetworkAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkAgentUUID:");
}

id objc_msgSend_setNetworkFallbackProxiesRotated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkFallbackProxiesRotated:");
}

id objc_msgSend_setNetworkMultiHopAgentStatistics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkMultiHopAgentStatistics:");
}

id objc_msgSend_setNetworkName_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkName:");
}

id objc_msgSend_setNetworkOutageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkOutageCount:");
}

id objc_msgSend_setNetworkProxiesRotated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkProxiesRotated:");
}

id objc_msgSend_setNetworkSingleHopAgentStatistics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkSingleHopAgentStatistics:");
}

id objc_msgSend_setNetworkStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkStatus:");
}

id objc_msgSend_setNetworkStatuses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkStatuses:");
}

id objc_msgSend_setNetworkToolsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkToolsEnabled:");
}

id objc_msgSend_setNetworkType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNetworkType:");
}

id objc_msgSend_setNewsEmbeddedContentEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNewsEmbeddedContentEnabled:");
}

id objc_msgSend_setNewsURLResolutionEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNewsURLResolutionEnabled:");
}

id objc_msgSend_setNonDefaultAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNonDefaultAgentUUID:");
}

id objc_msgSend_setNsurlErrorCode_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setNsurlErrorCode:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObliviousAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObliviousAgentRegistered:");
}

id objc_msgSend_setObliviousConfig_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObliviousConfig:");
}

id objc_msgSend_setObliviousHTTPType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObliviousHTTPType:");
}

id objc_msgSend_setObliviousTarget_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setObliviousTarget:");
}

id objc_msgSend_setOdohAuthFailureCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOdohAuthFailureCount:");
}

id objc_msgSend_setOdohBadMessageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOdohBadMessageCount:");
}

id objc_msgSend_setOdohOutageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOdohOutageCount:");
}

id objc_msgSend_setOdohProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOdohProxy:");
}

id objc_msgSend_setOutageDurationSec_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutageDurationSec:");
}

id objc_msgSend_setOutageReasonSubType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutageReasonSubType:");
}

id objc_msgSend_setOutageReasonType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutageReasonType:");
}

id objc_msgSend_setOutageType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setOutageType:");
}

id objc_msgSend_setParentContext_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setParentContext:");
}

id objc_msgSend_setPasswordManagerIconFetchEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPasswordManagerIconFetchEnabled:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPersistentContainer_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPersistentContainer:");
}

id objc_msgSend_setPort_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPort:");
}

id objc_msgSend_setPostbackFetchEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPostbackFetchEnabled:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPreferredPathConfigURI_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferredPathConfigURI:");
}

id objc_msgSend_setPreferredPathPatterns_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferredPathPatterns:");
}

id objc_msgSend_setPreferredPathRoutingEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferredPathRoutingEnabled:");
}

id objc_msgSend_setPreferredPathRoutingEnabledStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPreferredPathRoutingEnabledStatus:");
}

id objc_msgSend_setPrimaryEgressProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryEgressProxy:");
}

id objc_msgSend_setPrimaryIngressProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryIngressProxy:");
}

id objc_msgSend_setPrimaryProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrimaryProxy:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivacyProxyEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivacyProxyEnabled:");
}

id objc_msgSend_setPrivacyProxyState_enabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivacyProxyState:enabled:");
}

id objc_msgSend_setPrivateAccessTokensAllowTools_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateAccessTokensAllowTools:");
}

id objc_msgSend_setPrivateAccessTokensEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateAccessTokensEnabled:");
}

id objc_msgSend_setPrivateAccessTokensEnabledStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPrivateAccessTokensEnabledStatus:");
}

id objc_msgSend_setProbeDurationSec_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProbeDurationSec:");
}

id objc_msgSend_setProbeInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProbeInterface:");
}

id objc_msgSend_setProbeReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProbeReason:");
}

id objc_msgSend_setPromotedContentEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPromotedContentEnabled:");
}

id objc_msgSend_setPropertiesToFetch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setPropertiesToFetch:");
}

id objc_msgSend_setProxiedContentAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxiedContentAgentRegistered:");
}

id objc_msgSend_setProxiedContentMapDoHBootstrapEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxiedContentMapDoHBootstrapEnabled:");
}

id objc_msgSend_setProxiesRotated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxiesRotated:");
}

id objc_msgSend_setProxyAccountType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyAccountType:");
}

id objc_msgSend_setProxyAccountType_unlimited_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyAccountType:unlimited:");
}

id objc_msgSend_setProxyAccountUnlimited_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyAccountUnlimited:");
}

id objc_msgSend_setProxyAgentLowWaterMarkHitCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyAgentLowWaterMarkHitCount:");
}

id objc_msgSend_setProxyAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyAgentUUID:");
}

id objc_msgSend_setProxyCacheLowWaterMarkHitCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyCacheLowWaterMarkHitCount:");
}

id objc_msgSend_setProxyConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyConfiguration:");
}

id objc_msgSend_setProxyConfigurationData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyConfigurationData:");
}

id objc_msgSend_setProxyHop_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyHop:");
}

id objc_msgSend_setProxyInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyInfo:");
}

id objc_msgSend_setProxyOutageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyOutageCount:");
}

id objc_msgSend_setProxyPathWeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyPathWeight:");
}

id objc_msgSend_setProxyProbeCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyProbeCount:");
}

id objc_msgSend_setProxyProbeFailedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyProbeFailedCount:");
}

id objc_msgSend_setProxyProbeRedirectedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyProbeRedirectedCount:");
}

id objc_msgSend_setProxyProbeServerErrorCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyProbeServerErrorCount:");
}

id objc_msgSend_setProxyProbeSuccessCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyProbeSuccessCount:");
}

id objc_msgSend_setProxyTokenConsumedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyTokenConsumedCount:");
}

id objc_msgSend_setProxyTokenExpiredCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyTokenExpiredCount:");
}

id objc_msgSend_setProxyTokenFetchFailedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyTokenFetchFailedCount:");
}

id objc_msgSend_setProxyTokenFetchSuccessCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyTokenFetchSuccessCount:");
}

id objc_msgSend_setProxyTrafficState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyTrafficState:");
}

id objc_msgSend_setProxyTrafficState_proxyTraffic_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyTrafficState:proxyTraffic:");
}

id objc_msgSend_setProxyURL_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyURL:");
}

id objc_msgSend_setProxyVendor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyVendor:");
}

id objc_msgSend_setProxyVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setProxyVersion:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQuicAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQuicAgentUUID:");
}

id objc_msgSend_setQuicProxyPathDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQuicProxyPathDelegate:");
}

id objc_msgSend_setQuicRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setQuicRegistration:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setRegisteredNetworkAgent_fileDescriptor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRegisteredNetworkAgent:fileDescriptor:");
}

id objc_msgSend_setRequestedServerUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestedServerUUID:");
}

id objc_msgSend_setRequestedTokenCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setRequestedTokenCount:");
}

id objc_msgSend_setResetDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResetDate:");
}

id objc_msgSend_setResetTomorrowDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResetTomorrowDate:");
}

id objc_msgSend_setResolvedAddresses_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolvedAddresses:");
}

id objc_msgSend_setResolver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolver:");
}

id objc_msgSend_setResolverAgentUUID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolverAgentUUID:");
}

id objc_msgSend_setResolverRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResolverRegistration:");
}

id objc_msgSend_setResultType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResultType:");
}

id objc_msgSend_setResumableSessionCounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResumableSessionCounts:");
}

id objc_msgSend_setResurrectionDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setResurrectionDate:");
}

id objc_msgSend_setSafariAllEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariAllEnabled:");
}

id objc_msgSend_setSafariDNSEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariDNSEnabled:");
}

id objc_msgSend_setSafariHTTPEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariHTTPEnabled:");
}

id objc_msgSend_setSafariMetricsEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariMetricsEnabled:");
}

id objc_msgSend_setSafariPrivateAllEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariPrivateAllEnabled:");
}

id objc_msgSend_setSafariPrivateDNSEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariPrivateDNSEnabled:");
}

id objc_msgSend_setSafariPrivateUnencryptedEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariPrivateUnencryptedEnabled:");
}

id objc_msgSend_setSafariTrackersEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariTrackersEnabled:");
}

id objc_msgSend_setSafariUnencryptedEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSafariUnencryptedEnabled:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setServiceStatus_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatus:");
}

id objc_msgSend_setServiceStatusActiveCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusActiveCount:");
}

id objc_msgSend_setServiceStatusDisabledCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusDisabledCount:");
}

id objc_msgSend_setServiceStatusEndTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusEndTime:");
}

id objc_msgSend_setServiceStatusFraudAlertCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusFraudAlertCount:");
}

id objc_msgSend_setServiceStatusNetworkOutageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusNetworkOutageCount:");
}

id objc_msgSend_setServiceStatusOutageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusOutageCount:");
}

id objc_msgSend_setServiceStatusStartTime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusStartTime:");
}

id objc_msgSend_setServiceStatusSubscriberUnsupportedRegionCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusSubscriberUnsupportedRegionCount:");
}

id objc_msgSend_setServiceStatusSystemIncompatibleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusSystemIncompatibleCount:");
}

id objc_msgSend_setServiceStatusUnsupportedRegionCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setServiceStatusUnsupportedRegionCount:");
}

id objc_msgSend_setSessionDescription_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSessionDescription:");
}

id objc_msgSend_setShouldIgnoreDoNotDisturb_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldIgnoreDoNotDisturb:");
}

id objc_msgSend_setShouldIgnoreDowntime_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldIgnoreDowntime:");
}

id objc_msgSend_setShouldSave_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldSave:");
}

id objc_msgSend_setShouldSuppressScreenLightUp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setShouldSuppressScreenLightUp:");
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignature:");
}

id objc_msgSend_setSignatureAlgorithm_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSignatureAlgorithm:");
}

id objc_msgSend_setSingleHopRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSingleHopRegistered:");
}

id objc_msgSend_setSingleHopRegistration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSingleHopRegistration:");
}

id objc_msgSend_setSortDescriptors_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSortDescriptors:");
}

id objc_msgSend_setStatistics_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStatistics:");
}

id objc_msgSend_setStats_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setStats:");
}

id objc_msgSend_setSubscriberEnabledFromNonSettingsApp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSubscriberEnabledFromNonSettingsApp:");
}

id objc_msgSend_setSuccess_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSuccess:");
}

id objc_msgSend_setSupportsFallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSupportsFallback:");
}

id objc_msgSend_setSystemIncompatibleCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setSystemIncompatibleCount:");
}

id objc_msgSend_setTargetShape_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTargetShape:");
}

id objc_msgSend_setTcpProxyFqdn_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTcpProxyFqdn:");
}

id objc_msgSend_setTierType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTierType:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeoutIntervalForRequest_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeoutIntervalForRequest:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setToDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setToDate:");
}

id objc_msgSend_setToggleState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setToggleState:");
}

id objc_msgSend_setTokenCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenCount:");
}

id objc_msgSend_setTokenCounts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenCounts:");
}

id objc_msgSend_setTokenFetchEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenFetchEnabled:");
}

id objc_msgSend_setTokenFetchTriggered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenFetchTriggered:");
}

id objc_msgSend_setTokenInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenInfo:");
}

id objc_msgSend_setTokenKeyID_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenKeyID:");
}

id objc_msgSend_setTokenKeyInfo_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenKeyInfo:");
}

id objc_msgSend_setTokenOutageCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenOutageCount:");
}

id objc_msgSend_setTokenProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenProxy:");
}

id objc_msgSend_setTokenServerAddress_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTokenServerAddress:");
}

id objc_msgSend_setTrainingData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrainingData:");
}

id objc_msgSend_setTransparencyKeyBundle_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransparencyKeyBundle:");
}

id objc_msgSend_setTransparencyProof_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransparencyProof:");
}

id objc_msgSend_setTransparencyState_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTransparencyState:");
}

id objc_msgSend_setTrialConfigVersion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setTrialConfigVersion:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setType:");
}

id objc_msgSend_setUnactivatedTokenCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnactivatedTokenCount:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUnencryptedEnabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUnencryptedEnabled:");
}

id objc_msgSend_setUsedEdgesGeneration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUsedEdgesGeneration:");
}

id objc_msgSend_setUserActivated_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserActivated:");
}

id objc_msgSend_setUserEventAgentProberParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserEventAgentProberParameters");
}

id objc_msgSend_setUserEventAgentTimer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserEventAgentTimer");
}

id objc_msgSend_setUserEventAgentTokenFetchParameters(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserEventAgentTokenFetchParameters");
}

id objc_msgSend_setUserPreferredTier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserPreferredTier:");
}

id objc_msgSend_setUserTier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserTier:");
}

id objc_msgSend_setUserTier_resetDate_clearResetDate_changeSource_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setUserTier:resetDate:clearResetDate:changeSource:");
}

id objc_msgSend_setValidationHostname_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValidationHostname:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVendor_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVendor:");
}

id objc_msgSend_setVoluntary_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setVoluntary:");
}

id objc_msgSend_setWaitsForConnectivity_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWaitsForConnectivity:");
}

id objc_msgSend_setWifiStatusActiveCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiStatusActiveCount:");
}

id objc_msgSend_setWifiStatusBlockedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiStatusBlockedCount:");
}

id objc_msgSend_setWifiStatusDisabledCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWifiStatusDisabledCount:");
}

id objc_msgSend_setWillResetSubscriberTierTomorrow_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWillResetSubscriberTierTomorrow:");
}

id objc_msgSend_setWiredStatusActiveCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiredStatusActiveCount:");
}

id objc_msgSend_setWiredStatusBlockedCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiredStatusBlockedCount:");
}

id objc_msgSend_setWiredStatusDisabledCount_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWiredStatusDisabledCount:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_loggingPrivacyLevel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_loggingPrivacyLevel:");
}

id objc_msgSend_set_socketStreamProperties_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_socketStreamProperties:");
}

id objc_msgSend_set_sourceApplicationAuditTokenData_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_sourceApplicationAuditTokenData:");
}

id objc_msgSend_set_sourceApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:");
}

id objc_msgSend_set_sourceApplicationSecondaryIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_sourceApplicationSecondaryIdentifier:");
}

id objc_msgSend_set_usesNWLoader_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "set_usesNWLoader:");
}

id objc_msgSend_setup(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setup");
}

id objc_msgSend_setupMasqueProxyWith_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupMasqueProxyWith:");
}

id objc_msgSend_setupMultiHopProxyRegistrations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupMultiHopProxyRegistrations");
}

id objc_msgSend_setupNetworkSpecificMultiHopProxyRegistrations_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupNetworkSpecificMultiHopProxyRegistrations:");
}

id objc_msgSend_setupProxyAgentsForceUpdateDelegate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupProxyAgentsForceUpdateDelegate:");
}

id objc_msgSend_setupSingleHopProxyRegistrations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupSingleHopProxyRegistrations");
}

id objc_msgSend_setupWithPath_subscriber_unlimited_geohashSharingEnabled_geohashOverride_configEpoch_linkQuality_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupWithPath:subscriber:unlimited:geohashSharingEnabled:geohashOverride:configEpoch:linkQuality:");
}

id objc_msgSend_shape(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shape");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedCoreDataContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedCoreDataContext");
}

id objc_msgSend_sharedDeviceIdentity(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedDeviceIdentity");
}

id objc_msgSend_sharedEmphemeralSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedEmphemeralSession");
}

id objc_msgSend_sharedHandler(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedHandler");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedMaintainer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedMaintainer");
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedManager");
}

id objc_msgSend_sharedMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedMonitor");
}

id objc_msgSend_sharedTokenManager(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedTokenManager");
}

id objc_msgSend_sharedURLSession(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sharedURLSession");
}

id objc_msgSend_shortName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shortName");
}

id objc_msgSend_shouldBePenalized(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "shouldBePenalized");
}

id objc_msgSend_signData_andFetchDeviceIdentityCertificate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signData:andFetchDeviceIdentityCertificate:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "signature");
}

id objc_msgSend_singleHopAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopAgentRegistered:");
}

id objc_msgSend_singleHopAgentUnregistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopAgentUnregistered:");
}

id objc_msgSend_singleHopFallbackProxyAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopFallbackProxyAgentRegistered:");
}

id objc_msgSend_singleHopFallbackProxyAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopFallbackProxyAgentUUID");
}

id objc_msgSend_singleHopFallbackProxyConfigHash_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopFallbackProxyConfigHash:");
}

id objc_msgSend_singleHopProxyAgentRegistered_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopProxyAgentRegistered:");
}

id objc_msgSend_singleHopProxyAgentUUID(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopProxyAgentUUID");
}

id objc_msgSend_singleHopRegistered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopRegistered");
}

id objc_msgSend_singleHopRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "singleHopRegistration");
}

id objc_msgSend_skipWithOrder_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "skipWithOrder:");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortEdgesByDistanceWithNewLocation_checkOnly_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortEdgesByDistanceWithNewLocation:checkOnly:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "source");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "start");
}

id objc_msgSend_startConnectionForSessionTicketsWithEndpoint_parameters_dohQueryType_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startConnectionForSessionTicketsWithEndpoint:parameters:dohQueryType:completionHandler:");
}

id objc_msgSend_startLocationMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startLocationMonitor");
}

id objc_msgSend_startMonitoringEventType_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startMonitoringEventType:error:");
}

id objc_msgSend_startOwnerModeWithEventName_handlesReceivedCallback_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "startOwnerModeWithEventName:handlesReceivedCallback:");
}

id objc_msgSend_statistics(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statistics");
}

id objc_msgSend_stats(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stats");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "statusCode");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stop");
}

id objc_msgSend_stopLocationMonitor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopLocationMonitor");
}

id objc_msgSend_stopWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stopWithCompletionHandler:");
}

id objc_msgSend_strides(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "strides");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByPaddingToLength_withString_startingAtIndex_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringByPaddingToLength:withString:startingAtIndex:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringFromLinkQualityValue_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringFromLinkQualityValue:");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithValidatedFormat:validFormatSpecifiers:error:");
}

id objc_msgSend_stripWhitespace_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stripWhitespace:");
}

id objc_msgSend_subscriberEnabledFromNonSettingsApp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriberEnabledFromNonSettingsApp");
}

id objc_msgSend_subscriberTierIsProhibited_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "subscriberTierIsProhibited:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_success(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "success");
}

id objc_msgSend_supportsFallback(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsFallback");
}

id objc_msgSend_supportsResumption(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsResumption");
}

id objc_msgSend_supportsReverseProxying(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "supportsReverseProxying");
}

id objc_msgSend_suspendPrivacyProxyTemporarily_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "suspendPrivacyProxyTemporarily:");
}

id objc_msgSend_switchProxy_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "switchProxy:");
}

id objc_msgSend_systemIncompatibleCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemIncompatibleCount");
}

id objc_msgSend_systemProcessOnly(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "systemProcessOnly");
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tag");
}

id objc_msgSend_targetHost(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "targetHost");
}

id objc_msgSend_targetInformations(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "targetInformations");
}

id objc_msgSend_tcpProxyFqdn(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tcpProxyFqdn");
}

id objc_msgSend_tearDownMultiHopRegistration(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tearDownMultiHopRegistration");
}

id objc_msgSend_tearDownNetworkDiscoveredProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tearDownNetworkDiscoveredProxy");
}

id objc_msgSend_teardownNetworkAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "teardownNetworkAgent");
}

id objc_msgSend_telemetryService(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "telemetryService");
}

id objc_msgSend_telemetryURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "telemetryURL");
}

id objc_msgSend_tier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tier");
}

id objc_msgSend_tierString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tierString");
}

id objc_msgSend_tierToString(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tierToString");
}

id objc_msgSend_tierType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tierType");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeZone(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeZone");
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timeZoneWithAbbreviation_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timeZoneWithAbbreviation:");
}

id objc_msgSend_timerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timerWithTimeInterval:repeats:block:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "timestamp");
}

id objc_msgSend_toDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toDate");
}

id objc_msgSend_toggleState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "toggleState");
}

id objc_msgSend_tokenAdded(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenAdded");
}

id objc_msgSend_tokenChallenge(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenChallenge");
}

id objc_msgSend_tokenContent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenContent");
}

id objc_msgSend_tokenCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenCount");
}

id objc_msgSend_tokenExpiryTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenExpiryTimestamp");
}

id objc_msgSend_tokenFetchActive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenFetchActive");
}

id objc_msgSend_tokenFetchEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenFetchEnabled");
}

id objc_msgSend_tokenFetchOutage(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenFetchOutage");
}

id objc_msgSend_tokenFetchTriggered(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenFetchTriggered");
}

id objc_msgSend_tokenFetchURL(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenFetchURL");
}

id objc_msgSend_tokenFetched(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenFetched");
}

id objc_msgSend_tokenInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenInfo");
}

id objc_msgSend_tokenInfoInvalid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenInfoInvalid:");
}

id objc_msgSend_tokenIssuanceAllowed(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenIssuanceAllowed");
}

id objc_msgSend_tokenIssuanceLimitReached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenIssuanceLimitReached");
}

id objc_msgSend_tokenIssuanceRestrictedUntilDate(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenIssuanceRestrictedUntilDate");
}

id objc_msgSend_tokenKeyInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenKeyInfo");
}

id objc_msgSend_tokenKeys(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenKeys");
}

id objc_msgSend_tokenLowWaterMarkReached(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenLowWaterMarkReached");
}

id objc_msgSend_tokenLowWaterMarkReached_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenLowWaterMarkReached:");
}

id objc_msgSend_tokenLowWaterMarkReachedForAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenLowWaterMarkReachedForAgent:");
}

id objc_msgSend_tokenOutageCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenOutageCount");
}

id objc_msgSend_tokenProxy(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenProxy");
}

id objc_msgSend_tokenRateLimited_untilDate_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenRateLimited:untilDate:");
}

id objc_msgSend_tokenServerAddress(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenServerAddress");
}

id objc_msgSend_tokenType(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenType");
}

id objc_msgSend_tokenTypeEnumToString_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenTypeEnumToString:");
}

id objc_msgSend_tokenWaitingActivationWithContent_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokenWaitingActivationWithContent:error:");
}

id objc_msgSend_tokensEmpty(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "tokensEmpty");
}

id objc_msgSend_totalDataInKeychainWithIdentifier_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "totalDataInKeychainWithIdentifier:");
}

id objc_msgSend_trainModel(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trainModel");
}

id objc_msgSend_transparencyInternalProof(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transparencyInternalProof");
}

id objc_msgSend_transparencyKeyBundle(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transparencyKeyBundle");
}

id objc_msgSend_transparencyProof(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transparencyProof");
}

id objc_msgSend_transparencyState(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "transparencyState");
}

id objc_msgSend_trialConfigVersion(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trialConfigVersion");
}

id objc_msgSend_triggerProactiveTokenFetch_lowerTokenCountThreshold_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "triggerProactiveTokenFetch:lowerTokenCountThreshold:");
}

id objc_msgSend_trustedNetworkDiscoveredProxies(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "trustedNetworkDiscoveredProxies");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "type");
}

id objc_msgSend_typeRequiresOriginName(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "typeRequiresOriginName");
}

id objc_msgSend_typeRequiresRedemptionNonce(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "typeRequiresRedemptionNonce");
}

id objc_msgSend_uid_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "uid:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unencryptedEnabled(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unencryptedEnabled");
}

id objc_msgSend_unregisterForFeatureChangeNotificationsUsingObserver_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterForFeatureChangeNotificationsUsingObserver:");
}

id objc_msgSend_unregisterNetworkAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterNetworkAgent");
}

id objc_msgSend_unregisterResolverAgent(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unregisterResolverAgent");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "unsignedShortValue");
}

id objc_msgSend_updateConfigEpoch_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConfigEpoch:");
}

id objc_msgSend_updateConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateConfiguration:");
}

id objc_msgSend_updateDNSFilteringHint_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateDNSFilteringHint:");
}

id objc_msgSend_updateGeohashSharing_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGeohashSharing:");
}

id objc_msgSend_updateGeohashSharingPreference_geohashOverride_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateGeohashSharingPreference:geohashOverride:");
}

id objc_msgSend_updateIngressProxy_egressProxy_proxyPathWeight_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateIngressProxy:egressProxy:proxyPathWeight:");
}

id objc_msgSend_updateKnownNetworkProfile_properties_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateKnownNetworkProfile:properties:error:");
}

id objc_msgSend_updateNetworkAgent_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateNetworkAgent:");
}

id objc_msgSend_updateProactiveTokenFetchConfiguration_statsDuration_lowerTokenCountThreshold_lowerTokenCountProbability_upperLWMCountThreshold_upperLWMCountProbabilityOffset_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateProactiveTokenFetchConfiguration:statsDuration:lowerTokenCountThreshold:lowerTokenCountProbability:upperLWMCountThreshold:upperLWMCountProbabilityOffset:");
}

id objc_msgSend_updateProxyInfo_resolverInfo_proxyPathList_fallbackProxyPathList_obliviousConfigs_proxiedContentMaps_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateProxyInfo:resolverInfo:proxyPathList:fallbackProxyPathList:obliviousConfigs:proxiedContentMaps:");
}

id objc_msgSend_updateSavedPrivateCloudComputeEnvironment_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSavedPrivateCloudComputeEnvironment:");
}

id objc_msgSend_updateTokenFetchURL_accessTokenURL_accessTokenTypes_accessTokenBlockedIssuers_authenticationType_ignoreInvalidCerts_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateTokenFetchURL:accessTokenURL:accessTokenTypes:accessTokenBlockedIssuers:authenticationType:ignoreInvalidCerts:");
}

id objc_msgSend_updateUserEventAgentData(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateUserEventAgentData");
}

id objc_msgSend_updateVendorDictionaryFromModel_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateVendorDictionaryFromModel:");
}

id objc_msgSend_url_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "url:");
}

id objc_msgSend_urlRequestTimeout(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "urlRequestTimeout");
}

id objc_msgSend_urls(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "urls");
}

id objc_msgSend_useDefaultNetworkInterface_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useDefaultNetworkInterface:");
}

id objc_msgSend_useGeohashFromServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "useGeohashFromServer");
}

id objc_msgSend_userPreferredTier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userPreferredTier");
}

id objc_msgSend_userPreferredTierChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userPreferredTierChanged:");
}

id objc_msgSend_userTier(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userTier");
}

id objc_msgSend_userTierChanged_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "userTierChanged:");
}

id objc_msgSend_usesDefaultConfigurationServer(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usesDefaultConfigurationServer");
}

id objc_msgSend_usesModernNetworkAPI(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "usesModernNetworkAPI");
}

id objc_msgSend_validatePrivacyProxyConfiguration_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validatePrivacyProxyConfiguration:");
}

id objc_msgSend_validateTransparencyIfNecessaryWithCompletion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateTransparencyIfNecessaryWithCompletion:");
}

id objc_msgSend_valueForHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForHTTPHeaderField:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_vendor(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "vendor");
}

id objc_msgSend_verifyConfigurationSignature_configuration_host_validateCert_completionHandler_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyConfigurationSignature:configuration:host:validateCert:completionHandler:");
}

id objc_msgSend_verifyExpiringProofs_for_completion_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "verifyExpiringProofs:for:completion:");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "version");
}

id objc_msgSend_viewContext(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "viewContext");
}

id objc_msgSend_waldoInfo(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waldoInfo");
}

id objc_msgSend_waldoTimestamp(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "waldoTimestamp");
}

id objc_msgSend_wasCaptive(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wasCaptive");
}

id objc_msgSend_weekday(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "weekday");
}

id objc_msgSend_weight(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "weight");
}

id objc_msgSend_wifiDisabled_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiDisabled:");
}

id objc_msgSend_wifiStatusActiveCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiStatusActiveCount");
}

id objc_msgSend_wifiStatusBlockedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiStatusBlockedCount");
}

id objc_msgSend_wifiStatusDisabledCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wifiStatusDisabledCount");
}

id objc_msgSend_willResetSubscriberTierTomorrow(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "willResetSubscriberTierTomorrow");
}

id objc_msgSend_wiredStatusActiveCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wiredStatusActiveCount");
}

id objc_msgSend_wiredStatusBlockedCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wiredStatusBlockedCount");
}

id objc_msgSend_wiredStatusDisabledCount(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "wiredStatusDisabledCount");
}
